
SparkNode8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006590  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20000000  00006590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000bb8  20000218  000067a8  00020218  2**3
                  ALLOC
  3 .stack        00002000  20000dd0  00007360  00020218  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027736  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ee8  00000000  00000000  000479cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f94  00000000  00000000  0004a8b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  0004e84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000878  00000000  00000000  0004ee63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017287  00000000  00000000  0004f6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007819  00000000  00000000  00066962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000781b6  00000000  00000000  0006e17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001774  00000000  00000000  000e6334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 2d 00 20 3d 1d 00 00 2d 1d 00 00 2d 1d 00 00     .-. =...-...-...
	...
      2c:	2d 1d 00 00 00 00 00 00 00 00 00 00 2d 1d 00 00     -...........-...
      3c:	2d 1d 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     -...-...-...-...
      4c:	2d 1d 00 00 b1 25 00 00 2d 1d 00 00 2d 1d 00 00     -....%..-...-...
      5c:	51 39 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     Q9..-...-...-...
      6c:	2d 1d 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     -...-...-...-...
      7c:	2d 1d 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     -...-...-...-...
      8c:	2d 1d 00 00 2d 1d 00 00 00 00 00 00 00 00 00 00     -...-...........
      9c:	2d 1d 00 00 2d 1d 00 00 2d 1d 00 00 2d 1d 00 00     -...-...-...-...
      ac:	e1 25 00 00 00 00 00 00                             .%......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000218 	.word	0x20000218
      d4:	00000000 	.word	0x00000000
      d8:	00006590 	.word	0x00006590

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000021c 	.word	0x2000021c
     108:	00006590 	.word	0x00006590
     10c:	00006590 	.word	0x00006590
     110:	00000000 	.word	0x00000000

00000114 <flashWrite>:
#define FLASH_SIZE 64 // 64 bytes is one page, must write a whole page at a time
uint8_t flash_mem[FLASH_SIZE];
const uint32_t flash_addr = 0x00030600;

void flashWrite()
{
     114:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = 0;
	for(uint8_t i=0;i<FLASH_SIZE;i++)
     116:	2300      	movs	r3, #0
     118:	e004      	b.n	124 <flashWrite+0x10>
		flash_mem[i] = 0;
     11a:	2100      	movs	r1, #0
     11c:	4a20      	ldr	r2, [pc, #128]	; (1a0 <flashWrite+0x8c>)
     11e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<FLASH_SIZE;i++)
     120:	3301      	adds	r3, #1
     122:	b2db      	uxtb	r3, r3
     124:	2b3f      	cmp	r3, #63	; 0x3f
     126:	d9f8      	bls.n	11a <flashWrite+0x6>
	flash_mem[p] = 0xcd; p++;
     128:	4b1d      	ldr	r3, [pc, #116]	; (1a0 <flashWrite+0x8c>)
     12a:	22cd      	movs	r2, #205	; 0xcd
     12c:	701a      	strb	r2, [r3, #0]
	
	// Put configuration
	flash_mem[p] = linkPacketSize >> 8; p++;
     12e:	4a1d      	ldr	r2, [pc, #116]	; (1a4 <flashWrite+0x90>)
     130:	8812      	ldrh	r2, [r2, #0]
     132:	0a11      	lsrs	r1, r2, #8
     134:	7059      	strb	r1, [r3, #1]
	flash_mem[p] = linkPacketSize & 0xFF; p++;
     136:	709a      	strb	r2, [r3, #2]
	flash_mem[p] = linkPacketRate >> 8; p++;
     138:	4a1b      	ldr	r2, [pc, #108]	; (1a8 <flashWrite+0x94>)
     13a:	8812      	ldrh	r2, [r2, #0]
     13c:	0a11      	lsrs	r1, r2, #8
     13e:	70d9      	strb	r1, [r3, #3]
	flash_mem[p] = linkPacketRate & 0xFF; p++;
     140:	711a      	strb	r2, [r3, #4]
	flash_mem[p] = linkSleepMode; p++;
     142:	4a1a      	ldr	r2, [pc, #104]	; (1ac <flashWrite+0x98>)
     144:	7812      	ldrb	r2, [r2, #0]
     146:	715a      	strb	r2, [r3, #5]
	flash_mem[p] = linkSyncWord >> 8; p++;
     148:	4a19      	ldr	r2, [pc, #100]	; (1b0 <flashWrite+0x9c>)
     14a:	8812      	ldrh	r2, [r2, #0]
     14c:	0a11      	lsrs	r1, r2, #8
     14e:	7199      	strb	r1, [r3, #6]
	flash_mem[p] = linkSyncWord & 0xFF; p++;
     150:	71da      	strb	r2, [r3, #7]
	flash_mem[p] = linkBidirectional; p++;
     152:	4a18      	ldr	r2, [pc, #96]	; (1b4 <flashWrite+0xa0>)
     154:	7812      	ldrb	r2, [r2, #0]
     156:	721a      	strb	r2, [r3, #8]
	flash_mem[p] = linkMaster; p++;
     158:	4a17      	ldr	r2, [pc, #92]	; (1b8 <flashWrite+0xa4>)
     15a:	7812      	ldrb	r2, [r2, #0]
     15c:	725a      	strb	r2, [r3, #9]
	flash_mem[p] = linkRandom; p++;
     15e:	4a17      	ldr	r2, [pc, #92]	; (1bc <flashWrite+0xa8>)
     160:	7812      	ldrb	r2, [r2, #0]
     162:	729a      	strb	r2, [r3, #10]
	flash_mem[p] = linkAudio; p++;
     164:	4a16      	ldr	r2, [pc, #88]	; (1c0 <flashWrite+0xac>)
     166:	7812      	ldrb	r2, [r2, #0]
     168:	72da      	strb	r2, [r3, #11]
	for(uint8_t i=0;i<12;i++)
     16a:	2300      	movs	r3, #0
	flash_mem[p] = linkAudio; p++;
     16c:	220c      	movs	r2, #12
	for(uint8_t i=0;i<12;i++)
     16e:	e007      	b.n	180 <flashWrite+0x6c>
		flash_mem[p++] = linkTXMask[i];
     170:	1c51      	adds	r1, r2, #1
     172:	4814      	ldr	r0, [pc, #80]	; (1c4 <flashWrite+0xb0>)
     174:	5cc4      	ldrb	r4, [r0, r3]
     176:	480a      	ldr	r0, [pc, #40]	; (1a0 <flashWrite+0x8c>)
     178:	5484      	strb	r4, [r0, r2]
	for(uint8_t i=0;i<12;i++)
     17a:	3301      	adds	r3, #1
     17c:	b2db      	uxtb	r3, r3
		flash_mem[p++] = linkTXMask[i];
     17e:	b2ca      	uxtb	r2, r1
	for(uint8_t i=0;i<12;i++)
     180:	2b0b      	cmp	r3, #11
     182:	d9f5      	bls.n	170 <flashWrite+0x5c>
	flash_mem[p] = audioDecimate; p++;	
     184:	4d06      	ldr	r5, [pc, #24]	; (1a0 <flashWrite+0x8c>)
     186:	4b10      	ldr	r3, [pc, #64]	; (1c8 <flashWrite+0xb4>)
     188:	781b      	ldrb	r3, [r3, #0]
     18a:	54ab      	strb	r3, [r5, r2]
	
	
	// Write
	flash_erase_row(flash_addr);
     18c:	4c0f      	ldr	r4, [pc, #60]	; (1cc <flashWrite+0xb8>)
     18e:	0020      	movs	r0, r4
     190:	4b0f      	ldr	r3, [pc, #60]	; (1d0 <flashWrite+0xbc>)
     192:	4798      	blx	r3
	flash_write_buffer(flash_addr, flash_mem, FLASH_SIZE);
     194:	2240      	movs	r2, #64	; 0x40
     196:	0029      	movs	r1, r5
     198:	0020      	movs	r0, r4
     19a:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <flashWrite+0xc0>)
     19c:	4798      	blx	r3
}
     19e:	bd70      	pop	{r4, r5, r6, pc}
     1a0:	20000284 	.word	0x20000284
     1a4:	200003ec 	.word	0x200003ec
     1a8:	20000476 	.word	0x20000476
     1ac:	20000279 	.word	0x20000279
     1b0:	2000027c 	.word	0x2000027c
     1b4:	20000472 	.word	0x20000472
     1b8:	200003e0 	.word	0x200003e0
     1bc:	2000027b 	.word	0x2000027b
     1c0:	20000278 	.word	0x20000278
     1c4:	200002c4 	.word	0x200002c4
     1c8:	20000480 	.word	0x20000480
     1cc:	00030600 	.word	0x00030600
     1d0:	0000203d 	.word	0x0000203d
     1d4:	00002061 	.word	0x00002061

000001d8 <flashRead>:

void flashRead()
{
     1d8:	b510      	push	{r4, lr}
	uint8_t p = 0;
	
	// Read
	flash_read_buffer(flash_addr, flash_mem, FLASH_SIZE);
     1da:	4c23      	ldr	r4, [pc, #140]	; (268 <flashRead+0x90>)
     1dc:	2240      	movs	r2, #64	; 0x40
     1de:	0021      	movs	r1, r4
     1e0:	4822      	ldr	r0, [pc, #136]	; (26c <flashRead+0x94>)
     1e2:	4b23      	ldr	r3, [pc, #140]	; (270 <flashRead+0x98>)
     1e4:	4798      	blx	r3
	for(uint8_t i=0;i<FLASH_SIZE;i++)
	usbPrintf("%02hx ", flash_mem[i]);
	usbPrintf("\n");*/
	
	// Get configuration
	if(flash_mem[p++]!= 0xcd) // header
     1e6:	7823      	ldrb	r3, [r4, #0]
     1e8:	2bcd      	cmp	r3, #205	; 0xcd
     1ea:	d000      	beq.n	1ee <flashRead+0x16>
	linkRandom = flash_mem[p++];
	linkAudio = flash_mem[p++];	
	for(uint8_t i=0;i<12;i++)
		linkTXMask[i] = flash_mem[p++];
	audioDecimate = flash_mem[p++];	
}
     1ec:	bd10      	pop	{r4, pc}
	linkPacketSize = flash_mem[p++]; linkPacketSize <<= 8;
     1ee:	4b1e      	ldr	r3, [pc, #120]	; (268 <flashRead+0x90>)
     1f0:	785a      	ldrb	r2, [r3, #1]
     1f2:	0212      	lsls	r2, r2, #8
	linkPacketSize |= flash_mem[p++];
     1f4:	7899      	ldrb	r1, [r3, #2]
     1f6:	430a      	orrs	r2, r1
     1f8:	491e      	ldr	r1, [pc, #120]	; (274 <flashRead+0x9c>)
     1fa:	800a      	strh	r2, [r1, #0]
	linkPacketRate = flash_mem[p++]; linkPacketRate <<= 8;
     1fc:	78da      	ldrb	r2, [r3, #3]
     1fe:	0212      	lsls	r2, r2, #8
	linkPacketRate |= flash_mem[p++];
     200:	7919      	ldrb	r1, [r3, #4]
     202:	430a      	orrs	r2, r1
     204:	491c      	ldr	r1, [pc, #112]	; (278 <flashRead+0xa0>)
     206:	800a      	strh	r2, [r1, #0]
	linkSleepMode = flash_mem[p++];
     208:	7959      	ldrb	r1, [r3, #5]
     20a:	4a1c      	ldr	r2, [pc, #112]	; (27c <flashRead+0xa4>)
     20c:	7011      	strb	r1, [r2, #0]
	linkSyncWord = flash_mem[p++]; linkSyncWord <<= 8;
     20e:	799a      	ldrb	r2, [r3, #6]
     210:	0212      	lsls	r2, r2, #8
	linkSyncWord |= flash_mem[p++];
     212:	79d9      	ldrb	r1, [r3, #7]
     214:	430a      	orrs	r2, r1
     216:	491a      	ldr	r1, [pc, #104]	; (280 <flashRead+0xa8>)
     218:	800a      	strh	r2, [r1, #0]
	linkBidirectional = flash_mem[p++];
     21a:	7a1a      	ldrb	r2, [r3, #8]
     21c:	1e51      	subs	r1, r2, #1
     21e:	418a      	sbcs	r2, r1
     220:	4918      	ldr	r1, [pc, #96]	; (284 <flashRead+0xac>)
     222:	700a      	strb	r2, [r1, #0]
	linkMaster = flash_mem[p++];
     224:	7a5a      	ldrb	r2, [r3, #9]
     226:	1e51      	subs	r1, r2, #1
     228:	418a      	sbcs	r2, r1
     22a:	4917      	ldr	r1, [pc, #92]	; (288 <flashRead+0xb0>)
     22c:	700a      	strb	r2, [r1, #0]
	linkRandom = flash_mem[p++];
     22e:	7a9a      	ldrb	r2, [r3, #10]
     230:	1e51      	subs	r1, r2, #1
     232:	418a      	sbcs	r2, r1
     234:	4915      	ldr	r1, [pc, #84]	; (28c <flashRead+0xb4>)
     236:	700a      	strb	r2, [r1, #0]
	linkAudio = flash_mem[p++];	
     238:	7adb      	ldrb	r3, [r3, #11]
     23a:	1e5a      	subs	r2, r3, #1
     23c:	4193      	sbcs	r3, r2
     23e:	4a14      	ldr	r2, [pc, #80]	; (290 <flashRead+0xb8>)
     240:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=0;i<12;i++)
     242:	2300      	movs	r3, #0
	linkAudio = flash_mem[p++];	
     244:	220c      	movs	r2, #12
	for(uint8_t i=0;i<12;i++)
     246:	e007      	b.n	258 <flashRead+0x80>
		linkTXMask[i] = flash_mem[p++];
     248:	1c51      	adds	r1, r2, #1
     24a:	4807      	ldr	r0, [pc, #28]	; (268 <flashRead+0x90>)
     24c:	5c80      	ldrb	r0, [r0, r2]
     24e:	4a11      	ldr	r2, [pc, #68]	; (294 <flashRead+0xbc>)
     250:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0;i<12;i++)
     252:	3301      	adds	r3, #1
     254:	b2db      	uxtb	r3, r3
		linkTXMask[i] = flash_mem[p++];
     256:	b2ca      	uxtb	r2, r1
	for(uint8_t i=0;i<12;i++)
     258:	2b0b      	cmp	r3, #11
     25a:	d9f5      	bls.n	248 <flashRead+0x70>
	audioDecimate = flash_mem[p++];	
     25c:	4b02      	ldr	r3, [pc, #8]	; (268 <flashRead+0x90>)
     25e:	5c9a      	ldrb	r2, [r3, r2]
     260:	4b0d      	ldr	r3, [pc, #52]	; (298 <flashRead+0xc0>)
     262:	701a      	strb	r2, [r3, #0]
     264:	e7c2      	b.n	1ec <flashRead+0x14>
     266:	46c0      	nop			; (mov r8, r8)
     268:	20000284 	.word	0x20000284
     26c:	00030600 	.word	0x00030600
     270:	00001ffd 	.word	0x00001ffd
     274:	200003ec 	.word	0x200003ec
     278:	20000476 	.word	0x20000476
     27c:	20000279 	.word	0x20000279
     280:	2000027c 	.word	0x2000027c
     284:	20000472 	.word	0x20000472
     288:	200003e0 	.word	0x200003e0
     28c:	2000027b 	.word	0x2000027b
     290:	20000278 	.word	0x20000278
     294:	200002c4 	.word	0x200002c4
     298:	20000480 	.word	0x20000480

0000029c <defaultLinkSettings>:

void defaultLinkSettings()
{
     29c:	b510      	push	{r4, lr}
	flash_init();
     29e:	4b1f      	ldr	r3, [pc, #124]	; (31c <defaultLinkSettings+0x80>)
     2a0:	4798      	blx	r3
	
	linkPacketSize = 240;
     2a2:	22f0      	movs	r2, #240	; 0xf0
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <defaultLinkSettings+0x84>)
     2a6:	801a      	strh	r2, [r3, #0]
	linkPacketRate = 2000;
     2a8:	22fa      	movs	r2, #250	; 0xfa
     2aa:	00d2      	lsls	r2, r2, #3
     2ac:	4b1d      	ldr	r3, [pc, #116]	; (324 <defaultLinkSettings+0x88>)
     2ae:	801a      	strh	r2, [r3, #0]
	linkSleepMode = SPARK_SLEEP_SHALLOW;
     2b0:	2202      	movs	r2, #2
     2b2:	4b1d      	ldr	r3, [pc, #116]	; (328 <defaultLinkSettings+0x8c>)
     2b4:	701a      	strb	r2, [r3, #0]
	linkSyncWord = 0xc8b5;
     2b6:	4a1d      	ldr	r2, [pc, #116]	; (32c <defaultLinkSettings+0x90>)
     2b8:	4b1d      	ldr	r3, [pc, #116]	; (330 <defaultLinkSettings+0x94>)
     2ba:	801a      	strh	r2, [r3, #0]
	linkPreambleSize = 0x0f;
     2bc:	220f      	movs	r2, #15
     2be:	4b1d      	ldr	r3, [pc, #116]	; (334 <defaultLinkSettings+0x98>)
     2c0:	801a      	strh	r2, [r3, #0]
	linkMinNoiLvl = 0x11;
     2c2:	3202      	adds	r2, #2
     2c4:	4b1c      	ldr	r3, [pc, #112]	; (338 <defaultLinkSettings+0x9c>)
     2c6:	801a      	strh	r2, [r3, #0]
	linkMinPulAmp = 0x2a;
     2c8:	3219      	adds	r2, #25
     2ca:	4b1c      	ldr	r3, [pc, #112]	; (33c <defaultLinkSettings+0xa0>)
     2cc:	801a      	strh	r2, [r3, #0]
	linkMinSigStr = 0x12;
     2ce:	3a18      	subs	r2, #24
     2d0:	4b1b      	ldr	r3, [pc, #108]	; (340 <defaultLinkSettings+0xa4>)
     2d2:	801a      	strh	r2, [r3, #0]
	linkBidirectional = true;
     2d4:	3a11      	subs	r2, #17
     2d6:	4b1b      	ldr	r3, [pc, #108]	; (344 <defaultLinkSettings+0xa8>)
     2d8:	701a      	strb	r2, [r3, #0]
	linkMaster =  false;
     2da:	2200      	movs	r2, #0
     2dc:	4b1a      	ldr	r3, [pc, #104]	; (348 <defaultLinkSettings+0xac>)
     2de:	701a      	strb	r2, [r3, #0]
	linkRandom = false;
     2e0:	4b1a      	ldr	r3, [pc, #104]	; (34c <defaultLinkSettings+0xb0>)
     2e2:	701a      	strb	r2, [r3, #0]
	linkAudio = false;
     2e4:	4b1a      	ldr	r3, [pc, #104]	; (350 <defaultLinkSettings+0xb4>)
     2e6:	701a      	strb	r2, [r3, #0]
	
	linkTXMask[0] = 0x00;
     2e8:	4b1a      	ldr	r3, [pc, #104]	; (354 <defaultLinkSettings+0xb8>)
     2ea:	701a      	strb	r2, [r3, #0]
	linkTXMask[1] = 0x00;
     2ec:	705a      	strb	r2, [r3, #1]
	linkTXMask[2] = 0xbd;
     2ee:	21bd      	movs	r1, #189	; 0xbd
     2f0:	7099      	strb	r1, [r3, #2]
	linkTXMask[3] = 0xbb;
     2f2:	3902      	subs	r1, #2
     2f4:	70d9      	strb	r1, [r3, #3]
	linkTXMask[4] = 0xb9;
     2f6:	3902      	subs	r1, #2
     2f8:	7119      	strb	r1, [r3, #4]
	linkTXMask[5] = 0xb7;
     2fa:	3902      	subs	r1, #2
     2fc:	7159      	strb	r1, [r3, #5]
	linkTXMask[6] = 0xb5;
     2fe:	3902      	subs	r1, #2
     300:	7199      	strb	r1, [r3, #6]
	linkTXMask[7] = 0xb3;
     302:	3902      	subs	r1, #2
     304:	71d9      	strb	r1, [r3, #7]
	linkTXMask[8] = 0x00;
     306:	721a      	strb	r2, [r3, #8]
	linkTXMask[9] = 0x00;
     308:	725a      	strb	r2, [r3, #9]
	linkTXMask[10] = 0x00;
     30a:	729a      	strb	r2, [r3, #10]
	linkTXMask[11] = 0x00;
     30c:	72da      	strb	r2, [r3, #11]
	
	audioDecimate = 6;
     30e:	3206      	adds	r2, #6
     310:	4b11      	ldr	r3, [pc, #68]	; (358 <defaultLinkSettings+0xbc>)
     312:	701a      	strb	r2, [r3, #0]
	
	// Try to read configuration
	flashRead();
     314:	4b11      	ldr	r3, [pc, #68]	; (35c <defaultLinkSettings+0xc0>)
     316:	4798      	blx	r3
}
     318:	bd10      	pop	{r4, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00001fc9 	.word	0x00001fc9
     320:	200003ec 	.word	0x200003ec
     324:	20000476 	.word	0x20000476
     328:	20000279 	.word	0x20000279
     32c:	ffffc8b5 	.word	0xffffc8b5
     330:	2000027c 	.word	0x2000027c
     334:	20000474 	.word	0x20000474
     338:	20000470 	.word	0x20000470
     33c:	20000260 	.word	0x20000260
     340:	200003e2 	.word	0x200003e2
     344:	20000472 	.word	0x20000472
     348:	200003e0 	.word	0x200003e0
     34c:	2000027b 	.word	0x2000027b
     350:	20000278 	.word	0x20000278
     354:	200002c4 	.word	0x200002c4
     358:	20000480 	.word	0x20000480
     35c:	000001d9 	.word	0x000001d9

00000360 <configureLink>:

void configureLink()
{
     360:	b530      	push	{r4, r5, lr}
     362:	b085      	sub	sp, #20
	linkPacketSize = linkPacketSize & 0xFFF0; // Multiple of 2 bytes
     364:	4b14      	ldr	r3, [pc, #80]	; (3b8 <configureLink+0x58>)
     366:	881c      	ldrh	r4, [r3, #0]
     368:	220f      	movs	r2, #15
     36a:	4394      	bics	r4, r2
     36c:	801c      	strh	r4, [r3, #0]
	
	// Packet setup
	sparkPacketSetup(linkMinNoiLvl, linkMinPulAmp, linkMinSigStr, linkPreambleSize, linkPacketSize/8, linkSyncWord, linkRandom); // preamble, packet size, sync word, gen random
     36e:	4b13      	ldr	r3, [pc, #76]	; (3bc <configureLink+0x5c>)
     370:	781b      	ldrb	r3, [r3, #0]
     372:	4a13      	ldr	r2, [pc, #76]	; (3c0 <configureLink+0x60>)
     374:	7812      	ldrb	r2, [r2, #0]
     376:	4913      	ldr	r1, [pc, #76]	; (3c4 <configureLink+0x64>)
     378:	7809      	ldrb	r1, [r1, #0]
     37a:	4813      	ldr	r0, [pc, #76]	; (3c8 <configureLink+0x68>)
     37c:	7800      	ldrb	r0, [r0, #0]
     37e:	4d13      	ldr	r5, [pc, #76]	; (3cc <configureLink+0x6c>)
     380:	782d      	ldrb	r5, [r5, #0]
     382:	9502      	str	r5, [sp, #8]
     384:	4d12      	ldr	r5, [pc, #72]	; (3d0 <configureLink+0x70>)
     386:	882d      	ldrh	r5, [r5, #0]
     388:	9501      	str	r5, [sp, #4]
     38a:	08e4      	lsrs	r4, r4, #3
     38c:	b2e4      	uxtb	r4, r4
     38e:	9400      	str	r4, [sp, #0]
     390:	4c10      	ldr	r4, [pc, #64]	; (3d4 <configureLink+0x74>)
     392:	47a0      	blx	r4
	
	// Setup sleep and wakeup cycle
	sparkSleepSetup(linkSleepMode, linkPacketRate, 100); // sleep depth, packets/s, framelength in us
     394:	4b10      	ldr	r3, [pc, #64]	; (3d8 <configureLink+0x78>)
     396:	8819      	ldrh	r1, [r3, #0]
     398:	4b10      	ldr	r3, [pc, #64]	; (3dc <configureLink+0x7c>)
     39a:	7818      	ldrb	r0, [r3, #0]
     39c:	2264      	movs	r2, #100	; 0x64
     39e:	4b10      	ldr	r3, [pc, #64]	; (3e0 <configureLink+0x80>)
     3a0:	4798      	blx	r3
	
	// Link Mode
	sparkSetBidirectional(linkBidirectional, linkMaster);  
     3a2:	4b10      	ldr	r3, [pc, #64]	; (3e4 <configureLink+0x84>)
     3a4:	7819      	ldrb	r1, [r3, #0]
     3a6:	4b10      	ldr	r3, [pc, #64]	; (3e8 <configureLink+0x88>)
     3a8:	7818      	ldrb	r0, [r3, #0]
     3aa:	4b10      	ldr	r3, [pc, #64]	; (3ec <configureLink+0x8c>)
     3ac:	4798      	blx	r3
	
	// TX spectrum
	sparkSpectralSetup(linkTXMask);
     3ae:	4810      	ldr	r0, [pc, #64]	; (3f0 <configureLink+0x90>)
     3b0:	4b10      	ldr	r3, [pc, #64]	; (3f4 <configureLink+0x94>)
     3b2:	4798      	blx	r3
}
     3b4:	b005      	add	sp, #20
     3b6:	bd30      	pop	{r4, r5, pc}
     3b8:	200003ec 	.word	0x200003ec
     3bc:	20000474 	.word	0x20000474
     3c0:	200003e2 	.word	0x200003e2
     3c4:	20000260 	.word	0x20000260
     3c8:	20000470 	.word	0x20000470
     3cc:	2000027b 	.word	0x2000027b
     3d0:	2000027c 	.word	0x2000027c
     3d4:	00002d79 	.word	0x00002d79
     3d8:	20000476 	.word	0x20000476
     3dc:	20000279 	.word	0x20000279
     3e0:	00002bf1 	.word	0x00002bf1
     3e4:	200003e0 	.word	0x200003e0
     3e8:	20000472 	.word	0x20000472
     3ec:	0000350d 	.word	0x0000350d
     3f0:	200002c4 	.word	0x200002c4
     3f4:	00002e21 	.word	0x00002e21

000003f8 <resetStatistics>:
unsigned char statLastNSSI;
unsigned int  statLinkLost;
unsigned int  statException;

void resetStatistics()
{
     3f8:	b510      	push	{r4, lr}
  statSendPackets = 0;
     3fa:	2300      	movs	r3, #0
     3fc:	4a0e      	ldr	r2, [pc, #56]	; (438 <resetStatistics+0x40>)
     3fe:	6013      	str	r3, [r2, #0]
  statReceivedPackets = 0;
     400:	4a0e      	ldr	r2, [pc, #56]	; (43c <resetStatistics+0x44>)
     402:	6013      	str	r3, [r2, #0]
  statMissingPackets = 0;
     404:	4a0e      	ldr	r2, [pc, #56]	; (440 <resetStatistics+0x48>)
     406:	6013      	str	r3, [r2, #0]
  statNumErrors = 0;
     408:	4a0e      	ldr	r2, [pc, #56]	; (444 <resetStatistics+0x4c>)
     40a:	6013      	str	r3, [r2, #0]
  for(unsigned char i=0;i<31;i++)
     40c:	e005      	b.n	41a <resetStatistics+0x22>
    statBERdist[i] = 0;
     40e:	0099      	lsls	r1, r3, #2
     410:	2000      	movs	r0, #0
     412:	4a0d      	ldr	r2, [pc, #52]	; (448 <resetStatistics+0x50>)
     414:	5088      	str	r0, [r1, r2]
  for(unsigned char i=0;i<31;i++)
     416:	3301      	adds	r3, #1
     418:	b2db      	uxtb	r3, r3
     41a:	2b1e      	cmp	r3, #30
     41c:	d9f7      	bls.n	40e <resetStatistics+0x16>
  statLastRSSI = 0;
     41e:	2300      	movs	r3, #0
     420:	4a0a      	ldr	r2, [pc, #40]	; (44c <resetStatistics+0x54>)
     422:	7013      	strb	r3, [r2, #0]
  statLastNSSI = 0;
     424:	4a0a      	ldr	r2, [pc, #40]	; (450 <resetStatistics+0x58>)
     426:	7013      	strb	r3, [r2, #0]
  statLinkLost = 0;
     428:	4a0a      	ldr	r2, [pc, #40]	; (454 <resetStatistics+0x5c>)
     42a:	6013      	str	r3, [r2, #0]
  statException = 0;
     42c:	4a0a      	ldr	r2, [pc, #40]	; (458 <resetStatistics+0x60>)
     42e:	6013      	str	r3, [r2, #0]
  
  audioResetStatistics();
     430:	4b0a      	ldr	r3, [pc, #40]	; (45c <resetStatistics+0x64>)
     432:	4798      	blx	r3
}
     434:	bd10      	pop	{r4, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	200002d4 	.word	0x200002d4
     43c:	200003e8 	.word	0x200003e8
     440:	20000280 	.word	0x20000280
     444:	200002d8 	.word	0x200002d8
     448:	20000364 	.word	0x20000364
     44c:	200002e0 	.word	0x200002e0
     450:	200003e4 	.word	0x200003e4
     454:	200002dc 	.word	0x200002dc
     458:	200002d0 	.word	0x200002d0
     45c:	00001455 	.word	0x00001455

00000460 <printStatistics>:

void printStatistics()
{   
     460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     462:	46ce      	mov	lr, r9
     464:	4647      	mov	r7, r8
     466:	b580      	push	{r7, lr}
  // Tell mode
  if(sparkIsBidirectional())
     468:	4b9d      	ldr	r3, [pc, #628]	; (6e0 <printStatistics+0x280>)
     46a:	4798      	blx	r3
     46c:	2800      	cmp	r0, #0
     46e:	d100      	bne.n	472 <printStatistics+0x12>
     470:	e0a5      	b.n	5be <printStatistics+0x15e>
  {
	  if(sparkIsMaster())
     472:	4b9c      	ldr	r3, [pc, #624]	; (6e4 <printStatistics+0x284>)
     474:	4798      	blx	r3
     476:	2800      	cmp	r0, #0
     478:	d100      	bne.n	47c <printStatistics+0x1c>
     47a:	e094      	b.n	5a6 <printStatistics+0x146>
		usbPrintf("Bidirectional Master\n");
     47c:	489a      	ldr	r0, [pc, #616]	; (6e8 <printStatistics+0x288>)
     47e:	4b9b      	ldr	r3, [pc, #620]	; (6ec <printStatistics+0x28c>)
     480:	4798      	blx	r3
	  }
	  else
		usbPrintf("TX Mode\n");
  }
    
  usbPrintf("statException = %d\n", statException);
     482:	4b9b      	ldr	r3, [pc, #620]	; (6f0 <printStatistics+0x290>)
     484:	6819      	ldr	r1, [r3, #0]
     486:	489b      	ldr	r0, [pc, #620]	; (6f4 <printStatistics+0x294>)
     488:	4c98      	ldr	r4, [pc, #608]	; (6ec <printStatistics+0x28c>)
     48a:	47a0      	blx	r4
  usbPrintf("sparkLastInt = %d\n", sparkLastInt);
     48c:	4b9a      	ldr	r3, [pc, #616]	; (6f8 <printStatistics+0x298>)
     48e:	7819      	ldrb	r1, [r3, #0]
     490:	489a      	ldr	r0, [pc, #616]	; (6fc <printStatistics+0x29c>)
     492:	47a0      	blx	r4
  usbPrintf("statLinkLost = %d\n", statLinkLost);
     494:	4b9a      	ldr	r3, [pc, #616]	; (700 <printStatistics+0x2a0>)
     496:	6819      	ldr	r1, [r3, #0]
     498:	489a      	ldr	r0, [pc, #616]	; (704 <printStatistics+0x2a4>)
     49a:	47a0      	blx	r4
  usbPrintf("statSendPackets = %d\n", statSendPackets);
     49c:	4b9a      	ldr	r3, [pc, #616]	; (708 <printStatistics+0x2a8>)
     49e:	6819      	ldr	r1, [r3, #0]
     4a0:	489a      	ldr	r0, [pc, #616]	; (70c <printStatistics+0x2ac>)
     4a2:	47a0      	blx	r4
  usbPrintf("statReceivedPackets = %d\n", statReceivedPackets);
     4a4:	4d9a      	ldr	r5, [pc, #616]	; (710 <printStatistics+0x2b0>)
     4a6:	6829      	ldr	r1, [r5, #0]
     4a8:	489a      	ldr	r0, [pc, #616]	; (714 <printStatistics+0x2b4>)
     4aa:	47a0      	blx	r4
  usbPrintf("statMissingPackets = %d\n", statMissingPackets);
     4ac:	4e9a      	ldr	r6, [pc, #616]	; (718 <printStatistics+0x2b8>)
     4ae:	6831      	ldr	r1, [r6, #0]
     4b0:	489a      	ldr	r0, [pc, #616]	; (71c <printStatistics+0x2bc>)
     4b2:	47a0      	blx	r4
  usbPrintf("statNumErrors = %d\n", statNumErrors);
     4b4:	4f9a      	ldr	r7, [pc, #616]	; (720 <printStatistics+0x2c0>)
     4b6:	6839      	ldr	r1, [r7, #0]
     4b8:	489a      	ldr	r0, [pc, #616]	; (724 <printStatistics+0x2c4>)
     4ba:	47a0      	blx	r4
  usbPrintf("=> PER = 1 in %d\n", (statReceivedPackets+statMissingPackets)/statMissingPackets);
     4bc:	6831      	ldr	r1, [r6, #0]
     4be:	682b      	ldr	r3, [r5, #0]
     4c0:	18c8      	adds	r0, r1, r3
     4c2:	4e99      	ldr	r6, [pc, #612]	; (728 <printStatistics+0x2c8>)
     4c4:	47b0      	blx	r6
     4c6:	0001      	movs	r1, r0
     4c8:	4898      	ldr	r0, [pc, #608]	; (72c <printStatistics+0x2cc>)
     4ca:	47a0      	blx	r4
  usbPrintf("=> BER = 1 in %d\n",(statReceivedPackets*linkPacketSize)/statNumErrors);
     4cc:	4b98      	ldr	r3, [pc, #608]	; (730 <printStatistics+0x2d0>)
     4ce:	8818      	ldrh	r0, [r3, #0]
     4d0:	682b      	ldr	r3, [r5, #0]
     4d2:	4358      	muls	r0, r3
     4d4:	6839      	ldr	r1, [r7, #0]
     4d6:	47b0      	blx	r6
     4d8:	0001      	movs	r1, r0
     4da:	4896      	ldr	r0, [pc, #600]	; (734 <printStatistics+0x2d4>)
     4dc:	47a0      	blx	r4
  
  usbPrintf("0 errors: %d packets (%d%%)\n", statBERdist[0], (statBERdist[0]*100)/statReceivedPackets);
     4de:	4b96      	ldr	r3, [pc, #600]	; (738 <printStatistics+0x2d8>)
     4e0:	4698      	mov	r8, r3
     4e2:	681b      	ldr	r3, [r3, #0]
     4e4:	4699      	mov	r9, r3
     4e6:	2764      	movs	r7, #100	; 0x64
     4e8:	0018      	movs	r0, r3
     4ea:	4378      	muls	r0, r7
     4ec:	6829      	ldr	r1, [r5, #0]
     4ee:	47b0      	blx	r6
     4f0:	0002      	movs	r2, r0
     4f2:	4649      	mov	r1, r9
     4f4:	4891      	ldr	r0, [pc, #580]	; (73c <printStatistics+0x2dc>)
     4f6:	47a0      	blx	r4
  usbPrintf("1 errors: %d packets (%d%%)\n", statBERdist[1], (statBERdist[1]*100)/statReceivedPackets);
     4f8:	4643      	mov	r3, r8
     4fa:	685b      	ldr	r3, [r3, #4]
     4fc:	4699      	mov	r9, r3
     4fe:	0018      	movs	r0, r3
     500:	4378      	muls	r0, r7
     502:	6829      	ldr	r1, [r5, #0]
     504:	47b0      	blx	r6
     506:	0002      	movs	r2, r0
     508:	4649      	mov	r1, r9
     50a:	488d      	ldr	r0, [pc, #564]	; (740 <printStatistics+0x2e0>)
     50c:	47a0      	blx	r4
  usbPrintf("2 errors: %d packets (%d%%)\n", statBERdist[2], (statBERdist[2]*100)/statReceivedPackets);
     50e:	4643      	mov	r3, r8
     510:	689b      	ldr	r3, [r3, #8]
     512:	4699      	mov	r9, r3
     514:	0018      	movs	r0, r3
     516:	4378      	muls	r0, r7
     518:	6829      	ldr	r1, [r5, #0]
     51a:	47b0      	blx	r6
     51c:	0002      	movs	r2, r0
     51e:	4649      	mov	r1, r9
     520:	4888      	ldr	r0, [pc, #544]	; (744 <printStatistics+0x2e4>)
     522:	47a0      	blx	r4
  usbPrintf("3-4 errors: %d packets (%d%%)\n", statBERdist[3], (statBERdist[3]*100)/statReceivedPackets);
     524:	4643      	mov	r3, r8
     526:	68db      	ldr	r3, [r3, #12]
     528:	4699      	mov	r9, r3
     52a:	0018      	movs	r0, r3
     52c:	4378      	muls	r0, r7
     52e:	6829      	ldr	r1, [r5, #0]
     530:	47b0      	blx	r6
     532:	0002      	movs	r2, r0
     534:	4649      	mov	r1, r9
     536:	4884      	ldr	r0, [pc, #528]	; (748 <printStatistics+0x2e8>)
     538:	47a0      	blx	r4
  usbPrintf("5-8 errors: %d packets (%d%%)\n", statBERdist[4], (statBERdist[4]*100)/statReceivedPackets);
     53a:	4643      	mov	r3, r8
     53c:	691b      	ldr	r3, [r3, #16]
     53e:	4699      	mov	r9, r3
     540:	0018      	movs	r0, r3
     542:	4378      	muls	r0, r7
     544:	6829      	ldr	r1, [r5, #0]
     546:	47b0      	blx	r6
     548:	0002      	movs	r2, r0
     54a:	4649      	mov	r1, r9
     54c:	487f      	ldr	r0, [pc, #508]	; (74c <printStatistics+0x2ec>)
     54e:	47a0      	blx	r4
  usbPrintf("9-15 errors: %d packets (%d%%)\n", statBERdist[5], (statBERdist[5]*100)/statReceivedPackets);
     550:	4643      	mov	r3, r8
     552:	695b      	ldr	r3, [r3, #20]
     554:	4699      	mov	r9, r3
     556:	0018      	movs	r0, r3
     558:	4378      	muls	r0, r7
     55a:	6829      	ldr	r1, [r5, #0]
     55c:	47b0      	blx	r6
     55e:	0002      	movs	r2, r0
     560:	4649      	mov	r1, r9
     562:	487b      	ldr	r0, [pc, #492]	; (750 <printStatistics+0x2f0>)
     564:	47a0      	blx	r4
  usbPrintf("16-31 errors: %d packets (%d%%)\n", statBERdist[6], (statBERdist[6]*100)/statReceivedPackets);
     566:	4643      	mov	r3, r8
     568:	699b      	ldr	r3, [r3, #24]
     56a:	4699      	mov	r9, r3
     56c:	0018      	movs	r0, r3
     56e:	4378      	muls	r0, r7
     570:	6829      	ldr	r1, [r5, #0]
     572:	47b0      	blx	r6
     574:	0002      	movs	r2, r0
     576:	4649      	mov	r1, r9
     578:	4876      	ldr	r0, [pc, #472]	; (754 <printStatistics+0x2f4>)
     57a:	47a0      	blx	r4
  usbPrintf(">=32 errors: %d packets (%d%%)\n", statBERdist[7], (statBERdist[7]*100)/statReceivedPackets);
     57c:	4643      	mov	r3, r8
     57e:	69db      	ldr	r3, [r3, #28]
     580:	4698      	mov	r8, r3
     582:	0018      	movs	r0, r3
     584:	4378      	muls	r0, r7
     586:	6829      	ldr	r1, [r5, #0]
     588:	47b0      	blx	r6
     58a:	0002      	movs	r2, r0
     58c:	4641      	mov	r1, r8
     58e:	4872      	ldr	r0, [pc, #456]	; (758 <printStatistics+0x2f8>)
     590:	47a0      	blx	r4
  
  uint16_t p;
  
  p=0;
  std_buf[p] = 'T'; p++;
     592:	4b72      	ldr	r3, [pc, #456]	; (75c <printStatistics+0x2fc>)
     594:	2254      	movs	r2, #84	; 0x54
     596:	701a      	strb	r2, [r3, #0]
  std_buf[p] = 'X'; p++;
     598:	3204      	adds	r2, #4
     59a:	705a      	strb	r2, [r3, #1]
  std_buf[p] = ' '; p++;
     59c:	3a38      	subs	r2, #56	; 0x38
     59e:	709a      	strb	r2, [r3, #2]
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     5a0:	2400      	movs	r4, #0
  std_buf[p] = ' '; p++;
     5a2:	2303      	movs	r3, #3
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     5a4:	e021      	b.n	5ea <printStatistics+0x18a>
	  else if(sparkIsScanning())
     5a6:	4b6e      	ldr	r3, [pc, #440]	; (760 <printStatistics+0x300>)
     5a8:	4798      	blx	r3
     5aa:	2800      	cmp	r0, #0
     5ac:	d003      	beq.n	5b6 <printStatistics+0x156>
		usbPrintf("Bidirectional Slave: Scanning\n");
     5ae:	486d      	ldr	r0, [pc, #436]	; (764 <printStatistics+0x304>)
     5b0:	4b4e      	ldr	r3, [pc, #312]	; (6ec <printStatistics+0x28c>)
     5b2:	4798      	blx	r3
     5b4:	e765      	b.n	482 <printStatistics+0x22>
		usbPrintf("Bidirectional Slave: Locked\n");
     5b6:	486c      	ldr	r0, [pc, #432]	; (768 <printStatistics+0x308>)
     5b8:	4b4c      	ldr	r3, [pc, #304]	; (6ec <printStatistics+0x28c>)
     5ba:	4798      	blx	r3
     5bc:	e761      	b.n	482 <printStatistics+0x22>
  	  if(sparkGetMode() == SPARK_MODE_RX)
     5be:	4b6b      	ldr	r3, [pc, #428]	; (76c <printStatistics+0x30c>)
     5c0:	4798      	blx	r3
     5c2:	2800      	cmp	r0, #0
     5c4:	d10b      	bne.n	5de <printStatistics+0x17e>
		if(sparkIsScanning())
     5c6:	4b66      	ldr	r3, [pc, #408]	; (760 <printStatistics+0x300>)
     5c8:	4798      	blx	r3
     5ca:	2800      	cmp	r0, #0
     5cc:	d003      	beq.n	5d6 <printStatistics+0x176>
		  usbPrintf("RX Mode: scanning\n");
     5ce:	4868      	ldr	r0, [pc, #416]	; (770 <printStatistics+0x310>)
     5d0:	4b46      	ldr	r3, [pc, #280]	; (6ec <printStatistics+0x28c>)
     5d2:	4798      	blx	r3
     5d4:	e755      	b.n	482 <printStatistics+0x22>
		  usbPrintf("RX Mode: locked\n");
     5d6:	4867      	ldr	r0, [pc, #412]	; (774 <printStatistics+0x314>)
     5d8:	4b44      	ldr	r3, [pc, #272]	; (6ec <printStatistics+0x28c>)
     5da:	4798      	blx	r3
     5dc:	e751      	b.n	482 <printStatistics+0x22>
		usbPrintf("TX Mode\n");
     5de:	4866      	ldr	r0, [pc, #408]	; (778 <printStatistics+0x318>)
     5e0:	4b42      	ldr	r3, [pc, #264]	; (6ec <printStatistics+0x28c>)
     5e2:	4798      	blx	r3
     5e4:	e74d      	b.n	482 <printStatistics+0x22>
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     5e6:	3401      	adds	r4, #1
     5e8:	b2e4      	uxtb	r4, r4
     5ea:	b2a1      	uxth	r1, r4
     5ec:	4a50      	ldr	r2, [pc, #320]	; (730 <printStatistics+0x2d0>)
     5ee:	8812      	ldrh	r2, [r2, #0]
     5f0:	08d2      	lsrs	r2, r2, #3
     5f2:	4291      	cmp	r1, r2
     5f4:	d21e      	bcs.n	634 <printStatistics+0x1d4>
  {
	  std_buf[p] = nibble_hex[sparkTXbuffer[i] >> 4]; p++;
     5f6:	4a61      	ldr	r2, [pc, #388]	; (77c <printStatistics+0x31c>)
     5f8:	6812      	ldr	r2, [r2, #0]
     5fa:	1912      	adds	r2, r2, r4
     5fc:	7811      	ldrb	r1, [r2, #0]
     5fe:	0909      	lsrs	r1, r1, #4
     600:	4d5f      	ldr	r5, [pc, #380]	; (780 <printStatistics+0x320>)
     602:	5c68      	ldrb	r0, [r5, r1]
     604:	4955      	ldr	r1, [pc, #340]	; (75c <printStatistics+0x2fc>)
     606:	54c8      	strb	r0, [r1, r3]
     608:	1c58      	adds	r0, r3, #1
     60a:	b280      	uxth	r0, r0
	  std_buf[p] = nibble_hex[sparkTXbuffer[i] & 0x0F]; p++;
     60c:	7816      	ldrb	r6, [r2, #0]
     60e:	220f      	movs	r2, #15
     610:	4032      	ands	r2, r6
     612:	5caa      	ldrb	r2, [r5, r2]
     614:	540a      	strb	r2, [r1, r0]
     616:	1c9a      	adds	r2, r3, #2
     618:	b292      	uxth	r2, r2
	  std_buf[p] = ' '; p++;
     61a:	2020      	movs	r0, #32
     61c:	5488      	strb	r0, [r1, r2]
     61e:	3303      	adds	r3, #3
     620:	b29b      	uxth	r3, r3
	  
	  if(p > 55)
     622:	2b37      	cmp	r3, #55	; 0x37
     624:	d9df      	bls.n	5e6 <printStatistics+0x186>
	  {
		 // std_buf[p] = '\n'; p++;
		  std_buf[p] = 0; p++;
     626:	0008      	movs	r0, r1
     628:	2200      	movs	r2, #0
     62a:	54ca      	strb	r2, [r1, r3]
		  usbPrintf(std_buf);
     62c:	4b2f      	ldr	r3, [pc, #188]	; (6ec <printStatistics+0x28c>)
     62e:	4798      	blx	r3
		  p = 0;
     630:	2300      	movs	r3, #0
     632:	e7d8      	b.n	5e6 <printStatistics+0x186>
	  }
  } 
  usbPrintf("\n"); 
     634:	4853      	ldr	r0, [pc, #332]	; (784 <printStatistics+0x324>)
     636:	4b2d      	ldr	r3, [pc, #180]	; (6ec <printStatistics+0x28c>)
     638:	4798      	blx	r3
  
  p=0;
  std_buf[p] = 'R'; p++;
     63a:	4b48      	ldr	r3, [pc, #288]	; (75c <printStatistics+0x2fc>)
     63c:	2252      	movs	r2, #82	; 0x52
     63e:	701a      	strb	r2, [r3, #0]
  std_buf[p] = 'X'; p++;
     640:	3206      	adds	r2, #6
     642:	705a      	strb	r2, [r3, #1]
  std_buf[p] = ' '; p++;
     644:	3a38      	subs	r2, #56	; 0x38
     646:	709a      	strb	r2, [r3, #2]
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     648:	2400      	movs	r4, #0
  std_buf[p] = ' '; p++;
     64a:	2303      	movs	r3, #3
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     64c:	e001      	b.n	652 <printStatistics+0x1f2>
     64e:	3401      	adds	r4, #1
     650:	b2e4      	uxtb	r4, r4
     652:	b2a1      	uxth	r1, r4
     654:	4a36      	ldr	r2, [pc, #216]	; (730 <printStatistics+0x2d0>)
     656:	8812      	ldrh	r2, [r2, #0]
     658:	08d2      	lsrs	r2, r2, #3
     65a:	4291      	cmp	r1, r2
     65c:	d21e      	bcs.n	69c <printStatistics+0x23c>
  {
	  std_buf[p] = nibble_hex[sparkRXbuffer[i] >> 4]; p++;
     65e:	4a4a      	ldr	r2, [pc, #296]	; (788 <printStatistics+0x328>)
     660:	6812      	ldr	r2, [r2, #0]
     662:	1912      	adds	r2, r2, r4
     664:	7811      	ldrb	r1, [r2, #0]
     666:	0909      	lsrs	r1, r1, #4
     668:	4d45      	ldr	r5, [pc, #276]	; (780 <printStatistics+0x320>)
     66a:	5c68      	ldrb	r0, [r5, r1]
     66c:	493b      	ldr	r1, [pc, #236]	; (75c <printStatistics+0x2fc>)
     66e:	54c8      	strb	r0, [r1, r3]
     670:	1c58      	adds	r0, r3, #1
     672:	b280      	uxth	r0, r0
	  std_buf[p] = nibble_hex[sparkRXbuffer[i] & 0x0F]; p++;
     674:	7816      	ldrb	r6, [r2, #0]
     676:	220f      	movs	r2, #15
     678:	4032      	ands	r2, r6
     67a:	5caa      	ldrb	r2, [r5, r2]
     67c:	540a      	strb	r2, [r1, r0]
     67e:	1c9a      	adds	r2, r3, #2
     680:	b292      	uxth	r2, r2
	  std_buf[p] = ' '; p++;
     682:	2020      	movs	r0, #32
     684:	5488      	strb	r0, [r1, r2]
     686:	3303      	adds	r3, #3
     688:	b29b      	uxth	r3, r3
	  
	  if(p > 55)
     68a:	2b37      	cmp	r3, #55	; 0x37
     68c:	d9df      	bls.n	64e <printStatistics+0x1ee>
	  {
		  //std_buf[p] = '\n'; p++;
		  std_buf[p] = 0; p++;
     68e:	0008      	movs	r0, r1
     690:	2200      	movs	r2, #0
     692:	54ca      	strb	r2, [r1, r3]
		  usbPrintf(std_buf);
     694:	4b15      	ldr	r3, [pc, #84]	; (6ec <printStatistics+0x28c>)
     696:	4798      	blx	r3
		  p = 0;
     698:	2300      	movs	r3, #0
     69a:	e7d8      	b.n	64e <printStatistics+0x1ee>
	  }
  }
  usbPrintf("\n");
     69c:	4839      	ldr	r0, [pc, #228]	; (784 <printStatistics+0x324>)
     69e:	4c13      	ldr	r4, [pc, #76]	; (6ec <printStatistics+0x28c>)
     6a0:	47a0      	blx	r4
  usbPrintf("\n");
  for(unsigned char i=0;i<linkPacketSize/8;i++)
  usbPrintf("%02hx ", sparkRXbuffer[i]);
  usbPrintf("\n");*/
  
  usbPrintf("statLastRSSI: %d\n", statLastRSSI);
     6a2:	4d3a      	ldr	r5, [pc, #232]	; (78c <printStatistics+0x32c>)
     6a4:	7829      	ldrb	r1, [r5, #0]
     6a6:	483a      	ldr	r0, [pc, #232]	; (790 <printStatistics+0x330>)
     6a8:	47a0      	blx	r4
  usbPrintf("statLastNSSI: %d\n", statLastNSSI);
     6aa:	4e3a      	ldr	r6, [pc, #232]	; (794 <printStatistics+0x334>)
     6ac:	7831      	ldrb	r1, [r6, #0]
     6ae:	483a      	ldr	r0, [pc, #232]	; (798 <printStatistics+0x338>)
     6b0:	47a0      	blx	r4
  usbPrintf("statLastRXWaited: %d\n", sparkPacketRXWaited);
     6b2:	4b3a      	ldr	r3, [pc, #232]	; (79c <printStatistics+0x33c>)
     6b4:	8819      	ldrh	r1, [r3, #0]
     6b6:	483a      	ldr	r0, [pc, #232]	; (7a0 <printStatistics+0x340>)
     6b8:	47a0      	blx	r4
  usbPrintf("lastLinkMargin: %d dB\n", (statLastNSSI-statLastRSSI)/2);
     6ba:	7831      	ldrb	r1, [r6, #0]
     6bc:	782b      	ldrb	r3, [r5, #0]
     6be:	1acb      	subs	r3, r1, r3
     6c0:	0fd9      	lsrs	r1, r3, #31
     6c2:	18c9      	adds	r1, r1, r3
     6c4:	1049      	asrs	r1, r1, #1
     6c6:	4837      	ldr	r0, [pc, #220]	; (7a4 <printStatistics+0x344>)
     6c8:	47a0      	blx	r4
  
  if(linkAudio)
     6ca:	4b37      	ldr	r3, [pc, #220]	; (7a8 <printStatistics+0x348>)
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	2b00      	cmp	r3, #0
     6d0:	d103      	bne.n	6da <printStatistics+0x27a>
	audioPrintStatistics();
}
     6d2:	bc0c      	pop	{r2, r3}
     6d4:	4690      	mov	r8, r2
     6d6:	4699      	mov	r9, r3
     6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	audioPrintStatistics();
     6da:	4b34      	ldr	r3, [pc, #208]	; (7ac <printStatistics+0x34c>)
     6dc:	4798      	blx	r3
}
     6de:	e7f8      	b.n	6d2 <printStatistics+0x272>
     6e0:	0000354d 	.word	0x0000354d
     6e4:	00003559 	.word	0x00003559
     6e8:	0000592c 	.word	0x0000592c
     6ec:	00002669 	.word	0x00002669
     6f0:	200002d0 	.word	0x200002d0
     6f4:	000059b8 	.word	0x000059b8
     6f8:	20000b3a 	.word	0x20000b3a
     6fc:	000059cc 	.word	0x000059cc
     700:	200002dc 	.word	0x200002dc
     704:	000059e0 	.word	0x000059e0
     708:	200002d4 	.word	0x200002d4
     70c:	000059f4 	.word	0x000059f4
     710:	200003e8 	.word	0x200003e8
     714:	00005a0c 	.word	0x00005a0c
     718:	20000280 	.word	0x20000280
     71c:	00005a28 	.word	0x00005a28
     720:	200002d8 	.word	0x200002d8
     724:	00005a44 	.word	0x00005a44
     728:	00004105 	.word	0x00004105
     72c:	00005a58 	.word	0x00005a58
     730:	200003ec 	.word	0x200003ec
     734:	00005a6c 	.word	0x00005a6c
     738:	20000364 	.word	0x20000364
     73c:	00005a80 	.word	0x00005a80
     740:	00005b24 	.word	0x00005b24
     744:	00005aa0 	.word	0x00005aa0
     748:	00005ac0 	.word	0x00005ac0
     74c:	00005ae0 	.word	0x00005ae0
     750:	00005b00 	.word	0x00005b00
     754:	00005b20 	.word	0x00005b20
     758:	00005b44 	.word	0x00005b44
     75c:	2000057c 	.word	0x2000057c
     760:	00003501 	.word	0x00003501
     764:	00005944 	.word	0x00005944
     768:	00005964 	.word	0x00005964
     76c:	00003029 	.word	0x00003029
     770:	00005984 	.word	0x00005984
     774:	00005998 	.word	0x00005998
     778:	000059ac 	.word	0x000059ac
     77c:	20000b30 	.word	0x20000b30
     780:	0000591c 	.word	0x0000591c
     784:	00005dfc 	.word	0x00005dfc
     788:	20000b28 	.word	0x20000b28
     78c:	200002e0 	.word	0x200002e0
     790:	00005b64 	.word	0x00005b64
     794:	200003e4 	.word	0x200003e4
     798:	00005b78 	.word	0x00005b78
     79c:	20000b22 	.word	0x20000b22
     7a0:	00005b8c 	.word	0x00005b8c
     7a4:	00005ba4 	.word	0x00005ba4
     7a8:	20000278 	.word	0x20000278
     7ac:	000014b1 	.word	0x000014b1

000007b0 <publishStats>:
 
void publishStats(void)
{
     7b0:	b510      	push	{r4, lr}
     7b2:	b084      	sub	sp, #16
	usbPrintf("%d %d %d %d %d %d %d\n", statSendPackets, statReceivedPackets, statMissingPackets, statNumErrors, statLastRSSI, statLastNSSI, sparkPacketRXWaited);
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <publishStats+0x34>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	4a0b      	ldr	r2, [pc, #44]	; (7e8 <publishStats+0x38>)
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	490b      	ldr	r1, [pc, #44]	; (7ec <publishStats+0x3c>)
     7be:	6809      	ldr	r1, [r1, #0]
     7c0:	480b      	ldr	r0, [pc, #44]	; (7f0 <publishStats+0x40>)
     7c2:	8800      	ldrh	r0, [r0, #0]
     7c4:	9003      	str	r0, [sp, #12]
     7c6:	480b      	ldr	r0, [pc, #44]	; (7f4 <publishStats+0x44>)
     7c8:	7800      	ldrb	r0, [r0, #0]
     7ca:	9002      	str	r0, [sp, #8]
     7cc:	480a      	ldr	r0, [pc, #40]	; (7f8 <publishStats+0x48>)
     7ce:	7800      	ldrb	r0, [r0, #0]
     7d0:	9001      	str	r0, [sp, #4]
     7d2:	480a      	ldr	r0, [pc, #40]	; (7fc <publishStats+0x4c>)
     7d4:	6800      	ldr	r0, [r0, #0]
     7d6:	9000      	str	r0, [sp, #0]
     7d8:	4809      	ldr	r0, [pc, #36]	; (800 <publishStats+0x50>)
     7da:	4c0a      	ldr	r4, [pc, #40]	; (804 <publishStats+0x54>)
     7dc:	47a0      	blx	r4
}
     7de:	b004      	add	sp, #16
     7e0:	bd10      	pop	{r4, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	20000280 	.word	0x20000280
     7e8:	200003e8 	.word	0x200003e8
     7ec:	200002d4 	.word	0x200002d4
     7f0:	20000b22 	.word	0x20000b22
     7f4:	200003e4 	.word	0x200003e4
     7f8:	200002e0 	.word	0x200002e0
     7fc:	200002d8 	.word	0x200002d8
     800:	00005bbc 	.word	0x00005bbc
     804:	00002669 	.word	0x00002669

00000808 <callbackPacketSend>:
  return errors;
}

// Callbacks activated by Spark driver
void callbackPacketSend(unsigned char numBytes)
{
     808:	b510      	push	{r4, lr}
  // Fill packet
  if(linkAudio)
     80a:	4b0e      	ldr	r3, [pc, #56]	; (844 <callbackPacketSend+0x3c>)
     80c:	781b      	ldrb	r3, [r3, #0]
     80e:	2b00      	cmp	r3, #0
     810:	d104      	bne.n	81c <callbackPacketSend+0x14>
  {
	audioFillPacket(numBytes);
  }
  else if(!linkRandom)
     812:	4b0d      	ldr	r3, [pc, #52]	; (848 <callbackPacketSend+0x40>)
     814:	781b      	ldrb	r3, [r3, #0]
     816:	2b00      	cmp	r3, #0
     818:	d008      	beq.n	82c <callbackPacketSend+0x24>
     81a:	e00d      	b.n	838 <callbackPacketSend+0x30>
	audioFillPacket(numBytes);
     81c:	4b0b      	ldr	r3, [pc, #44]	; (84c <callbackPacketSend+0x44>)
     81e:	4798      	blx	r3
     820:	e00a      	b.n	838 <callbackPacketSend+0x30>
  {
    for(unsigned char i=0;i<numBytes;i++)
      sparkTXbuffer[i] = i; // Dummy data
     822:	4a0b      	ldr	r2, [pc, #44]	; (850 <callbackPacketSend+0x48>)
     824:	6812      	ldr	r2, [r2, #0]
     826:	54d3      	strb	r3, [r2, r3]
    for(unsigned char i=0;i<numBytes;i++)
     828:	3301      	adds	r3, #1
     82a:	b2db      	uxtb	r3, r3
     82c:	4283      	cmp	r3, r0
     82e:	d3f8      	bcc.n	822 <callbackPacketSend+0x1a>
	  
	sparkPushTX(0, numBytes);
     830:	0001      	movs	r1, r0
     832:	2000      	movs	r0, #0
     834:	4b07      	ldr	r3, [pc, #28]	; (854 <callbackPacketSend+0x4c>)
     836:	4798      	blx	r3
  }
    
  statSendPackets++;
     838:	4a07      	ldr	r2, [pc, #28]	; (858 <callbackPacketSend+0x50>)
     83a:	6813      	ldr	r3, [r2, #0]
     83c:	3301      	adds	r3, #1
     83e:	6013      	str	r3, [r2, #0]
}
     840:	bd10      	pop	{r4, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	20000278 	.word	0x20000278
     848:	2000027b 	.word	0x2000027b
     84c:	000018e1 	.word	0x000018e1
     850:	20000b30 	.word	0x20000b30
     854:	00002e55 	.word	0x00002e55
     858:	200002d4 	.word	0x200002d4

0000085c <callbackPacketReceived>:

bool callbackPacketReceived(unsigned char numBytes) // Return true if packet was succesfully received
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85e:	0004      	movs	r4, r0
  unsigned char errors = 0;
  uint8_t b;
  bool reception = false; 
 
  
  if(linkAudio)
     860:	4b31      	ldr	r3, [pc, #196]	; (928 <callbackPacketReceived+0xcc>)
     862:	781f      	ldrb	r7, [r3, #0]
     864:	2f00      	cmp	r7, #0
     866:	d01f      	beq.n	8a8 <callbackPacketReceived+0x4c>
  {
	  reception = audioProcessPacket(numBytes);
     868:	4b30      	ldr	r3, [pc, #192]	; (92c <callbackPacketReceived+0xd0>)
     86a:	4798      	blx	r3
     86c:	0007      	movs	r7, r0
	  errors = 0;
     86e:	2600      	movs	r6, #0
		reception = true;
	  }
  }

  // Statistics
  if(!reception)
     870:	2f00      	cmp	r7, #0
     872:	d054      	beq.n	91e <callbackPacketReceived+0xc2>
  {
    statMissingPackets++;
  }
  else
  {
    statReceivedPackets++;
     874:	4a2e      	ldr	r2, [pc, #184]	; (930 <callbackPacketReceived+0xd4>)
     876:	6813      	ldr	r3, [r2, #0]
     878:	3301      	adds	r3, #1
     87a:	6013      	str	r3, [r2, #0]
    statNumErrors += errors;
     87c:	4a2d      	ldr	r2, [pc, #180]	; (934 <callbackPacketReceived+0xd8>)
     87e:	6813      	ldr	r3, [r2, #0]
     880:	199b      	adds	r3, r3, r6
     882:	6013      	str	r3, [r2, #0]
    else if(errors <= 32)
      statBERdist[6]++;
    else
      statBERdist[7]++;
	  */
	if(errors >= 30)
     884:	2e1d      	cmp	r6, #29
     886:	d900      	bls.n	88a <callbackPacketReceived+0x2e>
		errors = 30;
     888:	261e      	movs	r6, #30
	statBERdist[errors]++;
     88a:	492b      	ldr	r1, [pc, #172]	; (938 <callbackPacketReceived+0xdc>)
     88c:	00b6      	lsls	r6, r6, #2
     88e:	5873      	ldr	r3, [r6, r1]
     890:	1c5a      	adds	r2, r3, #1
     892:	5072      	str	r2, [r6, r1]
      
    statLastRSSI = sparkPacketRSSI;
     894:	4b29      	ldr	r3, [pc, #164]	; (93c <callbackPacketReceived+0xe0>)
     896:	781a      	ldrb	r2, [r3, #0]
     898:	4b29      	ldr	r3, [pc, #164]	; (940 <callbackPacketReceived+0xe4>)
     89a:	701a      	strb	r2, [r3, #0]
    statLastNSSI = sparkPacketNSSI;
     89c:	4b29      	ldr	r3, [pc, #164]	; (944 <callbackPacketReceived+0xe8>)
     89e:	781a      	ldrb	r2, [r3, #0]
     8a0:	4b29      	ldr	r3, [pc, #164]	; (948 <callbackPacketReceived+0xec>)
     8a2:	701a      	strb	r2, [r3, #0]
  }
   
  
  return reception;
}
     8a4:	0038      	movs	r0, r7
     8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  sparkPullRX(0, numBytes);
     8a8:	0001      	movs	r1, r0
     8aa:	2000      	movs	r0, #0
     8ac:	4b27      	ldr	r3, [pc, #156]	; (94c <callbackPacketReceived+0xf0>)
     8ae:	4798      	blx	r3
	  for(unsigned char i=0;i<numBytes;i++)
     8b0:	2500      	movs	r5, #0
  unsigned char errors = 0;
     8b2:	2600      	movs	r6, #0
	  for(unsigned char i=0;i<numBytes;i++)
     8b4:	e00a      	b.n	8cc <callbackPacketReceived+0x70>
    errors++;
     8b6:	2201      	movs	r2, #1
     8b8:	e015      	b.n	8e6 <callbackPacketReceived+0x8a>
  if( (b1 & 128) != (b2 & 128) )
     8ba:	b249      	sxtb	r1, r1
     8bc:	2900      	cmp	r1, #0
     8be:	db2b      	blt.n	918 <callbackPacketReceived+0xbc>
		  errors += byteErrors(b, i); // This takes a lot of time
     8c0:	18b3      	adds	r3, r6, r2
     8c2:	b2d9      	uxtb	r1, r3
	  for(unsigned char i=0;i<numBytes;i++)
     8c4:	3501      	adds	r5, #1
     8c6:	b2ed      	uxtb	r5, r5
		reception = true;
     8c8:	2701      	movs	r7, #1
     8ca:	000e      	movs	r6, r1
	  for(unsigned char i=0;i<numBytes;i++)
     8cc:	42a5      	cmp	r5, r4
     8ce:	d2cf      	bcs.n	870 <callbackPacketReceived+0x14>
		b = sparkRXbuffer[i];
     8d0:	4b1f      	ldr	r3, [pc, #124]	; (950 <callbackPacketReceived+0xf4>)
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	5d59      	ldrb	r1, [r3, r5]
		if(linkRandom)
     8d6:	4b1f      	ldr	r3, [pc, #124]	; (954 <callbackPacketReceived+0xf8>)
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	2b00      	cmp	r3, #0
     8dc:	d1f2      	bne.n	8c4 <callbackPacketReceived+0x68>
  if( (b1 & 1) != (b2 & 1) )
     8de:	4069      	eors	r1, r5
     8e0:	07cb      	lsls	r3, r1, #31
     8e2:	d4e8      	bmi.n	8b6 <callbackPacketReceived+0x5a>
  uint8_t errors = 0;
     8e4:	2200      	movs	r2, #0
  if( (b1 & 2) != (b2 & 2) )
     8e6:	078b      	lsls	r3, r1, #30
     8e8:	d501      	bpl.n	8ee <callbackPacketReceived+0x92>
    errors++;
     8ea:	3201      	adds	r2, #1
     8ec:	b2d2      	uxtb	r2, r2
  if( (b1 & 4) != (b2 & 4) )
     8ee:	074b      	lsls	r3, r1, #29
     8f0:	d501      	bpl.n	8f6 <callbackPacketReceived+0x9a>
    errors++;
     8f2:	3201      	adds	r2, #1
     8f4:	b2d2      	uxtb	r2, r2
  if( (b1 & 8) != (b2 & 8) )
     8f6:	070b      	lsls	r3, r1, #28
     8f8:	d501      	bpl.n	8fe <callbackPacketReceived+0xa2>
    errors++;
     8fa:	3201      	adds	r2, #1
     8fc:	b2d2      	uxtb	r2, r2
  if( (b1 & 16) != (b2 & 16) )
     8fe:	06cb      	lsls	r3, r1, #27
     900:	d501      	bpl.n	906 <callbackPacketReceived+0xaa>
    errors++;
     902:	3201      	adds	r2, #1
     904:	b2d2      	uxtb	r2, r2
  if( (b1 & 32) != (b2 & 32) )
     906:	068b      	lsls	r3, r1, #26
     908:	d501      	bpl.n	90e <callbackPacketReceived+0xb2>
    errors++;
     90a:	3201      	adds	r2, #1
     90c:	b2d2      	uxtb	r2, r2
  if( (b1 & 64) != (b2 & 64) )
     90e:	064b      	lsls	r3, r1, #25
     910:	d5d3      	bpl.n	8ba <callbackPacketReceived+0x5e>
    errors++;
     912:	3201      	adds	r2, #1
     914:	b2d2      	uxtb	r2, r2
     916:	e7d0      	b.n	8ba <callbackPacketReceived+0x5e>
    errors++;
     918:	3201      	adds	r2, #1
     91a:	b2d2      	uxtb	r2, r2
     91c:	e7d0      	b.n	8c0 <callbackPacketReceived+0x64>
    statMissingPackets++;
     91e:	4a0e      	ldr	r2, [pc, #56]	; (958 <callbackPacketReceived+0xfc>)
     920:	6813      	ldr	r3, [r2, #0]
     922:	3301      	adds	r3, #1
     924:	6013      	str	r3, [r2, #0]
     926:	e7bd      	b.n	8a4 <callbackPacketReceived+0x48>
     928:	20000278 	.word	0x20000278
     92c:	00001679 	.word	0x00001679
     930:	200003e8 	.word	0x200003e8
     934:	200002d8 	.word	0x200002d8
     938:	20000364 	.word	0x20000364
     93c:	20000b36 	.word	0x20000b36
     940:	200002e0 	.word	0x200002e0
     944:	20000b24 	.word	0x20000b24
     948:	200003e4 	.word	0x200003e4
     94c:	00002e8d 	.word	0x00002e8d
     950:	20000b28 	.word	0x20000b28
     954:	2000027b 	.word	0x2000027b
     958:	20000280 	.word	0x20000280

0000095c <callBackPacketUpkeep>:

void callBackPacketUpkeep(void)
{
     95c:	b510      	push	{r4, lr}
	if(linkAudio)
     95e:	4b04      	ldr	r3, [pc, #16]	; (970 <callBackPacketUpkeep+0x14>)
     960:	781b      	ldrb	r3, [r3, #0]
     962:	2b00      	cmp	r3, #0
     964:	d100      	bne.n	968 <callBackPacketUpkeep+0xc>
		audioUpkeepPacket();
}
     966:	bd10      	pop	{r4, pc}
		audioUpkeepPacket();
     968:	4b02      	ldr	r3, [pc, #8]	; (974 <callBackPacketUpkeep+0x18>)
     96a:	4798      	blx	r3
}
     96c:	e7fb      	b.n	966 <callBackPacketUpkeep+0xa>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	20000278 	.word	0x20000278
     974:	00001785 	.word	0x00001785

00000978 <callbackLinkLost>:

void callbackLinkLost(void)
{
  statLinkLost++;
     978:	4a02      	ldr	r2, [pc, #8]	; (984 <callbackLinkLost+0xc>)
     97a:	6813      	ldr	r3, [r2, #0]
     97c:	3301      	adds	r3, #1
     97e:	6013      	str	r3, [r2, #0]
}
     980:	4770      	bx	lr
     982:	46c0      	nop			; (mov r8, r8)
     984:	200002dc 	.word	0x200002dc

00000988 <appStart>:
  statException++;
}

// Application layer
void appStart(void)
{
     988:	b510      	push	{r4, lr}
	if(linkAudio)
     98a:	4b07      	ldr	r3, [pc, #28]	; (9a8 <appStart+0x20>)
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2b00      	cmp	r3, #0
     990:	d106      	bne.n	9a0 <appStart+0x18>
		audioStart();
	audioReset();
     992:	4b06      	ldr	r3, [pc, #24]	; (9ac <appStart+0x24>)
     994:	4798      	blx	r3
	sparkStartRadio();
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <appStart+0x28>)
     998:	4798      	blx	r3
	resetStatistics();
     99a:	4b06      	ldr	r3, [pc, #24]	; (9b4 <appStart+0x2c>)
     99c:	4798      	blx	r3
}
     99e:	bd10      	pop	{r4, pc}
		audioStart();
     9a0:	4b05      	ldr	r3, [pc, #20]	; (9b8 <appStart+0x30>)
     9a2:	4798      	blx	r3
     9a4:	e7f5      	b.n	992 <appStart+0xa>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	20000278 	.word	0x20000278
     9ac:	000015a1 	.word	0x000015a1
     9b0:	00002ec5 	.word	0x00002ec5
     9b4:	000003f9 	.word	0x000003f9
     9b8:	0000157d 	.word	0x0000157d

000009bc <appStop>:

void appStop(void)
{	
     9bc:	b510      	push	{r4, lr}
	sparkStopRadio();
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <appStop+0x18>)
     9c0:	4798      	blx	r3
	if(linkAudio)
     9c2:	4b05      	ldr	r3, [pc, #20]	; (9d8 <appStop+0x1c>)
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d100      	bne.n	9cc <appStop+0x10>
		audioStop();
}
     9ca:	bd10      	pop	{r4, pc}
		audioStop();
     9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <appStop+0x20>)
     9ce:	4798      	blx	r3
}
     9d0:	e7fb      	b.n	9ca <appStop+0xe>
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	00003485 	.word	0x00003485
     9d8:	20000278 	.word	0x20000278
     9dc:	00001595 	.word	0x00001595

000009e0 <appInit>:

void appInit(void)
{
     9e0:	b510      	push	{r4, lr}
  BISTcompleted = sparkBIST(false);
  if(!BISTcompleted)
    return;*/
  
  // Setup radio
  sparkRadioSetup();
     9e2:	4b08      	ldr	r3, [pc, #32]	; (a04 <appInit+0x24>)
     9e4:	4798      	blx	r3
  
  // Setup link parameters  
  defaultLinkSettings();
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <appInit+0x28>)
     9e8:	4798      	blx	r3
  configureLink();
     9ea:	4b08      	ldr	r3, [pc, #32]	; (a0c <appInit+0x2c>)
     9ec:	4798      	blx	r3
  
  // Setup Audio
  if(linkAudio)
     9ee:	4b08      	ldr	r3, [pc, #32]	; (a10 <appInit+0x30>)
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d102      	bne.n	9fc <appInit+0x1c>
    audioConfigure();
  
  // Start
  appStart();
     9f6:	4b07      	ldr	r3, [pc, #28]	; (a14 <appInit+0x34>)
     9f8:	4798      	blx	r3
}
     9fa:	bd10      	pop	{r4, pc}
    audioConfigure();
     9fc:	4b06      	ldr	r3, [pc, #24]	; (a18 <appInit+0x38>)
     9fe:	4798      	blx	r3
     a00:	e7f9      	b.n	9f6 <appInit+0x16>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00002ae5 	.word	0x00002ae5
     a08:	0000029d 	.word	0x0000029d
     a0c:	00000361 	.word	0x00000361
     a10:	20000278 	.word	0x20000278
     a14:	00000989 	.word	0x00000989
     a18:	000015e1 	.word	0x000015e1

00000a1c <guiSendBER>:
// GUI interface
uint8_t in_buf[128];
uint8_t out_buf[128];

void guiSendBER(void) // Send BER distribution
{
     a1c:	b510      	push	{r4, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x04; p++;
     a1e:	4b1c      	ldr	r3, [pc, #112]	; (a90 <guiSendBER+0x74>)
     a20:	2204      	movs	r2, #4
     a22:	701a      	strb	r2, [r3, #0]
	
	// Byte #1 (MSB), byte #2, byte #3 (LSB), total number of errors
	out_buf[p] = (statNumErrors >> 16) & 0xFF; p++;
     a24:	4a1b      	ldr	r2, [pc, #108]	; (a94 <guiSendBER+0x78>)
     a26:	6812      	ldr	r2, [r2, #0]
     a28:	0c11      	lsrs	r1, r2, #16
     a2a:	7059      	strb	r1, [r3, #1]
	out_buf[p] = (statNumErrors >> 8) & 0xFF; p++;
     a2c:	0a11      	lsrs	r1, r2, #8
     a2e:	7099      	strb	r1, [r3, #2]
	out_buf[p] = (statNumErrors >> 0) & 0xFF; p++;
     a30:	70da      	strb	r2, [r3, #3]
	
	// Byte #4 and byte #5 and byte #6
	out_buf[p++] = statLastRSSI;
     a32:	4a19      	ldr	r2, [pc, #100]	; (a98 <guiSendBER+0x7c>)
     a34:	7811      	ldrb	r1, [r2, #0]
     a36:	7119      	strb	r1, [r3, #4]
	out_buf[p++] = statLastNSSI;
     a38:	4a18      	ldr	r2, [pc, #96]	; (a9c <guiSendBER+0x80>)
     a3a:	7812      	ldrb	r2, [r2, #0]
     a3c:	715a      	strb	r2, [r3, #5]
	out_buf[p++] =(statLastNSSI-statLastRSSI)/2;
     a3e:	1a51      	subs	r1, r2, r1
     a40:	0fca      	lsrs	r2, r1, #31
     a42:	1852      	adds	r2, r2, r1
     a44:	1052      	asrs	r2, r2, #1
     a46:	719a      	strb	r2, [r3, #6]
	
	// Error distribution, 2 bytes per bin (MSB first), 0 errors first
	// ! increase number of bins?
	out_buf[p] = statSendPackets >> 8; p++;
     a48:	4a15      	ldr	r2, [pc, #84]	; (aa0 <guiSendBER+0x84>)
     a4a:	6812      	ldr	r2, [r2, #0]
     a4c:	0a11      	lsrs	r1, r2, #8
     a4e:	71d9      	strb	r1, [r3, #7]
	out_buf[p] = statSendPackets & 0xFF; p++;
     a50:	721a      	strb	r2, [r3, #8]
	for(uint8_t i=0;i<31;i++)
     a52:	2300      	movs	r3, #0
	out_buf[p] = statSendPackets & 0xFF; p++;
     a54:	2109      	movs	r1, #9
	for(uint8_t i=0;i<31;i++)
     a56:	e00c      	b.n	a72 <guiSendBER+0x56>
	{
		out_buf[p] = statBERdist[i] >> 8; p++;
     a58:	0098      	lsls	r0, r3, #2
     a5a:	4a12      	ldr	r2, [pc, #72]	; (aa4 <guiSendBER+0x88>)
     a5c:	5884      	ldr	r4, [r0, r2]
     a5e:	0a22      	lsrs	r2, r4, #8
     a60:	480b      	ldr	r0, [pc, #44]	; (a90 <guiSendBER+0x74>)
     a62:	5442      	strb	r2, [r0, r1]
     a64:	1c4a      	adds	r2, r1, #1
     a66:	b292      	uxth	r2, r2
		out_buf[p] = statBERdist[i] & 0xFF; p++;
     a68:	5484      	strb	r4, [r0, r2]
     a6a:	3102      	adds	r1, #2
     a6c:	b289      	uxth	r1, r1
	for(uint8_t i=0;i<31;i++)
     a6e:	3301      	adds	r3, #1
     a70:	b2db      	uxtb	r3, r3
     a72:	2b1e      	cmp	r3, #30
     a74:	d9f0      	bls.n	a58 <guiSendBER+0x3c>
	}	
	out_buf[p] = statMissingPackets >> 8; p++;
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <guiSendBER+0x8c>)
     a78:	681a      	ldr	r2, [r3, #0]
     a7a:	0a13      	lsrs	r3, r2, #8
     a7c:	4804      	ldr	r0, [pc, #16]	; (a90 <guiSendBER+0x74>)
     a7e:	5443      	strb	r3, [r0, r1]
     a80:	1c4b      	adds	r3, r1, #1
     a82:	b29b      	uxth	r3, r3
	out_buf[p] = statMissingPackets & 0xFF; p++;
     a84:	54c2      	strb	r2, [r0, r3]
     a86:	3102      	adds	r1, #2
     a88:	b289      	uxth	r1, r1
	
	// Send the packet
	usb_put(out_buf, p);
     a8a:	4b08      	ldr	r3, [pc, #32]	; (aac <guiSendBER+0x90>)
     a8c:	4798      	blx	r3
}
     a8e:	bd10      	pop	{r4, pc}
     a90:	200003f0 	.word	0x200003f0
     a94:	200002d8 	.word	0x200002d8
     a98:	200002e0 	.word	0x200002e0
     a9c:	200003e4 	.word	0x200003e4
     aa0:	200002d4 	.word	0x200002d4
     aa4:	20000364 	.word	0x20000364
     aa8:	20000280 	.word	0x20000280
     aac:	00003ce1 	.word	0x00003ce1

00000ab0 <guiSendAudio>:

void guiSendAudio(void) // Send BER distribution
{
     ab0:	b510      	push	{r4, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x05; p++;
     ab2:	4803      	ldr	r0, [pc, #12]	; (ac0 <guiSendAudio+0x10>)
     ab4:	2305      	movs	r3, #5
     ab6:	7003      	strb	r3, [r0, #0]
	
	// Send the packet
	usb_put(out_buf, p);
     ab8:	2101      	movs	r1, #1
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <guiSendAudio+0x14>)
     abc:	4798      	blx	r3
}
     abe:	bd10      	pop	{r4, pc}
     ac0:	200003f0 	.word	0x200003f0
     ac4:	00003ce1 	.word	0x00003ce1

00000ac8 <guiSendConfig>:

void guiSendConfig(void) // Sends the configuration package
{
     ac8:	b570      	push	{r4, r5, r6, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x03; p++;
     aca:	2203      	movs	r2, #3
     acc:	4b24      	ldr	r3, [pc, #144]	; (b60 <guiSendConfig+0x98>)
     ace:	701a      	strb	r2, [r3, #0]
	
	// Byte #0, bit 1-0 tells application: BER (0b00) or audio (0b01)
	b = 0;
	if(linkBidirectional)
     ad0:	4b24      	ldr	r3, [pc, #144]	; (b64 <guiSendConfig+0x9c>)
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d039      	beq.n	b4c <guiSendConfig+0x84>
	{
		if(linkMaster)
     ad8:	4b23      	ldr	r3, [pc, #140]	; (b68 <guiSendConfig+0xa0>)
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	2b00      	cmp	r3, #0
     ade:	d03b      	beq.n	b58 <guiSendConfig+0x90>
			b |= 0x03;
     ae0:	2503      	movs	r5, #3
		if(linkMaster)
			b |= 0x00;
		else
			b |= 0x01;
	}
	b <<= 2;
     ae2:	00ad      	lsls	r5, r5, #2
	//if(linkMaster)
	//	b |= 1 << 3;
	if(linkAudio)
     ae4:	4b21      	ldr	r3, [pc, #132]	; (b6c <guiSendConfig+0xa4>)
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	d002      	beq.n	af2 <guiSendConfig+0x2a>
		b |= 1 << 0;
     aec:	2301      	movs	r3, #1
     aee:	431d      	orrs	r5, r3
     af0:	b2ed      	uxtb	r5, r5
	if(linkRandom)
     af2:	4b1f      	ldr	r3, [pc, #124]	; (b70 <guiSendConfig+0xa8>)
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	2b00      	cmp	r3, #0
     af8:	d002      	beq.n	b00 <guiSendConfig+0x38>
		b |= 1 << 5;
     afa:	2320      	movs	r3, #32
     afc:	431d      	orrs	r5, r3
     afe:	b2ed      	uxtb	r5, r5
	if(sparkIsRunning())
     b00:	4b1c      	ldr	r3, [pc, #112]	; (b74 <guiSendConfig+0xac>)
     b02:	4798      	blx	r3
     b04:	2800      	cmp	r0, #0
     b06:	d003      	beq.n	b10 <guiSendConfig+0x48>
		b |= 1 << 7;
     b08:	2380      	movs	r3, #128	; 0x80
     b0a:	425b      	negs	r3, r3
     b0c:	431d      	orrs	r5, r3
     b0e:	b2ed      	uxtb	r5, r5
	out_buf[p] = b; p++;
     b10:	4c13      	ldr	r4, [pc, #76]	; (b60 <guiSendConfig+0x98>)
     b12:	7065      	strb	r5, [r4, #1]
	
	// Byte #1 (MSB), byte #2 (LSB), TX address, not implemented
	out_buf[p] = 0; p++;
     b14:	2500      	movs	r5, #0
     b16:	70a5      	strb	r5, [r4, #2]
	out_buf[p] = 0; p++;
     b18:	70e5      	strb	r5, [r4, #3]
	
	// Byte #3 (MSB), byte #4 (LSB), RX address, not implemented
	out_buf[p] = 0; p++;
     b1a:	7125      	strb	r5, [r4, #4]
	out_buf[p] = 0; p++;
     b1c:	7165      	strb	r5, [r4, #5]
	
	// Byte #5, packet payload size in bytes
	out_buf[p] = linkPacketSize/8; p++;
     b1e:	4b16      	ldr	r3, [pc, #88]	; (b78 <guiSendConfig+0xb0>)
     b20:	881b      	ldrh	r3, [r3, #0]
     b22:	08db      	lsrs	r3, r3, #3
     b24:	71a3      	strb	r3, [r4, #6]
	
	// Byte #6 (MSB), byte #7 (LSB), packet period in multiples of 100us
	uint16_t period = 10000 / linkPacketRate; // linkPacketRate is packets/s
     b26:	4b15      	ldr	r3, [pc, #84]	; (b7c <guiSendConfig+0xb4>)
     b28:	8819      	ldrh	r1, [r3, #0]
     b2a:	4815      	ldr	r0, [pc, #84]	; (b80 <guiSendConfig+0xb8>)
     b2c:	4b15      	ldr	r3, [pc, #84]	; (b84 <guiSendConfig+0xbc>)
     b2e:	4798      	blx	r3
     b30:	b283      	uxth	r3, r0
	out_buf[p] = period >> 8; p++;
     b32:	0a1b      	lsrs	r3, r3, #8
     b34:	71e3      	strb	r3, [r4, #7]
	out_buf[p] = period & 0x00FF; p++;
     b36:	b2c0      	uxtb	r0, r0
     b38:	7220      	strb	r0, [r4, #8]
	
	// Byte #8 (MSB), byte #9 (LSB), packet period in multiples of 100us
	//uint16_t period = 10000 / linkPacketRate; // linkPacketRate is packets/s
	out_buf[p] = period >> 8; p++;
     b3a:	7263      	strb	r3, [r4, #9]
	out_buf[p] = period & 0x00FF; p++;
     b3c:	72a0      	strb	r0, [r4, #10]
	
	// Byte #10, parameter bitset, not implemented
	out_buf[p] = 0; p++;
     b3e:	72e5      	strb	r5, [r4, #11]
	
	// Byte #11, not implemented
	out_buf[p] = 0; p++;
     b40:	7325      	strb	r5, [r4, #12]
	
	// Send the packet
	usb_put(out_buf, p);
     b42:	210d      	movs	r1, #13
     b44:	0020      	movs	r0, r4
     b46:	4b10      	ldr	r3, [pc, #64]	; (b88 <guiSendConfig+0xc0>)
     b48:	4798      	blx	r3
}
     b4a:	bd70      	pop	{r4, r5, r6, pc}
		if(linkMaster)
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <guiSendConfig+0xa0>)
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	2b00      	cmp	r3, #0
     b52:	d003      	beq.n	b5c <guiSendConfig+0x94>
			b |= 0x00;
     b54:	2500      	movs	r5, #0
     b56:	e7c4      	b.n	ae2 <guiSendConfig+0x1a>
			b |= 0x02;	
     b58:	2502      	movs	r5, #2
     b5a:	e7c2      	b.n	ae2 <guiSendConfig+0x1a>
			b |= 0x01;
     b5c:	2501      	movs	r5, #1
     b5e:	e7c0      	b.n	ae2 <guiSendConfig+0x1a>
     b60:	200003f0 	.word	0x200003f0
     b64:	20000472 	.word	0x20000472
     b68:	200003e0 	.word	0x200003e0
     b6c:	20000278 	.word	0x20000278
     b70:	2000027b 	.word	0x2000027b
     b74:	00003565 	.word	0x00003565
     b78:	200003ec 	.word	0x200003ec
     b7c:	20000476 	.word	0x20000476
     b80:	00002710 	.word	0x00002710
     b84:	00004219 	.word	0x00004219
     b88:	00003ce1 	.word	0x00003ce1

00000b8c <guiReceiveConfig>:

void guiReceiveConfig(void) // Changes configuration, reads from in_buf
{
     b8c:	b510      	push	{r4, lr}
	uint16_t p = 1; // Pointer of packet, start from 1 because of header	
	
	//appStop();	
	
	// Byte #0, , bit 1-0 tells application: BER (0b00) or audio (0b01)
	b = in_buf[p]; p++;
     b8e:	4b20      	ldr	r3, [pc, #128]	; (c10 <guiReceiveConfig+0x84>)
     b90:	785b      	ldrb	r3, [r3, #1]
	switch( (b >> 2) & 0x03)
     b92:	0899      	lsrs	r1, r3, #2
     b94:	2203      	movs	r2, #3
     b96:	400a      	ands	r2, r1
     b98:	2a01      	cmp	r2, #1
     b9a:	d025      	beq.n	be8 <guiReceiveConfig+0x5c>
     b9c:	2a00      	cmp	r2, #0
     b9e:	d01c      	beq.n	bda <guiReceiveConfig+0x4e>
     ba0:	2a02      	cmp	r2, #2
     ba2:	d027      	beq.n	bf4 <guiReceiveConfig+0x68>
     ba4:	2a03      	cmp	r2, #3
     ba6:	d02c      	beq.n	c02 <guiReceiveConfig+0x76>
			linkBidirectional = true;
			linkMaster = true;
			break;
	}
	//linkMaster = b & (1<<3);
	linkAudio = b & (1<<0);
     ba8:	2201      	movs	r2, #1
     baa:	0010      	movs	r0, r2
     bac:	4018      	ands	r0, r3
     bae:	4919      	ldr	r1, [pc, #100]	; (c14 <guiReceiveConfig+0x88>)
     bb0:	7008      	strb	r0, [r1, #0]
	linkRandom = b & (1<<5);
     bb2:	095b      	lsrs	r3, r3, #5
     bb4:	4013      	ands	r3, r2
     bb6:	4a18      	ldr	r2, [pc, #96]	; (c18 <guiReceiveConfig+0x8c>)
     bb8:	7013      	strb	r3, [r2, #0]
	// Byte #3 (MSB), byte #4 (LSB), RX address, not implemented
	b = in_buf[p]; p++;
	b = in_buf[p]; p++;
	
	// Byte #5, packet payload size in bytes
	b = in_buf[p]; p++;
     bba:	4b15      	ldr	r3, [pc, #84]	; (c10 <guiReceiveConfig+0x84>)
     bbc:	799a      	ldrb	r2, [r3, #6]
	linkPacketSize = ((uint16_t)b) * 8l;
     bbe:	00d2      	lsls	r2, r2, #3
     bc0:	4916      	ldr	r1, [pc, #88]	; (c1c <guiReceiveConfig+0x90>)
     bc2:	800a      	strh	r2, [r1, #0]
	
	// Byte #6 (MSB), byte #7 (LSB), packet period in multiples of 100us
	uint16_t period;
	b = in_buf[p]; p++;
     bc4:	79d9      	ldrb	r1, [r3, #7]
	period = b; period << 8;
	b = in_buf[p]; p++;
     bc6:	7a1b      	ldrb	r3, [r3, #8]
	period |= b;
	linkPacketRate = 10000 / period;
     bc8:	4319      	orrs	r1, r3
     bca:	4815      	ldr	r0, [pc, #84]	; (c20 <guiReceiveConfig+0x94>)
     bcc:	4b15      	ldr	r3, [pc, #84]	; (c24 <guiReceiveConfig+0x98>)
     bce:	4798      	blx	r3
     bd0:	4b15      	ldr	r3, [pc, #84]	; (c28 <guiReceiveConfig+0x9c>)
     bd2:	8018      	strh	r0, [r3, #0]
	b = in_buf[p]; p++;
	
	// Byte #11, not implemented
	b = in_buf[p]; p++;
	
	configureLink();
     bd4:	4b15      	ldr	r3, [pc, #84]	; (c2c <guiReceiveConfig+0xa0>)
     bd6:	4798      	blx	r3
	//appStart();
}
     bd8:	bd10      	pop	{r4, pc}
			linkBidirectional = false;
     bda:	2100      	movs	r1, #0
     bdc:	4a14      	ldr	r2, [pc, #80]	; (c30 <guiReceiveConfig+0xa4>)
     bde:	7011      	strb	r1, [r2, #0]
			linkMaster = true;
     be0:	3101      	adds	r1, #1
     be2:	4a14      	ldr	r2, [pc, #80]	; (c34 <guiReceiveConfig+0xa8>)
     be4:	7011      	strb	r1, [r2, #0]
			break;
     be6:	e7df      	b.n	ba8 <guiReceiveConfig+0x1c>
			linkBidirectional = false;
     be8:	2200      	movs	r2, #0
     bea:	4911      	ldr	r1, [pc, #68]	; (c30 <guiReceiveConfig+0xa4>)
     bec:	700a      	strb	r2, [r1, #0]
			linkMaster = false;
     bee:	4911      	ldr	r1, [pc, #68]	; (c34 <guiReceiveConfig+0xa8>)
     bf0:	700a      	strb	r2, [r1, #0]
			break;
     bf2:	e7d9      	b.n	ba8 <guiReceiveConfig+0x1c>
			linkBidirectional = true;
     bf4:	2101      	movs	r1, #1
     bf6:	4a0e      	ldr	r2, [pc, #56]	; (c30 <guiReceiveConfig+0xa4>)
     bf8:	7011      	strb	r1, [r2, #0]
			linkMaster = false;
     bfa:	2100      	movs	r1, #0
     bfc:	4a0d      	ldr	r2, [pc, #52]	; (c34 <guiReceiveConfig+0xa8>)
     bfe:	7011      	strb	r1, [r2, #0]
			break;
     c00:	e7d2      	b.n	ba8 <guiReceiveConfig+0x1c>
			linkBidirectional = true;
     c02:	2201      	movs	r2, #1
     c04:	490a      	ldr	r1, [pc, #40]	; (c30 <guiReceiveConfig+0xa4>)
     c06:	700a      	strb	r2, [r1, #0]
			linkMaster = true;
     c08:	490a      	ldr	r1, [pc, #40]	; (c34 <guiReceiveConfig+0xa8>)
     c0a:	700a      	strb	r2, [r1, #0]
			break;
     c0c:	e7cc      	b.n	ba8 <guiReceiveConfig+0x1c>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	200002e4 	.word	0x200002e4
     c14:	20000278 	.word	0x20000278
     c18:	2000027b 	.word	0x2000027b
     c1c:	200003ec 	.word	0x200003ec
     c20:	00002710 	.word	0x00002710
     c24:	00004219 	.word	0x00004219
     c28:	20000476 	.word	0x20000476
     c2c:	00000361 	.word	0x00000361
     c30:	20000472 	.word	0x20000472
     c34:	200003e0 	.word	0x200003e0

00000c38 <guiHandle>:

void guiHandle(void)
{
     c38:	b510      	push	{r4, lr}
	uint16_t size = usbBytesAvailable();	
     c3a:	4b21      	ldr	r3, [pc, #132]	; (cc0 <guiHandle+0x88>)
     c3c:	4798      	blx	r3
     c3e:	0001      	movs	r1, r0
	usb_get(in_buf, size);	
     c40:	4c20      	ldr	r4, [pc, #128]	; (cc4 <guiHandle+0x8c>)
     c42:	0020      	movs	r0, r4
     c44:	4b20      	ldr	r3, [pc, #128]	; (cc8 <guiHandle+0x90>)
     c46:	4798      	blx	r3
	
	// Read first byte for command
	switch(in_buf[0])
     c48:	7823      	ldrb	r3, [r4, #0]
     c4a:	2b47      	cmp	r3, #71	; 0x47
     c4c:	d02e      	beq.n	cac <guiHandle+0x74>
     c4e:	d90d      	bls.n	c6c <guiHandle+0x34>
     c50:	2b72      	cmp	r3, #114	; 0x72
     c52:	d022      	beq.n	c9a <guiHandle+0x62>
     c54:	d917      	bls.n	c86 <guiHandle+0x4e>
     c56:	2b77      	cmp	r3, #119	; 0x77
     c58:	d01a      	beq.n	c90 <guiHandle+0x58>
     c5a:	2b7e      	cmp	r3, #126	; 0x7e
     c5c:	d12d      	bne.n	cba <guiHandle+0x82>
		case '-': // Stop radio
			appStop();
			break;
			
		case '~': // Request BER data
			if(linkAudio)
     c5e:	4b1b      	ldr	r3, [pc, #108]	; (ccc <guiHandle+0x94>)
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d01f      	beq.n	ca6 <guiHandle+0x6e>
				guiSendAudio();
     c66:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <guiHandle+0x98>)
     c68:	4798      	blx	r3
     c6a:	e006      	b.n	c7a <guiHandle+0x42>
	switch(in_buf[0])
     c6c:	2b2b      	cmp	r3, #43	; 0x2b
     c6e:	d017      	beq.n	ca0 <guiHandle+0x68>
     c70:	d804      	bhi.n	c7c <guiHandle+0x44>
     c72:	3b05      	subs	r3, #5
     c74:	b2db      	uxtb	r3, r3
     c76:	2b02      	cmp	r3, #2
     c78:	d81f      	bhi.n	cba <guiHandle+0x82>
			
		default:
			guiSendConfig();
			break;
	}	
}
     c7a:	bd10      	pop	{r4, pc}
	switch(in_buf[0])
     c7c:	2b2d      	cmp	r3, #45	; 0x2d
     c7e:	d11c      	bne.n	cba <guiHandle+0x82>
			appStop();
     c80:	4b14      	ldr	r3, [pc, #80]	; (cd4 <guiHandle+0x9c>)
     c82:	4798      	blx	r3
			break;
     c84:	e7f9      	b.n	c7a <guiHandle+0x42>
	switch(in_buf[0])
     c86:	2b69      	cmp	r3, #105	; 0x69
     c88:	d117      	bne.n	cba <guiHandle+0x82>
			guiSendConfig();
     c8a:	4b13      	ldr	r3, [pc, #76]	; (cd8 <guiHandle+0xa0>)
     c8c:	4798      	blx	r3
			break;
     c8e:	e7f4      	b.n	c7a <guiHandle+0x42>
			guiReceiveConfig();
     c90:	4b12      	ldr	r3, [pc, #72]	; (cdc <guiHandle+0xa4>)
     c92:	4798      	blx	r3
			guiSendConfig();
     c94:	4b10      	ldr	r3, [pc, #64]	; (cd8 <guiHandle+0xa0>)
     c96:	4798      	blx	r3
			break;
     c98:	e7ef      	b.n	c7a <guiHandle+0x42>
			resetStatistics();
     c9a:	4b11      	ldr	r3, [pc, #68]	; (ce0 <guiHandle+0xa8>)
     c9c:	4798      	blx	r3
			break;
     c9e:	e7ec      	b.n	c7a <guiHandle+0x42>
			appStart();			
     ca0:	4b10      	ldr	r3, [pc, #64]	; (ce4 <guiHandle+0xac>)
     ca2:	4798      	blx	r3
			break;
     ca4:	e7e9      	b.n	c7a <guiHandle+0x42>
				guiSendBER();
     ca6:	4b10      	ldr	r3, [pc, #64]	; (ce8 <guiHandle+0xb0>)
     ca8:	4798      	blx	r3
     caa:	e7e6      	b.n	c7a <guiHandle+0x42>
			runGUI = false;
     cac:	2200      	movs	r2, #0
     cae:	4b0f      	ldr	r3, [pc, #60]	; (cec <guiHandle+0xb4>)
     cb0:	701a      	strb	r2, [r3, #0]
			usbPrintf("Verbose mode\n");
     cb2:	480f      	ldr	r0, [pc, #60]	; (cf0 <guiHandle+0xb8>)
     cb4:	4b0f      	ldr	r3, [pc, #60]	; (cf4 <guiHandle+0xbc>)
     cb6:	4798      	blx	r3
			break;
     cb8:	e7df      	b.n	c7a <guiHandle+0x42>
			guiSendConfig();
     cba:	4b07      	ldr	r3, [pc, #28]	; (cd8 <guiHandle+0xa0>)
     cbc:	4798      	blx	r3
}
     cbe:	e7dc      	b.n	c7a <guiHandle+0x42>
     cc0:	00002641 	.word	0x00002641
     cc4:	200002e4 	.word	0x200002e4
     cc8:	00003c95 	.word	0x00003c95
     ccc:	20000278 	.word	0x20000278
     cd0:	00000ab1 	.word	0x00000ab1
     cd4:	000009bd 	.word	0x000009bd
     cd8:	00000ac9 	.word	0x00000ac9
     cdc:	00000b8d 	.word	0x00000b8d
     ce0:	000003f9 	.word	0x000003f9
     ce4:	00000989 	.word	0x00000989
     ce8:	00000a1d 	.word	0x00000a1d
     cec:	20000000 	.word	0x20000000
     cf0:	00005bd4 	.word	0x00005bd4
     cf4:	00002669 	.word	0x00002669

00000cf8 <handleUSB>:

void handleUSB(void)
{
     cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfa:	46de      	mov	lr, fp
     cfc:	4657      	mov	r7, sl
     cfe:	464e      	mov	r6, r9
     d00:	4645      	mov	r5, r8
     d02:	b5e0      	push	{r5, r6, r7, lr}
     d04:	b08f      	sub	sp, #60	; 0x3c
  uint8_t w;
  uint16_t b,r;
  
  
  // Loop through input
  while(usbIsAvailable()){
     d06:	4bd3      	ldr	r3, [pc, #844]	; (1054 <handleUSB+0x35c>)
     d08:	4798      	blx	r3
     d0a:	2800      	cmp	r0, #0
     d0c:	d100      	bne.n	d10 <handleUSB+0x18>
     d0e:	e352      	b.n	13b6 <handleUSB+0x6be>
	
	if(runGUI)
     d10:	4bd1      	ldr	r3, [pc, #836]	; (1058 <handleUSB+0x360>)
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	2b00      	cmp	r3, #0
     d16:	d002      	beq.n	d1e <handleUSB+0x26>
	{
		guiHandle();
     d18:	4bd0      	ldr	r3, [pc, #832]	; (105c <handleUSB+0x364>)
     d1a:	4798      	blx	r3
		continue;
     d1c:	e7f3      	b.n	d06 <handleUSB+0xe>
	}
	
    command = usbGet(); // First command character
     d1e:	4bd0      	ldr	r3, [pc, #832]	; (1060 <handleUSB+0x368>)
     d20:	4798      	blx	r3
    
    
    switch(command){
     d22:	380a      	subs	r0, #10
     d24:	b2c3      	uxtb	r3, r0
     d26:	2b74      	cmp	r3, #116	; 0x74
     d28:	d900      	bls.n	d2c <handleUSB+0x34>
     d2a:	e340      	b.n	13ae <handleUSB+0x6b6>
     d2c:	0098      	lsls	r0, r3, #2
     d2e:	4bcd      	ldr	r3, [pc, #820]	; (1064 <handleUSB+0x36c>)
     d30:	581b      	ldr	r3, [r3, r0]
     d32:	469f      	mov	pc, r3
		
	  case  'G': // Gabriel entry point for GUI, byte code 0x47
		  runGUI = true;
     d34:	2201      	movs	r2, #1
     d36:	4bc8      	ldr	r3, [pc, #800]	; (1058 <handleUSB+0x360>)
     d38:	701a      	strb	r2, [r3, #0]
		  break;
     d3a:	e7e4      	b.n	d06 <handleUSB+0xe>
      
      case 'i': // Identity            
          usbPrintf("==Eval Kit==\n");
     d3c:	48ca      	ldr	r0, [pc, #808]	; (1068 <handleUSB+0x370>)
     d3e:	4bcb      	ldr	r3, [pc, #812]	; (106c <handleUSB+0x374>)
     d40:	4798      	blx	r3
          if(!BISTcompleted)
     d42:	4bcb      	ldr	r3, [pc, #812]	; (1070 <handleUSB+0x378>)
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d057      	beq.n	dfa <handleUSB+0x102>
            usbPrintf("BIST failed\n");
          usbPrintf("linkPacketSize = %d\n", linkPacketSize);
     d4a:	4bca      	ldr	r3, [pc, #808]	; (1074 <handleUSB+0x37c>)
     d4c:	8819      	ldrh	r1, [r3, #0]
     d4e:	48ca      	ldr	r0, [pc, #808]	; (1078 <handleUSB+0x380>)
     d50:	4cc6      	ldr	r4, [pc, #792]	; (106c <handleUSB+0x374>)
     d52:	47a0      	blx	r4
          usbPrintf("linkPacketRate = %d\n", linkPacketRate);
     d54:	4bc9      	ldr	r3, [pc, #804]	; (107c <handleUSB+0x384>)
     d56:	8819      	ldrh	r1, [r3, #0]
     d58:	48c9      	ldr	r0, [pc, #804]	; (1080 <handleUSB+0x388>)
     d5a:	47a0      	blx	r4
          usbPrintf("linkSleepMode = p%d\n", linkSleepMode);
     d5c:	4bc9      	ldr	r3, [pc, #804]	; (1084 <handleUSB+0x38c>)
     d5e:	7819      	ldrb	r1, [r3, #0]
     d60:	48c9      	ldr	r0, [pc, #804]	; (1088 <handleUSB+0x390>)
     d62:	47a0      	blx	r4
		  usbPrintf("linkSyncWord = 0x%04hx\n", linkSyncWord);
     d64:	4bc9      	ldr	r3, [pc, #804]	; (108c <handleUSB+0x394>)
     d66:	8819      	ldrh	r1, [r3, #0]
     d68:	48c9      	ldr	r0, [pc, #804]	; (1090 <handleUSB+0x398>)
     d6a:	47a0      	blx	r4
		  usbPrintf("linkPreambleSize = 0x%02hx\n", linkPreambleSize);
     d6c:	4bc9      	ldr	r3, [pc, #804]	; (1094 <handleUSB+0x39c>)
     d6e:	8819      	ldrh	r1, [r3, #0]
     d70:	48c9      	ldr	r0, [pc, #804]	; (1098 <handleUSB+0x3a0>)
     d72:	47a0      	blx	r4
		  usbPrintf("linkMinNoiLvl = 0x%02hx\n", linkMinNoiLvl);
     d74:	4bc9      	ldr	r3, [pc, #804]	; (109c <handleUSB+0x3a4>)
     d76:	8819      	ldrh	r1, [r3, #0]
     d78:	48c9      	ldr	r0, [pc, #804]	; (10a0 <handleUSB+0x3a8>)
     d7a:	47a0      	blx	r4
		  usbPrintf("linkMinPulAmp = 0x%02hx\n", linkMinPulAmp);
     d7c:	4bc9      	ldr	r3, [pc, #804]	; (10a4 <handleUSB+0x3ac>)
     d7e:	8819      	ldrh	r1, [r3, #0]
     d80:	48c9      	ldr	r0, [pc, #804]	; (10a8 <handleUSB+0x3b0>)
     d82:	47a0      	blx	r4
		  usbPrintf("linkMinSigStr = 0x%02hx\n", linkMinSigStr);
     d84:	4bc9      	ldr	r3, [pc, #804]	; (10ac <handleUSB+0x3b4>)
     d86:	8819      	ldrh	r1, [r3, #0]
     d88:	48c9      	ldr	r0, [pc, #804]	; (10b0 <handleUSB+0x3b8>)
     d8a:	47a0      	blx	r4
		  usbPrintf("linkBidirectional = %d\n", linkBidirectional);
     d8c:	4bc9      	ldr	r3, [pc, #804]	; (10b4 <handleUSB+0x3bc>)
     d8e:	7819      	ldrb	r1, [r3, #0]
     d90:	48c9      	ldr	r0, [pc, #804]	; (10b8 <handleUSB+0x3c0>)
     d92:	47a0      	blx	r4
		  usbPrintf("linkMaster = %d\n", linkMaster);
     d94:	4bc9      	ldr	r3, [pc, #804]	; (10bc <handleUSB+0x3c4>)
     d96:	7819      	ldrb	r1, [r3, #0]
     d98:	48c9      	ldr	r0, [pc, #804]	; (10c0 <handleUSB+0x3c8>)
     d9a:	47a0      	blx	r4
		  usbPrintf("linkRandom = %d\n", linkRandom);
     d9c:	4bc9      	ldr	r3, [pc, #804]	; (10c4 <handleUSB+0x3cc>)
     d9e:	7819      	ldrb	r1, [r3, #0]
     da0:	48c9      	ldr	r0, [pc, #804]	; (10c8 <handleUSB+0x3d0>)
     da2:	47a0      	blx	r4
		  usbPrintf("linkAudio = %d\n", linkAudio);
     da4:	4bc9      	ldr	r3, [pc, #804]	; (10cc <handleUSB+0x3d4>)
     da6:	7819      	ldrb	r1, [r3, #0]
     da8:	48c9      	ldr	r0, [pc, #804]	; (10d0 <handleUSB+0x3d8>)
     daa:	47a0      	blx	r4
		  usbPrintf("linkMask = %02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx\n", linkTXMask[0],linkTXMask[1],linkTXMask[2],linkTXMask[3], linkTXMask[4],linkTXMask[5],linkTXMask[6],linkTXMask[7], linkTXMask[8],linkTXMask[9],linkTXMask[10],linkTXMask[11] );
     dac:	48c9      	ldr	r0, [pc, #804]	; (10d4 <handleUSB+0x3dc>)
     dae:	7801      	ldrb	r1, [r0, #0]
     db0:	7842      	ldrb	r2, [r0, #1]
     db2:	7883      	ldrb	r3, [r0, #2]
     db4:	930b      	str	r3, [sp, #44]	; 0x2c
     db6:	78c5      	ldrb	r5, [r0, #3]
     db8:	7906      	ldrb	r6, [r0, #4]
     dba:	7947      	ldrb	r7, [r0, #5]
     dbc:	7983      	ldrb	r3, [r0, #6]
     dbe:	469c      	mov	ip, r3
     dc0:	79c3      	ldrb	r3, [r0, #7]
     dc2:	4698      	mov	r8, r3
     dc4:	7a03      	ldrb	r3, [r0, #8]
     dc6:	4699      	mov	r9, r3
     dc8:	7a43      	ldrb	r3, [r0, #9]
     dca:	469a      	mov	sl, r3
     dcc:	7a83      	ldrb	r3, [r0, #10]
     dce:	7ac0      	ldrb	r0, [r0, #11]
     dd0:	9008      	str	r0, [sp, #32]
     dd2:	9307      	str	r3, [sp, #28]
     dd4:	4653      	mov	r3, sl
     dd6:	9306      	str	r3, [sp, #24]
     dd8:	464b      	mov	r3, r9
     dda:	9305      	str	r3, [sp, #20]
     ddc:	4643      	mov	r3, r8
     dde:	9304      	str	r3, [sp, #16]
     de0:	4663      	mov	r3, ip
     de2:	9303      	str	r3, [sp, #12]
     de4:	9702      	str	r7, [sp, #8]
     de6:	9601      	str	r6, [sp, #4]
     de8:	9500      	str	r5, [sp, #0]
     dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     dec:	48ba      	ldr	r0, [pc, #744]	; (10d8 <handleUSB+0x3e0>)
     dee:	47a0      	blx	r4
		  usbPrintf("audioDecimate = %d\n", audioDecimate);
     df0:	4bba      	ldr	r3, [pc, #744]	; (10dc <handleUSB+0x3e4>)
     df2:	7819      	ldrb	r1, [r3, #0]
     df4:	48ba      	ldr	r0, [pc, #744]	; (10e0 <handleUSB+0x3e8>)
     df6:	47a0      	blx	r4
          usbPrintf("sparkMode = "); 
          if(sparkGetMode() == SPARK_MODE_RX)
            usbPrintf("SPARK_MODE_RX\n");
          else
            usbPrintf("SPARK_MODE_TX\n");*/
          break;  
     df8:	e785      	b.n	d06 <handleUSB+0xe>
            usbPrintf("BIST failed\n");
     dfa:	48ba      	ldr	r0, [pc, #744]	; (10e4 <handleUSB+0x3ec>)
     dfc:	4b9b      	ldr	r3, [pc, #620]	; (106c <handleUSB+0x374>)
     dfe:	4798      	blx	r3
     e00:	e7a3      	b.n	d4a <handleUSB+0x52>
		  
		case 'L': // Toggle on-board LED
			toggleLED();
     e02:	4bb9      	ldr	r3, [pc, #740]	; (10e8 <handleUSB+0x3f0>)
     e04:	4798      	blx	r3
			break;
     e06:	e77e      	b.n	d06 <handleUSB+0xe>

        case '?':
          usbPrintf("Running BIST..\n");
     e08:	48b8      	ldr	r0, [pc, #736]	; (10ec <handleUSB+0x3f4>)
     e0a:	4c98      	ldr	r4, [pc, #608]	; (106c <handleUSB+0x374>)
     e0c:	47a0      	blx	r4
          //sparkStopRadio();
          //boardSetup();
          BISTcompleted = sparkBIST(true);
     e0e:	2001      	movs	r0, #1
     e10:	4bb7      	ldr	r3, [pc, #732]	; (10f0 <handleUSB+0x3f8>)
     e12:	4798      	blx	r3
     e14:	4b96      	ldr	r3, [pc, #600]	; (1070 <handleUSB+0x378>)
     e16:	7018      	strb	r0, [r3, #0]
          usbPrintf("done\n");
     e18:	48b6      	ldr	r0, [pc, #728]	; (10f4 <handleUSB+0x3fc>)
     e1a:	47a0      	blx	r4
          break;
     e1c:	e773      	b.n	d06 <handleUSB+0xe>
		  
		case '~':
			publishStats();
     e1e:	4bb6      	ldr	r3, [pc, #728]	; (10f8 <handleUSB+0x400>)
     e20:	4798      	blx	r3
			break;
     e22:	e770      	b.n	d06 <handleUSB+0xe>

        case 'l': // Packet rate
          linkPacketRate = usbParseInt();
     e24:	4bb5      	ldr	r3, [pc, #724]	; (10fc <handleUSB+0x404>)
     e26:	4798      	blx	r3
     e28:	b281      	uxth	r1, r0
     e2a:	4b94      	ldr	r3, [pc, #592]	; (107c <handleUSB+0x384>)
     e2c:	8019      	strh	r1, [r3, #0]
          usbPrintf("linkPacketRate = %d\n", linkPacketRate);
     e2e:	4894      	ldr	r0, [pc, #592]	; (1080 <handleUSB+0x388>)
     e30:	4b8e      	ldr	r3, [pc, #568]	; (106c <handleUSB+0x374>)
     e32:	4798      	blx	r3
          appStop();
     e34:	4bb2      	ldr	r3, [pc, #712]	; (1100 <handleUSB+0x408>)
     e36:	4798      	blx	r3
          configureLink();
     e38:	4bb2      	ldr	r3, [pc, #712]	; (1104 <handleUSB+0x40c>)
     e3a:	4798      	blx	r3
          appStart();
     e3c:	4bb2      	ldr	r3, [pc, #712]	; (1108 <handleUSB+0x410>)
     e3e:	4798      	blx	r3
          break;
     e40:	e761      	b.n	d06 <handleUSB+0xe>
		  
		case 'J':
			disableClockGate();
     e42:	4bb2      	ldr	r3, [pc, #712]	; (110c <handleUSB+0x414>)
     e44:	4798      	blx	r3
			break;
     e46:	e75e      	b.n	d06 <handleUSB+0xe>
		
		case 'D':
		  audioDecimate = usbParseInt();
     e48:	4bac      	ldr	r3, [pc, #688]	; (10fc <handleUSB+0x404>)
     e4a:	4798      	blx	r3
     e4c:	4ba3      	ldr	r3, [pc, #652]	; (10dc <handleUSB+0x3e4>)
     e4e:	7018      	strb	r0, [r3, #0]
		  break;
     e50:	e759      	b.n	d06 <handleUSB+0xe>

        case 'w': // Packet size
          linkPacketSize = (usbParseInt()/8)*8; 
     e52:	4baa      	ldr	r3, [pc, #680]	; (10fc <handleUSB+0x404>)
     e54:	4798      	blx	r3
     e56:	2307      	movs	r3, #7
     e58:	4398      	bics	r0, r3
     e5a:	b281      	uxth	r1, r0
     e5c:	4b85      	ldr	r3, [pc, #532]	; (1074 <handleUSB+0x37c>)
     e5e:	8019      	strh	r1, [r3, #0]
          usbPrintf("linkPacketSize = %d\n", linkPacketSize);
     e60:	4885      	ldr	r0, [pc, #532]	; (1078 <handleUSB+0x380>)
     e62:	4b82      	ldr	r3, [pc, #520]	; (106c <handleUSB+0x374>)
     e64:	4798      	blx	r3
          appStop();
     e66:	4ba6      	ldr	r3, [pc, #664]	; (1100 <handleUSB+0x408>)
     e68:	4798      	blx	r3
          configureLink();
     e6a:	4ba6      	ldr	r3, [pc, #664]	; (1104 <handleUSB+0x40c>)
     e6c:	4798      	blx	r3
          appStart();
     e6e:	4ba6      	ldr	r3, [pc, #664]	; (1108 <handleUSB+0x410>)
     e70:	4798      	blx	r3
          break;
     e72:	e748      	b.n	d06 <handleUSB+0xe>

        case 'c': // calibrate DLL and VCRO
		 appStop();
     e74:	4ba2      	ldr	r3, [pc, #648]	; (1100 <handleUSB+0x408>)
     e76:	4798      	blx	r3
          b = usbParseInt();
     e78:	4ba0      	ldr	r3, [pc, #640]	; (10fc <handleUSB+0x404>)
     e7a:	4798      	blx	r3
     e7c:	252e      	movs	r5, #46	; 0x2e
     e7e:	ab02      	add	r3, sp, #8
     e80:	469c      	mov	ip, r3
     e82:	4465      	add	r5, ip
     e84:	8028      	strh	r0, [r5, #0]
          w = sparkCalDLL(true);
     e86:	2001      	movs	r0, #1
     e88:	4ea1      	ldr	r6, [pc, #644]	; (1110 <handleUSB+0x418>)
     e8a:	47b0      	blx	r6
     e8c:	0001      	movs	r1, r0
          usbPrintf("sparkCalDLL(RX) = %02hx\n", w);
     e8e:	48a1      	ldr	r0, [pc, #644]	; (1114 <handleUSB+0x41c>)
     e90:	4c76      	ldr	r4, [pc, #472]	; (106c <handleUSB+0x374>)
     e92:	47a0      	blx	r4
          w = sparkCalDLL(false);
     e94:	2000      	movs	r0, #0
     e96:	47b0      	blx	r6
     e98:	0001      	movs	r1, r0
          usbPrintf("sparkCalDLL(TX) = %02hx\n", w);
     e9a:	489f      	ldr	r0, [pc, #636]	; (1118 <handleUSB+0x420>)
     e9c:	47a0      	blx	r4
          w = sparkCalVCRO(b);
     e9e:	8828      	ldrh	r0, [r5, #0]
     ea0:	4b9e      	ldr	r3, [pc, #632]	; (111c <handleUSB+0x424>)
     ea2:	4798      	blx	r3
     ea4:	0002      	movs	r2, r0
          usbPrintf("sparkCalVCRO(%d) = %02hx\n", b,w);
     ea6:	8829      	ldrh	r1, [r5, #0]
     ea8:	489d      	ldr	r0, [pc, #628]	; (1120 <handleUSB+0x428>)
     eaa:	47a0      	blx	r4
          break;
     eac:	e72b      	b.n	d06 <handleUSB+0xe>
      
      case '+':
        // Start the cycle
        usbPrintf("Start radio \n");
     eae:	489d      	ldr	r0, [pc, #628]	; (1124 <handleUSB+0x42c>)
     eb0:	4b6e      	ldr	r3, [pc, #440]	; (106c <handleUSB+0x374>)
     eb2:	4798      	blx	r3
        appStart();
     eb4:	4b94      	ldr	r3, [pc, #592]	; (1108 <handleUSB+0x410>)
     eb6:	4798      	blx	r3
        break; 
     eb8:	e725      	b.n	d06 <handleUSB+0xe>

      case '-':
        // Stop the cycle
        usbPrintf("Stop radio \n");
     eba:	489b      	ldr	r0, [pc, #620]	; (1128 <handleUSB+0x430>)
     ebc:	4b6b      	ldr	r3, [pc, #428]	; (106c <handleUSB+0x374>)
     ebe:	4798      	blx	r3
        appStop();
     ec0:	4b8f      	ldr	r3, [pc, #572]	; (1100 <handleUSB+0x408>)
     ec2:	4798      	blx	r3
        break;
     ec4:	e71f      	b.n	d06 <handleUSB+0xe>
		
		case 'a':
			appStop();
     ec6:	4b8e      	ldr	r3, [pc, #568]	; (1100 <handleUSB+0x408>)
     ec8:	4798      	blx	r3
			while(!usbIsAvailable());
     eca:	4b62      	ldr	r3, [pc, #392]	; (1054 <handleUSB+0x35c>)
     ecc:	4798      	blx	r3
     ece:	2800      	cmp	r0, #0
     ed0:	d0fb      	beq.n	eca <handleUSB+0x1d2>
			std_buf[0] = usbGet();
     ed2:	4b63      	ldr	r3, [pc, #396]	; (1060 <handleUSB+0x368>)
     ed4:	4798      	blx	r3
     ed6:	4a95      	ldr	r2, [pc, #596]	; (112c <handleUSB+0x434>)
     ed8:	7010      	strb	r0, [r2, #0]
			switch(std_buf[0])
     eda:	2830      	cmp	r0, #48	; 0x30
     edc:	d008      	beq.n	ef0 <handleUSB+0x1f8>
     ede:	2831      	cmp	r0, #49	; 0x31
     ee0:	d00a      	beq.n	ef8 <handleUSB+0x200>
					break;
				case '1':
					linkAudio = true;
					break;
			}
			if(linkAudio)
     ee2:	4b7a      	ldr	r3, [pc, #488]	; (10cc <handleUSB+0x3d4>)
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d10a      	bne.n	f00 <handleUSB+0x208>
				audioConfigure();
			appStart();
     eea:	4b87      	ldr	r3, [pc, #540]	; (1108 <handleUSB+0x410>)
     eec:	4798      	blx	r3
			break;
     eee:	e70a      	b.n	d06 <handleUSB+0xe>
					linkAudio = false;
     ef0:	2200      	movs	r2, #0
     ef2:	4b76      	ldr	r3, [pc, #472]	; (10cc <handleUSB+0x3d4>)
     ef4:	701a      	strb	r2, [r3, #0]
					break;
     ef6:	e7f4      	b.n	ee2 <handleUSB+0x1ea>
					linkAudio = true;
     ef8:	2201      	movs	r2, #1
     efa:	4b74      	ldr	r3, [pc, #464]	; (10cc <handleUSB+0x3d4>)
     efc:	701a      	strb	r2, [r3, #0]
					break;
     efe:	e7f0      	b.n	ee2 <handleUSB+0x1ea>
				audioConfigure();
     f00:	4b8b      	ldr	r3, [pc, #556]	; (1130 <handleUSB+0x438>)
     f02:	4798      	blx	r3
     f04:	e7f1      	b.n	eea <handleUSB+0x1f2>
      
      case 'p':
        appStop();
     f06:	4b7e      	ldr	r3, [pc, #504]	; (1100 <handleUSB+0x408>)
     f08:	4798      	blx	r3
        while(!usbIsAvailable());
     f0a:	4b52      	ldr	r3, [pc, #328]	; (1054 <handleUSB+0x35c>)
     f0c:	4798      	blx	r3
     f0e:	2800      	cmp	r0, #0
     f10:	d0fb      	beq.n	f0a <handleUSB+0x212>
        std_buf[0] = usbGet();
     f12:	4b53      	ldr	r3, [pc, #332]	; (1060 <handleUSB+0x368>)
     f14:	4798      	blx	r3
     f16:	4a85      	ldr	r2, [pc, #532]	; (112c <handleUSB+0x434>)
     f18:	7010      	strb	r0, [r2, #0]
        switch(std_buf[0])
     f1a:	2831      	cmp	r0, #49	; 0x31
     f1c:	d01a      	beq.n	f54 <handleUSB+0x25c>
     f1e:	d90c      	bls.n	f3a <handleUSB+0x242>
     f20:	2832      	cmp	r0, #50	; 0x32
     f22:	d020      	beq.n	f66 <handleUSB+0x26e>
     f24:	2833      	cmp	r0, #51	; 0x33
     f26:	d112      	bne.n	f4e <handleUSB+0x256>
          usbPrintf("SLEEP_SHALLOW\n");
          linkSleepMode = SPARK_SLEEP_SHALLOW;
          configureLink();
          break;
          case '3':
          usbPrintf("SLEEP_DEEP\n");
     f28:	4882      	ldr	r0, [pc, #520]	; (1134 <handleUSB+0x43c>)
     f2a:	4b50      	ldr	r3, [pc, #320]	; (106c <handleUSB+0x374>)
     f2c:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_DEEP;
     f2e:	2203      	movs	r2, #3
     f30:	4b54      	ldr	r3, [pc, #336]	; (1084 <handleUSB+0x38c>)
     f32:	701a      	strb	r2, [r3, #0]
          configureLink();
     f34:	4b73      	ldr	r3, [pc, #460]	; (1104 <handleUSB+0x40c>)
     f36:	4798      	blx	r3
          break;
     f38:	e009      	b.n	f4e <handleUSB+0x256>
        switch(std_buf[0])
     f3a:	2830      	cmp	r0, #48	; 0x30
     f3c:	d107      	bne.n	f4e <handleUSB+0x256>
          usbPrintf("SLEEP_NONE\n");
     f3e:	487e      	ldr	r0, [pc, #504]	; (1138 <handleUSB+0x440>)
     f40:	4b4a      	ldr	r3, [pc, #296]	; (106c <handleUSB+0x374>)
     f42:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_NONE;
     f44:	2200      	movs	r2, #0
     f46:	4b4f      	ldr	r3, [pc, #316]	; (1084 <handleUSB+0x38c>)
     f48:	701a      	strb	r2, [r3, #0]
          configureLink();
     f4a:	4b6e      	ldr	r3, [pc, #440]	; (1104 <handleUSB+0x40c>)
     f4c:	4798      	blx	r3
        }
        appStart();
     f4e:	4b6e      	ldr	r3, [pc, #440]	; (1108 <handleUSB+0x410>)
     f50:	4798      	blx	r3
        break;
     f52:	e6d8      	b.n	d06 <handleUSB+0xe>
          usbPrintf("SLEEP_IDLE\n");
     f54:	4879      	ldr	r0, [pc, #484]	; (113c <handleUSB+0x444>)
     f56:	4b45      	ldr	r3, [pc, #276]	; (106c <handleUSB+0x374>)
     f58:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_IDLE;
     f5a:	2201      	movs	r2, #1
     f5c:	4b49      	ldr	r3, [pc, #292]	; (1084 <handleUSB+0x38c>)
     f5e:	701a      	strb	r2, [r3, #0]
          configureLink();
     f60:	4b68      	ldr	r3, [pc, #416]	; (1104 <handleUSB+0x40c>)
     f62:	4798      	blx	r3
          break;
     f64:	e7f3      	b.n	f4e <handleUSB+0x256>
          usbPrintf("SLEEP_SHALLOW\n");
     f66:	4876      	ldr	r0, [pc, #472]	; (1140 <handleUSB+0x448>)
     f68:	4b40      	ldr	r3, [pc, #256]	; (106c <handleUSB+0x374>)
     f6a:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_SHALLOW;
     f6c:	2202      	movs	r2, #2
     f6e:	4b45      	ldr	r3, [pc, #276]	; (1084 <handleUSB+0x38c>)
     f70:	701a      	strb	r2, [r3, #0]
          configureLink();
     f72:	4b64      	ldr	r3, [pc, #400]	; (1104 <handleUSB+0x40c>)
     f74:	4798      	blx	r3
          break;
     f76:	e7ea      	b.n	f4e <handleUSB+0x256>

      case 'r':
        usbPrintf("Resetting statistics\n");
     f78:	4872      	ldr	r0, [pc, #456]	; (1144 <handleUSB+0x44c>)
     f7a:	4b3c      	ldr	r3, [pc, #240]	; (106c <handleUSB+0x374>)
     f7c:	4798      	blx	r3
        resetStatistics();
     f7e:	4b72      	ldr	r3, [pc, #456]	; (1148 <handleUSB+0x450>)
     f80:	4798      	blx	r3
        break;
     f82:	e6c0      	b.n	d06 <handleUSB+0xe>

      case 'x':
        appStop();
     f84:	4b5e      	ldr	r3, [pc, #376]	; (1100 <handleUSB+0x408>)
     f86:	4798      	blx	r3
        linkRandom = !linkRandom;
     f88:	4c4e      	ldr	r4, [pc, #312]	; (10c4 <handleUSB+0x3cc>)
     f8a:	7823      	ldrb	r3, [r4, #0]
     f8c:	2201      	movs	r2, #1
     f8e:	4053      	eors	r3, r2
     f90:	7023      	strb	r3, [r4, #0]
        configureLink();
     f92:	4b5c      	ldr	r3, [pc, #368]	; (1104 <handleUSB+0x40c>)
     f94:	4798      	blx	r3
        usbPrintf("Random = %d\n", linkRandom);
     f96:	7821      	ldrb	r1, [r4, #0]
     f98:	486c      	ldr	r0, [pc, #432]	; (114c <handleUSB+0x454>)
     f9a:	4b34      	ldr	r3, [pc, #208]	; (106c <handleUSB+0x374>)
     f9c:	4798      	blx	r3
        break;
     f9e:	e6b2      	b.n	d06 <handleUSB+0xe>
		
	 case 'S': // Change syncword
		appStop();
     fa0:	4b57      	ldr	r3, [pc, #348]	; (1100 <handleUSB+0x408>)
     fa2:	4798      	blx	r3
		std_buf[0] = usbGet(); std_buf[1] = usbGet();
     fa4:	4e2e      	ldr	r6, [pc, #184]	; (1060 <handleUSB+0x368>)
     fa6:	47b0      	blx	r6
     fa8:	4c60      	ldr	r4, [pc, #384]	; (112c <handleUSB+0x434>)
     faa:	7020      	strb	r0, [r4, #0]
     fac:	47b0      	blx	r6
     fae:	7060      	strb	r0, [r4, #1]
		sscanf((char*) &std_buf[0], "%2hx", &b);
     fb0:	252e      	movs	r5, #46	; 0x2e
     fb2:	ab02      	add	r3, sp, #8
     fb4:	469c      	mov	ip, r3
     fb6:	4465      	add	r5, ip
     fb8:	002a      	movs	r2, r5
     fba:	4965      	ldr	r1, [pc, #404]	; (1150 <handleUSB+0x458>)
     fbc:	0020      	movs	r0, r4
     fbe:	4b65      	ldr	r3, [pc, #404]	; (1154 <handleUSB+0x45c>)
     fc0:	4699      	mov	r9, r3
     fc2:	4798      	blx	r3
		linkSyncWord = b << 8;
     fc4:	882b      	ldrh	r3, [r5, #0]
     fc6:	021b      	lsls	r3, r3, #8
     fc8:	4f30      	ldr	r7, [pc, #192]	; (108c <handleUSB+0x394>)
     fca:	803b      	strh	r3, [r7, #0]
		std_buf[0] = usbGet(); std_buf[1] = usbGet();
     fcc:	47b0      	blx	r6
     fce:	7020      	strb	r0, [r4, #0]
     fd0:	47b0      	blx	r6
     fd2:	7060      	strb	r0, [r4, #1]
		sscanf((char*) &std_buf[0], "%2hx", &b);
     fd4:	002a      	movs	r2, r5
     fd6:	495e      	ldr	r1, [pc, #376]	; (1150 <handleUSB+0x458>)
     fd8:	0020      	movs	r0, r4
     fda:	47c8      	blx	r9
		linkSyncWord |= b;
     fdc:	883b      	ldrh	r3, [r7, #0]
     fde:	882a      	ldrh	r2, [r5, #0]
     fe0:	4313      	orrs	r3, r2
     fe2:	803b      	strh	r3, [r7, #0]
		configureLink();
     fe4:	4b47      	ldr	r3, [pc, #284]	; (1104 <handleUSB+0x40c>)
     fe6:	4798      	blx	r3
		appStart();
     fe8:	4b47      	ldr	r3, [pc, #284]	; (1108 <handleUSB+0x410>)
     fea:	4798      	blx	r3
		break;
     fec:	e68b      	b.n	d06 <handleUSB+0xe>
		
	 case 'P': // Change preamble size
	 appStop();
     fee:	4b44      	ldr	r3, [pc, #272]	; (1100 <handleUSB+0x408>)
     ff0:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
     ff2:	4d1b      	ldr	r5, [pc, #108]	; (1060 <handleUSB+0x368>)
     ff4:	47a8      	blx	r5
     ff6:	4c4d      	ldr	r4, [pc, #308]	; (112c <handleUSB+0x434>)
     ff8:	7020      	strb	r0, [r4, #0]
     ffa:	47a8      	blx	r5
     ffc:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
     ffe:	252e      	movs	r5, #46	; 0x2e
    1000:	ab02      	add	r3, sp, #8
    1002:	469c      	mov	ip, r3
    1004:	4465      	add	r5, ip
    1006:	002a      	movs	r2, r5
    1008:	4951      	ldr	r1, [pc, #324]	; (1150 <handleUSB+0x458>)
    100a:	0020      	movs	r0, r4
    100c:	4b51      	ldr	r3, [pc, #324]	; (1154 <handleUSB+0x45c>)
    100e:	4798      	blx	r3
	 linkPreambleSize = b ;
    1010:	882a      	ldrh	r2, [r5, #0]
    1012:	4b20      	ldr	r3, [pc, #128]	; (1094 <handleUSB+0x39c>)
    1014:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1016:	4b3b      	ldr	r3, [pc, #236]	; (1104 <handleUSB+0x40c>)
    1018:	4798      	blx	r3
	 appStart();
    101a:	4b3b      	ldr	r3, [pc, #236]	; (1108 <handleUSB+0x410>)
    101c:	4798      	blx	r3
	 break;		
    101e:	e672      	b.n	d06 <handleUSB+0xe>
	 
	 case 'X': // Change min noise level
	 appStop();
    1020:	4b37      	ldr	r3, [pc, #220]	; (1100 <handleUSB+0x408>)
    1022:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1024:	4d0e      	ldr	r5, [pc, #56]	; (1060 <handleUSB+0x368>)
    1026:	47a8      	blx	r5
    1028:	4c40      	ldr	r4, [pc, #256]	; (112c <handleUSB+0x434>)
    102a:	7020      	strb	r0, [r4, #0]
    102c:	47a8      	blx	r5
    102e:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1030:	252e      	movs	r5, #46	; 0x2e
    1032:	ab02      	add	r3, sp, #8
    1034:	469c      	mov	ip, r3
    1036:	4465      	add	r5, ip
    1038:	002a      	movs	r2, r5
    103a:	4945      	ldr	r1, [pc, #276]	; (1150 <handleUSB+0x458>)
    103c:	0020      	movs	r0, r4
    103e:	4b45      	ldr	r3, [pc, #276]	; (1154 <handleUSB+0x45c>)
    1040:	4798      	blx	r3
	 linkMinNoiLvl = b ;
    1042:	882a      	ldrh	r2, [r5, #0]
    1044:	4b15      	ldr	r3, [pc, #84]	; (109c <handleUSB+0x3a4>)
    1046:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1048:	4b2e      	ldr	r3, [pc, #184]	; (1104 <handleUSB+0x40c>)
    104a:	4798      	blx	r3
	 appStart();
    104c:	4b2e      	ldr	r3, [pc, #184]	; (1108 <handleUSB+0x410>)
    104e:	4798      	blx	r3
	 break;
    1050:	e659      	b.n	d06 <handleUSB+0xe>
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	0000262d 	.word	0x0000262d
    1058:	20000000 	.word	0x20000000
    105c:	00000c39 	.word	0x00000c39
    1060:	0000264d 	.word	0x0000264d
    1064:	00005744 	.word	0x00005744
    1068:	00005be4 	.word	0x00005be4
    106c:	00002669 	.word	0x00002669
    1070:	2000027a 	.word	0x2000027a
    1074:	200003ec 	.word	0x200003ec
    1078:	00005c04 	.word	0x00005c04
    107c:	20000476 	.word	0x20000476
    1080:	00005c1c 	.word	0x00005c1c
    1084:	20000279 	.word	0x20000279
    1088:	00005c34 	.word	0x00005c34
    108c:	2000027c 	.word	0x2000027c
    1090:	00005c4c 	.word	0x00005c4c
    1094:	20000474 	.word	0x20000474
    1098:	00005c64 	.word	0x00005c64
    109c:	20000470 	.word	0x20000470
    10a0:	00005c80 	.word	0x00005c80
    10a4:	20000260 	.word	0x20000260
    10a8:	00005c9c 	.word	0x00005c9c
    10ac:	200003e2 	.word	0x200003e2
    10b0:	00005cb8 	.word	0x00005cb8
    10b4:	20000472 	.word	0x20000472
    10b8:	00005cd4 	.word	0x00005cd4
    10bc:	200003e0 	.word	0x200003e0
    10c0:	00005cec 	.word	0x00005cec
    10c4:	2000027b 	.word	0x2000027b
    10c8:	00005d00 	.word	0x00005d00
    10cc:	20000278 	.word	0x20000278
    10d0:	00005d14 	.word	0x00005d14
    10d4:	200002c4 	.word	0x200002c4
    10d8:	00005d24 	.word	0x00005d24
    10dc:	20000480 	.word	0x20000480
    10e0:	00005d70 	.word	0x00005d70
    10e4:	00005bf4 	.word	0x00005bf4
    10e8:	00002119 	.word	0x00002119
    10ec:	00005d84 	.word	0x00005d84
    10f0:	00002765 	.word	0x00002765
    10f4:	00005d94 	.word	0x00005d94
    10f8:	000007b1 	.word	0x000007b1
    10fc:	000026a5 	.word	0x000026a5
    1100:	000009bd 	.word	0x000009bd
    1104:	00000361 	.word	0x00000361
    1108:	00000989 	.word	0x00000989
    110c:	00002125 	.word	0x00002125
    1110:	000029a5 	.word	0x000029a5
    1114:	00005d9c 	.word	0x00005d9c
    1118:	00005db8 	.word	0x00005db8
    111c:	00002a51 	.word	0x00002a51
    1120:	00005dd4 	.word	0x00005dd4
    1124:	00005df0 	.word	0x00005df0
    1128:	00005e00 	.word	0x00005e00
    112c:	2000057c 	.word	0x2000057c
    1130:	000015e1 	.word	0x000015e1
    1134:	00005e38 	.word	0x00005e38
    1138:	00005e10 	.word	0x00005e10
    113c:	00005e1c 	.word	0x00005e1c
    1140:	00005e28 	.word	0x00005e28
    1144:	00005e44 	.word	0x00005e44
    1148:	000003f9 	.word	0x000003f9
    114c:	00005d04 	.word	0x00005d04
    1150:	00005e5c 	.word	0x00005e5c
    1154:	000045f9 	.word	0x000045f9

	 case 'Y': // Change min pulse zoom
	 appStop();
    1158:	4b9a      	ldr	r3, [pc, #616]	; (13c4 <handleUSB+0x6cc>)
    115a:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    115c:	4d9a      	ldr	r5, [pc, #616]	; (13c8 <handleUSB+0x6d0>)
    115e:	47a8      	blx	r5
    1160:	4c9a      	ldr	r4, [pc, #616]	; (13cc <handleUSB+0x6d4>)
    1162:	7020      	strb	r0, [r4, #0]
    1164:	47a8      	blx	r5
    1166:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1168:	252e      	movs	r5, #46	; 0x2e
    116a:	ab02      	add	r3, sp, #8
    116c:	469c      	mov	ip, r3
    116e:	4465      	add	r5, ip
    1170:	002a      	movs	r2, r5
    1172:	4997      	ldr	r1, [pc, #604]	; (13d0 <handleUSB+0x6d8>)
    1174:	0020      	movs	r0, r4
    1176:	4b97      	ldr	r3, [pc, #604]	; (13d4 <handleUSB+0x6dc>)
    1178:	4798      	blx	r3
	 linkMinPulAmp = b ;
    117a:	882a      	ldrh	r2, [r5, #0]
    117c:	4b96      	ldr	r3, [pc, #600]	; (13d8 <handleUSB+0x6e0>)
    117e:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1180:	4b96      	ldr	r3, [pc, #600]	; (13dc <handleUSB+0x6e4>)
    1182:	4798      	blx	r3
	 appStart();
    1184:	4b96      	ldr	r3, [pc, #600]	; (13e0 <handleUSB+0x6e8>)
    1186:	4798      	blx	r3
	 break;
    1188:	e5bd      	b.n	d06 <handleUSB+0xe>
	 
	 case 'Z': // Change min signal threshold
	 appStop();
    118a:	4b8e      	ldr	r3, [pc, #568]	; (13c4 <handleUSB+0x6cc>)
    118c:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    118e:	4d8e      	ldr	r5, [pc, #568]	; (13c8 <handleUSB+0x6d0>)
    1190:	47a8      	blx	r5
    1192:	4c8e      	ldr	r4, [pc, #568]	; (13cc <handleUSB+0x6d4>)
    1194:	7020      	strb	r0, [r4, #0]
    1196:	47a8      	blx	r5
    1198:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    119a:	252e      	movs	r5, #46	; 0x2e
    119c:	ab02      	add	r3, sp, #8
    119e:	469c      	mov	ip, r3
    11a0:	4465      	add	r5, ip
    11a2:	002a      	movs	r2, r5
    11a4:	498a      	ldr	r1, [pc, #552]	; (13d0 <handleUSB+0x6d8>)
    11a6:	0020      	movs	r0, r4
    11a8:	4b8a      	ldr	r3, [pc, #552]	; (13d4 <handleUSB+0x6dc>)
    11aa:	4798      	blx	r3
	 linkMinSigStr = b ;
    11ac:	882a      	ldrh	r2, [r5, #0]
    11ae:	4b8d      	ldr	r3, [pc, #564]	; (13e4 <handleUSB+0x6ec>)
    11b0:	801a      	strh	r2, [r3, #0]
	 configureLink();
    11b2:	4b8a      	ldr	r3, [pc, #552]	; (13dc <handleUSB+0x6e4>)
    11b4:	4798      	blx	r3
	 appStart();
    11b6:	4b8a      	ldr	r3, [pc, #552]	; (13e0 <handleUSB+0x6e8>)
    11b8:	4798      	blx	r3
	 break;
    11ba:	e5a4      	b.n	d06 <handleUSB+0xe>

      case 'B': // Change link to bidirectional
        usbPrintf("Bidirectional mode\n");
    11bc:	488a      	ldr	r0, [pc, #552]	; (13e8 <handleUSB+0x6f0>)
    11be:	4b8b      	ldr	r3, [pc, #556]	; (13ec <handleUSB+0x6f4>)
    11c0:	4798      	blx	r3
        appStop();
    11c2:	4b80      	ldr	r3, [pc, #512]	; (13c4 <handleUSB+0x6cc>)
    11c4:	4798      	blx	r3
		linkBidirectional = true;
    11c6:	2201      	movs	r2, #1
    11c8:	4b89      	ldr	r3, [pc, #548]	; (13f0 <handleUSB+0x6f8>)
    11ca:	701a      	strb	r2, [r3, #0]
        std_buf[0] = usbGet();
    11cc:	4b7e      	ldr	r3, [pc, #504]	; (13c8 <handleUSB+0x6d0>)
    11ce:	4798      	blx	r3
    11d0:	4b7e      	ldr	r3, [pc, #504]	; (13cc <handleUSB+0x6d4>)
    11d2:	7018      	strb	r0, [r3, #0]
        if(std_buf[0] == '0')
    11d4:	2830      	cmp	r0, #48	; 0x30
    11d6:	d007      	beq.n	11e8 <handleUSB+0x4f0>
          linkMaster = false;
        else
          linkMaster = true;
    11d8:	2201      	movs	r2, #1
    11da:	4b86      	ldr	r3, [pc, #536]	; (13f4 <handleUSB+0x6fc>)
    11dc:	701a      	strb	r2, [r3, #0]
		configureLink();
    11de:	4b7f      	ldr	r3, [pc, #508]	; (13dc <handleUSB+0x6e4>)
    11e0:	4798      	blx	r3
        appStart();
    11e2:	4b7f      	ldr	r3, [pc, #508]	; (13e0 <handleUSB+0x6e8>)
    11e4:	4798      	blx	r3
        break;
    11e6:	e58e      	b.n	d06 <handleUSB+0xe>
          linkMaster = false;
    11e8:	2200      	movs	r2, #0
    11ea:	4b82      	ldr	r3, [pc, #520]	; (13f4 <handleUSB+0x6fc>)
    11ec:	701a      	strb	r2, [r3, #0]
    11ee:	e7f6      	b.n	11de <handleUSB+0x4e6>

      case 's':
        usbPrintf("Statistics:\n");
    11f0:	4881      	ldr	r0, [pc, #516]	; (13f8 <handleUSB+0x700>)
    11f2:	4b7e      	ldr	r3, [pc, #504]	; (13ec <handleUSB+0x6f4>)
    11f4:	4798      	blx	r3
        printStatistics();
    11f6:	4b81      	ldr	r3, [pc, #516]	; (13fc <handleUSB+0x704>)
    11f8:	4798      	blx	r3
        break;
    11fa:	e584      	b.n	d06 <handleUSB+0xe>
      
      case 'm': // Spectral mask, 12 bytes
        appStop();
    11fc:	4b71      	ldr	r3, [pc, #452]	; (13c4 <handleUSB+0x6cc>)
    11fe:	4798      	blx	r3
		usb_get(std_buf, 24);
    1200:	2118      	movs	r1, #24
    1202:	4872      	ldr	r0, [pc, #456]	; (13cc <handleUSB+0x6d4>)
    1204:	4b7e      	ldr	r3, [pc, #504]	; (1400 <handleUSB+0x708>)
    1206:	4798      	blx	r3
		for(uint8_t i=0;i<12;i++)
    1208:	2400      	movs	r4, #0
    120a:	e00f      	b.n	122c <handleUSB+0x534>
		{
			sscanf((char*) &std_buf[i*2], "%2hx", &b);
    120c:	0060      	lsls	r0, r4, #1
    120e:	4b6f      	ldr	r3, [pc, #444]	; (13cc <handleUSB+0x6d4>)
    1210:	18c0      	adds	r0, r0, r3
    1212:	252e      	movs	r5, #46	; 0x2e
    1214:	ab02      	add	r3, sp, #8
    1216:	469c      	mov	ip, r3
    1218:	4465      	add	r5, ip
    121a:	002a      	movs	r2, r5
    121c:	496c      	ldr	r1, [pc, #432]	; (13d0 <handleUSB+0x6d8>)
    121e:	4b6d      	ldr	r3, [pc, #436]	; (13d4 <handleUSB+0x6dc>)
    1220:	4798      	blx	r3
			linkTXMask[i] = b;
    1222:	882a      	ldrh	r2, [r5, #0]
    1224:	4b77      	ldr	r3, [pc, #476]	; (1404 <handleUSB+0x70c>)
    1226:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=0;i<12;i++)
    1228:	3401      	adds	r4, #1
    122a:	b2e4      	uxtb	r4, r4
    122c:	2c0b      	cmp	r4, #11
    122e:	d9ed      	bls.n	120c <handleUSB+0x514>
		for(uint8_t i=0;i<12;i++)
		{
			w =  usbGet();	
				
		}*/
		configureLink();
    1230:	4b6a      	ldr	r3, [pc, #424]	; (13dc <handleUSB+0x6e4>)
    1232:	4798      	blx	r3
		appStart();
    1234:	4b6a      	ldr	r3, [pc, #424]	; (13e0 <handleUSB+0x6e8>)
    1236:	4798      	blx	r3
        break;
    1238:	e565      	b.n	d06 <handleUSB+0xe>
		
	  case '>':
		usbPrintf("Writing Flash\n");
    123a:	4873      	ldr	r0, [pc, #460]	; (1408 <handleUSB+0x710>)
    123c:	4b6b      	ldr	r3, [pc, #428]	; (13ec <handleUSB+0x6f4>)
    123e:	4798      	blx	r3
		flashWrite();
    1240:	4b72      	ldr	r3, [pc, #456]	; (140c <handleUSB+0x714>)
    1242:	4798      	blx	r3
		break;
    1244:	e55f      	b.n	d06 <handleUSB+0xe>
	
	  case '<':
		usbPrintf("Reading Flash\n");
    1246:	4872      	ldr	r0, [pc, #456]	; (1410 <handleUSB+0x718>)
    1248:	4b68      	ldr	r3, [pc, #416]	; (13ec <handleUSB+0x6f4>)
    124a:	4798      	blx	r3
		appStop();
    124c:	4b5d      	ldr	r3, [pc, #372]	; (13c4 <handleUSB+0x6cc>)
    124e:	4798      	blx	r3
		flashRead();
    1250:	4b70      	ldr	r3, [pc, #448]	; (1414 <handleUSB+0x71c>)
    1252:	4798      	blx	r3
		configureLink();
    1254:	4b61      	ldr	r3, [pc, #388]	; (13dc <handleUSB+0x6e4>)
    1256:	4798      	blx	r3
		appStart();
    1258:	4b61      	ldr	r3, [pc, #388]	; (13e0 <handleUSB+0x6e8>)
    125a:	4798      	blx	r3
		break;
    125c:	e553      	b.n	d06 <handleUSB+0xe>

      case 'v':
        usbPrintf("Voltage set: ");
    125e:	486e      	ldr	r0, [pc, #440]	; (1418 <handleUSB+0x720>)
    1260:	4b62      	ldr	r3, [pc, #392]	; (13ec <handleUSB+0x6f4>)
    1262:	4798      	blx	r3
        std_buf[0] = usbGet();
    1264:	4b58      	ldr	r3, [pc, #352]	; (13c8 <handleUSB+0x6d0>)
    1266:	4798      	blx	r3
    1268:	4c58      	ldr	r4, [pc, #352]	; (13cc <handleUSB+0x6d4>)
    126a:	7020      	strb	r0, [r4, #0]
        startSPI();
    126c:	4b6b      	ldr	r3, [pc, #428]	; (141c <handleUSB+0x724>)
    126e:	4798      	blx	r3
        switch(std_buf[0])
    1270:	7823      	ldrb	r3, [r4, #0]
    1272:	2b31      	cmp	r3, #49	; 0x31
    1274:	d01a      	beq.n	12ac <handleUSB+0x5b4>
    1276:	d90c      	bls.n	1292 <handleUSB+0x59a>
    1278:	2b32      	cmp	r3, #50	; 0x32
    127a:	d020      	beq.n	12be <handleUSB+0x5c6>
    127c:	2b33      	cmp	r3, #51	; 0x33
    127e:	d112      	bne.n	12a6 <handleUSB+0x5ae>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0a);
            usbPrintf("1.04V\n");
            break;
            
          case '3':
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0b);
    1280:	204d      	movs	r0, #77	; 0x4d
    1282:	4c67      	ldr	r4, [pc, #412]	; (1420 <handleUSB+0x728>)
    1284:	47a0      	blx	r4
    1286:	200b      	movs	r0, #11
    1288:	47a0      	blx	r4
            usbPrintf("0.97V\n");
    128a:	4866      	ldr	r0, [pc, #408]	; (1424 <handleUSB+0x72c>)
    128c:	4b57      	ldr	r3, [pc, #348]	; (13ec <handleUSB+0x6f4>)
    128e:	4798      	blx	r3
            break;
    1290:	e009      	b.n	12a6 <handleUSB+0x5ae>
        switch(std_buf[0])
    1292:	2b30      	cmp	r3, #48	; 0x30
    1294:	d107      	bne.n	12a6 <handleUSB+0x5ae>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x08);
    1296:	204d      	movs	r0, #77	; 0x4d
    1298:	4c61      	ldr	r4, [pc, #388]	; (1420 <handleUSB+0x728>)
    129a:	47a0      	blx	r4
    129c:	2008      	movs	r0, #8
    129e:	47a0      	blx	r4
            usbPrintf("1.08V\n");
    12a0:	4861      	ldr	r0, [pc, #388]	; (1428 <handleUSB+0x730>)
    12a2:	4b52      	ldr	r3, [pc, #328]	; (13ec <handleUSB+0x6f4>)
    12a4:	4798      	blx	r3
        }
        stopSPI();
    12a6:	4b61      	ldr	r3, [pc, #388]	; (142c <handleUSB+0x734>)
    12a8:	4798      	blx	r3
        break;
    12aa:	e52c      	b.n	d06 <handleUSB+0xe>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x09);
    12ac:	204d      	movs	r0, #77	; 0x4d
    12ae:	4c5c      	ldr	r4, [pc, #368]	; (1420 <handleUSB+0x728>)
    12b0:	47a0      	blx	r4
    12b2:	2009      	movs	r0, #9
    12b4:	47a0      	blx	r4
            usbPrintf("1.03V\n");
    12b6:	485e      	ldr	r0, [pc, #376]	; (1430 <handleUSB+0x738>)
    12b8:	4b4c      	ldr	r3, [pc, #304]	; (13ec <handleUSB+0x6f4>)
    12ba:	4798      	blx	r3
            break;
    12bc:	e7f3      	b.n	12a6 <handleUSB+0x5ae>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0a);
    12be:	204d      	movs	r0, #77	; 0x4d
    12c0:	4c57      	ldr	r4, [pc, #348]	; (1420 <handleUSB+0x728>)
    12c2:	47a0      	blx	r4
    12c4:	200a      	movs	r0, #10
    12c6:	47a0      	blx	r4
            usbPrintf("1.04V\n");
    12c8:	485a      	ldr	r0, [pc, #360]	; (1434 <handleUSB+0x73c>)
    12ca:	4b48      	ldr	r3, [pc, #288]	; (13ec <handleUSB+0x6f4>)
    12cc:	4798      	blx	r3
            break;
    12ce:	e7ea      	b.n	12a6 <handleUSB+0x5ae>

      case 'R':
		appStop();
    12d0:	4b3c      	ldr	r3, [pc, #240]	; (13c4 <handleUSB+0x6cc>)
    12d2:	4798      	blx	r3
        usbPrintf("RX mode\n");
    12d4:	4858      	ldr	r0, [pc, #352]	; (1438 <handleUSB+0x740>)
    12d6:	4b45      	ldr	r3, [pc, #276]	; (13ec <handleUSB+0x6f4>)
    12d8:	4798      	blx	r3
        linkBidirectional = false;
    12da:	2300      	movs	r3, #0
    12dc:	4a44      	ldr	r2, [pc, #272]	; (13f0 <handleUSB+0x6f8>)
    12de:	7013      	strb	r3, [r2, #0]
		linkMaster = false;
    12e0:	4a44      	ldr	r2, [pc, #272]	; (13f4 <handleUSB+0x6fc>)
    12e2:	7013      	strb	r3, [r2, #0]
		configureLink();
    12e4:	4b3d      	ldr	r3, [pc, #244]	; (13dc <handleUSB+0x6e4>)
    12e6:	4798      	blx	r3
        //sparkChangeMode(SPARK_MODE_RX);
        resetStatistics();
    12e8:	4b54      	ldr	r3, [pc, #336]	; (143c <handleUSB+0x744>)
    12ea:	4798      	blx	r3
		appStart();
    12ec:	4b3c      	ldr	r3, [pc, #240]	; (13e0 <handleUSB+0x6e8>)
    12ee:	4798      	blx	r3
        break;
    12f0:	e509      	b.n	d06 <handleUSB+0xe>

      case 'T':
        appStop();
    12f2:	4b34      	ldr	r3, [pc, #208]	; (13c4 <handleUSB+0x6cc>)
    12f4:	4798      	blx	r3
        usbPrintf("TX mode\n");
    12f6:	4852      	ldr	r0, [pc, #328]	; (1440 <handleUSB+0x748>)
    12f8:	4b3c      	ldr	r3, [pc, #240]	; (13ec <handleUSB+0x6f4>)
    12fa:	4798      	blx	r3
        linkBidirectional = false;
    12fc:	2200      	movs	r2, #0
    12fe:	4b3c      	ldr	r3, [pc, #240]	; (13f0 <handleUSB+0x6f8>)
    1300:	701a      	strb	r2, [r3, #0]
        linkMaster = true;
    1302:	3201      	adds	r2, #1
    1304:	4b3b      	ldr	r3, [pc, #236]	; (13f4 <handleUSB+0x6fc>)
    1306:	701a      	strb	r2, [r3, #0]
		configureLink();
    1308:	4b34      	ldr	r3, [pc, #208]	; (13dc <handleUSB+0x6e4>)
    130a:	4798      	blx	r3
        //sparkChangeMode(SPARK_MODE_TX);
        resetStatistics();
    130c:	4b4b      	ldr	r3, [pc, #300]	; (143c <handleUSB+0x744>)
    130e:	4798      	blx	r3
        appStart();
    1310:	4b33      	ldr	r3, [pc, #204]	; (13e0 <handleUSB+0x6e8>)
    1312:	4798      	blx	r3
        break;
    1314:	e4f7      	b.n	d06 <handleUSB+0xe>
      
      case '[': // SPI command mode
        std_buf[0] = std_buf[1] = std_buf[2];
    1316:	4b2d      	ldr	r3, [pc, #180]	; (13cc <handleUSB+0x6d4>)
    1318:	789a      	ldrb	r2, [r3, #2]
    131a:	705a      	strb	r2, [r3, #1]
    131c:	701a      	strb	r2, [r3, #0]
        startSPI();
    131e:	4b3f      	ldr	r3, [pc, #252]	; (141c <handleUSB+0x724>)
    1320:	4798      	blx	r3
        while(std_buf[0] != ']' && std_buf[1] != ']')
    1322:	4b2a      	ldr	r3, [pc, #168]	; (13cc <handleUSB+0x6d4>)
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	2b5d      	cmp	r3, #93	; 0x5d
    1328:	d03e      	beq.n	13a8 <handleUSB+0x6b0>
    132a:	4b28      	ldr	r3, [pc, #160]	; (13cc <handleUSB+0x6d4>)
    132c:	785b      	ldrb	r3, [r3, #1]
    132e:	2b5d      	cmp	r3, #93	; 0x5d
    1330:	d03a      	beq.n	13a8 <handleUSB+0x6b0>
        {
          while(!usbIsAvailable());
    1332:	4b44      	ldr	r3, [pc, #272]	; (1444 <handleUSB+0x74c>)
    1334:	4798      	blx	r3
    1336:	2800      	cmp	r0, #0
    1338:	d0fb      	beq.n	1332 <handleUSB+0x63a>
          std_buf[0] = usbGet();
    133a:	4b23      	ldr	r3, [pc, #140]	; (13c8 <handleUSB+0x6d0>)
    133c:	4798      	blx	r3
    133e:	4b23      	ldr	r3, [pc, #140]	; (13cc <handleUSB+0x6d4>)
    1340:	7018      	strb	r0, [r3, #0]
          if(std_buf[0] != ']')
    1342:	285d      	cmp	r0, #93	; 0x5d
    1344:	d0ed      	beq.n	1322 <handleUSB+0x62a>
          {
            while(!usbIsAvailable());
    1346:	4b3f      	ldr	r3, [pc, #252]	; (1444 <handleUSB+0x74c>)
    1348:	4798      	blx	r3
    134a:	2800      	cmp	r0, #0
    134c:	d0fb      	beq.n	1346 <handleUSB+0x64e>
            std_buf[1] = usbGet();
    134e:	4b1e      	ldr	r3, [pc, #120]	; (13c8 <handleUSB+0x6d0>)
    1350:	4798      	blx	r3
    1352:	4b1e      	ldr	r3, [pc, #120]	; (13cc <handleUSB+0x6d4>)
    1354:	7058      	strb	r0, [r3, #1]
            sscanf((char *)std_buf, "%2hx", &b);
    1356:	272e      	movs	r7, #46	; 0x2e
    1358:	aa02      	add	r2, sp, #8
    135a:	4694      	mov	ip, r2
    135c:	4467      	add	r7, ip
    135e:	003a      	movs	r2, r7
    1360:	491b      	ldr	r1, [pc, #108]	; (13d0 <handleUSB+0x6d8>)
    1362:	0018      	movs	r0, r3
    1364:	4b1b      	ldr	r3, [pc, #108]	; (13d4 <handleUSB+0x6dc>)
    1366:	4798      	blx	r3
          
            r = sendSPI(b);
    1368:	7838      	ldrb	r0, [r7, #0]
    136a:	4b2d      	ldr	r3, [pc, #180]	; (1420 <handleUSB+0x728>)
    136c:	4798      	blx	r3
    136e:	0006      	movs	r6, r0
    1370:	b285      	uxth	r5, r0
            usbPrintf("%s%s %02hx \t %s%s %02hx\n",bit_rep[b >> 4], bit_rep[b & 0x0F], b, bit_rep[r >> 4], bit_rep[r & 0x0F], r);
    1372:	883b      	ldrh	r3, [r7, #0]
    1374:	0919      	lsrs	r1, r3, #4
    1376:	220f      	movs	r2, #15
    1378:	401a      	ands	r2, r3
    137a:	092d      	lsrs	r5, r5, #4
    137c:	200f      	movs	r0, #15
    137e:	4030      	ands	r0, r6
    1380:	4c31      	ldr	r4, [pc, #196]	; (1448 <handleUSB+0x750>)
    1382:	0092      	lsls	r2, r2, #2
    1384:	18a2      	adds	r2, r4, r2
    1386:	6852      	ldr	r2, [r2, #4]
    1388:	0089      	lsls	r1, r1, #2
    138a:	1861      	adds	r1, r4, r1
    138c:	6849      	ldr	r1, [r1, #4]
    138e:	9602      	str	r6, [sp, #8]
    1390:	0080      	lsls	r0, r0, #2
    1392:	1820      	adds	r0, r4, r0
    1394:	6840      	ldr	r0, [r0, #4]
    1396:	9001      	str	r0, [sp, #4]
    1398:	00ad      	lsls	r5, r5, #2
    139a:	1964      	adds	r4, r4, r5
    139c:	6860      	ldr	r0, [r4, #4]
    139e:	9000      	str	r0, [sp, #0]
    13a0:	482a      	ldr	r0, [pc, #168]	; (144c <handleUSB+0x754>)
    13a2:	4c12      	ldr	r4, [pc, #72]	; (13ec <handleUSB+0x6f4>)
    13a4:	47a0      	blx	r4
    13a6:	e7bc      	b.n	1322 <handleUSB+0x62a>
          }
        }
        stopSPI();
    13a8:	4b20      	ldr	r3, [pc, #128]	; (142c <handleUSB+0x734>)
    13aa:	4798      	blx	r3
        break;
    13ac:	e4ab      	b.n	d06 <handleUSB+0xe>

      case '\n':
          break;
        
      default:
        usbPrintf("??\n");
    13ae:	4828      	ldr	r0, [pc, #160]	; (1450 <handleUSB+0x758>)
    13b0:	4b0e      	ldr	r3, [pc, #56]	; (13ec <handleUSB+0x6f4>)
    13b2:	4798      	blx	r3
        break;
    13b4:	e4a7      	b.n	d06 <handleUSB+0xe>
    }
    
  }
}
    13b6:	b00f      	add	sp, #60	; 0x3c
    13b8:	bc3c      	pop	{r2, r3, r4, r5}
    13ba:	4690      	mov	r8, r2
    13bc:	4699      	mov	r9, r3
    13be:	46a2      	mov	sl, r4
    13c0:	46ab      	mov	fp, r5
    13c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c4:	000009bd 	.word	0x000009bd
    13c8:	0000264d 	.word	0x0000264d
    13cc:	2000057c 	.word	0x2000057c
    13d0:	00005e5c 	.word	0x00005e5c
    13d4:	000045f9 	.word	0x000045f9
    13d8:	20000260 	.word	0x20000260
    13dc:	00000361 	.word	0x00000361
    13e0:	00000989 	.word	0x00000989
    13e4:	200003e2 	.word	0x200003e2
    13e8:	00005e64 	.word	0x00005e64
    13ec:	00002669 	.word	0x00002669
    13f0:	20000472 	.word	0x20000472
    13f4:	200003e0 	.word	0x200003e0
    13f8:	00005e78 	.word	0x00005e78
    13fc:	00000461 	.word	0x00000461
    1400:	00003c95 	.word	0x00003c95
    1404:	200002c4 	.word	0x200002c4
    1408:	00005e88 	.word	0x00005e88
    140c:	00000115 	.word	0x00000115
    1410:	00005e98 	.word	0x00005e98
    1414:	000001d9 	.word	0x000001d9
    1418:	00005ea8 	.word	0x00005ea8
    141c:	00002139 	.word	0x00002139
    1420:	00002155 	.word	0x00002155
    1424:	00005ed0 	.word	0x00005ed0
    1428:	00005eb8 	.word	0x00005eb8
    142c:	000021f9 	.word	0x000021f9
    1430:	00005ec0 	.word	0x00005ec0
    1434:	00005ec8 	.word	0x00005ec8
    1438:	00005ed8 	.word	0x00005ed8
    143c:	000003f9 	.word	0x000003f9
    1440:	00005ee4 	.word	0x00005ee4
    1444:	0000262d 	.word	0x0000262d
    1448:	20000000 	.word	0x20000000
    144c:	00005ef0 	.word	0x00005ef0
    1450:	00005f0c 	.word	0x00005f0c

00001454 <audioResetStatistics>:
	lastHisEXP[30] = b;
}

void audioResetStatistics(void)
{
	audioRXmissing = 0;
    1454:	2300      	movs	r3, #0
    1456:	4a0b      	ldr	r2, [pc, #44]	; (1484 <audioResetStatistics+0x30>)
    1458:	6013      	str	r3, [r2, #0]
	audioRXreceived = 0; 
    145a:	4a0b      	ldr	r2, [pc, #44]	; (1488 <audioResetStatistics+0x34>)
    145c:	6013      	str	r3, [r2, #0]
	audioRXduplicate = 0;
    145e:	4a0b      	ldr	r2, [pc, #44]	; (148c <audioResetStatistics+0x38>)
    1460:	6013      	str	r3, [r2, #0]
	audioRXrejected = 0;
    1462:	4a0b      	ldr	r2, [pc, #44]	; (1490 <audioResetStatistics+0x3c>)
    1464:	6013      	str	r3, [r2, #0]
	audioTXsent = 0;
    1466:	4a0b      	ldr	r2, [pc, #44]	; (1494 <audioResetStatistics+0x40>)
    1468:	6013      	str	r3, [r2, #0]
	audioTXresent = 0;
    146a:	4a0b      	ldr	r2, [pc, #44]	; (1498 <audioResetStatistics+0x44>)
    146c:	6013      	str	r3, [r2, #0]
	audioTXisempty = 0;
    146e:	4a0b      	ldr	r2, [pc, #44]	; (149c <audioResetStatistics+0x48>)
    1470:	6013      	str	r3, [r2, #0]
	
	lastMySEQ[ 31] = 0;
    1472:	4a0b      	ldr	r2, [pc, #44]	; (14a0 <audioResetStatistics+0x4c>)
    1474:	77d3      	strb	r3, [r2, #31]
	lastMyEXP[31] = 0;
    1476:	4a0b      	ldr	r2, [pc, #44]	; (14a4 <audioResetStatistics+0x50>)
    1478:	77d3      	strb	r3, [r2, #31]
	lastHisSEQ[31] = 0;
    147a:	4a0b      	ldr	r2, [pc, #44]	; (14a8 <audioResetStatistics+0x54>)
    147c:	77d3      	strb	r3, [r2, #31]
	lastHisEXP[31] = 0;
    147e:	4a0b      	ldr	r2, [pc, #44]	; (14ac <audioResetStatistics+0x58>)
    1480:	77d3      	strb	r3, [r2, #31]
}
    1482:	4770      	bx	lr
    1484:	20000478 	.word	0x20000478
    1488:	2000047c 	.word	0x2000047c
    148c:	20000544 	.word	0x20000544
    1490:	200004d4 	.word	0x200004d4
    1494:	20000488 	.word	0x20000488
    1498:	20000484 	.word	0x20000484
    149c:	20000494 	.word	0x20000494
    14a0:	20000520 	.word	0x20000520
    14a4:	2000049c 	.word	0x2000049c
    14a8:	200004f8 	.word	0x200004f8
    14ac:	200004d8 	.word	0x200004d8

000014b0 <audioPrintStatistics>:

void audioPrintStatistics(void)
{
    14b0:	b510      	push	{r4, lr}
    14b2:	b082      	sub	sp, #8
	usbPrintf("Audio TX sent / resent / isempty  = %d / %d / %d \n", audioTXsent, audioTXresent, audioTXisempty);
    14b4:	4b24      	ldr	r3, [pc, #144]	; (1548 <audioPrintStatistics+0x98>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	4a24      	ldr	r2, [pc, #144]	; (154c <audioPrintStatistics+0x9c>)
    14ba:	6812      	ldr	r2, [r2, #0]
    14bc:	4924      	ldr	r1, [pc, #144]	; (1550 <audioPrintStatistics+0xa0>)
    14be:	6809      	ldr	r1, [r1, #0]
    14c0:	4824      	ldr	r0, [pc, #144]	; (1554 <audioPrintStatistics+0xa4>)
    14c2:	4c25      	ldr	r4, [pc, #148]	; (1558 <audioPrintStatistics+0xa8>)
    14c4:	47a0      	blx	r4
	usbPrintf("Audio RX  received / duplicate / missing / rejected = %d / %d / %d / %d\n", audioRXreceived, audioRXduplicate, audioRXmissing, audioRXrejected);
    14c6:	4b25      	ldr	r3, [pc, #148]	; (155c <audioPrintStatistics+0xac>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	4a25      	ldr	r2, [pc, #148]	; (1560 <audioPrintStatistics+0xb0>)
    14cc:	6812      	ldr	r2, [r2, #0]
    14ce:	4925      	ldr	r1, [pc, #148]	; (1564 <audioPrintStatistics+0xb4>)
    14d0:	6809      	ldr	r1, [r1, #0]
    14d2:	4825      	ldr	r0, [pc, #148]	; (1568 <audioPrintStatistics+0xb8>)
    14d4:	6800      	ldr	r0, [r0, #0]
    14d6:	9000      	str	r0, [sp, #0]
    14d8:	4824      	ldr	r0, [pc, #144]	; (156c <audioPrintStatistics+0xbc>)
    14da:	47a0      	blx	r4
	/*
	usbPrintf("Audio mySEQ:  %s\n", lastMySEQ);
	usbPrintf("Audio myEXP:  %s\n", lastMyEXP);
	usbPrintf("Audio HisSEQ: %s\n", lastHisSEQ);
	usbPrintf("Audio HisEXP: %s\n", lastHisEXP);*/
	usbPrintf("RX buf %d, TX buf %d\n", elements(RXbuf), elements(TXbuf));
    14dc:	4b24      	ldr	r3, [pc, #144]	; (1570 <audioPrintStatistics+0xc0>)
    14de:	6819      	ldr	r1, [r3, #0]
/**
 * @brief Returns the number of elements in the FIFO
 */
inline size_t elements(fifo_t* fifo)
{
	if (fifo->head == fifo->tail)
    14e0:	684b      	ldr	r3, [r1, #4]
    14e2:	688a      	ldr	r2, [r1, #8]
    14e4:	4293      	cmp	r3, r2
    14e6:	d010      	beq.n	150a <audioPrintStatistics+0x5a>
	return 0;
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    14e8:	68c9      	ldr	r1, [r1, #12]
    14ea:	1e48      	subs	r0, r1, #1
    14ec:	4283      	cmp	r3, r0
    14ee:	d007      	beq.n	1500 <audioPrintStatistics+0x50>
    14f0:	1e50      	subs	r0, r2, #1
    14f2:	4283      	cmp	r3, r0
    14f4:	d00a      	beq.n	150c <audioPrintStatistics+0x5c>
	return fifo->size;
	else if (fifo->head < fifo->tail)
    14f6:	4293      	cmp	r3, r2
    14f8:	d205      	bcs.n	1506 <audioPrintStatistics+0x56>
	return (fifo->head) + (fifo->size - fifo->tail);
    14fa:	1a89      	subs	r1, r1, r2
    14fc:	1859      	adds	r1, r3, r1
    14fe:	e005      	b.n	150c <audioPrintStatistics+0x5c>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1500:	2a00      	cmp	r2, #0
    1502:	d003      	beq.n	150c <audioPrintStatistics+0x5c>
    1504:	e7f4      	b.n	14f0 <audioPrintStatistics+0x40>
	else
	return fifo->head - fifo->tail;
    1506:	1a99      	subs	r1, r3, r2
    1508:	e000      	b.n	150c <audioPrintStatistics+0x5c>
	return 0;
    150a:	2100      	movs	r1, #0
    150c:	4b19      	ldr	r3, [pc, #100]	; (1574 <audioPrintStatistics+0xc4>)
    150e:	681a      	ldr	r2, [r3, #0]
	if (fifo->head == fifo->tail)
    1510:	6853      	ldr	r3, [r2, #4]
    1512:	6890      	ldr	r0, [r2, #8]
    1514:	4298      	cmp	r0, r3
    1516:	d014      	beq.n	1542 <audioPrintStatistics+0x92>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1518:	68d2      	ldr	r2, [r2, #12]
    151a:	1e54      	subs	r4, r2, #1
    151c:	42a3      	cmp	r3, r4
    151e:	d00a      	beq.n	1536 <audioPrintStatistics+0x86>
    1520:	1e44      	subs	r4, r0, #1
    1522:	42a3      	cmp	r3, r4
    1524:	d002      	beq.n	152c <audioPrintStatistics+0x7c>
	else if (fifo->head < fifo->tail)
    1526:	4298      	cmp	r0, r3
    1528:	d808      	bhi.n	153c <audioPrintStatistics+0x8c>
	return fifo->head - fifo->tail;
    152a:	1a1a      	subs	r2, r3, r0
    152c:	4812      	ldr	r0, [pc, #72]	; (1578 <audioPrintStatistics+0xc8>)
    152e:	4b0a      	ldr	r3, [pc, #40]	; (1558 <audioPrintStatistics+0xa8>)
    1530:	4798      	blx	r3
}
    1532:	b002      	add	sp, #8
    1534:	bd10      	pop	{r4, pc}
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1536:	2800      	cmp	r0, #0
    1538:	d1f2      	bne.n	1520 <audioPrintStatistics+0x70>
    153a:	e7f7      	b.n	152c <audioPrintStatistics+0x7c>
	return (fifo->head) + (fifo->size - fifo->tail);
    153c:	1a12      	subs	r2, r2, r0
    153e:	189a      	adds	r2, r3, r2
    1540:	e7f4      	b.n	152c <audioPrintStatistics+0x7c>
	return 0;
    1542:	2200      	movs	r2, #0
    1544:	e7f2      	b.n	152c <audioPrintStatistics+0x7c>
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	20000494 	.word	0x20000494
    154c:	20000484 	.word	0x20000484
    1550:	20000488 	.word	0x20000488
    1554:	000060b8 	.word	0x000060b8
    1558:	00002669 	.word	0x00002669
    155c:	20000478 	.word	0x20000478
    1560:	20000544 	.word	0x20000544
    1564:	2000047c 	.word	0x2000047c
    1568:	200004d4 	.word	0x200004d4
    156c:	000060ec 	.word	0x000060ec
    1570:	2000048c 	.word	0x2000048c
    1574:	20000498 	.word	0x20000498
    1578:	00006138 	.word	0x00006138

0000157c <audioStart>:

void audioStart(void)
{
    157c:	b510      	push	{r4, lr}
	WM8731_Activate();
    157e:	4b03      	ldr	r3, [pc, #12]	; (158c <audioStart+0x10>)
    1580:	4798      	blx	r3
	upkeepBytes = 0;
    1582:	2200      	movs	r2, #0
    1584:	4b02      	ldr	r3, [pc, #8]	; (1590 <audioStart+0x14>)
    1586:	701a      	strb	r2, [r3, #0]
}
    1588:	bd10      	pop	{r4, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	000040e5 	.word	0x000040e5
    1590:	200004bc 	.word	0x200004bc

00001594 <audioStop>:

void audioStop(void)
{
    1594:	b510      	push	{r4, lr}
	WM8731_Deactivate();
    1596:	4b01      	ldr	r3, [pc, #4]	; (159c <audioStop+0x8>)
    1598:	4798      	blx	r3
}
    159a:	bd10      	pop	{r4, pc}
    159c:	000040f5 	.word	0x000040f5

000015a0 <audioReset>:

void audioReset(void)
{
	// Empty FIFOs?
	
	mySEQ = true; // Push the first packet in
    15a0:	2201      	movs	r2, #1
    15a2:	4b08      	ldr	r3, [pc, #32]	; (15c4 <audioReset+0x24>)
    15a4:	701a      	strb	r2, [r3, #0]
	myEXP = hisSEQ = hisEXP = false;
    15a6:	2300      	movs	r3, #0
    15a8:	4a07      	ldr	r2, [pc, #28]	; (15c8 <audioReset+0x28>)
    15aa:	7013      	strb	r3, [r2, #0]
    15ac:	4a07      	ldr	r2, [pc, #28]	; (15cc <audioReset+0x2c>)
    15ae:	7013      	strb	r3, [r2, #0]
    15b0:	4a07      	ldr	r2, [pc, #28]	; (15d0 <audioReset+0x30>)
    15b2:	7013      	strb	r3, [r2, #0]
	
	upkeepBytes = 0;
    15b4:	4a07      	ldr	r2, [pc, #28]	; (15d4 <audioReset+0x34>)
    15b6:	7013      	strb	r3, [r2, #0]
	fill = false;
    15b8:	4a07      	ldr	r2, [pc, #28]	; (15d8 <audioReset+0x38>)
    15ba:	7013      	strb	r3, [r2, #0]
	newPacket = false;
    15bc:	4a07      	ldr	r2, [pc, #28]	; (15dc <audioReset+0x3c>)
    15be:	7013      	strb	r3, [r2, #0]
}
    15c0:	4770      	bx	lr
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	200004d0 	.word	0x200004d0
    15c8:	200004bd 	.word	0x200004bd
    15cc:	20000548 	.word	0x20000548
    15d0:	20000540 	.word	0x20000540
    15d4:	200004bc 	.word	0x200004bc
    15d8:	20000490 	.word	0x20000490
    15dc:	20000518 	.word	0x20000518

000015e0 <audioConfigure>:

void audioConfigure(void)
{
    15e0:	b570      	push	{r4, r5, r6, lr}
	WM8731_Init();
    15e2:	4b1e      	ldr	r3, [pc, #120]	; (165c <audioConfigure+0x7c>)
    15e4:	4798      	blx	r3
	uint16_t* buffer = (uint16_t*)malloc(size);
    15e6:	2080      	movs	r0, #128	; 0x80
    15e8:	0180      	lsls	r0, r0, #6
    15ea:	4b1d      	ldr	r3, [pc, #116]	; (1660 <audioConfigure+0x80>)
    15ec:	4798      	blx	r3
    15ee:	1e05      	subs	r5, r0, #0
	if (buffer == NULL)
    15f0:	d02b      	beq.n	164a <audioConfigure+0x6a>
	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    15f2:	2010      	movs	r0, #16
    15f4:	4b1a      	ldr	r3, [pc, #104]	; (1660 <audioConfigure+0x80>)
    15f6:	4798      	blx	r3
    15f8:	1e04      	subs	r4, r0, #0
	if (fifo == NULL)
    15fa:	d022      	beq.n	1642 <audioConfigure+0x62>
	fifo->buffer = buffer;
    15fc:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    15fe:	2300      	movs	r3, #0
    1600:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    1602:	6083      	str	r3, [r0, #8]
	fifo->size = size / 2;
    1604:	2380      	movs	r3, #128	; 0x80
    1606:	015b      	lsls	r3, r3, #5
    1608:	60c3      	str	r3, [r0, #12]
	
	TXbuf = createFifo(sizeof(uint16_t)*FIFO_SIZE);
    160a:	4b16      	ldr	r3, [pc, #88]	; (1664 <audioConfigure+0x84>)
    160c:	601c      	str	r4, [r3, #0]
	uint16_t* buffer = (uint16_t*)malloc(size);
    160e:	2080      	movs	r0, #128	; 0x80
    1610:	0180      	lsls	r0, r0, #6
    1612:	4b13      	ldr	r3, [pc, #76]	; (1660 <audioConfigure+0x80>)
    1614:	4798      	blx	r3
    1616:	1e05      	subs	r5, r0, #0
	if (buffer == NULL)
    1618:	d01d      	beq.n	1656 <audioConfigure+0x76>
	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    161a:	2010      	movs	r0, #16
    161c:	4b10      	ldr	r3, [pc, #64]	; (1660 <audioConfigure+0x80>)
    161e:	4798      	blx	r3
    1620:	1e04      	subs	r4, r0, #0
	if (fifo == NULL)
    1622:	d014      	beq.n	164e <audioConfigure+0x6e>
	fifo->buffer = buffer;
    1624:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    1626:	2300      	movs	r3, #0
    1628:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    162a:	6083      	str	r3, [r0, #8]
	fifo->size = size / 2;
    162c:	2380      	movs	r3, #128	; 0x80
    162e:	015b      	lsls	r3, r3, #5
    1630:	60c3      	str	r3, [r0, #12]
	RXbuf = createFifo(sizeof(uint16_t)*FIFO_SIZE);
    1632:	4b0d      	ldr	r3, [pc, #52]	; (1668 <audioConfigure+0x88>)
    1634:	601c      	str	r4, [r3, #0]
	toggle = false;
    1636:	2200      	movs	r2, #0
    1638:	4b0c      	ldr	r3, [pc, #48]	; (166c <audioConfigure+0x8c>)
    163a:	701a      	strb	r2, [r3, #0]
	
	audioReset();
    163c:	4b0c      	ldr	r3, [pc, #48]	; (1670 <audioConfigure+0x90>)
    163e:	4798      	blx	r3
}
    1640:	bd70      	pop	{r4, r5, r6, pc}
		free(buffer);
    1642:	0028      	movs	r0, r5
    1644:	4b0b      	ldr	r3, [pc, #44]	; (1674 <audioConfigure+0x94>)
    1646:	4798      	blx	r3
    1648:	e7df      	b.n	160a <audioConfigure+0x2a>
	return NULL;
    164a:	2400      	movs	r4, #0
    164c:	e7dd      	b.n	160a <audioConfigure+0x2a>
		free(buffer);
    164e:	0028      	movs	r0, r5
    1650:	4b08      	ldr	r3, [pc, #32]	; (1674 <audioConfigure+0x94>)
    1652:	4798      	blx	r3
    1654:	e7ed      	b.n	1632 <audioConfigure+0x52>
	return NULL;
    1656:	2400      	movs	r4, #0
    1658:	e7eb      	b.n	1632 <audioConfigure+0x52>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	00004059 	.word	0x00004059
    1660:	00004439 	.word	0x00004439
    1664:	20000498 	.word	0x20000498
    1668:	2000048c 	.word	0x2000048c
    166c:	2000051d 	.word	0x2000051d
    1670:	000015a1 	.word	0x000015a1
    1674:	0000444d 	.word	0x0000444d

00001678 <audioProcessPacket>:



bool audioProcessPacket(unsigned char numBytes)
{
    1678:	b510      	push	{r4, lr}
    167a:	0004      	movs	r4, r0
	uint16_t w;
	uint8_t MAC;
	newPacket = false;	
    167c:	2200      	movs	r2, #0
    167e:	4b32      	ldr	r3, [pc, #200]	; (1748 <audioProcessPacket+0xd0>)
    1680:	701a      	strb	r2, [r3, #0]
	
	
	//updateSeqStats();
	
	// Is there a packet?
	if(numBytes < 1)
    1682:	2800      	cmp	r0, #0
    1684:	d108      	bne.n	1698 <audioProcessPacket+0x20>
	{
		audioRXmissing++;
    1686:	4a31      	ldr	r2, [pc, #196]	; (174c <audioProcessPacket+0xd4>)
    1688:	6813      	ldr	r3, [r2, #0]
    168a:	3301      	adds	r3, #1
    168c:	6013      	str	r3, [r2, #0]
		upkeepBytes = 0;	
    168e:	2200      	movs	r2, #0
    1690:	4b2f      	ldr	r3, [pc, #188]	; (1750 <audioProcessPacket+0xd8>)
    1692:	701a      	strb	r2, [r3, #0]
		newPacket = false;
		return false;
    1694:	2000      	movs	r0, #0
	
	audioRXreceived++;	
	
	
	return true;
}
    1696:	bd10      	pop	{r4, pc}
	sparkPullRX(0, 4);
    1698:	2104      	movs	r1, #4
    169a:	2000      	movs	r0, #0
    169c:	4b2d      	ldr	r3, [pc, #180]	; (1754 <audioProcessPacket+0xdc>)
    169e:	4798      	blx	r3
	upkeepBytes = numBytes;
    16a0:	4b2b      	ldr	r3, [pc, #172]	; (1750 <audioProcessPacket+0xd8>)
    16a2:	701c      	strb	r4, [r3, #0]
	MAC = sparkRXbuffer[1];	
    16a4:	4b2c      	ldr	r3, [pc, #176]	; (1758 <audioProcessPacket+0xe0>)
    16a6:	681a      	ldr	r2, [r3, #0]
    16a8:	7853      	ldrb	r3, [r2, #1]
	if(crc8_table[MAC] != sparkRXbuffer[2]) // Check CRC of header 
    16aa:	492c      	ldr	r1, [pc, #176]	; (175c <audioProcessPacket+0xe4>)
    16ac:	5cc9      	ldrb	r1, [r1, r3]
    16ae:	7892      	ldrb	r2, [r2, #2]
    16b0:	4291      	cmp	r1, r2
    16b2:	d008      	beq.n	16c6 <audioProcessPacket+0x4e>
		audioRXrejected++;	
    16b4:	4a2a      	ldr	r2, [pc, #168]	; (1760 <audioProcessPacket+0xe8>)
    16b6:	6813      	ldr	r3, [r2, #0]
    16b8:	3301      	adds	r3, #1
    16ba:	6013      	str	r3, [r2, #0]
		newPacket = false;	
    16bc:	2200      	movs	r2, #0
    16be:	4b22      	ldr	r3, [pc, #136]	; (1748 <audioProcessPacket+0xd0>)
    16c0:	701a      	strb	r2, [r3, #0]
		return true;
    16c2:	2001      	movs	r0, #1
    16c4:	e7e7      	b.n	1696 <audioProcessPacket+0x1e>
	hisSEQ = (MAC & 0x01) != 0x00;
    16c6:	2201      	movs	r2, #1
    16c8:	0014      	movs	r4, r2
    16ca:	401c      	ands	r4, r3
    16cc:	4925      	ldr	r1, [pc, #148]	; (1764 <audioProcessPacket+0xec>)
    16ce:	700c      	strb	r4, [r1, #0]
	hisEXP = (MAC & 0x02) != 0x00;
    16d0:	0859      	lsrs	r1, r3, #1
    16d2:	4011      	ands	r1, r2
    16d4:	4824      	ldr	r0, [pc, #144]	; (1768 <audioProcessPacket+0xf0>)
    16d6:	7001      	strb	r1, [r0, #0]
	hisEMPTY = MAC & 0x10;
    16d8:	091b      	lsrs	r3, r3, #4
    16da:	4013      	ands	r3, r2
    16dc:	4a23      	ldr	r2, [pc, #140]	; (176c <audioProcessPacket+0xf4>)
    16de:	7013      	strb	r3, [r2, #0]
	if(!hisEMPTY)
    16e0:	d103      	bne.n	16ea <audioProcessPacket+0x72>
		if(sparkCRCfail)
    16e2:	4b23      	ldr	r3, [pc, #140]	; (1770 <audioProcessPacket+0xf8>)
    16e4:	7818      	ldrb	r0, [r3, #0]
    16e6:	2800      	cmp	r0, #0
    16e8:	d11d      	bne.n	1726 <audioProcessPacket+0xae>
	if( (myEXP && hisSEQ) || (!myEXP && !hisSEQ))
    16ea:	4b22      	ldr	r3, [pc, #136]	; (1774 <audioProcessPacket+0xfc>)
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d001      	beq.n	16f6 <audioProcessPacket+0x7e>
    16f2:	2c00      	cmp	r4, #0
    16f4:	d103      	bne.n	16fe <audioProcessPacket+0x86>
    16f6:	2b00      	cmp	r3, #0
    16f8:	d108      	bne.n	170c <audioProcessPacket+0x94>
    16fa:	2c00      	cmp	r4, #0
    16fc:	d106      	bne.n	170c <audioProcessPacket+0x94>
		newPacket = true;
    16fe:	2101      	movs	r1, #1
    1700:	4a11      	ldr	r2, [pc, #68]	; (1748 <audioProcessPacket+0xd0>)
    1702:	7011      	strb	r1, [r2, #0]
		myEXP = !myEXP;
    1704:	2201      	movs	r2, #1
    1706:	4053      	eors	r3, r2
    1708:	4a1a      	ldr	r2, [pc, #104]	; (1774 <audioProcessPacket+0xfc>)
    170a:	7013      	strb	r3, [r2, #0]
	if(!RXbuf || !newPacket)
    170c:	4b1a      	ldr	r3, [pc, #104]	; (1778 <audioProcessPacket+0x100>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	2b00      	cmp	r3, #0
    1712:	d010      	beq.n	1736 <audioProcessPacket+0xbe>
    1714:	4b0c      	ldr	r3, [pc, #48]	; (1748 <audioProcessPacket+0xd0>)
    1716:	7818      	ldrb	r0, [r3, #0]
    1718:	2800      	cmp	r0, #0
    171a:	d00c      	beq.n	1736 <audioProcessPacket+0xbe>
	audioRXreceived++;	
    171c:	4a17      	ldr	r2, [pc, #92]	; (177c <audioProcessPacket+0x104>)
    171e:	6813      	ldr	r3, [r2, #0]
    1720:	3301      	adds	r3, #1
    1722:	6013      	str	r3, [r2, #0]
	return true;
    1724:	e7b7      	b.n	1696 <audioProcessPacket+0x1e>
			audioRXrejected++;	
    1726:	4a0e      	ldr	r2, [pc, #56]	; (1760 <audioProcessPacket+0xe8>)
    1728:	6813      	ldr	r3, [r2, #0]
    172a:	3301      	adds	r3, #1
    172c:	6013      	str	r3, [r2, #0]
			newPacket = false;		
    172e:	2200      	movs	r2, #0
    1730:	4b05      	ldr	r3, [pc, #20]	; (1748 <audioProcessPacket+0xd0>)
    1732:	701a      	strb	r2, [r3, #0]
			return true;
    1734:	e7af      	b.n	1696 <audioProcessPacket+0x1e>
		audioRXduplicate++;	
    1736:	4a12      	ldr	r2, [pc, #72]	; (1780 <audioProcessPacket+0x108>)
    1738:	6813      	ldr	r3, [r2, #0]
    173a:	3301      	adds	r3, #1
    173c:	6013      	str	r3, [r2, #0]
		newPacket = false;		
    173e:	2200      	movs	r2, #0
    1740:	4b01      	ldr	r3, [pc, #4]	; (1748 <audioProcessPacket+0xd0>)
    1742:	701a      	strb	r2, [r3, #0]
		return true;
    1744:	2001      	movs	r0, #1
    1746:	e7a6      	b.n	1696 <audioProcessPacket+0x1e>
    1748:	20000518 	.word	0x20000518
    174c:	20000478 	.word	0x20000478
    1750:	200004bc 	.word	0x200004bc
    1754:	00002e8d 	.word	0x00002e8d
    1758:	20000b28 	.word	0x20000b28
    175c:	00005f90 	.word	0x00005f90
    1760:	200004d4 	.word	0x200004d4
    1764:	20000548 	.word	0x20000548
    1768:	200004bd 	.word	0x200004bd
    176c:	2000051e 	.word	0x2000051e
    1770:	20000b39 	.word	0x20000b39
    1774:	20000540 	.word	0x20000540
    1778:	2000048c 	.word	0x2000048c
    177c:	2000047c 	.word	0x2000047c
    1780:	20000544 	.word	0x20000544

00001784 <audioUpkeepPacket>:

void audioUpkeepPacket(void)
{
    1784:	b5f0      	push	{r4, r5, r6, r7, lr}
    1786:	46c6      	mov	lr, r8
    1788:	b500      	push	{lr}
#ifdef DO_UPKEEP	
	unsigned char numBytes = upkeepBytes;
    178a:	4b47      	ldr	r3, [pc, #284]	; (18a8 <audioUpkeepPacket+0x124>)
    178c:	781c      	ldrb	r4, [r3, #0]
	// Fish the remaining bytes out
	
	if(numBytes == 0)
    178e:	2c00      	cmp	r4, #0
    1790:	d102      	bne.n	1798 <audioUpkeepPacket+0x14>
		//push(RXbuf, w);
		//}
		REG_PORT_OUTSET1 = PORT_PB09;
	}
#endif	
}
    1792:	bc04      	pop	{r2}
    1794:	4690      	mov	r8, r2
    1796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sparkPullRX(4, numBytes);
    1798:	0021      	movs	r1, r4
    179a:	2004      	movs	r0, #4
    179c:	4b43      	ldr	r3, [pc, #268]	; (18ac <audioUpkeepPacket+0x128>)
    179e:	4798      	blx	r3
	if(!hisEMPTY && newPacket)
    17a0:	4b43      	ldr	r3, [pc, #268]	; (18b0 <audioUpkeepPacket+0x12c>)
    17a2:	781b      	ldrb	r3, [r3, #0]
    17a4:	2b00      	cmp	r3, #0
    17a6:	d1f4      	bne.n	1792 <audioUpkeepPacket+0xe>
    17a8:	4b42      	ldr	r3, [pc, #264]	; (18b4 <audioUpkeepPacket+0x130>)
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	2b00      	cmp	r3, #0
    17ae:	d0f0      	beq.n	1792 <audioUpkeepPacket+0xe>
		REG_PORT_OUTCLR1 = PORT_PB09;
    17b0:	2280      	movs	r2, #128	; 0x80
    17b2:	0092      	lsls	r2, r2, #2
    17b4:	4b40      	ldr	r3, [pc, #256]	; (18b8 <audioUpkeepPacket+0x134>)
    17b6:	601a      	str	r2, [r3, #0]
		if(elements(RXbuf)>(FIFO_SIZE-200))
    17b8:	4b40      	ldr	r3, [pc, #256]	; (18bc <audioUpkeepPacket+0x138>)
    17ba:	6819      	ldr	r1, [r3, #0]
	if (fifo->head == fifo->tail)
    17bc:	684b      	ldr	r3, [r1, #4]
    17be:	688a      	ldr	r2, [r1, #8]
    17c0:	429a      	cmp	r2, r3
    17c2:	d010      	beq.n	17e6 <audioUpkeepPacket+0x62>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    17c4:	68c8      	ldr	r0, [r1, #12]
    17c6:	1e45      	subs	r5, r0, #1
    17c8:	42ab      	cmp	r3, r5
    17ca:	d007      	beq.n	17dc <audioUpkeepPacket+0x58>
    17cc:	1e55      	subs	r5, r2, #1
    17ce:	42ab      	cmp	r3, r5
    17d0:	d00a      	beq.n	17e8 <audioUpkeepPacket+0x64>
	else if (fifo->head < fifo->tail)
    17d2:	429a      	cmp	r2, r3
    17d4:	d905      	bls.n	17e2 <audioUpkeepPacket+0x5e>
	return (fifo->head) + (fifo->size - fifo->tail);
    17d6:	1a80      	subs	r0, r0, r2
    17d8:	1818      	adds	r0, r3, r0
    17da:	e005      	b.n	17e8 <audioUpkeepPacket+0x64>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    17dc:	2a00      	cmp	r2, #0
    17de:	d003      	beq.n	17e8 <audioUpkeepPacket+0x64>
    17e0:	e7f4      	b.n	17cc <audioUpkeepPacket+0x48>
	return fifo->head - fifo->tail;
    17e2:	1a98      	subs	r0, r3, r2
    17e4:	e000      	b.n	17e8 <audioUpkeepPacket+0x64>
	return 0;
    17e6:	2000      	movs	r0, #0
    17e8:	4d35      	ldr	r5, [pc, #212]	; (18c0 <audioUpkeepPacket+0x13c>)
    17ea:	42a8      	cmp	r0, r5
    17ec:	d902      	bls.n	17f4 <audioUpkeepPacket+0x70>
		fill = false;
    17ee:	2500      	movs	r5, #0
    17f0:	4834      	ldr	r0, [pc, #208]	; (18c4 <audioUpkeepPacket+0x140>)
    17f2:	7005      	strb	r5, [r0, #0]
	if (fifo->head == fifo->tail)
    17f4:	429a      	cmp	r2, r3
    17f6:	d010      	beq.n	181a <audioUpkeepPacket+0x96>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    17f8:	68c8      	ldr	r0, [r1, #12]
    17fa:	1e45      	subs	r5, r0, #1
    17fc:	42ab      	cmp	r3, r5
    17fe:	d007      	beq.n	1810 <audioUpkeepPacket+0x8c>
    1800:	1e55      	subs	r5, r2, #1
    1802:	42ab      	cmp	r3, r5
    1804:	d00a      	beq.n	181c <audioUpkeepPacket+0x98>
	else if (fifo->head < fifo->tail)
    1806:	429a      	cmp	r2, r3
    1808:	d905      	bls.n	1816 <audioUpkeepPacket+0x92>
	return (fifo->head) + (fifo->size - fifo->tail);
    180a:	1a80      	subs	r0, r0, r2
    180c:	1818      	adds	r0, r3, r0
    180e:	e005      	b.n	181c <audioUpkeepPacket+0x98>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1810:	2a00      	cmp	r2, #0
    1812:	d003      	beq.n	181c <audioUpkeepPacket+0x98>
    1814:	e7f4      	b.n	1800 <audioUpkeepPacket+0x7c>
	return fifo->head - fifo->tail;
    1816:	1a98      	subs	r0, r3, r2
    1818:	e000      	b.n	181c <audioUpkeepPacket+0x98>
	return 0;
    181a:	2000      	movs	r0, #0
		if(elements(RXbuf)<(FIFO_SIZE/2))
    181c:	4a2a      	ldr	r2, [pc, #168]	; (18c8 <audioUpkeepPacket+0x144>)
    181e:	4290      	cmp	r0, r2
    1820:	d802      	bhi.n	1828 <audioUpkeepPacket+0xa4>
		fill = true;
    1822:	2001      	movs	r0, #1
    1824:	4a27      	ldr	r2, [pc, #156]	; (18c4 <audioUpkeepPacket+0x140>)
    1826:	7010      	strb	r0, [r2, #0]
		if(fill)
    1828:	4a26      	ldr	r2, [pc, #152]	; (18c4 <audioUpkeepPacket+0x140>)
    182a:	7812      	ldrb	r2, [r2, #0]
    182c:	2a00      	cmp	r2, #0
    182e:	d01e      	beq.n	186e <audioUpkeepPacket+0xea>
			uint16_t remaining = (FIFO_SIZE-RXbuf->head);
    1830:	b29a      	uxth	r2, r3
    1832:	2680      	movs	r6, #128	; 0x80
    1834:	0176      	lsls	r6, r6, #5
    1836:	1ab6      	subs	r6, r6, r2
    1838:	b2b6      	uxth	r6, r6
			uint16_t transfer = (numBytes-6) >> 1;
    183a:	3c06      	subs	r4, #6
    183c:	1065      	asrs	r5, r4, #1
    183e:	b2aa      	uxth	r2, r5
			if(transfer <= remaining)
    1840:	4296      	cmp	r6, r2
    1842:	d319      	bcc.n	1878 <audioUpkeepPacket+0xf4>
				memcpy(&RXbuf->buffer[RXbuf->head], &sparkRXbuffer[4], transfer << 1);
    1844:	6808      	ldr	r0, [r1, #0]
    1846:	005b      	lsls	r3, r3, #1
    1848:	18c0      	adds	r0, r0, r3
    184a:	4b20      	ldr	r3, [pc, #128]	; (18cc <audioUpkeepPacket+0x148>)
    184c:	6819      	ldr	r1, [r3, #0]
    184e:	3104      	adds	r1, #4
    1850:	4a1f      	ldr	r2, [pc, #124]	; (18d0 <audioUpkeepPacket+0x14c>)
    1852:	4022      	ands	r2, r4
    1854:	4b1f      	ldr	r3, [pc, #124]	; (18d4 <audioUpkeepPacket+0x150>)
    1856:	4798      	blx	r3
			RXbuf->head = (RXbuf->head+transfer)%RXbuf->size;
    1858:	4b18      	ldr	r3, [pc, #96]	; (18bc <audioUpkeepPacket+0x138>)
    185a:	681c      	ldr	r4, [r3, #0]
    185c:	0428      	lsls	r0, r5, #16
    185e:	0c00      	lsrs	r0, r0, #16
    1860:	6863      	ldr	r3, [r4, #4]
    1862:	469c      	mov	ip, r3
    1864:	4460      	add	r0, ip
    1866:	68e1      	ldr	r1, [r4, #12]
    1868:	4b1b      	ldr	r3, [pc, #108]	; (18d8 <audioUpkeepPacket+0x154>)
    186a:	4798      	blx	r3
    186c:	6061      	str	r1, [r4, #4]
		REG_PORT_OUTSET1 = PORT_PB09;
    186e:	2280      	movs	r2, #128	; 0x80
    1870:	0092      	lsls	r2, r2, #2
    1872:	4b1a      	ldr	r3, [pc, #104]	; (18dc <audioUpkeepPacket+0x158>)
    1874:	601a      	str	r2, [r3, #0]
    1876:	e78c      	b.n	1792 <audioUpkeepPacket+0xe>
				memcpy(&RXbuf->buffer[RXbuf->head], &sparkRXbuffer[4], remaining << 1);
    1878:	6808      	ldr	r0, [r1, #0]
    187a:	005b      	lsls	r3, r3, #1
    187c:	18c0      	adds	r0, r0, r3
    187e:	4b13      	ldr	r3, [pc, #76]	; (18cc <audioUpkeepPacket+0x148>)
    1880:	4698      	mov	r8, r3
    1882:	681b      	ldr	r3, [r3, #0]
    1884:	1d19      	adds	r1, r3, #4
    1886:	0074      	lsls	r4, r6, #1
    1888:	0022      	movs	r2, r4
    188a:	4f12      	ldr	r7, [pc, #72]	; (18d4 <audioUpkeepPacket+0x150>)
    188c:	47b8      	blx	r7
				memcpy(&RXbuf->buffer[0], &sparkRXbuffer[4+(remaining << 1)], (transfer - remaining) << 1);
    188e:	4b0b      	ldr	r3, [pc, #44]	; (18bc <audioUpkeepPacket+0x138>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	6818      	ldr	r0, [r3, #0]
    1894:	4643      	mov	r3, r8
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	1d21      	adds	r1, r4, #4
    189a:	1859      	adds	r1, r3, r1
    189c:	042a      	lsls	r2, r5, #16
    189e:	0c12      	lsrs	r2, r2, #16
    18a0:	1b92      	subs	r2, r2, r6
    18a2:	0052      	lsls	r2, r2, #1
    18a4:	47b8      	blx	r7
    18a6:	e7d7      	b.n	1858 <audioUpkeepPacket+0xd4>
    18a8:	200004bc 	.word	0x200004bc
    18ac:	00002e8d 	.word	0x00002e8d
    18b0:	2000051e 	.word	0x2000051e
    18b4:	20000518 	.word	0x20000518
    18b8:	41004494 	.word	0x41004494
    18bc:	2000048c 	.word	0x2000048c
    18c0:	00000f38 	.word	0x00000f38
    18c4:	20000490 	.word	0x20000490
    18c8:	000007ff 	.word	0x000007ff
    18cc:	20000b28 	.word	0x20000b28
    18d0:	0001fffe 	.word	0x0001fffe
    18d4:	00004461 	.word	0x00004461
    18d8:	00004211 	.word	0x00004211
    18dc:	41004498 	.word	0x41004498

000018e0 <audioFillPacket>:

void audioFillPacket(unsigned char numBytes)
{
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	46d6      	mov	lr, sl
    18e4:	464f      	mov	r7, r9
    18e6:	4646      	mov	r6, r8
    18e8:	b5c0      	push	{r6, r7, lr}
    18ea:	0004      	movs	r4, r0
		myEMPTY = true;
	else
		myEMPTY = false;*/
		
	// Process header
	if( (hisEXP && !mySEQ) || (!hisEXP && mySEQ))
    18ec:	4b67      	ldr	r3, [pc, #412]	; (1a8c <audioFillPacket+0x1ac>)
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d003      	beq.n	18fc <audioFillPacket+0x1c>
    18f4:	4a66      	ldr	r2, [pc, #408]	; (1a90 <audioFillPacket+0x1b0>)
    18f6:	7812      	ldrb	r2, [r2, #0]
    18f8:	2a00      	cmp	r2, #0
    18fa:	d005      	beq.n	1908 <audioFillPacket+0x28>
    18fc:	2b00      	cmp	r3, #0
    18fe:	d129      	bne.n	1954 <audioFillPacket+0x74>
    1900:	4b63      	ldr	r3, [pc, #396]	; (1a90 <audioFillPacket+0x1b0>)
    1902:	7819      	ldrb	r1, [r3, #0]
    1904:	2900      	cmp	r1, #0
    1906:	d005      	beq.n	1914 <audioFillPacket+0x34>
	{
		//if(!myEMPTY)
		mySEQ = !mySEQ; // Next packet
    1908:	4a61      	ldr	r2, [pc, #388]	; (1a90 <audioFillPacket+0x1b0>)
    190a:	7813      	ldrb	r3, [r2, #0]
    190c:	2101      	movs	r1, #1
    190e:	404b      	eors	r3, r1
    1910:	7013      	strb	r3, [r2, #0]
		newPacket = true;
    1912:	2101      	movs	r1, #1
	}			
	if(mySEQ)
    1914:	4b5e      	ldr	r3, [pc, #376]	; (1a90 <audioFillPacket+0x1b0>)
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b00      	cmp	r3, #0
    191a:	d11d      	bne.n	1958 <audioFillPacket+0x78>
	uint8_t MAC = 0x00;
    191c:	2200      	movs	r2, #0
		MAC |= 0x01;
	if(myEXP)
    191e:	4b5d      	ldr	r3, [pc, #372]	; (1a94 <audioFillPacket+0x1b4>)
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d002      	beq.n	192c <audioFillPacket+0x4c>
		MAC |= 0x02;	
    1926:	2302      	movs	r3, #2
    1928:	431a      	orrs	r2, r3
    192a:	b2d2      	uxtb	r2, r2
	if(newPacket)// && myEMPTY)
    192c:	2900      	cmp	r1, #0
    192e:	d020      	beq.n	1972 <audioFillPacket+0x92>
	{
		// Can we fill?
		if(elements(TXbuf)<numBytes)
    1930:	4b59      	ldr	r3, [pc, #356]	; (1a98 <audioFillPacket+0x1b8>)
    1932:	681d      	ldr	r5, [r3, #0]
	if (fifo->head == fifo->tail)
    1934:	686b      	ldr	r3, [r5, #4]
    1936:	68ae      	ldr	r6, [r5, #8]
    1938:	42b3      	cmp	r3, r6
    193a:	d014      	beq.n	1966 <audioFillPacket+0x86>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    193c:	68e8      	ldr	r0, [r5, #12]
    193e:	1e45      	subs	r5, r0, #1
    1940:	42ab      	cmp	r3, r5
    1942:	d00b      	beq.n	195c <audioFillPacket+0x7c>
    1944:	1e75      	subs	r5, r6, #1
    1946:	42ab      	cmp	r3, r5
    1948:	d00e      	beq.n	1968 <audioFillPacket+0x88>
	else if (fifo->head < fifo->tail)
    194a:	42b3      	cmp	r3, r6
    194c:	d209      	bcs.n	1962 <audioFillPacket+0x82>
	return (fifo->head) + (fifo->size - fifo->tail);
    194e:	1b80      	subs	r0, r0, r6
    1950:	1818      	adds	r0, r3, r0
    1952:	e009      	b.n	1968 <audioFillPacket+0x88>
	bool newPacket = false;
    1954:	2100      	movs	r1, #0
    1956:	e7dd      	b.n	1914 <audioFillPacket+0x34>
		MAC |= 0x01;
    1958:	2201      	movs	r2, #1
    195a:	e7e0      	b.n	191e <audioFillPacket+0x3e>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    195c:	2e00      	cmp	r6, #0
    195e:	d003      	beq.n	1968 <audioFillPacket+0x88>
    1960:	e7f0      	b.n	1944 <audioFillPacket+0x64>
	return fifo->head - fifo->tail;
    1962:	1b98      	subs	r0, r3, r6
    1964:	e000      	b.n	1968 <audioFillPacket+0x88>
	return 0;
    1966:	2000      	movs	r0, #0
		if(elements(TXbuf)<numBytes)
    1968:	4284      	cmp	r4, r0
    196a:	d953      	bls.n	1a14 <audioFillPacket+0x134>
			myEMPTY = true;
    196c:	2001      	movs	r0, #1
    196e:	4b4b      	ldr	r3, [pc, #300]	; (1a9c <audioFillPacket+0x1bc>)
    1970:	7018      	strb	r0, [r3, #0]
		else
			myEMPTY = false;				
	}
	if(myEMPTY)
    1972:	4b4a      	ldr	r3, [pc, #296]	; (1a9c <audioFillPacket+0x1bc>)
    1974:	781b      	ldrb	r3, [r3, #0]
    1976:	2b00      	cmp	r3, #0
    1978:	d002      	beq.n	1980 <audioFillPacket+0xa0>
		MAC |= 0x10;
    197a:	2310      	movs	r3, #16
    197c:	431a      	orrs	r2, r3
    197e:	b2d2      	uxtb	r2, r2
	
	
	
	// Header
	sparkTXbuffer[0] = 0xFF; // Spacer
    1980:	4b47      	ldr	r3, [pc, #284]	; (1aa0 <audioFillPacket+0x1c0>)
    1982:	20ff      	movs	r0, #255	; 0xff
    1984:	681d      	ldr	r5, [r3, #0]
    1986:	7028      	strb	r0, [r5, #0]
	sparkTXbuffer[1] = MAC; // MAC	
    1988:	6818      	ldr	r0, [r3, #0]
    198a:	7042      	strb	r2, [r0, #1]
	uint16_t CRC = 0xFFFF;
	CRC = calcCRC(MAC, CRC);
	
	sparkTXbuffer[2] = CRC >> 8; // MSB part of CRC
	sparkTXbuffer[3] = CRC & 0x00FF; // LSB part of CRC*/
	sparkTXbuffer[2] = crc8_table[MAC]; // Header CRC
    198c:	4845      	ldr	r0, [pc, #276]	; (1aa4 <audioFillPacket+0x1c4>)
    198e:	5c82      	ldrb	r2, [r0, r2]
    1990:	6818      	ldr	r0, [r3, #0]
    1992:	7082      	strb	r2, [r0, #2]
	sparkTXbuffer[3] = 0x00; // Unused for now
    1994:	681b      	ldr	r3, [r3, #0]
    1996:	2200      	movs	r2, #0
    1998:	70da      	strb	r2, [r3, #3]
	
	// New Data
	if(!TXbuf || !newPacket)
    199a:	4b3f      	ldr	r3, [pc, #252]	; (1a98 <audioFillPacket+0x1b8>)
    199c:	681b      	ldr	r3, [r3, #0]
    199e:	2b00      	cmp	r3, #0
    19a0:	d03c      	beq.n	1a1c <audioFillPacket+0x13c>
    19a2:	2900      	cmp	r1, #0
    19a4:	d03a      	beq.n	1a1c <audioFillPacket+0x13c>
		audioTXresent++;
		
		sparkPushTX(0, numBytes);
		return;
	}	
	audioTXsent++;
    19a6:	4a40      	ldr	r2, [pc, #256]	; (1aa8 <audioFillPacket+0x1c8>)
    19a8:	6813      	ldr	r3, [r2, #0]
    19aa:	3301      	adds	r3, #1
    19ac:	6013      	str	r3, [r2, #0]
	
	if(myEMPTY)
    19ae:	4b3b      	ldr	r3, [pc, #236]	; (1a9c <audioFillPacket+0x1bc>)
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d150      	bne.n	1a58 <audioFillPacket+0x178>
		sparkPushTX(0, numBytes);
		return;
	}
	else
	{	 
		REG_PORT_OUTCLR1 = PORT_PB09;
    19b6:	2280      	movs	r2, #128	; 0x80
    19b8:	0092      	lsls	r2, r2, #2
    19ba:	4b3c      	ldr	r3, [pc, #240]	; (1aac <audioFillPacket+0x1cc>)
    19bc:	601a      	str	r2, [r3, #0]
		
		
		// Check for size!	
		
		// Size of uint16_t transfer is (numBytes-4)/2
		uint16_t remaining = (FIFO_SIZE-TXbuf->tail);
    19be:	4b36      	ldr	r3, [pc, #216]	; (1a98 <audioFillPacket+0x1b8>)
    19c0:	681f      	ldr	r7, [r3, #0]
    19c2:	68bb      	ldr	r3, [r7, #8]
    19c4:	b29a      	uxth	r2, r3
    19c6:	2680      	movs	r6, #128	; 0x80
    19c8:	0176      	lsls	r6, r6, #5
    19ca:	1ab6      	subs	r6, r6, r2
    19cc:	b2b6      	uxth	r6, r6
		uint16_t transfer = (numBytes-6) >> 1;
    19ce:	1fa2      	subs	r2, r4, #6
    19d0:	1055      	asrs	r5, r2, #1
    19d2:	b2a9      	uxth	r1, r5
		
		// Memcpy
		if(transfer <= remaining)
    19d4:	428e      	cmp	r6, r1
    19d6:	d341      	bcc.n	1a5c <audioFillPacket+0x17c>
		{
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], transfer << 1);
    19d8:	4931      	ldr	r1, [pc, #196]	; (1aa0 <audioFillPacket+0x1c0>)
    19da:	6808      	ldr	r0, [r1, #0]
    19dc:	3004      	adds	r0, #4
    19de:	6839      	ldr	r1, [r7, #0]
    19e0:	005b      	lsls	r3, r3, #1
    19e2:	18c9      	adds	r1, r1, r3
    19e4:	4b32      	ldr	r3, [pc, #200]	; (1ab0 <audioFillPacket+0x1d0>)
    19e6:	401a      	ands	r2, r3
    19e8:	4b32      	ldr	r3, [pc, #200]	; (1ab4 <audioFillPacket+0x1d4>)
    19ea:	4798      	blx	r3
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], remaining << 1);
			// From possible start of FIFO
			memcpy(&sparkTXbuffer[4+(remaining << 1)], &TXbuf->buffer[0], (transfer - remaining) << 1);
			//TXbuf->tail = TXbuf->tail+transfer-TXbuf->size;
		}
		TXbuf->tail = (TXbuf->tail+transfer)%TXbuf->size;
    19ec:	4b2a      	ldr	r3, [pc, #168]	; (1a98 <audioFillPacket+0x1b8>)
    19ee:	681e      	ldr	r6, [r3, #0]
    19f0:	0428      	lsls	r0, r5, #16
    19f2:	0c00      	lsrs	r0, r0, #16
    19f4:	68b3      	ldr	r3, [r6, #8]
    19f6:	469c      	mov	ip, r3
    19f8:	4460      	add	r0, ip
    19fa:	68f1      	ldr	r1, [r6, #12]
    19fc:	4b2e      	ldr	r3, [pc, #184]	; (1ab8 <audioFillPacket+0x1d8>)
    19fe:	4798      	blx	r3
    1a00:	60b1      	str	r1, [r6, #8]
			
			//sparkTXbuffer[i+1] = 0xF0;
			//sparkTXbuffer[i] = 0x00;
		}*/
		
		REG_PORT_OUTSET1 = PORT_PB09;
    1a02:	2280      	movs	r2, #128	; 0x80
    1a04:	0092      	lsls	r2, r2, #2
    1a06:	4b2d      	ldr	r3, [pc, #180]	; (1abc <audioFillPacket+0x1dc>)
    1a08:	601a      	str	r2, [r3, #0]
		
	}
	
	sparkPushTX(0, numBytes);
    1a0a:	0021      	movs	r1, r4
    1a0c:	2000      	movs	r0, #0
    1a0e:	4b2c      	ldr	r3, [pc, #176]	; (1ac0 <audioFillPacket+0x1e0>)
    1a10:	4798      	blx	r3
    1a12:	e00b      	b.n	1a2c <audioFillPacket+0x14c>
			myEMPTY = false;				
    1a14:	2000      	movs	r0, #0
    1a16:	4b21      	ldr	r3, [pc, #132]	; (1a9c <audioFillPacket+0x1bc>)
    1a18:	7018      	strb	r0, [r3, #0]
    1a1a:	e7aa      	b.n	1972 <audioFillPacket+0x92>
		audioTXresent++;
    1a1c:	4a29      	ldr	r2, [pc, #164]	; (1ac4 <audioFillPacket+0x1e4>)
    1a1e:	6813      	ldr	r3, [r2, #0]
    1a20:	3301      	adds	r3, #1
    1a22:	6013      	str	r3, [r2, #0]
		sparkPushTX(0, numBytes);
    1a24:	0021      	movs	r1, r4
    1a26:	2000      	movs	r0, #0
    1a28:	4b25      	ldr	r3, [pc, #148]	; (1ac0 <audioFillPacket+0x1e0>)
    1a2a:	4798      	blx	r3
}
    1a2c:	bc1c      	pop	{r2, r3, r4}
    1a2e:	4690      	mov	r8, r2
    1a30:	4699      	mov	r9, r3
    1a32:	46a2      	mov	sl, r4
    1a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sparkTXbuffer[i] = 0x7F;		
    1a36:	4a1a      	ldr	r2, [pc, #104]	; (1aa0 <audioFillPacket+0x1c0>)
    1a38:	6812      	ldr	r2, [r2, #0]
    1a3a:	217f      	movs	r1, #127	; 0x7f
    1a3c:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=4;i<numBytes;i++)
    1a3e:	3301      	adds	r3, #1
    1a40:	b2db      	uxtb	r3, r3
    1a42:	42a3      	cmp	r3, r4
    1a44:	d3f7      	bcc.n	1a36 <audioFillPacket+0x156>
		audioTXisempty++;
    1a46:	4a20      	ldr	r2, [pc, #128]	; (1ac8 <audioFillPacket+0x1e8>)
    1a48:	6813      	ldr	r3, [r2, #0]
    1a4a:	3301      	adds	r3, #1
    1a4c:	6013      	str	r3, [r2, #0]
		sparkPushTX(0, numBytes);
    1a4e:	0021      	movs	r1, r4
    1a50:	2000      	movs	r0, #0
    1a52:	4b1b      	ldr	r3, [pc, #108]	; (1ac0 <audioFillPacket+0x1e0>)
    1a54:	4798      	blx	r3
		return;
    1a56:	e7e9      	b.n	1a2c <audioFillPacket+0x14c>
    1a58:	2304      	movs	r3, #4
    1a5a:	e7f2      	b.n	1a42 <audioFillPacket+0x162>
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], remaining << 1);
    1a5c:	4a10      	ldr	r2, [pc, #64]	; (1aa0 <audioFillPacket+0x1c0>)
    1a5e:	6812      	ldr	r2, [r2, #0]
    1a60:	4691      	mov	r9, r2
    1a62:	1d10      	adds	r0, r2, #4
    1a64:	005b      	lsls	r3, r3, #1
    1a66:	683a      	ldr	r2, [r7, #0]
    1a68:	18d1      	adds	r1, r2, r3
    1a6a:	0073      	lsls	r3, r6, #1
    1a6c:	469a      	mov	sl, r3
    1a6e:	001a      	movs	r2, r3
    1a70:	4b10      	ldr	r3, [pc, #64]	; (1ab4 <audioFillPacket+0x1d4>)
    1a72:	4698      	mov	r8, r3
    1a74:	4798      	blx	r3
			memcpy(&sparkTXbuffer[4+(remaining << 1)], &TXbuf->buffer[0], (transfer - remaining) << 1);
    1a76:	4653      	mov	r3, sl
    1a78:	1d18      	adds	r0, r3, #4
    1a7a:	4448      	add	r0, r9
    1a7c:	6839      	ldr	r1, [r7, #0]
    1a7e:	042a      	lsls	r2, r5, #16
    1a80:	0c12      	lsrs	r2, r2, #16
    1a82:	1b92      	subs	r2, r2, r6
    1a84:	0052      	lsls	r2, r2, #1
    1a86:	47c0      	blx	r8
    1a88:	e7b0      	b.n	19ec <audioFillPacket+0x10c>
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	200004bd 	.word	0x200004bd
    1a90:	200004d0 	.word	0x200004d0
    1a94:	20000540 	.word	0x20000540
    1a98:	20000498 	.word	0x20000498
    1a9c:	2000051c 	.word	0x2000051c
    1aa0:	20000b30 	.word	0x20000b30
    1aa4:	00005f90 	.word	0x00005f90
    1aa8:	20000488 	.word	0x20000488
    1aac:	41004494 	.word	0x41004494
    1ab0:	0001fffe 	.word	0x0001fffe
    1ab4:	00004461 	.word	0x00004461
    1ab8:	00004211 	.word	0x00004211
    1abc:	41004498 	.word	0x41004498
    1ac0:	00002e55 	.word	0x00002e55
    1ac4:	20000484 	.word	0x20000484
    1ac8:	20000494 	.word	0x20000494

00001acc <callbackAudioSample>:
bool playback;

//#define DECIMATE 6

uint32_t callbackAudioSample(uint32_t in_sample)
{
    1acc:	b570      	push	{r4, r5, r6, lr}
    1ace:	0005      	movs	r5, r0
	uint32_t out_sample;// = last_sample; // Loop through
	uint16_t b;
	
	count = (count+1) % audioDecimate;
    1ad0:	4c3f      	ldr	r4, [pc, #252]	; (1bd0 <callbackAudioSample+0x104>)
    1ad2:	7820      	ldrb	r0, [r4, #0]
    1ad4:	3001      	adds	r0, #1
    1ad6:	4b3f      	ldr	r3, [pc, #252]	; (1bd4 <callbackAudioSample+0x108>)
    1ad8:	7819      	ldrb	r1, [r3, #0]
    1ada:	4b3f      	ldr	r3, [pc, #252]	; (1bd8 <callbackAudioSample+0x10c>)
    1adc:	4798      	blx	r3
    1ade:	b2c9      	uxtb	r1, r1
    1ae0:	7021      	strb	r1, [r4, #0]
	
	filter[count] = (in_sample & 0x0000FFFF);
    1ae2:	004a      	lsls	r2, r1, #1
    1ae4:	4b3d      	ldr	r3, [pc, #244]	; (1bdc <callbackAudioSample+0x110>)
    1ae6:	52d5      	strh	r5, [r2, r3]
	
	if(TXbuf && count == 0)
    1ae8:	4b3d      	ldr	r3, [pc, #244]	; (1be0 <callbackAudioSample+0x114>)
    1aea:	681b      	ldr	r3, [r3, #0]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d018      	beq.n	1b22 <callbackAudioSample+0x56>
    1af0:	2900      	cmp	r1, #0
    1af2:	d116      	bne.n	1b22 <callbackAudioSample+0x56>
	{
		push(TXbuf, filter[0]); // Add average filtering to remove antialias
    1af4:	4a39      	ldr	r2, [pc, #228]	; (1bdc <callbackAudioSample+0x110>)
    1af6:	8810      	ldrh	r0, [r2, #0]
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1af8:	685a      	ldr	r2, [r3, #4]
    1afa:	68d9      	ldr	r1, [r3, #12]
    1afc:	3901      	subs	r1, #1
    1afe:	428a      	cmp	r2, r1
    1b00:	d032      	beq.n	1b68 <callbackAudioSample+0x9c>
    1b02:	6899      	ldr	r1, [r3, #8]
    1b04:	3901      	subs	r1, #1
    1b06:	428a      	cmp	r2, r1
    1b08:	d033      	beq.n	1b72 <callbackAudioSample+0xa6>
	return false;
    1b0a:	2100      	movs	r1, #0
	if (isFull(fifo) == true)
    1b0c:	2900      	cmp	r1, #0
    1b0e:	d108      	bne.n	1b22 <callbackAudioSample+0x56>
	fifo->buffer[fifo->head] = byte;
    1b10:	0052      	lsls	r2, r2, #1
    1b12:	6819      	ldr	r1, [r3, #0]
    1b14:	5288      	strh	r0, [r1, r2]
	fifo->head++;
    1b16:	685a      	ldr	r2, [r3, #4]
    1b18:	3201      	adds	r2, #1
    1b1a:	605a      	str	r2, [r3, #4]
	if (fifo->head == fifo->size)
    1b1c:	68d9      	ldr	r1, [r3, #12]
    1b1e:	428a      	cmp	r2, r1
    1b20:	d029      	beq.n	1b76 <callbackAudioSample+0xaa>
		//push(TXbuf, (((uint32_t)filter[0])+((uint32_t)filter[1])+((uint32_t)filter[2]))/3);
		//push(TXbuf, in_sample & 0x0000FFFF); // Take left channel
	}
	
	if(RXbuf && count == 0)
    1b22:	4b30      	ldr	r3, [pc, #192]	; (1be4 <callbackAudioSample+0x118>)
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d04d      	beq.n	1bc6 <callbackAudioSample+0xfa>
    1b2a:	4a29      	ldr	r2, [pc, #164]	; (1bd0 <callbackAudioSample+0x104>)
    1b2c:	7812      	ldrb	r2, [r2, #0]
    1b2e:	2a00      	cmp	r2, #0
    1b30:	d149      	bne.n	1bc6 <callbackAudioSample+0xfa>
	if (fifo->head == fifo->tail)
    1b32:	6859      	ldr	r1, [r3, #4]
    1b34:	689a      	ldr	r2, [r3, #8]
    1b36:	4291      	cmp	r1, r2
    1b38:	d020      	beq.n	1b7c <callbackAudioSample+0xb0>
	return false;
    1b3a:	2000      	movs	r0, #0
	{
		if(isEmpty(RXbuf))
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d01f      	beq.n	1b80 <callbackAudioSample+0xb4>
			playback = false;
    1b40:	2400      	movs	r4, #0
    1b42:	4929      	ldr	r1, [pc, #164]	; (1be8 <callbackAudioSample+0x11c>)
    1b44:	700c      	strb	r4, [r1, #0]
		else if(elements(RXbuf)>(FIFO_SIZE/2))
			playback = true;		
			
		if(!playback)
    1b46:	4928      	ldr	r1, [pc, #160]	; (1be8 <callbackAudioSample+0x11c>)
    1b48:	7809      	ldrb	r1, [r1, #0]
    1b4a:	2900      	cmp	r1, #0
    1b4c:	d034      	beq.n	1bb8 <callbackAudioSample+0xec>
	if (isEmpty(fifo) == true)
    1b4e:	2800      	cmp	r0, #0
    1b50:	d136      	bne.n	1bc0 <callbackAudioSample+0xf4>
	*byte = fifo->buffer[fifo->tail];
    1b52:	0051      	lsls	r1, r2, #1
    1b54:	6818      	ldr	r0, [r3, #0]
    1b56:	5a09      	ldrh	r1, [r1, r0]
	fifo->tail++;
    1b58:	3201      	adds	r2, #1
    1b5a:	609a      	str	r2, [r3, #8]
	if (fifo->tail == fifo->size)
    1b5c:	68d8      	ldr	r0, [r3, #12]
    1b5e:	4282      	cmp	r2, r0
    1b60:	d12f      	bne.n	1bc2 <callbackAudioSample+0xf6>
	fifo->tail = 0;
    1b62:	2200      	movs	r2, #0
    1b64:	609a      	str	r2, [r3, #8]
    1b66:	e02c      	b.n	1bc2 <callbackAudioSample+0xf6>
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1b68:	6899      	ldr	r1, [r3, #8]
    1b6a:	2900      	cmp	r1, #0
    1b6c:	d1c9      	bne.n	1b02 <callbackAudioSample+0x36>
	return true;
    1b6e:	2101      	movs	r1, #1
    1b70:	e7cc      	b.n	1b0c <callbackAudioSample+0x40>
    1b72:	2101      	movs	r1, #1
    1b74:	e7ca      	b.n	1b0c <callbackAudioSample+0x40>
	fifo->head = 0;
    1b76:	2200      	movs	r2, #0
    1b78:	605a      	str	r2, [r3, #4]
    1b7a:	e7d2      	b.n	1b22 <callbackAudioSample+0x56>
	return true;
    1b7c:	2001      	movs	r0, #1
    1b7e:	e7dd      	b.n	1b3c <callbackAudioSample+0x70>
	if (fifo->head == fifo->tail)
    1b80:	4291      	cmp	r1, r2
    1b82:	d010      	beq.n	1ba6 <callbackAudioSample+0xda>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1b84:	68dc      	ldr	r4, [r3, #12]
    1b86:	1e65      	subs	r5, r4, #1
    1b88:	42a9      	cmp	r1, r5
    1b8a:	d007      	beq.n	1b9c <callbackAudioSample+0xd0>
    1b8c:	1e55      	subs	r5, r2, #1
    1b8e:	42a9      	cmp	r1, r5
    1b90:	d00a      	beq.n	1ba8 <callbackAudioSample+0xdc>
	else if (fifo->head < fifo->tail)
    1b92:	4291      	cmp	r1, r2
    1b94:	d205      	bcs.n	1ba2 <callbackAudioSample+0xd6>
	return (fifo->head) + (fifo->size - fifo->tail);
    1b96:	1aa4      	subs	r4, r4, r2
    1b98:	190c      	adds	r4, r1, r4
    1b9a:	e005      	b.n	1ba8 <callbackAudioSample+0xdc>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    1b9c:	2a00      	cmp	r2, #0
    1b9e:	d003      	beq.n	1ba8 <callbackAudioSample+0xdc>
    1ba0:	e7f4      	b.n	1b8c <callbackAudioSample+0xc0>
	return fifo->head - fifo->tail;
    1ba2:	1a8c      	subs	r4, r1, r2
    1ba4:	e000      	b.n	1ba8 <callbackAudioSample+0xdc>
	return 0;
    1ba6:	2400      	movs	r4, #0
		else if(elements(RXbuf)>(FIFO_SIZE/2))
    1ba8:	2180      	movs	r1, #128	; 0x80
    1baa:	0109      	lsls	r1, r1, #4
    1bac:	428c      	cmp	r4, r1
    1bae:	d9ca      	bls.n	1b46 <callbackAudioSample+0x7a>
			playback = true;		
    1bb0:	2401      	movs	r4, #1
    1bb2:	490d      	ldr	r1, [pc, #52]	; (1be8 <callbackAudioSample+0x11c>)
    1bb4:	700c      	strb	r4, [r1, #0]
    1bb6:	e7c6      	b.n	1b46 <callbackAudioSample+0x7a>
		{
			last_sample = 0x7F;
    1bb8:	227f      	movs	r2, #127	; 0x7f
    1bba:	4b0c      	ldr	r3, [pc, #48]	; (1bec <callbackAudioSample+0x120>)
    1bbc:	801a      	strh	r2, [r3, #0]
    1bbe:	e002      	b.n	1bc6 <callbackAudioSample+0xfa>
		*byte = 0x7F; // We do hear plops in UPKEEP mode from here, why is isEmpty not triggered?
    1bc0:	217f      	movs	r1, #127	; 0x7f
		{
			pop(RXbuf, &b);
			//if(b == 0x00) // Forbidden value
				//b = 0x7F;
			//last_sample = 0x0F;
			last_sample = b;
    1bc2:	4b0a      	ldr	r3, [pc, #40]	; (1bec <callbackAudioSample+0x120>)
    1bc4:	8019      	strh	r1, [r3, #0]
				
		}		
	}	
	
	//last_sample = filter[0];
	out_sample = ((uint32_t) last_sample) << 16 | last_sample; // Duplicate channel		
    1bc6:	4b09      	ldr	r3, [pc, #36]	; (1bec <callbackAudioSample+0x120>)
    1bc8:	8818      	ldrh	r0, [r3, #0]
    1bca:	0403      	lsls	r3, r0, #16
    1bcc:	4318      	orrs	r0, r3

	return out_sample;
}
    1bce:	bd70      	pop	{r4, r5, r6, pc}
    1bd0:	20000254 	.word	0x20000254
    1bd4:	20000480 	.word	0x20000480
    1bd8:	000043e5 	.word	0x000043e5
    1bdc:	200004c0 	.word	0x200004c0
    1be0:	20000498 	.word	0x20000498
    1be4:	2000048c 	.word	0x2000048c
    1be8:	20000491 	.word	0x20000491
    1bec:	2000051a 	.word	0x2000051a

00001bf0 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
  uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
    1bf0:	4b09      	ldr	r3, [pc, #36]	; (1c18 <dfll_nvm_val+0x28>)
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	0e9b      	lsrs	r3, r3, #26
      + (NVM_DFLL_COARSE_POS / 32))
    >> (NVM_DFLL_COARSE_POS % 32))
    & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
  if (coarse == 0x3f) {
    1bf6:	2b3f      	cmp	r3, #63	; 0x3f
    1bf8:	d009      	beq.n	1c0e <dfll_nvm_val+0x1e>
    coarse = 0x1f;
  }
  uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
      + (NVM_DFLL_FINE_POS / 32))
    >> (NVM_DFLL_FINE_POS % 32))
    1bfa:	4a08      	ldr	r2, [pc, #32]	; (1c1c <dfll_nvm_val+0x2c>)
    1bfc:	6810      	ldr	r0, [r2, #0]
  uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
    1bfe:	0580      	lsls	r0, r0, #22
    1c00:	0d80      	lsrs	r0, r0, #22
    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
  if (fine == 0x3ff) {
    1c02:	4a07      	ldr	r2, [pc, #28]	; (1c20 <dfll_nvm_val+0x30>)
    1c04:	4290      	cmp	r0, r2
    1c06:	d004      	beq.n	1c12 <dfll_nvm_val+0x22>
    fine = 0x1ff;
  }

  return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    1c08:	029b      	lsls	r3, r3, #10
    1c0a:	4318      	orrs	r0, r3
}
    1c0c:	4770      	bx	lr
    coarse = 0x1f;
    1c0e:	3b20      	subs	r3, #32
    1c10:	e7f3      	b.n	1bfa <dfll_nvm_val+0xa>
    fine = 0x1ff;
    1c12:	4804      	ldr	r0, [pc, #16]	; (1c24 <dfll_nvm_val+0x34>)
    1c14:	e7f8      	b.n	1c08 <dfll_nvm_val+0x18>
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	00806024 	.word	0x00806024
    1c1c:	00806028 	.word	0x00806028
    1c20:	000003ff 	.word	0x000003ff
    1c24:	000001ff 	.word	0x000001ff

00001c28 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
  while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    1c28:	4b02      	ldr	r3, [pc, #8]	; (1c34 <dfll_wait_for_sync+0xc>)
    1c2a:	68db      	ldr	r3, [r3, #12]
    1c2c:	06db      	lsls	r3, r3, #27
    1c2e:	d5fb      	bpl.n	1c28 <dfll_wait_for_sync>
}
    1c30:	4770      	bx	lr
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	40000800 	.word	0x40000800

00001c38 <gclk_enable>:

void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
  GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1c38:	230f      	movs	r3, #15
    1c3a:	4018      	ands	r0, r3
    1c3c:	0212      	lsls	r2, r2, #8
    1c3e:	4b07      	ldr	r3, [pc, #28]	; (1c5c <gclk_enable+0x24>)
    1c40:	401a      	ands	r2, r3
    1c42:	4302      	orrs	r2, r0
    1c44:	4b06      	ldr	r3, [pc, #24]	; (1c60 <gclk_enable+0x28>)
    1c46:	609a      	str	r2, [r3, #8]
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1c48:	0209      	lsls	r1, r1, #8
    1c4a:	22f8      	movs	r2, #248	; 0xf8
    1c4c:	0152      	lsls	r2, r2, #5
    1c4e:	4011      	ands	r1, r2
    1c50:	4308      	orrs	r0, r1
    1c52:	2180      	movs	r1, #128	; 0x80
    1c54:	0249      	lsls	r1, r1, #9
    1c56:	4308      	orrs	r0, r1
    1c58:	6058      	str	r0, [r3, #4]
}
    1c5a:	4770      	bx	lr
    1c5c:	00ffff00 	.word	0x00ffff00
    1c60:	40000c00 	.word	0x40000c00

00001c64 <gclk_init>:

void gclk_init() {
  // Various bits in the INTFLAG register can be set to one at startup.
  SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c64:	22c2      	movs	r2, #194	; 0xc2
    1c66:	00d2      	lsls	r2, r2, #3
    1c68:	4b0c      	ldr	r3, [pc, #48]	; (1c9c <gclk_init+0x38>)
    1c6a:	609a      	str	r2, [r3, #8]
      SYSCTRL_INTFLAG_DFLLRDY;

  NVMCTRL->CTRLB.bit.RWS = 2;
    1c6c:	490c      	ldr	r1, [pc, #48]	; (1ca0 <gclk_init+0x3c>)
    1c6e:	684a      	ldr	r2, [r1, #4]
    1c70:	231e      	movs	r3, #30
    1c72:	439a      	bics	r2, r3
    1c74:	3b1a      	subs	r3, #26
    1c76:	4313      	orrs	r3, r2
    1c78:	604b      	str	r3, [r1, #4]

  // Initialize GCLK
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    1c7a:	4a0a      	ldr	r2, [pc, #40]	; (1ca4 <gclk_init+0x40>)
    1c7c:	6993      	ldr	r3, [r2, #24]
    1c7e:	2108      	movs	r1, #8
    1c80:	430b      	orrs	r3, r1
    1c82:	6193      	str	r3, [r2, #24]
  GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c84:	2201      	movs	r2, #1
    1c86:	4b08      	ldr	r3, [pc, #32]	; (1ca8 <gclk_init+0x44>)
    1c88:	701a      	strb	r2, [r3, #0]
  while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    1c8a:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <gclk_init+0x44>)
    1c8c:	781b      	ldrb	r3, [r3, #0]
    1c8e:	07db      	lsls	r3, r3, #31
    1c90:	d4fb      	bmi.n	1c8a <gclk_init+0x26>

  // SERCOM slow clock (Shared by all SERCOM)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1c92:	4a06      	ldr	r2, [pc, #24]	; (1cac <gclk_init+0x48>)
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <gclk_init+0x44>)
    1c96:	805a      	strh	r2, [r3, #2]
      GCLK_CLKCTRL_GEN(0) |
      GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_SLOW);
}
    1c98:	4770      	bx	lr
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	40000800 	.word	0x40000800
    1ca0:	41004000 	.word	0x41004000
    1ca4:	40000400 	.word	0x40000400
    1ca8:	40000c00 	.word	0x40000c00
    1cac:	00004013 	.word	0x00004013

00001cb0 <clock_init_crystal>:

  gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
  while (GCLK->STATUS.bit.SYNCBUSY);
}

void clock_init_crystal(uint8_t clk_system, uint8_t clk_32k) {
    1cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cb2:	0006      	movs	r6, r0
    1cb4:	000d      	movs	r5, r1
  gclk_init();
    1cb6:	4b16      	ldr	r3, [pc, #88]	; (1d10 <clock_init_crystal+0x60>)
    1cb8:	4798      	blx	r3

  SYSCTRL->XOSC32K.reg
    = SYSCTRL_XOSC32K_ENABLE
    1cba:	4c16      	ldr	r4, [pc, #88]	; (1d14 <clock_init_crystal+0x64>)
    1cbc:	236e      	movs	r3, #110	; 0x6e
    1cbe:	82a3      	strh	r3, [r4, #20]
    | SYSCTRL_XOSC32K_XTALEN
    | SYSCTRL_XOSC32K_EN32K
    | SYSCTRL_XOSC32K_AAMPEN
    | SYSCTRL_XOSC32K_RUNSTDBY;

  gclk_enable(clk_32k, GCLK_SOURCE_XOSC32K, 1);
    1cc0:	2201      	movs	r2, #1
    1cc2:	2105      	movs	r1, #5
    1cc4:	0028      	movs	r0, r5
    1cc6:	4f14      	ldr	r7, [pc, #80]	; (1d18 <clock_init_crystal+0x68>)
    1cc8:	47b8      	blx	r7

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
      GCLK_CLKCTRL_GEN(clk_32k) |
    1cca:	022d      	lsls	r5, r5, #8
    1ccc:	23f0      	movs	r3, #240	; 0xf0
    1cce:	011b      	lsls	r3, r3, #4
    1cd0:	401d      	ands	r5, r3
    1cd2:	2380      	movs	r3, #128	; 0x80
    1cd4:	01db      	lsls	r3, r3, #7
    1cd6:	431d      	orrs	r5, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1cd8:	4b10      	ldr	r3, [pc, #64]	; (1d1c <clock_init_crystal+0x6c>)
    1cda:	805d      	strh	r5, [r3, #2]
      GCLK_CLKCTRL_ID(SYSCTRL_GCLK_ID_DFLL48);

  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1cdc:	2302      	movs	r3, #2
    1cde:	84a3      	strh	r3, [r4, #36]	; 0x24
  dfll_wait_for_sync();
    1ce0:	4d0f      	ldr	r5, [pc, #60]	; (1d20 <clock_init_crystal+0x70>)
    1ce2:	47a8      	blx	r5
  SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    1ce4:	4b0f      	ldr	r3, [pc, #60]	; (1d24 <clock_init_crystal+0x74>)
    1ce6:	4798      	blx	r3
    1ce8:	62a0      	str	r0, [r4, #40]	; 0x28
  dfll_wait_for_sync();
    1cea:	47a8      	blx	r5
  SYSCTRL->DFLLMUL.reg
    = SYSCTRL_DFLLMUL_MUL(1465) // round(48000000 / 32768)
    1cec:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <clock_init_crystal+0x78>)
    1cee:	62e3      	str	r3, [r4, #44]	; 0x2c
    | SYSCTRL_DFLLMUL_CSTEP((0x1f / 4))
    | SYSCTRL_DFLLMUL_FSTEP((0xff / 4));
  dfll_wait_for_sync();
    1cf0:	47a8      	blx	r5
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE | SYSCTRL_DFLLCTRL_MODE;
    1cf2:	2306      	movs	r3, #6
    1cf4:	84a3      	strh	r3, [r4, #36]	; 0x24
  dfll_wait_for_sync();
    1cf6:	47a8      	blx	r5
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE | SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_ONDEMAND;
    1cf8:	2386      	movs	r3, #134	; 0x86
    1cfa:	84a3      	strh	r3, [r4, #36]	; 0x24

  gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1cfc:	2201      	movs	r2, #1
    1cfe:	2107      	movs	r1, #7
    1d00:	0030      	movs	r0, r6
    1d02:	47b8      	blx	r7
  while (GCLK->STATUS.bit.SYNCBUSY);
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <clock_init_crystal+0x6c>)
    1d06:	785b      	ldrb	r3, [r3, #1]
    1d08:	09db      	lsrs	r3, r3, #7
    1d0a:	d1fb      	bne.n	1d04 <clock_init_crystal+0x54>
}
    1d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00001c65 	.word	0x00001c65
    1d14:	40000800 	.word	0x40000800
    1d18:	00001c39 	.word	0x00001c39
    1d1c:	40000c00 	.word	0x40000c00
    1d20:	00001c29 	.word	0x00001c29
    1d24:	00001bf1 	.word	0x00001bf1
    1d28:	1c3f05b9 	.word	0x1c3f05b9

00001d2c <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1d2c:	f3ef 8305 	mrs	r3, IPSR
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
        while (1) {
			phantomISR = __get_IPSR();
    1d30:	4a01      	ldr	r2, [pc, #4]	; (1d38 <Dummy_Handler+0xc>)
    1d32:	6013      	str	r3, [r2, #0]
    1d34:	e7fa      	b.n	1d2c <Dummy_Handler>
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	20000044 	.word	0x20000044

00001d3c <Reset_Handler>:
{
    1d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d3e:	4a23      	ldr	r2, [pc, #140]	; (1dcc <Reset_Handler+0x90>)
    1d40:	4b23      	ldr	r3, [pc, #140]	; (1dd0 <Reset_Handler+0x94>)
    1d42:	429a      	cmp	r2, r3
    1d44:	d009      	beq.n	1d5a <Reset_Handler+0x1e>
    1d46:	4b22      	ldr	r3, [pc, #136]	; (1dd0 <Reset_Handler+0x94>)
    1d48:	4a20      	ldr	r2, [pc, #128]	; (1dcc <Reset_Handler+0x90>)
    1d4a:	e003      	b.n	1d54 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1d4c:	6811      	ldr	r1, [r2, #0]
    1d4e:	6019      	str	r1, [r3, #0]
    1d50:	3304      	adds	r3, #4
    1d52:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1d54:	491f      	ldr	r1, [pc, #124]	; (1dd4 <Reset_Handler+0x98>)
    1d56:	428b      	cmp	r3, r1
    1d58:	d3f8      	bcc.n	1d4c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1d5a:	4b1f      	ldr	r3, [pc, #124]	; (1dd8 <Reset_Handler+0x9c>)
    1d5c:	e002      	b.n	1d64 <Reset_Handler+0x28>
                *pDest++ = 0;
    1d5e:	2200      	movs	r2, #0
    1d60:	601a      	str	r2, [r3, #0]
    1d62:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1d64:	4a1d      	ldr	r2, [pc, #116]	; (1ddc <Reset_Handler+0xa0>)
    1d66:	4293      	cmp	r3, r2
    1d68:	d3f9      	bcc.n	1d5e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d6a:	4a1d      	ldr	r2, [pc, #116]	; (1de0 <Reset_Handler+0xa4>)
    1d6c:	21ff      	movs	r1, #255	; 0xff
    1d6e:	4b1d      	ldr	r3, [pc, #116]	; (1de4 <Reset_Handler+0xa8>)
    1d70:	438b      	bics	r3, r1
    1d72:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1d74:	39fd      	subs	r1, #253	; 0xfd
    1d76:	2390      	movs	r3, #144	; 0x90
    1d78:	005b      	lsls	r3, r3, #1
    1d7a:	4a1b      	ldr	r2, [pc, #108]	; (1de8 <Reset_Handler+0xac>)
    1d7c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1d7e:	4a1b      	ldr	r2, [pc, #108]	; (1dec <Reset_Handler+0xb0>)
    1d80:	78d3      	ldrb	r3, [r2, #3]
    1d82:	2503      	movs	r5, #3
    1d84:	43ab      	bics	r3, r5
    1d86:	2402      	movs	r4, #2
    1d88:	4323      	orrs	r3, r4
    1d8a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1d8c:	78d3      	ldrb	r3, [r2, #3]
    1d8e:	270c      	movs	r7, #12
    1d90:	43bb      	bics	r3, r7
    1d92:	2608      	movs	r6, #8
    1d94:	4333      	orrs	r3, r6
    1d96:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1d98:	4b15      	ldr	r3, [pc, #84]	; (1df0 <Reset_Handler+0xb4>)
    1d9a:	7b98      	ldrb	r0, [r3, #14]
    1d9c:	2230      	movs	r2, #48	; 0x30
    1d9e:	4390      	bics	r0, r2
    1da0:	2220      	movs	r2, #32
    1da2:	4310      	orrs	r0, r2
    1da4:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1da6:	7b99      	ldrb	r1, [r3, #14]
    1da8:	43b9      	bics	r1, r7
    1daa:	4331      	orrs	r1, r6
    1dac:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1dae:	7b9a      	ldrb	r2, [r3, #14]
    1db0:	43aa      	bics	r2, r5
    1db2:	4322      	orrs	r2, r4
    1db4:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1db6:	4a0f      	ldr	r2, [pc, #60]	; (1df4 <Reset_Handler+0xb8>)
    1db8:	6851      	ldr	r1, [r2, #4]
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	430b      	orrs	r3, r1
    1dbe:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1dc0:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <Reset_Handler+0xbc>)
    1dc2:	4798      	blx	r3
        main();
    1dc4:	4b0d      	ldr	r3, [pc, #52]	; (1dfc <Reset_Handler+0xc0>)
    1dc6:	4798      	blx	r3
    1dc8:	e7fe      	b.n	1dc8 <Reset_Handler+0x8c>
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00006590 	.word	0x00006590
    1dd0:	20000000 	.word	0x20000000
    1dd4:	20000218 	.word	0x20000218
    1dd8:	20000218 	.word	0x20000218
    1ddc:	20000dd0 	.word	0x20000dd0
    1de0:	e000ed00 	.word	0xe000ed00
    1de4:	00000000 	.word	0x00000000
    1de8:	41007000 	.word	0x41007000
    1dec:	41005000 	.word	0x41005000
    1df0:	41004800 	.word	0x41004800
    1df4:	41004000 	.word	0x41004000
    1df8:	000043f1 	.word	0x000043f1
    1dfc:	00002705 	.word	0x00002705

00001e00 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1e00:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1e02:	4a06      	ldr	r2, [pc, #24]	; (1e1c <_sbrk+0x1c>)
    1e04:	6812      	ldr	r2, [r2, #0]
    1e06:	2a00      	cmp	r2, #0
    1e08:	d004      	beq.n	1e14 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1e0a:	4a04      	ldr	r2, [pc, #16]	; (1e1c <_sbrk+0x1c>)
    1e0c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e0e:	18c3      	adds	r3, r0, r3
    1e10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1e12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1e14:	4902      	ldr	r1, [pc, #8]	; (1e20 <_sbrk+0x20>)
    1e16:	4a01      	ldr	r2, [pc, #4]	; (1e1c <_sbrk+0x1c>)
    1e18:	6011      	str	r1, [r2, #0]
    1e1a:	e7f6      	b.n	1e0a <_sbrk+0xa>
    1e1c:	20000234 	.word	0x20000234
    1e20:	20002dd0 	.word	0x20002dd0

00001e24 <configure_dma_resource>:
void setup_transfer_descriptor(DmacDescriptor *descriptor);
void add_descriptor(struct dma_resource *resource, DmacDescriptor* descriptor);
void start_transfer_job(struct dma_resource *resource, uint8_t* buffer_tx,int len);

void configure_dma_resource(struct dma_resource *resource)
{
    1e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e26:	46c6      	mov	lr, r8
    1e28:	b500      	push	{lr}
	uint8_t new_channel;
	
	/* Initialize clocks for DMA */
	PM->APBCMASK.reg |= PM_AHBMASK_DMAC;
    1e2a:	4b1b      	ldr	r3, [pc, #108]	; (1e98 <configure_dma_resource+0x74>)
    1e2c:	6a1a      	ldr	r2, [r3, #32]
    1e2e:	2120      	movs	r1, #32
    1e30:	430a      	orrs	r2, r1
    1e32:	621a      	str	r2, [r3, #32]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1e34:	69da      	ldr	r2, [r3, #28]
    1e36:	3910      	subs	r1, #16
    1e38:	430a      	orrs	r2, r1
    1e3a:	61da      	str	r2, [r3, #28]

	/* Perform a software reset before enable DMA controller */
	DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1e3c:	4b17      	ldr	r3, [pc, #92]	; (1e9c <configure_dma_resource+0x78>)
    1e3e:	881a      	ldrh	r2, [r3, #0]
    1e40:	2502      	movs	r5, #2
    1e42:	43aa      	bics	r2, r5
    1e44:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    1e46:	390f      	subs	r1, #15
    1e48:	8019      	strh	r1, [r3, #0]

	/* Setup descriptor base address and write back section base
	* address */
	DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    1e4a:	4a15      	ldr	r2, [pc, #84]	; (1ea0 <configure_dma_resource+0x7c>)
    1e4c:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    1e4e:	4a15      	ldr	r2, [pc, #84]	; (1ea4 <configure_dma_resource+0x80>)
    1e50:	639a      	str	r2, [r3, #56]	; 0x38

	/* Enable all priority level at the same time */
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1e52:	4a15      	ldr	r2, [pc, #84]	; (1ea8 <configure_dma_resource+0x84>)
    1e54:	801a      	strh	r2, [r3, #0]
	
	new_channel = NEW_CHANNEL;
	
	/* Set the channel */
	resource->channel_id = new_channel;
    1e56:	2400      	movs	r4, #0
    1e58:	7004      	strb	r4, [r0, #0]
	
	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1e5a:	263f      	movs	r6, #63	; 0x3f
    1e5c:	559c      	strb	r4, [r3, r6]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    1e5e:	2240      	movs	r2, #64	; 0x40
    1e60:	5c9f      	ldrb	r7, [r3, r2]
    1e62:	43af      	bics	r7, r5
    1e64:	549f      	strb	r7, [r3, r2]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    1e66:	2701      	movs	r7, #1
    1e68:	549f      	strb	r7, [r3, r2]
	
	uint32_t temp_CHCTRLB_reg;

	/** Select the DMA channel and clear software trigger */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1e6a:	7807      	ldrb	r7, [r0, #0]
    1e6c:	3a31      	subs	r2, #49	; 0x31
    1e6e:	4690      	mov	r8, r2
    1e70:	4017      	ands	r7, r2
    1e72:	559f      	strb	r7, [r3, r6]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 <<resource->channel_id));
    1e74:	691f      	ldr	r7, [r3, #16]
    1e76:	7802      	ldrb	r2, [r0, #0]
    1e78:	4091      	lsls	r1, r2
    1e7a:	438f      	bics	r7, r1
    1e7c:	611f      	str	r7, [r3, #16]
	DMAC_CHCTRLB_TRIGSRC(SERCOM1_DMAC_ID_TX) | //ready to transmit
	//DMAC_CHCTRLB_TRIGACT(DMAC_CHCTRLB_TRIGACT_TRANSACTION_Val);
	DMAC_CHCTRLB_TRIGACT(DMAC_CHCTRLB_TRIGACT_BEAT_Val);

	/* Write config to CTRLB register */
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    1e7e:	490b      	ldr	r1, [pc, #44]	; (1eac <configure_dma_resource+0x88>)
    1e80:	6459      	str	r1, [r3, #68]	; 0x44
	NVIC_SetPriority(DMAC_IRQn, 2);
	NVIC_EnableIRQ(DMAC_IRQn);
#endif

	/* Set the interrupt flag */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1e82:	7801      	ldrb	r1, [r0, #0]
    1e84:	4642      	mov	r2, r8
    1e86:	400a      	ands	r2, r1
    1e88:	559a      	strb	r2, [r3, r6]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & (1UL << DMA_CALLBACK_TRANSFER_DONE));
    1e8a:	224d      	movs	r2, #77	; 0x4d
    1e8c:	549d      	strb	r5, [r3, r2]
	
	resource->descriptor = NULL;
    1e8e:	6184      	str	r4, [r0, #24]
	
	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

}
    1e90:	bc04      	pop	{r2}
    1e92:	4690      	mov	r8, r2
    1e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	40000400 	.word	0x40000400
    1e9c:	41004800 	.word	0x41004800
    1ea0:	20000268 	.word	0x20000268
    1ea4:	20000238 	.word	0x20000238
    1ea8:	00000f02 	.word	0x00000f02
    1eac:	00800400 	.word	0x00800400

00001eb0 <setup_transfer_descriptor>:

void setup_transfer_descriptor(DmacDescriptor *descriptor)
{
	/* Set descriptor as valid */
	descriptor->BTCTRL.bit.VALID = true;
    1eb0:	8803      	ldrh	r3, [r0, #0]
    1eb2:	2201      	movs	r2, #1
    1eb4:	4313      	orrs	r3, r2
    1eb6:	8003      	strh	r3, [r0, #0]
	/* Disable event output */
	descriptor->BTCTRL.bit.EVOSEL = 0;
    1eb8:	8803      	ldrh	r3, [r0, #0]
    1eba:	2206      	movs	r2, #6
    1ebc:	4393      	bics	r3, r2
    1ebe:	8003      	strh	r3, [r0, #0]
	/* No block action */
	descriptor->BTCTRL.bit.BLOCKACT = 0;
    1ec0:	8803      	ldrh	r3, [r0, #0]
    1ec2:	3212      	adds	r2, #18
    1ec4:	4393      	bics	r3, r2
    1ec6:	8003      	strh	r3, [r0, #0]
	/* Set beat size to byte */
	descriptor->BTCTRL.bit.BEATSIZE = 0;
    1ec8:	8803      	ldrh	r3, [r0, #0]
    1eca:	4a0c      	ldr	r2, [pc, #48]	; (1efc <setup_transfer_descriptor+0x4c>)
    1ecc:	4013      	ands	r3, r2
    1ece:	8003      	strh	r3, [r0, #0]
	/* Enable source increment */
	descriptor->BTCTRL.bit.SRCINC = true;
    1ed0:	8802      	ldrh	r2, [r0, #0]
    1ed2:	2380      	movs	r3, #128	; 0x80
    1ed4:	00db      	lsls	r3, r3, #3
    1ed6:	4313      	orrs	r3, r2
    1ed8:	8003      	strh	r3, [r0, #0]
	/* Disable destination increment */
	descriptor->BTCTRL.bit.DSTINC = false;
    1eda:	8803      	ldrh	r3, [r0, #0]
    1edc:	4a08      	ldr	r2, [pc, #32]	; (1f00 <setup_transfer_descriptor+0x50>)
    1ede:	4013      	ands	r3, r2
    1ee0:	8003      	strh	r3, [r0, #0]
	/* Step size is applied to the destination address */
	descriptor->BTCTRL.bit.STEPSEL = 0;
    1ee2:	8803      	ldrh	r3, [r0, #0]
    1ee4:	4a07      	ldr	r2, [pc, #28]	; (1f04 <setup_transfer_descriptor+0x54>)
    1ee6:	4013      	ands	r3, r2
    1ee8:	8003      	strh	r3, [r0, #0]
	/* Address increment is beat size multiplied by 1*/
	descriptor->BTCTRL.bit.STEPSIZE = 0;
    1eea:	8803      	ldrh	r3, [r0, #0]
    1eec:	04db      	lsls	r3, r3, #19
    1eee:	0cdb      	lsrs	r3, r3, #19
    1ef0:	8003      	strh	r3, [r0, #0]
	/* Set transfer size */
	//descriptor->BTCNT.reg = len/sizeof(uint8_t);
	/* Source address*/
	//descriptor->SRCADDR.reg = (uint32_t)buffer_tx + len;
	/* Destination address*/
	descriptor->DSTADDR.reg = (uint32_t)(&SERCOM1->SPI.DATA.reg);
    1ef2:	4b05      	ldr	r3, [pc, #20]	; (1f08 <setup_transfer_descriptor+0x58>)
    1ef4:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = 0;
    1ef6:	2300      	movs	r3, #0
    1ef8:	60c3      	str	r3, [r0, #12]
}
    1efa:	4770      	bx	lr
    1efc:	fffffcff 	.word	0xfffffcff
    1f00:	fffff7ff 	.word	0xfffff7ff
    1f04:	ffffefff 	.word	0xffffefff
    1f08:	42000c28 	.word	0x42000c28

00001f0c <add_descriptor>:

void add_descriptor(struct dma_resource *resource, DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;
    1f0c:	6983      	ldr	r3, [r0, #24]

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d102      	bne.n	1f18 <add_descriptor+0xc>
		resource->descriptor = descriptor;
    1f12:	6181      	str	r1, [r0, #24]
    1f14:	e004      	b.n	1f20 <add_descriptor+0x14>
		} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    1f16:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    1f18:	68da      	ldr	r2, [r3, #12]
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d1fb      	bne.n	1f16 <add_descriptor+0xa>
		}
		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    1f1e:	60d9      	str	r1, [r3, #12]
	}

}
    1f20:	4770      	bx	lr
	...

00001f24 <start_transfer_job>:

void start_transfer_job(struct dma_resource *resource, uint8_t* buffer_tx,int len)
{		
    1f24:	b510      	push	{r4, lr}
    1f26:	0004      	movs	r4, r0
	/* Set transfer size */
	resource->descriptor->BTCNT.reg = len;
    1f28:	b293      	uxth	r3, r2
    1f2a:	6980      	ldr	r0, [r0, #24]
    1f2c:	8043      	strh	r3, [r0, #2]
	/* Source address*/
	resource->descriptor->SRCADDR.reg = (uint32_t)buffer_tx + len;
    1f2e:	69a3      	ldr	r3, [r4, #24]
    1f30:	1852      	adds	r2, r2, r1
    1f32:	605a      	str	r2, [r3, #4]
	
	/* Set channel x descriptor 0 to the descriptor base address */
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    1f34:	7823      	ldrb	r3, [r4, #0]
    1f36:	011b      	lsls	r3, r3, #4
    1f38:	4806      	ldr	r0, [pc, #24]	; (1f54 <start_transfer_job+0x30>)
    1f3a:	1818      	adds	r0, r3, r0
    1f3c:	69a1      	ldr	r1, [r4, #24]
    1f3e:	2210      	movs	r2, #16
    1f40:	4b05      	ldr	r3, [pc, #20]	; (1f58 <start_transfer_job+0x34>)
    1f42:	4798      	blx	r3
	sizeof(DmacDescriptor));

	/* Enable the transfer channel */
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1f44:	4905      	ldr	r1, [pc, #20]	; (1f5c <start_transfer_job+0x38>)
    1f46:	2240      	movs	r2, #64	; 0x40
    1f48:	5c8b      	ldrb	r3, [r1, r2]
    1f4a:	2002      	movs	r0, #2
    1f4c:	4303      	orrs	r3, r0
    1f4e:	b2db      	uxtb	r3, r3
    1f50:	548b      	strb	r3, [r1, r2]
}
    1f52:	bd10      	pop	{r4, pc}
    1f54:	20000268 	.word	0x20000268
    1f58:	00004461 	.word	0x00004461
    1f5c:	41004800 	.word	0x41004800

00001f60 <DMA_init>:

void DMA_init(void)
{
    1f60:	b570      	push	{r4, r5, r6, lr}
	/* Setup DMA resource */
	configure_dma_resource(&DMA_resource);
    1f62:	4c06      	ldr	r4, [pc, #24]	; (1f7c <DMA_init+0x1c>)
    1f64:	0020      	movs	r0, r4
    1f66:	4b06      	ldr	r3, [pc, #24]	; (1f80 <DMA_init+0x20>)
    1f68:	4798      	blx	r3
	
	/* Setup transfer description */
	setup_transfer_descriptor(&DMA_descriptor);
    1f6a:	4d06      	ldr	r5, [pc, #24]	; (1f84 <DMA_init+0x24>)
    1f6c:	0028      	movs	r0, r5
    1f6e:	4b06      	ldr	r3, [pc, #24]	; (1f88 <DMA_init+0x28>)
    1f70:	4798      	blx	r3
	
	/*Add DMA resource descriptor*/
	add_descriptor(&DMA_resource, &DMA_descriptor);
    1f72:	0029      	movs	r1, r5
    1f74:	0020      	movs	r0, r4
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <DMA_init+0x2c>)
    1f78:	4798      	blx	r3
}
    1f7a:	bd70      	pop	{r4, r5, r6, pc}
    1f7c:	20000560 	.word	0x20000560
    1f80:	00001e25 	.word	0x00001e25
    1f84:	20000550 	.word	0x20000550
    1f88:	00001eb1 	.word	0x00001eb1
    1f8c:	00001f0d 	.word	0x00001f0d

00001f90 <DMA_start_transfer>:

void DMA_start_transfer(uint8_t* buffer_tx, int len){
    1f90:	b510      	push	{r4, lr}
    1f92:	000a      	movs	r2, r1
	
	start_transfer_job(&DMA_resource, buffer_tx, len);
    1f94:	0001      	movs	r1, r0
    1f96:	4802      	ldr	r0, [pc, #8]	; (1fa0 <DMA_start_transfer+0x10>)
    1f98:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <DMA_start_transfer+0x14>)
    1f9a:	4798      	blx	r3
	
}
    1f9c:	bd10      	pop	{r4, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	20000560 	.word	0x20000560
    1fa4:	00001f25 	.word	0x00001f25

00001fa8 <DMA_wait_complete>:

void DMA_wait_complete(void){
	while(DMAC->INTSTATUS.bit.CHINT0 == 0);
    1fa8:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <DMA_wait_complete+0x1c>)
    1faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1fac:	07db      	lsls	r3, r3, #31
    1fae:	d5fb      	bpl.n	1fa8 <DMA_wait_complete>
	//while(DMAC->CHINTFLAG.bit.TCMPL == 0);
	
	DMAC->CHINTFLAG.bit.TCMPL = 1; // Reset interrupt flags
    1fb0:	4b04      	ldr	r3, [pc, #16]	; (1fc4 <DMA_wait_complete+0x1c>)
    1fb2:	214e      	movs	r1, #78	; 0x4e
    1fb4:	5c5a      	ldrb	r2, [r3, r1]
    1fb6:	2002      	movs	r0, #2
    1fb8:	4302      	orrs	r2, r0
    1fba:	545a      	strb	r2, [r3, r1]
	
	DMAC->CHCTRLA.reg = 0; // Disable channel
    1fbc:	2100      	movs	r1, #0
    1fbe:	2240      	movs	r2, #64	; 0x40
    1fc0:	5499      	strb	r1, [r3, r2]
}
    1fc2:	4770      	bx	lr
    1fc4:	41004800 	.word	0x41004800

00001fc8 <flash_init>:



void flash_init(void)
{
	PM->APBBMASK.reg |= PM_APBBMASK_NVMCTRL;
    1fc8:	4a0a      	ldr	r2, [pc, #40]	; (1ff4 <flash_init+0x2c>)
    1fca:	69d3      	ldr	r3, [r2, #28]
    1fcc:	2104      	movs	r1, #4
    1fce:	430b      	orrs	r3, r1
    1fd0:	61d3      	str	r3, [r2, #28]
	
	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    1fd2:	2220      	movs	r2, #32
    1fd4:	32ff      	adds	r2, #255	; 0xff
    1fd6:	4b08      	ldr	r3, [pc, #32]	; (1ff8 <flash_init+0x30>)
    1fd8:	831a      	strh	r2, [r3, #24]
	
	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    1fda:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <flash_init+0x30>)
    1fdc:	7d1b      	ldrb	r3, [r3, #20]
    1fde:	07db      	lsls	r3, r3, #31
    1fe0:	d5fb      	bpl.n	1fda <flash_init+0x12>
	
	/* Writing configuration to the CTRLB register */
	NVMCTRL->CTRLB.reg = NVMCTRL_CTRLB_RWS(NVMCTRL->CTRLB.bit.RWS) ;
    1fe2:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <flash_init+0x30>)
    1fe4:	6853      	ldr	r3, [r2, #4]
    1fe6:	06db      	lsls	r3, r3, #27
    1fe8:	0f1b      	lsrs	r3, r3, #28
    1fea:	005b      	lsls	r3, r3, #1
    1fec:	6053      	str	r3, [r2, #4]
	
	/* Initialize the internal device struct */

	flash_dev.page_size         = (8 << NVMCTRL->PARAM.bit.PSZ);
    1fee:	6893      	ldr	r3, [r2, #8]

	flash_dev.number_of_pages   = NVMCTRL->PARAM.bit.NVMP;
    1ff0:	6893      	ldr	r3, [r2, #8]

	flash_dev.manual_page_write = true;	
}
    1ff2:	4770      	bx	lr
    1ff4:	40000400 	.word	0x40000400
    1ff8:	41004000 	.word	0x41004000

00001ffc <flash_read_buffer>:

uint8_t *const buffer,

uint16_t length)

{
    1ffc:	b530      	push	{r4, r5, lr}

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    1ffe:	4b0e      	ldr	r3, [pc, #56]	; (2038 <STACK_SIZE+0x38>)
    2000:	7d1b      	ldrb	r3, [r3, #20]
    2002:	07db      	lsls	r3, r3, #31
    2004:	d5fb      	bpl.n	1ffe <flash_read_buffer+0x2>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2006:	2420      	movs	r4, #32
    2008:	34ff      	adds	r4, #255	; 0xff
    200a:	4b0b      	ldr	r3, [pc, #44]	; (2038 <STACK_SIZE+0x38>)
    200c:	831c      	strh	r4, [r3, #24]



	uint32_t page_address = source_address / 2;
    200e:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy

	 * to ensure alignment */

	for (uint16_t i = 0; i < length; i += 2) {
    2010:	2300      	movs	r3, #0
    2012:	e002      	b.n	201a <STACK_SIZE+0x1a>
    2014:	3302      	adds	r3, #2
    2016:	b29b      	uxth	r3, r3

		/* Fetch next 16-bit chunk from the NVM memory space */

		uint16_t data = NVM_MEMORY[page_address++];
    2018:	0020      	movs	r0, r4
	for (uint16_t i = 0; i < length; i += 2) {
    201a:	4293      	cmp	r3, r2
    201c:	d20b      	bcs.n	2036 <STACK_SIZE+0x36>
		uint16_t data = NVM_MEMORY[page_address++];
    201e:	1c44      	adds	r4, r0, #1
    2020:	0040      	lsls	r0, r0, #1
    2022:	8800      	ldrh	r0, [r0, #0]
    2024:	b280      	uxth	r0, r0



		/* Copy first byte of the 16-bit chunk to the destination buffer */

		buffer[i] = (data & 0xFF);
    2026:	54c8      	strb	r0, [r1, r3]

		/* If we are not at the end of a read request with an odd byte count,

		 * store the next byte of data as well */

		if (i < (length - 1)) {
    2028:	1e55      	subs	r5, r2, #1
    202a:	42ab      	cmp	r3, r5
    202c:	daf2      	bge.n	2014 <STACK_SIZE+0x14>

			buffer[i + 1] = (data >> 8);
    202e:	1c5d      	adds	r5, r3, #1
    2030:	0a00      	lsrs	r0, r0, #8
    2032:	5548      	strb	r0, [r1, r5]
    2034:	e7ee      	b.n	2014 <STACK_SIZE+0x14>

		}

	}	

}
    2036:	bd30      	pop	{r4, r5, pc}
    2038:	41004000 	.word	0x41004000

0000203c <flash_erase_row>:

{

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    203c:	4b06      	ldr	r3, [pc, #24]	; (2058 <flash_erase_row+0x1c>)
    203e:	7d1b      	ldrb	r3, [r3, #20]
    2040:	07db      	lsls	r3, r3, #31
    2042:	d5fb      	bpl.n	203c <flash_erase_row>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2044:	4b04      	ldr	r3, [pc, #16]	; (2058 <flash_erase_row+0x1c>)
    2046:	2220      	movs	r2, #32
    2048:	32ff      	adds	r2, #255	; 0xff
    204a:	831a      	strh	r2, [r3, #24]



	/* Set address and command */

	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    204c:	0880      	lsrs	r0, r0, #2
    204e:	0040      	lsls	r0, r0, #1
    2050:	61d8      	str	r0, [r3, #28]

	

	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    2052:	4a02      	ldr	r2, [pc, #8]	; (205c <flash_erase_row+0x20>)
    2054:	801a      	strh	r2, [r3, #0]

}
    2056:	4770      	bx	lr
    2058:	41004000 	.word	0x41004000
    205c:	ffffa502 	.word	0xffffa502

00002060 <flash_write_buffer>:

const uint8_t *buffer,

uint16_t length)

{
    2060:	b570      	push	{r4, r5, r6, lr}

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2062:	4b12      	ldr	r3, [pc, #72]	; (20ac <flash_write_buffer+0x4c>)
    2064:	7d1b      	ldrb	r3, [r3, #20]
    2066:	07db      	lsls	r3, r3, #31
    2068:	d5fb      	bpl.n	2062 <flash_write_buffer+0x2>

		

	/* Erase the page buffer before buffering new data */

	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
    206a:	4c11      	ldr	r4, [pc, #68]	; (20b0 <flash_write_buffer+0x50>)
    206c:	4b0f      	ldr	r3, [pc, #60]	; (20ac <flash_write_buffer+0x4c>)
    206e:	801c      	strh	r4, [r3, #0]



	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2070:	4b0e      	ldr	r3, [pc, #56]	; (20ac <flash_write_buffer+0x4c>)
    2072:	7d1b      	ldrb	r3, [r3, #20]
    2074:	07db      	lsls	r3, r3, #31
    2076:	d5fb      	bpl.n	2070 <flash_write_buffer+0x10>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2078:	2420      	movs	r4, #32
    207a:	34ff      	adds	r4, #255	; 0xff
    207c:	4b0b      	ldr	r3, [pc, #44]	; (20ac <flash_write_buffer+0x4c>)
    207e:	831c      	strh	r4, [r3, #24]



	uint32_t nvm_address = destination_address / 2;
    2080:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy

	 * to ensure alignment */

	for (uint16_t i = 0; i < length; i += 2) {
    2082:	2300      	movs	r3, #0
    2084:	e004      	b.n	2090 <flash_write_buffer+0x30>



		/* Store next 16-bit chunk to the NVM memory space */

		NVM_MEMORY[nvm_address++] = data;
    2086:	0045      	lsls	r5, r0, #1
    2088:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    208a:	3302      	adds	r3, #2
    208c:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
    208e:	3001      	adds	r0, #1
	for (uint16_t i = 0; i < length; i += 2) {
    2090:	4293      	cmp	r3, r2
    2092:	d209      	bcs.n	20a8 <flash_write_buffer+0x48>
		data = buffer[i];
    2094:	5ccd      	ldrb	r5, [r1, r3]
    2096:	b2ac      	uxth	r4, r5
		if (i < (length - 1)) {
    2098:	1e56      	subs	r6, r2, #1
    209a:	42b3      	cmp	r3, r6
    209c:	daf3      	bge.n	2086 <flash_write_buffer+0x26>
			data |= (buffer[i + 1] << 8);
    209e:	18cc      	adds	r4, r1, r3
    20a0:	7864      	ldrb	r4, [r4, #1]
    20a2:	0224      	lsls	r4, r4, #8
    20a4:	432c      	orrs	r4, r5
    20a6:	e7ee      	b.n	2086 <flash_write_buffer+0x26>

	}

}
    20a8:	bd70      	pop	{r4, r5, r6, pc}
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	41004000 	.word	0x41004000
    20b0:	ffffa544 	.word	0xffffa544

000020b4 <enableExtInt>:
uint32_t callbackAudioSample(uint32_t); // Define this callback in application.c
 
bool extIntEnable; 

void enableExtInt(void) {
	extIntEnable = true;
    20b4:	2201      	movs	r2, #1
    20b6:	4b04      	ldr	r3, [pc, #16]	; (20c8 <enableExtInt+0x14>)
    20b8:	701a      	strb	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    20ba:	4b04      	ldr	r3, [pc, #16]	; (20cc <enableExtInt+0x18>)
    20bc:	320f      	adds	r2, #15
    20be:	21c0      	movs	r1, #192	; 0xc0
    20c0:	0049      	lsls	r1, r1, #1
    20c2:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    20c4:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);
	//EIC->CTRL.bit.ENABLE = 1; 
}
    20c6:	4770      	bx	lr
    20c8:	20000a14 	.word	0x20000a14
    20cc:	e000e100 	.word	0xe000e100

000020d0 <disableExtInt>:

void disableExtInt(void){	
	extIntEnable = false;
    20d0:	2200      	movs	r2, #0
    20d2:	4b05      	ldr	r3, [pc, #20]	; (20e8 <disableExtInt+0x18>)
    20d4:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    20d6:	4b05      	ldr	r3, [pc, #20]	; (20ec <disableExtInt+0x1c>)
    20d8:	3210      	adds	r2, #16
    20da:	21c0      	movs	r1, #192	; 0xc0
    20dc:	0049      	lsls	r1, r1, #1
    20de:	505a      	str	r2, [r3, r1]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    20e0:	3901      	subs	r1, #1
    20e2:	39ff      	subs	r1, #255	; 0xff
    20e4:	505a      	str	r2, [r3, r1]
	//EIC->CTRL.bit.ENABLE = 0; 
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_DisableIRQ(EIC_IRQn);
	//EIC->INTFLAG.bit.EXTINT5 = 1;
}
    20e6:	4770      	bx	lr
    20e8:	20000a14 	.word	0x20000a14
    20ec:	e000e100 	.word	0xe000e100

000020f0 <enableClockGate>:
		.bit.OE = 1,
		//.bit.OE = 0,
		.bit.DIVSEL = 0,
		.bit.RUNSTDBY = 1
	};
	GCLK->GENCTRL = gentrcl;
    20f0:	4b02      	ldr	r3, [pc, #8]	; (20fc <enableClockGate+0xc>)
    20f2:	681a      	ldr	r2, [r3, #0]
    20f4:	4b02      	ldr	r3, [pc, #8]	; (2100 <enableClockGate+0x10>)
    20f6:	605a      	str	r2, [r3, #4]

void enableClockGate(void)
{
	clockEnable();
}
    20f8:	4770      	bx	lr
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	00006150 	.word	0x00006150
    2100:	40000c00 	.word	0x40000c00

00002104 <getMCUint>:
{
	bool value;
	
#ifdef PCB_V2	
	// On PA03
	value = REG_PORT_IN0 & (0x0001 << 3);
    2104:	4b03      	ldr	r3, [pc, #12]	; (2114 <getMCUint+0x10>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	2008      	movs	r0, #8
    210a:	4018      	ands	r0, r3
    210c:	1e43      	subs	r3, r0, #1
    210e:	4198      	sbcs	r0, r3
    2110:	b2c0      	uxtb	r0, r0
	// On PA05
	value = REG_PORT_IN0 & (0x0001 << 5);
#endif

	return value;
}
    2112:	4770      	bx	lr
    2114:	41004420 	.word	0x41004420

00002118 <toggleLED>:

void toggleLED(void)
{
#ifdef PCB_V2
	REG_PORT_OUTTGL1 = PORT_PB03;
    2118:	2208      	movs	r2, #8
    211a:	4b01      	ldr	r3, [pc, #4]	; (2120 <toggleLED+0x8>)
    211c:	601a      	str	r2, [r3, #0]
#endif
}
    211e:	4770      	bx	lr
    2120:	4100449c 	.word	0x4100449c

00002124 <disableClockGate>:
		.bit.OOV = 0,
		.bit.OE = 0,
		.bit.DIVSEL = 0,
		.bit.RUNSTDBY = 1
	};
	GCLK->GENCTRL = gentrcl;
    2124:	4b02      	ldr	r3, [pc, #8]	; (2130 <disableClockGate+0xc>)
    2126:	685a      	ldr	r2, [r3, #4]
    2128:	4b02      	ldr	r3, [pc, #8]	; (2134 <disableClockGate+0x10>)
    212a:	605a      	str	r2, [r3, #4]


void disableClockGate(void)
{
	clockDisable();
}
    212c:	4770      	bx	lr
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00006150 	.word	0x00006150
    2134:	40000c00 	.word	0x40000c00

00002138 <startSPI>:
    2138:	2110      	movs	r1, #16
    213a:	2380      	movs	r3, #128	; 0x80
    213c:	4a03      	ldr	r2, [pc, #12]	; (214c <startSPI+0x14>)
    213e:	50d1      	str	r1, [r2, r3]
	REG_PORT_OUTSET1 = PORT_PB08;
}

inline void spiStart1()
{
	REG_PORT_OUTCLR1 = PORT_PB08;
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	0052      	lsls	r2, r2, #1
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <startSPI+0x18>)
    2146:	601a      	str	r2, [r3, #0]
#ifdef PCB_V2	
	spiStart1();
#else
	spiStart0();
#endif
}
    2148:	4770      	bx	lr
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	e000e100 	.word	0xe000e100
    2150:	41004494 	.word	0x41004494

00002154 <sendSPI>:
}

inline uint8_t spiSend1(uint8_t data)
{
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    2154:	4b06      	ldr	r3, [pc, #24]	; (2170 <sendSPI+0x1c>)
    2156:	7e1b      	ldrb	r3, [r3, #24]
    2158:	07db      	lsls	r3, r3, #31
    215a:	d5fb      	bpl.n	2154 <sendSPI>
	SERCOM1->SPI.DATA.reg = data;
    215c:	4b04      	ldr	r3, [pc, #16]	; (2170 <sendSPI+0x1c>)
    215e:	6298      	str	r0, [r3, #40]	; 0x28
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <sendSPI+0x1c>)
    2162:	7e1b      	ldrb	r3, [r3, #24]
    2164:	075b      	lsls	r3, r3, #29
    2166:	d5fb      	bpl.n	2160 <sendSPI+0xc>
	return SERCOM1->SPI.DATA.reg;
    2168:	4b01      	ldr	r3, [pc, #4]	; (2170 <sendSPI+0x1c>)
    216a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    216c:	b2c0      	uxtb	r0, r0
#ifdef PCB_V2
	return spiSend1(cmd);
#else
	return spiSend0(cmd);
#endif
}
    216e:	4770      	bx	lr
    2170:	42000c00 	.word	0x42000c00

00002174 <pushSPI>:

void pushSPI(unsigned char *data, unsigned char numdata){
    2174:	b510      	push	{r4, lr}
}

inline void spiPushMulti1(uint8_t *data, uint8_t numdata)
{
#ifdef USE_DMA
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);	
    2176:	4b0c      	ldr	r3, [pc, #48]	; (21a8 <pushSPI+0x34>)
    2178:	7e1b      	ldrb	r3, [r3, #24]
    217a:	07db      	lsls	r3, r3, #31
    217c:	d5fb      	bpl.n	2176 <pushSPI+0x2>
	DMA_start_transfer(data, numdata );
    217e:	4b0b      	ldr	r3, [pc, #44]	; (21ac <pushSPI+0x38>)
    2180:	4798      	blx	r3
	DMA_wait_complete();	
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <pushSPI+0x3c>)
    2184:	4798      	blx	r3
		
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);	
    2186:	4b08      	ldr	r3, [pc, #32]	; (21a8 <pushSPI+0x34>)
    2188:	7e1b      	ldrb	r3, [r3, #24]
    218a:	07db      	lsls	r3, r3, #31
    218c:	d5fb      	bpl.n	2186 <pushSPI+0x12>
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    218e:	4b06      	ldr	r3, [pc, #24]	; (21a8 <pushSPI+0x34>)
    2190:	7e1b      	ldrb	r3, [r3, #24]
    2192:	075b      	lsls	r3, r3, #29
    2194:	d5fb      	bpl.n	218e <pushSPI+0x1a>
	SERCOM1->SPI.DATA.reg;		
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <pushSPI+0x34>)
    2198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SERCOM1->SPI.STATUS.bit.BUFOVF = 1; // Reset buffer overflow	
    219a:	8b5a      	ldrh	r2, [r3, #26]
    219c:	2104      	movs	r1, #4
    219e:	430a      	orrs	r2, r1
    21a0:	835a      	strh	r2, [r3, #26]
	SERCOM1->SPI.DATA.reg;
    21a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SERCOM1->SPI.DATA.reg;
    21a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	spiPushMulti1(data, numdata);
#else
	spiPushMulti0(data, numdata);
#endif
	
}
    21a6:	bd10      	pop	{r4, pc}
    21a8:	42000c00 	.word	0x42000c00
    21ac:	00001f91 	.word	0x00001f91
    21b0:	00001fa9 	.word	0x00001fa9

000021b4 <pullSPI>:

void pullSPI(unsigned char *data, unsigned char numdata){
    21b4:	b510      	push	{r4, lr}
	return SERCOM1->SPI.DATA.reg;
}

inline void spiPullMulti1(uint8_t *data, uint8_t numdata)
{
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    21b6:	4b0f      	ldr	r3, [pc, #60]	; (21f4 <pullSPI+0x40>)
    21b8:	7e1b      	ldrb	r3, [r3, #24]
    21ba:	07db      	lsls	r3, r3, #31
    21bc:	d5fb      	bpl.n	21b6 <pullSPI+0x2>
	SERCOM1->SPI.DATA.reg = 0x00;
    21be:	2200      	movs	r2, #0
    21c0:	4b0c      	ldr	r3, [pc, #48]	; (21f4 <pullSPI+0x40>)
    21c2:	629a      	str	r2, [r3, #40]	; 0x28
    21c4:	e00b      	b.n	21de <pullSPI+0x2a>
	for(uint8_t i=0;i<numdata-1;i++)
	{		
		while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    21c6:	4b0b      	ldr	r3, [pc, #44]	; (21f4 <pullSPI+0x40>)
    21c8:	7e1b      	ldrb	r3, [r3, #24]
    21ca:	075b      	lsls	r3, r3, #29
    21cc:	d5fb      	bpl.n	21c6 <pullSPI+0x12>
		SERCOM1->SPI.DATA.reg = 0x00;
    21ce:	4b09      	ldr	r3, [pc, #36]	; (21f4 <pullSPI+0x40>)
    21d0:	2400      	movs	r4, #0
    21d2:	629c      	str	r4, [r3, #40]	; 0x28
		*data = SERCOM1->SPI.DATA.reg; data++;
    21d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21d6:	7003      	strb	r3, [r0, #0]
    21d8:	3001      	adds	r0, #1
	for(uint8_t i=0;i<numdata-1;i++)
    21da:	3201      	adds	r2, #1
    21dc:	b2d2      	uxtb	r2, r2
    21de:	1e4b      	subs	r3, r1, #1
    21e0:	429a      	cmp	r2, r3
    21e2:	dbf0      	blt.n	21c6 <pullSPI+0x12>
	}
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    21e4:	4b03      	ldr	r3, [pc, #12]	; (21f4 <pullSPI+0x40>)
    21e6:	7e1b      	ldrb	r3, [r3, #24]
    21e8:	075b      	lsls	r3, r3, #29
    21ea:	d5fb      	bpl.n	21e4 <pullSPI+0x30>
	*data = SERCOM1->SPI.DATA.reg;
    21ec:	4b01      	ldr	r3, [pc, #4]	; (21f4 <pullSPI+0x40>)
    21ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21f0:	7003      	strb	r3, [r0, #0]
#ifdef PCB_V2
	spiPullMulti1(data, numdata);
#else
	spiPullMulti0(data, numdata);
#endif
}
    21f2:	bd10      	pop	{r4, pc}
    21f4:	42000c00 	.word	0x42000c00

000021f8 <stopSPI>:
}

inline void spiStop1()
{
	REG_PORT_OUTSET1 = PORT_PB08;
    21f8:	2280      	movs	r2, #128	; 0x80
    21fa:	0052      	lsls	r2, r2, #1
    21fc:	4b04      	ldr	r3, [pc, #16]	; (2210 <stopSPI+0x18>)
    21fe:	601a      	str	r2, [r3, #0]
#else
	spiStop0();
#endif

	//__enable_irq();
	if(extIntEnable)
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <stopSPI+0x1c>)
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	2b00      	cmp	r3, #0
    2206:	d002      	beq.n	220e <stopSPI+0x16>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2208:	3af0      	subs	r2, #240	; 0xf0
    220a:	4b03      	ldr	r3, [pc, #12]	; (2218 <stopSPI+0x20>)
    220c:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(EIC_IRQn);
	//NVIC->ISER[0] = interrupts;
}
    220e:	4770      	bx	lr
    2210:	41004498 	.word	0x41004498
    2214:	20000a14 	.word	0x20000a14
    2218:	e000e100 	.word	0xe000e100

0000221c <resetRadio>:

void resetRadio(void)
{
	// Pull SPARK_RST low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB02;
    221c:	2304      	movs	r3, #4
    221e:	4a0b      	ldr	r2, [pc, #44]	; (224c <resetRadio+0x30>)
    2220:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR1 = PORT_PB02;
    2222:	4a0b      	ldr	r2, [pc, #44]	; (2250 <resetRadio+0x34>)
    2224:	6013      	str	r3, [r2, #0]
{
	uint16_t cnt;
	
	//NVIC_DisableIRQ(USB_IRQn);
	
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    2226:	2200      	movs	r2, #0
    2228:	4b0a      	ldr	r3, [pc, #40]	; (2254 <resetRadio+0x38>)
    222a:	821a      	strh	r2, [r3, #16]
    222c:	e008      	b.n	2240 <resetRadio+0x24>
	
	while(cnt!=ms) // Count the ms till target
	{
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    222e:	2110      	movs	r1, #16
    2230:	4b08      	ldr	r3, [pc, #32]	; (2254 <resetRadio+0x38>)
    2232:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    2234:	4b07      	ldr	r3, [pc, #28]	; (2254 <resetRadio+0x38>)
    2236:	7b9b      	ldrb	r3, [r3, #14]
    2238:	06db      	lsls	r3, r3, #27
    223a:	d5fb      	bpl.n	2234 <resetRadio+0x18>
		cnt++;
    223c:	3201      	adds	r2, #1
    223e:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    2240:	2a0a      	cmp	r2, #10
    2242:	d1f4      	bne.n	222e <resetRadio+0x12>
	timerDelay(10);
	REG_PORT_OUTSET1 = PORT_PB02;
    2244:	3a06      	subs	r2, #6
    2246:	4b04      	ldr	r3, [pc, #16]	; (2258 <resetRadio+0x3c>)
    2248:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET0 = PORT_PA21;
	REG_PORT_OUTCLR0 = PORT_PA21;
	timerDelay(10);
	REG_PORT_OUTSET0 = PORT_PA21;
#endif
}
    224a:	4770      	bx	lr
    224c:	41004488 	.word	0x41004488
    2250:	41004494 	.word	0x41004494
    2254:	42003000 	.word	0x42003000
    2258:	41004498 	.word	0x41004498

0000225c <boardSetup>:

void boardSetup(void)
{
    225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225e:	46ce      	mov	lr, r9
    2260:	4647      	mov	r7, r8
    2262:	b580      	push	{r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2264:	b672      	cpsid	i
	PM->APBCMASK.bit.SERCOM1_ = 1;
    2266:	4ab5      	ldr	r2, [pc, #724]	; (253c <boardSetup+0x2e0>)
    2268:	6a11      	ldr	r1, [r2, #32]
    226a:	2308      	movs	r3, #8
    226c:	430b      	orrs	r3, r1
    226e:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    2270:	4ab3      	ldr	r2, [pc, #716]	; (2540 <boardSetup+0x2e4>)
    2272:	4bb4      	ldr	r3, [pc, #720]	; (2544 <boardSetup+0x2e8>)
    2274:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY);
    2276:	4bb3      	ldr	r3, [pc, #716]	; (2544 <boardSetup+0x2e8>)
    2278:	785b      	ldrb	r3, [r3, #1]
    227a:	09db      	lsrs	r3, r3, #7
    227c:	d1fb      	bne.n	2276 <boardSetup+0x1a>
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
    227e:	4ab2      	ldr	r2, [pc, #712]	; (2548 <boardSetup+0x2ec>)
    2280:	4bb2      	ldr	r3, [pc, #712]	; (254c <boardSetup+0x2f0>)
    2282:	6891      	ldr	r1, [r2, #8]
    2284:	6019      	str	r1, [r3, #0]
	const SERCOM_SPI_CTRLB_Type ctrlb = {
    2286:	2180      	movs	r1, #128	; 0x80
    2288:	0289      	lsls	r1, r1, #10
	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
    228a:	6059      	str	r1, [r3, #4]
	SERCOM1->SPI.BAUD.reg = 1; // Rate = 48 MHz / 2(BAUD+1), maximum speed
    228c:	2101      	movs	r1, #1
    228e:	7319      	strb	r1, [r3, #12]
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    2290:	68d1      	ldr	r1, [r2, #12]
    2292:	4aaf      	ldr	r2, [pc, #700]	; (2550 <boardSetup+0x2f4>)
    2294:	6291      	str	r1, [r2, #40]	; 0x28
	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
    2296:	6819      	ldr	r1, [r3, #0]
    2298:	2202      	movs	r2, #2
    229a:	430a      	orrs	r2, r1
    229c:	601a      	str	r2, [r3, #0]
	while(SERCOM1->SPI.SYNCBUSY.bit.ENABLE);
    229e:	4bab      	ldr	r3, [pc, #684]	; (254c <boardSetup+0x2f0>)
    22a0:	69db      	ldr	r3, [r3, #28]
    22a2:	079b      	lsls	r3, r3, #30
    22a4:	d4fb      	bmi.n	229e <boardSetup+0x42>
	DMA_init();
    22a6:	4bab      	ldr	r3, [pc, #684]	; (2554 <boardSetup+0x2f8>)
    22a8:	4798      	blx	r3
	REG_PORT_DIRSET1 = PORT_PB08;
    22aa:	4dab      	ldr	r5, [pc, #684]	; (2558 <boardSetup+0x2fc>)
    22ac:	2380      	movs	r3, #128	; 0x80
    22ae:	005b      	lsls	r3, r3, #1
    22b0:	602b      	str	r3, [r5, #0]
	REG_PORT_OUTSET1 = PORT_PB08;
    22b2:	4aaa      	ldr	r2, [pc, #680]	; (255c <boardSetup+0x300>)
    22b4:	6013      	str	r3, [r2, #0]
	PM->APBAMASK.bit.SYSCTRL_ = 1;
    22b6:	49a1      	ldr	r1, [pc, #644]	; (253c <boardSetup+0x2e0>)
    22b8:	698a      	ldr	r2, [r1, #24]
    22ba:	2404      	movs	r4, #4
    22bc:	0013      	movs	r3, r2
    22be:	4323      	orrs	r3, r4
    22c0:	618b      	str	r3, [r1, #24]
	SYSCTRL->XOSC32K = xosc32k;
    22c2:	4aa7      	ldr	r2, [pc, #668]	; (2560 <boardSetup+0x304>)
    22c4:	4ba0      	ldr	r3, [pc, #640]	; (2548 <boardSetup+0x2ec>)
    22c6:	8a18      	ldrh	r0, [r3, #16]
    22c8:	8290      	strh	r0, [r2, #20]
	SYSCTRL->XOSC = xosc;
    22ca:	8a98      	ldrh	r0, [r3, #20]
    22cc:	8210      	strh	r0, [r2, #16]
	SYSCTRL->DPLLCTRLA = dpllctrla;
    22ce:	7e1e      	ldrb	r6, [r3, #24]
    22d0:	2044      	movs	r0, #68	; 0x44
    22d2:	5416      	strb	r6, [r2, r0]
	const SYSCTRL_DPLLCTRLB_Type dpllctrlb = {
    22d4:	2080      	movs	r0, #128	; 0x80
    22d6:	0140      	lsls	r0, r0, #5
	SYSCTRL->DPLLCTRLB = dpllctrlb;
    22d8:	64d0      	str	r0, [r2, #76]	; 0x4c
	const SYSCTRL_DPLLRATIO_Type dpllratio = {
    22da:	2600      	movs	r6, #0
    22dc:	4fa1      	ldr	r7, [pc, #644]	; (2564 <boardSetup+0x308>)
	SYSCTRL->DPLLRATIO = dpllratio;
    22de:	6497      	str	r7, [r2, #72]	; 0x48
	GCLK->GENDIV = gendiv;
    22e0:	4a98      	ldr	r2, [pc, #608]	; (2544 <boardSetup+0x2e8>)
    22e2:	69df      	ldr	r7, [r3, #28]
    22e4:	6097      	str	r7, [r2, #8]
	GCLK->GENCTRL = gentrcl;
    22e6:	6a1f      	ldr	r7, [r3, #32]
    22e8:	6057      	str	r7, [r2, #4]
	const GCLK_GENDIV_Type gendiv2 = {
    22ea:	2702      	movs	r7, #2
	GCLK->GENDIV = gendiv2;
    22ec:	6097      	str	r7, [r2, #8]
	GCLK->GENCTRL = gentrcl2;
    22ee:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    22f0:	6057      	str	r7, [r2, #4]
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    22f2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    22f4:	4b96      	ldr	r3, [pc, #600]	; (2550 <boardSetup+0x2f4>)
    22f6:	629f      	str	r7, [r3, #40]	; 0x28
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    22f8:	6a0b      	ldr	r3, [r1, #32]
    22fa:	4318      	orrs	r0, r3
    22fc:	6208      	str	r0, [r1, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    22fe:	4b9a      	ldr	r3, [pc, #616]	; (2568 <boardSetup+0x30c>)
    2300:	8053      	strh	r3, [r2, #2]
	TC4->COUNT16.CTRLA.reg =
    2302:	4b9a      	ldr	r3, [pc, #616]	; (256c <boardSetup+0x310>)
    2304:	22a9      	movs	r2, #169	; 0xa9
    2306:	0152      	lsls	r2, r2, #5
    2308:	801a      	strh	r2, [r3, #0]
	TC4->COUNT16.COUNT.reg = 0;
    230a:	821e      	strh	r6, [r3, #16]
	TC4->COUNT16.CC[0].reg = 320u; // Count to 320 to get 1ms
    230c:	22a0      	movs	r2, #160	; 0xa0
    230e:	0052      	lsls	r2, r2, #1
    2310:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2312:	881a      	ldrh	r2, [r3, #0]
    2314:	2102      	movs	r1, #2
    2316:	430a      	orrs	r2, r1
    2318:	b292      	uxth	r2, r2
    231a:	801a      	strh	r2, [r3, #0]
	// Init timer for delay
	timerInit();
	
	// Pull IO_EN high
#ifdef PCB_V2
	REG_PORT_DIRSET0 = PORT_PA20;
    231c:	4894      	ldr	r0, [pc, #592]	; (2570 <boardSetup+0x314>)
    231e:	2180      	movs	r1, #128	; 0x80
    2320:	0349      	lsls	r1, r1, #13
    2322:	6001      	str	r1, [r0, #0]
	REG_PORT_OUTSET0 = PORT_PA20;
    2324:	4a93      	ldr	r2, [pc, #588]	; (2574 <boardSetup+0x318>)
    2326:	6011      	str	r1, [r2, #0]
	//REG_PORT_OUTCLR0 = PORT_PA06;
#endif
	
	// Pull PLL_SEL high
#ifdef PCB_V2
	REG_PORT_DIRSET0 = PORT_PA27;
    2328:	2180      	movs	r1, #128	; 0x80
    232a:	0509      	lsls	r1, r1, #20
    232c:	6001      	str	r1, [r0, #0]
	REG_PORT_OUTSET0 = PORT_PA27;
    232e:	6011      	str	r1, [r2, #0]
	//REG_PORT_OUTCLR0 = PORT_PA03;
#endif

	// Pull XTAL_SEL low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB23;
    2330:	2180      	movs	r1, #128	; 0x80
    2332:	0409      	lsls	r1, r1, #16
    2334:	6029      	str	r1, [r5, #0]
	//REG_PORT_OUTSET1 = PORT_PB23;
	REG_PORT_OUTCLR1 = PORT_PB23;
    2336:	4a90      	ldr	r2, [pc, #576]	; (2578 <boardSetup+0x31c>)
    2338:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = PORT_PA27;
#endif
	
	// Pull SPARK_RST low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB02;
    233a:	602c      	str	r4, [r5, #0]
	REG_PORT_OUTCLR1 = PORT_PB02;
    233c:	6014      	str	r4, [r2, #0]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    233e:	821e      	strh	r6, [r3, #16]
    2340:	2200      	movs	r2, #0
    2342:	e008      	b.n	2356 <boardSetup+0xfa>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    2344:	2110      	movs	r1, #16
    2346:	4b89      	ldr	r3, [pc, #548]	; (256c <boardSetup+0x310>)
    2348:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    234a:	4b88      	ldr	r3, [pc, #544]	; (256c <boardSetup+0x310>)
    234c:	7b9b      	ldrb	r3, [r3, #14]
    234e:	06db      	lsls	r3, r3, #27
    2350:	d5fb      	bpl.n	234a <boardSetup+0xee>
		cnt++;
    2352:	3201      	adds	r2, #1
    2354:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    2356:	4b89      	ldr	r3, [pc, #548]	; (257c <boardSetup+0x320>)
    2358:	429a      	cmp	r2, r3
    235a:	d1f3      	bne.n	2344 <boardSetup+0xe8>
	timerDelay(1500);
	REG_PORT_OUTSET1 = PORT_PB02;
    235c:	2204      	movs	r2, #4
    235e:	4b7f      	ldr	r3, [pc, #508]	; (255c <boardSetup+0x300>)
    2360:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET0 = PORT_PA21;
#endif

#ifdef PCB_V2
	// Enable debug port
	REG_PORT_DIRSET1 = PORT_PB09;
    2362:	497d      	ldr	r1, [pc, #500]	; (2558 <boardSetup+0x2fc>)
    2364:	2380      	movs	r3, #128	; 0x80
    2366:	009b      	lsls	r3, r3, #2
    2368:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB09;
    236a:	4a83      	ldr	r2, [pc, #524]	; (2578 <boardSetup+0x31c>)
    236c:	6013      	str	r3, [r2, #0]
	REG_PORT_DIRSET1 = PORT_PB11;
    236e:	2380      	movs	r3, #128	; 0x80
    2370:	011b      	lsls	r3, r3, #4
    2372:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB11;
    2374:	6013      	str	r3, [r2, #0]
	
	// Enable LED port
	REG_PORT_DIRSET1 = PORT_PB03;
    2376:	2308      	movs	r3, #8
    2378:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB03;
    237a:	6013      	str	r3, [r2, #0]
#endif
	
	// External interrupt 5 for MCU_INT
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_EIC;
    237c:	4e71      	ldr	r6, [pc, #452]	; (2544 <boardSetup+0x2e8>)
    237e:	4a80      	ldr	r2, [pc, #512]	; (2580 <boardSetup+0x324>)
    2380:	8072      	strh	r2, [r6, #2]
	PM->APBAMASK.bit.EIC_ = 1;
    2382:	4d6e      	ldr	r5, [pc, #440]	; (253c <boardSetup+0x2e0>)
    2384:	69a9      	ldr	r1, [r5, #24]
    2386:	2240      	movs	r2, #64	; 0x40
    2388:	430a      	orrs	r2, r1
    238a:	61aa      	str	r2, [r5, #24]
	
#ifdef PCB_V2
	EIC->EVCTRL.bit.EXTINTEO3 = 1;
    238c:	4a7d      	ldr	r2, [pc, #500]	; (2584 <boardSetup+0x328>)
    238e:	6850      	ldr	r0, [r2, #4]
    2390:	0001      	movs	r1, r0
    2392:	4319      	orrs	r1, r3
    2394:	6051      	str	r1, [r2, #4]
	EIC->INTENSET.bit.EXTINT3 = 1;
    2396:	68d1      	ldr	r1, [r2, #12]
    2398:	430b      	orrs	r3, r1
    239a:	60d3      	str	r3, [r2, #12]
	EIC->CONFIG->bit.SENSE3 = 0x5; // Low level detection
    239c:	487a      	ldr	r0, [pc, #488]	; (2588 <boardSetup+0x32c>)
    239e:	6801      	ldr	r1, [r0, #0]
    23a0:	4b7a      	ldr	r3, [pc, #488]	; (258c <boardSetup+0x330>)
    23a2:	4019      	ands	r1, r3
    23a4:	23a0      	movs	r3, #160	; 0xa0
    23a6:	01db      	lsls	r3, r3, #7
    23a8:	430b      	orrs	r3, r1
    23aa:	6003      	str	r3, [r0, #0]
	EIC->CTRL.bit.ENABLE = 1; // Enable external interrupts
    23ac:	7813      	ldrb	r3, [r2, #0]
    23ae:	2702      	movs	r7, #2
    23b0:	433b      	orrs	r3, r7
    23b2:	7013      	strb	r3, [r2, #0]
		.bit.PMUX = MUX_PA03A_EIC_EXTINT3,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 0,
		.bit.PINMASK = (uint16_t)((PORT_PA03))
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    23b4:	4b64      	ldr	r3, [pc, #400]	; (2548 <boardSetup+0x2ec>)
    23b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    23b8:	4c65      	ldr	r4, [pc, #404]	; (2550 <boardSetup+0x2f4>)
    23ba:	62a3      	str	r3, [r4, #40]	; 0x28
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
#endif
	
	//NVIC_EnableIRQ(EIC_IRQn);
	
	disableExtInt();
    23bc:	4b74      	ldr	r3, [pc, #464]	; (2590 <boardSetup+0x334>)
    23be:	4798      	blx	r3
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    23c0:	4b74      	ldr	r3, [pc, #464]	; (2594 <boardSetup+0x338>)
    23c2:	20c6      	movs	r0, #198	; 0xc6
    23c4:	0080      	lsls	r0, r0, #2
    23c6:	581a      	ldr	r2, [r3, r0]
    23c8:	0212      	lsls	r2, r2, #8
    23ca:	0a12      	lsrs	r2, r2, #8
    23cc:	2180      	movs	r1, #128	; 0x80
    23ce:	05c9      	lsls	r1, r1, #23
    23d0:	430a      	orrs	r2, r1
    23d2:	501a      	str	r2, [r3, r0]
    23d4:	21c1      	movs	r1, #193	; 0xc1
    23d6:	0089      	lsls	r1, r1, #2
    23d8:	585a      	ldr	r2, [r3, r1]
    23da:	0212      	lsls	r2, r2, #8
    23dc:	0a12      	lsrs	r2, r2, #8
    23de:	20c0      	movs	r0, #192	; 0xc0
    23e0:	0600      	lsls	r0, r0, #24
    23e2:	4302      	orrs	r2, r0
    23e4:	505a      	str	r2, [r3, r1]
    23e6:	22c5      	movs	r2, #197	; 0xc5
    23e8:	0092      	lsls	r2, r2, #2
    23ea:	4694      	mov	ip, r2
    23ec:	589a      	ldr	r2, [r3, r2]
    23ee:	20ff      	movs	r0, #255	; 0xff
    23f0:	4681      	mov	r9, r0
    23f2:	4382      	bics	r2, r0
    23f4:	383f      	subs	r0, #63	; 0x3f
    23f6:	4302      	orrs	r2, r0
    23f8:	4660      	mov	r0, ip
    23fa:	501a      	str	r2, [r3, r0]
    23fc:	585a      	ldr	r2, [r3, r1]
    23fe:	4648      	mov	r0, r9
    2400:	4382      	bics	r2, r0
    2402:	387f      	subs	r0, #127	; 0x7f
    2404:	4302      	orrs	r2, r0
    2406:	505a      	str	r2, [r3, r1]
  __ASM volatile ("cpsie i" : : : "memory");
    2408:	b662      	cpsie	i
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    240a:	224c      	movs	r2, #76	; 0x4c
    240c:	5ca3      	ldrb	r3, [r4, r2]
    240e:	2001      	movs	r0, #1
    2410:	4303      	orrs	r3, r0
    2412:	54a3      	strb	r3, [r4, r2]
   
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    2414:	2336      	movs	r3, #54	; 0x36
    2416:	5ce1      	ldrb	r1, [r4, r3]
    2418:	3a3d      	subs	r2, #61	; 0x3d
    241a:	4391      	bics	r1, r2
    241c:	54e1      	strb	r1, [r4, r3]
                    //          
    // set new values
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    241e:	5ce2      	ldrb	r2, [r4, r3]
    2420:	433a      	orrs	r2, r7
    2422:	b2d2      	uxtb	r2, r2
    2424:	54e2      	strb	r2, [r4, r3]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    2426:	214d      	movs	r1, #77	; 0x4d
    2428:	5c62      	ldrb	r2, [r4, r1]
    242a:	4302      	orrs	r2, r0
    242c:	5462      	strb	r2, [r4, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    242e:	5ce2      	ldrb	r2, [r4, r3]
    2430:	393e      	subs	r1, #62	; 0x3e
    2432:	400a      	ands	r2, r1
    2434:	54e2      	strb	r2, [r4, r3]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    2436:	5ce2      	ldrb	r2, [r4, r3]
    2438:	2120      	movs	r1, #32
    243a:	430a      	orrs	r2, r1
    243c:	b2d2      	uxtb	r2, r2
    243e:	54e2      	strb	r2, [r4, r3]
inline void i2c_init(void)
{
	pin_set_peripheral_function(PINMUX_PAD0);
	pin_set_peripheral_function(PINMUX_PAD1);  

	PM->APBCMASK.reg |= I2C_SERCOM_APBCMASK;
    2440:	6a2b      	ldr	r3, [r5, #32]
    2442:	2210      	movs	r2, #16
    2444:	4313      	orrs	r3, r2
    2446:	622b      	str	r3, [r5, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(I2C_SERCOM_GCLK_ID) |
    2448:	4b53      	ldr	r3, [pc, #332]	; (2598 <boardSetup+0x33c>)
    244a:	8073      	strh	r3, [r6, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(I2C_SERCOM_CLK_GEN);

	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    244c:	32f0      	adds	r2, #240	; 0xf0
    244e:	4b53      	ldr	r3, [pc, #332]	; (259c <boardSetup+0x340>)
    2450:	605a      	str	r2, [r3, #4]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    2452:	4b52      	ldr	r3, [pc, #328]	; (259c <boardSetup+0x340>)
    2454:	69db      	ldr	r3, [r3, #28]
    2456:	2b00      	cmp	r3, #0
    2458:	d1fb      	bne.n	2452 <boardSetup+0x1f6>

	SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(34);
    245a:	2222      	movs	r2, #34	; 0x22
    245c:	4b4f      	ldr	r3, [pc, #316]	; (259c <boardSetup+0x340>)
    245e:	60da      	str	r2, [r3, #12]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    2460:	4b4e      	ldr	r3, [pc, #312]	; (259c <boardSetup+0x340>)
    2462:	69db      	ldr	r3, [r3, #28]
    2464:	2b00      	cmp	r3, #0
    2466:	d1fb      	bne.n	2460 <boardSetup+0x204>

	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
    2468:	4a4d      	ldr	r2, [pc, #308]	; (25a0 <boardSetup+0x344>)
    246a:	4b4c      	ldr	r3, [pc, #304]	; (259c <boardSetup+0x340>)
    246c:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |
	SERCOM_I2CM_CTRLA_SDAHOLD(3);
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    246e:	4b4b      	ldr	r3, [pc, #300]	; (259c <boardSetup+0x340>)
    2470:	69db      	ldr	r3, [r3, #28]
    2472:	2b00      	cmp	r3, #0
    2474:	d1fb      	bne.n	246e <boardSetup+0x212>

	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    2476:	4a49      	ldr	r2, [pc, #292]	; (259c <boardSetup+0x340>)
    2478:	8b53      	ldrh	r3, [r2, #26]
    247a:	2110      	movs	r1, #16
    247c:	430b      	orrs	r3, r1
    247e:	b29b      	uxth	r3, r3
    2480:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);	
    2482:	4b46      	ldr	r3, [pc, #280]	; (259c <boardSetup+0x340>)
    2484:	69db      	ldr	r3, [r3, #28]
    2486:	2b00      	cmp	r3, #0
    2488:	d1fb      	bne.n	2482 <boardSetup+0x226>
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    248a:	4b31      	ldr	r3, [pc, #196]	; (2550 <boardSetup+0x2f4>)
    248c:	2147      	movs	r1, #71	; 0x47
    248e:	5c5a      	ldrb	r2, [r3, r1]
    2490:	2401      	movs	r4, #1
    2492:	4322      	orrs	r2, r4
    2494:	545a      	strb	r2, [r3, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    2496:	2033      	movs	r0, #51	; 0x33
    2498:	5c1a      	ldrb	r2, [r3, r0]
    249a:	270f      	movs	r7, #15
    249c:	3938      	subs	r1, #56	; 0x38
    249e:	400a      	ands	r2, r1
    24a0:	541a      	strb	r2, [r3, r0]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    24a2:	5c1a      	ldrb	r2, [r3, r0]
    24a4:	2560      	movs	r5, #96	; 0x60
    24a6:	432a      	orrs	r2, r5
    24a8:	b2d2      	uxtb	r2, r2
    24aa:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    24ac:	3015      	adds	r0, #21
    24ae:	5c1a      	ldrb	r2, [r3, r0]
    24b0:	4322      	orrs	r2, r4
    24b2:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    24b4:	2634      	movs	r6, #52	; 0x34
    24b6:	5d9a      	ldrb	r2, [r3, r6]
    24b8:	43ba      	bics	r2, r7
    24ba:	559a      	strb	r2, [r3, r6]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    24bc:	5d9a      	ldrb	r2, [r3, r6]
    24be:	2006      	movs	r0, #6
    24c0:	4684      	mov	ip, r0
    24c2:	4660      	mov	r0, ip
    24c4:	4302      	orrs	r2, r0
    24c6:	b2d2      	uxtb	r2, r2
    24c8:	559a      	strb	r2, [r3, r6]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    24ca:	204a      	movs	r0, #74	; 0x4a
    24cc:	5c1a      	ldrb	r2, [r3, r0]
    24ce:	4322      	orrs	r2, r4
    24d0:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    24d2:	2235      	movs	r2, #53	; 0x35
    24d4:	5c9e      	ldrb	r6, [r3, r2]
    24d6:	43be      	bics	r6, r7
    24d8:	549e      	strb	r6, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    24da:	5c98      	ldrb	r0, [r3, r2]
    24dc:	4666      	mov	r6, ip
    24de:	4330      	orrs	r0, r6
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	5498      	strb	r0, [r3, r2]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    24e4:	264b      	movs	r6, #75	; 0x4b
    24e6:	5d98      	ldrb	r0, [r3, r6]
    24e8:	4304      	orrs	r4, r0
    24ea:	559c      	strb	r4, [r3, r6]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    24ec:	5c98      	ldrb	r0, [r3, r2]
    24ee:	4001      	ands	r1, r0
    24f0:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    24f2:	5c99      	ldrb	r1, [r3, r2]
    24f4:	4329      	orrs	r1, r5
    24f6:	b2c9      	uxtb	r1, r1
    24f8:	5499      	strb	r1, [r3, r2]
	pin_set_peripheral_function(PINMUX_PA08G_I2S_SD1);
	//pin_set_peripheral_function(PINMUX_PA09G_I2S_MCK0);
	pin_set_peripheral_function(PINMUX_PA10G_I2S_SCK0);
	pin_set_peripheral_function(PINMUX_PA11G_I2S_FS0);
	
	PM->APBCMASK.reg |= I2S_APBCMASK;
    24fa:	4a10      	ldr	r2, [pc, #64]	; (253c <boardSetup+0x2e0>)
    24fc:	6a11      	ldr	r1, [r2, #32]
    24fe:	2380      	movs	r3, #128	; 0x80
    2500:	035b      	lsls	r3, r3, #13
    2502:	430b      	orrs	r3, r1
    2504:	6213      	str	r3, [r2, #32]
	I2S_CLKCTRL_NBSLOTS(0x01) |  // 2 slots (1 for each channel)
	I2S_CLKCTRL_BITDELAY |		 // 1 bit delay (i2s mode)
	I2S_CLKCTRL_FSWIDTH(0x01) |  // HALF frame
	I2S_CLKCTRL_MCKDIV(0x07);  //Sclk = Fs*nbslot*nbbits = 48khz*2*32768hz = 3.072 MHz = 24.576Mhz/8 = 24.576Mhz/(MCKDIC+1)
	*/
	I2S->CLKCTRL[0].reg = I2S_CLKCTRL_SLOTSIZE(0x03) | // 32 bits slot size 
    2506:	4b27      	ldr	r3, [pc, #156]	; (25a4 <boardSetup+0x348>)
    2508:	4a27      	ldr	r2, [pc, #156]	; (25a8 <boardSetup+0x34c>)
    250a:	605a      	str	r2, [r3, #4]
	I2S_CLKCTRL_FSSEL_FSPIN | 
	I2S_CLKCTRL_FSWIDTH(0x01) |  // HALF frame
	I2S_CLKCTRL_SCKSEL_SCKPIN;
	
	//I2S->SERCTRL[0].reg = I2S_SERCTRL_DATASIZE(0x00) | // data size configured at 32-bit (using 16 MSBs only)
	I2S->SERCTRL[0].reg = I2S_SERCTRL_DATASIZE(0x05) | // data size configured at 16-bit
    250c:	4a27      	ldr	r2, [pc, #156]	; (25ac <boardSetup+0x350>)
    250e:	621a      	str	r2, [r3, #32]
	I2S_SERCTRL_SLOTADJ_LEFT | // Left adjusted
	I2S_SERCTRL_WORDADJ_RIGHT | // Left adjusted
	I2S_SERCTRL_SERMODE(0x01);	 // transmit mode
	
	//I2S->SERCTRL[1].reg = I2S_SERCTRL_DATASIZE(0x00) | // data size configured at 32-bit (using 16 MSBs only)
	I2S->SERCTRL[1].reg = I2S_SERCTRL_DATASIZE(0x05) | // data size configured at 16-bit
    2510:	3a01      	subs	r2, #1
    2512:	625a      	str	r2, [r3, #36]	; 0x24
	//I2S_SERCTRL_SLOTDIS1 | I2S_SERCTRL_SLOTDIS2 | I2S_SERCTRL_SLOTDIS4 | I2S_SERCTRL_SLOTDIS5 |
	I2S_SERCTRL_SLOTADJ_LEFT | // Left adjusted
	I2S_SERCTRL_WORDADJ_RIGHT | // Left adjusted
	I2S_SERCTRL_SERMODE(0x00);	 // receive mode	
	
	I2S->INTENSET.bit.TXRDY0 = 1; //enable tx ready interrupt
    2514:	8a19      	ldrh	r1, [r3, #16]
    2516:	2280      	movs	r2, #128	; 0x80
    2518:	0052      	lsls	r2, r2, #1
    251a:	430a      	orrs	r2, r1
    251c:	821a      	strh	r2, [r3, #16]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    251e:	4a1d      	ldr	r2, [pc, #116]	; (2594 <boardSetup+0x338>)
    2520:	2180      	movs	r1, #128	; 0x80
    2522:	0509      	lsls	r1, r1, #20
    2524:	2080      	movs	r0, #128	; 0x80
    2526:	5011      	str	r1, [r2, r0]
	//I2S->INTENSET.bit.RXRDY1 = 1; //enable rx ready interrupt

	NVIC_DisableIRQ(I2S_IRQn);
	
	I2S->CTRLA.reg = I2S_CTRLA_SEREN0 |
    2528:	384a      	subs	r0, #74	; 0x4a
    252a:	7018      	strb	r0, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    252c:	23c0      	movs	r3, #192	; 0xc0
    252e:	005b      	lsls	r3, r3, #1
    2530:	50d1      	str	r1, [r2, r3]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2532:	6011      	str	r1, [r2, #0]
	i2c_init();			
	i2s_init();		
	
	// Start USB stack to authorize VBus monitoring
	//udc_start();		
}
    2534:	bc0c      	pop	{r2, r3}
    2536:	4690      	mov	r8, r2
    2538:	4699      	mov	r9, r3
    253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    253c:	40000400 	.word	0x40000400
    2540:	00004015 	.word	0x00004015
    2544:	40000c00 	.word	0x40000c00
    2548:	00006150 	.word	0x00006150
    254c:	42000c00 	.word	0x42000c00
    2550:	41004400 	.word	0x41004400
    2554:	00001f61 	.word	0x00001f61
    2558:	41004488 	.word	0x41004488
    255c:	41004498 	.word	0x41004498
    2560:	40000800 	.word	0x40000800
    2564:	000004e1 	.word	0x000004e1
    2568:	0000461c 	.word	0x0000461c
    256c:	42003000 	.word	0x42003000
    2570:	41004408 	.word	0x41004408
    2574:	41004418 	.word	0x41004418
    2578:	41004494 	.word	0x41004494
    257c:	000005dc 	.word	0x000005dc
    2580:	00004005 	.word	0x00004005
    2584:	40001800 	.word	0x40001800
    2588:	40001818 	.word	0x40001818
    258c:	ffff8fff 	.word	0xffff8fff
    2590:	000020d1 	.word	0x000020d1
    2594:	e000e100 	.word	0xe000e100
    2598:	00004216 	.word	0x00004216
    259c:	42001000 	.word	0x42001000
    25a0:	00300016 	.word	0x00300016
    25a4:	42005000 	.word	0x42005000
    25a8:	000011a7 	.word	0x000011a7
    25ac:	00000581 	.word	0x00000581

000025b0 <EIC_Handler>:

void EIC_Handler(void)
{
    25b0:	b510      	push	{r4, lr}
	// Check if right interrupt?
#ifdef PCB_V2
	REG_PORT_OUTSET1 = PORT_PB09;
    25b2:	2480      	movs	r4, #128	; 0x80
    25b4:	00a4      	lsls	r4, r4, #2
    25b6:	4b06      	ldr	r3, [pc, #24]	; (25d0 <EIC_Handler+0x20>)
    25b8:	601c      	str	r4, [r3, #0]
#endif
	
	// Call radio callback
	callbackExtInterrupt();
    25ba:	4b06      	ldr	r3, [pc, #24]	; (25d4 <EIC_Handler+0x24>)
    25bc:	4798      	blx	r3
	
		
#ifdef PCB_V2
	REG_PORT_OUTCLR1 = PORT_PB09;
    25be:	4b06      	ldr	r3, [pc, #24]	; (25d8 <EIC_Handler+0x28>)
    25c0:	601c      	str	r4, [r3, #0]
#endif
	
	// Handle interrupt
	EIC->INTFLAG.bit.EXTINT5 = 1;
    25c2:	4a06      	ldr	r2, [pc, #24]	; (25dc <EIC_Handler+0x2c>)
    25c4:	6911      	ldr	r1, [r2, #16]
    25c6:	2320      	movs	r3, #32
    25c8:	430b      	orrs	r3, r1
    25ca:	6113      	str	r3, [r2, #16]
}
    25cc:	bd10      	pop	{r4, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	41004498 	.word	0x41004498
    25d4:	00003085 	.word	0x00003085
    25d8:	41004494 	.word	0x41004494
    25dc:	40001800 	.word	0x40001800

000025e0 <I2S_Handler>:

// Audio
uint32_t i2s_value;

//i2s handler: triggers every 1/(48000*2) seconds. When ready to tx or rx 1 channel
void I2S_Handler(void){
    25e0:	b510      	push	{r4, lr}
	
#ifdef PCB_V2
	REG_PORT_OUTSET1 = PORT_PB11;
    25e2:	2280      	movs	r2, #128	; 0x80
    25e4:	0112      	lsls	r2, r2, #4
    25e6:	4b0c      	ldr	r3, [pc, #48]	; (2618 <I2S_Handler+0x38>)
    25e8:	601a      	str	r2, [r3, #0]
}

inline uint32_t i2s_read(void)
{
	uint32_t sample;
	while(I2S->INTFLAG.bit.RXRDY1 == 0);
    25ea:	4b0c      	ldr	r3, [pc, #48]	; (261c <I2S_Handler+0x3c>)
    25ec:	8a9b      	ldrh	r3, [r3, #20]
    25ee:	079b      	lsls	r3, r3, #30
    25f0:	d5fb      	bpl.n	25ea <I2S_Handler+0xa>
	sample = I2S->DATA[1].reg;
    25f2:	4b0a      	ldr	r3, [pc, #40]	; (261c <I2S_Handler+0x3c>)
    25f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
	//NVIC_DisableIRQ(USB_IRQn);
	
	//if(I2S->INTFLAG.bit.RXRDY1 == 1 || I2S->INTFLAG.bit.TXRDY0 == 1)
	{
			
		i2s_value = i2s_read();//read value from CODEC
    25f6:	4b0a      	ldr	r3, [pc, #40]	; (2620 <I2S_Handler+0x40>)
    25f8:	6018      	str	r0, [r3, #0]
	//}
	
	//if(I2S->INTFLAG.bit.TXRDY0 == 1){
	//{
			
		i2s_write(callbackAudioSample(i2s_value)); //write sample to Codec
    25fa:	4b0a      	ldr	r3, [pc, #40]	; (2624 <I2S_Handler+0x44>)
    25fc:	4798      	blx	r3
	while(I2S->INTFLAG.bit.TXRDY0 == 0);
    25fe:	4b07      	ldr	r3, [pc, #28]	; (261c <I2S_Handler+0x3c>)
    2600:	8a9b      	ldrh	r3, [r3, #20]
    2602:	05db      	lsls	r3, r3, #23
    2604:	d5fb      	bpl.n	25fe <I2S_Handler+0x1e>
	I2S->DATA[0].reg = sample;
    2606:	4b05      	ldr	r3, [pc, #20]	; (261c <I2S_Handler+0x3c>)
    2608:	6318      	str	r0, [r3, #48]	; 0x30
		write_buf = (((hirx<<24)) | lorx<<16);//create i2s buffer [31:24 = hirx] [23:16 = lorx] [15:0 = 0]
		i2s_write(write_buf);//write sample to Codec*/
	}
	
	//NVIC_EnableIRQ(USB_IRQn);
	I2S->INTFLAG.bit.RXRDY1;
    260a:	8a9a      	ldrh	r2, [r3, #20]
	I2S->INTFLAG.bit.TXRDY0;
    260c:	8a9b      	ldrh	r3, [r3, #20]
	
#ifdef PCB_V2
	REG_PORT_OUTCLR1 = PORT_PB11;
    260e:	2280      	movs	r2, #128	; 0x80
    2610:	0112      	lsls	r2, r2, #4
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <I2S_Handler+0x48>)
    2614:	601a      	str	r2, [r3, #0]
#endif
}
    2616:	bd10      	pop	{r4, pc}
    2618:	41004498 	.word	0x41004498
    261c:	42005000 	.word	0x42005000
    2620:	20000a10 	.word	0x20000a10
    2624:	00001acd 	.word	0x00001acd
    2628:	41004494 	.word	0x41004494

0000262c <usbIsAvailable>:

// USB stdio
char std_buf[128];

bool usbIsAvailable(void)
{
    262c:	b510      	push	{r4, lr}
	//return udi_cdc_is_rx_ready();
	return usb_bytes_available() > 0;
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <usbIsAvailable+0x10>)
    2630:	4798      	blx	r3
    2632:	1e43      	subs	r3, r0, #1
    2634:	4198      	sbcs	r0, r3
    2636:	b2c0      	uxtb	r0, r0
	//return 0;
}
    2638:	bd10      	pop	{r4, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	00003c5d 	.word	0x00003c5d

00002640 <usbBytesAvailable>:

uint16_t usbBytesAvailable(void)
{
    2640:	b510      	push	{r4, lr}
	//return udi_cdc_is_rx_ready();
	return usb_bytes_available();
    2642:	4b01      	ldr	r3, [pc, #4]	; (2648 <usbBytesAvailable+0x8>)
    2644:	4798      	blx	r3
	//return 0;
}
    2646:	bd10      	pop	{r4, pc}
    2648:	00003c5d 	.word	0x00003c5d

0000264c <usbGet>:

uint8_t usbGet(void)
{
    264c:	b510      	push	{r4, lr}
    264e:	b082      	sub	sp, #8
	uint8_t c;
	//return udi_cdc_getc();
	usb_get(&c, 1);
    2650:	466b      	mov	r3, sp
    2652:	1ddc      	adds	r4, r3, #7
    2654:	2101      	movs	r1, #1
    2656:	0020      	movs	r0, r4
    2658:	4b02      	ldr	r3, [pc, #8]	; (2664 <usbGet+0x18>)
    265a:	4798      	blx	r3
	return c;
    265c:	7820      	ldrb	r0, [r4, #0]
	//return 0;
}
    265e:	b002      	add	sp, #8
    2660:	bd10      	pop	{r4, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	00003c95 	.word	0x00003c95

00002668 <usbPrintf>:
	//udi_cdc_putc(c);
	usb_put(&c, 1);
}

void usbPrintf(const char *fmt, ...)
{
    2668:	b40f      	push	{r0, r1, r2, r3}
    266a:	b510      	push	{r4, lr}
    266c:	b082      	sub	sp, #8
    266e:	aa04      	add	r2, sp, #16
    2670:	ca02      	ldmia	r2!, {r1}
	char *i = std_buf;
	
	va_list va;
	va_start(va, fmt);
    2672:	9201      	str	r2, [sp, #4]
	
	vsprintf(std_buf, fmt, va);
    2674:	4c07      	ldr	r4, [pc, #28]	; (2694 <usbPrintf+0x2c>)
    2676:	0020      	movs	r0, r4
    2678:	4b07      	ldr	r3, [pc, #28]	; (2698 <usbPrintf+0x30>)
    267a:	4798      	blx	r3
	
	usb_put(std_buf, strlen(std_buf));
    267c:	0020      	movs	r0, r4
    267e:	4b07      	ldr	r3, [pc, #28]	; (269c <usbPrintf+0x34>)
    2680:	4798      	blx	r3
    2682:	b281      	uxth	r1, r0
    2684:	0020      	movs	r0, r4
    2686:	4b06      	ldr	r3, [pc, #24]	; (26a0 <usbPrintf+0x38>)
    2688:	4798      	blx	r3
		usb_put(i, 1);
		i++;
	}*/
	
	va_end(va);
}
    268a:	b002      	add	sp, #8
    268c:	bc10      	pop	{r4}
    268e:	bc08      	pop	{r3}
    2690:	b004      	add	sp, #16
    2692:	4718      	bx	r3
    2694:	2000057c 	.word	0x2000057c
    2698:	0000468d 	.word	0x0000468d
    269c:	0000464d 	.word	0x0000464d
    26a0:	00003ce1 	.word	0x00003ce1

000026a4 <usbParseInt>:

uint32_t usbParseInt()
{ 
    26a4:	b510      	push	{r4, lr}
    26a6:	b082      	sub	sp, #8
	unsigned char c=0;
    26a8:	466b      	mov	r3, sp
    26aa:	1dd8      	adds	r0, r3, #7
    26ac:	2300      	movs	r3, #0
    26ae:	7003      	strb	r3, [r0, #0]
	unsigned char *p;
	int number;
	
	p = std_buf;
	//c = udi_cdc_getc();
	usb_get(&c, 1);
    26b0:	2101      	movs	r1, #1
    26b2:	4b0e      	ldr	r3, [pc, #56]	; (26ec <usbParseInt+0x48>)
    26b4:	4798      	blx	r3
	p = std_buf;
    26b6:	4c0e      	ldr	r4, [pc, #56]	; (26f0 <usbParseInt+0x4c>)
	while(c>47 && c<58) // Only accept numbers
    26b8:	e006      	b.n	26c8 <usbParseInt+0x24>
	{
		*p = c; p++;
    26ba:	7022      	strb	r2, [r4, #0]
    26bc:	3401      	adds	r4, #1
		//c = udi_cdc_getc();
		usb_get(&c, 1);
    26be:	2101      	movs	r1, #1
    26c0:	466b      	mov	r3, sp
    26c2:	1dd8      	adds	r0, r3, #7
    26c4:	4b09      	ldr	r3, [pc, #36]	; (26ec <usbParseInt+0x48>)
    26c6:	4798      	blx	r3
	while(c>47 && c<58) // Only accept numbers
    26c8:	466b      	mov	r3, sp
    26ca:	79da      	ldrb	r2, [r3, #7]
    26cc:	0013      	movs	r3, r2
    26ce:	3b30      	subs	r3, #48	; 0x30
    26d0:	b2db      	uxtb	r3, r3
    26d2:	2b09      	cmp	r3, #9
    26d4:	d9f1      	bls.n	26ba <usbParseInt+0x16>
	}
	*p = 0;
    26d6:	2300      	movs	r3, #0
    26d8:	7023      	strb	r3, [r4, #0]
	sscanf(std_buf, "%d", &number);
    26da:	466a      	mov	r2, sp
    26dc:	4905      	ldr	r1, [pc, #20]	; (26f4 <usbParseInt+0x50>)
    26de:	4804      	ldr	r0, [pc, #16]	; (26f0 <usbParseInt+0x4c>)
    26e0:	4b05      	ldr	r3, [pc, #20]	; (26f8 <usbParseInt+0x54>)
    26e2:	4798      	blx	r3
	
	return number;
}
    26e4:	9800      	ldr	r0, [sp, #0]
    26e6:	b002      	add	sp, #8
    26e8:	bd10      	pop	{r4, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	00003c95 	.word	0x00003c95
    26f0:	2000057c 	.word	0x2000057c
    26f4:	00006180 	.word	0x00006180
    26f8:	000045f9 	.word	0x000045f9

000026fc <wdSetup>:
	TC5->COUNT16.CC[0].reg = ticks;
	
	TC5->COUNT16.INTENSET.reg = TC_INTENSET_MC0; // Enable interrupt
	NVIC_EnableIRQ(TC5_IRQn); 
#endif	
}
    26fc:	4770      	bx	lr

000026fe <wdReset>:
void wdReset()
{
#ifdef WD_ENABLE	
	TC5->COUNT16.COUNT.reg = 0;
#endif
}
    26fe:	4770      	bx	lr

00002700 <wdEnable>:
void wdEnable()
{
#ifdef WD_ENABLE
	TC5->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
#endif
}
    2700:	4770      	bx	lr

00002702 <wdDisable>:
void wdDisable()
{
#ifdef WD_ENABLE	
	TC5->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
#endif
}
    2702:	4770      	bx	lr

00002704 <main>:
		usb_put(std_buffer, size);
	}	
}*/

int main(void)
{
    2704:	b510      	push	{r4, lr}
	// Setup clocks
    clock_init_crystal(GCLK_SYSTEM, GCLK_32K);
    2706:	2105      	movs	r1, #5
    2708:	2000      	movs	r0, #0
    270a:	4b0e      	ldr	r3, [pc, #56]	; (2744 <main+0x40>)
    270c:	4798      	blx	r3
	
	// Setup board
	boardSetup();	
    270e:	4b0e      	ldr	r3, [pc, #56]	; (2748 <main+0x44>)
    2710:	4798      	blx	r3
	
	// Enable USB pins
	PORT->Group[0].PINCFG[24].bit.PMUXEN = 1;
    2712:	4b0e      	ldr	r3, [pc, #56]	; (274c <main+0x48>)
    2714:	2258      	movs	r2, #88	; 0x58
    2716:	5c99      	ldrb	r1, [r3, r2]
    2718:	2001      	movs	r0, #1
    271a:	4301      	orrs	r1, r0
    271c:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[25].bit.PMUXEN = 1;
    271e:	2159      	movs	r1, #89	; 0x59
    2720:	5c5a      	ldrb	r2, [r3, r1]
    2722:	4302      	orrs	r2, r0
    2724:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[12].reg = 0x66;
    2726:	310d      	adds	r1, #13
    2728:	223c      	movs	r2, #60	; 0x3c
    272a:	5499      	strb	r1, [r3, r2]

	usb_init();
    272c:	4b08      	ldr	r3, [pc, #32]	; (2750 <main+0x4c>)
    272e:	4798      	blx	r3
	usb_setup_fifos();
    2730:	4b08      	ldr	r3, [pc, #32]	; (2754 <main+0x50>)
    2732:	4798      	blx	r3
	usb_attach();	
    2734:	4b08      	ldr	r3, [pc, #32]	; (2758 <main+0x54>)
    2736:	4798      	blx	r3
	
	// Startup radio
	appInit();	
    2738:	4b08      	ldr	r3, [pc, #32]	; (275c <main+0x58>)
    273a:	4798      	blx	r3

	while (true)
		handleUSB();
    273c:	4b08      	ldr	r3, [pc, #32]	; (2760 <main+0x5c>)
    273e:	4798      	blx	r3
    2740:	e7fc      	b.n	273c <main+0x38>
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	00001cb1 	.word	0x00001cb1
    2748:	0000225d 	.word	0x0000225d
    274c:	41004400 	.word	0x41004400
    2750:	000035c5 	.word	0x000035c5
    2754:	00003c19 	.word	0x00003c19
    2758:	0000388d 	.word	0x0000388d
    275c:	000009e1 	.word	0x000009e1
    2760:	00000cf9 	.word	0x00000cf9

00002764 <sparkBIST>:
unsigned char sleepCfg;

void applySleepOffset(short offset);

bool sparkBIST(bool verbose)
{
    2764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2766:	0004      	movs	r4, r0
  unsigned char b;
  bool fail;

  disableExtInt();
    2768:	4b7e      	ldr	r3, [pc, #504]	; (2964 <sparkBIST+0x200>)
    276a:	4798      	blx	r3
  resetRadio();
    276c:	4b7e      	ldr	r3, [pc, #504]	; (2968 <sparkBIST+0x204>)
    276e:	4798      	blx	r3
  
  // Test SPI
  if(verbose)
    2770:	2c00      	cmp	r4, #0
    2772:	d117      	bne.n	27a4 <sparkBIST+0x40>
	usbPrintf("SPI..");
  startSPI();
    2774:	4b7d      	ldr	r3, [pc, #500]	; (296c <sparkBIST+0x208>)
    2776:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    2778:	2040      	movs	r0, #64	; 0x40
    277a:	4d7d      	ldr	r5, [pc, #500]	; (2970 <sparkBIST+0x20c>)
    277c:	47a8      	blx	r5
    277e:	2000      	movs	r0, #0
    2780:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    2782:	2041      	movs	r0, #65	; 0x41
    2784:	47a8      	blx	r5
    2786:	2000      	movs	r0, #0
    2788:	47a8      	blx	r5
  sendSPI(REG_PREAMBLEN); b = sendSPI(0x00);
    278a:	2033      	movs	r0, #51	; 0x33
    278c:	47a8      	blx	r5
    278e:	2000      	movs	r0, #0
    2790:	47a8      	blx	r5
    2792:	0005      	movs	r5, r0
  stopSPI();
    2794:	4b77      	ldr	r3, [pc, #476]	; (2974 <sparkBIST+0x210>)
    2796:	4798      	blx	r3
  if(b != 0x09)
    2798:	2d09      	cmp	r5, #9
    279a:	d00c      	beq.n	27b6 <sparkBIST+0x52>
  {
	if(verbose)
    279c:	2c00      	cmp	r4, #0
    279e:	d105      	bne.n	27ac <sparkBIST+0x48>
	  if(verbose)
		usbPrintf("OK\n");
  }

  return true;
}
    27a0:	0020      	movs	r0, r4
    27a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbPrintf("SPI..");
    27a4:	4874      	ldr	r0, [pc, #464]	; (2978 <sparkBIST+0x214>)
    27a6:	4b75      	ldr	r3, [pc, #468]	; (297c <sparkBIST+0x218>)
    27a8:	4798      	blx	r3
    27aa:	e7e3      	b.n	2774 <sparkBIST+0x10>
		usbPrintf("FAIL\n");
    27ac:	4874      	ldr	r0, [pc, #464]	; (2980 <sparkBIST+0x21c>)
    27ae:	4b73      	ldr	r3, [pc, #460]	; (297c <sparkBIST+0x218>)
    27b0:	4798      	blx	r3
    return false;
    27b2:	2400      	movs	r4, #0
    27b4:	e7f4      	b.n	27a0 <sparkBIST+0x3c>
	  if(verbose)
    27b6:	2c00      	cmp	r4, #0
    27b8:	d110      	bne.n	27dc <sparkBIST+0x78>
  if(verbose)
    27ba:	2c00      	cmp	r4, #0
    27bc:	d112      	bne.n	27e4 <sparkBIST+0x80>
  startSPI();
    27be:	4b6b      	ldr	r3, [pc, #428]	; (296c <sparkBIST+0x208>)
    27c0:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x80);
    27c2:	2040      	movs	r0, #64	; 0x40
    27c4:	4d6a      	ldr	r5, [pc, #424]	; (2970 <sparkBIST+0x20c>)
    27c6:	47a8      	blx	r5
    27c8:	2080      	movs	r0, #128	; 0x80
    27ca:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    27cc:	2041      	movs	r0, #65	; 0x41
    27ce:	47a8      	blx	r5
    27d0:	2000      	movs	r0, #0
    27d2:	47a8      	blx	r5
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    27d4:	2200      	movs	r2, #0
    27d6:	4b6b      	ldr	r3, [pc, #428]	; (2984 <sparkBIST+0x220>)
    27d8:	821a      	strh	r2, [r3, #16]
    27da:	e010      	b.n	27fe <sparkBIST+0x9a>
		usbPrintf("OK\n");
    27dc:	486a      	ldr	r0, [pc, #424]	; (2988 <sparkBIST+0x224>)
    27de:	4b67      	ldr	r3, [pc, #412]	; (297c <sparkBIST+0x218>)
    27e0:	4798      	blx	r3
    27e2:	e7ea      	b.n	27ba <sparkBIST+0x56>
	usbPrintf("MCU_INT..");
    27e4:	4869      	ldr	r0, [pc, #420]	; (298c <sparkBIST+0x228>)
    27e6:	4b65      	ldr	r3, [pc, #404]	; (297c <sparkBIST+0x218>)
    27e8:	4798      	blx	r3
    27ea:	e7e8      	b.n	27be <sparkBIST+0x5a>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    27ec:	2110      	movs	r1, #16
    27ee:	4b65      	ldr	r3, [pc, #404]	; (2984 <sparkBIST+0x220>)
    27f0:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    27f2:	4b64      	ldr	r3, [pc, #400]	; (2984 <sparkBIST+0x220>)
    27f4:	7b9b      	ldrb	r3, [r3, #14]
    27f6:	06db      	lsls	r3, r3, #27
    27f8:	d5fb      	bpl.n	27f2 <sparkBIST+0x8e>
		cnt++;
    27fa:	3201      	adds	r2, #1
    27fc:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    27fe:	2a0a      	cmp	r2, #10
    2800:	d1f4      	bne.n	27ec <sparkBIST+0x88>
  fail = fail |  (getMCUint()); // should be low
    2802:	4b63      	ldr	r3, [pc, #396]	; (2990 <sparkBIST+0x22c>)
    2804:	4798      	blx	r3
    2806:	0005      	movs	r5, r0
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    2808:	2040      	movs	r0, #64	; 0x40
    280a:	4e59      	ldr	r6, [pc, #356]	; (2970 <sparkBIST+0x20c>)
    280c:	47b0      	blx	r6
    280e:	2000      	movs	r0, #0
    2810:	47b0      	blx	r6
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    2812:	2200      	movs	r2, #0
    2814:	4b5b      	ldr	r3, [pc, #364]	; (2984 <sparkBIST+0x220>)
    2816:	821a      	strh	r2, [r3, #16]
    2818:	e008      	b.n	282c <sparkBIST+0xc8>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    281a:	2110      	movs	r1, #16
    281c:	4b59      	ldr	r3, [pc, #356]	; (2984 <sparkBIST+0x220>)
    281e:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    2820:	4b58      	ldr	r3, [pc, #352]	; (2984 <sparkBIST+0x220>)
    2822:	7b9b      	ldrb	r3, [r3, #14]
    2824:	06db      	lsls	r3, r3, #27
    2826:	d5fb      	bpl.n	2820 <sparkBIST+0xbc>
		cnt++;
    2828:	3201      	adds	r2, #1
    282a:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    282c:	2a0a      	cmp	r2, #10
    282e:	d1f4      	bne.n	281a <sparkBIST+0xb6>
  fail = fail |  !(getMCUint()); // should be high
    2830:	4b57      	ldr	r3, [pc, #348]	; (2990 <sparkBIST+0x22c>)
    2832:	4798      	blx	r3
    2834:	0007      	movs	r7, r0
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    2836:	2040      	movs	r0, #64	; 0x40
    2838:	4e4d      	ldr	r6, [pc, #308]	; (2970 <sparkBIST+0x20c>)
    283a:	47b0      	blx	r6
    283c:	2000      	movs	r0, #0
    283e:	47b0      	blx	r6
  stopSPI();
    2840:	4b4c      	ldr	r3, [pc, #304]	; (2974 <sparkBIST+0x210>)
    2842:	4798      	blx	r3
  if(fail)
    2844:	42bd      	cmp	r5, r7
    2846:	d306      	bcc.n	2856 <sparkBIST+0xf2>
	  if(verbose)
    2848:	2c00      	cmp	r4, #0
    284a:	d0a9      	beq.n	27a0 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    284c:	484c      	ldr	r0, [pc, #304]	; (2980 <sparkBIST+0x21c>)
    284e:	4b4b      	ldr	r3, [pc, #300]	; (297c <sparkBIST+0x218>)
    2850:	4798      	blx	r3
    return false;
    2852:	2400      	movs	r4, #0
    2854:	e7a4      	b.n	27a0 <sparkBIST+0x3c>
	  if(verbose)
    2856:	2c00      	cmp	r4, #0
    2858:	d112      	bne.n	2880 <sparkBIST+0x11c>
  startSPI();
    285a:	4b44      	ldr	r3, [pc, #272]	; (296c <sparkBIST+0x208>)
    285c:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(0x00);
    285e:	2044      	movs	r0, #68	; 0x44
    2860:	4d43      	ldr	r5, [pc, #268]	; (2970 <sparkBIST+0x20c>)
    2862:	47a8      	blx	r5
    2864:	2000      	movs	r0, #0
    2866:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x00);
    2868:	2045      	movs	r0, #69	; 0x45
    286a:	47a8      	blx	r5
    286c:	2000      	movs	r0, #0
    286e:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(0x00); // Wakeup all voltage domains
    2870:	205f      	movs	r0, #95	; 0x5f
    2872:	47a8      	blx	r5
    2874:	2000      	movs	r0, #0
    2876:	47a8      	blx	r5
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    2878:	2200      	movs	r2, #0
    287a:	4b42      	ldr	r3, [pc, #264]	; (2984 <sparkBIST+0x220>)
    287c:	821a      	strh	r2, [r3, #16]
    287e:	e00c      	b.n	289a <sparkBIST+0x136>
		usbPrintf("OK\n");
    2880:	4841      	ldr	r0, [pc, #260]	; (2988 <sparkBIST+0x224>)
    2882:	4b3e      	ldr	r3, [pc, #248]	; (297c <sparkBIST+0x218>)
    2884:	4798      	blx	r3
    2886:	e7e8      	b.n	285a <sparkBIST+0xf6>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    2888:	2110      	movs	r1, #16
    288a:	4b3e      	ldr	r3, [pc, #248]	; (2984 <sparkBIST+0x220>)
    288c:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    288e:	4b3d      	ldr	r3, [pc, #244]	; (2984 <sparkBIST+0x220>)
    2890:	7b9b      	ldrb	r3, [r3, #14]
    2892:	06db      	lsls	r3, r3, #27
    2894:	d5fb      	bpl.n	288e <sparkBIST+0x12a>
		cnt++;
    2896:	3201      	adds	r2, #1
    2898:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    289a:	2a0a      	cmp	r2, #10
    289c:	d1f4      	bne.n	2888 <sparkBIST+0x124>
  sendSPI(REG_COMMANDS); b = sendSPI(0x00);
    289e:	201f      	movs	r0, #31
    28a0:	4d33      	ldr	r5, [pc, #204]	; (2970 <sparkBIST+0x20c>)
    28a2:	47a8      	blx	r5
    28a4:	2000      	movs	r0, #0
    28a6:	47a8      	blx	r5
    28a8:	0005      	movs	r5, r0
  stopSPI();
    28aa:	4b32      	ldr	r3, [pc, #200]	; (2974 <sparkBIST+0x210>)
    28ac:	4798      	blx	r3
  if(verbose)
    28ae:	2c00      	cmp	r4, #0
    28b0:	d109      	bne.n	28c6 <sparkBIST+0x162>
  if(!(b & 0x01))
    28b2:	07eb      	lsls	r3, r5, #31
    28b4:	d40b      	bmi.n	28ce <sparkBIST+0x16a>
	  if(verbose)
    28b6:	2c00      	cmp	r4, #0
    28b8:	d100      	bne.n	28bc <sparkBIST+0x158>
    28ba:	e771      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    28bc:	4830      	ldr	r0, [pc, #192]	; (2980 <sparkBIST+0x21c>)
    28be:	4b2f      	ldr	r3, [pc, #188]	; (297c <sparkBIST+0x218>)
    28c0:	4798      	blx	r3
    return false;
    28c2:	2400      	movs	r4, #0
    28c4:	e76c      	b.n	27a0 <sparkBIST+0x3c>
	usbPrintf("REF_PWRD..");
    28c6:	4833      	ldr	r0, [pc, #204]	; (2994 <sparkBIST+0x230>)
    28c8:	4b2c      	ldr	r3, [pc, #176]	; (297c <sparkBIST+0x218>)
    28ca:	4798      	blx	r3
    28cc:	e7f1      	b.n	28b2 <sparkBIST+0x14e>
	  if(verbose)
    28ce:	2c00      	cmp	r4, #0
    28d0:	d10b      	bne.n	28ea <sparkBIST+0x186>
  if(verbose)
    28d2:	2c00      	cmp	r4, #0
    28d4:	d10d      	bne.n	28f2 <sparkBIST+0x18e>
  if(!(b & 0x02))
    28d6:	07ab      	lsls	r3, r5, #30
    28d8:	d40f      	bmi.n	28fa <sparkBIST+0x196>
	  if(verbose)
    28da:	2c00      	cmp	r4, #0
    28dc:	d100      	bne.n	28e0 <sparkBIST+0x17c>
    28de:	e75f      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    28e0:	4827      	ldr	r0, [pc, #156]	; (2980 <sparkBIST+0x21c>)
    28e2:	4b26      	ldr	r3, [pc, #152]	; (297c <sparkBIST+0x218>)
    28e4:	4798      	blx	r3
    return false;
    28e6:	2400      	movs	r4, #0
    28e8:	e75a      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    28ea:	4827      	ldr	r0, [pc, #156]	; (2988 <sparkBIST+0x224>)
    28ec:	4b23      	ldr	r3, [pc, #140]	; (297c <sparkBIST+0x218>)
    28ee:	4798      	blx	r3
    28f0:	e7ef      	b.n	28d2 <sparkBIST+0x16e>
	usbPrintf("PLL_PWRD..");
    28f2:	4829      	ldr	r0, [pc, #164]	; (2998 <sparkBIST+0x234>)
    28f4:	4b21      	ldr	r3, [pc, #132]	; (297c <sparkBIST+0x218>)
    28f6:	4798      	blx	r3
    28f8:	e7ed      	b.n	28d6 <sparkBIST+0x172>
	  if(verbose)
    28fa:	2c00      	cmp	r4, #0
    28fc:	d10b      	bne.n	2916 <sparkBIST+0x1b2>
  if(verbose)
    28fe:	2c00      	cmp	r4, #0
    2900:	d10d      	bne.n	291e <sparkBIST+0x1ba>
  if(!(b & 0x04))
    2902:	076b      	lsls	r3, r5, #29
    2904:	d40f      	bmi.n	2926 <sparkBIST+0x1c2>
	  if(verbose)
    2906:	2c00      	cmp	r4, #0
    2908:	d100      	bne.n	290c <sparkBIST+0x1a8>
    290a:	e749      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    290c:	481c      	ldr	r0, [pc, #112]	; (2980 <sparkBIST+0x21c>)
    290e:	4b1b      	ldr	r3, [pc, #108]	; (297c <sparkBIST+0x218>)
    2910:	4798      	blx	r3
    return false;
    2912:	2400      	movs	r4, #0
    2914:	e744      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    2916:	481c      	ldr	r0, [pc, #112]	; (2988 <sparkBIST+0x224>)
    2918:	4b18      	ldr	r3, [pc, #96]	; (297c <sparkBIST+0x218>)
    291a:	4798      	blx	r3
    291c:	e7ef      	b.n	28fe <sparkBIST+0x19a>
	usbPrintf("DCDC_PWRD..");
    291e:	481f      	ldr	r0, [pc, #124]	; (299c <sparkBIST+0x238>)
    2920:	4b16      	ldr	r3, [pc, #88]	; (297c <sparkBIST+0x218>)
    2922:	4798      	blx	r3
    2924:	e7ed      	b.n	2902 <sparkBIST+0x19e>
    if(verbose)
    2926:	2c00      	cmp	r4, #0
    2928:	d10b      	bne.n	2942 <sparkBIST+0x1de>
  if(verbose)
    292a:	2c00      	cmp	r4, #0
    292c:	d10d      	bne.n	294a <sparkBIST+0x1e6>
  if(!(b & 0x08))
    292e:	072b      	lsls	r3, r5, #28
    2930:	d40f      	bmi.n	2952 <sparkBIST+0x1ee>
	  if(verbose)
    2932:	2c00      	cmp	r4, #0
    2934:	d100      	bne.n	2938 <sparkBIST+0x1d4>
    2936:	e733      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    2938:	4811      	ldr	r0, [pc, #68]	; (2980 <sparkBIST+0x21c>)
    293a:	4b10      	ldr	r3, [pc, #64]	; (297c <sparkBIST+0x218>)
    293c:	4798      	blx	r3
    return false;
    293e:	2400      	movs	r4, #0
    2940:	e72e      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    2942:	4811      	ldr	r0, [pc, #68]	; (2988 <sparkBIST+0x224>)
    2944:	4b0d      	ldr	r3, [pc, #52]	; (297c <sparkBIST+0x218>)
    2946:	4798      	blx	r3
    2948:	e7ef      	b.n	292a <sparkBIST+0x1c6>
	usbPrintf("DLL_PWRD..");
    294a:	4815      	ldr	r0, [pc, #84]	; (29a0 <sparkBIST+0x23c>)
    294c:	4b0b      	ldr	r3, [pc, #44]	; (297c <sparkBIST+0x218>)
    294e:	4798      	blx	r3
    2950:	e7ed      	b.n	292e <sparkBIST+0x1ca>
	  if(verbose)
    2952:	2c00      	cmp	r4, #0
    2954:	d101      	bne.n	295a <sparkBIST+0x1f6>
  return true;
    2956:	2401      	movs	r4, #1
    2958:	e722      	b.n	27a0 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    295a:	480b      	ldr	r0, [pc, #44]	; (2988 <sparkBIST+0x224>)
    295c:	4b07      	ldr	r3, [pc, #28]	; (297c <sparkBIST+0x218>)
    295e:	4798      	blx	r3
    2960:	e71e      	b.n	27a0 <sparkBIST+0x3c>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	000020d1 	.word	0x000020d1
    2968:	0000221d 	.word	0x0000221d
    296c:	00002139 	.word	0x00002139
    2970:	00002155 	.word	0x00002155
    2974:	000021f9 	.word	0x000021f9
    2978:	00006194 	.word	0x00006194
    297c:	00002669 	.word	0x00002669
    2980:	0000619c 	.word	0x0000619c
    2984:	42003000 	.word	0x42003000
    2988:	000061a4 	.word	0x000061a4
    298c:	000061a8 	.word	0x000061a8
    2990:	00002105 	.word	0x00002105
    2994:	000061b4 	.word	0x000061b4
    2998:	000061c0 	.word	0x000061c0
    299c:	000061cc 	.word	0x000061cc
    29a0:	000061d8 	.word	0x000061d8

000029a4 <sparkCalDLL>:

unsigned char sparkCalDLL(bool RX)
{
    29a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29a6:	0004      	movs	r4, r0
  unsigned short w;
  unsigned char dllTune;
  unsigned char MSB;

  // Only works when we are in TX mode
  startSPI();
    29a8:	4b25      	ldr	r3, [pc, #148]	; (2a40 <sparkCalDLL+0x9c>)
    29aa:	4798      	blx	r3
  if(RX)
    29ac:	2c00      	cmp	r4, #0
    29ae:	d015      	beq.n	29dc <sparkCalDLL+0x38>
  {
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x20); // Switch to RX mode
    29b0:	205f      	movs	r0, #95	; 0x5f
    29b2:	4c24      	ldr	r4, [pc, #144]	; (2a44 <sparkCalDLL+0xa0>)
    29b4:	47a0      	blx	r4
    29b6:	2020      	movs	r0, #32
    29b8:	47a0      	blx	r4
  else
  {
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
  }
  
  sendSPI(REG_DLLTUNE); MSB = sendSPI(0x00) & 0xf0; // Get MSB
    29ba:	200e      	movs	r0, #14
    29bc:	4c21      	ldr	r4, [pc, #132]	; (2a44 <sparkCalDLL+0xa0>)
    29be:	47a0      	blx	r4
    29c0:	2000      	movs	r0, #0
    29c2:	47a0      	blx	r4
    29c4:	230f      	movs	r3, #15
    29c6:	4398      	bics	r0, r3
    29c8:	b2c6      	uxtb	r6, r0
  
  while(1) // Wait until DLL is powered up
  {
    sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    29ca:	201f      	movs	r0, #31
    29cc:	4c1d      	ldr	r4, [pc, #116]	; (2a44 <sparkCalDLL+0xa0>)
    29ce:	47a0      	blx	r4
    29d0:	2000      	movs	r0, #0
    29d2:	47a0      	blx	r4
    if(w & BIT_DLLPWRD)
    29d4:	0703      	lsls	r3, r0, #28
    29d6:	d5f8      	bpl.n	29ca <sparkCalDLL+0x26>
    29d8:	2400      	movs	r4, #0
    29da:	e019      	b.n	2a10 <sparkCalDLL+0x6c>
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
    29dc:	205f      	movs	r0, #95	; 0x5f
    29de:	4c19      	ldr	r4, [pc, #100]	; (2a44 <sparkCalDLL+0xa0>)
    29e0:	47a0      	blx	r4
    29e2:	2000      	movs	r0, #0
    29e4:	47a0      	blx	r4
    29e6:	e7e8      	b.n	29ba <sparkCalDLL+0x16>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    29e8:	2110      	movs	r1, #16
    29ea:	4b17      	ldr	r3, [pc, #92]	; (2a48 <sparkCalDLL+0xa4>)
    29ec:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    29ee:	4b16      	ldr	r3, [pc, #88]	; (2a48 <sparkCalDLL+0xa4>)
    29f0:	7b9b      	ldrb	r3, [r3, #14]
    29f2:	06db      	lsls	r3, r3, #27
    29f4:	d5fb      	bpl.n	29ee <sparkCalDLL+0x4a>
		cnt++;
    29f6:	3201      	adds	r2, #1
    29f8:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    29fa:	2a0a      	cmp	r2, #10
    29fc:	d1f4      	bne.n	29e8 <sparkCalDLL+0x44>
     dllTune = MSB | ((unsigned char) i);
     sendSPI(SPI_WRITE | REG_DLLTUNE); sendSPI(dllTune); // Adjust DLL-TUNE
     
     delay(10);// Wait a bit to stabilize

     sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    29fe:	201f      	movs	r0, #31
    2a00:	4f10      	ldr	r7, [pc, #64]	; (2a44 <sparkCalDLL+0xa0>)
    2a02:	47b8      	blx	r7
    2a04:	2000      	movs	r0, #0
    2a06:	47b8      	blx	r7
     if(w & (1 << 7) )
    2a08:	0603      	lsls	r3, r0, #24
    2a0a:	d40e      	bmi.n	2a2a <sparkCalDLL+0x86>
  for(unsigned char i=0;i<16;i++)
    2a0c:	3401      	adds	r4, #1
    2a0e:	b2e4      	uxtb	r4, r4
    2a10:	2c0f      	cmp	r4, #15
    2a12:	d80a      	bhi.n	2a2a <sparkCalDLL+0x86>
     dllTune = MSB | ((unsigned char) i);
    2a14:	0025      	movs	r5, r4
    2a16:	4335      	orrs	r5, r6
     sendSPI(SPI_WRITE | REG_DLLTUNE); sendSPI(dllTune); // Adjust DLL-TUNE
    2a18:	204e      	movs	r0, #78	; 0x4e
    2a1a:	4f0a      	ldr	r7, [pc, #40]	; (2a44 <sparkCalDLL+0xa0>)
    2a1c:	47b8      	blx	r7
    2a1e:	0028      	movs	r0, r5
    2a20:	47b8      	blx	r7
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    2a22:	2200      	movs	r2, #0
    2a24:	4b08      	ldr	r3, [pc, #32]	; (2a48 <sparkCalDLL+0xa4>)
    2a26:	821a      	strh	r2, [r3, #16]
    2a28:	e7e7      	b.n	29fa <sparkCalDLL+0x56>
      break;
  }
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP); // Go to sleep
    2a2a:	205f      	movs	r0, #95	; 0x5f
    2a2c:	4c05      	ldr	r4, [pc, #20]	; (2a44 <sparkCalDLL+0xa0>)
    2a2e:	47a0      	blx	r4
    2a30:	2004      	movs	r0, #4
    2a32:	47a0      	blx	r4
  stopSPI();
    2a34:	4b05      	ldr	r3, [pc, #20]	; (2a4c <sparkCalDLL+0xa8>)
    2a36:	4798      	blx	r3

  return dllTune & 0x0f;
    2a38:	200f      	movs	r0, #15
    2a3a:	4028      	ands	r0, r5
}
    2a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00002139 	.word	0x00002139
    2a44:	00002155 	.word	0x00002155
    2a48:	42003000 	.word	0x42003000
    2a4c:	000021f9 	.word	0x000021f9

00002a50 <sparkCalVCRO>:
   // Reverse the top and bottom nibble then swap them.
   return (rev_lookup[n&0b1111] << 4) | rev_lookup[n>>4];
}

unsigned char sparkCalVCRO(unsigned short MHz)
{
    2a50:	b570      	push	{r4, r5, r6, lr}
  unsigned short w;
  unsigned char calParam;
  unsigned char ticks;

  ticks = ( ((unsigned long)MHz) * 1000) / (PLL_CYCLES /1000); // Number of VCRO cycles in one PLL cycle
    2a52:	23fa      	movs	r3, #250	; 0xfa
    2a54:	009b      	lsls	r3, r3, #2
    2a56:	4358      	muls	r0, r3
    2a58:	21a0      	movs	r1, #160	; 0xa0
    2a5a:	01c9      	lsls	r1, r1, #7
    2a5c:	4b1c      	ldr	r3, [pc, #112]	; (2ad0 <sparkCalVCRO+0x80>)
    2a5e:	4798      	blx	r3
    2a60:	b2c3      	uxtb	r3, r0

  calParam = reverse(~ticks); // Code into cal code
    2a62:	43db      	mvns	r3, r3
    2a64:	b2db      	uxtb	r3, r3
   return (rev_lookup[n&0b1111] << 4) | rev_lookup[n>>4];
    2a66:	220f      	movs	r2, #15
    2a68:	401a      	ands	r2, r3
    2a6a:	491a      	ldr	r1, [pc, #104]	; (2ad4 <sparkCalVCRO+0x84>)
    2a6c:	5c8a      	ldrb	r2, [r1, r2]
    2a6e:	0112      	lsls	r2, r2, #4
    2a70:	091b      	lsrs	r3, r3, #4
    2a72:	56cd      	ldrsb	r5, [r1, r3]
    2a74:	4315      	orrs	r5, r2
    2a76:	b2ed      	uxtb	r5, r5

  //usbPrintf("%02hx %02hx %02hx\n", ticks, ~ticks, calParam);

  startSPI();
    2a78:	4b17      	ldr	r3, [pc, #92]	; (2ad8 <sparkCalVCRO+0x88>)
    2a7a:	4798      	blx	r3
  
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
    2a7c:	205f      	movs	r0, #95	; 0x5f
    2a7e:	4c17      	ldr	r4, [pc, #92]	; (2adc <sparkCalVCRO+0x8c>)
    2a80:	47a0      	blx	r4
    2a82:	2000      	movs	r0, #0
    2a84:	47a0      	blx	r4

  while(1) // Wait until DLL is powered up
  {
    sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    2a86:	201f      	movs	r0, #31
    2a88:	4c14      	ldr	r4, [pc, #80]	; (2adc <sparkCalVCRO+0x8c>)
    2a8a:	47a0      	blx	r4
    2a8c:	2000      	movs	r0, #0
    2a8e:	47a0      	blx	r4
    if(w & BIT_DLLPWRD)
    2a90:	0703      	lsls	r3, r0, #28
    2a92:	d5f8      	bpl.n	2a86 <sparkCalVCRO+0x36>
      break;
  }
  
  sendSPI(SPI_WRITE | REG_CALIBRSET); sendSPI(calParam); // Set calParam
    2a94:	205e      	movs	r0, #94	; 0x5e
    2a96:	4c11      	ldr	r4, [pc, #68]	; (2adc <sparkCalVCRO+0x8c>)
    2a98:	47a0      	blx	r4
    2a9a:	0028      	movs	r0, r5
    2a9c:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_CALIBRAT); // Trigger calibration
    2a9e:	205f      	movs	r0, #95	; 0x5f
    2aa0:	47a0      	blx	r4
    2aa2:	2080      	movs	r0, #128	; 0x80
    2aa4:	47a0      	blx	r4

  while(1) // Wait until calibration is done
  {
    sendSPI(REG_INT2); w = sendSPI(0x00);
    2aa6:	2001      	movs	r0, #1
    2aa8:	4c0c      	ldr	r4, [pc, #48]	; (2adc <sparkCalVCRO+0x8c>)
    2aaa:	47a0      	blx	r4
    2aac:	2000      	movs	r0, #0
    2aae:	47a0      	blx	r4
    if(w & BIT_CALIBRT)
    2ab0:	0603      	lsls	r3, r0, #24
    2ab2:	d5f8      	bpl.n	2aa6 <sparkCalVCRO+0x56>
      break;
  }

  sendSPI(REG_CALIBRSET); w = sendSPI(0x00); // Get calibration result
    2ab4:	201e      	movs	r0, #30
    2ab6:	4c09      	ldr	r4, [pc, #36]	; (2adc <sparkCalVCRO+0x8c>)
    2ab8:	47a0      	blx	r4
    2aba:	2000      	movs	r0, #0
    2abc:	47a0      	blx	r4
    2abe:	0005      	movs	r5, r0
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP); // Go to sleep
    2ac0:	205f      	movs	r0, #95	; 0x5f
    2ac2:	47a0      	blx	r4
    2ac4:	2004      	movs	r0, #4
    2ac6:	47a0      	blx	r4
  stopSPI();
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <sparkCalVCRO+0x90>)
    2aca:	4798      	blx	r3

  return w;
}
    2acc:	0028      	movs	r0, r5
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    2ad0:	00004105 	.word	0x00004105
    2ad4:	00006184 	.word	0x00006184
    2ad8:	00002139 	.word	0x00002139
    2adc:	00002155 	.word	0x00002155
    2ae0:	000021f9 	.word	0x000021f9

00002ae4 <sparkRadioSetup>:

void sparkRadioSetup() // Setup the UWB
{
    2ae4:	b510      	push	{r4, lr}
  // Setup the UWB
  startSPI();
    2ae6:	4b36      	ldr	r3, [pc, #216]	; (2bc0 <sparkRadioSetup+0xdc>)
    2ae8:	4798      	blx	r3

  // Setup interrupts
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    2aea:	2040      	movs	r0, #64	; 0x40
    2aec:	4c35      	ldr	r4, [pc, #212]	; (2bc4 <sparkRadioSetup+0xe0>)
    2aee:	47a0      	blx	r4
    2af0:	2000      	movs	r0, #0
    2af2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    2af4:	2041      	movs	r0, #65	; 0x41
    2af6:	47a0      	blx	r4
    2af8:	2000      	movs	r0, #0
    2afa:	47a0      	blx	r4
  
  // Setup PLL
  sendSPI(SPI_WRITE | REG_PLLRATIO); sendSPI(0x00);
    2afc:	204c      	movs	r0, #76	; 0x4c
    2afe:	47a0      	blx	r4
    2b00:	2000      	movs	r0, #0
    2b02:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x08);
    2b04:	204d      	movs	r0, #77	; 0x4d
    2b06:	47a0      	blx	r4
    2b08:	2008      	movs	r0, #8
    2b0a:	47a0      	blx	r4

  // TX Spectrum
  sendSPI(SPI_WRITE | REG_TXPATTERN0); sendSPI(0x00);
    2b0c:	2050      	movs	r0, #80	; 0x50
    2b0e:	47a0      	blx	r4
    2b10:	2000      	movs	r0, #0
    2b12:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN1); sendSPI(0x00);
    2b14:	2051      	movs	r0, #81	; 0x51
    2b16:	47a0      	blx	r4
    2b18:	2000      	movs	r0, #0
    2b1a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN2); sendSPI(0xbd);
    2b1c:	2052      	movs	r0, #82	; 0x52
    2b1e:	47a0      	blx	r4
    2b20:	20bd      	movs	r0, #189	; 0xbd
    2b22:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN3); sendSPI(0xbd);
    2b24:	2053      	movs	r0, #83	; 0x53
    2b26:	47a0      	blx	r4
    2b28:	20bd      	movs	r0, #189	; 0xbd
    2b2a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN4); sendSPI(0xbc);
    2b2c:	2054      	movs	r0, #84	; 0x54
    2b2e:	47a0      	blx	r4
    2b30:	20bc      	movs	r0, #188	; 0xbc
    2b32:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN5); sendSPI(0xbc);
    2b34:	2055      	movs	r0, #85	; 0x55
    2b36:	47a0      	blx	r4
    2b38:	20bc      	movs	r0, #188	; 0xbc
    2b3a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN6); sendSPI(0xbb);
    2b3c:	2056      	movs	r0, #86	; 0x56
    2b3e:	47a0      	blx	r4
    2b40:	20bb      	movs	r0, #187	; 0xbb
    2b42:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN7); sendSPI(0xbb);
    2b44:	2057      	movs	r0, #87	; 0x57
    2b46:	47a0      	blx	r4
    2b48:	20bb      	movs	r0, #187	; 0xbb
    2b4a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN8); sendSPI(0xba);
    2b4c:	2058      	movs	r0, #88	; 0x58
    2b4e:	47a0      	blx	r4
    2b50:	20ba      	movs	r0, #186	; 0xba
    2b52:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN9); sendSPI(0xba);
    2b54:	2059      	movs	r0, #89	; 0x59
    2b56:	47a0      	blx	r4
    2b58:	20ba      	movs	r0, #186	; 0xba
    2b5a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN10); sendSPI(0x00);
    2b5c:	205a      	movs	r0, #90	; 0x5a
    2b5e:	47a0      	blx	r4
    2b60:	2000      	movs	r0, #0
    2b62:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN11); sendSPI(0x00);
    2b64:	205b      	movs	r0, #91	; 0x5b
    2b66:	47a0      	blx	r4
    2b68:	2000      	movs	r0, #0
    2b6a:	47a0      	blx	r4

  // Temporary radio setup for optimized link
   sendSPI(0x4e); sendSPI(0xf6);
    2b6c:	204e      	movs	r0, #78	; 0x4e
    2b6e:	47a0      	blx	r4
    2b70:	20f6      	movs	r0, #246	; 0xf6
    2b72:	47a0      	blx	r4
  //sendSPI(0x4e); sendSPI(0x0F);
  sendSPI(0x5c); sendSPI(0x1b);
    2b74:	205c      	movs	r0, #92	; 0x5c
    2b76:	47a0      	blx	r4
    2b78:	201b      	movs	r0, #27
    2b7a:	47a0      	blx	r4
  sendSPI(0x71); sendSPI(0x02);
    2b7c:	2071      	movs	r0, #113	; 0x71
    2b7e:	47a0      	blx	r4
    2b80:	2002      	movs	r0, #2
    2b82:	47a0      	blx	r4
  
  // Enable CRC
  sendSPI(SPI_WRITE | REG_CRCPOLYNO8); sendSPI(0x80);
    2b84:	2076      	movs	r0, #118	; 0x76
    2b86:	47a0      	blx	r4
    2b88:	2080      	movs	r0, #128	; 0x80
    2b8a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_CRCPOLYNO0); sendSPI(0x05);
    2b8c:	2077      	movs	r0, #119	; 0x77
    2b8e:	47a0      	blx	r4
    2b90:	2005      	movs	r0, #5
    2b92:	47a0      	blx	r4

  stopSPI();
    2b94:	4b0c      	ldr	r3, [pc, #48]	; (2bc8 <sparkRadioSetup+0xe4>)
    2b96:	4798      	blx	r3

  // Switch off
  //sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x04);
  
  // Variables and modes
  bidirectional = false;
    2b98:	2300      	movs	r3, #0
    2b9a:	4a0c      	ldr	r2, [pc, #48]	; (2bcc <sparkRadioSetup+0xe8>)
    2b9c:	7013      	strb	r3, [r2, #0]
  master = false;
    2b9e:	4a0c      	ldr	r2, [pc, #48]	; (2bd0 <sparkRadioSetup+0xec>)
    2ba0:	7013      	strb	r3, [r2, #0]
  running = false;
    2ba2:	4a0c      	ldr	r2, [pc, #48]	; (2bd4 <sparkRadioSetup+0xf0>)
    2ba4:	7013      	strb	r3, [r2, #0]
  mode = SPARK_MODE_TX;
    2ba6:	2101      	movs	r1, #1
    2ba8:	4a0b      	ldr	r2, [pc, #44]	; (2bd8 <sparkRadioSetup+0xf4>)
    2baa:	7011      	strb	r1, [r2, #0]
  sparkRXbuffer = rxData;
    2bac:	490b      	ldr	r1, [pc, #44]	; (2bdc <sparkRadioSetup+0xf8>)
    2bae:	4a0c      	ldr	r2, [pc, #48]	; (2be0 <sparkRadioSetup+0xfc>)
    2bb0:	6011      	str	r1, [r2, #0]
  sparkTXbuffer = txData;
    2bb2:	490c      	ldr	r1, [pc, #48]	; (2be4 <sparkRadioSetup+0x100>)
    2bb4:	4a0c      	ldr	r2, [pc, #48]	; (2be8 <sparkRadioSetup+0x104>)
    2bb6:	6011      	str	r1, [r2, #0]
  sparkCRCfail = false;
    2bb8:	4a0c      	ldr	r2, [pc, #48]	; (2bec <sparkRadioSetup+0x108>)
    2bba:	7013      	strb	r3, [r2, #0]
}
    2bbc:	bd10      	pop	{r4, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	00002139 	.word	0x00002139
    2bc4:	00002155 	.word	0x00002155
    2bc8:	000021f9 	.word	0x000021f9
    2bcc:	20000b34 	.word	0x20000b34
    2bd0:	20000b3b 	.word	0x20000b3b
    2bd4:	20000b20 	.word	0x20000b20
    2bd8:	20000b2d 	.word	0x20000b2d
    2bdc:	20000a18 	.word	0x20000a18
    2be0:	20000b28 	.word	0x20000b28
    2be4:	20000aa0 	.word	0x20000aa0
    2be8:	20000b30 	.word	0x20000b30
    2bec:	20000b39 	.word	0x20000b39

00002bf0 <sparkSleepSetup>:
  // Reset watchdog
  wdReset();
}

void sparkSleepSetup(unsigned char sleepMode, unsigned short packetsPerSecond, unsigned short frameLengthMicro)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
    2bf2:	000d      	movs	r5, r1
    2bf4:	0016      	movs	r6, r2
  unsigned char sleepBits;

  // Decode sleeping mode
  sleepingMode = sleepMode;
    2bf6:	4b3b      	ldr	r3, [pc, #236]	; (2ce4 <sparkSleepSetup+0xf4>)
    2bf8:	7018      	strb	r0, [r3, #0]
  switch(sleepMode)
    2bfa:	2801      	cmp	r0, #1
    2bfc:	d053      	beq.n	2ca6 <sparkSleepSetup+0xb6>
    2bfe:	2800      	cmp	r0, #0
    2c00:	d057      	beq.n	2cb2 <sparkSleepSetup+0xc2>
    2c02:	2802      	cmp	r0, #2
    2c04:	d051      	beq.n	2caa <sparkSleepSetup+0xba>
    2c06:	2803      	cmp	r0, #3
    2c08:	d051      	beq.n	2cae <sparkSleepSetup+0xbe>
      sleepBits = BIT_SLPDEPTH_DEEP;
      break;
  }
   
  // Number of XTAL clock cycles to sleep, excluding PLL startup in deep sleep
  if(sleepingMode == SPARK_SLEEP_DEEP)
    2c0a:	2803      	cmp	r0, #3
    2c0c:	d053      	beq.n	2cb6 <sparkSleepSetup+0xc6>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond - PLL_STARTUP_CYCLES;
  else if(sleepingMode == SPARK_SLEEP_SHALLOW)
    2c0e:	2802      	cmp	r0, #2
    2c10:	d05a      	beq.n	2cc8 <sparkSleepSetup+0xd8>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond;
  else
    sleep_cycles = PLL_CYCLES / packetsPerSecond;
    2c12:	0029      	movs	r1, r5
    2c14:	4834      	ldr	r0, [pc, #208]	; (2ce8 <sparkSleepSetup+0xf8>)
    2c16:	4b35      	ldr	r3, [pc, #212]	; (2cec <sparkSleepSetup+0xfc>)
    2c18:	4798      	blx	r3
    2c1a:	4b35      	ldr	r3, [pc, #212]	; (2cf0 <sparkSleepSetup+0x100>)
    2c1c:	8018      	strh	r0, [r3, #0]

  // Number of PLL clock cycle for the frame, equal to RX timeout, not meaningful for TX (unless we want to center TX in the frame)
  frame_cycles = ( ((unsigned long)PLL_CYCLES) * ((unsigned long)frameLengthMicro)) / 1024 / 1024 / 8; // REG_RXPERIOD is in PLL cycles X8
    2c1e:	4a32      	ldr	r2, [pc, #200]	; (2ce8 <sparkSleepSetup+0xf8>)
    2c20:	4372      	muls	r2, r6
    2c22:	0dd2      	lsrs	r2, r2, #23
    2c24:	4b33      	ldr	r3, [pc, #204]	; (2cf4 <sparkSleepSetup+0x104>)
    2c26:	801a      	strh	r2, [r3, #0]
  
  // Power Cycling Setup
  startSPI();
    2c28:	4b33      	ldr	r3, [pc, #204]	; (2cf8 <sparkSleepSetup+0x108>)
    2c2a:	4798      	blx	r3
  if(sleepingMode == SPARK_SLEEP_NONE) 
    2c2c:	4b2d      	ldr	r3, [pc, #180]	; (2ce4 <sparkSleepSetup+0xf4>)
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d151      	bne.n	2cd8 <sparkSleepSetup+0xe8>
  {
    sleepCfg = sleepBits;
    2c34:	4b31      	ldr	r3, [pc, #196]	; (2cfc <sparkSleepSetup+0x10c>)
    2c36:	701c      	strb	r4, [r3, #0]
  }
  else
  {
    sleepCfg = sleepBits | BIT_AUSRXTO | BIT_AUSTXEND | BIT_AUSRXEND; // auto sleep on RX reception and timeout
  }
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(sleepCfg); 
    2c38:	2044      	movs	r0, #68	; 0x44
    2c3a:	4c31      	ldr	r4, [pc, #196]	; (2d00 <sparkSleepSetup+0x110>)
    2c3c:	47a0      	blx	r4
    2c3e:	4b2f      	ldr	r3, [pc, #188]	; (2cfc <sparkSleepSetup+0x10c>)
    2c40:	7818      	ldrb	r0, [r3, #0]
    2c42:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI(sleep_cycles % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI(sleep_cycles / 256); // Set sleep timer
    2c44:	2047      	movs	r0, #71	; 0x47
    2c46:	47a0      	blx	r4
    2c48:	4e29      	ldr	r6, [pc, #164]	; (2cf0 <sparkSleepSetup+0x100>)
    2c4a:	7830      	ldrb	r0, [r6, #0]
    2c4c:	47a0      	blx	r4
    2c4e:	2046      	movs	r0, #70	; 0x46
    2c50:	47a0      	blx	r4
    2c52:	8830      	ldrh	r0, [r6, #0]
    2c54:	0a00      	lsrs	r0, r0, #8
    2c56:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_PLLPWRUP); sendSPI(PLL_STARTUP_CYCLES); // 3ms PLL powerup
    2c58:	204b      	movs	r0, #75	; 0x4b
    2c5a:	47a0      	blx	r4
    2c5c:	2020      	movs	r0, #32
    2c5e:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_RXPERIOD0); sendSPI(frame_cycles % 256); sendSPI(SPI_WRITE | REG_RXPERIOD8); sendSPI(frame_cycles / 256); // Set timer to approx 30 Hz
    2c60:	206d      	movs	r0, #109	; 0x6d
    2c62:	47a0      	blx	r4
    2c64:	4e23      	ldr	r6, [pc, #140]	; (2cf4 <sparkSleepSetup+0x104>)
    2c66:	7830      	ldrb	r0, [r6, #0]
    2c68:	47a0      	blx	r4
    2c6a:	206c      	movs	r0, #108	; 0x6c
    2c6c:	47a0      	blx	r4
    2c6e:	8830      	ldrh	r0, [r6, #0]
    2c70:	0a00      	lsrs	r0, r0, #8
    2c72:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXDELAY); sendSPI(0xff); // Move TX frame as far back as we can
    2c74:	2049      	movs	r0, #73	; 0x49
    2c76:	47a0      	blx	r4
    2c78:	20ff      	movs	r0, #255	; 0xff
    2c7a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    2c7c:	2040      	movs	r0, #64	; 0x40
    2c7e:	47a0      	blx	r4
    2c80:	2000      	movs	r0, #0
    2c82:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00); 
    2c84:	2041      	movs	r0, #65	; 0x41
    2c86:	47a0      	blx	r4
    2c88:	2000      	movs	r0, #0
    2c8a:	47a0      	blx	r4
  stopSPI();
    2c8c:	4b1d      	ldr	r3, [pc, #116]	; (2d04 <sparkSleepSetup+0x114>)
    2c8e:	4798      	blx	r3

  // Watchdog
  unsigned short wdTicks = 2*PLL_CYCLES / packetsPerSecond;
    2c90:	0029      	movs	r1, r5
    2c92:	481d      	ldr	r0, [pc, #116]	; (2d08 <sparkSleepSetup+0x118>)
    2c94:	4b15      	ldr	r3, [pc, #84]	; (2cec <sparkSleepSetup+0xfc>)
    2c96:	4798      	blx	r3
    2c98:	b280      	uxth	r0, r0
  if(wdTicks < 1)
    2c9a:	2800      	cmp	r0, #0
    2c9c:	d100      	bne.n	2ca0 <sparkSleepSetup+0xb0>
    wdTicks = 1;
    2c9e:	3001      	adds	r0, #1
  wdSetup(wdTicks);
    2ca0:	4b1a      	ldr	r3, [pc, #104]	; (2d0c <sparkSleepSetup+0x11c>)
    2ca2:	4798      	blx	r3
}
    2ca4:	bd70      	pop	{r4, r5, r6, pc}
      sleepBits = BIT_SLPDEPTH_IDLE;
    2ca6:	2400      	movs	r4, #0
      break;
    2ca8:	e7af      	b.n	2c0a <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_SHALLOW;
    2caa:	2440      	movs	r4, #64	; 0x40
      break;
    2cac:	e7ad      	b.n	2c0a <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_DEEP;
    2cae:	24c0      	movs	r4, #192	; 0xc0
      break;
    2cb0:	e7ab      	b.n	2c0a <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_IDLE; // BUT DON'T GO TO SLEEP 
    2cb2:	0004      	movs	r4, r0
    2cb4:	e7a9      	b.n	2c0a <sparkSleepSetup+0x1a>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond - PLL_STARTUP_CYCLES;
    2cb6:	0029      	movs	r1, r5
    2cb8:	2080      	movs	r0, #128	; 0x80
    2cba:	0200      	lsls	r0, r0, #8
    2cbc:	4b0b      	ldr	r3, [pc, #44]	; (2cec <sparkSleepSetup+0xfc>)
    2cbe:	4798      	blx	r3
    2cc0:	3820      	subs	r0, #32
    2cc2:	4b0b      	ldr	r3, [pc, #44]	; (2cf0 <sparkSleepSetup+0x100>)
    2cc4:	8018      	strh	r0, [r3, #0]
    2cc6:	e7aa      	b.n	2c1e <sparkSleepSetup+0x2e>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond;
    2cc8:	0029      	movs	r1, r5
    2cca:	2080      	movs	r0, #128	; 0x80
    2ccc:	0200      	lsls	r0, r0, #8
    2cce:	4b07      	ldr	r3, [pc, #28]	; (2cec <sparkSleepSetup+0xfc>)
    2cd0:	4798      	blx	r3
    2cd2:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <sparkSleepSetup+0x100>)
    2cd4:	8018      	strh	r0, [r3, #0]
    2cd6:	e7a2      	b.n	2c1e <sparkSleepSetup+0x2e>
    sleepCfg = sleepBits | BIT_AUSRXTO | BIT_AUSTXEND | BIT_AUSRXEND; // auto sleep on RX reception and timeout
    2cd8:	2338      	movs	r3, #56	; 0x38
    2cda:	431c      	orrs	r4, r3
    2cdc:	4b07      	ldr	r3, [pc, #28]	; (2cfc <sparkSleepSetup+0x10c>)
    2cde:	701c      	strb	r4, [r3, #0]
    2ce0:	e7aa      	b.n	2c38 <sparkSleepSetup+0x48>
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	20000a9c 	.word	0x20000a9c
    2ce8:	01388000 	.word	0x01388000
    2cec:	00004219 	.word	0x00004219
    2cf0:	20000b3c 	.word	0x20000b3c
    2cf4:	20000a98 	.word	0x20000a98
    2cf8:	00002139 	.word	0x00002139
    2cfc:	20000b35 	.word	0x20000b35
    2d00:	00002155 	.word	0x00002155
    2d04:	000021f9 	.word	0x000021f9
    2d08:	02710000 	.word	0x02710000
    2d0c:	000026fd 	.word	0x000026fd

00002d10 <applySleepOffset>:

void applySleepOffset(short offset)
{
    2d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  short new_cycles;
  
  if(sleepingMode == SPARK_SLEEP_IDLE)
    2d12:	4b13      	ldr	r3, [pc, #76]	; (2d60 <applySleepOffset+0x50>)
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	2b01      	cmp	r3, #1
    2d18:	d01b      	beq.n	2d52 <applySleepOffset+0x42>
    new_cycles = ((short) sleep_cycles) + offset*625;
  else
    new_cycles = ((short) sleep_cycles) + offset;
    2d1a:	4b12      	ldr	r3, [pc, #72]	; (2d64 <applySleepOffset+0x54>)
    2d1c:	881e      	ldrh	r6, [r3, #0]
    2d1e:	1836      	adds	r6, r6, r0
    2d20:	b236      	sxth	r6, r6
    
  startSPI();
    2d22:	4b11      	ldr	r3, [pc, #68]	; (2d68 <applySleepOffset+0x58>)
    2d24:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI((new_cycles) % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI((new_cycles) / 256);
    2d26:	2047      	movs	r0, #71	; 0x47
    2d28:	4d10      	ldr	r5, [pc, #64]	; (2d6c <applySleepOffset+0x5c>)
    2d2a:	47a8      	blx	r5
    2d2c:	17f7      	asrs	r7, r6, #31
    2d2e:	0e3b      	lsrs	r3, r7, #24
    2d30:	18f0      	adds	r0, r6, r3
    2d32:	24ff      	movs	r4, #255	; 0xff
    2d34:	4020      	ands	r0, r4
    2d36:	1ac0      	subs	r0, r0, r3
    2d38:	b2c0      	uxtb	r0, r0
    2d3a:	47a8      	blx	r5
    2d3c:	2046      	movs	r0, #70	; 0x46
    2d3e:	47a8      	blx	r5
    2d40:	0020      	movs	r0, r4
    2d42:	4038      	ands	r0, r7
    2d44:	1980      	adds	r0, r0, r6
    2d46:	1200      	asrs	r0, r0, #8
    2d48:	b2c0      	uxtb	r0, r0
    2d4a:	47a8      	blx	r5
  //sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI(sleep_cycles % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI(sleep_cycles / 256); // Set timer to approx 30 Hz
  stopSPI();
    2d4c:	4b08      	ldr	r3, [pc, #32]	; (2d70 <applySleepOffset+0x60>)
    2d4e:	4798      	blx	r3
}
    2d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_cycles = ((short) sleep_cycles) + offset*625;
    2d52:	4b04      	ldr	r3, [pc, #16]	; (2d64 <applySleepOffset+0x54>)
    2d54:	881e      	ldrh	r6, [r3, #0]
    2d56:	4c07      	ldr	r4, [pc, #28]	; (2d74 <applySleepOffset+0x64>)
    2d58:	4360      	muls	r0, r4
    2d5a:	1836      	adds	r6, r6, r0
    2d5c:	b236      	sxth	r6, r6
    2d5e:	e7e0      	b.n	2d22 <applySleepOffset+0x12>
    2d60:	20000a9c 	.word	0x20000a9c
    2d64:	20000b3c 	.word	0x20000b3c
    2d68:	00002139 	.word	0x00002139
    2d6c:	00002155 	.word	0x00002155
    2d70:	000021f9 	.word	0x000021f9
    2d74:	00000271 	.word	0x00000271

00002d78 <sparkPacketSetup>:

void sparkPacketSetup(unsigned char minNoiLvl,unsigned char minPulAmp, unsigned char minSigStr, unsigned char preambleSize, unsigned char packetSize, unsigned short syncWord, bool randomData)
{
    2d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d7a:	b085      	sub	sp, #20
    2d7c:	9000      	str	r0, [sp, #0]
    2d7e:	9101      	str	r1, [sp, #4]
    2d80:	9202      	str	r2, [sp, #8]
    2d82:	9303      	str	r3, [sp, #12]
    2d84:	ab0a      	add	r3, sp, #40	; 0x28
    2d86:	781f      	ldrb	r7, [r3, #0]
    2d88:	ab0b      	add	r3, sp, #44	; 0x2c
    2d8a:	881e      	ldrh	r6, [r3, #0]
    2d8c:	ab0c      	add	r3, sp, #48	; 0x30
    2d8e:	781b      	ldrb	r3, [r3, #0]
  packetNumBytes = packetSize;
    2d90:	4a1e      	ldr	r2, [pc, #120]	; (2e0c <sparkPacketSetup+0x94>)
    2d92:	7017      	strb	r7, [r2, #0]
  packetRandom = randomData;
    2d94:	4c1e      	ldr	r4, [pc, #120]	; (2e10 <sparkPacketSetup+0x98>)
    2d96:	7023      	strb	r3, [r4, #0]
  
  startSPI();
    2d98:	4b1e      	ldr	r3, [pc, #120]	; (2e14 <sparkPacketSetup+0x9c>)
    2d9a:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_PREAMBLEN); sendSPI(preambleSize); // PREAMBLEN, maximum 64
    2d9c:	2073      	movs	r0, #115	; 0x73
    2d9e:	4d1e      	ldr	r5, [pc, #120]	; (2e18 <sparkPacketSetup+0xa0>)
    2da0:	47a8      	blx	r5
    2da2:	9803      	ldr	r0, [sp, #12]
    2da4:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_TXPKTSIZE ); sendSPI(packetSize); // TXPKTSIZE
    2da6:	207c      	movs	r0, #124	; 0x7c
    2da8:	47a8      	blx	r5
    2daa:	0038      	movs	r0, r7
    2dac:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_RXPKTSIZE ); sendSPI(packetSize); // RXPKTSIZE
    2dae:	207d      	movs	r0, #125	; 0x7d
    2db0:	47a8      	blx	r5
    2db2:	0038      	movs	r0, r7
    2db4:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_SYNCWORD8); sendSPI(syncWord / 256); // SYNBYTE
    2db6:	2074      	movs	r0, #116	; 0x74
    2db8:	47a8      	blx	r5
    2dba:	0a30      	lsrs	r0, r6, #8
    2dbc:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_SYNCWORD0); sendSPI(syncWord % 256); // SYNBYTE
    2dbe:	2075      	movs	r0, #117	; 0x75
    2dc0:	47a8      	blx	r5
    2dc2:	b2f0      	uxtb	r0, r6
    2dc4:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINNOILVL); sendSPI(minNoiLvl); // 
    2dc6:	2069      	movs	r0, #105	; 0x69
    2dc8:	47a8      	blx	r5
    2dca:	9800      	ldr	r0, [sp, #0]
    2dcc:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINPULAMP); sendSPI(minPulAmp); // 
    2dce:	206a      	movs	r0, #106	; 0x6a
    2dd0:	47a8      	blx	r5
    2dd2:	9801      	ldr	r0, [sp, #4]
    2dd4:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINSIGSTR); sendSPI(minSigStr); // 
    2dd6:	206b      	movs	r0, #107	; 0x6b
    2dd8:	47a8      	blx	r5
    2dda:	9802      	ldr	r0, [sp, #8]
    2ddc:	47a8      	blx	r5
  //sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10 | 0x08); // Data src to random LFSR
  if(packetRandom)
    2dde:	7823      	ldrb	r3, [r4, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d10d      	bne.n	2e00 <sparkPacketSetup+0x88>
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10); // Data src to random LFSR
  }
  else
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x00);
    2de4:	2070      	movs	r0, #112	; 0x70
    2de6:	4c0c      	ldr	r4, [pc, #48]	; (2e18 <sparkPacketSetup+0xa0>)
    2de8:	47a0      	blx	r4
    2dea:	2000      	movs	r0, #0
    2dec:	47a0      	blx	r4
  }
  sendSPI(SPI_WRITE | REG_PREFRAME); sendSPI(0x1a); // Preamble check and relaxed syncword check
    2dee:	2072      	movs	r0, #114	; 0x72
    2df0:	4c09      	ldr	r4, [pc, #36]	; (2e18 <sparkPacketSetup+0xa0>)
    2df2:	47a0      	blx	r4
    2df4:	201a      	movs	r0, #26
    2df6:	47a0      	blx	r4
  //sendSPI(SPI_WRITE | REG_MAXNOILVL); sendSPI(0x1b); // Put noise down a little bit

  stopSPI();
    2df8:	4b08      	ldr	r3, [pc, #32]	; (2e1c <sparkPacketSetup+0xa4>)
    2dfa:	4798      	blx	r3
}
    2dfc:	b005      	add	sp, #20
    2dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10); // Data src to random LFSR
    2e00:	2070      	movs	r0, #112	; 0x70
    2e02:	4c05      	ldr	r4, [pc, #20]	; (2e18 <sparkPacketSetup+0xa0>)
    2e04:	47a0      	blx	r4
    2e06:	2010      	movs	r0, #16
    2e08:	47a0      	blx	r4
    2e0a:	e7f0      	b.n	2dee <sparkPacketSetup+0x76>
    2e0c:	20000b38 	.word	0x20000b38
    2e10:	20000b2c 	.word	0x20000b2c
    2e14:	00002139 	.word	0x00002139
    2e18:	00002155 	.word	0x00002155
    2e1c:	000021f9 	.word	0x000021f9

00002e20 <sparkSpectralSetup>:

void sparkSpectralSetup(unsigned char *mask)
{
    2e20:	b570      	push	{r4, r5, r6, lr}
    2e22:	0005      	movs	r5, r0
	startSPI();
    2e24:	4b08      	ldr	r3, [pc, #32]	; (2e48 <sparkSpectralSetup+0x28>)
    2e26:	4798      	blx	r3
	sendSPI(SPI_WRITE | SPI_BURST | REG_TXPATTERN0);
    2e28:	20d0      	movs	r0, #208	; 0xd0
    2e2a:	4b08      	ldr	r3, [pc, #32]	; (2e4c <sparkSpectralSetup+0x2c>)
    2e2c:	4798      	blx	r3
	for(unsigned char i=0;i<12;i++)
    2e2e:	2400      	movs	r4, #0
    2e30:	e004      	b.n	2e3c <sparkSpectralSetup+0x1c>
		sendSPI(mask[i]);	
    2e32:	5d28      	ldrb	r0, [r5, r4]
    2e34:	4b05      	ldr	r3, [pc, #20]	; (2e4c <sparkSpectralSetup+0x2c>)
    2e36:	4798      	blx	r3
	for(unsigned char i=0;i<12;i++)
    2e38:	3401      	adds	r4, #1
    2e3a:	b2e4      	uxtb	r4, r4
    2e3c:	2c0b      	cmp	r4, #11
    2e3e:	d9f8      	bls.n	2e32 <sparkSpectralSetup+0x12>
	stopSPI();
    2e40:	4b03      	ldr	r3, [pc, #12]	; (2e50 <sparkSpectralSetup+0x30>)
    2e42:	4798      	blx	r3
}
    2e44:	bd70      	pop	{r4, r5, r6, pc}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	00002139 	.word	0x00002139
    2e4c:	00002155 	.word	0x00002155
    2e50:	000021f9 	.word	0x000021f9

00002e54 <sparkPushTX>:

void sparkPushTX(unsigned char start, unsigned char stop)
{
    2e54:	b570      	push	{r4, r5, r6, lr}
    2e56:	0005      	movs	r5, r0
    2e58:	000c      	movs	r4, r1
	startSPI();	
    2e5a:	4b07      	ldr	r3, [pc, #28]	; (2e78 <sparkPushTX+0x24>)
    2e5c:	4798      	blx	r3
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
    2e5e:	20ff      	movs	r0, #255	; 0xff
    2e60:	4b06      	ldr	r3, [pc, #24]	; (2e7c <sparkPushTX+0x28>)
    2e62:	4798      	blx	r3
	pushSPI(&txData[start], stop-start);
    2e64:	1b61      	subs	r1, r4, r5
    2e66:	b2c9      	uxtb	r1, r1
    2e68:	4805      	ldr	r0, [pc, #20]	; (2e80 <sparkPushTX+0x2c>)
    2e6a:	1828      	adds	r0, r5, r0
    2e6c:	4b05      	ldr	r3, [pc, #20]	; (2e84 <sparkPushTX+0x30>)
    2e6e:	4798      	blx	r3
	stopSPI();
    2e70:	4b05      	ldr	r3, [pc, #20]	; (2e88 <sparkPushTX+0x34>)
    2e72:	4798      	blx	r3
}
    2e74:	bd70      	pop	{r4, r5, r6, pc}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	00002139 	.word	0x00002139
    2e7c:	00002155 	.word	0x00002155
    2e80:	20000aa0 	.word	0x20000aa0
    2e84:	00002175 	.word	0x00002175
    2e88:	000021f9 	.word	0x000021f9

00002e8c <sparkPullRX>:

void sparkPullRX(unsigned char start, unsigned char stop)
{
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	0005      	movs	r5, r0
    2e90:	000c      	movs	r4, r1
	startSPI();
    2e92:	4b07      	ldr	r3, [pc, #28]	; (2eb0 <sparkPullRX+0x24>)
    2e94:	4798      	blx	r3
    sendSPI(SPI_BURST | REG_FIFO); 
    2e96:	20bf      	movs	r0, #191	; 0xbf
    2e98:	4b06      	ldr	r3, [pc, #24]	; (2eb4 <sparkPullRX+0x28>)
    2e9a:	4798      	blx	r3
	pullSPI(&rxData[start], stop-start);		
    2e9c:	1b61      	subs	r1, r4, r5
    2e9e:	b2c9      	uxtb	r1, r1
    2ea0:	4805      	ldr	r0, [pc, #20]	; (2eb8 <sparkPullRX+0x2c>)
    2ea2:	1828      	adds	r0, r5, r0
    2ea4:	4b05      	ldr	r3, [pc, #20]	; (2ebc <sparkPullRX+0x30>)
    2ea6:	4798      	blx	r3
    stopSPI();	
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <sparkPullRX+0x34>)
    2eaa:	4798      	blx	r3
}
    2eac:	bd70      	pop	{r4, r5, r6, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	00002139 	.word	0x00002139
    2eb4:	00002155 	.word	0x00002155
    2eb8:	20000a18 	.word	0x20000a18
    2ebc:	000021b5 	.word	0x000021b5
    2ec0:	000021f9 	.word	0x000021f9

00002ec4 <sparkStartRadio>:

void sparkStartRadio()
{
    2ec4:	b570      	push	{r4, r5, r6, lr}
  clockGated = true;
    2ec6:	2201      	movs	r2, #1
    2ec8:	4b45      	ldr	r3, [pc, #276]	; (2fe0 <sparkStartRadio+0x11c>)
    2eca:	701a      	strb	r2, [r3, #0]
  wakeupWasLast = false;
    2ecc:	2200      	movs	r2, #0
    2ece:	4b45      	ldr	r3, [pc, #276]	; (2fe4 <sparkStartRadio+0x120>)
    2ed0:	701a      	strb	r2, [r3, #0]
  enableClockGate();
    2ed2:	4b45      	ldr	r3, [pc, #276]	; (2fe8 <sparkStartRadio+0x124>)
    2ed4:	4798      	blx	r3
  
  // Start the cycle
  startSPI();
    2ed6:	4b45      	ldr	r3, [pc, #276]	; (2fec <sparkStartRadio+0x128>)
    2ed8:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(sleepCfg);
    2eda:	2044      	movs	r0, #68	; 0x44
    2edc:	4c44      	ldr	r4, [pc, #272]	; (2ff0 <sparkStartRadio+0x12c>)
    2ede:	47a0      	blx	r4
    2ee0:	4b44      	ldr	r3, [pc, #272]	; (2ff4 <sparkStartRadio+0x130>)
    2ee2:	7818      	ldrb	r0, [r3, #0]
    2ee4:	47a0      	blx	r4
  stopSPI();
    2ee6:	4b44      	ldr	r3, [pc, #272]	; (2ff8 <sparkStartRadio+0x134>)
    2ee8:	4798      	blx	r3
  
  if(sleepingMode == SPARK_SLEEP_NONE)
    2eea:	4b44      	ldr	r3, [pc, #272]	; (2ffc <sparkStartRadio+0x138>)
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d12f      	bne.n	2f52 <sparkStartRadio+0x8e>
  {
    switch(mode)
    2ef2:	4b43      	ldr	r3, [pc, #268]	; (3000 <sparkStartRadio+0x13c>)
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d013      	beq.n	2f22 <sparkStartRadio+0x5e>
    2efa:	2b01      	cmp	r3, #1
    2efc:	d01b      	beq.n	2f36 <sparkStartRadio+0x72>
    else
      cycling = false;
  }

  // Flush TX if required
  startSPI();
    2efe:	4b3b      	ldr	r3, [pc, #236]	; (2fec <sparkStartRadio+0x128>)
    2f00:	4798      	blx	r3
  //sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_FLUSHTX | BIT_FLUSHRX);
  stopSPI();
    2f02:	4b3d      	ldr	r3, [pc, #244]	; (2ff8 <sparkStartRadio+0x134>)
    2f04:	4798      	blx	r3
  if(mode == SPARK_MODE_TX)
    2f06:	4b3e      	ldr	r3, [pc, #248]	; (3000 <sparkStartRadio+0x13c>)
    2f08:	781b      	ldrb	r3, [r3, #0]
    2f0a:	2b01      	cmp	r3, #1
    2f0c:	d050      	beq.n	2fb0 <sparkStartRadio+0xec>
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
	pushSPI(txData, packetNumBytes);
	stopSPI();	
  }
	
  enableExtInt();
    2f0e:	4b3d      	ldr	r3, [pc, #244]	; (3004 <sparkStartRadio+0x140>)
    2f10:	4798      	blx	r3

  // Enable watchdog
  if(sleepingMode != SPARK_SLEEP_NONE)
    2f12:	4b3a      	ldr	r3, [pc, #232]	; (2ffc <sparkStartRadio+0x138>)
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d15e      	bne.n	2fd8 <sparkStartRadio+0x114>
	  wdEnable();
	  
  running = true;
    2f1a:	2201      	movs	r2, #1
    2f1c:	4b3a      	ldr	r3, [pc, #232]	; (3008 <sparkStartRadio+0x144>)
    2f1e:	701a      	strb	r2, [r3, #0]
}
    2f20:	bd70      	pop	{r4, r5, r6, pc}
          startSPI();
    2f22:	4b32      	ldr	r3, [pc, #200]	; (2fec <sparkStartRadio+0x128>)
    2f24:	4798      	blx	r3
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_RXMODE);
    2f26:	205f      	movs	r0, #95	; 0x5f
    2f28:	4c31      	ldr	r4, [pc, #196]	; (2ff0 <sparkStartRadio+0x12c>)
    2f2a:	47a0      	blx	r4
    2f2c:	2020      	movs	r0, #32
    2f2e:	47a0      	blx	r4
          stopSPI();
    2f30:	4b31      	ldr	r3, [pc, #196]	; (2ff8 <sparkStartRadio+0x134>)
    2f32:	4798      	blx	r3
          break;
    2f34:	e7e3      	b.n	2efe <sparkStartRadio+0x3a>
          startSPI();
    2f36:	4b2d      	ldr	r3, [pc, #180]	; (2fec <sparkStartRadio+0x128>)
    2f38:	4798      	blx	r3
          sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    2f3a:	2040      	movs	r0, #64	; 0x40
    2f3c:	4c2c      	ldr	r4, [pc, #176]	; (2ff0 <sparkStartRadio+0x12c>)
    2f3e:	47a0      	blx	r4
    2f40:	2000      	movs	r0, #0
    2f42:	47a0      	blx	r4
          sendSPI(SPI_WRITE | REG_INT2); sendSPI(BIT_XOTIMER);
    2f44:	2041      	movs	r0, #65	; 0x41
    2f46:	47a0      	blx	r4
    2f48:	2040      	movs	r0, #64	; 0x40
    2f4a:	47a0      	blx	r4
          stopSPI();
    2f4c:	4b2a      	ldr	r3, [pc, #168]	; (2ff8 <sparkStartRadio+0x134>)
    2f4e:	4798      	blx	r3
          break;
    2f50:	e7d5      	b.n	2efe <sparkStartRadio+0x3a>
    startSPI();
    2f52:	4b26      	ldr	r3, [pc, #152]	; (2fec <sparkStartRadio+0x128>)
    2f54:	4798      	blx	r3
    sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x01); // Autowakeup
    2f56:	2045      	movs	r0, #69	; 0x45
    2f58:	4c25      	ldr	r4, [pc, #148]	; (2ff0 <sparkStartRadio+0x12c>)
    2f5a:	47a0      	blx	r4
    2f5c:	2001      	movs	r0, #1
    2f5e:	47a0      	blx	r4
		sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    2f60:	2040      	movs	r0, #64	; 0x40
    2f62:	47a0      	blx	r4
    2f64:	2058      	movs	r0, #88	; 0x58
    2f66:	47a0      	blx	r4
    sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT);
    2f68:	2041      	movs	r0, #65	; 0x41
    2f6a:	47a0      	blx	r4
    2f6c:	2020      	movs	r0, #32
    2f6e:	47a0      	blx	r4
    switch(mode)
    2f70:	4b23      	ldr	r3, [pc, #140]	; (3000 <sparkStartRadio+0x13c>)
    2f72:	781b      	ldrb	r3, [r3, #0]
    2f74:	2b00      	cmp	r3, #0
    2f76:	d00b      	beq.n	2f90 <sparkStartRadio+0xcc>
    2f78:	2b01      	cmp	r3, #1
    2f7a:	d00f      	beq.n	2f9c <sparkStartRadio+0xd8>
    stopSPI();
    2f7c:	4b1e      	ldr	r3, [pc, #120]	; (2ff8 <sparkStartRadio+0x134>)
    2f7e:	4798      	blx	r3
    if(!bidirectional)
    2f80:	4b22      	ldr	r3, [pc, #136]	; (300c <sparkStartRadio+0x148>)
    2f82:	781b      	ldrb	r3, [r3, #0]
    2f84:	2b00      	cmp	r3, #0
    2f86:	d10f      	bne.n	2fa8 <sparkStartRadio+0xe4>
      cycling = true;
    2f88:	2201      	movs	r2, #1
    2f8a:	4b21      	ldr	r3, [pc, #132]	; (3010 <sparkStartRadio+0x14c>)
    2f8c:	701a      	strb	r2, [r3, #0]
    2f8e:	e7b6      	b.n	2efe <sparkStartRadio+0x3a>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    2f90:	205f      	movs	r0, #95	; 0x5f
    2f92:	4c17      	ldr	r4, [pc, #92]	; (2ff0 <sparkStartRadio+0x12c>)
    2f94:	47a0      	blx	r4
    2f96:	2024      	movs	r0, #36	; 0x24
    2f98:	47a0      	blx	r4
          break;
    2f9a:	e7ef      	b.n	2f7c <sparkStartRadio+0xb8>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    2f9c:	205f      	movs	r0, #95	; 0x5f
    2f9e:	4c14      	ldr	r4, [pc, #80]	; (2ff0 <sparkStartRadio+0x12c>)
    2fa0:	47a0      	blx	r4
    2fa2:	2014      	movs	r0, #20
    2fa4:	47a0      	blx	r4
          break;
    2fa6:	e7e9      	b.n	2f7c <sparkStartRadio+0xb8>
      cycling = false;
    2fa8:	2200      	movs	r2, #0
    2faa:	4b19      	ldr	r3, [pc, #100]	; (3010 <sparkStartRadio+0x14c>)
    2fac:	701a      	strb	r2, [r3, #0]
    2fae:	e7a6      	b.n	2efe <sparkStartRadio+0x3a>
	callbackPacketSend(packetNumBytes);
    2fb0:	4d18      	ldr	r5, [pc, #96]	; (3014 <sparkStartRadio+0x150>)
    2fb2:	7828      	ldrb	r0, [r5, #0]
    2fb4:	4b18      	ldr	r3, [pc, #96]	; (3018 <sparkStartRadio+0x154>)
    2fb6:	4798      	blx	r3
	startSPI();
    2fb8:	4b0c      	ldr	r3, [pc, #48]	; (2fec <sparkStartRadio+0x128>)
    2fba:	4798      	blx	r3
	sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    2fbc:	201f      	movs	r0, #31
    2fbe:	4c0c      	ldr	r4, [pc, #48]	; (2ff0 <sparkStartRadio+0x12c>)
    2fc0:	47a0      	blx	r4
    2fc2:	2001      	movs	r0, #1
    2fc4:	47a0      	blx	r4
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
    2fc6:	20ff      	movs	r0, #255	; 0xff
    2fc8:	47a0      	blx	r4
	pushSPI(txData, packetNumBytes);
    2fca:	7829      	ldrb	r1, [r5, #0]
    2fcc:	4813      	ldr	r0, [pc, #76]	; (301c <sparkStartRadio+0x158>)
    2fce:	4b14      	ldr	r3, [pc, #80]	; (3020 <sparkStartRadio+0x15c>)
    2fd0:	4798      	blx	r3
	stopSPI();	
    2fd2:	4b09      	ldr	r3, [pc, #36]	; (2ff8 <sparkStartRadio+0x134>)
    2fd4:	4798      	blx	r3
    2fd6:	e79a      	b.n	2f0e <sparkStartRadio+0x4a>
	  wdEnable();
    2fd8:	4b12      	ldr	r3, [pc, #72]	; (3024 <sparkStartRadio+0x160>)
    2fda:	4798      	blx	r3
    2fdc:	e79d      	b.n	2f1a <sparkStartRadio+0x56>
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	20000b2e 	.word	0x20000b2e
    2fe4:	20000a9a 	.word	0x20000a9a
    2fe8:	000020f1 	.word	0x000020f1
    2fec:	00002139 	.word	0x00002139
    2ff0:	00002155 	.word	0x00002155
    2ff4:	20000b35 	.word	0x20000b35
    2ff8:	000021f9 	.word	0x000021f9
    2ffc:	20000a9c 	.word	0x20000a9c
    3000:	20000b2d 	.word	0x20000b2d
    3004:	000020b5 	.word	0x000020b5
    3008:	20000b20 	.word	0x20000b20
    300c:	20000b34 	.word	0x20000b34
    3010:	20000b21 	.word	0x20000b21
    3014:	20000b38 	.word	0x20000b38
    3018:	00000809 	.word	0x00000809
    301c:	20000aa0 	.word	0x20000aa0
    3020:	00002175 	.word	0x00002175
    3024:	00002701 	.word	0x00002701

00003028 <sparkGetMode>:
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
}

unsigned char sparkGetMode()
{
  return mode;
    3028:	4b01      	ldr	r3, [pc, #4]	; (3030 <sparkGetMode+0x8>)
    302a:	7818      	ldrb	r0, [r3, #0]
}
    302c:	4770      	bx	lr
    302e:	46c0      	nop			; (mov r8, r8)
    3030:	20000b2d 	.word	0x20000b2d

00003034 <sparkChangeMode>:

void sparkChangeMode(unsigned char newMode)
{
    3034:	b570      	push	{r4, r5, r6, lr}
  unsigned char b;
  
  mode = newMode;
    3036:	4d0f      	ldr	r5, [pc, #60]	; (3074 <sparkChangeMode+0x40>)
    3038:	7028      	strb	r0, [r5, #0]
  startSPI();
    303a:	4b0f      	ldr	r3, [pc, #60]	; (3078 <sparkChangeMode+0x44>)
    303c:	4798      	blx	r3
  sendSPI(REG_MAINCTRL); b = sendSPI(0x00);
    303e:	2030      	movs	r0, #48	; 0x30
    3040:	4c0e      	ldr	r4, [pc, #56]	; (307c <sparkChangeMode+0x48>)
    3042:	47a0      	blx	r4
    3044:	2000      	movs	r0, #0
    3046:	47a0      	blx	r4
    3048:	0004      	movs	r4, r0
  if(mode == SPARK_MODE_RX)
    304a:	782b      	ldrb	r3, [r5, #0]
    304c:	2b00      	cmp	r3, #0
    304e:	d009      	beq.n	3064 <sparkChangeMode+0x30>
    //cycling = true;
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b | 0x08); // Data src to random LFSR
  }
  else
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b & (~0x08));
    3050:	2070      	movs	r0, #112	; 0x70
    3052:	4d0a      	ldr	r5, [pc, #40]	; (307c <sparkChangeMode+0x48>)
    3054:	47a8      	blx	r5
    3056:	2308      	movs	r3, #8
    3058:	439c      	bics	r4, r3
    305a:	b2e0      	uxtb	r0, r4
    305c:	47a8      	blx	r5
  }
  stopSPI();
    305e:	4b08      	ldr	r3, [pc, #32]	; (3080 <sparkChangeMode+0x4c>)
    3060:	4798      	blx	r3
}
    3062:	bd70      	pop	{r4, r5, r6, pc}
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b | 0x08); // Data src to random LFSR
    3064:	2070      	movs	r0, #112	; 0x70
    3066:	4d05      	ldr	r5, [pc, #20]	; (307c <sparkChangeMode+0x48>)
    3068:	47a8      	blx	r5
    306a:	2008      	movs	r0, #8
    306c:	4320      	orrs	r0, r4
    306e:	b2c0      	uxtb	r0, r0
    3070:	47a8      	blx	r5
    3072:	e7f4      	b.n	305e <sparkChangeMode+0x2a>
    3074:	20000b2d 	.word	0x20000b2d
    3078:	00002139 	.word	0x00002139
    307c:	00002155 	.word	0x00002155
    3080:	000021f9 	.word	0x000021f9

00003084 <callbackExtInterrupt>:
{
    3084:	b570      	push	{r4, r5, r6, lr}
  startSPI();
    3086:	4bc2      	ldr	r3, [pc, #776]	; (3390 <callbackExtInterrupt+0x30c>)
    3088:	4798      	blx	r3
  int1 = sendSPI(REG_INT2); int2 = sendSPI(0x00); // Clear interrupt
    308a:	2001      	movs	r0, #1
    308c:	4dc1      	ldr	r5, [pc, #772]	; (3394 <callbackExtInterrupt+0x310>)
    308e:	47a8      	blx	r5
    3090:	0004      	movs	r4, r0
    3092:	2000      	movs	r0, #0
    3094:	47a8      	blx	r5
    3096:	0005      	movs	r5, r0
  stopSPI();
    3098:	4bbf      	ldr	r3, [pc, #764]	; (3398 <callbackExtInterrupt+0x314>)
    309a:	4798      	blx	r3
  if(int1 & 0x01)
    309c:	07e3      	lsls	r3, r4, #31
    309e:	d51d      	bpl.n	30dc <callbackExtInterrupt+0x58>
	sparkCRCfail = true;
    30a0:	2201      	movs	r2, #1
    30a2:	4bbe      	ldr	r3, [pc, #760]	; (339c <callbackExtInterrupt+0x318>)
    30a4:	701a      	strb	r2, [r3, #0]
  if(int1 & BIT_WAKEUP)
    30a6:	0663      	lsls	r3, r4, #25
    30a8:	d528      	bpl.n	30fc <callbackExtInterrupt+0x78>
	sparkLastInt = 1;
    30aa:	2201      	movs	r2, #1
    30ac:	4bbc      	ldr	r3, [pc, #752]	; (33a0 <callbackExtInterrupt+0x31c>)
    30ae:	701a      	strb	r2, [r3, #0]
    wakeupWasLast = !wakeupWasLast;
    30b0:	4abc      	ldr	r2, [pc, #752]	; (33a4 <callbackExtInterrupt+0x320>)
    30b2:	7813      	ldrb	r3, [r2, #0]
    30b4:	2101      	movs	r1, #1
    30b6:	404b      	eors	r3, r1
    30b8:	7013      	strb	r3, [r2, #0]
    if(!clockGated) // We missed a XOTIMER event
    30ba:	4bbb      	ldr	r3, [pc, #748]	; (33a8 <callbackExtInterrupt+0x324>)
    30bc:	781b      	ldrb	r3, [r3, #0]
    30be:	2b00      	cmp	r3, #0
    30c0:	d158      	bne.n	3174 <callbackExtInterrupt+0xf0>
	  enableClockGate();
    30c2:	4bba      	ldr	r3, [pc, #744]	; (33ac <callbackExtInterrupt+0x328>)
    30c4:	4798      	blx	r3
      startSPI();
    30c6:	4bb2      	ldr	r3, [pc, #712]	; (3390 <callbackExtInterrupt+0x30c>)
    30c8:	4798      	blx	r3
      switch(mode)
    30ca:	4bb9      	ldr	r3, [pc, #740]	; (33b0 <callbackExtInterrupt+0x32c>)
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d008      	beq.n	30e4 <callbackExtInterrupt+0x60>
    30d2:	2b01      	cmp	r3, #1
    30d4:	d00c      	beq.n	30f0 <callbackExtInterrupt+0x6c>
      stopSPI();
    30d6:	4bb0      	ldr	r3, [pc, #704]	; (3398 <callbackExtInterrupt+0x314>)
    30d8:	4798      	blx	r3
    30da:	e04b      	b.n	3174 <callbackExtInterrupt+0xf0>
	sparkCRCfail = false;
    30dc:	2200      	movs	r2, #0
    30de:	4baf      	ldr	r3, [pc, #700]	; (339c <callbackExtInterrupt+0x318>)
    30e0:	701a      	strb	r2, [r3, #0]
    30e2:	e7e0      	b.n	30a6 <callbackExtInterrupt+0x22>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    30e4:	205f      	movs	r0, #95	; 0x5f
    30e6:	4cab      	ldr	r4, [pc, #684]	; (3394 <callbackExtInterrupt+0x310>)
    30e8:	47a0      	blx	r4
    30ea:	2024      	movs	r0, #36	; 0x24
    30ec:	47a0      	blx	r4
          break;
    30ee:	e7f2      	b.n	30d6 <callbackExtInterrupt+0x52>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    30f0:	205f      	movs	r0, #95	; 0x5f
    30f2:	4ca8      	ldr	r4, [pc, #672]	; (3394 <callbackExtInterrupt+0x310>)
    30f4:	47a0      	blx	r4
    30f6:	2014      	movs	r0, #20
    30f8:	47a0      	blx	r4
          break;
    30fa:	e7ec      	b.n	30d6 <callbackExtInterrupt+0x52>
  else if( (int1 & BIT_TXEND) || (int1 & BIT_NEWPKT) || (int2 & BIT_RXTOUT) )
    30fc:	2318      	movs	r3, #24
    30fe:	4223      	tst	r3, r4
    3100:	d102      	bne.n	3108 <callbackExtInterrupt+0x84>
    3102:	06ab      	lsls	r3, r5, #26
    3104:	d400      	bmi.n	3108 <callbackExtInterrupt+0x84>
    3106:	e17b      	b.n	3400 <callbackExtInterrupt+0x37c>
	  sparkLastInt = 2;
    3108:	2202      	movs	r2, #2
    310a:	4ba5      	ldr	r3, [pc, #660]	; (33a0 <callbackExtInterrupt+0x31c>)
    310c:	701a      	strb	r2, [r3, #0]
    if(clockGated)
    310e:	4ba6      	ldr	r3, [pc, #664]	; (33a8 <callbackExtInterrupt+0x324>)
    3110:	781b      	ldrb	r3, [r3, #0]
    3112:	2b00      	cmp	r3, #0
    3114:	d006      	beq.n	3124 <callbackExtInterrupt+0xa0>
  switch(mode)
    3116:	4ba6      	ldr	r3, [pc, #664]	; (33b0 <callbackExtInterrupt+0x32c>)
    3118:	781b      	ldrb	r3, [r3, #0]
    311a:	2b00      	cmp	r3, #0
    311c:	d036      	beq.n	318c <callbackExtInterrupt+0x108>
    311e:	2b01      	cmp	r3, #1
    3120:	d100      	bne.n	3124 <callbackExtInterrupt+0xa0>
    3122:	e0f3      	b.n	330c <callbackExtInterrupt+0x288>
	if(bidirectional)
    3124:	4ba3      	ldr	r3, [pc, #652]	; (33b4 <callbackExtInterrupt+0x330>)
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	2b00      	cmp	r3, #0
    312a:	d007      	beq.n	313c <callbackExtInterrupt+0xb8>
      if(mode == SPARK_MODE_RX)
    312c:	4ba0      	ldr	r3, [pc, #640]	; (33b0 <callbackExtInterrupt+0x32c>)
    312e:	781b      	ldrb	r3, [r3, #0]
    3130:	2b00      	cmp	r3, #0
    3132:	d000      	beq.n	3136 <callbackExtInterrupt+0xb2>
    3134:	e102      	b.n	333c <callbackExtInterrupt+0x2b8>
        sparkChangeMode(SPARK_MODE_TX);
    3136:	2001      	movs	r0, #1
    3138:	4b9f      	ldr	r3, [pc, #636]	; (33b8 <callbackExtInterrupt+0x334>)
    313a:	4798      	blx	r3
    wakeupWasLast = false;
    313c:	2200      	movs	r2, #0
    313e:	4b99      	ldr	r3, [pc, #612]	; (33a4 <callbackExtInterrupt+0x320>)
    3140:	701a      	strb	r2, [r3, #0]
    startSPI();
    3142:	4b93      	ldr	r3, [pc, #588]	; (3390 <callbackExtInterrupt+0x30c>)
    3144:	4798      	blx	r3
    switch(mode)
    3146:	4b9a      	ldr	r3, [pc, #616]	; (33b0 <callbackExtInterrupt+0x32c>)
    3148:	781b      	ldrb	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d100      	bne.n	3150 <callbackExtInterrupt+0xcc>
    314e:	e0f9      	b.n	3344 <callbackExtInterrupt+0x2c0>
    3150:	2b01      	cmp	r3, #1
    3152:	d100      	bne.n	3156 <callbackExtInterrupt+0xd2>
    3154:	e0fc      	b.n	3350 <callbackExtInterrupt+0x2cc>
    if(sleepingMode == SPARK_SLEEP_DEEP)
    3156:	4b99      	ldr	r3, [pc, #612]	; (33bc <callbackExtInterrupt+0x338>)
    3158:	781b      	ldrb	r3, [r3, #0]
    315a:	2b03      	cmp	r3, #3
    315c:	d100      	bne.n	3160 <callbackExtInterrupt+0xdc>
    315e:	e0fd      	b.n	335c <callbackExtInterrupt+0x2d8>
    else if(sleepingMode != SPARK_SLEEP_NONE)
    3160:	2b00      	cmp	r3, #0
    3162:	d000      	beq.n	3166 <callbackExtInterrupt+0xe2>
    3164:	e104      	b.n	3370 <callbackExtInterrupt+0x2ec>
    stopSPI();
    3166:	4b8c      	ldr	r3, [pc, #560]	; (3398 <callbackExtInterrupt+0x314>)
    3168:	4798      	blx	r3
    if(sleepingMode == SPARK_SLEEP_DEEP)
    316a:	4b94      	ldr	r3, [pc, #592]	; (33bc <callbackExtInterrupt+0x338>)
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	2b03      	cmp	r3, #3
    3170:	d100      	bne.n	3174 <callbackExtInterrupt+0xf0>
    3172:	e107      	b.n	3384 <callbackExtInterrupt+0x300>
  startSPI();
    3174:	4b86      	ldr	r3, [pc, #536]	; (3390 <callbackExtInterrupt+0x30c>)
    3176:	4798      	blx	r3
  int1 = sendSPI(REG_INT2); int2 = sendSPI(0x00); // Clear interrupt
    3178:	2001      	movs	r0, #1
    317a:	4c86      	ldr	r4, [pc, #536]	; (3394 <callbackExtInterrupt+0x310>)
    317c:	47a0      	blx	r4
    317e:	2000      	movs	r0, #0
    3180:	47a0      	blx	r4
  stopSPI();
    3182:	4b85      	ldr	r3, [pc, #532]	; (3398 <callbackExtInterrupt+0x314>)
    3184:	4798      	blx	r3
  wdReset();
    3186:	4b8e      	ldr	r3, [pc, #568]	; (33c0 <callbackExtInterrupt+0x33c>)
    3188:	4798      	blx	r3
}
    318a:	bd70      	pop	{r4, r5, r6, pc}
        if(cycling)
    318c:	4b8d      	ldr	r3, [pc, #564]	; (33c4 <callbackExtInterrupt+0x340>)
    318e:	781b      	ldrb	r3, [r3, #0]
    3190:	2b00      	cmp	r3, #0
    3192:	d05b      	beq.n	324c <callbackExtInterrupt+0x1c8>
          applySleepOffset(-1); // Cycle next frame
    3194:	2001      	movs	r0, #1
    3196:	4240      	negs	r0, r0
    3198:	4b8b      	ldr	r3, [pc, #556]	; (33c8 <callbackExtInterrupt+0x344>)
    319a:	4798      	blx	r3
        startSPI();
    319c:	4b7c      	ldr	r3, [pc, #496]	; (3390 <callbackExtInterrupt+0x30c>)
    319e:	4798      	blx	r3
        sendSPI(REG_RXBUF);  numBytes = sendSPI(0x00); 
    31a0:	2003      	movs	r0, #3
    31a2:	4c7c      	ldr	r4, [pc, #496]	; (3394 <callbackExtInterrupt+0x310>)
    31a4:	47a0      	blx	r4
    31a6:	2000      	movs	r0, #0
    31a8:	47a0      	blx	r4
    31aa:	0004      	movs	r4, r0
		stopSPI();
    31ac:	4b7a      	ldr	r3, [pc, #488]	; (3398 <callbackExtInterrupt+0x314>)
    31ae:	4798      	blx	r3
        reception = callbackPacketReceived(numBytes); // See if packet is correct		
    31b0:	0020      	movs	r0, r4
    31b2:	4b86      	ldr	r3, [pc, #536]	; (33cc <callbackExtInterrupt+0x348>)
    31b4:	4798      	blx	r3
    31b6:	0005      	movs	r5, r0
        if(cycling)
    31b8:	4b82      	ldr	r3, [pc, #520]	; (33c4 <callbackExtInterrupt+0x340>)
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	2b00      	cmp	r3, #0
    31be:	d049      	beq.n	3254 <callbackExtInterrupt+0x1d0>
            lostPackets = 0;
    31c0:	2200      	movs	r2, #0
    31c2:	4b83      	ldr	r3, [pc, #524]	; (33d0 <callbackExtInterrupt+0x34c>)
    31c4:	701a      	strb	r2, [r3, #0]
        if(lostPackets > 100 && !(bidirectional && master)) // Link is lost, don't care if master and bidirectional
    31c6:	4b82      	ldr	r3, [pc, #520]	; (33d0 <callbackExtInterrupt+0x34c>)
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2b64      	cmp	r3, #100	; 0x64
    31cc:	d90f      	bls.n	31ee <callbackExtInterrupt+0x16a>
    31ce:	4b79      	ldr	r3, [pc, #484]	; (33b4 <callbackExtInterrupt+0x330>)
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d003      	beq.n	31de <callbackExtInterrupt+0x15a>
    31d6:	4b7f      	ldr	r3, [pc, #508]	; (33d4 <callbackExtInterrupt+0x350>)
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	2b00      	cmp	r3, #0
    31dc:	d107      	bne.n	31ee <callbackExtInterrupt+0x16a>
          cycling = true;
    31de:	2201      	movs	r2, #1
    31e0:	4b78      	ldr	r3, [pc, #480]	; (33c4 <callbackExtInterrupt+0x340>)
    31e2:	701a      	strb	r2, [r3, #0]
          lostPackets = 0;
    31e4:	2200      	movs	r2, #0
    31e6:	4b7a      	ldr	r3, [pc, #488]	; (33d0 <callbackExtInterrupt+0x34c>)
    31e8:	701a      	strb	r2, [r3, #0]
          callbackLinkLost();
    31ea:	4b7b      	ldr	r3, [pc, #492]	; (33d8 <callbackExtInterrupt+0x354>)
    31ec:	4798      	blx	r3
        startSPI();
    31ee:	4b68      	ldr	r3, [pc, #416]	; (3390 <callbackExtInterrupt+0x30c>)
    31f0:	4798      	blx	r3
        sendSPI(REG_RXWAITED8); rxWaited = sendSPI(0x00);
    31f2:	2020      	movs	r0, #32
    31f4:	4e67      	ldr	r6, [pc, #412]	; (3394 <callbackExtInterrupt+0x310>)
    31f6:	47b0      	blx	r6
    31f8:	2000      	movs	r0, #0
    31fa:	47b0      	blx	r6
    31fc:	b280      	uxth	r0, r0
        rxWaited = rxWaited << 8;
    31fe:	0200      	lsls	r0, r0, #8
    3200:	b284      	uxth	r4, r0
        sendSPI(REG_RXWAITED0); rxWaited |= sendSPI(0x00);
    3202:	2021      	movs	r0, #33	; 0x21
    3204:	47b0      	blx	r6
    3206:	2000      	movs	r0, #0
    3208:	47b0      	blx	r6
    320a:	b280      	uxth	r0, r0
    320c:	4304      	orrs	r4, r0
		rxWaited = rxWaited >> 1; // Offset to remove bit 0 (which is not used)
    320e:	0864      	lsrs	r4, r4, #1
		if(reception)
    3210:	2d00      	cmp	r5, #0
    3212:	d12a      	bne.n	326a <callbackExtInterrupt+0x1e6>
        stopSPI();
    3214:	4b60      	ldr	r3, [pc, #384]	; (3398 <callbackExtInterrupt+0x314>)
    3216:	4798      	blx	r3
        if(reception && !(bidirectional && master))
    3218:	2d00      	cmp	r5, #0
    321a:	d059      	beq.n	32d0 <callbackExtInterrupt+0x24c>
    321c:	4b65      	ldr	r3, [pc, #404]	; (33b4 <callbackExtInterrupt+0x330>)
    321e:	781b      	ldrb	r3, [r3, #0]
    3220:	2b00      	cmp	r3, #0
    3222:	d003      	beq.n	322c <callbackExtInterrupt+0x1a8>
    3224:	4a6b      	ldr	r2, [pc, #428]	; (33d4 <callbackExtInterrupt+0x350>)
    3226:	7812      	ldrb	r2, [r2, #0]
    3228:	2a00      	cmp	r2, #0
    322a:	d151      	bne.n	32d0 <callbackExtInterrupt+0x24c>
          if(cycling)
    322c:	4a65      	ldr	r2, [pc, #404]	; (33c4 <callbackExtInterrupt+0x340>)
    322e:	7812      	ldrb	r2, [r2, #0]
    3230:	2a00      	cmp	r2, #0
    3232:	d02a      	beq.n	328a <callbackExtInterrupt+0x206>
            cycling = false; // We have locked on*/
    3234:	2100      	movs	r1, #0
    3236:	4a63      	ldr	r2, [pc, #396]	; (33c4 <callbackExtInterrupt+0x340>)
    3238:	7011      	strb	r1, [r2, #0]
            if(!bidirectional)
    323a:	2b00      	cmp	r3, #0
    323c:	d14c      	bne.n	32d8 <callbackExtInterrupt+0x254>
              adjusting = true;
    323e:	2201      	movs	r2, #1
    3240:	4b66      	ldr	r3, [pc, #408]	; (33dc <callbackExtInterrupt+0x358>)
    3242:	701a      	strb	r2, [r3, #0]
              applySleepOffset(1); // Step back to good frame
    3244:	2001      	movs	r0, #1
    3246:	4b60      	ldr	r3, [pc, #384]	; (33c8 <callbackExtInterrupt+0x344>)
    3248:	4798      	blx	r3
    324a:	e045      	b.n	32d8 <callbackExtInterrupt+0x254>
          applySleepOffset(0); // Cycle next frame
    324c:	2000      	movs	r0, #0
    324e:	4b5e      	ldr	r3, [pc, #376]	; (33c8 <callbackExtInterrupt+0x344>)
    3250:	4798      	blx	r3
    3252:	e7a3      	b.n	319c <callbackExtInterrupt+0x118>
        else if(reception)
    3254:	2800      	cmp	r0, #0
    3256:	d003      	beq.n	3260 <callbackExtInterrupt+0x1dc>
          lostPackets = 0; 
    3258:	2200      	movs	r2, #0
    325a:	4b5d      	ldr	r3, [pc, #372]	; (33d0 <callbackExtInterrupt+0x34c>)
    325c:	701a      	strb	r2, [r3, #0]
    325e:	e7b2      	b.n	31c6 <callbackExtInterrupt+0x142>
          lostPackets++;
    3260:	4a5b      	ldr	r2, [pc, #364]	; (33d0 <callbackExtInterrupt+0x34c>)
    3262:	7813      	ldrb	r3, [r2, #0]
    3264:	3301      	adds	r3, #1
    3266:	7013      	strb	r3, [r2, #0]
    3268:	e7ad      	b.n	31c6 <callbackExtInterrupt+0x142>
			 sendSPI(REG_RSSI); sparkPacketRSSI = sendSPI(0x00);
    326a:	2022      	movs	r0, #34	; 0x22
    326c:	4e49      	ldr	r6, [pc, #292]	; (3394 <callbackExtInterrupt+0x310>)
    326e:	47b0      	blx	r6
    3270:	2000      	movs	r0, #0
    3272:	47b0      	blx	r6
    3274:	4b5a      	ldr	r3, [pc, #360]	; (33e0 <callbackExtInterrupt+0x35c>)
    3276:	7018      	strb	r0, [r3, #0]
			 sendSPI(REG_MAXNOILVL); sparkPacketNSSI = sendSPI(0x00);
    3278:	2028      	movs	r0, #40	; 0x28
    327a:	47b0      	blx	r6
    327c:	2000      	movs	r0, #0
    327e:	47b0      	blx	r6
    3280:	4b58      	ldr	r3, [pc, #352]	; (33e4 <callbackExtInterrupt+0x360>)
    3282:	7018      	strb	r0, [r3, #0]
			 sparkPacketRXWaited = rxWaited;
    3284:	4b58      	ldr	r3, [pc, #352]	; (33e8 <callbackExtInterrupt+0x364>)
    3286:	801c      	strh	r4, [r3, #0]
    3288:	e7c4      	b.n	3214 <callbackExtInterrupt+0x190>
          else if(!adjusting)
    328a:	4b54      	ldr	r3, [pc, #336]	; (33dc <callbackExtInterrupt+0x358>)
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d117      	bne.n	32c2 <callbackExtInterrupt+0x23e>
            if(rxWaited > (725))
    3292:	4b56      	ldr	r3, [pc, #344]	; (33ec <callbackExtInterrupt+0x368>)
    3294:	429c      	cmp	r4, r3
    3296:	d809      	bhi.n	32ac <callbackExtInterrupt+0x228>
            else if(rxWaited < (100))
    3298:	2c63      	cmp	r4, #99	; 0x63
    329a:	d80e      	bhi.n	32ba <callbackExtInterrupt+0x236>
              applySleepOffset(-1);
    329c:	2001      	movs	r0, #1
    329e:	4240      	negs	r0, r0
    32a0:	4b49      	ldr	r3, [pc, #292]	; (33c8 <callbackExtInterrupt+0x344>)
    32a2:	4798      	blx	r3
              adjusting = true;
    32a4:	2201      	movs	r2, #1
    32a6:	4b4d      	ldr	r3, [pc, #308]	; (33dc <callbackExtInterrupt+0x358>)
    32a8:	701a      	strb	r2, [r3, #0]
    32aa:	e015      	b.n	32d8 <callbackExtInterrupt+0x254>
              applySleepOffset(1);
    32ac:	2001      	movs	r0, #1
    32ae:	4b46      	ldr	r3, [pc, #280]	; (33c8 <callbackExtInterrupt+0x344>)
    32b0:	4798      	blx	r3
              adjusting = true;
    32b2:	2201      	movs	r2, #1
    32b4:	4b49      	ldr	r3, [pc, #292]	; (33dc <callbackExtInterrupt+0x358>)
    32b6:	701a      	strb	r2, [r3, #0]
    32b8:	e00e      	b.n	32d8 <callbackExtInterrupt+0x254>
              applySleepOffset(0);          
    32ba:	2000      	movs	r0, #0
    32bc:	4b42      	ldr	r3, [pc, #264]	; (33c8 <callbackExtInterrupt+0x344>)
    32be:	4798      	blx	r3
    32c0:	e00a      	b.n	32d8 <callbackExtInterrupt+0x254>
            adjusting = false;
    32c2:	2200      	movs	r2, #0
    32c4:	4b45      	ldr	r3, [pc, #276]	; (33dc <callbackExtInterrupt+0x358>)
    32c6:	701a      	strb	r2, [r3, #0]
            applySleepOffset(0);
    32c8:	2000      	movs	r0, #0
    32ca:	4b3f      	ldr	r3, [pc, #252]	; (33c8 <callbackExtInterrupt+0x344>)
    32cc:	4798      	blx	r3
    32ce:	e003      	b.n	32d8 <callbackExtInterrupt+0x254>
        else if(!cycling)
    32d0:	4b3c      	ldr	r3, [pc, #240]	; (33c4 <callbackExtInterrupt+0x340>)
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	2b00      	cmp	r3, #0
    32d6:	d012      	beq.n	32fe <callbackExtInterrupt+0x27a>
		if(bidirectional)
    32d8:	4b36      	ldr	r3, [pc, #216]	; (33b4 <callbackExtInterrupt+0x330>)
    32da:	781b      	ldrb	r3, [r3, #0]
    32dc:	2b00      	cmp	r3, #0
    32de:	d100      	bne.n	32e2 <callbackExtInterrupt+0x25e>
    32e0:	e720      	b.n	3124 <callbackExtInterrupt+0xa0>
			startSPI();
    32e2:	4b2b      	ldr	r3, [pc, #172]	; (3390 <callbackExtInterrupt+0x30c>)
    32e4:	4798      	blx	r3
			sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    32e6:	201f      	movs	r0, #31
    32e8:	4c2a      	ldr	r4, [pc, #168]	; (3394 <callbackExtInterrupt+0x310>)
    32ea:	47a0      	blx	r4
    32ec:	2001      	movs	r0, #1
    32ee:	47a0      	blx	r4
			stopSPI();
    32f0:	4b29      	ldr	r3, [pc, #164]	; (3398 <callbackExtInterrupt+0x314>)
    32f2:	4798      	blx	r3
			callbackPacketSend(packetNumBytes);		
    32f4:	4b3e      	ldr	r3, [pc, #248]	; (33f0 <callbackExtInterrupt+0x36c>)
    32f6:	7818      	ldrb	r0, [r3, #0]
    32f8:	4b3e      	ldr	r3, [pc, #248]	; (33f4 <callbackExtInterrupt+0x370>)
    32fa:	4798      	blx	r3
    32fc:	e712      	b.n	3124 <callbackExtInterrupt+0xa0>
          adjusting = false;
    32fe:	2200      	movs	r2, #0
    3300:	4b36      	ldr	r3, [pc, #216]	; (33dc <callbackExtInterrupt+0x358>)
    3302:	701a      	strb	r2, [r3, #0]
          applySleepOffset(0);  
    3304:	2000      	movs	r0, #0
    3306:	4b30      	ldr	r3, [pc, #192]	; (33c8 <callbackExtInterrupt+0x344>)
    3308:	4798      	blx	r3
    330a:	e7e5      	b.n	32d8 <callbackExtInterrupt+0x254>
        applySleepOffset(0); // Cycle next frame
    330c:	2000      	movs	r0, #0
    330e:	4b2e      	ldr	r3, [pc, #184]	; (33c8 <callbackExtInterrupt+0x344>)
    3310:	4798      	blx	r3
		if(!bidirectional)
    3312:	4b28      	ldr	r3, [pc, #160]	; (33b4 <callbackExtInterrupt+0x330>)
    3314:	781b      	ldrb	r3, [r3, #0]
    3316:	2b00      	cmp	r3, #0
    3318:	d10d      	bne.n	3336 <callbackExtInterrupt+0x2b2>
			startSPI();
    331a:	4b1d      	ldr	r3, [pc, #116]	; (3390 <callbackExtInterrupt+0x30c>)
    331c:	4798      	blx	r3
			sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    331e:	201f      	movs	r0, #31
    3320:	4c1c      	ldr	r4, [pc, #112]	; (3394 <callbackExtInterrupt+0x310>)
    3322:	47a0      	blx	r4
    3324:	2001      	movs	r0, #1
    3326:	47a0      	blx	r4
			stopSPI();
    3328:	4b1b      	ldr	r3, [pc, #108]	; (3398 <callbackExtInterrupt+0x314>)
    332a:	4798      	blx	r3
			callbackPacketSend(packetNumBytes);
    332c:	4b30      	ldr	r3, [pc, #192]	; (33f0 <callbackExtInterrupt+0x36c>)
    332e:	7818      	ldrb	r0, [r3, #0]
    3330:	4b30      	ldr	r3, [pc, #192]	; (33f4 <callbackExtInterrupt+0x370>)
    3332:	4798      	blx	r3
    3334:	e6f6      	b.n	3124 <callbackExtInterrupt+0xa0>
			callBackPacketUpkeep(); // Push remaining RX data 
    3336:	4b30      	ldr	r3, [pc, #192]	; (33f8 <callbackExtInterrupt+0x374>)
    3338:	4798      	blx	r3
    333a:	e6f3      	b.n	3124 <callbackExtInterrupt+0xa0>
        sparkChangeMode(SPARK_MODE_RX);
    333c:	2000      	movs	r0, #0
    333e:	4b1e      	ldr	r3, [pc, #120]	; (33b8 <callbackExtInterrupt+0x334>)
    3340:	4798      	blx	r3
    3342:	e6fb      	b.n	313c <callbackExtInterrupt+0xb8>
        sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    3344:	205f      	movs	r0, #95	; 0x5f
    3346:	4c13      	ldr	r4, [pc, #76]	; (3394 <callbackExtInterrupt+0x310>)
    3348:	47a0      	blx	r4
    334a:	2024      	movs	r0, #36	; 0x24
    334c:	47a0      	blx	r4
        break;
    334e:	e702      	b.n	3156 <callbackExtInterrupt+0xd2>
        sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    3350:	205f      	movs	r0, #95	; 0x5f
    3352:	4c10      	ldr	r4, [pc, #64]	; (3394 <callbackExtInterrupt+0x310>)
    3354:	47a0      	blx	r4
    3356:	2014      	movs	r0, #20
    3358:	47a0      	blx	r4
        break;
    335a:	e6fc      	b.n	3156 <callbackExtInterrupt+0xd2>
      sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    335c:	2040      	movs	r0, #64	; 0x40
    335e:	4c0d      	ldr	r4, [pc, #52]	; (3394 <callbackExtInterrupt+0x310>)
    3360:	47a0      	blx	r4
    3362:	2058      	movs	r0, #88	; 0x58
    3364:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(BIT_XOTIMER | BIT_RXTOUT);
    3366:	2041      	movs	r0, #65	; 0x41
    3368:	47a0      	blx	r4
    336a:	2060      	movs	r0, #96	; 0x60
    336c:	47a0      	blx	r4
    336e:	e6fa      	b.n	3166 <callbackExtInterrupt+0xe2>
		  sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    3370:	2040      	movs	r0, #64	; 0x40
    3372:	4c08      	ldr	r4, [pc, #32]	; (3394 <callbackExtInterrupt+0x310>)
    3374:	47a0      	blx	r4
    3376:	2058      	movs	r0, #88	; 0x58
    3378:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT);
    337a:	2041      	movs	r0, #65	; 0x41
    337c:	47a0      	blx	r4
    337e:	2020      	movs	r0, #32
    3380:	47a0      	blx	r4
    3382:	e6f0      	b.n	3166 <callbackExtInterrupt+0xe2>
	  disableClockGate();
    3384:	4b1d      	ldr	r3, [pc, #116]	; (33fc <callbackExtInterrupt+0x378>)
    3386:	4798      	blx	r3
      clockGated = false;
    3388:	2200      	movs	r2, #0
    338a:	4b07      	ldr	r3, [pc, #28]	; (33a8 <callbackExtInterrupt+0x324>)
    338c:	701a      	strb	r2, [r3, #0]
    338e:	e6f1      	b.n	3174 <callbackExtInterrupt+0xf0>
    3390:	00002139 	.word	0x00002139
    3394:	00002155 	.word	0x00002155
    3398:	000021f9 	.word	0x000021f9
    339c:	20000b39 	.word	0x20000b39
    33a0:	20000b3a 	.word	0x20000b3a
    33a4:	20000a9a 	.word	0x20000a9a
    33a8:	20000b2e 	.word	0x20000b2e
    33ac:	000020f1 	.word	0x000020f1
    33b0:	20000b2d 	.word	0x20000b2d
    33b4:	20000b34 	.word	0x20000b34
    33b8:	00003035 	.word	0x00003035
    33bc:	20000a9c 	.word	0x20000a9c
    33c0:	000026ff 	.word	0x000026ff
    33c4:	20000b21 	.word	0x20000b21
    33c8:	00002d11 	.word	0x00002d11
    33cc:	0000085d 	.word	0x0000085d
    33d0:	20000b37 	.word	0x20000b37
    33d4:	20000b3b 	.word	0x20000b3b
    33d8:	00000979 	.word	0x00000979
    33dc:	20000a9b 	.word	0x20000a9b
    33e0:	20000b36 	.word	0x20000b36
    33e4:	20000b24 	.word	0x20000b24
    33e8:	20000b22 	.word	0x20000b22
    33ec:	000002d5 	.word	0x000002d5
    33f0:	20000b38 	.word	0x20000b38
    33f4:	00000809 	.word	0x00000809
    33f8:	0000095d 	.word	0x0000095d
    33fc:	00002125 	.word	0x00002125
  else if( ((int2 & BIT_XOTIMER) && sleepingMode == SPARK_SLEEP_DEEP) || ((int2 & BIT_XOTIMER) && sleepingMode == SPARK_SLEEP_NONE)) // This interrupt is sometimes not generated!
    3400:	066b      	lsls	r3, r5, #25
    3402:	d400      	bmi.n	3406 <callbackExtInterrupt+0x382>
    3404:	e6b6      	b.n	3174 <callbackExtInterrupt+0xf0>
    3406:	4b17      	ldr	r3, [pc, #92]	; (3464 <callbackExtInterrupt+0x3e0>)
    3408:	781b      	ldrb	r3, [r3, #0]
    340a:	2b03      	cmp	r3, #3
    340c:	d002      	beq.n	3414 <callbackExtInterrupt+0x390>
    340e:	2b00      	cmp	r3, #0
    3410:	d000      	beq.n	3414 <callbackExtInterrupt+0x390>
    3412:	e6af      	b.n	3174 <callbackExtInterrupt+0xf0>
	  sparkLastInt = 3;
    3414:	2103      	movs	r1, #3
    3416:	4a14      	ldr	r2, [pc, #80]	; (3468 <callbackExtInterrupt+0x3e4>)
    3418:	7011      	strb	r1, [r2, #0]
    if(sleepingMode == SPARK_SLEEP_NONE)
    341a:	2b00      	cmp	r3, #0
    341c:	d10e      	bne.n	343c <callbackExtInterrupt+0x3b8>
      if(mode == SPARK_MODE_TX)
    341e:	4b13      	ldr	r3, [pc, #76]	; (346c <callbackExtInterrupt+0x3e8>)
    3420:	781b      	ldrb	r3, [r3, #0]
    3422:	2b01      	cmp	r3, #1
    3424:	d000      	beq.n	3428 <callbackExtInterrupt+0x3a4>
    3426:	e6a5      	b.n	3174 <callbackExtInterrupt+0xf0>
        startSPI();
    3428:	4b11      	ldr	r3, [pc, #68]	; (3470 <callbackExtInterrupt+0x3ec>)
    342a:	4798      	blx	r3
        sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_STARTTX);
    342c:	205f      	movs	r0, #95	; 0x5f
    342e:	4c11      	ldr	r4, [pc, #68]	; (3474 <callbackExtInterrupt+0x3f0>)
    3430:	47a0      	blx	r4
    3432:	2010      	movs	r0, #16
    3434:	47a0      	blx	r4
        stopSPI();
    3436:	4b10      	ldr	r3, [pc, #64]	; (3478 <callbackExtInterrupt+0x3f4>)
    3438:	4798      	blx	r3
    343a:	e69b      	b.n	3174 <callbackExtInterrupt+0xf0>
	  enableClockGate();
    343c:	4b0f      	ldr	r3, [pc, #60]	; (347c <callbackExtInterrupt+0x3f8>)
    343e:	4798      	blx	r3
      clockGated = true;
    3440:	2201      	movs	r2, #1
    3442:	4b0f      	ldr	r3, [pc, #60]	; (3480 <callbackExtInterrupt+0x3fc>)
    3444:	701a      	strb	r2, [r3, #0]
      startSPI();
    3446:	4b0a      	ldr	r3, [pc, #40]	; (3470 <callbackExtInterrupt+0x3ec>)
    3448:	4798      	blx	r3
      sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    344a:	2040      	movs	r0, #64	; 0x40
    344c:	4c09      	ldr	r4, [pc, #36]	; (3474 <callbackExtInterrupt+0x3f0>)
    344e:	47a0      	blx	r4
    3450:	2058      	movs	r0, #88	; 0x58
    3452:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT); 
    3454:	2041      	movs	r0, #65	; 0x41
    3456:	47a0      	blx	r4
    3458:	2020      	movs	r0, #32
    345a:	47a0      	blx	r4
      stopSPI();
    345c:	4b06      	ldr	r3, [pc, #24]	; (3478 <callbackExtInterrupt+0x3f4>)
    345e:	4798      	blx	r3
    3460:	e688      	b.n	3174 <callbackExtInterrupt+0xf0>
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	20000a9c 	.word	0x20000a9c
    3468:	20000b3a 	.word	0x20000b3a
    346c:	20000b2d 	.word	0x20000b2d
    3470:	00002139 	.word	0x00002139
    3474:	00002155 	.word	0x00002155
    3478:	000021f9 	.word	0x000021f9
    347c:	000020f1 	.word	0x000020f1
    3480:	20000b2e 	.word	0x20000b2e

00003484 <sparkStopRadio>:
{
    3484:	b510      	push	{r4, lr}
	running = false;
    3486:	2200      	movs	r2, #0
    3488:	4b15      	ldr	r3, [pc, #84]	; (34e0 <sparkStopRadio+0x5c>)
    348a:	701a      	strb	r2, [r3, #0]
  wdDisable();
    348c:	4b15      	ldr	r3, [pc, #84]	; (34e4 <sparkStopRadio+0x60>)
    348e:	4798      	blx	r3
  disableExtInt();
    3490:	4b15      	ldr	r3, [pc, #84]	; (34e8 <sparkStopRadio+0x64>)
    3492:	4798      	blx	r3
  startSPI();
    3494:	4b15      	ldr	r3, [pc, #84]	; (34ec <sparkStopRadio+0x68>)
    3496:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x00); // Don't wakeup anymore
    3498:	2045      	movs	r0, #69	; 0x45
    349a:	4c15      	ldr	r4, [pc, #84]	; (34f0 <sparkStopRadio+0x6c>)
    349c:	47a0      	blx	r4
    349e:	2000      	movs	r0, #0
    34a0:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(0x00); // Don't auto sleep anymore
    34a2:	2044      	movs	r0, #68	; 0x44
    34a4:	47a0      	blx	r4
    34a6:	2000      	movs	r0, #0
    34a8:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    34aa:	2040      	movs	r0, #64	; 0x40
    34ac:	47a0      	blx	r4
    34ae:	2000      	movs	r0, #0
    34b0:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    34b2:	2041      	movs	r0, #65	; 0x41
    34b4:	47a0      	blx	r4
    34b6:	2000      	movs	r0, #0
    34b8:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP);
    34ba:	205f      	movs	r0, #95	; 0x5f
    34bc:	47a0      	blx	r4
    34be:	2004      	movs	r0, #4
    34c0:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_FLUSHTX | BIT_FLUSHRX);
    34c2:	205f      	movs	r0, #95	; 0x5f
    34c4:	47a0      	blx	r4
    34c6:	2003      	movs	r0, #3
    34c8:	47a0      	blx	r4
  stopSPI();
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <sparkStopRadio+0x70>)
    34cc:	4798      	blx	r3
  if(bidirectional)
    34ce:	4b0a      	ldr	r3, [pc, #40]	; (34f8 <sparkStopRadio+0x74>)
    34d0:	781b      	ldrb	r3, [r3, #0]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d100      	bne.n	34d8 <sparkStopRadio+0x54>
}
    34d6:	bd10      	pop	{r4, pc}
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    34d8:	2000      	movs	r0, #0
    34da:	4b08      	ldr	r3, [pc, #32]	; (34fc <sparkStopRadio+0x78>)
    34dc:	4798      	blx	r3
}
    34de:	e7fa      	b.n	34d6 <sparkStopRadio+0x52>
    34e0:	20000b20 	.word	0x20000b20
    34e4:	00002703 	.word	0x00002703
    34e8:	000020d1 	.word	0x000020d1
    34ec:	00002139 	.word	0x00002139
    34f0:	00002155 	.word	0x00002155
    34f4:	000021f9 	.word	0x000021f9
    34f8:	20000b34 	.word	0x20000b34
    34fc:	00003035 	.word	0x00003035

00003500 <sparkIsScanning>:

bool sparkIsScanning()
{
  return cycling;
    3500:	4b01      	ldr	r3, [pc, #4]	; (3508 <sparkIsScanning+0x8>)
    3502:	7818      	ldrb	r0, [r3, #0]
}
    3504:	4770      	bx	lr
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	20000b21 	.word	0x20000b21

0000350c <sparkSetBidirectional>:

void sparkSetBidirectional(bool newBidirect, bool newMaster)
{
    350c:	b510      	push	{r4, lr}
  bidirectional = newBidirect;
    350e:	4b0b      	ldr	r3, [pc, #44]	; (353c <sparkSetBidirectional+0x30>)
    3510:	7018      	strb	r0, [r3, #0]
  master = newMaster; 
    3512:	4b0b      	ldr	r3, [pc, #44]	; (3540 <sparkSetBidirectional+0x34>)
    3514:	7019      	strb	r1, [r3, #0]
  cycling = false;
    3516:	2200      	movs	r2, #0
    3518:	4b0a      	ldr	r3, [pc, #40]	; (3544 <sparkSetBidirectional+0x38>)
    351a:	701a      	strb	r2, [r3, #0]
  
  if(bidirectional)
    351c:	2800      	cmp	r0, #0
    351e:	d105      	bne.n	352c <sparkSetBidirectional+0x20>
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
  else if(master)
    3520:	2900      	cmp	r1, #0
    3522:	d107      	bne.n	3534 <sparkSetBidirectional+0x28>
	sparkChangeMode(SPARK_MODE_TX); // Unidirectional masters are TX
  else
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    3524:	2000      	movs	r0, #0
    3526:	4b08      	ldr	r3, [pc, #32]	; (3548 <sparkSetBidirectional+0x3c>)
    3528:	4798      	blx	r3
}
    352a:	bd10      	pop	{r4, pc}
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    352c:	2000      	movs	r0, #0
    352e:	4b06      	ldr	r3, [pc, #24]	; (3548 <sparkSetBidirectional+0x3c>)
    3530:	4798      	blx	r3
    3532:	e7fa      	b.n	352a <sparkSetBidirectional+0x1e>
	sparkChangeMode(SPARK_MODE_TX); // Unidirectional masters are TX
    3534:	2001      	movs	r0, #1
    3536:	4b04      	ldr	r3, [pc, #16]	; (3548 <sparkSetBidirectional+0x3c>)
    3538:	4798      	blx	r3
    353a:	e7f6      	b.n	352a <sparkSetBidirectional+0x1e>
    353c:	20000b34 	.word	0x20000b34
    3540:	20000b3b 	.word	0x20000b3b
    3544:	20000b21 	.word	0x20000b21
    3548:	00003035 	.word	0x00003035

0000354c <sparkIsBidirectional>:

bool sparkIsBidirectional()
{
  return bidirectional;
    354c:	4b01      	ldr	r3, [pc, #4]	; (3554 <sparkIsBidirectional+0x8>)
    354e:	7818      	ldrb	r0, [r3, #0]
}
    3550:	4770      	bx	lr
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	20000b34 	.word	0x20000b34

00003558 <sparkIsMaster>:

bool sparkIsMaster()
{
  return master;
    3558:	4b01      	ldr	r3, [pc, #4]	; (3560 <sparkIsMaster+0x8>)
    355a:	7818      	ldrb	r0, [r3, #0]
}
    355c:	4770      	bx	lr
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	20000b3b 	.word	0x20000b3b

00003564 <sparkIsRunning>:

bool sparkIsRunning()
{
	return running;
    3564:	4b01      	ldr	r3, [pc, #4]	; (356c <sparkIsRunning+0x8>)
    3566:	7818      	ldrb	r0, [r3, #0]
}
    3568:	4770      	bx	lr
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	20000b20 	.word	0x20000b20

00003570 <usb_reset>:
	USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_EORST;

	usb_reset();
}

void usb_reset(){
    3570:	b510      	push	{r4, lr}
	usb_endpoints[0].DeviceDescBank[0].ADDR.reg = (uint32_t) &ep0_buf_out;
    3572:	4b0f      	ldr	r3, [pc, #60]	; (35b0 <usb_reset+0x40>)
    3574:	4a0f      	ldr	r2, [pc, #60]	; (35b4 <usb_reset+0x44>)
    3576:	601a      	str	r2, [r3, #0]
	usb_endpoints[0].DeviceDescBank[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
    3578:	6858      	ldr	r0, [r3, #4]
    357a:	4c0f      	ldr	r4, [pc, #60]	; (35b8 <usb_reset+0x48>)
    357c:	4020      	ands	r0, r4
    357e:	22c0      	movs	r2, #192	; 0xc0
    3580:	0592      	lsls	r2, r2, #22
    3582:	0001      	movs	r1, r0
    3584:	4311      	orrs	r1, r2
    3586:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DeviceDescBank[1].ADDR.reg = (uint32_t) &ep0_buf_in;
    3588:	490c      	ldr	r1, [pc, #48]	; (35bc <usb_reset+0x4c>)
    358a:	6119      	str	r1, [r3, #16]
	usb_endpoints[0].DeviceDescBank[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
    358c:	6959      	ldr	r1, [r3, #20]
    358e:	4021      	ands	r1, r4
    3590:	430a      	orrs	r2, r1
    3592:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP=1;
    3594:	6959      	ldr	r1, [r3, #20]
    3596:	2280      	movs	r2, #128	; 0x80
    3598:	0612      	lsls	r2, r2, #24
    359a:	430a      	orrs	r2, r1
    359c:	615a      	str	r2, [r3, #20]
	USB->DEVICE.DeviceEndpoint[0].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    359e:	4b08      	ldr	r3, [pc, #32]	; (35c0 <usb_reset+0x50>)
    35a0:	2110      	movs	r1, #16
    35a2:	220a      	movs	r2, #10
    35a4:	32ff      	adds	r2, #255	; 0xff
    35a6:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[0].EPCFG.reg  = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    35a8:	3101      	adds	r1, #1
    35aa:	3a09      	subs	r2, #9
    35ac:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    35ae:	bd10      	pop	{r4, pc}
    35b0:	20000b88 	.word	0x20000b88
    35b4:	20000810 	.word	0x20000810
    35b8:	8fffffff 	.word	0x8fffffff
    35bc:	200005fc 	.word	0x200005fc
    35c0:	41005000 	.word	0x41005000

000035c4 <usb_init>:
void usb_init(){
    35c4:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    35c6:	4a20      	ldr	r2, [pc, #128]	; (3648 <usb_init+0x84>)
    35c8:	69d3      	ldr	r3, [r2, #28]
    35ca:	2120      	movs	r1, #32
    35cc:	430b      	orrs	r3, r1
    35ce:	61d3      	str	r3, [r2, #28]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    35d0:	4a1e      	ldr	r2, [pc, #120]	; (364c <usb_init+0x88>)
    35d2:	4b1f      	ldr	r3, [pc, #124]	; (3650 <usb_init+0x8c>)
    35d4:	805a      	strh	r2, [r3, #2]
	USB->DEVICE.CTRLA.reg = USB_CTRLA_SWRST;
    35d6:	2201      	movs	r2, #1
    35d8:	4b1e      	ldr	r3, [pc, #120]	; (3654 <usb_init+0x90>)
    35da:	701a      	strb	r2, [r3, #0]
	while (USB->DEVICE.SYNCBUSY.bit.SWRST);
    35dc:	4b1d      	ldr	r3, [pc, #116]	; (3654 <usb_init+0x90>)
    35de:	789b      	ldrb	r3, [r3, #2]
    35e0:	07db      	lsls	r3, r3, #31
    35e2:	d4fb      	bmi.n	35dc <usb_init+0x18>
	USB->DEVICE.CTRLA.reg = USB_CTRLA_ENABLE | USB_CTRLA_MODE_DEVICE;
    35e4:	2202      	movs	r2, #2
    35e6:	4b1b      	ldr	r3, [pc, #108]	; (3654 <usb_init+0x90>)
    35e8:	701a      	strb	r2, [r3, #0]
	while (USB->DEVICE.SYNCBUSY.bit.ENABLE);
    35ea:	4b1a      	ldr	r3, [pc, #104]	; (3654 <usb_init+0x90>)
    35ec:	789b      	ldrb	r3, [r3, #2]
    35ee:	079b      	lsls	r3, r3, #30
    35f0:	d4fb      	bmi.n	35ea <usb_init+0x26>
	pad_transn = ( *((uint32_t *)(NVMCTRL_OTP4)
    35f2:	4b19      	ldr	r3, [pc, #100]	; (3658 <usb_init+0x94>)
    35f4:	681a      	ldr	r2, [r3, #0]
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    35f6:	0b51      	lsrs	r1, r2, #13
	pad_transn = ( *((uint32_t *)(NVMCTRL_OTP4)
    35f8:	231f      	movs	r3, #31
    35fa:	400b      	ands	r3, r1
	if (pad_transn == 0x1F) {
    35fc:	2b1f      	cmp	r3, #31
    35fe:	d01d      	beq.n	363c <usb_init+0x78>
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    3600:	0c91      	lsrs	r1, r2, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3602:	201f      	movs	r0, #31
    3604:	4008      	ands	r0, r1
	if (pad_transp == 0x1F) {
    3606:	281f      	cmp	r0, #31
    3608:	d01a      	beq.n	3640 <usb_init+0x7c>
			>> (NVM_USB_PAD_TRIM_POS % 32))
    360a:	0dd1      	lsrs	r1, r2, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    360c:	2207      	movs	r2, #7
    360e:	400a      	ands	r2, r1
	if (pad_trim == 0x7) {
    3610:	2a07      	cmp	r2, #7
    3612:	d017      	beq.n	3644 <usb_init+0x80>
	USB->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3614:	019b      	lsls	r3, r3, #6
    3616:	4303      	orrs	r3, r0
    3618:	0312      	lsls	r2, r2, #12
    361a:	4313      	orrs	r3, r2
    361c:	4c0d      	ldr	r4, [pc, #52]	; (3654 <usb_init+0x90>)
    361e:	8523      	strh	r3, [r4, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(UsbDeviceDescriptor));
    3620:	4b0e      	ldr	r3, [pc, #56]	; (365c <usb_init+0x98>)
    3622:	781a      	ldrb	r2, [r3, #0]
    3624:	0152      	lsls	r2, r2, #5
    3626:	4d0e      	ldr	r5, [pc, #56]	; (3660 <usb_init+0x9c>)
    3628:	2100      	movs	r1, #0
    362a:	0028      	movs	r0, r5
    362c:	4b0d      	ldr	r3, [pc, #52]	; (3664 <usb_init+0xa0>)
    362e:	4798      	blx	r3
	USB->DEVICE.DESCADD.reg = (uint32_t)(&usb_endpoints[0]);
    3630:	6265      	str	r5, [r4, #36]	; 0x24
	USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_EORST;
    3632:	2308      	movs	r3, #8
    3634:	8323      	strh	r3, [r4, #24]
	usb_reset();
    3636:	4b0c      	ldr	r3, [pc, #48]	; (3668 <usb_init+0xa4>)
    3638:	4798      	blx	r3
}
    363a:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    363c:	3b1a      	subs	r3, #26
    363e:	e7df      	b.n	3600 <usb_init+0x3c>
		pad_transp = 29;
    3640:	3802      	subs	r0, #2
    3642:	e7e2      	b.n	360a <usb_init+0x46>
		pad_trim = 3;
    3644:	3a04      	subs	r2, #4
    3646:	e7e5      	b.n	3614 <usb_init+0x50>
    3648:	40000400 	.word	0x40000400
    364c:	00004006 	.word	0x00004006
    3650:	40000c00 	.word	0x40000c00
    3654:	41005000 	.word	0x41005000
    3658:	00806024 	.word	0x00806024
    365c:	0000630c 	.word	0x0000630c
    3660:	20000b88 	.word	0x20000b88
    3664:	00004473 	.word	0x00004473
    3668:	00003571 	.word	0x00003571

0000366c <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | addr;
    366c:	2380      	movs	r3, #128	; 0x80
    366e:	425b      	negs	r3, r3
    3670:	4318      	orrs	r0, r3
    3672:	b2c0      	uxtb	r0, r0
    3674:	4b01      	ldr	r3, [pc, #4]	; (367c <usb_set_address+0x10>)
    3676:	7298      	strb	r0, [r3, #10]
}
    3678:	4770      	bx	lr
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	41005000 	.word	0x41005000

00003680 <usb_enable_ep>:

inline UsbDeviceDescBank* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DeviceDescBank[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    3680:	b530      	push	{r4, r5, lr}
	if (ep & 0x80) {
    3682:	b243      	sxtb	r3, r0
    3684:	2b00      	cmp	r3, #0
    3686:	db15      	blt.n	36b4 <usb_enable_ep+0x34>
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = type + 1;
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN;
	} else {
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    3688:	233f      	movs	r3, #63	; 0x3f
    368a:	4018      	ands	r0, r3
    368c:	2a08      	cmp	r2, #8
    368e:	d94e      	bls.n	372e <usb_enable_ep+0xae>
    3690:	2a10      	cmp	r2, #16
    3692:	d967      	bls.n	3764 <usb_enable_ep+0xe4>
    3694:	2a20      	cmp	r2, #32
    3696:	d967      	bls.n	3768 <usb_enable_ep+0xe8>
    3698:	2a40      	cmp	r2, #64	; 0x40
    369a:	d967      	bls.n	376c <usb_enable_ep+0xec>
    369c:	2a80      	cmp	r2, #128	; 0x80
    369e:	d967      	bls.n	3770 <usb_enable_ep+0xf0>
    36a0:	33c1      	adds	r3, #193	; 0xc1
    36a2:	429a      	cmp	r2, r3
    36a4:	d966      	bls.n	3774 <usb_enable_ep+0xf4>
    36a6:	3301      	adds	r3, #1
    36a8:	33ff      	adds	r3, #255	; 0xff
    36aa:	429a      	cmp	r2, r3
    36ac:	d864      	bhi.n	3778 <usb_enable_ep+0xf8>
    36ae:	3bfb      	subs	r3, #251	; 0xfb
    36b0:	3bff      	subs	r3, #255	; 0xff
    36b2:	e03d      	b.n	3730 <usb_enable_ep+0xb0>
		usb_endpoints[ep & 0x3f].DeviceDescBank[1].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    36b4:	233f      	movs	r3, #63	; 0x3f
    36b6:	4018      	ands	r0, r3
    36b8:	2a08      	cmp	r2, #8
    36ba:	d912      	bls.n	36e2 <usb_enable_ep+0x62>
    36bc:	2a10      	cmp	r2, #16
    36be:	d92c      	bls.n	371a <usb_enable_ep+0x9a>
    36c0:	2a20      	cmp	r2, #32
    36c2:	d92c      	bls.n	371e <usb_enable_ep+0x9e>
    36c4:	2a40      	cmp	r2, #64	; 0x40
    36c6:	d92c      	bls.n	3722 <usb_enable_ep+0xa2>
    36c8:	2a80      	cmp	r2, #128	; 0x80
    36ca:	d92c      	bls.n	3726 <usb_enable_ep+0xa6>
    36cc:	33c1      	adds	r3, #193	; 0xc1
    36ce:	429a      	cmp	r2, r3
    36d0:	d92b      	bls.n	372a <usb_enable_ep+0xaa>
    36d2:	3301      	adds	r3, #1
    36d4:	33ff      	adds	r3, #255	; 0xff
    36d6:	429a      	cmp	r2, r3
    36d8:	d901      	bls.n	36de <usb_enable_ep+0x5e>
    36da:	2207      	movs	r2, #7
    36dc:	e002      	b.n	36e4 <usb_enable_ep+0x64>
    36de:	2206      	movs	r2, #6
    36e0:	e000      	b.n	36e4 <usb_enable_ep+0x64>
    36e2:	2200      	movs	r2, #0
    36e4:	0144      	lsls	r4, r0, #5
    36e6:	4b25      	ldr	r3, [pc, #148]	; (377c <usb_enable_ep+0xfc>)
    36e8:	191b      	adds	r3, r3, r4
    36ea:	695c      	ldr	r4, [r3, #20]
    36ec:	0712      	lsls	r2, r2, #28
    36ee:	4d24      	ldr	r5, [pc, #144]	; (3780 <usb_enable_ep+0x100>)
    36f0:	402c      	ands	r4, r5
    36f2:	4322      	orrs	r2, r4
    36f4:	615a      	str	r2, [r3, #20]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = type + 1;
    36f6:	3101      	adds	r1, #1
    36f8:	4c22      	ldr	r4, [pc, #136]	; (3784 <usb_enable_ep+0x104>)
    36fa:	3008      	adds	r0, #8
    36fc:	0140      	lsls	r0, r0, #5
    36fe:	5d03      	ldrb	r3, [r0, r4]
    3700:	2207      	movs	r2, #7
    3702:	400a      	ands	r2, r1
    3704:	0112      	lsls	r2, r2, #4
    3706:	2170      	movs	r1, #112	; 0x70
    3708:	438b      	bics	r3, r1
    370a:	0019      	movs	r1, r3
    370c:	4311      	orrs	r1, r2
    370e:	5501      	strb	r1, [r0, r4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY
    3710:	46a4      	mov	ip, r4
    3712:	4460      	add	r0, ip
    3714:	23a2      	movs	r3, #162	; 0xa2
    3716:	7103      	strb	r3, [r0, #4]
    3718:	e023      	b.n	3762 <usb_enable_ep+0xe2>
		usb_endpoints[ep & 0x3f].DeviceDescBank[1].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    371a:	2201      	movs	r2, #1
    371c:	e7e2      	b.n	36e4 <usb_enable_ep+0x64>
    371e:	2202      	movs	r2, #2
    3720:	e7e0      	b.n	36e4 <usb_enable_ep+0x64>
    3722:	2203      	movs	r2, #3
    3724:	e7de      	b.n	36e4 <usb_enable_ep+0x64>
    3726:	2204      	movs	r2, #4
    3728:	e7dc      	b.n	36e4 <usb_enable_ep+0x64>
    372a:	2205      	movs	r2, #5
    372c:	e7da      	b.n	36e4 <usb_enable_ep+0x64>
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    372e:	2300      	movs	r3, #0
    3730:	0144      	lsls	r4, r0, #5
    3732:	4a12      	ldr	r2, [pc, #72]	; (377c <usb_enable_ep+0xfc>)
    3734:	1912      	adds	r2, r2, r4
    3736:	6854      	ldr	r4, [r2, #4]
    3738:	071b      	lsls	r3, r3, #28
    373a:	4d11      	ldr	r5, [pc, #68]	; (3780 <usb_enable_ep+0x100>)
    373c:	402c      	ands	r4, r5
    373e:	4323      	orrs	r3, r4
    3740:	6053      	str	r3, [r2, #4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE0 = type + 1;
    3742:	3101      	adds	r1, #1
    3744:	4a0f      	ldr	r2, [pc, #60]	; (3784 <usb_enable_ep+0x104>)
    3746:	3008      	adds	r0, #8
    3748:	0140      	lsls	r0, r0, #5
    374a:	5c83      	ldrb	r3, [r0, r2]
    374c:	2407      	movs	r4, #7
    374e:	4021      	ands	r1, r4
    3750:	43a3      	bics	r3, r4
    3752:	4319      	orrs	r1, r3
    3754:	5481      	strb	r1, [r0, r2]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    3756:	4694      	mov	ip, r2
    3758:	4460      	add	r0, ip
    375a:	2340      	movs	r3, #64	; 0x40
    375c:	7143      	strb	r3, [r0, #5]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    375e:	3b2f      	subs	r3, #47	; 0x2f
    3760:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT;
	}
}
    3762:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    3764:	2301      	movs	r3, #1
    3766:	e7e3      	b.n	3730 <usb_enable_ep+0xb0>
    3768:	2302      	movs	r3, #2
    376a:	e7e1      	b.n	3730 <usb_enable_ep+0xb0>
    376c:	2303      	movs	r3, #3
    376e:	e7df      	b.n	3730 <usb_enable_ep+0xb0>
    3770:	2304      	movs	r3, #4
    3772:	e7dd      	b.n	3730 <usb_enable_ep+0xb0>
    3774:	2305      	movs	r3, #5
    3776:	e7db      	b.n	3730 <usb_enable_ep+0xb0>
    3778:	2307      	movs	r3, #7
    377a:	e7d9      	b.n	3730 <usb_enable_ep+0xb0>
    377c:	20000b88 	.word	0x20000b88
    3780:	8fffffff 	.word	0x8fffffff
    3784:	41005000 	.word	0x41005000

00003788 <usb_disable_ep>:

inline void usb_disable_ep(uint8_t ep) {
    3788:	0003      	movs	r3, r0
	if (ep & 0x80) {
    378a:	b242      	sxtb	r2, r0
    378c:	2a00      	cmp	r2, #0
    378e:	db0c      	blt.n	37aa <usb_disable_ep+0x22>
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = USB_EPTYPE_DISABLED;
	} else {
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    3790:	203f      	movs	r0, #63	; 0x3f
    3792:	4018      	ands	r0, r3
    3794:	4a0b      	ldr	r2, [pc, #44]	; (37c4 <usb_disable_ep+0x3c>)
    3796:	3008      	adds	r0, #8
    3798:	0140      	lsls	r0, r0, #5
    379a:	1883      	adds	r3, r0, r2
    379c:	2140      	movs	r1, #64	; 0x40
    379e:	7159      	strb	r1, [r3, #5]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE0 = USB_EPTYPE_DISABLED;
    37a0:	5c83      	ldrb	r3, [r0, r2]
    37a2:	3939      	subs	r1, #57	; 0x39
    37a4:	438b      	bics	r3, r1
    37a6:	5483      	strb	r3, [r0, r2]
	}
}
    37a8:	4770      	bx	lr
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    37aa:	203f      	movs	r0, #63	; 0x3f
    37ac:	4018      	ands	r0, r3
    37ae:	4a05      	ldr	r2, [pc, #20]	; (37c4 <usb_disable_ep+0x3c>)
    37b0:	3008      	adds	r0, #8
    37b2:	0140      	lsls	r0, r0, #5
    37b4:	1883      	adds	r3, r0, r2
    37b6:	2180      	movs	r1, #128	; 0x80
    37b8:	7119      	strb	r1, [r3, #4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = USB_EPTYPE_DISABLED;
    37ba:	5c83      	ldrb	r3, [r0, r2]
    37bc:	3910      	subs	r1, #16
    37be:	438b      	bics	r3, r1
    37c0:	5483      	strb	r3, [r0, r2]
    37c2:	e7f1      	b.n	37a8 <usb_disable_ep+0x20>
    37c4:	41005000 	.word	0x41005000

000037c8 <usb_ep_start_out>:
	} else {
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    37c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
    37ca:	4e0f      	ldr	r6, [pc, #60]	; (3808 <usb_ep_start_out+0x40>)
    37cc:	0143      	lsls	r3, r0, #5
    37ce:	18f4      	adds	r4, r6, r3
    37d0:	6865      	ldr	r5, [r4, #4]
    37d2:	0492      	lsls	r2, r2, #18
    37d4:	0912      	lsrs	r2, r2, #4
    37d6:	4f0d      	ldr	r7, [pc, #52]	; (380c <usb_ep_start_out+0x44>)
    37d8:	403d      	ands	r5, r7
    37da:	432a      	orrs	r2, r5
    37dc:	6062      	str	r2, [r4, #4]
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    37de:	6862      	ldr	r2, [r4, #4]
    37e0:	0b92      	lsrs	r2, r2, #14
    37e2:	0395      	lsls	r5, r2, #14
    37e4:	6065      	str	r5, [r4, #4]
	usb_endpoints[ep].DeviceDescBank[0].ADDR.reg = (uint32_t) data;
    37e6:	5199      	str	r1, [r3, r6]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_TRFAIL0;
    37e8:	3008      	adds	r0, #8
    37ea:	0140      	lsls	r0, r0, #5
    37ec:	4a08      	ldr	r2, [pc, #32]	; (3810 <usb_ep_start_out+0x48>)
    37ee:	4694      	mov	ip, r2
    37f0:	4460      	add	r0, ip
    37f2:	2205      	movs	r2, #5
    37f4:	71c2      	strb	r2, [r0, #7]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    37f6:	4a07      	ldr	r2, [pc, #28]	; (3814 <usb_ep_start_out+0x4c>)
    37f8:	4694      	mov	ip, r2
    37fa:	4463      	add	r3, ip
    37fc:	2201      	movs	r2, #1
    37fe:	701a      	strb	r2, [r3, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    3800:	2340      	movs	r3, #64	; 0x40
    3802:	7103      	strb	r3, [r0, #4]
	return 0;
}
    3804:	2000      	movs	r0, #0
    3806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3808:	20000b88 	.word	0x20000b88
    380c:	f0003fff 	.word	0xf0003fff
    3810:	41005000 	.word	0x41005000
    3814:	41005109 	.word	0x41005109

00003818 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    3818:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep &= 0x3f;
    381a:	243f      	movs	r4, #63	; 0x3f
    381c:	4020      	ands	r0, r4
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = zlp;
    381e:	0145      	lsls	r5, r0, #5
    3820:	4e11      	ldr	r6, [pc, #68]	; (3868 <usb_ep_start_in+0x50>)
    3822:	1976      	adds	r6, r6, r5
    3824:	6977      	ldr	r7, [r6, #20]
    3826:	07db      	lsls	r3, r3, #31
    3828:	007f      	lsls	r7, r7, #1
    382a:	087f      	lsrs	r7, r7, #1
    382c:	433b      	orrs	r3, r7
    382e:	6173      	str	r3, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3830:	6977      	ldr	r7, [r6, #20]
    3832:	4b0e      	ldr	r3, [pc, #56]	; (386c <usb_ep_start_in+0x54>)
    3834:	403b      	ands	r3, r7
    3836:	6173      	str	r3, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = size;
    3838:	6973      	ldr	r3, [r6, #20]
    383a:	0492      	lsls	r2, r2, #18
    383c:	0c92      	lsrs	r2, r2, #18
    383e:	0b9b      	lsrs	r3, r3, #14
    3840:	039b      	lsls	r3, r3, #14
    3842:	431a      	orrs	r2, r3
    3844:	6172      	str	r2, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].ADDR.reg = (uint32_t) data;
    3846:	6131      	str	r1, [r6, #16]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3848:	3008      	adds	r0, #8
    384a:	0140      	lsls	r0, r0, #5
    384c:	4b08      	ldr	r3, [pc, #32]	; (3870 <usb_ep_start_in+0x58>)
    384e:	469c      	mov	ip, r3
    3850:	4460      	add	r0, ip
    3852:	230a      	movs	r3, #10
    3854:	71c3      	strb	r3, [r0, #7]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3856:	4b07      	ldr	r3, [pc, #28]	; (3874 <usb_ep_start_in+0x5c>)
    3858:	469c      	mov	ip, r3
    385a:	4465      	add	r5, ip
    385c:	2302      	movs	r3, #2
    385e:	702b      	strb	r3, [r5, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    3860:	337e      	adds	r3, #126	; 0x7e
    3862:	7143      	strb	r3, [r0, #5]
	return 0;
}
    3864:	2000      	movs	r0, #0
    3866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3868:	20000b88 	.word	0x20000b88
    386c:	f0003fff 	.word	0xf0003fff
    3870:	41005000 	.word	0x41005000
    3874:	41005109 	.word	0x41005109

00003878 <usb_ep_out_length>:
		USB->DEVICE.DeviceEndpoint[ep & 0x3F].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}

inline usb_size usb_ep_out_length(uint8_t ep){
	return usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3878:	0143      	lsls	r3, r0, #5
    387a:	4803      	ldr	r0, [pc, #12]	; (3888 <usb_ep_out_length+0x10>)
    387c:	18c0      	adds	r0, r0, r3
    387e:	6840      	ldr	r0, [r0, #4]
    3880:	0480      	lsls	r0, r0, #18
    3882:	0c80      	lsrs	r0, r0, #18
}
    3884:	4770      	bx	lr
    3886:	46c0      	nop			; (mov r8, r8)
    3888:	20000b88 	.word	0x20000b88

0000388c <usb_attach>:
    388c:	2280      	movs	r2, #128	; 0x80
    388e:	4b04      	ldr	r3, [pc, #16]	; (38a0 <usb_attach+0x14>)
    3890:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB->DEVICE.CTRLB.bit.DETACH = 0;
    3892:	4a04      	ldr	r2, [pc, #16]	; (38a4 <usb_attach+0x18>)
    3894:	8913      	ldrh	r3, [r2, #8]
    3896:	2101      	movs	r1, #1
    3898:	438b      	bics	r3, r1
    389a:	8113      	strh	r3, [r2, #8]
}
    389c:	4770      	bx	lr
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	e000e100 	.word	0xe000e100
    38a4:	41005000 	.word	0x41005000

000038a8 <usb_ep0_out>:
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
    38a8:	4b0d      	ldr	r3, [pc, #52]	; (38e0 <usb_ep0_out+0x38>)
    38aa:	6859      	ldr	r1, [r3, #4]
    38ac:	4a0d      	ldr	r2, [pc, #52]	; (38e4 <usb_ep0_out+0x3c>)
    38ae:	4011      	ands	r1, r2
    38b0:	2280      	movs	r2, #128	; 0x80
    38b2:	0352      	lsls	r2, r2, #13
    38b4:	430a      	orrs	r2, r1
    38b6:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    38b8:	685a      	ldr	r2, [r3, #4]
    38ba:	0b92      	lsrs	r2, r2, #14
    38bc:	0391      	lsls	r1, r2, #14
    38be:	6059      	str	r1, [r3, #4]
	usb_endpoints[ep].DeviceDescBank[0].ADDR.reg = (uint32_t) data;
    38c0:	4a09      	ldr	r2, [pc, #36]	; (38e8 <usb_ep0_out+0x40>)
    38c2:	601a      	str	r2, [r3, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_TRFAIL0;
    38c4:	4b09      	ldr	r3, [pc, #36]	; (38ec <usb_ep0_out+0x44>)
    38c6:	2105      	movs	r1, #5
    38c8:	2208      	movs	r2, #8
    38ca:	32ff      	adds	r2, #255	; 0xff
    38cc:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    38ce:	3904      	subs	r1, #4
    38d0:	220a      	movs	r2, #10
    38d2:	32ff      	adds	r2, #255	; 0xff
    38d4:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    38d6:	313f      	adds	r1, #63	; 0x3f
    38d8:	3a05      	subs	r2, #5
    38da:	5499      	strb	r1, [r3, r2]

inline void usb_ep0_out(void) {
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
}
    38dc:	4770      	bx	lr
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	20000b88 	.word	0x20000b88
    38e4:	f0003fff 	.word	0xf0003fff
    38e8:	20000810 	.word	0x20000810
    38ec:	41005000 	.word	0x41005000

000038f0 <usb_ep0_in>:
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = zlp;
    38f0:	4b0f      	ldr	r3, [pc, #60]	; (3930 <usb_ep0_in+0x40>)
    38f2:	6959      	ldr	r1, [r3, #20]
    38f4:	2280      	movs	r2, #128	; 0x80
    38f6:	0612      	lsls	r2, r2, #24
    38f8:	430a      	orrs	r2, r1
    38fa:	615a      	str	r2, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    38fc:	6959      	ldr	r1, [r3, #20]
    38fe:	4a0d      	ldr	r2, [pc, #52]	; (3934 <usb_ep0_in+0x44>)
    3900:	400a      	ands	r2, r1
    3902:	615a      	str	r2, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = size;
    3904:	695a      	ldr	r2, [r3, #20]
    3906:	0b92      	lsrs	r2, r2, #14
    3908:	0392      	lsls	r2, r2, #14
    390a:	4310      	orrs	r0, r2
    390c:	6158      	str	r0, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].ADDR.reg = (uint32_t) data;
    390e:	4a0a      	ldr	r2, [pc, #40]	; (3938 <usb_ep0_in+0x48>)
    3910:	611a      	str	r2, [r3, #16]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3912:	4b0a      	ldr	r3, [pc, #40]	; (393c <usb_ep0_in+0x4c>)
    3914:	210a      	movs	r1, #10
    3916:	2208      	movs	r2, #8
    3918:	32ff      	adds	r2, #255	; 0xff
    391a:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    391c:	3908      	subs	r1, #8
    391e:	220a      	movs	r2, #10
    3920:	32ff      	adds	r2, #255	; 0xff
    3922:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    3924:	317e      	adds	r1, #126	; 0x7e
    3926:	2206      	movs	r2, #6
    3928:	32ff      	adds	r2, #255	; 0xff
    392a:	5499      	strb	r1, [r3, r2]

inline void usb_ep0_in(uint8_t size){
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
}
    392c:	4770      	bx	lr
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	20000b88 	.word	0x20000b88
    3934:	f0003fff 	.word	0xf0003fff
    3938:	200005fc 	.word	0x200005fc
    393c:	41005000 	.word	0x41005000

00003940 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB->DEVICE.DeviceEndpoint[0].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    3940:	2130      	movs	r1, #48	; 0x30
    3942:	2306      	movs	r3, #6
    3944:	33ff      	adds	r3, #255	; 0xff
    3946:	4a01      	ldr	r2, [pc, #4]	; (394c <usb_ep0_stall+0xc>)
    3948:	54d1      	strb	r1, [r2, r3]
}
    394a:	4770      	bx	lr
    394c:	41005000 	.word	0x41005000

00003950 <USB_Handler>:
	} else {
		return USB_SPEED_FULL;
	}
}

void USB_Handler() {
    3950:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB->DEVICE.EPINTSMRY.reg;
    3952:	4a29      	ldr	r2, [pc, #164]	; (39f8 <USB_Handler+0xa8>)
    3954:	8c13      	ldrh	r3, [r2, #32]
    3956:	b29b      	uxth	r3, r3
    3958:	001e      	movs	r6, r3
	uint32_t status = USB->DEVICE.INTFLAG.reg;
    395a:	8b92      	ldrh	r2, [r2, #28]
	uint32_t flags;

	if (status & USB_DEVICE_INTFLAG_EORST) {
    395c:	0712      	lsls	r2, r2, #28
    395e:	d410      	bmi.n	3982 <USB_Handler+0x32>
		usb_reset();
		usb_cb_reset();
		return;
	}

	if (summary & (1<<0)) {
    3960:	07db      	lsls	r3, r3, #31
    3962:	d50c      	bpl.n	397e <USB_Handler+0x2e>
		uint32_t flags = USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg;
    3964:	4a24      	ldr	r2, [pc, #144]	; (39f8 <USB_Handler+0xa8>)
    3966:	2308      	movs	r3, #8
    3968:	33ff      	adds	r3, #255	; 0xff
    396a:	5cd4      	ldrb	r4, [r2, r3]
    396c:	b2e4      	uxtb	r4, r4
		USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_RXSTP;
    396e:	2113      	movs	r1, #19
    3970:	54d1      	strb	r1, [r2, r3]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3972:	06e3      	lsls	r3, r4, #27
    3974:	d40d      	bmi.n	3992 <USB_Handler+0x42>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0)
    3976:	07e3      	lsls	r3, r4, #31
    3978:	d412      	bmi.n	39a0 <USB_Handler+0x50>
			usb_handle_control_out_complete();
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
    397a:	07a3      	lsls	r3, r4, #30
    397c:	d413      	bmi.n	39a6 <USB_Handler+0x56>
void USB_Handler() {
    397e:	2401      	movs	r4, #1
    3980:	e019      	b.n	39b6 <USB_Handler+0x66>
		USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    3982:	2208      	movs	r2, #8
    3984:	4b1c      	ldr	r3, [pc, #112]	; (39f8 <USB_Handler+0xa8>)
    3986:	839a      	strh	r2, [r3, #28]
		usb_reset();
    3988:	4b1c      	ldr	r3, [pc, #112]	; (39fc <USB_Handler+0xac>)
    398a:	4798      	blx	r3
		usb_cb_reset();
    398c:	4b1c      	ldr	r3, [pc, #112]	; (3a00 <USB_Handler+0xb0>)
    398e:	4798      	blx	r3
		return;
    3990:	e030      	b.n	39f4 <USB_Handler+0xa4>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    3992:	4a1c      	ldr	r2, [pc, #112]	; (3a04 <USB_Handler+0xb4>)
    3994:	4b1c      	ldr	r3, [pc, #112]	; (3a08 <USB_Handler+0xb8>)
    3996:	cb03      	ldmia	r3!, {r0, r1}
    3998:	c203      	stmia	r2!, {r0, r1}
			usb_handle_setup();
    399a:	4b1c      	ldr	r3, [pc, #112]	; (3a0c <USB_Handler+0xbc>)
    399c:	4798      	blx	r3
    399e:	e7ea      	b.n	3976 <USB_Handler+0x26>
			usb_handle_control_out_complete();
    39a0:	4b1b      	ldr	r3, [pc, #108]	; (3a10 <USB_Handler+0xc0>)
    39a2:	4798      	blx	r3
    39a4:	e7e9      	b.n	397a <USB_Handler+0x2a>
			usb_handle_control_in_complete();
    39a6:	4b1b      	ldr	r3, [pc, #108]	; (3a14 <USB_Handler+0xc4>)
    39a8:	4798      	blx	r3
    39aa:	e7e8      	b.n	397e <USB_Handler+0x2e>
	for (int i=1; i<usb_num_endpoints; i++) {
		if (summary & 1<<i) {
			flags = USB->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
			USB->DEVICE.DeviceEndpoint[i].EPINTENCLR.reg = flags;
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
				usb_cb_handle_ep_in(i);
    39ac:	b2e0      	uxtb	r0, r4
    39ae:	4b1a      	ldr	r3, [pc, #104]	; (3a18 <USB_Handler+0xc8>)
    39b0:	4798      	blx	r3
    39b2:	e017      	b.n	39e4 <USB_Handler+0x94>
	for (int i=1; i<usb_num_endpoints; i++) {
    39b4:	3401      	adds	r4, #1
    39b6:	4b19      	ldr	r3, [pc, #100]	; (3a1c <USB_Handler+0xcc>)
    39b8:	781b      	ldrb	r3, [r3, #0]
    39ba:	429c      	cmp	r4, r3
    39bc:	da18      	bge.n	39f0 <USB_Handler+0xa0>
		if (summary & 1<<i) {
    39be:	2301      	movs	r3, #1
    39c0:	40a3      	lsls	r3, r4
    39c2:	4233      	tst	r3, r6
    39c4:	d0f6      	beq.n	39b4 <USB_Handler+0x64>
			flags = USB->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    39c6:	0023      	movs	r3, r4
    39c8:	3308      	adds	r3, #8
    39ca:	015b      	lsls	r3, r3, #5
    39cc:	4a0a      	ldr	r2, [pc, #40]	; (39f8 <USB_Handler+0xa8>)
    39ce:	4694      	mov	ip, r2
    39d0:	4463      	add	r3, ip
    39d2:	79dd      	ldrb	r5, [r3, #7]
    39d4:	b2ed      	uxtb	r5, r5
			USB->DEVICE.DeviceEndpoint[i].EPINTENCLR.reg = flags;
    39d6:	0163      	lsls	r3, r4, #5
    39d8:	4a11      	ldr	r2, [pc, #68]	; (3a20 <USB_Handler+0xd0>)
    39da:	4694      	mov	ip, r2
    39dc:	4463      	add	r3, ip
    39de:	701d      	strb	r5, [r3, #0]
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
    39e0:	07ab      	lsls	r3, r5, #30
    39e2:	d4e3      	bmi.n	39ac <USB_Handler+0x5c>
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT0)
    39e4:	07eb      	lsls	r3, r5, #31
    39e6:	d5e5      	bpl.n	39b4 <USB_Handler+0x64>
				usb_cb_handle_ep_out(i);
    39e8:	b2e0      	uxtb	r0, r4
    39ea:	4b0e      	ldr	r3, [pc, #56]	; (3a24 <USB_Handler+0xd4>)
    39ec:	4798      	blx	r3
    39ee:	e7e1      	b.n	39b4 <USB_Handler+0x64>
		}
	}

	usb_cb_completion();
    39f0:	4b0d      	ldr	r3, [pc, #52]	; (3a28 <USB_Handler+0xd8>)
    39f2:	4798      	blx	r3
}
    39f4:	bd70      	pop	{r4, r5, r6, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	41005000 	.word	0x41005000
    39fc:	00003571 	.word	0x00003571
    3a00:	00003a91 	.word	0x00003a91
    3a04:	20000808 	.word	0x20000808
    3a08:	20000810 	.word	0x20000810
    3a0c:	00003dfd 	.word	0x00003dfd
    3a10:	00003f3d 	.word	0x00003f3d
    3a14:	00003f59 	.word	0x00003f59
    3a18:	00003d85 	.word	0x00003d85
    3a1c:	0000630c 	.word	0x0000630c
    3a20:	41005108 	.word	0x41005108
    3a24:	00003d09 	.word	0x00003d09
    3a28:	00003b09 	.word	0x00003b09

00003a2c <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    3a2c:	b530      	push	{r4, r5, lr}
    3a2e:	b089      	sub	sp, #36	; 0x24
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    3a30:	2400      	movs	r4, #0
    3a32:	e01c      	b.n	3a6e <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    3a34:	00a1      	lsls	r1, r4, #2
    3a36:	1909      	adds	r1, r1, r4
    3a38:	17cd      	asrs	r5, r1, #31
    3a3a:	2207      	movs	r2, #7
    3a3c:	0010      	movs	r0, r2
    3a3e:	4028      	ands	r0, r5
    3a40:	1840      	adds	r0, r0, r1
    3a42:	10c0      	asrs	r0, r0, #3
		unsigned pos = (i*5)%8;
    3a44:	0f6d      	lsrs	r5, r5, #29
    3a46:	194b      	adds	r3, r1, r5
    3a48:	4013      	ands	r3, r2
    3a4a:	1b5b      	subs	r3, r3, r5
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    3a4c:	4a0c      	ldr	r2, [pc, #48]	; (3a80 <samd_serial_number_string_descriptor+0x54>)
    3a4e:	5c82      	ldrb	r2, [r0, r2]
    3a50:	411a      	asrs	r2, r3
    3a52:	490c      	ldr	r1, [pc, #48]	; (3a84 <samd_serial_number_string_descriptor+0x58>)
    3a54:	5c41      	ldrb	r1, [r0, r1]
    3a56:	2008      	movs	r0, #8
    3a58:	1ac3      	subs	r3, r0, r3
    3a5a:	4099      	lsls	r1, r3
    3a5c:	000b      	movs	r3, r1
    3a5e:	4313      	orrs	r3, r2
    3a60:	221f      	movs	r2, #31
    3a62:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    3a64:	4a08      	ldr	r2, [pc, #32]	; (3a88 <samd_serial_number_string_descriptor+0x5c>)
    3a66:	5cd2      	ldrb	r2, [r2, r3]
    3a68:	ab01      	add	r3, sp, #4
    3a6a:	551a      	strb	r2, [r3, r4]
	for (int i=0; i<26; i++) {
    3a6c:	3401      	adds	r4, #1
    3a6e:	2c19      	cmp	r4, #25
    3a70:	dde0      	ble.n	3a34 <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    3a72:	a801      	add	r0, sp, #4
    3a74:	2300      	movs	r3, #0
    3a76:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    3a78:	4b04      	ldr	r3, [pc, #16]	; (3a8c <samd_serial_number_string_descriptor+0x60>)
    3a7a:	4798      	blx	r3
}
    3a7c:	b009      	add	sp, #36	; 0x24
    3a7e:	bd30      	pop	{r4, r5, pc}
    3a80:	0080a00c 	.word	0x0080a00c
    3a84:	0080a00d 	.word	0x0080a00d
    3a88:	000061e4 	.word	0x000061e4
    3a8c:	00003f9d 	.word	0x00003f9d

00003a90 <usb_cb_reset>:

//bool echoing = true;

void usb_cb_reset(void) {
	// nothing so far
}
    3a90:	4770      	bx	lr
	...

00003a94 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    3a94:	b510      	push	{r4, lr}
	uint16_t len = usb_setup.wLength;
    3a96:	4b14      	ldr	r3, [pc, #80]	; (3ae8 <usb_cb_control_setup+0x54>)
    3a98:	88dc      	ldrh	r4, [r3, #6]
	if (usb_setup.bRequest == USB_REQ_GetMSDescriptor) {
    3a9a:	785b      	ldrb	r3, [r3, #1]
    3a9c:	2b2e      	cmp	r3, #46	; 0x2e
    3a9e:	d002      	beq.n	3aa6 <usb_cb_control_setup+0x12>
		}
		usb_ep0_in(len);
		usb_ep0_out();
	}
	else
		usb_ep0_stall();
    3aa0:	4b12      	ldr	r3, [pc, #72]	; (3aec <usb_cb_control_setup+0x58>)
    3aa2:	4798      	blx	r3
}
    3aa4:	bd10      	pop	{r4, pc}
		switch (usb_setup.wIndex) {
    3aa6:	4b10      	ldr	r3, [pc, #64]	; (3ae8 <usb_cb_control_setup+0x54>)
    3aa8:	889b      	ldrh	r3, [r3, #4]
    3aaa:	2b04      	cmp	r3, #4
    3aac:	d004      	beq.n	3ab8 <usb_cb_control_setup+0x24>
    3aae:	2b05      	cmp	r3, #5
    3ab0:	d010      	beq.n	3ad4 <usb_cb_control_setup+0x40>
			return usb_ep0_stall();
    3ab2:	4b0e      	ldr	r3, [pc, #56]	; (3aec <usb_cb_control_setup+0x58>)
    3ab4:	4798      	blx	r3
    3ab6:	e7f5      	b.n	3aa4 <usb_cb_control_setup+0x10>
			if (len > msft_compatible.dwLength)
    3ab8:	2c28      	cmp	r4, #40	; 0x28
    3aba:	d900      	bls.n	3abe <usb_cb_control_setup+0x2a>
				len = msft_compatible.dwLength;
    3abc:	2428      	movs	r4, #40	; 0x28
			memcpy(ep0_buf_in, &msft_compatible, len);
    3abe:	0022      	movs	r2, r4
    3ac0:	490b      	ldr	r1, [pc, #44]	; (3af0 <usb_cb_control_setup+0x5c>)
    3ac2:	480c      	ldr	r0, [pc, #48]	; (3af4 <usb_cb_control_setup+0x60>)
    3ac4:	4b0c      	ldr	r3, [pc, #48]	; (3af8 <usb_cb_control_setup+0x64>)
    3ac6:	4798      	blx	r3
		usb_ep0_in(len);
    3ac8:	b2e0      	uxtb	r0, r4
    3aca:	4b0c      	ldr	r3, [pc, #48]	; (3afc <usb_cb_control_setup+0x68>)
    3acc:	4798      	blx	r3
		usb_ep0_out();
    3ace:	4b0c      	ldr	r3, [pc, #48]	; (3b00 <usb_cb_control_setup+0x6c>)
    3ad0:	4798      	blx	r3
    3ad2:	e7e7      	b.n	3aa4 <usb_cb_control_setup+0x10>
			if (len > msft_extended.dwLength)
    3ad4:	2c8e      	cmp	r4, #142	; 0x8e
    3ad6:	d900      	bls.n	3ada <usb_cb_control_setup+0x46>
				len = msft_extended.dwLength;
    3ad8:	248e      	movs	r4, #142	; 0x8e
			memcpy(ep0_buf_in, &msft_extended, len);
    3ada:	0022      	movs	r2, r4
    3adc:	4904      	ldr	r1, [pc, #16]	; (3af0 <usb_cb_control_setup+0x5c>)
    3ade:	3128      	adds	r1, #40	; 0x28
    3ae0:	4804      	ldr	r0, [pc, #16]	; (3af4 <usb_cb_control_setup+0x60>)
    3ae2:	4b05      	ldr	r3, [pc, #20]	; (3af8 <usb_cb_control_setup+0x64>)
    3ae4:	4798      	blx	r3
			break;
    3ae6:	e7ef      	b.n	3ac8 <usb_cb_control_setup+0x34>
    3ae8:	20000808 	.word	0x20000808
    3aec:	00003941 	.word	0x00003941
    3af0:	00006208 	.word	0x00006208
    3af4:	200005fc 	.word	0x200005fc
    3af8:	00004461 	.word	0x00004461
    3afc:	000038f1 	.word	0x000038f1
    3b00:	000038a9 	.word	0x000038a9

00003b04 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {

}
    3b04:	4770      	bx	lr

00003b06 <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {

}
    3b06:	4770      	bx	lr

00003b08 <usb_cb_completion>:

void usb_cb_completion(void) {
	// no int flag remaining
}
    3b08:	4770      	bx	lr
	...

00003b0c <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    3b0c:	b510      	push	{r4, lr}
	switch (config) {
    3b0e:	2800      	cmp	r0, #0
    3b10:	d003      	beq.n	3b1a <usb_cb_set_configuration+0xe>
    3b12:	2801      	cmp	r0, #1
    3b14:	d008      	beq.n	3b28 <usb_cb_set_configuration+0x1c>
		usb_enable_ep(confDesc.endpOUT.bEndpointAddress, confDesc.endpOUT.bmAttributes, confDesc.endpOUT.wMaxPacketSize);
		usb_enable_ep(confDesc.endpIN.bEndpointAddress, confDesc.endpIN.bmAttributes, confDesc.endpIN.wMaxPacketSize);
		usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
		return true;
	  default:
		return false;
    3b16:	2000      	movs	r0, #0
    3b18:	e005      	b.n	3b26 <usb_cb_set_configuration+0x1a>
		usb_disable_ep(confDesc.endpOUT.bEndpointAddress);
    3b1a:	2001      	movs	r0, #1
    3b1c:	4c0a      	ldr	r4, [pc, #40]	; (3b48 <usb_cb_set_configuration+0x3c>)
    3b1e:	47a0      	blx	r4
		usb_disable_ep(confDesc.endpIN.bEndpointAddress);
    3b20:	2081      	movs	r0, #129	; 0x81
    3b22:	47a0      	blx	r4
		return true;
    3b24:	2001      	movs	r0, #1
	}
	return true;
}
    3b26:	bd10      	pop	{r4, pc}
		usb_enable_ep(confDesc.endpOUT.bEndpointAddress, confDesc.endpOUT.bmAttributes, confDesc.endpOUT.wMaxPacketSize);
    3b28:	2240      	movs	r2, #64	; 0x40
    3b2a:	2103      	movs	r1, #3
    3b2c:	2001      	movs	r0, #1
    3b2e:	4c07      	ldr	r4, [pc, #28]	; (3b4c <usb_cb_set_configuration+0x40>)
    3b30:	47a0      	blx	r4
		usb_enable_ep(confDesc.endpIN.bEndpointAddress, confDesc.endpIN.bmAttributes, confDesc.endpIN.wMaxPacketSize);
    3b32:	2240      	movs	r2, #64	; 0x40
    3b34:	2103      	movs	r1, #3
    3b36:	2081      	movs	r0, #129	; 0x81
    3b38:	47a0      	blx	r4
		usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
    3b3a:	2240      	movs	r2, #64	; 0x40
    3b3c:	4904      	ldr	r1, [pc, #16]	; (3b50 <usb_cb_set_configuration+0x44>)
    3b3e:	2001      	movs	r0, #1
    3b40:	4b04      	ldr	r3, [pc, #16]	; (3b54 <usb_cb_set_configuration+0x48>)
    3b42:	4798      	blx	r3
		return true;
    3b44:	2001      	movs	r0, #1
    3b46:	e7ee      	b.n	3b26 <usb_cb_set_configuration+0x1a>
    3b48:	00003789 	.word	0x00003789
    3b4c:	00003681 	.word	0x00003681
    3b50:	20000b40 	.word	0x20000b40
    3b54:	000037c9 	.word	0x000037c9

00003b58 <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	return !(interface || altsetting);
    3b58:	4308      	orrs	r0, r1
    3b5a:	4241      	negs	r1, r0
    3b5c:	4148      	adcs	r0, r1
    3b5e:	b2c0      	uxtb	r0, r0
}
    3b60:	4770      	bx	lr
	...

00003b64 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    3b64:	b510      	push	{r4, lr}
    3b66:	0014      	movs	r4, r2
	switch (type) {
    3b68:	2802      	cmp	r0, #2
    3b6a:	d00c      	beq.n	3b86 <usb_cb_get_descriptor+0x22>
    3b6c:	2803      	cmp	r0, #3
    3b6e:	d011      	beq.n	3b94 <usb_cb_get_descriptor+0x30>
    3b70:	2801      	cmp	r0, #1
    3b72:	d001      	beq.n	3b78 <usb_cb_get_descriptor+0x14>
			return 0;
		}
		return ((USB_StringDescriptor *)*descriptor_ptr)->bLength;
	  case USB_DTYPE_DeviceCapabilities:
	  default: // There is an unrecognized descriptor type request !
		return 0;
    3b74:	2000      	movs	r0, #0
	}
}
    3b76:	bd10      	pop	{r4, pc}
		*descriptor_ptr = (uint8_t *)&devDesc;
    3b78:	4b20      	ldr	r3, [pc, #128]	; (3bfc <usb_cb_get_descriptor+0x98>)
    3b7a:	3338      	adds	r3, #56	; 0x38
    3b7c:	6013      	str	r3, [r2, #0]
		return ( index ? 0 : devDesc.bLength );
    3b7e:	2900      	cmp	r1, #0
    3b80:	d135      	bne.n	3bee <usb_cb_get_descriptor+0x8a>
    3b82:	3011      	adds	r0, #17
    3b84:	e7f7      	b.n	3b76 <usb_cb_get_descriptor+0x12>
		*descriptor_ptr = (uint8_t *)&confDesc;
    3b86:	4b1d      	ldr	r3, [pc, #116]	; (3bfc <usb_cb_get_descriptor+0x98>)
    3b88:	334c      	adds	r3, #76	; 0x4c
    3b8a:	6013      	str	r3, [r2, #0]
		return ( index ? 0 : confDesc.conf.wTotalLength );
    3b8c:	2900      	cmp	r1, #0
    3b8e:	d130      	bne.n	3bf2 <usb_cb_get_descriptor+0x8e>
    3b90:	2020      	movs	r0, #32
    3b92:	e7f0      	b.n	3b76 <usb_cb_get_descriptor+0x12>
		switch (index) {
    3b94:	2903      	cmp	r1, #3
    3b96:	d01c      	beq.n	3bd2 <usb_cb_get_descriptor+0x6e>
    3b98:	d808      	bhi.n	3bac <usb_cb_get_descriptor+0x48>
    3b9a:	2901      	cmp	r1, #1
    3b9c:	d00f      	beq.n	3bbe <usb_cb_get_descriptor+0x5a>
    3b9e:	d813      	bhi.n	3bc8 <usb_cb_get_descriptor+0x64>
			*descriptor_ptr = (uint8_t *)&langDesc;
    3ba0:	4b16      	ldr	r3, [pc, #88]	; (3bfc <usb_cb_get_descriptor+0x98>)
    3ba2:	336c      	adds	r3, #108	; 0x6c
    3ba4:	6013      	str	r3, [r2, #0]
		return ((USB_StringDescriptor *)*descriptor_ptr)->bLength;
    3ba6:	6823      	ldr	r3, [r4, #0]
    3ba8:	7818      	ldrb	r0, [r3, #0]
    3baa:	e7e4      	b.n	3b76 <usb_cb_get_descriptor+0x12>
		switch (index) {
    3bac:	2905      	cmp	r1, #5
    3bae:	d019      	beq.n	3be4 <usb_cb_get_descriptor+0x80>
    3bb0:	d313      	bcc.n	3bda <usb_cb_get_descriptor+0x76>
    3bb2:	29ee      	cmp	r1, #238	; 0xee
    3bb4:	d11f      	bne.n	3bf6 <usb_cb_get_descriptor+0x92>
			*descriptor_ptr = (uint8_t *)&msft_os;
    3bb6:	4b11      	ldr	r3, [pc, #68]	; (3bfc <usb_cb_get_descriptor+0x98>)
    3bb8:	3370      	adds	r3, #112	; 0x70
    3bba:	6013      	str	r3, [r2, #0]
			break;
    3bbc:	e7f3      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("ATMEL [Spark firmware]");
    3bbe:	4810      	ldr	r0, [pc, #64]	; (3c00 <usb_cb_get_descriptor+0x9c>)
    3bc0:	4b10      	ldr	r3, [pc, #64]	; (3c04 <usb_cb_get_descriptor+0xa0>)
    3bc2:	4798      	blx	r3
    3bc4:	6020      	str	r0, [r4, #0]
			break;
    3bc6:	e7ee      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("WinUSB test device");
    3bc8:	480f      	ldr	r0, [pc, #60]	; (3c08 <usb_cb_get_descriptor+0xa4>)
    3bca:	4b0e      	ldr	r3, [pc, #56]	; (3c04 <usb_cb_get_descriptor+0xa0>)
    3bcc:	4798      	blx	r3
    3bce:	6020      	str	r0, [r4, #0]
			break;
    3bd0:	e7e9      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = samd_serial_number_string_descriptor();
    3bd2:	4b0e      	ldr	r3, [pc, #56]	; (3c0c <usb_cb_get_descriptor+0xa8>)
    3bd4:	4798      	blx	r3
    3bd6:	6020      	str	r0, [r4, #0]
			break;
    3bd8:	e7e5      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("Configuration string descriptor");
    3bda:	480d      	ldr	r0, [pc, #52]	; (3c10 <usb_cb_get_descriptor+0xac>)
    3bdc:	4b09      	ldr	r3, [pc, #36]	; (3c04 <usb_cb_get_descriptor+0xa0>)
    3bde:	4798      	blx	r3
    3be0:	6020      	str	r0, [r4, #0]
			break;
    3be2:	e7e0      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("Interface string descriptor");
    3be4:	480b      	ldr	r0, [pc, #44]	; (3c14 <usb_cb_get_descriptor+0xb0>)
    3be6:	4b07      	ldr	r3, [pc, #28]	; (3c04 <usb_cb_get_descriptor+0xa0>)
    3be8:	4798      	blx	r3
    3bea:	6020      	str	r0, [r4, #0]
			break;
    3bec:	e7db      	b.n	3ba6 <usb_cb_get_descriptor+0x42>
		return ( index ? 0 : devDesc.bLength );
    3bee:	2000      	movs	r0, #0
    3bf0:	e7c1      	b.n	3b76 <usb_cb_get_descriptor+0x12>
		return ( index ? 0 : confDesc.conf.wTotalLength );
    3bf2:	2000      	movs	r0, #0
    3bf4:	e7bf      	b.n	3b76 <usb_cb_get_descriptor+0x12>
			return 0;
    3bf6:	2000      	movs	r0, #0
    3bf8:	e7bd      	b.n	3b76 <usb_cb_get_descriptor+0x12>
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	00006288 	.word	0x00006288
    3c00:	00006310 	.word	0x00006310
    3c04:	00003f9d 	.word	0x00003f9d
    3c08:	00006328 	.word	0x00006328
    3c0c:	00003a2d 	.word	0x00003a2d
    3c10:	0000633c 	.word	0x0000633c
    3c14:	0000635c 	.word	0x0000635c

00003c18 <usb_setup_fifos>:
//================================
fifo_t *buffer; // For storing incoming packets
volatile bool sending_data;

void usb_setup_fifos(void)
{
    3c18:	b570      	push	{r4, r5, r6, lr}
 * This function is used to create a buffer, it allocates memory for a buffer of
 * the requested size
 */
inline fifo_t* createFifo(size_t size)
{
	uint8_t* buffer = (uint8_t*)malloc(size);
    3c1a:	2080      	movs	r0, #128	; 0x80
    3c1c:	00c0      	lsls	r0, r0, #3
    3c1e:	4b0c      	ldr	r3, [pc, #48]	; (3c50 <usb_setup_fifos+0x38>)
    3c20:	4798      	blx	r3
    3c22:	1e05      	subs	r5, r0, #0

	if (buffer == NULL)
    3c24:	d012      	beq.n	3c4c <usb_setup_fifos+0x34>
	return NULL;

	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    3c26:	2010      	movs	r0, #16
    3c28:	4b09      	ldr	r3, [pc, #36]	; (3c50 <usb_setup_fifos+0x38>)
    3c2a:	4798      	blx	r3
    3c2c:	1e04      	subs	r4, r0, #0

	if (fifo == NULL)
    3c2e:	d009      	beq.n	3c44 <usb_setup_fifos+0x2c>
	{
		free(buffer);
		return NULL;
	}

	fifo->buffer = buffer;
    3c30:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    3c32:	2300      	movs	r3, #0
    3c34:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    3c36:	6083      	str	r3, [r0, #8]
	fifo->size = size;
    3c38:	2380      	movs	r3, #128	; 0x80
    3c3a:	00db      	lsls	r3, r3, #3
    3c3c:	60c3      	str	r3, [r0, #12]
	buffer = createFifo(1024);
    3c3e:	4b05      	ldr	r3, [pc, #20]	; (3c54 <usb_setup_fifos+0x3c>)
    3c40:	601c      	str	r4, [r3, #0]
}
    3c42:	bd70      	pop	{r4, r5, r6, pc}
		free(buffer);
    3c44:	0028      	movs	r0, r5
    3c46:	4b04      	ldr	r3, [pc, #16]	; (3c58 <usb_setup_fifos+0x40>)
    3c48:	4798      	blx	r3
    3c4a:	e7f8      	b.n	3c3e <usb_setup_fifos+0x26>
	return NULL;
    3c4c:	2400      	movs	r4, #0
    3c4e:	e7f6      	b.n	3c3e <usb_setup_fifos+0x26>
    3c50:	00004439 	.word	0x00004439
    3c54:	20000b84 	.word	0x20000b84
    3c58:	0000444d 	.word	0x0000444d

00003c5c <usb_bytes_available>:

uint16_t usb_bytes_available(void)
{
	return elements(buffer);
    3c5c:	4b0c      	ldr	r3, [pc, #48]	; (3c90 <usb_bytes_available+0x34>)
    3c5e:	6819      	ldr	r1, [r3, #0]
/**
 * @brief Returns the number of elements in the FIFO
 */
inline size_t elements(fifo_t* fifo)
{
	if (fifo->head == fifo->tail)
    3c60:	684b      	ldr	r3, [r1, #4]
    3c62:	688a      	ldr	r2, [r1, #8]
    3c64:	4293      	cmp	r3, r2
    3c66:	d011      	beq.n	3c8c <usb_bytes_available+0x30>
	return 0;
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    3c68:	68c8      	ldr	r0, [r1, #12]
    3c6a:	1e41      	subs	r1, r0, #1
    3c6c:	428b      	cmp	r3, r1
    3c6e:	d007      	beq.n	3c80 <usb_bytes_available+0x24>
    3c70:	1e51      	subs	r1, r2, #1
    3c72:	428b      	cmp	r3, r1
    3c74:	d002      	beq.n	3c7c <usb_bytes_available+0x20>
	return fifo->size;
	else if (fifo->head < fifo->tail)
    3c76:	4293      	cmp	r3, r2
    3c78:	d305      	bcc.n	3c86 <usb_bytes_available+0x2a>
	return (fifo->head) + (fifo->size - fifo->tail);
	else
	return fifo->head - fifo->tail;
    3c7a:	1a98      	subs	r0, r3, r2
    3c7c:	b280      	uxth	r0, r0
}
    3c7e:	4770      	bx	lr
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    3c80:	2a00      	cmp	r2, #0
    3c82:	d1f5      	bne.n	3c70 <usb_bytes_available+0x14>
    3c84:	e7fa      	b.n	3c7c <usb_bytes_available+0x20>
	return (fifo->head) + (fifo->size - fifo->tail);
    3c86:	1a80      	subs	r0, r0, r2
    3c88:	1818      	adds	r0, r3, r0
    3c8a:	e7f7      	b.n	3c7c <usb_bytes_available+0x20>
	return 0;
    3c8c:	2000      	movs	r0, #0
    3c8e:	e7f5      	b.n	3c7c <usb_bytes_available+0x20>
    3c90:	20000b84 	.word	0x20000b84

00003c94 <usb_get>:

void usb_get(char *point, uint16_t num_char)
{
    3c94:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i=0;i<num_char;i++)
    3c96:	2300      	movs	r3, #0
    3c98:	e00c      	b.n	3cb4 <usb_get+0x20>
	return true;
    3c9a:	2601      	movs	r6, #1
    3c9c:	e014      	b.n	3cc8 <usb_get+0x34>
	*byte = fifo->buffer[fifo->tail];
    3c9e:	6816      	ldr	r6, [r2, #0]
    3ca0:	5d34      	ldrb	r4, [r6, r4]
    3ca2:	702c      	strb	r4, [r5, #0]
	fifo->tail++;
    3ca4:	6894      	ldr	r4, [r2, #8]
    3ca6:	3401      	adds	r4, #1
    3ca8:	6094      	str	r4, [r2, #8]
	if (fifo->tail == fifo->size)
    3caa:	68d5      	ldr	r5, [r2, #12]
    3cac:	42ac      	cmp	r4, r5
    3cae:	d010      	beq.n	3cd2 <usb_get+0x3e>
    3cb0:	3301      	adds	r3, #1
    3cb2:	b29b      	uxth	r3, r3
    3cb4:	428b      	cmp	r3, r1
    3cb6:	d20f      	bcs.n	3cd8 <usb_get+0x44>
		pop(buffer, &point[i]);
    3cb8:	4a08      	ldr	r2, [pc, #32]	; (3cdc <usb_get+0x48>)
    3cba:	6812      	ldr	r2, [r2, #0]
    3cbc:	18c5      	adds	r5, r0, r3
	if (fifo->head == fifo->tail)
    3cbe:	6894      	ldr	r4, [r2, #8]
    3cc0:	6856      	ldr	r6, [r2, #4]
    3cc2:	42a6      	cmp	r6, r4
    3cc4:	d0e9      	beq.n	3c9a <usb_get+0x6>
	return false;
    3cc6:	2600      	movs	r6, #0
	if (isEmpty(fifo) == true)
    3cc8:	2e00      	cmp	r6, #0
    3cca:	d0e8      	beq.n	3c9e <usb_get+0xa>
		*byte = 0x7F; // We do hear plops in UPKEEP mode from here, why is isEmpty not triggered?
    3ccc:	227f      	movs	r2, #127	; 0x7f
    3cce:	702a      	strb	r2, [r5, #0]
    3cd0:	e7ee      	b.n	3cb0 <usb_get+0x1c>
	fifo->tail = 0;
    3cd2:	2400      	movs	r4, #0
    3cd4:	6094      	str	r4, [r2, #8]
    3cd6:	e7eb      	b.n	3cb0 <usb_get+0x1c>
}
    3cd8:	bd70      	pop	{r4, r5, r6, pc}
    3cda:	46c0      	nop			; (mov r8, r8)
    3cdc:	20000b84 	.word	0x20000b84

00003ce0 <usb_put>:

void usb_put(char *point, uint16_t num_char)
{
    3ce0:	b510      	push	{r4, lr}
    3ce2:	000a      	movs	r2, r1
	sending_data = true;
    3ce4:	2101      	movs	r1, #1
    3ce6:	4b06      	ldr	r3, [pc, #24]	; (3d00 <usb_put+0x20>)
    3ce8:	7019      	strb	r1, [r3, #0]
	usb_ep_start_in(confDesc.endpIN.bEndpointAddress, point, num_char, true);
    3cea:	2301      	movs	r3, #1
    3cec:	0001      	movs	r1, r0
    3cee:	2081      	movs	r0, #129	; 0x81
    3cf0:	4c04      	ldr	r4, [pc, #16]	; (3d04 <usb_put+0x24>)
    3cf2:	47a0      	blx	r4
	//usb_ep_wait_for_ready(confDesc.endpIN.bEndpointAddress);
	while(sending_data == true);
    3cf4:	4b02      	ldr	r3, [pc, #8]	; (3d00 <usb_put+0x20>)
    3cf6:	781b      	ldrb	r3, [r3, #0]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d1fb      	bne.n	3cf4 <usb_put+0x14>
}
    3cfc:	bd10      	pop	{r4, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	20000b80 	.word	0x20000b80
    3d04:	00003819 	.word	0x00003819

00003d08 <usb_cb_handle_ep_out>:

// Handle incoming data
void usb_cb_handle_ep_out(uint8_t ep) {
    3d08:	b570      	push	{r4, r5, r6, lr}
    3d0a:	0005      	movs	r5, r0
	uint32_t size = usb_ep_out_length(ep);
    3d0c:	4b19      	ldr	r3, [pc, #100]	; (3d74 <usb_cb_handle_ep_out+0x6c>)
    3d0e:	4798      	blx	r3
    3d10:	0004      	movs	r4, r0
	
	switch (ep) {		
    3d12:	2d01      	cmp	r5, #1
    3d14:	d000      	beq.n	3d18 <usb_cb_handle_ep_out+0x10>
			return;
		
		default:
			return;
	}
}
    3d16:	bd70      	pop	{r4, r5, r6, pc}
			usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
    3d18:	2240      	movs	r2, #64	; 0x40
    3d1a:	4917      	ldr	r1, [pc, #92]	; (3d78 <usb_cb_handle_ep_out+0x70>)
    3d1c:	2001      	movs	r0, #1
    3d1e:	4b17      	ldr	r3, [pc, #92]	; (3d7c <usb_cb_handle_ep_out+0x74>)
    3d20:	4798      	blx	r3
			for(uint8_t i=0;i<size;i++)
    3d22:	2200      	movs	r2, #0
    3d24:	e008      	b.n	3d38 <usb_cb_handle_ep_out+0x30>
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    3d26:	6899      	ldr	r1, [r3, #8]
    3d28:	2900      	cmp	r1, #0
    3d2a:	d110      	bne.n	3d4e <usb_cb_handle_ep_out+0x46>
	return true;
    3d2c:	2101      	movs	r1, #1
    3d2e:	e013      	b.n	3d58 <usb_cb_handle_ep_out+0x50>
    3d30:	2101      	movs	r1, #1
    3d32:	e011      	b.n	3d58 <usb_cb_handle_ep_out+0x50>
    3d34:	3201      	adds	r2, #1
    3d36:	b2d2      	uxtb	r2, r2
    3d38:	4294      	cmp	r4, r2
    3d3a:	d9ec      	bls.n	3d16 <usb_cb_handle_ep_out+0xe>
				push(buffer, ep1_buf_out[i]);
    3d3c:	4b10      	ldr	r3, [pc, #64]	; (3d80 <usb_cb_handle_ep_out+0x78>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	490d      	ldr	r1, [pc, #52]	; (3d78 <usb_cb_handle_ep_out+0x70>)
    3d42:	5c8d      	ldrb	r5, [r1, r2]
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    3d44:	6858      	ldr	r0, [r3, #4]
    3d46:	68d9      	ldr	r1, [r3, #12]
    3d48:	3901      	subs	r1, #1
    3d4a:	4288      	cmp	r0, r1
    3d4c:	d0eb      	beq.n	3d26 <usb_cb_handle_ep_out+0x1e>
    3d4e:	6899      	ldr	r1, [r3, #8]
    3d50:	3901      	subs	r1, #1
    3d52:	4288      	cmp	r0, r1
    3d54:	d0ec      	beq.n	3d30 <usb_cb_handle_ep_out+0x28>
	return false;
    3d56:	2100      	movs	r1, #0
	if (isFull(fifo) == true)
    3d58:	2900      	cmp	r1, #0
    3d5a:	d1eb      	bne.n	3d34 <usb_cb_handle_ep_out+0x2c>
	fifo->buffer[fifo->head] = byte;
    3d5c:	6819      	ldr	r1, [r3, #0]
    3d5e:	540d      	strb	r5, [r1, r0]
	fifo->head++;
    3d60:	6859      	ldr	r1, [r3, #4]
    3d62:	3101      	adds	r1, #1
    3d64:	6059      	str	r1, [r3, #4]
	if (fifo->head == fifo->size)
    3d66:	68d8      	ldr	r0, [r3, #12]
    3d68:	4281      	cmp	r1, r0
    3d6a:	d1e3      	bne.n	3d34 <usb_cb_handle_ep_out+0x2c>
	fifo->head = 0;
    3d6c:	2100      	movs	r1, #0
    3d6e:	6059      	str	r1, [r3, #4]
    3d70:	e7e0      	b.n	3d34 <usb_cb_handle_ep_out+0x2c>
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	00003879 	.word	0x00003879
    3d78:	20000b40 	.word	0x20000b40
    3d7c:	000037c9 	.word	0x000037c9
    3d80:	20000b84 	.word	0x20000b84

00003d84 <usb_cb_handle_ep_in>:

// Typically don't do anything extra when we send data out
void usb_cb_handle_ep_in(uint8_t ep) {
	switch (ep) {
    3d84:	2801      	cmp	r0, #1
    3d86:	d104      	bne.n	3d92 <usb_cb_handle_ep_in+0xe>
		case 0x01:
			byteQueueToUSB = 0;
    3d88:	2300      	movs	r3, #0
    3d8a:	4a02      	ldr	r2, [pc, #8]	; (3d94 <usb_cb_handle_ep_in+0x10>)
    3d8c:	7013      	strb	r3, [r2, #0]
			sending_data = false;
    3d8e:	4a02      	ldr	r2, [pc, #8]	; (3d98 <usb_cb_handle_ep_in+0x14>)
    3d90:	7013      	strb	r3, [r2, #0]
			return;
		
		default:
			return;
	}
    3d92:	4770      	bx	lr
    3d94:	20000248 	.word	0x20000248
    3d98:	20000b80 	.word	0x20000b80

00003d9c <usb_ep0_in_multi>:
#include "usb.h"

volatile uint8_t usb_configuration;

void usb_ep0_in_multi(void) {
    3d9c:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    3d9e:	4b11      	ldr	r3, [pc, #68]	; (3de4 <usb_ep0_in_multi+0x48>)
    3da0:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    3da2:	2c40      	cmp	r4, #64	; 0x40
    3da4:	d900      	bls.n	3da8 <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    3da6:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    3da8:	0026      	movs	r6, r4
    3daa:	4d0f      	ldr	r5, [pc, #60]	; (3de8 <usb_ep0_in_multi+0x4c>)
    3dac:	4b0f      	ldr	r3, [pc, #60]	; (3dec <usb_ep0_in_multi+0x50>)
    3dae:	6819      	ldr	r1, [r3, #0]
    3db0:	0022      	movs	r2, r4
    3db2:	0028      	movs	r0, r5
    3db4:	4b0e      	ldr	r3, [pc, #56]	; (3df0 <usb_ep0_in_multi+0x54>)
    3db6:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    3db8:	2300      	movs	r3, #0
    3dba:	0022      	movs	r2, r4
    3dbc:	0029      	movs	r1, r5
    3dbe:	2080      	movs	r0, #128	; 0x80
    3dc0:	4d0c      	ldr	r5, [pc, #48]	; (3df4 <usb_ep0_in_multi+0x58>)
    3dc2:	47a8      	blx	r5

	if (tsize == 0) {
    3dc4:	2c00      	cmp	r4, #0
    3dc6:	d009      	beq.n	3ddc <usb_ep0_in_multi+0x40>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    3dc8:	4a06      	ldr	r2, [pc, #24]	; (3de4 <usb_ep0_in_multi+0x48>)
    3dca:	8813      	ldrh	r3, [r2, #0]
    3dcc:	1b1c      	subs	r4, r3, r4
    3dce:	8014      	strh	r4, [r2, #0]
	usb_ep0_in_ptr += tsize;
    3dd0:	4a06      	ldr	r2, [pc, #24]	; (3dec <usb_ep0_in_multi+0x50>)
    3dd2:	6813      	ldr	r3, [r2, #0]
    3dd4:	469c      	mov	ip, r3
    3dd6:	4466      	add	r6, ip
    3dd8:	6016      	str	r6, [r2, #0]
}
    3dda:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    3ddc:	4b06      	ldr	r3, [pc, #24]	; (3df8 <usb_ep0_in_multi+0x5c>)
    3dde:	4798      	blx	r3
    3de0:	e7f2      	b.n	3dc8 <usb_ep0_in_multi+0x2c>
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	20000802 	.word	0x20000802
    3de8:	200005fc 	.word	0x200005fc
    3dec:	20000804 	.word	0x20000804
    3df0:	00004461 	.word	0x00004461
    3df4:	00003819 	.word	0x00003819
    3df8:	000038a9 	.word	0x000038a9

00003dfc <usb_handle_setup>:

void usb_handle_setup(void){
    3dfc:	b510      	push	{r4, lr}
    3dfe:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    3e00:	4b3f      	ldr	r3, [pc, #252]	; (3f00 <usb_handle_setup+0x104>)
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	2260      	movs	r2, #96	; 0x60
    3e06:	421a      	tst	r2, r3
    3e08:	d176      	bne.n	3ef8 <usb_handle_setup+0xfc>
		switch (usb_setup.bRequest){
    3e0a:	4b3d      	ldr	r3, [pc, #244]	; (3f00 <usb_handle_setup+0x104>)
    3e0c:	785b      	ldrb	r3, [r3, #1]
    3e0e:	2b0b      	cmp	r3, #11
    3e10:	d86f      	bhi.n	3ef2 <usb_handle_setup+0xf6>
    3e12:	009b      	lsls	r3, r3, #2
    3e14:	4a3b      	ldr	r2, [pc, #236]	; (3f04 <usb_handle_setup+0x108>)
    3e16:	58d3      	ldr	r3, [r2, r3]
    3e18:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    3e1a:	4b3b      	ldr	r3, [pc, #236]	; (3f08 <usb_handle_setup+0x10c>)
    3e1c:	2200      	movs	r2, #0
    3e1e:	701a      	strb	r2, [r3, #0]
				ep0_buf_in[1] = 0;
    3e20:	705a      	strb	r2, [r3, #1]
				usb_ep0_in(2);
    3e22:	2002      	movs	r0, #2
    3e24:	4b39      	ldr	r3, [pc, #228]	; (3f0c <usb_handle_setup+0x110>)
    3e26:	4798      	blx	r3
				return usb_ep0_out();
    3e28:	4b39      	ldr	r3, [pc, #228]	; (3f10 <usb_handle_setup+0x114>)
    3e2a:	4798      	blx	r3
    3e2c:	e066      	b.n	3efc <usb_handle_setup+0x100>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    3e2e:	2000      	movs	r0, #0
    3e30:	4b36      	ldr	r3, [pc, #216]	; (3f0c <usb_handle_setup+0x110>)
    3e32:	4798      	blx	r3
				return usb_ep0_out();
    3e34:	4b36      	ldr	r3, [pc, #216]	; (3f10 <usb_handle_setup+0x114>)
    3e36:	4798      	blx	r3
    3e38:	e060      	b.n	3efc <usb_handle_setup+0x100>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    3e3a:	2000      	movs	r0, #0
    3e3c:	4b33      	ldr	r3, [pc, #204]	; (3f0c <usb_handle_setup+0x110>)
    3e3e:	4798      	blx	r3
				return usb_ep0_out();
    3e40:	4b33      	ldr	r3, [pc, #204]	; (3f10 <usb_handle_setup+0x114>)
    3e42:	4798      	blx	r3
    3e44:	e05a      	b.n	3efc <usb_handle_setup+0x100>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    3e46:	4b2e      	ldr	r3, [pc, #184]	; (3f00 <usb_handle_setup+0x104>)
    3e48:	8859      	ldrh	r1, [r3, #2]
    3e4a:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    3e4c:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    3e4e:	2300      	movs	r3, #0
    3e50:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    3e52:	aa01      	add	r2, sp, #4
    3e54:	4b2f      	ldr	r3, [pc, #188]	; (3f14 <usb_handle_setup+0x118>)
    3e56:	4798      	blx	r3

				if (size && descriptor){
    3e58:	2800      	cmp	r0, #0
    3e5a:	d01a      	beq.n	3e92 <usb_handle_setup+0x96>
    3e5c:	9901      	ldr	r1, [sp, #4]
    3e5e:	2900      	cmp	r1, #0
    3e60:	d017      	beq.n	3e92 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    3e62:	4a27      	ldr	r2, [pc, #156]	; (3f00 <usb_handle_setup+0x104>)
    3e64:	88d2      	ldrh	r2, [r2, #6]
    3e66:	4290      	cmp	r0, r2
    3e68:	d800      	bhi.n	3e6c <usb_handle_setup+0x70>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    3e6a:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}
					if (descriptor == ep0_buf_in) {
    3e6c:	4b26      	ldr	r3, [pc, #152]	; (3f08 <usb_handle_setup+0x10c>)
    3e6e:	4299      	cmp	r1, r3
    3e70:	d006      	beq.n	3e80 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    3e72:	4b29      	ldr	r3, [pc, #164]	; (3f18 <usb_handle_setup+0x11c>)
    3e74:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    3e76:	4b29      	ldr	r3, [pc, #164]	; (3f1c <usb_handle_setup+0x120>)
    3e78:	6019      	str	r1, [r3, #0]
						usb_ep0_in_multi();
    3e7a:	4b29      	ldr	r3, [pc, #164]	; (3f20 <usb_handle_setup+0x124>)
    3e7c:	4798      	blx	r3
    3e7e:	e03d      	b.n	3efc <usb_handle_setup+0x100>
						usb_ep0_in_size = 0;
    3e80:	2100      	movs	r1, #0
    3e82:	4b25      	ldr	r3, [pc, #148]	; (3f18 <usb_handle_setup+0x11c>)
    3e84:	8019      	strh	r1, [r3, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    3e86:	2301      	movs	r3, #1
    3e88:	491f      	ldr	r1, [pc, #124]	; (3f08 <usb_handle_setup+0x10c>)
    3e8a:	2080      	movs	r0, #128	; 0x80
    3e8c:	4c25      	ldr	r4, [pc, #148]	; (3f24 <usb_handle_setup+0x128>)
    3e8e:	47a0      	blx	r4
    3e90:	e034      	b.n	3efc <usb_handle_setup+0x100>
					}
					return;
				} else {
					return usb_ep0_stall();
    3e92:	4b25      	ldr	r3, [pc, #148]	; (3f28 <usb_handle_setup+0x12c>)
    3e94:	4798      	blx	r3
    3e96:	e031      	b.n	3efc <usb_handle_setup+0x100>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    3e98:	4b24      	ldr	r3, [pc, #144]	; (3f2c <usb_handle_setup+0x130>)
    3e9a:	781a      	ldrb	r2, [r3, #0]
    3e9c:	4b1a      	ldr	r3, [pc, #104]	; (3f08 <usb_handle_setup+0x10c>)
    3e9e:	701a      	strb	r2, [r3, #0]
				usb_ep0_in(1);
    3ea0:	2001      	movs	r0, #1
    3ea2:	4b1a      	ldr	r3, [pc, #104]	; (3f0c <usb_handle_setup+0x110>)
    3ea4:	4798      	blx	r3
				return usb_ep0_out();
    3ea6:	4b1a      	ldr	r3, [pc, #104]	; (3f10 <usb_handle_setup+0x114>)
    3ea8:	4798      	blx	r3
    3eaa:	e027      	b.n	3efc <usb_handle_setup+0x100>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    3eac:	4b14      	ldr	r3, [pc, #80]	; (3f00 <usb_handle_setup+0x104>)
    3eae:	7898      	ldrb	r0, [r3, #2]
    3eb0:	4b1f      	ldr	r3, [pc, #124]	; (3f30 <usb_handle_setup+0x134>)
    3eb2:	4798      	blx	r3
    3eb4:	2800      	cmp	r0, #0
    3eb6:	d009      	beq.n	3ecc <usb_handle_setup+0xd0>
					usb_ep0_in(0);
    3eb8:	2000      	movs	r0, #0
    3eba:	4b14      	ldr	r3, [pc, #80]	; (3f0c <usb_handle_setup+0x110>)
    3ebc:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    3ebe:	4b10      	ldr	r3, [pc, #64]	; (3f00 <usb_handle_setup+0x104>)
    3ec0:	789a      	ldrb	r2, [r3, #2]
    3ec2:	4b1a      	ldr	r3, [pc, #104]	; (3f2c <usb_handle_setup+0x130>)
    3ec4:	701a      	strb	r2, [r3, #0]
					return usb_ep0_out();
    3ec6:	4b12      	ldr	r3, [pc, #72]	; (3f10 <usb_handle_setup+0x114>)
    3ec8:	4798      	blx	r3
    3eca:	e017      	b.n	3efc <usb_handle_setup+0x100>
				} else {
					return usb_ep0_stall();
    3ecc:	4b16      	ldr	r3, [pc, #88]	; (3f28 <usb_handle_setup+0x12c>)
    3ece:	4798      	blx	r3
    3ed0:	e014      	b.n	3efc <usb_handle_setup+0x100>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    3ed2:	4b0b      	ldr	r3, [pc, #44]	; (3f00 <usb_handle_setup+0x104>)
    3ed4:	8859      	ldrh	r1, [r3, #2]
    3ed6:	8898      	ldrh	r0, [r3, #4]
    3ed8:	4b16      	ldr	r3, [pc, #88]	; (3f34 <usb_handle_setup+0x138>)
    3eda:	4798      	blx	r3
    3edc:	2800      	cmp	r0, #0
    3ede:	d005      	beq.n	3eec <usb_handle_setup+0xf0>
					usb_ep0_in(0);
    3ee0:	2000      	movs	r0, #0
    3ee2:	4b0a      	ldr	r3, [pc, #40]	; (3f0c <usb_handle_setup+0x110>)
    3ee4:	4798      	blx	r3
					return usb_ep0_out();
    3ee6:	4b0a      	ldr	r3, [pc, #40]	; (3f10 <usb_handle_setup+0x114>)
    3ee8:	4798      	blx	r3
    3eea:	e007      	b.n	3efc <usb_handle_setup+0x100>
				} else {
					return usb_ep0_stall();
    3eec:	4b0e      	ldr	r3, [pc, #56]	; (3f28 <usb_handle_setup+0x12c>)
    3eee:	4798      	blx	r3
    3ef0:	e004      	b.n	3efc <usb_handle_setup+0x100>
				}

			default:
				return usb_ep0_stall();
    3ef2:	4b0d      	ldr	r3, [pc, #52]	; (3f28 <usb_handle_setup+0x12c>)
    3ef4:	4798      	blx	r3
    3ef6:	e001      	b.n	3efc <usb_handle_setup+0x100>
		}
	}

	usb_cb_control_setup();
    3ef8:	4b0f      	ldr	r3, [pc, #60]	; (3f38 <usb_handle_setup+0x13c>)
    3efa:	4798      	blx	r3
}
    3efc:	b002      	add	sp, #8
    3efe:	bd10      	pop	{r4, pc}
    3f00:	20000808 	.word	0x20000808
    3f04:	00006378 	.word	0x00006378
    3f08:	200005fc 	.word	0x200005fc
    3f0c:	000038f1 	.word	0x000038f1
    3f10:	000038a9 	.word	0x000038a9
    3f14:	00003b65 	.word	0x00003b65
    3f18:	20000802 	.word	0x20000802
    3f1c:	20000804 	.word	0x20000804
    3f20:	00003d9d 	.word	0x00003d9d
    3f24:	00003819 	.word	0x00003819
    3f28:	00003941 	.word	0x00003941
    3f2c:	20000dc8 	.word	0x20000dc8
    3f30:	00003b0d 	.word	0x00003b0d
    3f34:	00003b59 	.word	0x00003b59
    3f38:	00003a95 	.word	0x00003a95

00003f3c <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    3f3c:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    3f3e:	4b04      	ldr	r3, [pc, #16]	; (3f50 <usb_handle_control_out_complete+0x14>)
    3f40:	781b      	ldrb	r3, [r3, #0]
    3f42:	2260      	movs	r2, #96	; 0x60
    3f44:	421a      	tst	r2, r3
    3f46:	d100      	bne.n	3f4a <usb_handle_control_out_complete+0xe>
		// Let the status stage proceed
	} else
		usb_cb_control_out_completion();
}
    3f48:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    3f4a:	4b02      	ldr	r3, [pc, #8]	; (3f54 <usb_handle_control_out_complete+0x18>)
    3f4c:	4798      	blx	r3
}
    3f4e:	e7fb      	b.n	3f48 <usb_handle_control_out_complete+0xc>
    3f50:	20000808 	.word	0x20000808
    3f54:	00003b07 	.word	0x00003b07

00003f58 <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    3f58:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    3f5a:	4b0c      	ldr	r3, [pc, #48]	; (3f8c <usb_handle_control_in_complete+0x34>)
    3f5c:	781b      	ldrb	r3, [r3, #0]
    3f5e:	2260      	movs	r2, #96	; 0x60
    3f60:	421a      	tst	r2, r3
    3f62:	d10f      	bne.n	3f84 <usb_handle_control_in_complete+0x2c>
		switch (usb_setup.bRequest){
    3f64:	4b09      	ldr	r3, [pc, #36]	; (3f8c <usb_handle_control_in_complete+0x34>)
    3f66:	785b      	ldrb	r3, [r3, #1]
    3f68:	2b05      	cmp	r3, #5
    3f6a:	d004      	beq.n	3f76 <usb_handle_control_in_complete+0x1e>
    3f6c:	2b06      	cmp	r3, #6
    3f6e:	d10b      	bne.n	3f88 <usb_handle_control_in_complete+0x30>
			case USB_REQ_SetAddress:
				usb_set_address(usb_setup.wValue & 0x7F);
				return;
			case USB_REQ_GetDescriptor:
				usb_ep0_in_multi();
    3f70:	4b07      	ldr	r3, [pc, #28]	; (3f90 <usb_handle_control_in_complete+0x38>)
    3f72:	4798      	blx	r3
				return;
    3f74:	e008      	b.n	3f88 <usb_handle_control_in_complete+0x30>
				usb_set_address(usb_setup.wValue & 0x7F);
    3f76:	4b05      	ldr	r3, [pc, #20]	; (3f8c <usb_handle_control_in_complete+0x34>)
    3f78:	885b      	ldrh	r3, [r3, #2]
    3f7a:	207f      	movs	r0, #127	; 0x7f
    3f7c:	4018      	ands	r0, r3
    3f7e:	4b05      	ldr	r3, [pc, #20]	; (3f94 <usb_handle_control_in_complete+0x3c>)
    3f80:	4798      	blx	r3
				return;
    3f82:	e001      	b.n	3f88 <usb_handle_control_in_complete+0x30>
		}
	} else
		usb_cb_control_in_completion();
    3f84:	4b04      	ldr	r3, [pc, #16]	; (3f98 <usb_handle_control_in_complete+0x40>)
    3f86:	4798      	blx	r3
}
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	20000808 	.word	0x20000808
    3f90:	00003d9d 	.word	0x00003d9d
    3f94:	0000366d 	.word	0x0000366d
    3f98:	00003b05 	.word	0x00003b05

00003f9c <usb_string_to_descriptor>:

void* usb_string_to_descriptor(char* str) {
    3f9c:	b570      	push	{r4, r5, r6, lr}
    3f9e:	0005      	movs	r5, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    3fa0:	4b0b      	ldr	r3, [pc, #44]	; (3fd0 <usb_string_to_descriptor+0x34>)
    3fa2:	4798      	blx	r3
    3fa4:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE * 8 - 2)/2;
	if (len > maxlen) len = maxlen;
    3fa6:	28ff      	cmp	r0, #255	; 0xff
    3fa8:	d900      	bls.n	3fac <usb_string_to_descriptor+0x10>
    3faa:	20ff      	movs	r0, #255	; 0xff
	desc->bLength = USB_STRING_LEN(len);
    3fac:	4a09      	ldr	r2, [pc, #36]	; (3fd4 <usb_string_to_descriptor+0x38>)
    3fae:	1c43      	adds	r3, r0, #1
    3fb0:	005b      	lsls	r3, r3, #1
    3fb2:	7013      	strb	r3, [r2, #0]
	desc->bDescriptorType = USB_DTYPE_String;
    3fb4:	2303      	movs	r3, #3
    3fb6:	7053      	strb	r3, [r2, #1]
	for (int i=0; i<len; i++) {
    3fb8:	2300      	movs	r3, #0
    3fba:	e005      	b.n	3fc8 <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    3fbc:	5ce9      	ldrb	r1, [r5, r3]
    3fbe:	005c      	lsls	r4, r3, #1
    3fc0:	4a04      	ldr	r2, [pc, #16]	; (3fd4 <usb_string_to_descriptor+0x38>)
    3fc2:	1912      	adds	r2, r2, r4
    3fc4:	8051      	strh	r1, [r2, #2]
	for (int i=0; i<len; i++) {
    3fc6:	3301      	adds	r3, #1
    3fc8:	4283      	cmp	r3, r0
    3fca:	dbf7      	blt.n	3fbc <usb_string_to_descriptor+0x20>
	}
	return desc;
}
    3fcc:	4801      	ldr	r0, [pc, #4]	; (3fd4 <usb_string_to_descriptor+0x38>)
    3fce:	bd70      	pop	{r4, r5, r6, pc}
    3fd0:	0000464d 	.word	0x0000464d
    3fd4:	200005fc 	.word	0x200005fc

00003fd8 <WM8731_CMD>:
**************************************************************************************************/
void WM8731_CMD(char address, unsigned int cmd){
char addr;
  // B[15:9] Are Control Address Bits
  // B[8:0]  Are Control Data Bits
  addr = address << 1;                 // Shift left for one position
    3fd8:	0040      	lsls	r0, r0, #1
    3fda:	b2c3      	uxtb	r3, r0
  uint8_t hicmd = (cmd >> 8);
    3fdc:	0a0a      	lsrs	r2, r1, #8
  uint8_t locmd = cmd & 0xff;
  addr = addr | (hicmd & 1);
    3fde:	2001      	movs	r0, #1
    3fe0:	4010      	ands	r0, r2
    3fe2:	4318      	orrs	r0, r3
  WM8731_write_buffer[0] = addr ;
    3fe4:	4b1a      	ldr	r3, [pc, #104]	; (4050 <WM8731_CMD+0x78>)
    3fe6:	7018      	strb	r0, [r3, #0]
  WM8731_write_buffer[1] = locmd;
    3fe8:	7059      	strb	r1, [r3, #1]


//-----------------------------------------------------------------------------
inline bool i2c_write(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    3fea:	2234      	movs	r2, #52	; 0x34
    3fec:	4b19      	ldr	r3, [pc, #100]	; (4054 <WM8731_CMD+0x7c>)
    3fee:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    3ff0:	4b18      	ldr	r3, [pc, #96]	; (4054 <WM8731_CMD+0x7c>)
    3ff2:	7e1b      	ldrb	r3, [r3, #24]
    3ff4:	07db      	lsls	r3, r3, #31
    3ff6:	d5fb      	bpl.n	3ff0 <WM8731_CMD+0x18>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ff8:	4b16      	ldr	r3, [pc, #88]	; (4054 <WM8731_CMD+0x7c>)
    3ffa:	8b5b      	ldrh	r3, [r3, #26]
    3ffc:	075b      	lsls	r3, r3, #29
    3ffe:	d411      	bmi.n	4024 <WM8731_CMD+0x4c>
    4000:	2200      	movs	r2, #0
		//dbg_log("I2C: RXNACK during write (address)\r\n");
		//udi_cdc_putc('A');
		return false;
	}

	for (int i = 0; i < size; i++)
    4002:	2a01      	cmp	r2, #1
    4004:	dc1c      	bgt.n	4040 <WM8731_CMD+0x68>
	{
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4006:	4b12      	ldr	r3, [pc, #72]	; (4050 <WM8731_CMD+0x78>)
    4008:	5c98      	ldrb	r0, [r3, r2]
    400a:	2328      	movs	r3, #40	; 0x28
    400c:	4911      	ldr	r1, [pc, #68]	; (4054 <WM8731_CMD+0x7c>)
    400e:	54c8      	strb	r0, [r1, r3]

 		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4010:	4b10      	ldr	r3, [pc, #64]	; (4054 <WM8731_CMD+0x7c>)
    4012:	7e1b      	ldrb	r3, [r3, #24]
    4014:	07db      	lsls	r3, r3, #31
    4016:	d5fb      	bpl.n	4010 <WM8731_CMD+0x38>

		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4018:	4b0e      	ldr	r3, [pc, #56]	; (4054 <WM8731_CMD+0x7c>)
    401a:	8b5b      	ldrh	r3, [r3, #26]
    401c:	075b      	lsls	r3, r3, #29
    401e:	d408      	bmi.n	4032 <WM8731_CMD+0x5a>
	for (int i = 0; i < size; i++)
    4020:	3201      	adds	r2, #1
    4022:	e7ee      	b.n	4002 <WM8731_CMD+0x2a>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4024:	4a0b      	ldr	r2, [pc, #44]	; (4054 <WM8731_CMD+0x7c>)
    4026:	6851      	ldr	r1, [r2, #4]
    4028:	23c0      	movs	r3, #192	; 0xc0
    402a:	029b      	lsls	r3, r3, #10
    402c:	430b      	orrs	r3, r1
    402e:	6053      	str	r3, [r2, #4]
    4030:	e00c      	b.n	404c <WM8731_CMD+0x74>
		{
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4032:	4a08      	ldr	r2, [pc, #32]	; (4054 <WM8731_CMD+0x7c>)
    4034:	6851      	ldr	r1, [r2, #4]
    4036:	23c0      	movs	r3, #192	; 0xc0
    4038:	029b      	lsls	r3, r3, #10
    403a:	430b      	orrs	r3, r1
    403c:	6053      	str	r3, [r2, #4]
    403e:	e005      	b.n	404c <WM8731_CMD+0x74>
			//udi_cdc_putc('B');
			return false;
		}
	}

	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4040:	4a04      	ldr	r2, [pc, #16]	; (4054 <WM8731_CMD+0x7c>)
    4042:	6851      	ldr	r1, [r2, #4]
    4044:	23c0      	movs	r3, #192	; 0xc0
    4046:	029b      	lsls	r3, r3, #10
    4048:	430b      	orrs	r3, r1
    404a:	6053      	str	r3, [r2, #4]

  i2c_write(WM8731_write_buffer, 2, WM8731_SLAVE_ADDR);
}
    404c:	4770      	bx	lr
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	20000250 	.word	0x20000250
    4054:	42001000 	.word	0x42001000

00004058 <WM8731_Init>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Initializes WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Init(){
    4058:	b570      	push	{r4, r5, r6, lr}
    405a:	2200      	movs	r2, #0
    405c:	4b1f      	ldr	r3, [pc, #124]	; (40dc <WM8731_Init+0x84>)
    405e:	821a      	strh	r2, [r3, #16]
    4060:	e008      	b.n	4074 <WM8731_Init+0x1c>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4062:	2110      	movs	r1, #16
    4064:	4b1d      	ldr	r3, [pc, #116]	; (40dc <WM8731_Init+0x84>)
    4066:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4068:	4b1c      	ldr	r3, [pc, #112]	; (40dc <WM8731_Init+0x84>)
    406a:	7b9b      	ldrb	r3, [r3, #14]
    406c:	06db      	lsls	r3, r3, #27
    406e:	d5fb      	bpl.n	4068 <WM8731_Init+0x10>
		cnt++;
    4070:	3201      	adds	r2, #1
    4072:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    4074:	2a64      	cmp	r2, #100	; 0x64
    4076:	d1f4      	bne.n	4062 <WM8731_Init+0xa>
	
  timerDelay(100);

  // Write to WM8731 registers appropriate values
  WM8731_CMD(WM8731_REG_RESET, _WM8731_Reset);               // Reset module
    4078:	2100      	movs	r1, #0
    407a:	200f      	movs	r0, #15
    407c:	4c18      	ldr	r4, [pc, #96]	; (40e0 <WM8731_Init+0x88>)
    407e:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_LLINE_IN, _WM8731_left_lineIn);      // Left line in settings
    4080:	2518      	movs	r5, #24
    4082:	35ff      	adds	r5, #255	; 0xff
    4084:	0029      	movs	r1, r5
    4086:	2000      	movs	r0, #0
    4088:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_RLINE_IN, _WM8731_Right_lineIn);     // Right line in settings
    408a:	0029      	movs	r1, r5
    408c:	2001      	movs	r0, #1
    408e:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_LHPHONE_OUT, _WM8731_Left_hp);       // Left headphone out settings
    4090:	35d9      	adds	r5, #217	; 0xd9
    4092:	0029      	movs	r1, r5
    4094:	2002      	movs	r0, #2
    4096:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_RHPHONE_OUT, _WM8731_Right_hp);      // Right headphone out settings
    4098:	0029      	movs	r1, r5
    409a:	2003      	movs	r0, #3
    409c:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_ANALOG_PATH, _WM8731_AnalogAudio);   // Analog paths
    409e:	2114      	movs	r1, #20
    40a0:	2004      	movs	r0, #4
    40a2:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_DIGITAL_PATH, _WM8731_DigitalAudio); // Digital paths
    40a4:	2106      	movs	r1, #6
    40a6:	2005      	movs	r0, #5
    40a8:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_PDOWN_CTRL, _WM8731_power);          // Power down control
    40aa:	2102      	movs	r1, #2
    40ac:	2006      	movs	r0, #6
    40ae:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_DIGITAL_IF, _WM8731_DAIF);           // Digital interface
    40b0:	2142      	movs	r1, #66	; 0x42
    40b2:	2007      	movs	r0, #7
    40b4:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_SAMPLING_CTRL, _WM8731_Sampling);    // Sampling control
    40b6:	2100      	movs	r1, #0
    40b8:	2008      	movs	r0, #8
    40ba:	47a0      	blx	r4
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    40bc:	2200      	movs	r2, #0
    40be:	4b07      	ldr	r3, [pc, #28]	; (40dc <WM8731_Init+0x84>)
    40c0:	821a      	strh	r2, [r3, #16]
    40c2:	e008      	b.n	40d6 <WM8731_Init+0x7e>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    40c4:	2110      	movs	r1, #16
    40c6:	4b05      	ldr	r3, [pc, #20]	; (40dc <WM8731_Init+0x84>)
    40c8:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    40ca:	4b04      	ldr	r3, [pc, #16]	; (40dc <WM8731_Init+0x84>)
    40cc:	7b9b      	ldrb	r3, [r3, #14]
    40ce:	06db      	lsls	r3, r3, #27
    40d0:	d5fb      	bpl.n	40ca <WM8731_Init+0x72>
		cnt++;
    40d2:	3201      	adds	r2, #1
    40d4:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    40d6:	2a0a      	cmp	r2, #10
    40d8:	d1f4      	bne.n	40c4 <WM8731_Init+0x6c>
  //WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Activate);		 // Activate module

	timerDelay(10);
}
    40da:	bd70      	pop	{r4, r5, r6, pc}
    40dc:	42003000 	.word	0x42003000
    40e0:	00003fd9 	.word	0x00003fd9

000040e4 <WM8731_Activate>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Activates WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Activate(){
    40e4:	b510      	push	{r4, lr}
  WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Activate);
    40e6:	2101      	movs	r1, #1
    40e8:	2009      	movs	r0, #9
    40ea:	4b01      	ldr	r3, [pc, #4]	; (40f0 <WM8731_Activate+0xc>)
    40ec:	4798      	blx	r3
}
    40ee:	bd10      	pop	{r4, pc}
    40f0:	00003fd9 	.word	0x00003fd9

000040f4 <WM8731_Deactivate>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Deactivates WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Deactivate(){
    40f4:	b510      	push	{r4, lr}
  WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Deactivate);
    40f6:	2100      	movs	r1, #0
    40f8:	2009      	movs	r0, #9
    40fa:	4b01      	ldr	r3, [pc, #4]	; (4100 <WM8731_Deactivate+0xc>)
    40fc:	4798      	blx	r3
}
    40fe:	bd10      	pop	{r4, pc}
    4100:	00003fd9 	.word	0x00003fd9

00004104 <__udivsi3>:
    4104:	2200      	movs	r2, #0
    4106:	0843      	lsrs	r3, r0, #1
    4108:	428b      	cmp	r3, r1
    410a:	d374      	bcc.n	41f6 <__udivsi3+0xf2>
    410c:	0903      	lsrs	r3, r0, #4
    410e:	428b      	cmp	r3, r1
    4110:	d35f      	bcc.n	41d2 <__udivsi3+0xce>
    4112:	0a03      	lsrs	r3, r0, #8
    4114:	428b      	cmp	r3, r1
    4116:	d344      	bcc.n	41a2 <__udivsi3+0x9e>
    4118:	0b03      	lsrs	r3, r0, #12
    411a:	428b      	cmp	r3, r1
    411c:	d328      	bcc.n	4170 <__udivsi3+0x6c>
    411e:	0c03      	lsrs	r3, r0, #16
    4120:	428b      	cmp	r3, r1
    4122:	d30d      	bcc.n	4140 <__udivsi3+0x3c>
    4124:	22ff      	movs	r2, #255	; 0xff
    4126:	0209      	lsls	r1, r1, #8
    4128:	ba12      	rev	r2, r2
    412a:	0c03      	lsrs	r3, r0, #16
    412c:	428b      	cmp	r3, r1
    412e:	d302      	bcc.n	4136 <__udivsi3+0x32>
    4130:	1212      	asrs	r2, r2, #8
    4132:	0209      	lsls	r1, r1, #8
    4134:	d065      	beq.n	4202 <__udivsi3+0xfe>
    4136:	0b03      	lsrs	r3, r0, #12
    4138:	428b      	cmp	r3, r1
    413a:	d319      	bcc.n	4170 <__udivsi3+0x6c>
    413c:	e000      	b.n	4140 <__udivsi3+0x3c>
    413e:	0a09      	lsrs	r1, r1, #8
    4140:	0bc3      	lsrs	r3, r0, #15
    4142:	428b      	cmp	r3, r1
    4144:	d301      	bcc.n	414a <__udivsi3+0x46>
    4146:	03cb      	lsls	r3, r1, #15
    4148:	1ac0      	subs	r0, r0, r3
    414a:	4152      	adcs	r2, r2
    414c:	0b83      	lsrs	r3, r0, #14
    414e:	428b      	cmp	r3, r1
    4150:	d301      	bcc.n	4156 <__udivsi3+0x52>
    4152:	038b      	lsls	r3, r1, #14
    4154:	1ac0      	subs	r0, r0, r3
    4156:	4152      	adcs	r2, r2
    4158:	0b43      	lsrs	r3, r0, #13
    415a:	428b      	cmp	r3, r1
    415c:	d301      	bcc.n	4162 <__udivsi3+0x5e>
    415e:	034b      	lsls	r3, r1, #13
    4160:	1ac0      	subs	r0, r0, r3
    4162:	4152      	adcs	r2, r2
    4164:	0b03      	lsrs	r3, r0, #12
    4166:	428b      	cmp	r3, r1
    4168:	d301      	bcc.n	416e <__udivsi3+0x6a>
    416a:	030b      	lsls	r3, r1, #12
    416c:	1ac0      	subs	r0, r0, r3
    416e:	4152      	adcs	r2, r2
    4170:	0ac3      	lsrs	r3, r0, #11
    4172:	428b      	cmp	r3, r1
    4174:	d301      	bcc.n	417a <__udivsi3+0x76>
    4176:	02cb      	lsls	r3, r1, #11
    4178:	1ac0      	subs	r0, r0, r3
    417a:	4152      	adcs	r2, r2
    417c:	0a83      	lsrs	r3, r0, #10
    417e:	428b      	cmp	r3, r1
    4180:	d301      	bcc.n	4186 <__udivsi3+0x82>
    4182:	028b      	lsls	r3, r1, #10
    4184:	1ac0      	subs	r0, r0, r3
    4186:	4152      	adcs	r2, r2
    4188:	0a43      	lsrs	r3, r0, #9
    418a:	428b      	cmp	r3, r1
    418c:	d301      	bcc.n	4192 <__udivsi3+0x8e>
    418e:	024b      	lsls	r3, r1, #9
    4190:	1ac0      	subs	r0, r0, r3
    4192:	4152      	adcs	r2, r2
    4194:	0a03      	lsrs	r3, r0, #8
    4196:	428b      	cmp	r3, r1
    4198:	d301      	bcc.n	419e <__udivsi3+0x9a>
    419a:	020b      	lsls	r3, r1, #8
    419c:	1ac0      	subs	r0, r0, r3
    419e:	4152      	adcs	r2, r2
    41a0:	d2cd      	bcs.n	413e <__udivsi3+0x3a>
    41a2:	09c3      	lsrs	r3, r0, #7
    41a4:	428b      	cmp	r3, r1
    41a6:	d301      	bcc.n	41ac <__udivsi3+0xa8>
    41a8:	01cb      	lsls	r3, r1, #7
    41aa:	1ac0      	subs	r0, r0, r3
    41ac:	4152      	adcs	r2, r2
    41ae:	0983      	lsrs	r3, r0, #6
    41b0:	428b      	cmp	r3, r1
    41b2:	d301      	bcc.n	41b8 <__udivsi3+0xb4>
    41b4:	018b      	lsls	r3, r1, #6
    41b6:	1ac0      	subs	r0, r0, r3
    41b8:	4152      	adcs	r2, r2
    41ba:	0943      	lsrs	r3, r0, #5
    41bc:	428b      	cmp	r3, r1
    41be:	d301      	bcc.n	41c4 <__udivsi3+0xc0>
    41c0:	014b      	lsls	r3, r1, #5
    41c2:	1ac0      	subs	r0, r0, r3
    41c4:	4152      	adcs	r2, r2
    41c6:	0903      	lsrs	r3, r0, #4
    41c8:	428b      	cmp	r3, r1
    41ca:	d301      	bcc.n	41d0 <__udivsi3+0xcc>
    41cc:	010b      	lsls	r3, r1, #4
    41ce:	1ac0      	subs	r0, r0, r3
    41d0:	4152      	adcs	r2, r2
    41d2:	08c3      	lsrs	r3, r0, #3
    41d4:	428b      	cmp	r3, r1
    41d6:	d301      	bcc.n	41dc <__udivsi3+0xd8>
    41d8:	00cb      	lsls	r3, r1, #3
    41da:	1ac0      	subs	r0, r0, r3
    41dc:	4152      	adcs	r2, r2
    41de:	0883      	lsrs	r3, r0, #2
    41e0:	428b      	cmp	r3, r1
    41e2:	d301      	bcc.n	41e8 <__udivsi3+0xe4>
    41e4:	008b      	lsls	r3, r1, #2
    41e6:	1ac0      	subs	r0, r0, r3
    41e8:	4152      	adcs	r2, r2
    41ea:	0843      	lsrs	r3, r0, #1
    41ec:	428b      	cmp	r3, r1
    41ee:	d301      	bcc.n	41f4 <__udivsi3+0xf0>
    41f0:	004b      	lsls	r3, r1, #1
    41f2:	1ac0      	subs	r0, r0, r3
    41f4:	4152      	adcs	r2, r2
    41f6:	1a41      	subs	r1, r0, r1
    41f8:	d200      	bcs.n	41fc <__udivsi3+0xf8>
    41fa:	4601      	mov	r1, r0
    41fc:	4152      	adcs	r2, r2
    41fe:	4610      	mov	r0, r2
    4200:	4770      	bx	lr
    4202:	e7ff      	b.n	4204 <__udivsi3+0x100>
    4204:	b501      	push	{r0, lr}
    4206:	2000      	movs	r0, #0
    4208:	f000 f8f0 	bl	43ec <__aeabi_idiv0>
    420c:	bd02      	pop	{r1, pc}
    420e:	46c0      	nop			; (mov r8, r8)

00004210 <__aeabi_uidivmod>:
    4210:	2900      	cmp	r1, #0
    4212:	d0f7      	beq.n	4204 <__udivsi3+0x100>
    4214:	e776      	b.n	4104 <__udivsi3>
    4216:	4770      	bx	lr

00004218 <__divsi3>:
    4218:	4603      	mov	r3, r0
    421a:	430b      	orrs	r3, r1
    421c:	d47f      	bmi.n	431e <__divsi3+0x106>
    421e:	2200      	movs	r2, #0
    4220:	0843      	lsrs	r3, r0, #1
    4222:	428b      	cmp	r3, r1
    4224:	d374      	bcc.n	4310 <__divsi3+0xf8>
    4226:	0903      	lsrs	r3, r0, #4
    4228:	428b      	cmp	r3, r1
    422a:	d35f      	bcc.n	42ec <__divsi3+0xd4>
    422c:	0a03      	lsrs	r3, r0, #8
    422e:	428b      	cmp	r3, r1
    4230:	d344      	bcc.n	42bc <__divsi3+0xa4>
    4232:	0b03      	lsrs	r3, r0, #12
    4234:	428b      	cmp	r3, r1
    4236:	d328      	bcc.n	428a <__divsi3+0x72>
    4238:	0c03      	lsrs	r3, r0, #16
    423a:	428b      	cmp	r3, r1
    423c:	d30d      	bcc.n	425a <__divsi3+0x42>
    423e:	22ff      	movs	r2, #255	; 0xff
    4240:	0209      	lsls	r1, r1, #8
    4242:	ba12      	rev	r2, r2
    4244:	0c03      	lsrs	r3, r0, #16
    4246:	428b      	cmp	r3, r1
    4248:	d302      	bcc.n	4250 <__divsi3+0x38>
    424a:	1212      	asrs	r2, r2, #8
    424c:	0209      	lsls	r1, r1, #8
    424e:	d065      	beq.n	431c <__divsi3+0x104>
    4250:	0b03      	lsrs	r3, r0, #12
    4252:	428b      	cmp	r3, r1
    4254:	d319      	bcc.n	428a <__divsi3+0x72>
    4256:	e000      	b.n	425a <__divsi3+0x42>
    4258:	0a09      	lsrs	r1, r1, #8
    425a:	0bc3      	lsrs	r3, r0, #15
    425c:	428b      	cmp	r3, r1
    425e:	d301      	bcc.n	4264 <__divsi3+0x4c>
    4260:	03cb      	lsls	r3, r1, #15
    4262:	1ac0      	subs	r0, r0, r3
    4264:	4152      	adcs	r2, r2
    4266:	0b83      	lsrs	r3, r0, #14
    4268:	428b      	cmp	r3, r1
    426a:	d301      	bcc.n	4270 <__divsi3+0x58>
    426c:	038b      	lsls	r3, r1, #14
    426e:	1ac0      	subs	r0, r0, r3
    4270:	4152      	adcs	r2, r2
    4272:	0b43      	lsrs	r3, r0, #13
    4274:	428b      	cmp	r3, r1
    4276:	d301      	bcc.n	427c <__divsi3+0x64>
    4278:	034b      	lsls	r3, r1, #13
    427a:	1ac0      	subs	r0, r0, r3
    427c:	4152      	adcs	r2, r2
    427e:	0b03      	lsrs	r3, r0, #12
    4280:	428b      	cmp	r3, r1
    4282:	d301      	bcc.n	4288 <__divsi3+0x70>
    4284:	030b      	lsls	r3, r1, #12
    4286:	1ac0      	subs	r0, r0, r3
    4288:	4152      	adcs	r2, r2
    428a:	0ac3      	lsrs	r3, r0, #11
    428c:	428b      	cmp	r3, r1
    428e:	d301      	bcc.n	4294 <__divsi3+0x7c>
    4290:	02cb      	lsls	r3, r1, #11
    4292:	1ac0      	subs	r0, r0, r3
    4294:	4152      	adcs	r2, r2
    4296:	0a83      	lsrs	r3, r0, #10
    4298:	428b      	cmp	r3, r1
    429a:	d301      	bcc.n	42a0 <__divsi3+0x88>
    429c:	028b      	lsls	r3, r1, #10
    429e:	1ac0      	subs	r0, r0, r3
    42a0:	4152      	adcs	r2, r2
    42a2:	0a43      	lsrs	r3, r0, #9
    42a4:	428b      	cmp	r3, r1
    42a6:	d301      	bcc.n	42ac <__divsi3+0x94>
    42a8:	024b      	lsls	r3, r1, #9
    42aa:	1ac0      	subs	r0, r0, r3
    42ac:	4152      	adcs	r2, r2
    42ae:	0a03      	lsrs	r3, r0, #8
    42b0:	428b      	cmp	r3, r1
    42b2:	d301      	bcc.n	42b8 <__divsi3+0xa0>
    42b4:	020b      	lsls	r3, r1, #8
    42b6:	1ac0      	subs	r0, r0, r3
    42b8:	4152      	adcs	r2, r2
    42ba:	d2cd      	bcs.n	4258 <__divsi3+0x40>
    42bc:	09c3      	lsrs	r3, r0, #7
    42be:	428b      	cmp	r3, r1
    42c0:	d301      	bcc.n	42c6 <__divsi3+0xae>
    42c2:	01cb      	lsls	r3, r1, #7
    42c4:	1ac0      	subs	r0, r0, r3
    42c6:	4152      	adcs	r2, r2
    42c8:	0983      	lsrs	r3, r0, #6
    42ca:	428b      	cmp	r3, r1
    42cc:	d301      	bcc.n	42d2 <__divsi3+0xba>
    42ce:	018b      	lsls	r3, r1, #6
    42d0:	1ac0      	subs	r0, r0, r3
    42d2:	4152      	adcs	r2, r2
    42d4:	0943      	lsrs	r3, r0, #5
    42d6:	428b      	cmp	r3, r1
    42d8:	d301      	bcc.n	42de <__divsi3+0xc6>
    42da:	014b      	lsls	r3, r1, #5
    42dc:	1ac0      	subs	r0, r0, r3
    42de:	4152      	adcs	r2, r2
    42e0:	0903      	lsrs	r3, r0, #4
    42e2:	428b      	cmp	r3, r1
    42e4:	d301      	bcc.n	42ea <__divsi3+0xd2>
    42e6:	010b      	lsls	r3, r1, #4
    42e8:	1ac0      	subs	r0, r0, r3
    42ea:	4152      	adcs	r2, r2
    42ec:	08c3      	lsrs	r3, r0, #3
    42ee:	428b      	cmp	r3, r1
    42f0:	d301      	bcc.n	42f6 <__divsi3+0xde>
    42f2:	00cb      	lsls	r3, r1, #3
    42f4:	1ac0      	subs	r0, r0, r3
    42f6:	4152      	adcs	r2, r2
    42f8:	0883      	lsrs	r3, r0, #2
    42fa:	428b      	cmp	r3, r1
    42fc:	d301      	bcc.n	4302 <__divsi3+0xea>
    42fe:	008b      	lsls	r3, r1, #2
    4300:	1ac0      	subs	r0, r0, r3
    4302:	4152      	adcs	r2, r2
    4304:	0843      	lsrs	r3, r0, #1
    4306:	428b      	cmp	r3, r1
    4308:	d301      	bcc.n	430e <__divsi3+0xf6>
    430a:	004b      	lsls	r3, r1, #1
    430c:	1ac0      	subs	r0, r0, r3
    430e:	4152      	adcs	r2, r2
    4310:	1a41      	subs	r1, r0, r1
    4312:	d200      	bcs.n	4316 <__divsi3+0xfe>
    4314:	4601      	mov	r1, r0
    4316:	4152      	adcs	r2, r2
    4318:	4610      	mov	r0, r2
    431a:	4770      	bx	lr
    431c:	e05d      	b.n	43da <__divsi3+0x1c2>
    431e:	0fca      	lsrs	r2, r1, #31
    4320:	d000      	beq.n	4324 <__divsi3+0x10c>
    4322:	4249      	negs	r1, r1
    4324:	1003      	asrs	r3, r0, #32
    4326:	d300      	bcc.n	432a <__divsi3+0x112>
    4328:	4240      	negs	r0, r0
    432a:	4053      	eors	r3, r2
    432c:	2200      	movs	r2, #0
    432e:	469c      	mov	ip, r3
    4330:	0903      	lsrs	r3, r0, #4
    4332:	428b      	cmp	r3, r1
    4334:	d32d      	bcc.n	4392 <__divsi3+0x17a>
    4336:	0a03      	lsrs	r3, r0, #8
    4338:	428b      	cmp	r3, r1
    433a:	d312      	bcc.n	4362 <__divsi3+0x14a>
    433c:	22fc      	movs	r2, #252	; 0xfc
    433e:	0189      	lsls	r1, r1, #6
    4340:	ba12      	rev	r2, r2
    4342:	0a03      	lsrs	r3, r0, #8
    4344:	428b      	cmp	r3, r1
    4346:	d30c      	bcc.n	4362 <__divsi3+0x14a>
    4348:	0189      	lsls	r1, r1, #6
    434a:	1192      	asrs	r2, r2, #6
    434c:	428b      	cmp	r3, r1
    434e:	d308      	bcc.n	4362 <__divsi3+0x14a>
    4350:	0189      	lsls	r1, r1, #6
    4352:	1192      	asrs	r2, r2, #6
    4354:	428b      	cmp	r3, r1
    4356:	d304      	bcc.n	4362 <__divsi3+0x14a>
    4358:	0189      	lsls	r1, r1, #6
    435a:	d03a      	beq.n	43d2 <__divsi3+0x1ba>
    435c:	1192      	asrs	r2, r2, #6
    435e:	e000      	b.n	4362 <__divsi3+0x14a>
    4360:	0989      	lsrs	r1, r1, #6
    4362:	09c3      	lsrs	r3, r0, #7
    4364:	428b      	cmp	r3, r1
    4366:	d301      	bcc.n	436c <__divsi3+0x154>
    4368:	01cb      	lsls	r3, r1, #7
    436a:	1ac0      	subs	r0, r0, r3
    436c:	4152      	adcs	r2, r2
    436e:	0983      	lsrs	r3, r0, #6
    4370:	428b      	cmp	r3, r1
    4372:	d301      	bcc.n	4378 <__divsi3+0x160>
    4374:	018b      	lsls	r3, r1, #6
    4376:	1ac0      	subs	r0, r0, r3
    4378:	4152      	adcs	r2, r2
    437a:	0943      	lsrs	r3, r0, #5
    437c:	428b      	cmp	r3, r1
    437e:	d301      	bcc.n	4384 <__divsi3+0x16c>
    4380:	014b      	lsls	r3, r1, #5
    4382:	1ac0      	subs	r0, r0, r3
    4384:	4152      	adcs	r2, r2
    4386:	0903      	lsrs	r3, r0, #4
    4388:	428b      	cmp	r3, r1
    438a:	d301      	bcc.n	4390 <__divsi3+0x178>
    438c:	010b      	lsls	r3, r1, #4
    438e:	1ac0      	subs	r0, r0, r3
    4390:	4152      	adcs	r2, r2
    4392:	08c3      	lsrs	r3, r0, #3
    4394:	428b      	cmp	r3, r1
    4396:	d301      	bcc.n	439c <__divsi3+0x184>
    4398:	00cb      	lsls	r3, r1, #3
    439a:	1ac0      	subs	r0, r0, r3
    439c:	4152      	adcs	r2, r2
    439e:	0883      	lsrs	r3, r0, #2
    43a0:	428b      	cmp	r3, r1
    43a2:	d301      	bcc.n	43a8 <__divsi3+0x190>
    43a4:	008b      	lsls	r3, r1, #2
    43a6:	1ac0      	subs	r0, r0, r3
    43a8:	4152      	adcs	r2, r2
    43aa:	d2d9      	bcs.n	4360 <__divsi3+0x148>
    43ac:	0843      	lsrs	r3, r0, #1
    43ae:	428b      	cmp	r3, r1
    43b0:	d301      	bcc.n	43b6 <__divsi3+0x19e>
    43b2:	004b      	lsls	r3, r1, #1
    43b4:	1ac0      	subs	r0, r0, r3
    43b6:	4152      	adcs	r2, r2
    43b8:	1a41      	subs	r1, r0, r1
    43ba:	d200      	bcs.n	43be <__divsi3+0x1a6>
    43bc:	4601      	mov	r1, r0
    43be:	4663      	mov	r3, ip
    43c0:	4152      	adcs	r2, r2
    43c2:	105b      	asrs	r3, r3, #1
    43c4:	4610      	mov	r0, r2
    43c6:	d301      	bcc.n	43cc <__divsi3+0x1b4>
    43c8:	4240      	negs	r0, r0
    43ca:	2b00      	cmp	r3, #0
    43cc:	d500      	bpl.n	43d0 <__divsi3+0x1b8>
    43ce:	4249      	negs	r1, r1
    43d0:	4770      	bx	lr
    43d2:	4663      	mov	r3, ip
    43d4:	105b      	asrs	r3, r3, #1
    43d6:	d300      	bcc.n	43da <__divsi3+0x1c2>
    43d8:	4240      	negs	r0, r0
    43da:	b501      	push	{r0, lr}
    43dc:	2000      	movs	r0, #0
    43de:	f000 f805 	bl	43ec <__aeabi_idiv0>
    43e2:	bd02      	pop	{r1, pc}

000043e4 <__aeabi_idivmod>:
    43e4:	2900      	cmp	r1, #0
    43e6:	d0f8      	beq.n	43da <__divsi3+0x1c2>
    43e8:	e716      	b.n	4218 <__divsi3>
    43ea:	4770      	bx	lr

000043ec <__aeabi_idiv0>:
    43ec:	4770      	bx	lr
    43ee:	46c0      	nop			; (mov r8, r8)

000043f0 <__libc_init_array>:
    43f0:	b570      	push	{r4, r5, r6, lr}
    43f2:	2600      	movs	r6, #0
    43f4:	4d0c      	ldr	r5, [pc, #48]	; (4428 <__libc_init_array+0x38>)
    43f6:	4c0d      	ldr	r4, [pc, #52]	; (442c <__libc_init_array+0x3c>)
    43f8:	1b64      	subs	r4, r4, r5
    43fa:	10a4      	asrs	r4, r4, #2
    43fc:	42a6      	cmp	r6, r4
    43fe:	d109      	bne.n	4414 <__libc_init_array+0x24>
    4400:	2600      	movs	r6, #0
    4402:	f002 f8b5 	bl	6570 <_init>
    4406:	4d0a      	ldr	r5, [pc, #40]	; (4430 <__libc_init_array+0x40>)
    4408:	4c0a      	ldr	r4, [pc, #40]	; (4434 <__libc_init_array+0x44>)
    440a:	1b64      	subs	r4, r4, r5
    440c:	10a4      	asrs	r4, r4, #2
    440e:	42a6      	cmp	r6, r4
    4410:	d105      	bne.n	441e <__libc_init_array+0x2e>
    4412:	bd70      	pop	{r4, r5, r6, pc}
    4414:	00b3      	lsls	r3, r6, #2
    4416:	58eb      	ldr	r3, [r5, r3]
    4418:	4798      	blx	r3
    441a:	3601      	adds	r6, #1
    441c:	e7ee      	b.n	43fc <__libc_init_array+0xc>
    441e:	00b3      	lsls	r3, r6, #2
    4420:	58eb      	ldr	r3, [r5, r3]
    4422:	4798      	blx	r3
    4424:	3601      	adds	r6, #1
    4426:	e7f2      	b.n	440e <__libc_init_array+0x1e>
    4428:	0000657c 	.word	0x0000657c
    442c:	0000657c 	.word	0x0000657c
    4430:	0000657c 	.word	0x0000657c
    4434:	00006580 	.word	0x00006580

00004438 <malloc>:
    4438:	b510      	push	{r4, lr}
    443a:	4b03      	ldr	r3, [pc, #12]	; (4448 <malloc+0x10>)
    443c:	0001      	movs	r1, r0
    443e:	6818      	ldr	r0, [r3, #0]
    4440:	f000 f86a 	bl	4518 <_malloc_r>
    4444:	bd10      	pop	{r4, pc}
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	20000048 	.word	0x20000048

0000444c <free>:
    444c:	b510      	push	{r4, lr}
    444e:	4b03      	ldr	r3, [pc, #12]	; (445c <free+0x10>)
    4450:	0001      	movs	r1, r0
    4452:	6818      	ldr	r0, [r3, #0]
    4454:	f000 f816 	bl	4484 <_free_r>
    4458:	bd10      	pop	{r4, pc}
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	20000048 	.word	0x20000048

00004460 <memcpy>:
    4460:	2300      	movs	r3, #0
    4462:	b510      	push	{r4, lr}
    4464:	429a      	cmp	r2, r3
    4466:	d100      	bne.n	446a <memcpy+0xa>
    4468:	bd10      	pop	{r4, pc}
    446a:	5ccc      	ldrb	r4, [r1, r3]
    446c:	54c4      	strb	r4, [r0, r3]
    446e:	3301      	adds	r3, #1
    4470:	e7f8      	b.n	4464 <memcpy+0x4>

00004472 <memset>:
    4472:	0003      	movs	r3, r0
    4474:	1882      	adds	r2, r0, r2
    4476:	4293      	cmp	r3, r2
    4478:	d100      	bne.n	447c <memset+0xa>
    447a:	4770      	bx	lr
    447c:	7019      	strb	r1, [r3, #0]
    447e:	3301      	adds	r3, #1
    4480:	e7f9      	b.n	4476 <memset+0x4>
	...

00004484 <_free_r>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	0005      	movs	r5, r0
    4488:	2900      	cmp	r1, #0
    448a:	d010      	beq.n	44ae <_free_r+0x2a>
    448c:	1f0c      	subs	r4, r1, #4
    448e:	6823      	ldr	r3, [r4, #0]
    4490:	2b00      	cmp	r3, #0
    4492:	da00      	bge.n	4496 <_free_r+0x12>
    4494:	18e4      	adds	r4, r4, r3
    4496:	0028      	movs	r0, r5
    4498:	f000 f904 	bl	46a4 <__malloc_lock>
    449c:	4a1d      	ldr	r2, [pc, #116]	; (4514 <_free_r+0x90>)
    449e:	6813      	ldr	r3, [r2, #0]
    44a0:	2b00      	cmp	r3, #0
    44a2:	d105      	bne.n	44b0 <_free_r+0x2c>
    44a4:	6063      	str	r3, [r4, #4]
    44a6:	6014      	str	r4, [r2, #0]
    44a8:	0028      	movs	r0, r5
    44aa:	f000 f8fc 	bl	46a6 <__malloc_unlock>
    44ae:	bd70      	pop	{r4, r5, r6, pc}
    44b0:	42a3      	cmp	r3, r4
    44b2:	d909      	bls.n	44c8 <_free_r+0x44>
    44b4:	6821      	ldr	r1, [r4, #0]
    44b6:	1860      	adds	r0, r4, r1
    44b8:	4283      	cmp	r3, r0
    44ba:	d1f3      	bne.n	44a4 <_free_r+0x20>
    44bc:	6818      	ldr	r0, [r3, #0]
    44be:	685b      	ldr	r3, [r3, #4]
    44c0:	1841      	adds	r1, r0, r1
    44c2:	6021      	str	r1, [r4, #0]
    44c4:	e7ee      	b.n	44a4 <_free_r+0x20>
    44c6:	0013      	movs	r3, r2
    44c8:	685a      	ldr	r2, [r3, #4]
    44ca:	2a00      	cmp	r2, #0
    44cc:	d001      	beq.n	44d2 <_free_r+0x4e>
    44ce:	42a2      	cmp	r2, r4
    44d0:	d9f9      	bls.n	44c6 <_free_r+0x42>
    44d2:	6819      	ldr	r1, [r3, #0]
    44d4:	1858      	adds	r0, r3, r1
    44d6:	42a0      	cmp	r0, r4
    44d8:	d10b      	bne.n	44f2 <_free_r+0x6e>
    44da:	6820      	ldr	r0, [r4, #0]
    44dc:	1809      	adds	r1, r1, r0
    44de:	1858      	adds	r0, r3, r1
    44e0:	6019      	str	r1, [r3, #0]
    44e2:	4282      	cmp	r2, r0
    44e4:	d1e0      	bne.n	44a8 <_free_r+0x24>
    44e6:	6810      	ldr	r0, [r2, #0]
    44e8:	6852      	ldr	r2, [r2, #4]
    44ea:	1841      	adds	r1, r0, r1
    44ec:	6019      	str	r1, [r3, #0]
    44ee:	605a      	str	r2, [r3, #4]
    44f0:	e7da      	b.n	44a8 <_free_r+0x24>
    44f2:	42a0      	cmp	r0, r4
    44f4:	d902      	bls.n	44fc <_free_r+0x78>
    44f6:	230c      	movs	r3, #12
    44f8:	602b      	str	r3, [r5, #0]
    44fa:	e7d5      	b.n	44a8 <_free_r+0x24>
    44fc:	6821      	ldr	r1, [r4, #0]
    44fe:	1860      	adds	r0, r4, r1
    4500:	4282      	cmp	r2, r0
    4502:	d103      	bne.n	450c <_free_r+0x88>
    4504:	6810      	ldr	r0, [r2, #0]
    4506:	6852      	ldr	r2, [r2, #4]
    4508:	1841      	adds	r1, r0, r1
    450a:	6021      	str	r1, [r4, #0]
    450c:	6062      	str	r2, [r4, #4]
    450e:	605c      	str	r4, [r3, #4]
    4510:	e7ca      	b.n	44a8 <_free_r+0x24>
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	20000258 	.word	0x20000258

00004518 <_malloc_r>:
    4518:	2303      	movs	r3, #3
    451a:	b570      	push	{r4, r5, r6, lr}
    451c:	1ccd      	adds	r5, r1, #3
    451e:	439d      	bics	r5, r3
    4520:	3508      	adds	r5, #8
    4522:	0006      	movs	r6, r0
    4524:	2d0c      	cmp	r5, #12
    4526:	d21e      	bcs.n	4566 <_malloc_r+0x4e>
    4528:	250c      	movs	r5, #12
    452a:	42a9      	cmp	r1, r5
    452c:	d81d      	bhi.n	456a <_malloc_r+0x52>
    452e:	0030      	movs	r0, r6
    4530:	f000 f8b8 	bl	46a4 <__malloc_lock>
    4534:	4a25      	ldr	r2, [pc, #148]	; (45cc <_malloc_r+0xb4>)
    4536:	6814      	ldr	r4, [r2, #0]
    4538:	0021      	movs	r1, r4
    453a:	2900      	cmp	r1, #0
    453c:	d119      	bne.n	4572 <_malloc_r+0x5a>
    453e:	4c24      	ldr	r4, [pc, #144]	; (45d0 <_malloc_r+0xb8>)
    4540:	6823      	ldr	r3, [r4, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	d103      	bne.n	454e <_malloc_r+0x36>
    4546:	0030      	movs	r0, r6
    4548:	f000 f844 	bl	45d4 <_sbrk_r>
    454c:	6020      	str	r0, [r4, #0]
    454e:	0029      	movs	r1, r5
    4550:	0030      	movs	r0, r6
    4552:	f000 f83f 	bl	45d4 <_sbrk_r>
    4556:	1c43      	adds	r3, r0, #1
    4558:	d12c      	bne.n	45b4 <_malloc_r+0x9c>
    455a:	230c      	movs	r3, #12
    455c:	0030      	movs	r0, r6
    455e:	6033      	str	r3, [r6, #0]
    4560:	f000 f8a1 	bl	46a6 <__malloc_unlock>
    4564:	e003      	b.n	456e <_malloc_r+0x56>
    4566:	2d00      	cmp	r5, #0
    4568:	dadf      	bge.n	452a <_malloc_r+0x12>
    456a:	230c      	movs	r3, #12
    456c:	6033      	str	r3, [r6, #0]
    456e:	2000      	movs	r0, #0
    4570:	bd70      	pop	{r4, r5, r6, pc}
    4572:	680b      	ldr	r3, [r1, #0]
    4574:	1b5b      	subs	r3, r3, r5
    4576:	d41a      	bmi.n	45ae <_malloc_r+0x96>
    4578:	2b0b      	cmp	r3, #11
    457a:	d903      	bls.n	4584 <_malloc_r+0x6c>
    457c:	600b      	str	r3, [r1, #0]
    457e:	18cc      	adds	r4, r1, r3
    4580:	6025      	str	r5, [r4, #0]
    4582:	e003      	b.n	458c <_malloc_r+0x74>
    4584:	428c      	cmp	r4, r1
    4586:	d10e      	bne.n	45a6 <_malloc_r+0x8e>
    4588:	6863      	ldr	r3, [r4, #4]
    458a:	6013      	str	r3, [r2, #0]
    458c:	0030      	movs	r0, r6
    458e:	f000 f88a 	bl	46a6 <__malloc_unlock>
    4592:	0020      	movs	r0, r4
    4594:	2207      	movs	r2, #7
    4596:	300b      	adds	r0, #11
    4598:	1d23      	adds	r3, r4, #4
    459a:	4390      	bics	r0, r2
    459c:	1ac3      	subs	r3, r0, r3
    459e:	d0e7      	beq.n	4570 <_malloc_r+0x58>
    45a0:	425a      	negs	r2, r3
    45a2:	50e2      	str	r2, [r4, r3]
    45a4:	e7e4      	b.n	4570 <_malloc_r+0x58>
    45a6:	684b      	ldr	r3, [r1, #4]
    45a8:	6063      	str	r3, [r4, #4]
    45aa:	000c      	movs	r4, r1
    45ac:	e7ee      	b.n	458c <_malloc_r+0x74>
    45ae:	000c      	movs	r4, r1
    45b0:	6849      	ldr	r1, [r1, #4]
    45b2:	e7c2      	b.n	453a <_malloc_r+0x22>
    45b4:	2303      	movs	r3, #3
    45b6:	1cc4      	adds	r4, r0, #3
    45b8:	439c      	bics	r4, r3
    45ba:	42a0      	cmp	r0, r4
    45bc:	d0e0      	beq.n	4580 <_malloc_r+0x68>
    45be:	1a21      	subs	r1, r4, r0
    45c0:	0030      	movs	r0, r6
    45c2:	f000 f807 	bl	45d4 <_sbrk_r>
    45c6:	1c43      	adds	r3, r0, #1
    45c8:	d1da      	bne.n	4580 <_malloc_r+0x68>
    45ca:	e7c6      	b.n	455a <_malloc_r+0x42>
    45cc:	20000258 	.word	0x20000258
    45d0:	2000025c 	.word	0x2000025c

000045d4 <_sbrk_r>:
    45d4:	2300      	movs	r3, #0
    45d6:	b570      	push	{r4, r5, r6, lr}
    45d8:	4c06      	ldr	r4, [pc, #24]	; (45f4 <_sbrk_r+0x20>)
    45da:	0005      	movs	r5, r0
    45dc:	0008      	movs	r0, r1
    45de:	6023      	str	r3, [r4, #0]
    45e0:	f7fd fc0e 	bl	1e00 <_sbrk>
    45e4:	1c43      	adds	r3, r0, #1
    45e6:	d103      	bne.n	45f0 <_sbrk_r+0x1c>
    45e8:	6823      	ldr	r3, [r4, #0]
    45ea:	2b00      	cmp	r3, #0
    45ec:	d000      	beq.n	45f0 <_sbrk_r+0x1c>
    45ee:	602b      	str	r3, [r5, #0]
    45f0:	bd70      	pop	{r4, r5, r6, pc}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	20000dcc 	.word	0x20000dcc

000045f8 <siscanf>:
    45f8:	b40e      	push	{r1, r2, r3}
    45fa:	2381      	movs	r3, #129	; 0x81
    45fc:	b570      	push	{r4, r5, r6, lr}
    45fe:	b09d      	sub	sp, #116	; 0x74
    4600:	ac02      	add	r4, sp, #8
    4602:	ad21      	add	r5, sp, #132	; 0x84
    4604:	009b      	lsls	r3, r3, #2
    4606:	cd40      	ldmia	r5!, {r6}
    4608:	81a3      	strh	r3, [r4, #12]
    460a:	9002      	str	r0, [sp, #8]
    460c:	9006      	str	r0, [sp, #24]
    460e:	f000 f81d 	bl	464c <strlen>
    4612:	4b0b      	ldr	r3, [pc, #44]	; (4640 <siscanf+0x48>)
    4614:	6060      	str	r0, [r4, #4]
    4616:	6263      	str	r3, [r4, #36]	; 0x24
    4618:	2300      	movs	r3, #0
    461a:	6160      	str	r0, [r4, #20]
    461c:	4809      	ldr	r0, [pc, #36]	; (4644 <siscanf+0x4c>)
    461e:	6363      	str	r3, [r4, #52]	; 0x34
    4620:	64a3      	str	r3, [r4, #72]	; 0x48
    4622:	3b01      	subs	r3, #1
    4624:	81e3      	strh	r3, [r4, #14]
    4626:	0032      	movs	r2, r6
    4628:	002b      	movs	r3, r5
    462a:	0021      	movs	r1, r4
    462c:	6800      	ldr	r0, [r0, #0]
    462e:	9501      	str	r5, [sp, #4]
    4630:	f000 f9fc 	bl	4a2c <__ssvfiscanf_r>
    4634:	b01d      	add	sp, #116	; 0x74
    4636:	bc70      	pop	{r4, r5, r6}
    4638:	bc08      	pop	{r3}
    463a:	b003      	add	sp, #12
    463c:	4718      	bx	r3
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	00004649 	.word	0x00004649
    4644:	20000048 	.word	0x20000048

00004648 <__seofread>:
    4648:	2000      	movs	r0, #0
    464a:	4770      	bx	lr

0000464c <strlen>:
    464c:	2300      	movs	r3, #0
    464e:	5cc2      	ldrb	r2, [r0, r3]
    4650:	3301      	adds	r3, #1
    4652:	2a00      	cmp	r2, #0
    4654:	d1fb      	bne.n	464e <strlen+0x2>
    4656:	1e58      	subs	r0, r3, #1
    4658:	4770      	bx	lr
	...

0000465c <_vsiprintf_r>:
    465c:	b530      	push	{r4, r5, lr}
    465e:	b09b      	sub	sp, #108	; 0x6c
    4660:	9100      	str	r1, [sp, #0]
    4662:	9104      	str	r1, [sp, #16]
    4664:	4908      	ldr	r1, [pc, #32]	; (4688 <_vsiprintf_r+0x2c>)
    4666:	466d      	mov	r5, sp
    4668:	9102      	str	r1, [sp, #8]
    466a:	9105      	str	r1, [sp, #20]
    466c:	2101      	movs	r1, #1
    466e:	2482      	movs	r4, #130	; 0x82
    4670:	4249      	negs	r1, r1
    4672:	81e9      	strh	r1, [r5, #14]
    4674:	00a4      	lsls	r4, r4, #2
    4676:	4669      	mov	r1, sp
    4678:	81ac      	strh	r4, [r5, #12]
    467a:	f000 f877 	bl	476c <_svfiprintf_r>
    467e:	2300      	movs	r3, #0
    4680:	9a00      	ldr	r2, [sp, #0]
    4682:	7013      	strb	r3, [r2, #0]
    4684:	b01b      	add	sp, #108	; 0x6c
    4686:	bd30      	pop	{r4, r5, pc}
    4688:	7fffffff 	.word	0x7fffffff

0000468c <vsiprintf>:
    468c:	b510      	push	{r4, lr}
    468e:	0013      	movs	r3, r2
    4690:	000a      	movs	r2, r1
    4692:	0001      	movs	r1, r0
    4694:	4802      	ldr	r0, [pc, #8]	; (46a0 <vsiprintf+0x14>)
    4696:	6800      	ldr	r0, [r0, #0]
    4698:	f7ff ffe0 	bl	465c <_vsiprintf_r>
    469c:	bd10      	pop	{r4, pc}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	20000048 	.word	0x20000048

000046a4 <__malloc_lock>:
    46a4:	4770      	bx	lr

000046a6 <__malloc_unlock>:
    46a6:	4770      	bx	lr

000046a8 <__ssputs_r>:
    46a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46aa:	688e      	ldr	r6, [r1, #8]
    46ac:	b085      	sub	sp, #20
    46ae:	0007      	movs	r7, r0
    46b0:	000c      	movs	r4, r1
    46b2:	9203      	str	r2, [sp, #12]
    46b4:	9301      	str	r3, [sp, #4]
    46b6:	429e      	cmp	r6, r3
    46b8:	d839      	bhi.n	472e <__ssputs_r+0x86>
    46ba:	2390      	movs	r3, #144	; 0x90
    46bc:	898a      	ldrh	r2, [r1, #12]
    46be:	00db      	lsls	r3, r3, #3
    46c0:	421a      	tst	r2, r3
    46c2:	d034      	beq.n	472e <__ssputs_r+0x86>
    46c4:	2503      	movs	r5, #3
    46c6:	6909      	ldr	r1, [r1, #16]
    46c8:	6823      	ldr	r3, [r4, #0]
    46ca:	1a5b      	subs	r3, r3, r1
    46cc:	9302      	str	r3, [sp, #8]
    46ce:	6963      	ldr	r3, [r4, #20]
    46d0:	9802      	ldr	r0, [sp, #8]
    46d2:	435d      	muls	r5, r3
    46d4:	0feb      	lsrs	r3, r5, #31
    46d6:	195d      	adds	r5, r3, r5
    46d8:	9b01      	ldr	r3, [sp, #4]
    46da:	106d      	asrs	r5, r5, #1
    46dc:	3301      	adds	r3, #1
    46de:	181b      	adds	r3, r3, r0
    46e0:	42ab      	cmp	r3, r5
    46e2:	d900      	bls.n	46e6 <__ssputs_r+0x3e>
    46e4:	001d      	movs	r5, r3
    46e6:	0553      	lsls	r3, r2, #21
    46e8:	d532      	bpl.n	4750 <__ssputs_r+0xa8>
    46ea:	0029      	movs	r1, r5
    46ec:	0038      	movs	r0, r7
    46ee:	f7ff ff13 	bl	4518 <_malloc_r>
    46f2:	1e06      	subs	r6, r0, #0
    46f4:	d109      	bne.n	470a <__ssputs_r+0x62>
    46f6:	230c      	movs	r3, #12
    46f8:	603b      	str	r3, [r7, #0]
    46fa:	2340      	movs	r3, #64	; 0x40
    46fc:	2001      	movs	r0, #1
    46fe:	89a2      	ldrh	r2, [r4, #12]
    4700:	4240      	negs	r0, r0
    4702:	4313      	orrs	r3, r2
    4704:	81a3      	strh	r3, [r4, #12]
    4706:	b005      	add	sp, #20
    4708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    470a:	9a02      	ldr	r2, [sp, #8]
    470c:	6921      	ldr	r1, [r4, #16]
    470e:	f7ff fea7 	bl	4460 <memcpy>
    4712:	89a3      	ldrh	r3, [r4, #12]
    4714:	4a14      	ldr	r2, [pc, #80]	; (4768 <__ssputs_r+0xc0>)
    4716:	401a      	ands	r2, r3
    4718:	2380      	movs	r3, #128	; 0x80
    471a:	4313      	orrs	r3, r2
    471c:	81a3      	strh	r3, [r4, #12]
    471e:	9b02      	ldr	r3, [sp, #8]
    4720:	6126      	str	r6, [r4, #16]
    4722:	18f6      	adds	r6, r6, r3
    4724:	6026      	str	r6, [r4, #0]
    4726:	6165      	str	r5, [r4, #20]
    4728:	9e01      	ldr	r6, [sp, #4]
    472a:	1aed      	subs	r5, r5, r3
    472c:	60a5      	str	r5, [r4, #8]
    472e:	9b01      	ldr	r3, [sp, #4]
    4730:	42b3      	cmp	r3, r6
    4732:	d200      	bcs.n	4736 <__ssputs_r+0x8e>
    4734:	001e      	movs	r6, r3
    4736:	0032      	movs	r2, r6
    4738:	9903      	ldr	r1, [sp, #12]
    473a:	6820      	ldr	r0, [r4, #0]
    473c:	f000 ffb5 	bl	56aa <memmove>
    4740:	68a3      	ldr	r3, [r4, #8]
    4742:	2000      	movs	r0, #0
    4744:	1b9b      	subs	r3, r3, r6
    4746:	60a3      	str	r3, [r4, #8]
    4748:	6823      	ldr	r3, [r4, #0]
    474a:	199e      	adds	r6, r3, r6
    474c:	6026      	str	r6, [r4, #0]
    474e:	e7da      	b.n	4706 <__ssputs_r+0x5e>
    4750:	002a      	movs	r2, r5
    4752:	0038      	movs	r0, r7
    4754:	f000 ffbb 	bl	56ce <_realloc_r>
    4758:	1e06      	subs	r6, r0, #0
    475a:	d1e0      	bne.n	471e <__ssputs_r+0x76>
    475c:	6921      	ldr	r1, [r4, #16]
    475e:	0038      	movs	r0, r7
    4760:	f7ff fe90 	bl	4484 <_free_r>
    4764:	e7c7      	b.n	46f6 <__ssputs_r+0x4e>
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	fffffb7f 	.word	0xfffffb7f

0000476c <_svfiprintf_r>:
    476c:	b5f0      	push	{r4, r5, r6, r7, lr}
    476e:	b09f      	sub	sp, #124	; 0x7c
    4770:	9002      	str	r0, [sp, #8]
    4772:	9305      	str	r3, [sp, #20]
    4774:	898b      	ldrh	r3, [r1, #12]
    4776:	000f      	movs	r7, r1
    4778:	0016      	movs	r6, r2
    477a:	061b      	lsls	r3, r3, #24
    477c:	d511      	bpl.n	47a2 <_svfiprintf_r+0x36>
    477e:	690b      	ldr	r3, [r1, #16]
    4780:	2b00      	cmp	r3, #0
    4782:	d10e      	bne.n	47a2 <_svfiprintf_r+0x36>
    4784:	2140      	movs	r1, #64	; 0x40
    4786:	f7ff fec7 	bl	4518 <_malloc_r>
    478a:	6038      	str	r0, [r7, #0]
    478c:	6138      	str	r0, [r7, #16]
    478e:	2800      	cmp	r0, #0
    4790:	d105      	bne.n	479e <_svfiprintf_r+0x32>
    4792:	230c      	movs	r3, #12
    4794:	9a02      	ldr	r2, [sp, #8]
    4796:	3801      	subs	r0, #1
    4798:	6013      	str	r3, [r2, #0]
    479a:	b01f      	add	sp, #124	; 0x7c
    479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    479e:	2340      	movs	r3, #64	; 0x40
    47a0:	617b      	str	r3, [r7, #20]
    47a2:	2300      	movs	r3, #0
    47a4:	ad06      	add	r5, sp, #24
    47a6:	616b      	str	r3, [r5, #20]
    47a8:	3320      	adds	r3, #32
    47aa:	766b      	strb	r3, [r5, #25]
    47ac:	3310      	adds	r3, #16
    47ae:	76ab      	strb	r3, [r5, #26]
    47b0:	0034      	movs	r4, r6
    47b2:	7823      	ldrb	r3, [r4, #0]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d147      	bne.n	4848 <_svfiprintf_r+0xdc>
    47b8:	1ba3      	subs	r3, r4, r6
    47ba:	9304      	str	r3, [sp, #16]
    47bc:	d00d      	beq.n	47da <_svfiprintf_r+0x6e>
    47be:	1ba3      	subs	r3, r4, r6
    47c0:	0032      	movs	r2, r6
    47c2:	0039      	movs	r1, r7
    47c4:	9802      	ldr	r0, [sp, #8]
    47c6:	f7ff ff6f 	bl	46a8 <__ssputs_r>
    47ca:	1c43      	adds	r3, r0, #1
    47cc:	d100      	bne.n	47d0 <_svfiprintf_r+0x64>
    47ce:	e0b5      	b.n	493c <_svfiprintf_r+0x1d0>
    47d0:	696a      	ldr	r2, [r5, #20]
    47d2:	9b04      	ldr	r3, [sp, #16]
    47d4:	4694      	mov	ip, r2
    47d6:	4463      	add	r3, ip
    47d8:	616b      	str	r3, [r5, #20]
    47da:	7823      	ldrb	r3, [r4, #0]
    47dc:	2b00      	cmp	r3, #0
    47de:	d100      	bne.n	47e2 <_svfiprintf_r+0x76>
    47e0:	e0ac      	b.n	493c <_svfiprintf_r+0x1d0>
    47e2:	2201      	movs	r2, #1
    47e4:	2300      	movs	r3, #0
    47e6:	4252      	negs	r2, r2
    47e8:	606a      	str	r2, [r5, #4]
    47ea:	a902      	add	r1, sp, #8
    47ec:	3254      	adds	r2, #84	; 0x54
    47ee:	1852      	adds	r2, r2, r1
    47f0:	3401      	adds	r4, #1
    47f2:	602b      	str	r3, [r5, #0]
    47f4:	60eb      	str	r3, [r5, #12]
    47f6:	60ab      	str	r3, [r5, #8]
    47f8:	7013      	strb	r3, [r2, #0]
    47fa:	65ab      	str	r3, [r5, #88]	; 0x58
    47fc:	4e58      	ldr	r6, [pc, #352]	; (4960 <_svfiprintf_r+0x1f4>)
    47fe:	2205      	movs	r2, #5
    4800:	7821      	ldrb	r1, [r4, #0]
    4802:	0030      	movs	r0, r6
    4804:	f000 ff46 	bl	5694 <memchr>
    4808:	1c62      	adds	r2, r4, #1
    480a:	2800      	cmp	r0, #0
    480c:	d120      	bne.n	4850 <_svfiprintf_r+0xe4>
    480e:	6829      	ldr	r1, [r5, #0]
    4810:	06cb      	lsls	r3, r1, #27
    4812:	d504      	bpl.n	481e <_svfiprintf_r+0xb2>
    4814:	2353      	movs	r3, #83	; 0x53
    4816:	ae02      	add	r6, sp, #8
    4818:	3020      	adds	r0, #32
    481a:	199b      	adds	r3, r3, r6
    481c:	7018      	strb	r0, [r3, #0]
    481e:	070b      	lsls	r3, r1, #28
    4820:	d504      	bpl.n	482c <_svfiprintf_r+0xc0>
    4822:	2353      	movs	r3, #83	; 0x53
    4824:	202b      	movs	r0, #43	; 0x2b
    4826:	ae02      	add	r6, sp, #8
    4828:	199b      	adds	r3, r3, r6
    482a:	7018      	strb	r0, [r3, #0]
    482c:	7823      	ldrb	r3, [r4, #0]
    482e:	2b2a      	cmp	r3, #42	; 0x2a
    4830:	d016      	beq.n	4860 <_svfiprintf_r+0xf4>
    4832:	2000      	movs	r0, #0
    4834:	210a      	movs	r1, #10
    4836:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4838:	7822      	ldrb	r2, [r4, #0]
    483a:	3a30      	subs	r2, #48	; 0x30
    483c:	2a09      	cmp	r2, #9
    483e:	d955      	bls.n	48ec <_svfiprintf_r+0x180>
    4840:	2800      	cmp	r0, #0
    4842:	d015      	beq.n	4870 <_svfiprintf_r+0x104>
    4844:	9309      	str	r3, [sp, #36]	; 0x24
    4846:	e013      	b.n	4870 <_svfiprintf_r+0x104>
    4848:	2b25      	cmp	r3, #37	; 0x25
    484a:	d0b5      	beq.n	47b8 <_svfiprintf_r+0x4c>
    484c:	3401      	adds	r4, #1
    484e:	e7b0      	b.n	47b2 <_svfiprintf_r+0x46>
    4850:	2301      	movs	r3, #1
    4852:	1b80      	subs	r0, r0, r6
    4854:	4083      	lsls	r3, r0
    4856:	6829      	ldr	r1, [r5, #0]
    4858:	0014      	movs	r4, r2
    485a:	430b      	orrs	r3, r1
    485c:	602b      	str	r3, [r5, #0]
    485e:	e7cd      	b.n	47fc <_svfiprintf_r+0x90>
    4860:	9b05      	ldr	r3, [sp, #20]
    4862:	1d18      	adds	r0, r3, #4
    4864:	681b      	ldr	r3, [r3, #0]
    4866:	9005      	str	r0, [sp, #20]
    4868:	2b00      	cmp	r3, #0
    486a:	db39      	blt.n	48e0 <_svfiprintf_r+0x174>
    486c:	9309      	str	r3, [sp, #36]	; 0x24
    486e:	0014      	movs	r4, r2
    4870:	7823      	ldrb	r3, [r4, #0]
    4872:	2b2e      	cmp	r3, #46	; 0x2e
    4874:	d10b      	bne.n	488e <_svfiprintf_r+0x122>
    4876:	7863      	ldrb	r3, [r4, #1]
    4878:	1c62      	adds	r2, r4, #1
    487a:	2b2a      	cmp	r3, #42	; 0x2a
    487c:	d13e      	bne.n	48fc <_svfiprintf_r+0x190>
    487e:	9b05      	ldr	r3, [sp, #20]
    4880:	3402      	adds	r4, #2
    4882:	1d1a      	adds	r2, r3, #4
    4884:	681b      	ldr	r3, [r3, #0]
    4886:	9205      	str	r2, [sp, #20]
    4888:	2b00      	cmp	r3, #0
    488a:	db34      	blt.n	48f6 <_svfiprintf_r+0x18a>
    488c:	9307      	str	r3, [sp, #28]
    488e:	4e35      	ldr	r6, [pc, #212]	; (4964 <_svfiprintf_r+0x1f8>)
    4890:	7821      	ldrb	r1, [r4, #0]
    4892:	2203      	movs	r2, #3
    4894:	0030      	movs	r0, r6
    4896:	f000 fefd 	bl	5694 <memchr>
    489a:	2800      	cmp	r0, #0
    489c:	d006      	beq.n	48ac <_svfiprintf_r+0x140>
    489e:	2340      	movs	r3, #64	; 0x40
    48a0:	1b80      	subs	r0, r0, r6
    48a2:	4083      	lsls	r3, r0
    48a4:	682a      	ldr	r2, [r5, #0]
    48a6:	3401      	adds	r4, #1
    48a8:	4313      	orrs	r3, r2
    48aa:	602b      	str	r3, [r5, #0]
    48ac:	7821      	ldrb	r1, [r4, #0]
    48ae:	2206      	movs	r2, #6
    48b0:	482d      	ldr	r0, [pc, #180]	; (4968 <_svfiprintf_r+0x1fc>)
    48b2:	1c66      	adds	r6, r4, #1
    48b4:	7629      	strb	r1, [r5, #24]
    48b6:	f000 feed 	bl	5694 <memchr>
    48ba:	2800      	cmp	r0, #0
    48bc:	d046      	beq.n	494c <_svfiprintf_r+0x1e0>
    48be:	4b2b      	ldr	r3, [pc, #172]	; (496c <_svfiprintf_r+0x200>)
    48c0:	2b00      	cmp	r3, #0
    48c2:	d12f      	bne.n	4924 <_svfiprintf_r+0x1b8>
    48c4:	6829      	ldr	r1, [r5, #0]
    48c6:	9b05      	ldr	r3, [sp, #20]
    48c8:	2207      	movs	r2, #7
    48ca:	05c9      	lsls	r1, r1, #23
    48cc:	d528      	bpl.n	4920 <_svfiprintf_r+0x1b4>
    48ce:	189b      	adds	r3, r3, r2
    48d0:	4393      	bics	r3, r2
    48d2:	3308      	adds	r3, #8
    48d4:	9305      	str	r3, [sp, #20]
    48d6:	696b      	ldr	r3, [r5, #20]
    48d8:	9a03      	ldr	r2, [sp, #12]
    48da:	189b      	adds	r3, r3, r2
    48dc:	616b      	str	r3, [r5, #20]
    48de:	e767      	b.n	47b0 <_svfiprintf_r+0x44>
    48e0:	425b      	negs	r3, r3
    48e2:	60eb      	str	r3, [r5, #12]
    48e4:	2302      	movs	r3, #2
    48e6:	430b      	orrs	r3, r1
    48e8:	602b      	str	r3, [r5, #0]
    48ea:	e7c0      	b.n	486e <_svfiprintf_r+0x102>
    48ec:	434b      	muls	r3, r1
    48ee:	3401      	adds	r4, #1
    48f0:	189b      	adds	r3, r3, r2
    48f2:	2001      	movs	r0, #1
    48f4:	e7a0      	b.n	4838 <_svfiprintf_r+0xcc>
    48f6:	2301      	movs	r3, #1
    48f8:	425b      	negs	r3, r3
    48fa:	e7c7      	b.n	488c <_svfiprintf_r+0x120>
    48fc:	2300      	movs	r3, #0
    48fe:	0014      	movs	r4, r2
    4900:	200a      	movs	r0, #10
    4902:	001a      	movs	r2, r3
    4904:	606b      	str	r3, [r5, #4]
    4906:	7821      	ldrb	r1, [r4, #0]
    4908:	3930      	subs	r1, #48	; 0x30
    490a:	2909      	cmp	r1, #9
    490c:	d903      	bls.n	4916 <_svfiprintf_r+0x1aa>
    490e:	2b00      	cmp	r3, #0
    4910:	d0bd      	beq.n	488e <_svfiprintf_r+0x122>
    4912:	9207      	str	r2, [sp, #28]
    4914:	e7bb      	b.n	488e <_svfiprintf_r+0x122>
    4916:	4342      	muls	r2, r0
    4918:	3401      	adds	r4, #1
    491a:	1852      	adds	r2, r2, r1
    491c:	2301      	movs	r3, #1
    491e:	e7f2      	b.n	4906 <_svfiprintf_r+0x19a>
    4920:	3307      	adds	r3, #7
    4922:	e7d5      	b.n	48d0 <_svfiprintf_r+0x164>
    4924:	ab05      	add	r3, sp, #20
    4926:	9300      	str	r3, [sp, #0]
    4928:	003a      	movs	r2, r7
    492a:	4b11      	ldr	r3, [pc, #68]	; (4970 <_svfiprintf_r+0x204>)
    492c:	0029      	movs	r1, r5
    492e:	9802      	ldr	r0, [sp, #8]
    4930:	e000      	b.n	4934 <_svfiprintf_r+0x1c8>
    4932:	bf00      	nop
    4934:	9003      	str	r0, [sp, #12]
    4936:	9b03      	ldr	r3, [sp, #12]
    4938:	3301      	adds	r3, #1
    493a:	d1cc      	bne.n	48d6 <_svfiprintf_r+0x16a>
    493c:	89bb      	ldrh	r3, [r7, #12]
    493e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4940:	065b      	lsls	r3, r3, #25
    4942:	d400      	bmi.n	4946 <_svfiprintf_r+0x1da>
    4944:	e729      	b.n	479a <_svfiprintf_r+0x2e>
    4946:	2001      	movs	r0, #1
    4948:	4240      	negs	r0, r0
    494a:	e726      	b.n	479a <_svfiprintf_r+0x2e>
    494c:	ab05      	add	r3, sp, #20
    494e:	9300      	str	r3, [sp, #0]
    4950:	003a      	movs	r2, r7
    4952:	4b07      	ldr	r3, [pc, #28]	; (4970 <_svfiprintf_r+0x204>)
    4954:	0029      	movs	r1, r5
    4956:	9802      	ldr	r0, [sp, #8]
    4958:	f000 fa5c 	bl	4e14 <_printf_i>
    495c:	e7ea      	b.n	4934 <_svfiprintf_r+0x1c8>
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	000063a8 	.word	0x000063a8
    4964:	000063ae 	.word	0x000063ae
    4968:	000063b2 	.word	0x000063b2
    496c:	00000000 	.word	0x00000000
    4970:	000046a9 	.word	0x000046a9

00004974 <_sungetc_r>:
    4974:	b570      	push	{r4, r5, r6, lr}
    4976:	0014      	movs	r4, r2
    4978:	1c4b      	adds	r3, r1, #1
    497a:	d103      	bne.n	4984 <_sungetc_r+0x10>
    497c:	2501      	movs	r5, #1
    497e:	426d      	negs	r5, r5
    4980:	0028      	movs	r0, r5
    4982:	bd70      	pop	{r4, r5, r6, pc}
    4984:	8993      	ldrh	r3, [r2, #12]
    4986:	2220      	movs	r2, #32
    4988:	4393      	bics	r3, r2
    498a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    498c:	81a3      	strh	r3, [r4, #12]
    498e:	b2ce      	uxtb	r6, r1
    4990:	b2cd      	uxtb	r5, r1
    4992:	6863      	ldr	r3, [r4, #4]
    4994:	2a00      	cmp	r2, #0
    4996:	d010      	beq.n	49ba <_sungetc_r+0x46>
    4998:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    499a:	4293      	cmp	r3, r2
    499c:	da07      	bge.n	49ae <_sungetc_r+0x3a>
    499e:	6823      	ldr	r3, [r4, #0]
    49a0:	3b01      	subs	r3, #1
    49a2:	6023      	str	r3, [r4, #0]
    49a4:	701e      	strb	r6, [r3, #0]
    49a6:	6863      	ldr	r3, [r4, #4]
    49a8:	3301      	adds	r3, #1
    49aa:	6063      	str	r3, [r4, #4]
    49ac:	e7e8      	b.n	4980 <_sungetc_r+0xc>
    49ae:	0021      	movs	r1, r4
    49b0:	f000 fe0e 	bl	55d0 <__submore>
    49b4:	2800      	cmp	r0, #0
    49b6:	d0f2      	beq.n	499e <_sungetc_r+0x2a>
    49b8:	e7e0      	b.n	497c <_sungetc_r+0x8>
    49ba:	6921      	ldr	r1, [r4, #16]
    49bc:	6822      	ldr	r2, [r4, #0]
    49be:	2900      	cmp	r1, #0
    49c0:	d007      	beq.n	49d2 <_sungetc_r+0x5e>
    49c2:	4291      	cmp	r1, r2
    49c4:	d205      	bcs.n	49d2 <_sungetc_r+0x5e>
    49c6:	1e51      	subs	r1, r2, #1
    49c8:	7808      	ldrb	r0, [r1, #0]
    49ca:	4285      	cmp	r5, r0
    49cc:	d101      	bne.n	49d2 <_sungetc_r+0x5e>
    49ce:	6021      	str	r1, [r4, #0]
    49d0:	e7ea      	b.n	49a8 <_sungetc_r+0x34>
    49d2:	6423      	str	r3, [r4, #64]	; 0x40
    49d4:	0023      	movs	r3, r4
    49d6:	3344      	adds	r3, #68	; 0x44
    49d8:	6363      	str	r3, [r4, #52]	; 0x34
    49da:	2303      	movs	r3, #3
    49dc:	63a3      	str	r3, [r4, #56]	; 0x38
    49de:	0023      	movs	r3, r4
    49e0:	3346      	adds	r3, #70	; 0x46
    49e2:	63e2      	str	r2, [r4, #60]	; 0x3c
    49e4:	701e      	strb	r6, [r3, #0]
    49e6:	6023      	str	r3, [r4, #0]
    49e8:	2301      	movs	r3, #1
    49ea:	e7de      	b.n	49aa <_sungetc_r+0x36>

000049ec <__ssrefill_r>:
    49ec:	b510      	push	{r4, lr}
    49ee:	000c      	movs	r4, r1
    49f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
    49f2:	2900      	cmp	r1, #0
    49f4:	d00e      	beq.n	4a14 <__ssrefill_r+0x28>
    49f6:	0023      	movs	r3, r4
    49f8:	3344      	adds	r3, #68	; 0x44
    49fa:	4299      	cmp	r1, r3
    49fc:	d001      	beq.n	4a02 <__ssrefill_r+0x16>
    49fe:	f7ff fd41 	bl	4484 <_free_r>
    4a02:	2000      	movs	r0, #0
    4a04:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4a06:	6360      	str	r0, [r4, #52]	; 0x34
    4a08:	6063      	str	r3, [r4, #4]
    4a0a:	4283      	cmp	r3, r0
    4a0c:	d002      	beq.n	4a14 <__ssrefill_r+0x28>
    4a0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4a10:	6023      	str	r3, [r4, #0]
    4a12:	bd10      	pop	{r4, pc}
    4a14:	6923      	ldr	r3, [r4, #16]
    4a16:	2001      	movs	r0, #1
    4a18:	6023      	str	r3, [r4, #0]
    4a1a:	2300      	movs	r3, #0
    4a1c:	89a2      	ldrh	r2, [r4, #12]
    4a1e:	6063      	str	r3, [r4, #4]
    4a20:	3320      	adds	r3, #32
    4a22:	4313      	orrs	r3, r2
    4a24:	81a3      	strh	r3, [r4, #12]
    4a26:	4240      	negs	r0, r0
    4a28:	e7f3      	b.n	4a12 <__ssrefill_r+0x26>
	...

00004a2c <__ssvfiscanf_r>:
    4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2e:	4cbd      	ldr	r4, [pc, #756]	; (4d24 <__ssvfiscanf_r+0x2f8>)
    4a30:	2586      	movs	r5, #134	; 0x86
    4a32:	44a5      	add	sp, r4
    4a34:	9303      	str	r3, [sp, #12]
    4a36:	2300      	movs	r3, #0
    4a38:	9348      	str	r3, [sp, #288]	; 0x120
    4a3a:	9349      	str	r3, [sp, #292]	; 0x124
    4a3c:	ab05      	add	r3, sp, #20
    4a3e:	934a      	str	r3, [sp, #296]	; 0x128
    4a40:	23be      	movs	r3, #190	; 0xbe
    4a42:	006d      	lsls	r5, r5, #1
    4a44:	9000      	str	r0, [sp, #0]
    4a46:	000c      	movs	r4, r1
    4a48:	a802      	add	r0, sp, #8
    4a4a:	49b7      	ldr	r1, [pc, #732]	; (4d28 <__ssvfiscanf_r+0x2fc>)
    4a4c:	005b      	lsls	r3, r3, #1
    4a4e:	1940      	adds	r0, r0, r5
    4a50:	27c0      	movs	r7, #192	; 0xc0
    4a52:	50c1      	str	r1, [r0, r3]
    4a54:	ab02      	add	r3, sp, #8
    4a56:	195b      	adds	r3, r3, r5
    4a58:	0015      	movs	r5, r2
    4a5a:	49b4      	ldr	r1, [pc, #720]	; (4d2c <__ssvfiscanf_r+0x300>)
    4a5c:	007f      	lsls	r7, r7, #1
    4a5e:	51d9      	str	r1, [r3, r7]
    4a60:	782b      	ldrb	r3, [r5, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d100      	bne.n	4a68 <__ssvfiscanf_r+0x3c>
    4a66:	e15b      	b.n	4d20 <__ssvfiscanf_r+0x2f4>
    4a68:	f000 fdf4 	bl	5654 <__locale_ctype_ptr>
    4a6c:	2208      	movs	r2, #8
    4a6e:	782b      	ldrb	r3, [r5, #0]
    4a70:	18c0      	adds	r0, r0, r3
    4a72:	9301      	str	r3, [sp, #4]
    4a74:	7843      	ldrb	r3, [r0, #1]
    4a76:	4013      	ands	r3, r2
    4a78:	d141      	bne.n	4afe <__ssvfiscanf_r+0xd2>
    4a7a:	9a01      	ldr	r2, [sp, #4]
    4a7c:	1c6e      	adds	r6, r5, #1
    4a7e:	2a25      	cmp	r2, #37	; 0x25
    4a80:	d000      	beq.n	4a84 <__ssvfiscanf_r+0x58>
    4a82:	e0a8      	b.n	4bd6 <__ssvfiscanf_r+0x1aa>
    4a84:	9347      	str	r3, [sp, #284]	; 0x11c
    4a86:	9345      	str	r3, [sp, #276]	; 0x114
    4a88:	786b      	ldrb	r3, [r5, #1]
    4a8a:	2b2a      	cmp	r3, #42	; 0x2a
    4a8c:	d102      	bne.n	4a94 <__ssvfiscanf_r+0x68>
    4a8e:	3b1a      	subs	r3, #26
    4a90:	9345      	str	r3, [sp, #276]	; 0x114
    4a92:	1cae      	adds	r6, r5, #2
    4a94:	0035      	movs	r5, r6
    4a96:	220a      	movs	r2, #10
    4a98:	7829      	ldrb	r1, [r5, #0]
    4a9a:	000b      	movs	r3, r1
    4a9c:	3b30      	subs	r3, #48	; 0x30
    4a9e:	2b09      	cmp	r3, #9
    4aa0:	d948      	bls.n	4b34 <__ssvfiscanf_r+0x108>
    4aa2:	4ea3      	ldr	r6, [pc, #652]	; (4d30 <__ssvfiscanf_r+0x304>)
    4aa4:	2203      	movs	r2, #3
    4aa6:	0030      	movs	r0, r6
    4aa8:	f000 fdf4 	bl	5694 <memchr>
    4aac:	2800      	cmp	r0, #0
    4aae:	d007      	beq.n	4ac0 <__ssvfiscanf_r+0x94>
    4ab0:	2301      	movs	r3, #1
    4ab2:	1b80      	subs	r0, r0, r6
    4ab4:	4083      	lsls	r3, r0
    4ab6:	9a45      	ldr	r2, [sp, #276]	; 0x114
    4ab8:	3501      	adds	r5, #1
    4aba:	4313      	orrs	r3, r2
    4abc:	9202      	str	r2, [sp, #8]
    4abe:	9345      	str	r3, [sp, #276]	; 0x114
    4ac0:	782b      	ldrb	r3, [r5, #0]
    4ac2:	1c6e      	adds	r6, r5, #1
    4ac4:	2b67      	cmp	r3, #103	; 0x67
    4ac6:	d858      	bhi.n	4b7a <__ssvfiscanf_r+0x14e>
    4ac8:	2b65      	cmp	r3, #101	; 0x65
    4aca:	d300      	bcc.n	4ace <__ssvfiscanf_r+0xa2>
    4acc:	e0dd      	b.n	4c8a <__ssvfiscanf_r+0x25e>
    4ace:	2b47      	cmp	r3, #71	; 0x47
    4ad0:	d838      	bhi.n	4b44 <__ssvfiscanf_r+0x118>
    4ad2:	2b45      	cmp	r3, #69	; 0x45
    4ad4:	d300      	bcc.n	4ad8 <__ssvfiscanf_r+0xac>
    4ad6:	e0d8      	b.n	4c8a <__ssvfiscanf_r+0x25e>
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d100      	bne.n	4ade <__ssvfiscanf_r+0xb2>
    4adc:	e11d      	b.n	4d1a <__ssvfiscanf_r+0x2ee>
    4ade:	2b25      	cmp	r3, #37	; 0x25
    4ae0:	d079      	beq.n	4bd6 <__ssvfiscanf_r+0x1aa>
    4ae2:	2303      	movs	r3, #3
    4ae4:	934b      	str	r3, [sp, #300]	; 0x12c
    4ae6:	3307      	adds	r3, #7
    4ae8:	9346      	str	r3, [sp, #280]	; 0x118
    4aea:	e053      	b.n	4b94 <__ssvfiscanf_r+0x168>
    4aec:	9a49      	ldr	r2, [sp, #292]	; 0x124
    4aee:	3301      	adds	r3, #1
    4af0:	9201      	str	r2, [sp, #4]
    4af2:	3201      	adds	r2, #1
    4af4:	9249      	str	r2, [sp, #292]	; 0x124
    4af6:	6862      	ldr	r2, [r4, #4]
    4af8:	6023      	str	r3, [r4, #0]
    4afa:	3a01      	subs	r2, #1
    4afc:	6062      	str	r2, [r4, #4]
    4afe:	6863      	ldr	r3, [r4, #4]
    4b00:	2b00      	cmp	r3, #0
    4b02:	dd0b      	ble.n	4b1c <__ssvfiscanf_r+0xf0>
    4b04:	f000 fda6 	bl	5654 <__locale_ctype_ptr>
    4b08:	2108      	movs	r1, #8
    4b0a:	6823      	ldr	r3, [r4, #0]
    4b0c:	781a      	ldrb	r2, [r3, #0]
    4b0e:	1880      	adds	r0, r0, r2
    4b10:	7842      	ldrb	r2, [r0, #1]
    4b12:	420a      	tst	r2, r1
    4b14:	d1ea      	bne.n	4aec <__ssvfiscanf_r+0xc0>
    4b16:	1c6e      	adds	r6, r5, #1
    4b18:	0035      	movs	r5, r6
    4b1a:	e7a1      	b.n	4a60 <__ssvfiscanf_r+0x34>
    4b1c:	2286      	movs	r2, #134	; 0x86
    4b1e:	ab02      	add	r3, sp, #8
    4b20:	0052      	lsls	r2, r2, #1
    4b22:	189b      	adds	r3, r3, r2
    4b24:	59db      	ldr	r3, [r3, r7]
    4b26:	0021      	movs	r1, r4
    4b28:	9800      	ldr	r0, [sp, #0]
    4b2a:	9301      	str	r3, [sp, #4]
    4b2c:	4798      	blx	r3
    4b2e:	2800      	cmp	r0, #0
    4b30:	d0e8      	beq.n	4b04 <__ssvfiscanf_r+0xd8>
    4b32:	e7f0      	b.n	4b16 <__ssvfiscanf_r+0xea>
    4b34:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    4b36:	3501      	adds	r5, #1
    4b38:	9302      	str	r3, [sp, #8]
    4b3a:	4353      	muls	r3, r2
    4b3c:	3b30      	subs	r3, #48	; 0x30
    4b3e:	1859      	adds	r1, r3, r1
    4b40:	9147      	str	r1, [sp, #284]	; 0x11c
    4b42:	e7a9      	b.n	4a98 <__ssvfiscanf_r+0x6c>
    4b44:	2b5b      	cmp	r3, #91	; 0x5b
    4b46:	d100      	bne.n	4b4a <__ssvfiscanf_r+0x11e>
    4b48:	e077      	b.n	4c3a <__ssvfiscanf_r+0x20e>
    4b4a:	d80f      	bhi.n	4b6c <__ssvfiscanf_r+0x140>
    4b4c:	2b58      	cmp	r3, #88	; 0x58
    4b4e:	d1c8      	bne.n	4ae2 <__ssvfiscanf_r+0xb6>
    4b50:	9a45      	ldr	r2, [sp, #276]	; 0x114
    4b52:	9201      	str	r2, [sp, #4]
    4b54:	2280      	movs	r2, #128	; 0x80
    4b56:	9901      	ldr	r1, [sp, #4]
    4b58:	0092      	lsls	r2, r2, #2
    4b5a:	430a      	orrs	r2, r1
    4b5c:	9245      	str	r2, [sp, #276]	; 0x114
    4b5e:	2210      	movs	r2, #16
    4b60:	9246      	str	r2, [sp, #280]	; 0x118
    4b62:	2203      	movs	r2, #3
    4b64:	2b6e      	cmp	r3, #110	; 0x6e
    4b66:	dd14      	ble.n	4b92 <__ssvfiscanf_r+0x166>
    4b68:	3201      	adds	r2, #1
    4b6a:	e012      	b.n	4b92 <__ssvfiscanf_r+0x166>
    4b6c:	2b63      	cmp	r3, #99	; 0x63
    4b6e:	d100      	bne.n	4b72 <__ssvfiscanf_r+0x146>
    4b70:	e071      	b.n	4c56 <__ssvfiscanf_r+0x22a>
    4b72:	2b64      	cmp	r3, #100	; 0x64
    4b74:	d1b5      	bne.n	4ae2 <__ssvfiscanf_r+0xb6>
    4b76:	220a      	movs	r2, #10
    4b78:	e7f2      	b.n	4b60 <__ssvfiscanf_r+0x134>
    4b7a:	2b70      	cmp	r3, #112	; 0x70
    4b7c:	d052      	beq.n	4c24 <__ssvfiscanf_r+0x1f8>
    4b7e:	d822      	bhi.n	4bc6 <__ssvfiscanf_r+0x19a>
    4b80:	2b6e      	cmp	r3, #110	; 0x6e
    4b82:	d100      	bne.n	4b86 <__ssvfiscanf_r+0x15a>
    4b84:	e06f      	b.n	4c66 <__ssvfiscanf_r+0x23a>
    4b86:	d854      	bhi.n	4c32 <__ssvfiscanf_r+0x206>
    4b88:	2b69      	cmp	r3, #105	; 0x69
    4b8a:	d1aa      	bne.n	4ae2 <__ssvfiscanf_r+0xb6>
    4b8c:	2300      	movs	r3, #0
    4b8e:	2203      	movs	r2, #3
    4b90:	9346      	str	r3, [sp, #280]	; 0x118
    4b92:	924b      	str	r2, [sp, #300]	; 0x12c
    4b94:	6863      	ldr	r3, [r4, #4]
    4b96:	2b00      	cmp	r3, #0
    4b98:	dc00      	bgt.n	4b9c <__ssvfiscanf_r+0x170>
    4b9a:	e078      	b.n	4c8e <__ssvfiscanf_r+0x262>
    4b9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    4b9e:	9301      	str	r3, [sp, #4]
    4ba0:	065b      	lsls	r3, r3, #25
    4ba2:	d400      	bmi.n	4ba6 <__ssvfiscanf_r+0x17a>
    4ba4:	e08b      	b.n	4cbe <__ssvfiscanf_r+0x292>
    4ba6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    4ba8:	2b02      	cmp	r3, #2
    4baa:	dd00      	ble.n	4bae <__ssvfiscanf_r+0x182>
    4bac:	e09d      	b.n	4cea <__ssvfiscanf_r+0x2be>
    4bae:	ab03      	add	r3, sp, #12
    4bb0:	0022      	movs	r2, r4
    4bb2:	a945      	add	r1, sp, #276	; 0x114
    4bb4:	9800      	ldr	r0, [sp, #0]
    4bb6:	f000 fa47 	bl	5048 <_scanf_chars>
    4bba:	2801      	cmp	r0, #1
    4bbc:	d100      	bne.n	4bc0 <__ssvfiscanf_r+0x194>
    4bbe:	e0af      	b.n	4d20 <__ssvfiscanf_r+0x2f4>
    4bc0:	2802      	cmp	r0, #2
    4bc2:	d1a9      	bne.n	4b18 <__ssvfiscanf_r+0xec>
    4bc4:	e025      	b.n	4c12 <__ssvfiscanf_r+0x1e6>
    4bc6:	2b75      	cmp	r3, #117	; 0x75
    4bc8:	d0d5      	beq.n	4b76 <__ssvfiscanf_r+0x14a>
    4bca:	2b78      	cmp	r3, #120	; 0x78
    4bcc:	d0c0      	beq.n	4b50 <__ssvfiscanf_r+0x124>
    4bce:	2b73      	cmp	r3, #115	; 0x73
    4bd0:	d187      	bne.n	4ae2 <__ssvfiscanf_r+0xb6>
    4bd2:	2302      	movs	r3, #2
    4bd4:	e03d      	b.n	4c52 <__ssvfiscanf_r+0x226>
    4bd6:	6863      	ldr	r3, [r4, #4]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	dd0f      	ble.n	4bfc <__ssvfiscanf_r+0x1d0>
    4bdc:	6823      	ldr	r3, [r4, #0]
    4bde:	9901      	ldr	r1, [sp, #4]
    4be0:	781a      	ldrb	r2, [r3, #0]
    4be2:	4291      	cmp	r1, r2
    4be4:	d000      	beq.n	4be8 <__ssvfiscanf_r+0x1bc>
    4be6:	e09b      	b.n	4d20 <__ssvfiscanf_r+0x2f4>
    4be8:	3301      	adds	r3, #1
    4bea:	6862      	ldr	r2, [r4, #4]
    4bec:	6023      	str	r3, [r4, #0]
    4bee:	9b49      	ldr	r3, [sp, #292]	; 0x124
    4bf0:	3a01      	subs	r2, #1
    4bf2:	9301      	str	r3, [sp, #4]
    4bf4:	3301      	adds	r3, #1
    4bf6:	6062      	str	r2, [r4, #4]
    4bf8:	9349      	str	r3, [sp, #292]	; 0x124
    4bfa:	e78d      	b.n	4b18 <__ssvfiscanf_r+0xec>
    4bfc:	2286      	movs	r2, #134	; 0x86
    4bfe:	ab02      	add	r3, sp, #8
    4c00:	0052      	lsls	r2, r2, #1
    4c02:	189b      	adds	r3, r3, r2
    4c04:	59db      	ldr	r3, [r3, r7]
    4c06:	0021      	movs	r1, r4
    4c08:	9800      	ldr	r0, [sp, #0]
    4c0a:	9302      	str	r3, [sp, #8]
    4c0c:	4798      	blx	r3
    4c0e:	2800      	cmp	r0, #0
    4c10:	d0e4      	beq.n	4bdc <__ssvfiscanf_r+0x1b0>
    4c12:	9848      	ldr	r0, [sp, #288]	; 0x120
    4c14:	2800      	cmp	r0, #0
    4c16:	d000      	beq.n	4c1a <__ssvfiscanf_r+0x1ee>
    4c18:	e07b      	b.n	4d12 <__ssvfiscanf_r+0x2e6>
    4c1a:	3801      	subs	r0, #1
    4c1c:	23a7      	movs	r3, #167	; 0xa7
    4c1e:	009b      	lsls	r3, r3, #2
    4c20:	449d      	add	sp, r3
    4c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c24:	9a45      	ldr	r2, [sp, #276]	; 0x114
    4c26:	9201      	str	r2, [sp, #4]
    4c28:	2220      	movs	r2, #32
    4c2a:	9901      	ldr	r1, [sp, #4]
    4c2c:	430a      	orrs	r2, r1
    4c2e:	9245      	str	r2, [sp, #276]	; 0x114
    4c30:	e78e      	b.n	4b50 <__ssvfiscanf_r+0x124>
    4c32:	2308      	movs	r3, #8
    4c34:	2204      	movs	r2, #4
    4c36:	9346      	str	r3, [sp, #280]	; 0x118
    4c38:	e7ab      	b.n	4b92 <__ssvfiscanf_r+0x166>
    4c3a:	0031      	movs	r1, r6
    4c3c:	a805      	add	r0, sp, #20
    4c3e:	f000 fb67 	bl	5310 <__sccl>
    4c42:	9b45      	ldr	r3, [sp, #276]	; 0x114
    4c44:	0006      	movs	r6, r0
    4c46:	9301      	str	r3, [sp, #4]
    4c48:	2340      	movs	r3, #64	; 0x40
    4c4a:	9a01      	ldr	r2, [sp, #4]
    4c4c:	4313      	orrs	r3, r2
    4c4e:	9345      	str	r3, [sp, #276]	; 0x114
    4c50:	2301      	movs	r3, #1
    4c52:	934b      	str	r3, [sp, #300]	; 0x12c
    4c54:	e79e      	b.n	4b94 <__ssvfiscanf_r+0x168>
    4c56:	9b45      	ldr	r3, [sp, #276]	; 0x114
    4c58:	9301      	str	r3, [sp, #4]
    4c5a:	2340      	movs	r3, #64	; 0x40
    4c5c:	9a01      	ldr	r2, [sp, #4]
    4c5e:	4313      	orrs	r3, r2
    4c60:	9345      	str	r3, [sp, #276]	; 0x114
    4c62:	2300      	movs	r3, #0
    4c64:	e7f5      	b.n	4c52 <__ssvfiscanf_r+0x226>
    4c66:	9945      	ldr	r1, [sp, #276]	; 0x114
    4c68:	06cb      	lsls	r3, r1, #27
    4c6a:	d500      	bpl.n	4c6e <__ssvfiscanf_r+0x242>
    4c6c:	e754      	b.n	4b18 <__ssvfiscanf_r+0xec>
    4c6e:	9b03      	ldr	r3, [sp, #12]
    4c70:	9a49      	ldr	r2, [sp, #292]	; 0x124
    4c72:	07c8      	lsls	r0, r1, #31
    4c74:	d504      	bpl.n	4c80 <__ssvfiscanf_r+0x254>
    4c76:	1d19      	adds	r1, r3, #4
    4c78:	9103      	str	r1, [sp, #12]
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	801a      	strh	r2, [r3, #0]
    4c7e:	e74b      	b.n	4b18 <__ssvfiscanf_r+0xec>
    4c80:	1d19      	adds	r1, r3, #4
    4c82:	9103      	str	r1, [sp, #12]
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	601a      	str	r2, [r3, #0]
    4c88:	e746      	b.n	4b18 <__ssvfiscanf_r+0xec>
    4c8a:	2305      	movs	r3, #5
    4c8c:	e7e1      	b.n	4c52 <__ssvfiscanf_r+0x226>
    4c8e:	2286      	movs	r2, #134	; 0x86
    4c90:	ab02      	add	r3, sp, #8
    4c92:	0052      	lsls	r2, r2, #1
    4c94:	189b      	adds	r3, r3, r2
    4c96:	59db      	ldr	r3, [r3, r7]
    4c98:	0021      	movs	r1, r4
    4c9a:	9800      	ldr	r0, [sp, #0]
    4c9c:	9301      	str	r3, [sp, #4]
    4c9e:	4798      	blx	r3
    4ca0:	2800      	cmp	r0, #0
    4ca2:	d100      	bne.n	4ca6 <__ssvfiscanf_r+0x27a>
    4ca4:	e77a      	b.n	4b9c <__ssvfiscanf_r+0x170>
    4ca6:	e7b4      	b.n	4c12 <__ssvfiscanf_r+0x1e6>
    4ca8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    4caa:	9201      	str	r2, [sp, #4]
    4cac:	3201      	adds	r2, #1
    4cae:	9249      	str	r2, [sp, #292]	; 0x124
    4cb0:	6862      	ldr	r2, [r4, #4]
    4cb2:	3a01      	subs	r2, #1
    4cb4:	6062      	str	r2, [r4, #4]
    4cb6:	2a00      	cmp	r2, #0
    4cb8:	dd0b      	ble.n	4cd2 <__ssvfiscanf_r+0x2a6>
    4cba:	3301      	adds	r3, #1
    4cbc:	6023      	str	r3, [r4, #0]
    4cbe:	f000 fcc9 	bl	5654 <__locale_ctype_ptr>
    4cc2:	2108      	movs	r1, #8
    4cc4:	6823      	ldr	r3, [r4, #0]
    4cc6:	781a      	ldrb	r2, [r3, #0]
    4cc8:	1880      	adds	r0, r0, r2
    4cca:	7842      	ldrb	r2, [r0, #1]
    4ccc:	420a      	tst	r2, r1
    4cce:	d1eb      	bne.n	4ca8 <__ssvfiscanf_r+0x27c>
    4cd0:	e769      	b.n	4ba6 <__ssvfiscanf_r+0x17a>
    4cd2:	2286      	movs	r2, #134	; 0x86
    4cd4:	ab02      	add	r3, sp, #8
    4cd6:	0052      	lsls	r2, r2, #1
    4cd8:	189b      	adds	r3, r3, r2
    4cda:	59db      	ldr	r3, [r3, r7]
    4cdc:	0021      	movs	r1, r4
    4cde:	9800      	ldr	r0, [sp, #0]
    4ce0:	9301      	str	r3, [sp, #4]
    4ce2:	4798      	blx	r3
    4ce4:	2800      	cmp	r0, #0
    4ce6:	d0ea      	beq.n	4cbe <__ssvfiscanf_r+0x292>
    4ce8:	e793      	b.n	4c12 <__ssvfiscanf_r+0x1e6>
    4cea:	2b04      	cmp	r3, #4
    4cec:	dc06      	bgt.n	4cfc <__ssvfiscanf_r+0x2d0>
    4cee:	ab03      	add	r3, sp, #12
    4cf0:	0022      	movs	r2, r4
    4cf2:	a945      	add	r1, sp, #276	; 0x114
    4cf4:	9800      	ldr	r0, [sp, #0]
    4cf6:	f000 fa0b 	bl	5110 <_scanf_i>
    4cfa:	e75e      	b.n	4bba <__ssvfiscanf_r+0x18e>
    4cfc:	4b0d      	ldr	r3, [pc, #52]	; (4d34 <__ssvfiscanf_r+0x308>)
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d100      	bne.n	4d04 <__ssvfiscanf_r+0x2d8>
    4d02:	e709      	b.n	4b18 <__ssvfiscanf_r+0xec>
    4d04:	ab03      	add	r3, sp, #12
    4d06:	0022      	movs	r2, r4
    4d08:	a945      	add	r1, sp, #276	; 0x114
    4d0a:	9800      	ldr	r0, [sp, #0]
    4d0c:	e000      	b.n	4d10 <__ssvfiscanf_r+0x2e4>
    4d0e:	bf00      	nop
    4d10:	e753      	b.n	4bba <__ssvfiscanf_r+0x18e>
    4d12:	89a3      	ldrh	r3, [r4, #12]
    4d14:	065b      	lsls	r3, r3, #25
    4d16:	d400      	bmi.n	4d1a <__ssvfiscanf_r+0x2ee>
    4d18:	e780      	b.n	4c1c <__ssvfiscanf_r+0x1f0>
    4d1a:	2001      	movs	r0, #1
    4d1c:	4240      	negs	r0, r0
    4d1e:	e77d      	b.n	4c1c <__ssvfiscanf_r+0x1f0>
    4d20:	9848      	ldr	r0, [sp, #288]	; 0x120
    4d22:	e77b      	b.n	4c1c <__ssvfiscanf_r+0x1f0>
    4d24:	fffffd64 	.word	0xfffffd64
    4d28:	00004975 	.word	0x00004975
    4d2c:	000049ed 	.word	0x000049ed
    4d30:	000063ae 	.word	0x000063ae
    4d34:	00000000 	.word	0x00000000

00004d38 <_printf_common>:
    4d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d3a:	0015      	movs	r5, r2
    4d3c:	9301      	str	r3, [sp, #4]
    4d3e:	688a      	ldr	r2, [r1, #8]
    4d40:	690b      	ldr	r3, [r1, #16]
    4d42:	9000      	str	r0, [sp, #0]
    4d44:	000c      	movs	r4, r1
    4d46:	4293      	cmp	r3, r2
    4d48:	da00      	bge.n	4d4c <_printf_common+0x14>
    4d4a:	0013      	movs	r3, r2
    4d4c:	0022      	movs	r2, r4
    4d4e:	602b      	str	r3, [r5, #0]
    4d50:	3243      	adds	r2, #67	; 0x43
    4d52:	7812      	ldrb	r2, [r2, #0]
    4d54:	2a00      	cmp	r2, #0
    4d56:	d001      	beq.n	4d5c <_printf_common+0x24>
    4d58:	3301      	adds	r3, #1
    4d5a:	602b      	str	r3, [r5, #0]
    4d5c:	6823      	ldr	r3, [r4, #0]
    4d5e:	069b      	lsls	r3, r3, #26
    4d60:	d502      	bpl.n	4d68 <_printf_common+0x30>
    4d62:	682b      	ldr	r3, [r5, #0]
    4d64:	3302      	adds	r3, #2
    4d66:	602b      	str	r3, [r5, #0]
    4d68:	2706      	movs	r7, #6
    4d6a:	6823      	ldr	r3, [r4, #0]
    4d6c:	401f      	ands	r7, r3
    4d6e:	d027      	beq.n	4dc0 <_printf_common+0x88>
    4d70:	0023      	movs	r3, r4
    4d72:	3343      	adds	r3, #67	; 0x43
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	1e5a      	subs	r2, r3, #1
    4d78:	4193      	sbcs	r3, r2
    4d7a:	6822      	ldr	r2, [r4, #0]
    4d7c:	0692      	lsls	r2, r2, #26
    4d7e:	d430      	bmi.n	4de2 <_printf_common+0xaa>
    4d80:	0022      	movs	r2, r4
    4d82:	9901      	ldr	r1, [sp, #4]
    4d84:	3243      	adds	r2, #67	; 0x43
    4d86:	9800      	ldr	r0, [sp, #0]
    4d88:	9e08      	ldr	r6, [sp, #32]
    4d8a:	47b0      	blx	r6
    4d8c:	1c43      	adds	r3, r0, #1
    4d8e:	d025      	beq.n	4ddc <_printf_common+0xa4>
    4d90:	2306      	movs	r3, #6
    4d92:	6820      	ldr	r0, [r4, #0]
    4d94:	682a      	ldr	r2, [r5, #0]
    4d96:	68e1      	ldr	r1, [r4, #12]
    4d98:	4003      	ands	r3, r0
    4d9a:	2500      	movs	r5, #0
    4d9c:	2b04      	cmp	r3, #4
    4d9e:	d103      	bne.n	4da8 <_printf_common+0x70>
    4da0:	1a8d      	subs	r5, r1, r2
    4da2:	43eb      	mvns	r3, r5
    4da4:	17db      	asrs	r3, r3, #31
    4da6:	401d      	ands	r5, r3
    4da8:	68a3      	ldr	r3, [r4, #8]
    4daa:	6922      	ldr	r2, [r4, #16]
    4dac:	4293      	cmp	r3, r2
    4dae:	dd01      	ble.n	4db4 <_printf_common+0x7c>
    4db0:	1a9b      	subs	r3, r3, r2
    4db2:	18ed      	adds	r5, r5, r3
    4db4:	2700      	movs	r7, #0
    4db6:	42bd      	cmp	r5, r7
    4db8:	d120      	bne.n	4dfc <_printf_common+0xc4>
    4dba:	2000      	movs	r0, #0
    4dbc:	e010      	b.n	4de0 <_printf_common+0xa8>
    4dbe:	3701      	adds	r7, #1
    4dc0:	68e3      	ldr	r3, [r4, #12]
    4dc2:	682a      	ldr	r2, [r5, #0]
    4dc4:	1a9b      	subs	r3, r3, r2
    4dc6:	429f      	cmp	r7, r3
    4dc8:	dad2      	bge.n	4d70 <_printf_common+0x38>
    4dca:	0022      	movs	r2, r4
    4dcc:	2301      	movs	r3, #1
    4dce:	3219      	adds	r2, #25
    4dd0:	9901      	ldr	r1, [sp, #4]
    4dd2:	9800      	ldr	r0, [sp, #0]
    4dd4:	9e08      	ldr	r6, [sp, #32]
    4dd6:	47b0      	blx	r6
    4dd8:	1c43      	adds	r3, r0, #1
    4dda:	d1f0      	bne.n	4dbe <_printf_common+0x86>
    4ddc:	2001      	movs	r0, #1
    4dde:	4240      	negs	r0, r0
    4de0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4de2:	2030      	movs	r0, #48	; 0x30
    4de4:	18e1      	adds	r1, r4, r3
    4de6:	3143      	adds	r1, #67	; 0x43
    4de8:	7008      	strb	r0, [r1, #0]
    4dea:	0021      	movs	r1, r4
    4dec:	1c5a      	adds	r2, r3, #1
    4dee:	3145      	adds	r1, #69	; 0x45
    4df0:	7809      	ldrb	r1, [r1, #0]
    4df2:	18a2      	adds	r2, r4, r2
    4df4:	3243      	adds	r2, #67	; 0x43
    4df6:	3302      	adds	r3, #2
    4df8:	7011      	strb	r1, [r2, #0]
    4dfa:	e7c1      	b.n	4d80 <_printf_common+0x48>
    4dfc:	0022      	movs	r2, r4
    4dfe:	2301      	movs	r3, #1
    4e00:	321a      	adds	r2, #26
    4e02:	9901      	ldr	r1, [sp, #4]
    4e04:	9800      	ldr	r0, [sp, #0]
    4e06:	9e08      	ldr	r6, [sp, #32]
    4e08:	47b0      	blx	r6
    4e0a:	1c43      	adds	r3, r0, #1
    4e0c:	d0e6      	beq.n	4ddc <_printf_common+0xa4>
    4e0e:	3701      	adds	r7, #1
    4e10:	e7d1      	b.n	4db6 <_printf_common+0x7e>
	...

00004e14 <_printf_i>:
    4e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e16:	b08b      	sub	sp, #44	; 0x2c
    4e18:	9206      	str	r2, [sp, #24]
    4e1a:	000a      	movs	r2, r1
    4e1c:	3243      	adds	r2, #67	; 0x43
    4e1e:	9307      	str	r3, [sp, #28]
    4e20:	9005      	str	r0, [sp, #20]
    4e22:	9204      	str	r2, [sp, #16]
    4e24:	7e0a      	ldrb	r2, [r1, #24]
    4e26:	000c      	movs	r4, r1
    4e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e2a:	2a6e      	cmp	r2, #110	; 0x6e
    4e2c:	d100      	bne.n	4e30 <_printf_i+0x1c>
    4e2e:	e08f      	b.n	4f50 <_printf_i+0x13c>
    4e30:	d817      	bhi.n	4e62 <_printf_i+0x4e>
    4e32:	2a63      	cmp	r2, #99	; 0x63
    4e34:	d02c      	beq.n	4e90 <_printf_i+0x7c>
    4e36:	d808      	bhi.n	4e4a <_printf_i+0x36>
    4e38:	2a00      	cmp	r2, #0
    4e3a:	d100      	bne.n	4e3e <_printf_i+0x2a>
    4e3c:	e099      	b.n	4f72 <_printf_i+0x15e>
    4e3e:	2a58      	cmp	r2, #88	; 0x58
    4e40:	d054      	beq.n	4eec <_printf_i+0xd8>
    4e42:	0026      	movs	r6, r4
    4e44:	3642      	adds	r6, #66	; 0x42
    4e46:	7032      	strb	r2, [r6, #0]
    4e48:	e029      	b.n	4e9e <_printf_i+0x8a>
    4e4a:	2a64      	cmp	r2, #100	; 0x64
    4e4c:	d001      	beq.n	4e52 <_printf_i+0x3e>
    4e4e:	2a69      	cmp	r2, #105	; 0x69
    4e50:	d1f7      	bne.n	4e42 <_printf_i+0x2e>
    4e52:	6821      	ldr	r1, [r4, #0]
    4e54:	681a      	ldr	r2, [r3, #0]
    4e56:	0608      	lsls	r0, r1, #24
    4e58:	d523      	bpl.n	4ea2 <_printf_i+0x8e>
    4e5a:	1d11      	adds	r1, r2, #4
    4e5c:	6019      	str	r1, [r3, #0]
    4e5e:	6815      	ldr	r5, [r2, #0]
    4e60:	e025      	b.n	4eae <_printf_i+0x9a>
    4e62:	2a73      	cmp	r2, #115	; 0x73
    4e64:	d100      	bne.n	4e68 <_printf_i+0x54>
    4e66:	e088      	b.n	4f7a <_printf_i+0x166>
    4e68:	d808      	bhi.n	4e7c <_printf_i+0x68>
    4e6a:	2a6f      	cmp	r2, #111	; 0x6f
    4e6c:	d029      	beq.n	4ec2 <_printf_i+0xae>
    4e6e:	2a70      	cmp	r2, #112	; 0x70
    4e70:	d1e7      	bne.n	4e42 <_printf_i+0x2e>
    4e72:	2220      	movs	r2, #32
    4e74:	6809      	ldr	r1, [r1, #0]
    4e76:	430a      	orrs	r2, r1
    4e78:	6022      	str	r2, [r4, #0]
    4e7a:	e003      	b.n	4e84 <_printf_i+0x70>
    4e7c:	2a75      	cmp	r2, #117	; 0x75
    4e7e:	d020      	beq.n	4ec2 <_printf_i+0xae>
    4e80:	2a78      	cmp	r2, #120	; 0x78
    4e82:	d1de      	bne.n	4e42 <_printf_i+0x2e>
    4e84:	0022      	movs	r2, r4
    4e86:	2178      	movs	r1, #120	; 0x78
    4e88:	3245      	adds	r2, #69	; 0x45
    4e8a:	7011      	strb	r1, [r2, #0]
    4e8c:	4a6c      	ldr	r2, [pc, #432]	; (5040 <_printf_i+0x22c>)
    4e8e:	e030      	b.n	4ef2 <_printf_i+0xde>
    4e90:	000e      	movs	r6, r1
    4e92:	681a      	ldr	r2, [r3, #0]
    4e94:	3642      	adds	r6, #66	; 0x42
    4e96:	1d11      	adds	r1, r2, #4
    4e98:	6019      	str	r1, [r3, #0]
    4e9a:	6813      	ldr	r3, [r2, #0]
    4e9c:	7033      	strb	r3, [r6, #0]
    4e9e:	2301      	movs	r3, #1
    4ea0:	e079      	b.n	4f96 <_printf_i+0x182>
    4ea2:	0649      	lsls	r1, r1, #25
    4ea4:	d5d9      	bpl.n	4e5a <_printf_i+0x46>
    4ea6:	1d11      	adds	r1, r2, #4
    4ea8:	6019      	str	r1, [r3, #0]
    4eaa:	2300      	movs	r3, #0
    4eac:	5ed5      	ldrsh	r5, [r2, r3]
    4eae:	2d00      	cmp	r5, #0
    4eb0:	da03      	bge.n	4eba <_printf_i+0xa6>
    4eb2:	232d      	movs	r3, #45	; 0x2d
    4eb4:	9a04      	ldr	r2, [sp, #16]
    4eb6:	426d      	negs	r5, r5
    4eb8:	7013      	strb	r3, [r2, #0]
    4eba:	4b62      	ldr	r3, [pc, #392]	; (5044 <_printf_i+0x230>)
    4ebc:	270a      	movs	r7, #10
    4ebe:	9303      	str	r3, [sp, #12]
    4ec0:	e02f      	b.n	4f22 <_printf_i+0x10e>
    4ec2:	6820      	ldr	r0, [r4, #0]
    4ec4:	6819      	ldr	r1, [r3, #0]
    4ec6:	0605      	lsls	r5, r0, #24
    4ec8:	d503      	bpl.n	4ed2 <_printf_i+0xbe>
    4eca:	1d08      	adds	r0, r1, #4
    4ecc:	6018      	str	r0, [r3, #0]
    4ece:	680d      	ldr	r5, [r1, #0]
    4ed0:	e005      	b.n	4ede <_printf_i+0xca>
    4ed2:	0640      	lsls	r0, r0, #25
    4ed4:	d5f9      	bpl.n	4eca <_printf_i+0xb6>
    4ed6:	680d      	ldr	r5, [r1, #0]
    4ed8:	1d08      	adds	r0, r1, #4
    4eda:	6018      	str	r0, [r3, #0]
    4edc:	b2ad      	uxth	r5, r5
    4ede:	4b59      	ldr	r3, [pc, #356]	; (5044 <_printf_i+0x230>)
    4ee0:	2708      	movs	r7, #8
    4ee2:	9303      	str	r3, [sp, #12]
    4ee4:	2a6f      	cmp	r2, #111	; 0x6f
    4ee6:	d018      	beq.n	4f1a <_printf_i+0x106>
    4ee8:	270a      	movs	r7, #10
    4eea:	e016      	b.n	4f1a <_printf_i+0x106>
    4eec:	3145      	adds	r1, #69	; 0x45
    4eee:	700a      	strb	r2, [r1, #0]
    4ef0:	4a54      	ldr	r2, [pc, #336]	; (5044 <_printf_i+0x230>)
    4ef2:	9203      	str	r2, [sp, #12]
    4ef4:	681a      	ldr	r2, [r3, #0]
    4ef6:	6821      	ldr	r1, [r4, #0]
    4ef8:	1d10      	adds	r0, r2, #4
    4efa:	6018      	str	r0, [r3, #0]
    4efc:	6815      	ldr	r5, [r2, #0]
    4efe:	0608      	lsls	r0, r1, #24
    4f00:	d522      	bpl.n	4f48 <_printf_i+0x134>
    4f02:	07cb      	lsls	r3, r1, #31
    4f04:	d502      	bpl.n	4f0c <_printf_i+0xf8>
    4f06:	2320      	movs	r3, #32
    4f08:	4319      	orrs	r1, r3
    4f0a:	6021      	str	r1, [r4, #0]
    4f0c:	2710      	movs	r7, #16
    4f0e:	2d00      	cmp	r5, #0
    4f10:	d103      	bne.n	4f1a <_printf_i+0x106>
    4f12:	2320      	movs	r3, #32
    4f14:	6822      	ldr	r2, [r4, #0]
    4f16:	439a      	bics	r2, r3
    4f18:	6022      	str	r2, [r4, #0]
    4f1a:	0023      	movs	r3, r4
    4f1c:	2200      	movs	r2, #0
    4f1e:	3343      	adds	r3, #67	; 0x43
    4f20:	701a      	strb	r2, [r3, #0]
    4f22:	6863      	ldr	r3, [r4, #4]
    4f24:	60a3      	str	r3, [r4, #8]
    4f26:	2b00      	cmp	r3, #0
    4f28:	db5c      	blt.n	4fe4 <_printf_i+0x1d0>
    4f2a:	2204      	movs	r2, #4
    4f2c:	6821      	ldr	r1, [r4, #0]
    4f2e:	4391      	bics	r1, r2
    4f30:	6021      	str	r1, [r4, #0]
    4f32:	2d00      	cmp	r5, #0
    4f34:	d158      	bne.n	4fe8 <_printf_i+0x1d4>
    4f36:	9e04      	ldr	r6, [sp, #16]
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d064      	beq.n	5006 <_printf_i+0x1f2>
    4f3c:	0026      	movs	r6, r4
    4f3e:	9b03      	ldr	r3, [sp, #12]
    4f40:	3642      	adds	r6, #66	; 0x42
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	7033      	strb	r3, [r6, #0]
    4f46:	e05e      	b.n	5006 <_printf_i+0x1f2>
    4f48:	0648      	lsls	r0, r1, #25
    4f4a:	d5da      	bpl.n	4f02 <_printf_i+0xee>
    4f4c:	b2ad      	uxth	r5, r5
    4f4e:	e7d8      	b.n	4f02 <_printf_i+0xee>
    4f50:	6809      	ldr	r1, [r1, #0]
    4f52:	681a      	ldr	r2, [r3, #0]
    4f54:	0608      	lsls	r0, r1, #24
    4f56:	d505      	bpl.n	4f64 <_printf_i+0x150>
    4f58:	1d11      	adds	r1, r2, #4
    4f5a:	6019      	str	r1, [r3, #0]
    4f5c:	6813      	ldr	r3, [r2, #0]
    4f5e:	6962      	ldr	r2, [r4, #20]
    4f60:	601a      	str	r2, [r3, #0]
    4f62:	e006      	b.n	4f72 <_printf_i+0x15e>
    4f64:	0649      	lsls	r1, r1, #25
    4f66:	d5f7      	bpl.n	4f58 <_printf_i+0x144>
    4f68:	1d11      	adds	r1, r2, #4
    4f6a:	6019      	str	r1, [r3, #0]
    4f6c:	6813      	ldr	r3, [r2, #0]
    4f6e:	8aa2      	ldrh	r2, [r4, #20]
    4f70:	801a      	strh	r2, [r3, #0]
    4f72:	2300      	movs	r3, #0
    4f74:	9e04      	ldr	r6, [sp, #16]
    4f76:	6123      	str	r3, [r4, #16]
    4f78:	e054      	b.n	5024 <_printf_i+0x210>
    4f7a:	681a      	ldr	r2, [r3, #0]
    4f7c:	1d11      	adds	r1, r2, #4
    4f7e:	6019      	str	r1, [r3, #0]
    4f80:	6816      	ldr	r6, [r2, #0]
    4f82:	2100      	movs	r1, #0
    4f84:	6862      	ldr	r2, [r4, #4]
    4f86:	0030      	movs	r0, r6
    4f88:	f000 fb84 	bl	5694 <memchr>
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d001      	beq.n	4f94 <_printf_i+0x180>
    4f90:	1b80      	subs	r0, r0, r6
    4f92:	6060      	str	r0, [r4, #4]
    4f94:	6863      	ldr	r3, [r4, #4]
    4f96:	6123      	str	r3, [r4, #16]
    4f98:	2300      	movs	r3, #0
    4f9a:	9a04      	ldr	r2, [sp, #16]
    4f9c:	7013      	strb	r3, [r2, #0]
    4f9e:	e041      	b.n	5024 <_printf_i+0x210>
    4fa0:	6923      	ldr	r3, [r4, #16]
    4fa2:	0032      	movs	r2, r6
    4fa4:	9906      	ldr	r1, [sp, #24]
    4fa6:	9805      	ldr	r0, [sp, #20]
    4fa8:	9d07      	ldr	r5, [sp, #28]
    4faa:	47a8      	blx	r5
    4fac:	1c43      	adds	r3, r0, #1
    4fae:	d043      	beq.n	5038 <_printf_i+0x224>
    4fb0:	6823      	ldr	r3, [r4, #0]
    4fb2:	2500      	movs	r5, #0
    4fb4:	079b      	lsls	r3, r3, #30
    4fb6:	d40f      	bmi.n	4fd8 <_printf_i+0x1c4>
    4fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4fba:	68e0      	ldr	r0, [r4, #12]
    4fbc:	4298      	cmp	r0, r3
    4fbe:	da3d      	bge.n	503c <_printf_i+0x228>
    4fc0:	0018      	movs	r0, r3
    4fc2:	e03b      	b.n	503c <_printf_i+0x228>
    4fc4:	0022      	movs	r2, r4
    4fc6:	2301      	movs	r3, #1
    4fc8:	3219      	adds	r2, #25
    4fca:	9906      	ldr	r1, [sp, #24]
    4fcc:	9805      	ldr	r0, [sp, #20]
    4fce:	9e07      	ldr	r6, [sp, #28]
    4fd0:	47b0      	blx	r6
    4fd2:	1c43      	adds	r3, r0, #1
    4fd4:	d030      	beq.n	5038 <_printf_i+0x224>
    4fd6:	3501      	adds	r5, #1
    4fd8:	68e3      	ldr	r3, [r4, #12]
    4fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4fdc:	1a9b      	subs	r3, r3, r2
    4fde:	429d      	cmp	r5, r3
    4fe0:	dbf0      	blt.n	4fc4 <_printf_i+0x1b0>
    4fe2:	e7e9      	b.n	4fb8 <_printf_i+0x1a4>
    4fe4:	2d00      	cmp	r5, #0
    4fe6:	d0a9      	beq.n	4f3c <_printf_i+0x128>
    4fe8:	9e04      	ldr	r6, [sp, #16]
    4fea:	0028      	movs	r0, r5
    4fec:	0039      	movs	r1, r7
    4fee:	f7ff f90f 	bl	4210 <__aeabi_uidivmod>
    4ff2:	9b03      	ldr	r3, [sp, #12]
    4ff4:	3e01      	subs	r6, #1
    4ff6:	5c5b      	ldrb	r3, [r3, r1]
    4ff8:	0028      	movs	r0, r5
    4ffa:	7033      	strb	r3, [r6, #0]
    4ffc:	0039      	movs	r1, r7
    4ffe:	f7ff f881 	bl	4104 <__udivsi3>
    5002:	1e05      	subs	r5, r0, #0
    5004:	d1f1      	bne.n	4fea <_printf_i+0x1d6>
    5006:	2f08      	cmp	r7, #8
    5008:	d109      	bne.n	501e <_printf_i+0x20a>
    500a:	6823      	ldr	r3, [r4, #0]
    500c:	07db      	lsls	r3, r3, #31
    500e:	d506      	bpl.n	501e <_printf_i+0x20a>
    5010:	6863      	ldr	r3, [r4, #4]
    5012:	6922      	ldr	r2, [r4, #16]
    5014:	4293      	cmp	r3, r2
    5016:	dc02      	bgt.n	501e <_printf_i+0x20a>
    5018:	2330      	movs	r3, #48	; 0x30
    501a:	3e01      	subs	r6, #1
    501c:	7033      	strb	r3, [r6, #0]
    501e:	9b04      	ldr	r3, [sp, #16]
    5020:	1b9b      	subs	r3, r3, r6
    5022:	6123      	str	r3, [r4, #16]
    5024:	9b07      	ldr	r3, [sp, #28]
    5026:	aa09      	add	r2, sp, #36	; 0x24
    5028:	9300      	str	r3, [sp, #0]
    502a:	0021      	movs	r1, r4
    502c:	9b06      	ldr	r3, [sp, #24]
    502e:	9805      	ldr	r0, [sp, #20]
    5030:	f7ff fe82 	bl	4d38 <_printf_common>
    5034:	1c43      	adds	r3, r0, #1
    5036:	d1b3      	bne.n	4fa0 <_printf_i+0x18c>
    5038:	2001      	movs	r0, #1
    503a:	4240      	negs	r0, r0
    503c:	b00b      	add	sp, #44	; 0x2c
    503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5040:	000063ca 	.word	0x000063ca
    5044:	000063b9 	.word	0x000063b9

00005048 <_scanf_chars>:
    5048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    504a:	0015      	movs	r5, r2
    504c:	688a      	ldr	r2, [r1, #8]
    504e:	9001      	str	r0, [sp, #4]
    5050:	000c      	movs	r4, r1
    5052:	2a00      	cmp	r2, #0
    5054:	d106      	bne.n	5064 <_scanf_chars+0x1c>
    5056:	698a      	ldr	r2, [r1, #24]
    5058:	1e51      	subs	r1, r2, #1
    505a:	418a      	sbcs	r2, r1
    505c:	2101      	movs	r1, #1
    505e:	4252      	negs	r2, r2
    5060:	430a      	orrs	r2, r1
    5062:	60a2      	str	r2, [r4, #8]
    5064:	6822      	ldr	r2, [r4, #0]
    5066:	06d2      	lsls	r2, r2, #27
    5068:	d403      	bmi.n	5072 <_scanf_chars+0x2a>
    506a:	681a      	ldr	r2, [r3, #0]
    506c:	1d11      	adds	r1, r2, #4
    506e:	6019      	str	r1, [r3, #0]
    5070:	6817      	ldr	r7, [r2, #0]
    5072:	2600      	movs	r6, #0
    5074:	69a3      	ldr	r3, [r4, #24]
    5076:	2b00      	cmp	r3, #0
    5078:	d01c      	beq.n	50b4 <_scanf_chars+0x6c>
    507a:	2b01      	cmp	r3, #1
    507c:	d108      	bne.n	5090 <_scanf_chars+0x48>
    507e:	682b      	ldr	r3, [r5, #0]
    5080:	6962      	ldr	r2, [r4, #20]
    5082:	781b      	ldrb	r3, [r3, #0]
    5084:	5cd3      	ldrb	r3, [r2, r3]
    5086:	2b00      	cmp	r3, #0
    5088:	d114      	bne.n	50b4 <_scanf_chars+0x6c>
    508a:	2e00      	cmp	r6, #0
    508c:	d130      	bne.n	50f0 <_scanf_chars+0xa8>
    508e:	e006      	b.n	509e <_scanf_chars+0x56>
    5090:	2b02      	cmp	r3, #2
    5092:	d006      	beq.n	50a2 <_scanf_chars+0x5a>
    5094:	2e00      	cmp	r6, #0
    5096:	d12b      	bne.n	50f0 <_scanf_chars+0xa8>
    5098:	69a3      	ldr	r3, [r4, #24]
    509a:	2b01      	cmp	r3, #1
    509c:	d128      	bne.n	50f0 <_scanf_chars+0xa8>
    509e:	2001      	movs	r0, #1
    50a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50a2:	f000 fad7 	bl	5654 <__locale_ctype_ptr>
    50a6:	2208      	movs	r2, #8
    50a8:	682b      	ldr	r3, [r5, #0]
    50aa:	781b      	ldrb	r3, [r3, #0]
    50ac:	18c0      	adds	r0, r0, r3
    50ae:	7843      	ldrb	r3, [r0, #1]
    50b0:	4213      	tst	r3, r2
    50b2:	d1ef      	bne.n	5094 <_scanf_chars+0x4c>
    50b4:	2210      	movs	r2, #16
    50b6:	6823      	ldr	r3, [r4, #0]
    50b8:	3601      	adds	r6, #1
    50ba:	4213      	tst	r3, r2
    50bc:	d103      	bne.n	50c6 <_scanf_chars+0x7e>
    50be:	682b      	ldr	r3, [r5, #0]
    50c0:	781b      	ldrb	r3, [r3, #0]
    50c2:	703b      	strb	r3, [r7, #0]
    50c4:	3701      	adds	r7, #1
    50c6:	682a      	ldr	r2, [r5, #0]
    50c8:	686b      	ldr	r3, [r5, #4]
    50ca:	3201      	adds	r2, #1
    50cc:	602a      	str	r2, [r5, #0]
    50ce:	68a2      	ldr	r2, [r4, #8]
    50d0:	3b01      	subs	r3, #1
    50d2:	3a01      	subs	r2, #1
    50d4:	606b      	str	r3, [r5, #4]
    50d6:	60a2      	str	r2, [r4, #8]
    50d8:	2a00      	cmp	r2, #0
    50da:	d009      	beq.n	50f0 <_scanf_chars+0xa8>
    50dc:	2b00      	cmp	r3, #0
    50de:	dcc9      	bgt.n	5074 <_scanf_chars+0x2c>
    50e0:	23c0      	movs	r3, #192	; 0xc0
    50e2:	005b      	lsls	r3, r3, #1
    50e4:	58e3      	ldr	r3, [r4, r3]
    50e6:	0029      	movs	r1, r5
    50e8:	9801      	ldr	r0, [sp, #4]
    50ea:	4798      	blx	r3
    50ec:	2800      	cmp	r0, #0
    50ee:	d0c1      	beq.n	5074 <_scanf_chars+0x2c>
    50f0:	2310      	movs	r3, #16
    50f2:	6822      	ldr	r2, [r4, #0]
    50f4:	4013      	ands	r3, r2
    50f6:	d106      	bne.n	5106 <_scanf_chars+0xbe>
    50f8:	68e2      	ldr	r2, [r4, #12]
    50fa:	3201      	adds	r2, #1
    50fc:	60e2      	str	r2, [r4, #12]
    50fe:	69a2      	ldr	r2, [r4, #24]
    5100:	2a00      	cmp	r2, #0
    5102:	d000      	beq.n	5106 <_scanf_chars+0xbe>
    5104:	703b      	strb	r3, [r7, #0]
    5106:	6923      	ldr	r3, [r4, #16]
    5108:	2000      	movs	r0, #0
    510a:	199e      	adds	r6, r3, r6
    510c:	6126      	str	r6, [r4, #16]
    510e:	e7c7      	b.n	50a0 <_scanf_chars+0x58>

00005110 <_scanf_i>:
    5110:	b5f0      	push	{r4, r5, r6, r7, lr}
    5112:	000c      	movs	r4, r1
    5114:	b08d      	sub	sp, #52	; 0x34
    5116:	9302      	str	r3, [sp, #8]
    5118:	4b77      	ldr	r3, [pc, #476]	; (52f8 <_scanf_i+0x1e8>)
    511a:	9005      	str	r0, [sp, #20]
    511c:	0016      	movs	r6, r2
    511e:	aa09      	add	r2, sp, #36	; 0x24
    5120:	cb23      	ldmia	r3!, {r0, r1, r5}
    5122:	c223      	stmia	r2!, {r0, r1, r5}
    5124:	4b75      	ldr	r3, [pc, #468]	; (52fc <_scanf_i+0x1ec>)
    5126:	9306      	str	r3, [sp, #24]
    5128:	69a3      	ldr	r3, [r4, #24]
    512a:	2b03      	cmp	r3, #3
    512c:	d001      	beq.n	5132 <_scanf_i+0x22>
    512e:	4b74      	ldr	r3, [pc, #464]	; (5300 <_scanf_i+0x1f0>)
    5130:	9306      	str	r3, [sp, #24]
    5132:	22ae      	movs	r2, #174	; 0xae
    5134:	2000      	movs	r0, #0
    5136:	68a3      	ldr	r3, [r4, #8]
    5138:	0052      	lsls	r2, r2, #1
    513a:	1e59      	subs	r1, r3, #1
    513c:	9004      	str	r0, [sp, #16]
    513e:	4291      	cmp	r1, r2
    5140:	d905      	bls.n	514e <_scanf_i+0x3e>
    5142:	3b5e      	subs	r3, #94	; 0x5e
    5144:	3bff      	subs	r3, #255	; 0xff
    5146:	9304      	str	r3, [sp, #16]
    5148:	235e      	movs	r3, #94	; 0x5e
    514a:	33ff      	adds	r3, #255	; 0xff
    514c:	60a3      	str	r3, [r4, #8]
    514e:	0023      	movs	r3, r4
    5150:	331c      	adds	r3, #28
    5152:	9301      	str	r3, [sp, #4]
    5154:	23d0      	movs	r3, #208	; 0xd0
    5156:	2700      	movs	r7, #0
    5158:	6822      	ldr	r2, [r4, #0]
    515a:	011b      	lsls	r3, r3, #4
    515c:	4313      	orrs	r3, r2
    515e:	6023      	str	r3, [r4, #0]
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	9303      	str	r3, [sp, #12]
    5164:	6833      	ldr	r3, [r6, #0]
    5166:	a809      	add	r0, sp, #36	; 0x24
    5168:	7819      	ldrb	r1, [r3, #0]
    516a:	00bb      	lsls	r3, r7, #2
    516c:	2202      	movs	r2, #2
    516e:	5818      	ldr	r0, [r3, r0]
    5170:	f000 fa90 	bl	5694 <memchr>
    5174:	2800      	cmp	r0, #0
    5176:	d02b      	beq.n	51d0 <_scanf_i+0xc0>
    5178:	2f01      	cmp	r7, #1
    517a:	d15f      	bne.n	523c <_scanf_i+0x12c>
    517c:	6863      	ldr	r3, [r4, #4]
    517e:	2b00      	cmp	r3, #0
    5180:	d106      	bne.n	5190 <_scanf_i+0x80>
    5182:	3308      	adds	r3, #8
    5184:	6822      	ldr	r2, [r4, #0]
    5186:	6063      	str	r3, [r4, #4]
    5188:	33f9      	adds	r3, #249	; 0xf9
    518a:	33ff      	adds	r3, #255	; 0xff
    518c:	4313      	orrs	r3, r2
    518e:	6023      	str	r3, [r4, #0]
    5190:	4b5c      	ldr	r3, [pc, #368]	; (5304 <_scanf_i+0x1f4>)
    5192:	6822      	ldr	r2, [r4, #0]
    5194:	4013      	ands	r3, r2
    5196:	6023      	str	r3, [r4, #0]
    5198:	68a3      	ldr	r3, [r4, #8]
    519a:	1e5a      	subs	r2, r3, #1
    519c:	60a2      	str	r2, [r4, #8]
    519e:	2b00      	cmp	r3, #0
    51a0:	d016      	beq.n	51d0 <_scanf_i+0xc0>
    51a2:	9b03      	ldr	r3, [sp, #12]
    51a4:	1c5d      	adds	r5, r3, #1
    51a6:	6833      	ldr	r3, [r6, #0]
    51a8:	1c5a      	adds	r2, r3, #1
    51aa:	6032      	str	r2, [r6, #0]
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	9a03      	ldr	r2, [sp, #12]
    51b0:	9503      	str	r5, [sp, #12]
    51b2:	7013      	strb	r3, [r2, #0]
    51b4:	6873      	ldr	r3, [r6, #4]
    51b6:	3b01      	subs	r3, #1
    51b8:	6073      	str	r3, [r6, #4]
    51ba:	2b00      	cmp	r3, #0
    51bc:	dc08      	bgt.n	51d0 <_scanf_i+0xc0>
    51be:	23c0      	movs	r3, #192	; 0xc0
    51c0:	005b      	lsls	r3, r3, #1
    51c2:	58e3      	ldr	r3, [r4, r3]
    51c4:	0031      	movs	r1, r6
    51c6:	9805      	ldr	r0, [sp, #20]
    51c8:	9307      	str	r3, [sp, #28]
    51ca:	4798      	blx	r3
    51cc:	2800      	cmp	r0, #0
    51ce:	d17d      	bne.n	52cc <_scanf_i+0x1bc>
    51d0:	3701      	adds	r7, #1
    51d2:	2f03      	cmp	r7, #3
    51d4:	d1c6      	bne.n	5164 <_scanf_i+0x54>
    51d6:	6863      	ldr	r3, [r4, #4]
    51d8:	2b00      	cmp	r3, #0
    51da:	d101      	bne.n	51e0 <_scanf_i+0xd0>
    51dc:	330a      	adds	r3, #10
    51de:	6063      	str	r3, [r4, #4]
    51e0:	2110      	movs	r1, #16
    51e2:	2700      	movs	r7, #0
    51e4:	6863      	ldr	r3, [r4, #4]
    51e6:	6960      	ldr	r0, [r4, #20]
    51e8:	1ac9      	subs	r1, r1, r3
    51ea:	4b47      	ldr	r3, [pc, #284]	; (5308 <_scanf_i+0x1f8>)
    51ec:	18c9      	adds	r1, r1, r3
    51ee:	f000 f88f 	bl	5310 <__sccl>
    51f2:	9d03      	ldr	r5, [sp, #12]
    51f4:	68a3      	ldr	r3, [r4, #8]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d041      	beq.n	527e <_scanf_i+0x16e>
    51fa:	6832      	ldr	r2, [r6, #0]
    51fc:	6960      	ldr	r0, [r4, #20]
    51fe:	7811      	ldrb	r1, [r2, #0]
    5200:	5c40      	ldrb	r0, [r0, r1]
    5202:	2800      	cmp	r0, #0
    5204:	d03b      	beq.n	527e <_scanf_i+0x16e>
    5206:	2930      	cmp	r1, #48	; 0x30
    5208:	d128      	bne.n	525c <_scanf_i+0x14c>
    520a:	2080      	movs	r0, #128	; 0x80
    520c:	6821      	ldr	r1, [r4, #0]
    520e:	0100      	lsls	r0, r0, #4
    5210:	4201      	tst	r1, r0
    5212:	d023      	beq.n	525c <_scanf_i+0x14c>
    5214:	9a04      	ldr	r2, [sp, #16]
    5216:	3701      	adds	r7, #1
    5218:	2a00      	cmp	r2, #0
    521a:	d003      	beq.n	5224 <_scanf_i+0x114>
    521c:	3a01      	subs	r2, #1
    521e:	3301      	adds	r3, #1
    5220:	9204      	str	r2, [sp, #16]
    5222:	60a3      	str	r3, [r4, #8]
    5224:	6873      	ldr	r3, [r6, #4]
    5226:	3b01      	subs	r3, #1
    5228:	6073      	str	r3, [r6, #4]
    522a:	2b00      	cmp	r3, #0
    522c:	dd1e      	ble.n	526c <_scanf_i+0x15c>
    522e:	6833      	ldr	r3, [r6, #0]
    5230:	3301      	adds	r3, #1
    5232:	6033      	str	r3, [r6, #0]
    5234:	68a3      	ldr	r3, [r4, #8]
    5236:	3b01      	subs	r3, #1
    5238:	60a3      	str	r3, [r4, #8]
    523a:	e7db      	b.n	51f4 <_scanf_i+0xe4>
    523c:	2f02      	cmp	r7, #2
    523e:	d1ab      	bne.n	5198 <_scanf_i+0x88>
    5240:	21c0      	movs	r1, #192	; 0xc0
    5242:	2380      	movs	r3, #128	; 0x80
    5244:	6822      	ldr	r2, [r4, #0]
    5246:	00c9      	lsls	r1, r1, #3
    5248:	4011      	ands	r1, r2
    524a:	009b      	lsls	r3, r3, #2
    524c:	4299      	cmp	r1, r3
    524e:	d1c2      	bne.n	51d6 <_scanf_i+0xc6>
    5250:	3bf1      	subs	r3, #241	; 0xf1
    5252:	3bff      	subs	r3, #255	; 0xff
    5254:	6063      	str	r3, [r4, #4]
    5256:	33f0      	adds	r3, #240	; 0xf0
    5258:	4313      	orrs	r3, r2
    525a:	e79c      	b.n	5196 <_scanf_i+0x86>
    525c:	6821      	ldr	r1, [r4, #0]
    525e:	4b2b      	ldr	r3, [pc, #172]	; (530c <_scanf_i+0x1fc>)
    5260:	400b      	ands	r3, r1
    5262:	6023      	str	r3, [r4, #0]
    5264:	7813      	ldrb	r3, [r2, #0]
    5266:	702b      	strb	r3, [r5, #0]
    5268:	3501      	adds	r5, #1
    526a:	e7db      	b.n	5224 <_scanf_i+0x114>
    526c:	23c0      	movs	r3, #192	; 0xc0
    526e:	005b      	lsls	r3, r3, #1
    5270:	58e3      	ldr	r3, [r4, r3]
    5272:	0031      	movs	r1, r6
    5274:	9805      	ldr	r0, [sp, #20]
    5276:	9303      	str	r3, [sp, #12]
    5278:	4798      	blx	r3
    527a:	2800      	cmp	r0, #0
    527c:	d0da      	beq.n	5234 <_scanf_i+0x124>
    527e:	6823      	ldr	r3, [r4, #0]
    5280:	05db      	lsls	r3, r3, #23
    5282:	d50e      	bpl.n	52a2 <_scanf_i+0x192>
    5284:	9b01      	ldr	r3, [sp, #4]
    5286:	429d      	cmp	r5, r3
    5288:	d907      	bls.n	529a <_scanf_i+0x18a>
    528a:	23be      	movs	r3, #190	; 0xbe
    528c:	3d01      	subs	r5, #1
    528e:	005b      	lsls	r3, r3, #1
    5290:	7829      	ldrb	r1, [r5, #0]
    5292:	58e3      	ldr	r3, [r4, r3]
    5294:	0032      	movs	r2, r6
    5296:	9805      	ldr	r0, [sp, #20]
    5298:	4798      	blx	r3
    529a:	9b01      	ldr	r3, [sp, #4]
    529c:	2001      	movs	r0, #1
    529e:	429d      	cmp	r5, r3
    52a0:	d027      	beq.n	52f2 <_scanf_i+0x1e2>
    52a2:	2210      	movs	r2, #16
    52a4:	6823      	ldr	r3, [r4, #0]
    52a6:	401a      	ands	r2, r3
    52a8:	d11c      	bne.n	52e4 <_scanf_i+0x1d4>
    52aa:	702a      	strb	r2, [r5, #0]
    52ac:	6863      	ldr	r3, [r4, #4]
    52ae:	9901      	ldr	r1, [sp, #4]
    52b0:	9805      	ldr	r0, [sp, #20]
    52b2:	9e06      	ldr	r6, [sp, #24]
    52b4:	47b0      	blx	r6
    52b6:	9b02      	ldr	r3, [sp, #8]
    52b8:	6822      	ldr	r2, [r4, #0]
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	0691      	lsls	r1, r2, #26
    52be:	d507      	bpl.n	52d0 <_scanf_i+0x1c0>
    52c0:	9902      	ldr	r1, [sp, #8]
    52c2:	1d1a      	adds	r2, r3, #4
    52c4:	600a      	str	r2, [r1, #0]
    52c6:	681b      	ldr	r3, [r3, #0]
    52c8:	6018      	str	r0, [r3, #0]
    52ca:	e008      	b.n	52de <_scanf_i+0x1ce>
    52cc:	2700      	movs	r7, #0
    52ce:	e7d6      	b.n	527e <_scanf_i+0x16e>
    52d0:	07d1      	lsls	r1, r2, #31
    52d2:	d5f5      	bpl.n	52c0 <_scanf_i+0x1b0>
    52d4:	9902      	ldr	r1, [sp, #8]
    52d6:	1d1a      	adds	r2, r3, #4
    52d8:	600a      	str	r2, [r1, #0]
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	8018      	strh	r0, [r3, #0]
    52de:	68e3      	ldr	r3, [r4, #12]
    52e0:	3301      	adds	r3, #1
    52e2:	60e3      	str	r3, [r4, #12]
    52e4:	2000      	movs	r0, #0
    52e6:	9b01      	ldr	r3, [sp, #4]
    52e8:	1aed      	subs	r5, r5, r3
    52ea:	6923      	ldr	r3, [r4, #16]
    52ec:	19ef      	adds	r7, r5, r7
    52ee:	19df      	adds	r7, r3, r7
    52f0:	6127      	str	r7, [r4, #16]
    52f2:	b00d      	add	sp, #52	; 0x34
    52f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52f6:	46c0      	nop			; (mov r8, r8)
    52f8:	000063dc 	.word	0x000063dc
    52fc:	00005481 	.word	0x00005481
    5300:	000055b1 	.word	0x000055b1
    5304:	fffffaff 	.word	0xfffffaff
    5308:	000063e8 	.word	0x000063e8
    530c:	fffff6ff 	.word	0xfffff6ff

00005310 <__sccl>:
    5310:	b570      	push	{r4, r5, r6, lr}
    5312:	780b      	ldrb	r3, [r1, #0]
    5314:	2b5e      	cmp	r3, #94	; 0x5e
    5316:	d00d      	beq.n	5334 <__sccl+0x24>
    5318:	1c4a      	adds	r2, r1, #1
    531a:	2100      	movs	r1, #0
    531c:	0004      	movs	r4, r0
    531e:	1c45      	adds	r5, r0, #1
    5320:	35ff      	adds	r5, #255	; 0xff
    5322:	7021      	strb	r1, [r4, #0]
    5324:	3401      	adds	r4, #1
    5326:	42a5      	cmp	r5, r4
    5328:	d1fb      	bne.n	5322 <__sccl+0x12>
    532a:	2b00      	cmp	r3, #0
    532c:	d106      	bne.n	533c <__sccl+0x2c>
    532e:	3a01      	subs	r2, #1
    5330:	0010      	movs	r0, r2
    5332:	bd70      	pop	{r4, r5, r6, pc}
    5334:	1c8a      	adds	r2, r1, #2
    5336:	784b      	ldrb	r3, [r1, #1]
    5338:	2101      	movs	r1, #1
    533a:	e7ef      	b.n	531c <__sccl+0xc>
    533c:	2401      	movs	r4, #1
    533e:	404c      	eors	r4, r1
    5340:	0011      	movs	r1, r2
    5342:	54c4      	strb	r4, [r0, r3]
    5344:	780d      	ldrb	r5, [r1, #0]
    5346:	1c4a      	adds	r2, r1, #1
    5348:	2d2d      	cmp	r5, #45	; 0x2d
    534a:	d007      	beq.n	535c <__sccl+0x4c>
    534c:	2d5d      	cmp	r5, #93	; 0x5d
    534e:	d0ef      	beq.n	5330 <__sccl+0x20>
    5350:	2d00      	cmp	r5, #0
    5352:	d101      	bne.n	5358 <__sccl+0x48>
    5354:	000a      	movs	r2, r1
    5356:	e7eb      	b.n	5330 <__sccl+0x20>
    5358:	002b      	movs	r3, r5
    535a:	e7f1      	b.n	5340 <__sccl+0x30>
    535c:	784e      	ldrb	r6, [r1, #1]
    535e:	2e5d      	cmp	r6, #93	; 0x5d
    5360:	d0fa      	beq.n	5358 <__sccl+0x48>
    5362:	42b3      	cmp	r3, r6
    5364:	dcf8      	bgt.n	5358 <__sccl+0x48>
    5366:	3102      	adds	r1, #2
    5368:	3301      	adds	r3, #1
    536a:	54c4      	strb	r4, [r0, r3]
    536c:	429e      	cmp	r6, r3
    536e:	dcfb      	bgt.n	5368 <__sccl+0x58>
    5370:	e7e8      	b.n	5344 <__sccl+0x34>
	...

00005374 <_strtol_l.isra.0>:
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	001f      	movs	r7, r3
    5378:	000e      	movs	r6, r1
    537a:	b087      	sub	sp, #28
    537c:	9005      	str	r0, [sp, #20]
    537e:	9103      	str	r1, [sp, #12]
    5380:	9202      	str	r2, [sp, #8]
    5382:	980c      	ldr	r0, [sp, #48]	; 0x30
    5384:	7834      	ldrb	r4, [r6, #0]
    5386:	f000 f961 	bl	564c <__locale_ctype_ptr_l>
    538a:	2208      	movs	r2, #8
    538c:	1900      	adds	r0, r0, r4
    538e:	7843      	ldrb	r3, [r0, #1]
    5390:	1c75      	adds	r5, r6, #1
    5392:	4013      	ands	r3, r2
    5394:	d10c      	bne.n	53b0 <_strtol_l.isra.0+0x3c>
    5396:	2c2d      	cmp	r4, #45	; 0x2d
    5398:	d10c      	bne.n	53b4 <_strtol_l.isra.0+0x40>
    539a:	3301      	adds	r3, #1
    539c:	782c      	ldrb	r4, [r5, #0]
    539e:	9301      	str	r3, [sp, #4]
    53a0:	1cb5      	adds	r5, r6, #2
    53a2:	2f00      	cmp	r7, #0
    53a4:	d00c      	beq.n	53c0 <_strtol_l.isra.0+0x4c>
    53a6:	2f10      	cmp	r7, #16
    53a8:	d114      	bne.n	53d4 <_strtol_l.isra.0+0x60>
    53aa:	2c30      	cmp	r4, #48	; 0x30
    53ac:	d00a      	beq.n	53c4 <_strtol_l.isra.0+0x50>
    53ae:	e011      	b.n	53d4 <_strtol_l.isra.0+0x60>
    53b0:	002e      	movs	r6, r5
    53b2:	e7e6      	b.n	5382 <_strtol_l.isra.0+0xe>
    53b4:	9301      	str	r3, [sp, #4]
    53b6:	2c2b      	cmp	r4, #43	; 0x2b
    53b8:	d1f3      	bne.n	53a2 <_strtol_l.isra.0+0x2e>
    53ba:	782c      	ldrb	r4, [r5, #0]
    53bc:	1cb5      	adds	r5, r6, #2
    53be:	e7f0      	b.n	53a2 <_strtol_l.isra.0+0x2e>
    53c0:	2c30      	cmp	r4, #48	; 0x30
    53c2:	d12f      	bne.n	5424 <_strtol_l.isra.0+0xb0>
    53c4:	2220      	movs	r2, #32
    53c6:	782b      	ldrb	r3, [r5, #0]
    53c8:	4393      	bics	r3, r2
    53ca:	2b58      	cmp	r3, #88	; 0x58
    53cc:	d151      	bne.n	5472 <_strtol_l.isra.0+0xfe>
    53ce:	2710      	movs	r7, #16
    53d0:	786c      	ldrb	r4, [r5, #1]
    53d2:	3502      	adds	r5, #2
    53d4:	9b01      	ldr	r3, [sp, #4]
    53d6:	4a29      	ldr	r2, [pc, #164]	; (547c <_strtol_l.isra.0+0x108>)
    53d8:	0039      	movs	r1, r7
    53da:	189e      	adds	r6, r3, r2
    53dc:	0030      	movs	r0, r6
    53de:	f7fe ff17 	bl	4210 <__aeabi_uidivmod>
    53e2:	0030      	movs	r0, r6
    53e4:	9104      	str	r1, [sp, #16]
    53e6:	0039      	movs	r1, r7
    53e8:	f7fe fe8c 	bl	4104 <__udivsi3>
    53ec:	2101      	movs	r1, #1
    53ee:	2300      	movs	r3, #0
    53f0:	4249      	negs	r1, r1
    53f2:	0002      	movs	r2, r0
    53f4:	468c      	mov	ip, r1
    53f6:	0018      	movs	r0, r3
    53f8:	0021      	movs	r1, r4
    53fa:	3930      	subs	r1, #48	; 0x30
    53fc:	2909      	cmp	r1, #9
    53fe:	d813      	bhi.n	5428 <_strtol_l.isra.0+0xb4>
    5400:	000c      	movs	r4, r1
    5402:	42a7      	cmp	r7, r4
    5404:	dd1c      	ble.n	5440 <_strtol_l.isra.0+0xcc>
    5406:	1c59      	adds	r1, r3, #1
    5408:	d009      	beq.n	541e <_strtol_l.isra.0+0xaa>
    540a:	4663      	mov	r3, ip
    540c:	4282      	cmp	r2, r0
    540e:	d306      	bcc.n	541e <_strtol_l.isra.0+0xaa>
    5410:	d102      	bne.n	5418 <_strtol_l.isra.0+0xa4>
    5412:	9904      	ldr	r1, [sp, #16]
    5414:	42a1      	cmp	r1, r4
    5416:	db02      	blt.n	541e <_strtol_l.isra.0+0xaa>
    5418:	2301      	movs	r3, #1
    541a:	4378      	muls	r0, r7
    541c:	1820      	adds	r0, r4, r0
    541e:	782c      	ldrb	r4, [r5, #0]
    5420:	3501      	adds	r5, #1
    5422:	e7e9      	b.n	53f8 <_strtol_l.isra.0+0x84>
    5424:	270a      	movs	r7, #10
    5426:	e7d5      	b.n	53d4 <_strtol_l.isra.0+0x60>
    5428:	0021      	movs	r1, r4
    542a:	3941      	subs	r1, #65	; 0x41
    542c:	2919      	cmp	r1, #25
    542e:	d801      	bhi.n	5434 <_strtol_l.isra.0+0xc0>
    5430:	3c37      	subs	r4, #55	; 0x37
    5432:	e7e6      	b.n	5402 <_strtol_l.isra.0+0x8e>
    5434:	0021      	movs	r1, r4
    5436:	3961      	subs	r1, #97	; 0x61
    5438:	2919      	cmp	r1, #25
    543a:	d801      	bhi.n	5440 <_strtol_l.isra.0+0xcc>
    543c:	3c57      	subs	r4, #87	; 0x57
    543e:	e7e0      	b.n	5402 <_strtol_l.isra.0+0x8e>
    5440:	1c5a      	adds	r2, r3, #1
    5442:	d108      	bne.n	5456 <_strtol_l.isra.0+0xe2>
    5444:	9a05      	ldr	r2, [sp, #20]
    5446:	3323      	adds	r3, #35	; 0x23
    5448:	6013      	str	r3, [r2, #0]
    544a:	9b02      	ldr	r3, [sp, #8]
    544c:	0030      	movs	r0, r6
    544e:	2b00      	cmp	r3, #0
    5450:	d10b      	bne.n	546a <_strtol_l.isra.0+0xf6>
    5452:	b007      	add	sp, #28
    5454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5456:	9a01      	ldr	r2, [sp, #4]
    5458:	2a00      	cmp	r2, #0
    545a:	d000      	beq.n	545e <_strtol_l.isra.0+0xea>
    545c:	4240      	negs	r0, r0
    545e:	9a02      	ldr	r2, [sp, #8]
    5460:	2a00      	cmp	r2, #0
    5462:	d0f6      	beq.n	5452 <_strtol_l.isra.0+0xde>
    5464:	9a03      	ldr	r2, [sp, #12]
    5466:	2b00      	cmp	r3, #0
    5468:	d000      	beq.n	546c <_strtol_l.isra.0+0xf8>
    546a:	1e6a      	subs	r2, r5, #1
    546c:	9b02      	ldr	r3, [sp, #8]
    546e:	601a      	str	r2, [r3, #0]
    5470:	e7ef      	b.n	5452 <_strtol_l.isra.0+0xde>
    5472:	2430      	movs	r4, #48	; 0x30
    5474:	2f00      	cmp	r7, #0
    5476:	d1ad      	bne.n	53d4 <_strtol_l.isra.0+0x60>
    5478:	3708      	adds	r7, #8
    547a:	e7ab      	b.n	53d4 <_strtol_l.isra.0+0x60>
    547c:	7fffffff 	.word	0x7fffffff

00005480 <_strtol_r>:
    5480:	b513      	push	{r0, r1, r4, lr}
    5482:	4c05      	ldr	r4, [pc, #20]	; (5498 <_strtol_r+0x18>)
    5484:	6824      	ldr	r4, [r4, #0]
    5486:	6a24      	ldr	r4, [r4, #32]
    5488:	2c00      	cmp	r4, #0
    548a:	d100      	bne.n	548e <_strtol_r+0xe>
    548c:	4c03      	ldr	r4, [pc, #12]	; (549c <_strtol_r+0x1c>)
    548e:	9400      	str	r4, [sp, #0]
    5490:	f7ff ff70 	bl	5374 <_strtol_l.isra.0>
    5494:	bd16      	pop	{r1, r2, r4, pc}
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	20000048 	.word	0x20000048
    549c:	200000ac 	.word	0x200000ac

000054a0 <_strtoul_l.isra.0>:
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	001f      	movs	r7, r3
    54a4:	000e      	movs	r6, r1
    54a6:	b087      	sub	sp, #28
    54a8:	9005      	str	r0, [sp, #20]
    54aa:	9103      	str	r1, [sp, #12]
    54ac:	9201      	str	r2, [sp, #4]
    54ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    54b0:	7834      	ldrb	r4, [r6, #0]
    54b2:	f000 f8cb 	bl	564c <__locale_ctype_ptr_l>
    54b6:	2208      	movs	r2, #8
    54b8:	1900      	adds	r0, r0, r4
    54ba:	7843      	ldrb	r3, [r0, #1]
    54bc:	1c75      	adds	r5, r6, #1
    54be:	4013      	ands	r3, r2
    54c0:	d10c      	bne.n	54dc <_strtoul_l.isra.0+0x3c>
    54c2:	2c2d      	cmp	r4, #45	; 0x2d
    54c4:	d10c      	bne.n	54e0 <_strtoul_l.isra.0+0x40>
    54c6:	3301      	adds	r3, #1
    54c8:	782c      	ldrb	r4, [r5, #0]
    54ca:	9302      	str	r3, [sp, #8]
    54cc:	1cb5      	adds	r5, r6, #2
    54ce:	2f00      	cmp	r7, #0
    54d0:	d00c      	beq.n	54ec <_strtoul_l.isra.0+0x4c>
    54d2:	2f10      	cmp	r7, #16
    54d4:	d114      	bne.n	5500 <_strtoul_l.isra.0+0x60>
    54d6:	2c30      	cmp	r4, #48	; 0x30
    54d8:	d00a      	beq.n	54f0 <_strtoul_l.isra.0+0x50>
    54da:	e011      	b.n	5500 <_strtoul_l.isra.0+0x60>
    54dc:	002e      	movs	r6, r5
    54de:	e7e6      	b.n	54ae <_strtoul_l.isra.0+0xe>
    54e0:	9302      	str	r3, [sp, #8]
    54e2:	2c2b      	cmp	r4, #43	; 0x2b
    54e4:	d1f3      	bne.n	54ce <_strtoul_l.isra.0+0x2e>
    54e6:	782c      	ldrb	r4, [r5, #0]
    54e8:	1cb5      	adds	r5, r6, #2
    54ea:	e7f0      	b.n	54ce <_strtoul_l.isra.0+0x2e>
    54ec:	2c30      	cmp	r4, #48	; 0x30
    54ee:	d12f      	bne.n	5550 <_strtoul_l.isra.0+0xb0>
    54f0:	2220      	movs	r2, #32
    54f2:	782b      	ldrb	r3, [r5, #0]
    54f4:	4393      	bics	r3, r2
    54f6:	2b58      	cmp	r3, #88	; 0x58
    54f8:	d154      	bne.n	55a4 <_strtoul_l.isra.0+0x104>
    54fa:	2710      	movs	r7, #16
    54fc:	786c      	ldrb	r4, [r5, #1]
    54fe:	3502      	adds	r5, #2
    5500:	2001      	movs	r0, #1
    5502:	0039      	movs	r1, r7
    5504:	4240      	negs	r0, r0
    5506:	f7fe fdfd 	bl	4104 <__udivsi3>
    550a:	0006      	movs	r6, r0
    550c:	2001      	movs	r0, #1
    550e:	0039      	movs	r1, r7
    5510:	4240      	negs	r0, r0
    5512:	f7fe fe7d 	bl	4210 <__aeabi_uidivmod>
    5516:	2300      	movs	r3, #0
    5518:	9104      	str	r1, [sp, #16]
    551a:	2101      	movs	r1, #1
    551c:	2201      	movs	r2, #1
    551e:	0018      	movs	r0, r3
    5520:	468c      	mov	ip, r1
    5522:	4252      	negs	r2, r2
    5524:	0021      	movs	r1, r4
    5526:	3930      	subs	r1, #48	; 0x30
    5528:	2909      	cmp	r1, #9
    552a:	d813      	bhi.n	5554 <_strtoul_l.isra.0+0xb4>
    552c:	000c      	movs	r4, r1
    552e:	42a7      	cmp	r7, r4
    5530:	dd1e      	ble.n	5570 <_strtoul_l.isra.0+0xd0>
    5532:	2b00      	cmp	r3, #0
    5534:	db1a      	blt.n	556c <_strtoul_l.isra.0+0xcc>
    5536:	0013      	movs	r3, r2
    5538:	4286      	cmp	r6, r0
    553a:	d306      	bcc.n	554a <_strtoul_l.isra.0+0xaa>
    553c:	d102      	bne.n	5544 <_strtoul_l.isra.0+0xa4>
    553e:	9904      	ldr	r1, [sp, #16]
    5540:	42a1      	cmp	r1, r4
    5542:	db02      	blt.n	554a <_strtoul_l.isra.0+0xaa>
    5544:	4663      	mov	r3, ip
    5546:	4378      	muls	r0, r7
    5548:	1820      	adds	r0, r4, r0
    554a:	782c      	ldrb	r4, [r5, #0]
    554c:	3501      	adds	r5, #1
    554e:	e7e9      	b.n	5524 <_strtoul_l.isra.0+0x84>
    5550:	270a      	movs	r7, #10
    5552:	e7d5      	b.n	5500 <_strtoul_l.isra.0+0x60>
    5554:	0021      	movs	r1, r4
    5556:	3941      	subs	r1, #65	; 0x41
    5558:	2919      	cmp	r1, #25
    555a:	d801      	bhi.n	5560 <_strtoul_l.isra.0+0xc0>
    555c:	3c37      	subs	r4, #55	; 0x37
    555e:	e7e6      	b.n	552e <_strtoul_l.isra.0+0x8e>
    5560:	0021      	movs	r1, r4
    5562:	3961      	subs	r1, #97	; 0x61
    5564:	2919      	cmp	r1, #25
    5566:	d803      	bhi.n	5570 <_strtoul_l.isra.0+0xd0>
    5568:	3c57      	subs	r4, #87	; 0x57
    556a:	e7e0      	b.n	552e <_strtoul_l.isra.0+0x8e>
    556c:	0013      	movs	r3, r2
    556e:	e7ec      	b.n	554a <_strtoul_l.isra.0+0xaa>
    5570:	2b00      	cmp	r3, #0
    5572:	da09      	bge.n	5588 <_strtoul_l.isra.0+0xe8>
    5574:	2322      	movs	r3, #34	; 0x22
    5576:	2001      	movs	r0, #1
    5578:	9a05      	ldr	r2, [sp, #20]
    557a:	4240      	negs	r0, r0
    557c:	6013      	str	r3, [r2, #0]
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	2b00      	cmp	r3, #0
    5582:	d10b      	bne.n	559c <_strtoul_l.isra.0+0xfc>
    5584:	b007      	add	sp, #28
    5586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5588:	9a02      	ldr	r2, [sp, #8]
    558a:	2a00      	cmp	r2, #0
    558c:	d000      	beq.n	5590 <_strtoul_l.isra.0+0xf0>
    558e:	4240      	negs	r0, r0
    5590:	9a01      	ldr	r2, [sp, #4]
    5592:	2a00      	cmp	r2, #0
    5594:	d0f6      	beq.n	5584 <_strtoul_l.isra.0+0xe4>
    5596:	9a03      	ldr	r2, [sp, #12]
    5598:	2b00      	cmp	r3, #0
    559a:	d000      	beq.n	559e <_strtoul_l.isra.0+0xfe>
    559c:	1e6a      	subs	r2, r5, #1
    559e:	9b01      	ldr	r3, [sp, #4]
    55a0:	601a      	str	r2, [r3, #0]
    55a2:	e7ef      	b.n	5584 <_strtoul_l.isra.0+0xe4>
    55a4:	2430      	movs	r4, #48	; 0x30
    55a6:	2f00      	cmp	r7, #0
    55a8:	d1aa      	bne.n	5500 <_strtoul_l.isra.0+0x60>
    55aa:	3708      	adds	r7, #8
    55ac:	e7a8      	b.n	5500 <_strtoul_l.isra.0+0x60>
	...

000055b0 <_strtoul_r>:
    55b0:	b513      	push	{r0, r1, r4, lr}
    55b2:	4c05      	ldr	r4, [pc, #20]	; (55c8 <_strtoul_r+0x18>)
    55b4:	6824      	ldr	r4, [r4, #0]
    55b6:	6a24      	ldr	r4, [r4, #32]
    55b8:	2c00      	cmp	r4, #0
    55ba:	d100      	bne.n	55be <_strtoul_r+0xe>
    55bc:	4c03      	ldr	r4, [pc, #12]	; (55cc <_strtoul_r+0x1c>)
    55be:	9400      	str	r4, [sp, #0]
    55c0:	f7ff ff6e 	bl	54a0 <_strtoul_l.isra.0>
    55c4:	bd16      	pop	{r1, r2, r4, pc}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	20000048 	.word	0x20000048
    55cc:	200000ac 	.word	0x200000ac

000055d0 <__submore>:
    55d0:	000b      	movs	r3, r1
    55d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55d4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    55d6:	3344      	adds	r3, #68	; 0x44
    55d8:	000c      	movs	r4, r1
    55da:	429d      	cmp	r5, r3
    55dc:	d11c      	bne.n	5618 <__submore+0x48>
    55de:	2680      	movs	r6, #128	; 0x80
    55e0:	00f6      	lsls	r6, r6, #3
    55e2:	0031      	movs	r1, r6
    55e4:	f7fe ff98 	bl	4518 <_malloc_r>
    55e8:	2800      	cmp	r0, #0
    55ea:	d102      	bne.n	55f2 <__submore+0x22>
    55ec:	2001      	movs	r0, #1
    55ee:	4240      	negs	r0, r0
    55f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55f2:	0023      	movs	r3, r4
    55f4:	6360      	str	r0, [r4, #52]	; 0x34
    55f6:	63a6      	str	r6, [r4, #56]	; 0x38
    55f8:	3346      	adds	r3, #70	; 0x46
    55fa:	781a      	ldrb	r2, [r3, #0]
    55fc:	4b10      	ldr	r3, [pc, #64]	; (5640 <__submore+0x70>)
    55fe:	54c2      	strb	r2, [r0, r3]
    5600:	0023      	movs	r3, r4
    5602:	3345      	adds	r3, #69	; 0x45
    5604:	781a      	ldrb	r2, [r3, #0]
    5606:	4b0f      	ldr	r3, [pc, #60]	; (5644 <__submore+0x74>)
    5608:	54c2      	strb	r2, [r0, r3]
    560a:	782a      	ldrb	r2, [r5, #0]
    560c:	4b0e      	ldr	r3, [pc, #56]	; (5648 <__submore+0x78>)
    560e:	54c2      	strb	r2, [r0, r3]
    5610:	18c0      	adds	r0, r0, r3
    5612:	6020      	str	r0, [r4, #0]
    5614:	2000      	movs	r0, #0
    5616:	e7eb      	b.n	55f0 <__submore+0x20>
    5618:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    561a:	0029      	movs	r1, r5
    561c:	0073      	lsls	r3, r6, #1
    561e:	001a      	movs	r2, r3
    5620:	9301      	str	r3, [sp, #4]
    5622:	f000 f854 	bl	56ce <_realloc_r>
    5626:	1e05      	subs	r5, r0, #0
    5628:	d0e0      	beq.n	55ec <__submore+0x1c>
    562a:	1987      	adds	r7, r0, r6
    562c:	0001      	movs	r1, r0
    562e:	0032      	movs	r2, r6
    5630:	0038      	movs	r0, r7
    5632:	f7fe ff15 	bl	4460 <memcpy>
    5636:	9b01      	ldr	r3, [sp, #4]
    5638:	6027      	str	r7, [r4, #0]
    563a:	6365      	str	r5, [r4, #52]	; 0x34
    563c:	63a3      	str	r3, [r4, #56]	; 0x38
    563e:	e7e9      	b.n	5614 <__submore+0x44>
    5640:	000003ff 	.word	0x000003ff
    5644:	000003fe 	.word	0x000003fe
    5648:	000003fd 	.word	0x000003fd

0000564c <__locale_ctype_ptr_l>:
    564c:	30ec      	adds	r0, #236	; 0xec
    564e:	6800      	ldr	r0, [r0, #0]
    5650:	4770      	bx	lr
	...

00005654 <__locale_ctype_ptr>:
    5654:	4b04      	ldr	r3, [pc, #16]	; (5668 <__locale_ctype_ptr+0x14>)
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	6a1b      	ldr	r3, [r3, #32]
    565a:	2b00      	cmp	r3, #0
    565c:	d100      	bne.n	5660 <__locale_ctype_ptr+0xc>
    565e:	4b03      	ldr	r3, [pc, #12]	; (566c <__locale_ctype_ptr+0x18>)
    5660:	33ec      	adds	r3, #236	; 0xec
    5662:	6818      	ldr	r0, [r3, #0]
    5664:	4770      	bx	lr
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	20000048 	.word	0x20000048
    566c:	200000ac 	.word	0x200000ac

00005670 <__ascii_mbtowc>:
    5670:	b082      	sub	sp, #8
    5672:	2900      	cmp	r1, #0
    5674:	d100      	bne.n	5678 <__ascii_mbtowc+0x8>
    5676:	a901      	add	r1, sp, #4
    5678:	1e10      	subs	r0, r2, #0
    567a:	d006      	beq.n	568a <__ascii_mbtowc+0x1a>
    567c:	2b00      	cmp	r3, #0
    567e:	d006      	beq.n	568e <__ascii_mbtowc+0x1e>
    5680:	7813      	ldrb	r3, [r2, #0]
    5682:	600b      	str	r3, [r1, #0]
    5684:	7810      	ldrb	r0, [r2, #0]
    5686:	1e43      	subs	r3, r0, #1
    5688:	4198      	sbcs	r0, r3
    568a:	b002      	add	sp, #8
    568c:	4770      	bx	lr
    568e:	2002      	movs	r0, #2
    5690:	4240      	negs	r0, r0
    5692:	e7fa      	b.n	568a <__ascii_mbtowc+0x1a>

00005694 <memchr>:
    5694:	b2c9      	uxtb	r1, r1
    5696:	1882      	adds	r2, r0, r2
    5698:	4290      	cmp	r0, r2
    569a:	d101      	bne.n	56a0 <memchr+0xc>
    569c:	2000      	movs	r0, #0
    569e:	4770      	bx	lr
    56a0:	7803      	ldrb	r3, [r0, #0]
    56a2:	428b      	cmp	r3, r1
    56a4:	d0fb      	beq.n	569e <memchr+0xa>
    56a6:	3001      	adds	r0, #1
    56a8:	e7f6      	b.n	5698 <memchr+0x4>

000056aa <memmove>:
    56aa:	b510      	push	{r4, lr}
    56ac:	4288      	cmp	r0, r1
    56ae:	d902      	bls.n	56b6 <memmove+0xc>
    56b0:	188b      	adds	r3, r1, r2
    56b2:	4298      	cmp	r0, r3
    56b4:	d308      	bcc.n	56c8 <memmove+0x1e>
    56b6:	2300      	movs	r3, #0
    56b8:	429a      	cmp	r2, r3
    56ba:	d007      	beq.n	56cc <memmove+0x22>
    56bc:	5ccc      	ldrb	r4, [r1, r3]
    56be:	54c4      	strb	r4, [r0, r3]
    56c0:	3301      	adds	r3, #1
    56c2:	e7f9      	b.n	56b8 <memmove+0xe>
    56c4:	5c8b      	ldrb	r3, [r1, r2]
    56c6:	5483      	strb	r3, [r0, r2]
    56c8:	3a01      	subs	r2, #1
    56ca:	d2fb      	bcs.n	56c4 <memmove+0x1a>
    56cc:	bd10      	pop	{r4, pc}

000056ce <_realloc_r>:
    56ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56d0:	0007      	movs	r7, r0
    56d2:	000d      	movs	r5, r1
    56d4:	0016      	movs	r6, r2
    56d6:	2900      	cmp	r1, #0
    56d8:	d105      	bne.n	56e6 <_realloc_r+0x18>
    56da:	0011      	movs	r1, r2
    56dc:	f7fe ff1c 	bl	4518 <_malloc_r>
    56e0:	0004      	movs	r4, r0
    56e2:	0020      	movs	r0, r4
    56e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56e6:	2a00      	cmp	r2, #0
    56e8:	d103      	bne.n	56f2 <_realloc_r+0x24>
    56ea:	f7fe fecb 	bl	4484 <_free_r>
    56ee:	0034      	movs	r4, r6
    56f0:	e7f7      	b.n	56e2 <_realloc_r+0x14>
    56f2:	f000 f81e 	bl	5732 <_malloc_usable_size_r>
    56f6:	002c      	movs	r4, r5
    56f8:	4286      	cmp	r6, r0
    56fa:	d9f2      	bls.n	56e2 <_realloc_r+0x14>
    56fc:	0031      	movs	r1, r6
    56fe:	0038      	movs	r0, r7
    5700:	f7fe ff0a 	bl	4518 <_malloc_r>
    5704:	1e04      	subs	r4, r0, #0
    5706:	d0ec      	beq.n	56e2 <_realloc_r+0x14>
    5708:	0029      	movs	r1, r5
    570a:	0032      	movs	r2, r6
    570c:	f7fe fea8 	bl	4460 <memcpy>
    5710:	0029      	movs	r1, r5
    5712:	0038      	movs	r0, r7
    5714:	f7fe feb6 	bl	4484 <_free_r>
    5718:	e7e3      	b.n	56e2 <_realloc_r+0x14>

0000571a <__ascii_wctomb>:
    571a:	1e0b      	subs	r3, r1, #0
    571c:	d004      	beq.n	5728 <__ascii_wctomb+0xe>
    571e:	2aff      	cmp	r2, #255	; 0xff
    5720:	d904      	bls.n	572c <__ascii_wctomb+0x12>
    5722:	238a      	movs	r3, #138	; 0x8a
    5724:	6003      	str	r3, [r0, #0]
    5726:	3b8b      	subs	r3, #139	; 0x8b
    5728:	0018      	movs	r0, r3
    572a:	4770      	bx	lr
    572c:	700a      	strb	r2, [r1, #0]
    572e:	2301      	movs	r3, #1
    5730:	e7fa      	b.n	5728 <__ascii_wctomb+0xe>

00005732 <_malloc_usable_size_r>:
    5732:	1f0b      	subs	r3, r1, #4
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	1f18      	subs	r0, r3, #4
    5738:	2b00      	cmp	r3, #0
    573a:	da01      	bge.n	5740 <_malloc_usable_size_r+0xe>
    573c:	580b      	ldr	r3, [r1, r0]
    573e:	18c0      	adds	r0, r0, r3
    5740:	4770      	bx	lr
    5742:	0000      	movs	r0, r0
    5744:	00000d06 	.word	0x00000d06
    5748:	000013ae 	.word	0x000013ae
    574c:	000013ae 	.word	0x000013ae
    5750:	000013ae 	.word	0x000013ae
    5754:	000013ae 	.word	0x000013ae
    5758:	000013ae 	.word	0x000013ae
    575c:	000013ae 	.word	0x000013ae
    5760:	000013ae 	.word	0x000013ae
    5764:	000013ae 	.word	0x000013ae
    5768:	000013ae 	.word	0x000013ae
    576c:	000013ae 	.word	0x000013ae
    5770:	000013ae 	.word	0x000013ae
    5774:	000013ae 	.word	0x000013ae
    5778:	000013ae 	.word	0x000013ae
    577c:	000013ae 	.word	0x000013ae
    5780:	000013ae 	.word	0x000013ae
    5784:	000013ae 	.word	0x000013ae
    5788:	000013ae 	.word	0x000013ae
    578c:	000013ae 	.word	0x000013ae
    5790:	000013ae 	.word	0x000013ae
    5794:	000013ae 	.word	0x000013ae
    5798:	000013ae 	.word	0x000013ae
    579c:	000013ae 	.word	0x000013ae
    57a0:	000013ae 	.word	0x000013ae
    57a4:	000013ae 	.word	0x000013ae
    57a8:	000013ae 	.word	0x000013ae
    57ac:	000013ae 	.word	0x000013ae
    57b0:	000013ae 	.word	0x000013ae
    57b4:	000013ae 	.word	0x000013ae
    57b8:	000013ae 	.word	0x000013ae
    57bc:	000013ae 	.word	0x000013ae
    57c0:	000013ae 	.word	0x000013ae
    57c4:	000013ae 	.word	0x000013ae
    57c8:	00000eae 	.word	0x00000eae
    57cc:	000013ae 	.word	0x000013ae
    57d0:	00000eba 	.word	0x00000eba
    57d4:	000013ae 	.word	0x000013ae
    57d8:	000013ae 	.word	0x000013ae
    57dc:	000013ae 	.word	0x000013ae
    57e0:	000013ae 	.word	0x000013ae
    57e4:	000013ae 	.word	0x000013ae
    57e8:	000013ae 	.word	0x000013ae
    57ec:	000013ae 	.word	0x000013ae
    57f0:	000013ae 	.word	0x000013ae
    57f4:	000013ae 	.word	0x000013ae
    57f8:	000013ae 	.word	0x000013ae
    57fc:	000013ae 	.word	0x000013ae
    5800:	000013ae 	.word	0x000013ae
    5804:	000013ae 	.word	0x000013ae
    5808:	000013ae 	.word	0x000013ae
    580c:	00001246 	.word	0x00001246
    5810:	000013ae 	.word	0x000013ae
    5814:	0000123a 	.word	0x0000123a
    5818:	00000e08 	.word	0x00000e08
    581c:	000013ae 	.word	0x000013ae
    5820:	000013ae 	.word	0x000013ae
    5824:	000011bc 	.word	0x000011bc
    5828:	000013ae 	.word	0x000013ae
    582c:	00000e48 	.word	0x00000e48
    5830:	000013ae 	.word	0x000013ae
    5834:	000013ae 	.word	0x000013ae
    5838:	00000d34 	.word	0x00000d34
    583c:	000013ae 	.word	0x000013ae
    5840:	000013ae 	.word	0x000013ae
    5844:	00000e42 	.word	0x00000e42
    5848:	000013ae 	.word	0x000013ae
    584c:	00000e02 	.word	0x00000e02
    5850:	000013ae 	.word	0x000013ae
    5854:	000013ae 	.word	0x000013ae
    5858:	000013ae 	.word	0x000013ae
    585c:	00000fee 	.word	0x00000fee
    5860:	000013ae 	.word	0x000013ae
    5864:	000012d0 	.word	0x000012d0
    5868:	00000fa0 	.word	0x00000fa0
    586c:	000012f2 	.word	0x000012f2
    5870:	000013ae 	.word	0x000013ae
    5874:	000013ae 	.word	0x000013ae
    5878:	000013ae 	.word	0x000013ae
    587c:	00001020 	.word	0x00001020
    5880:	00001158 	.word	0x00001158
    5884:	0000118a 	.word	0x0000118a
    5888:	00001316 	.word	0x00001316
    588c:	000013ae 	.word	0x000013ae
    5890:	000013ae 	.word	0x000013ae
    5894:	000013ae 	.word	0x000013ae
    5898:	000013ae 	.word	0x000013ae
    589c:	000013ae 	.word	0x000013ae
    58a0:	00000ec6 	.word	0x00000ec6
    58a4:	000013ae 	.word	0x000013ae
    58a8:	00000e74 	.word	0x00000e74
    58ac:	000013ae 	.word	0x000013ae
    58b0:	000013ae 	.word	0x000013ae
    58b4:	000013ae 	.word	0x000013ae
    58b8:	000013ae 	.word	0x000013ae
    58bc:	000013ae 	.word	0x000013ae
    58c0:	00000d3c 	.word	0x00000d3c
    58c4:	000013ae 	.word	0x000013ae
    58c8:	000013ae 	.word	0x000013ae
    58cc:	00000e24 	.word	0x00000e24
    58d0:	000011fc 	.word	0x000011fc
    58d4:	000013ae 	.word	0x000013ae
    58d8:	000013ae 	.word	0x000013ae
    58dc:	00000f06 	.word	0x00000f06
    58e0:	000013ae 	.word	0x000013ae
    58e4:	00000f78 	.word	0x00000f78
    58e8:	000011f0 	.word	0x000011f0
    58ec:	000013ae 	.word	0x000013ae
    58f0:	000013ae 	.word	0x000013ae
    58f4:	0000125e 	.word	0x0000125e
    58f8:	00000e52 	.word	0x00000e52
    58fc:	00000f84 	.word	0x00000f84
    5900:	000013ae 	.word	0x000013ae
    5904:	000013ae 	.word	0x000013ae
    5908:	000013ae 	.word	0x000013ae
    590c:	000013ae 	.word	0x000013ae
    5910:	000013ae 	.word	0x000013ae
    5914:	00000e1e 	.word	0x00000e1e

00005918 <flash_addr>:
    5918:	00030600                                ....

0000591c <nibble_hex>:
    591c:	33323130 37363534 62613938 66656463     0123456789abcdef
    592c:	69646942 74636572 616e6f69 614d206c     Bidirectional Ma
    593c:	72657473 0000000a 69646942 74636572     ster....Bidirect
    594c:	616e6f69 6c53206c 3a657661 61635320     ional Slave: Sca
    595c:	6e696e6e 00000a67 69646942 74636572     nning...Bidirect
    596c:	616e6f69 6c53206c 3a657661 636f4c20     ional Slave: Loc
    597c:	0a64656b 00000000 4d205852 3a65646f     ked.....RX Mode:
    598c:	61637320 6e696e6e 00000a67 4d205852      scanning...RX M
    599c:	3a65646f 636f6c20 0a64656b 00000000     ode: locked.....
    59ac:	4d205854 0a65646f 00000000 74617473     TX Mode.....stat
    59bc:	65637845 6f697470 203d206e 000a6425     Exception = %d..
    59cc:	72617073 73614c6b 746e4974 25203d20     sparkLastInt = %
    59dc:	00000a64 74617473 6b6e694c 74736f4c     d...statLinkLost
    59ec:	25203d20 00000a64 74617473 646e6553      = %d...statSend
    59fc:	6b636150 20737465 6425203d 0000000a     Packets = %d....
    5a0c:	74617473 65636552 64657669 6b636150     statReceivedPack
    5a1c:	20737465 6425203d 0000000a 74617473     ets = %d....stat
    5a2c:	7373694d 50676e69 656b6361 3d207374     MissingPackets =
    5a3c:	0a642520 00000000 74617473 456d754e      %d.....statNumE
    5a4c:	726f7272 203d2073 000a6425 50203e3d     rrors = %d..=> P
    5a5c:	3d205245 69203120 6425206e 0000000a     ER = 1 in %d....
    5a6c:	42203e3d 3d205245 69203120 6425206e     => BER = 1 in %d
    5a7c:	0000000a 72652030 73726f72 6425203a     ....0 errors: %d
    5a8c:	63617020 7374656b 64252820 0a292525      packets (%d%%).
    5a9c:	00000000 72652032 73726f72 6425203a     ....2 errors: %d
    5aac:	63617020 7374656b 64252820 0a292525      packets (%d%%).
    5abc:	00000000 20342d33 6f727265 203a7372     ....3-4 errors: 
    5acc:	70206425 656b6361 28207374 25256425     %d packets (%d%%
    5adc:	00000a29 20382d35 6f727265 203a7372     )...5-8 errors: 
    5aec:	70206425 656b6361 28207374 25256425     %d packets (%d%%
    5afc:	00000a29 35312d39 72726520 3a73726f     )...9-15 errors:
    5b0c:	20642520 6b636170 20737465 25642528      %d packets (%d%
    5b1c:	000a2925 332d3631 72652031 73726f72     %)..16-31 errors
    5b2c:	6425203a 63617020 7374656b 64252820     : %d packets (%d
    5b3c:	0a292525 00000000 32333d3e 72726520     %%).....>=32 err
    5b4c:	3a73726f 20642520 6b636170 20737465     ors: %d packets 
    5b5c:	25642528 000a2925 74617473 7473614c     (%d%%)..statLast
    5b6c:	49535352 6425203a 0000000a 74617473     RSSI: %d....stat
    5b7c:	7473614c 4953534e 6425203a 0000000a     LastNSSI: %d....
    5b8c:	74617473 7473614c 61575852 64657469     statLastRXWaited
    5b9c:	6425203a 0000000a 7473616c 6b6e694c     : %d....lastLink
    5bac:	6772614d 203a6e69 64206425 00000a42     Margin: %d dB...
    5bbc:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
    5bcc:	64252064 0000000a 62726556 2065736f     d %d....Verbose 
    5bdc:	65646f6d 0000000a 76453d3d 4b206c61     mode....==Eval K
    5bec:	3d3d7469 0000000a 54534942 69616620     it==....BIST fai
    5bfc:	0a64656c 00000000 6b6e696c 6b636150     led.....linkPack
    5c0c:	69537465 3d20657a 0a642520 00000000     etSize = %d.....
    5c1c:	6b6e696c 6b636150 61527465 3d206574     linkPacketRate =
    5c2c:	0a642520 00000000 6b6e696c 65656c53      %d.....linkSlee
    5c3c:	646f4d70 203d2065 0a642570 00000000     pMode = p%d.....
    5c4c:	6b6e696c 636e7953 64726f57 30203d20     linkSyncWord = 0
    5c5c:	34302578 000a7868 6b6e696c 61657250     x%04hx..linkPrea
    5c6c:	656c626d 657a6953 30203d20 32302578     mbleSize = 0x%02
    5c7c:	000a7868 6b6e696c 4e6e694d 764c696f     hx..linkMinNoiLv
    5c8c:	203d206c 30257830 0a786832 00000000     l = 0x%02hx.....
    5c9c:	6b6e696c 506e694d 6d416c75 203d2070     linkMinPulAmp = 
    5cac:	30257830 0a786832 00000000 6b6e696c     0x%02hx.....link
    5cbc:	536e694d 74536769 203d2072 30257830     MinSigStr = 0x%0
    5ccc:	0a786832 00000000 6b6e696c 69646942     2hx.....linkBidi
    5cdc:	74636572 616e6f69 203d206c 000a6425     rectional = %d..
    5cec:	6b6e696c 7473614d 3d207265 0a642520     linkMaster = %d.
    5cfc:	00000000 6b6e696c 646e6152 3d206d6f     ....linkRandom =
    5d0c:	0a642520 00000000 6b6e696c 69647541      %d.....linkAudi
    5d1c:	203d206f 000a6425 6b6e696c 6b73614d     o = %d..linkMask
    5d2c:	25203d20 78683230 68323025 32302578      = %02hx%02hx%02
    5d3c:	30257868 25786832 78683230 68323025     hx%02hx%02hx%02h
    5d4c:	32302578 30257868 25786832 78683230     x%02hx%02hx%02hx
    5d5c:	68323025 32302578 30257868 0a786832     %02hx%02hx%02hx.
    5d6c:	00000000 69647561 6365446f 74616d69     ....audioDecimat
    5d7c:	203d2065 000a6425 6e6e7552 20676e69     e = %d..Running 
    5d8c:	54534942 000a2e2e 656e6f64 0000000a     BIST....done....
    5d9c:	72617073 6c61436b 284c4c44 20295852     sparkCalDLL(RX) 
    5dac:	3025203d 0a786832 00000000 72617073     = %02hx.....spar
    5dbc:	6c61436b 284c4c44 20295854 3025203d     kCalDLL(TX) = %0
    5dcc:	0a786832 00000000 72617073 6c61436b     2hx.....sparkCal
    5ddc:	4f524356 29642528 25203d20 78683230     VCRO(%d) = %02hx
    5dec:	0000000a 72617453 61722074 206f6964     ....Start radio 
    5dfc:	0000000a 706f7453 64617220 0a206f69     ....Stop radio .
    5e0c:	00000000 45454c53 4f4e5f50 000a454e     ....SLEEP_NONE..
    5e1c:	45454c53 44495f50 000a454c 45454c53     SLEEP_IDLE..SLEE
    5e2c:	48535f50 4f4c4c41 00000a57 45454c53     P_SHALLOW...SLEE
    5e3c:	45445f50 000a5045 65736552 6e697474     P_DEEP..Resettin
    5e4c:	74732067 73697461 73636974 0000000a     g statistics....
    5e5c:	78683225 00000000 69646942 74636572     %2hx....Bidirect
    5e6c:	616e6f69 6f6d206c 000a6564 74617453     ional mode..Stat
    5e7c:	69747369 0a3a7363 00000000 74697257     istics:.....Writ
    5e8c:	20676e69 73616c46 00000a68 64616552     ing Flash...Read
    5e9c:	20676e69 73616c46 00000a68 746c6f56     ing Flash...Volt
    5eac:	20656761 3a746573 00000020 38302e31     age set: ...1.08
    5ebc:	00000a56 33302e31 00000a56 34302e31     V...1.03V...1.04
    5ecc:	00000a56 37392e30 00000a56 6d205852     V...0.97V...RX m
    5edc:	0a65646f 00000000 6d205854 0a65646f     ode.....TX mode.
    5eec:	00000000 73257325 32302520 09207868     ....%s%s %02hx .
    5efc:	25732520 30252073 0a786832 00000000      %s%s %02hx.....
    5f0c:	000a3f3f 30303030 00000000 31303030     ??..0000....0001
    5f1c:	00000000 30313030 00000000 31313030     ....0010....0011
    5f2c:	00000000 30303130 00000000 31303130     ....0100....0101
    5f3c:	00000000 30313130 00000000 31313130     ....0110....0111
    5f4c:	00000000 30303031 00000000 31303031     ....1000....1001
    5f5c:	00000000 30313031 00000000 31313031     ....1010....1011
    5f6c:	00000000 30303131 00000000 31303131     ....1100....1101
    5f7c:	00000000 30313131 00000000 31313131     ....1110....1111
    5f8c:	00000000                                ....

00005f90 <crc8_table>:
    5f90:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
    5fa0:	797e7770 65626b6c 41464f48 5d5a5354     pw~ylkbeHOFATSZ]
    5fb0:	e9eee7e0 f5f2fbfc d1d6dfd8 cdcac3c4     ................
    5fc0:	999e9790 85828b8c a1a6afa8 bdbab3b4     ................
    5fd0:	cec9c0c7 d2d5dcdb f6f1f8ff eaede4e3     ................
    5fe0:	beb9b0b7 a2a5acab 8681888f 9a9d9493     ................
    5ff0:	2e292027 32353c3b 1611181f 0a0d0403     ' ).;<52........
    6000:	5e595057 42454c4b 6661686f 7a7d7473     WPY^KLEBohafst}z
    6010:	80878e89 9c9b9295 b8bfb6b1 a4a3aaad     ................
    6020:	f0f7fef9 ecebe2e5 c8cfc6c1 d4d3dadd     ................
    6030:	60676e69 7c7b7275 585f5651 44434a4d     ing`ur{|QV_XMJCD
    6040:	10171e19 0c0b0205 282f2621 34333a3d     ........!&/(=:34
    6050:	4740494e 5b5c5552 7f787176 63646d6a     NI@GRU\[vqx.jmdc
    6060:	3730393e 2b2c2522 0f080106 13141d1a     >907"%,+........
    6070:	a7a0a9ae bbbcb5b2 9f989196 83848d8a     ................
    6080:	d7d0d9de cbccc5c2 efe8e1e6 f3f4fdfa     ................

00006090 <aTrellisTransitionInput>:
    6090:	01000100 01000100                       ........

00006098 <aTrellisTransitionOutput>:
    6098:	00030300 01020201 03000003 02010102     ................

000060a8 <aTrellisSourceStateLut>:
    60a8:	04000400 05010501 06020602 07030703     ................
    60b8:	69647541 5854206f 6e657320 202f2074     Audio TX sent / 
    60c8:	65736572 2f20746e 65736920 7974706d     resent / isempty
    60d8:	203d2020 2f206425 20642520 6425202f       = %d / %d / %d
    60e8:	00000a20 69647541 5852206f 65722020      ...Audio RX  re
    60f8:	76696563 2f206465 70756420 6163696c     ceived / duplica
    6108:	2f206574 73696d20 676e6973 72202f20     te / missing / r
    6118:	63656a65 20646574 6425203d 25202f20     ejected = %d / %
    6128:	202f2064 2f206425 0a642520 00000000     d / %d / %d.....
    6138:	62205852 25206675 54202c64 75622058     RX buf %d, TX bu
    6148:	64252066 0000000a                       f %d....

00006150 <gentrcl.11363>:
    6150:	00290806                                ..).

00006154 <gentrcl.11367>:
    6154:	00210806                                ..!.

00006158 <ctrla.11273>:
    6158:	0013000c                                ....

0000615c <wrconfig.11275>:
    615c:	d201000b                                ....

00006160 <xosc32k.11350>:
    6160:	0000004e                                N...

00006164 <xosc.11351>:
    6164:	0000f446                                F...

00006168 <dpllctrla.11352>:
    6168:	00000042                                B...

0000616c <gendiv.11355>:
    616c:	00000206                                ....

00006170 <gentrcl.11356>:
    6170:	00290806                                ..).

00006174 <gentrcl2.11358>:
    6174:	00290802                                ..).

00006178 <wrconfig.11359>:
    6178:	d7010040                                @...

0000617c <wrconfig.11811>:
    617c:	50010008 00006425                       ...P%d..

00006184 <rev_lookup>:
    6184:	0c040800 0e060a02 0d050901 0f070b03     ................
    6194:	2e495053 0000002e 4c494146 0000000a     SPI.....FAIL....
    61a4:	000a4b4f 5f55434d 2e544e49 0000002e     OK..MCU_INT.....
    61b4:	5f464552 44525750 00002e2e 5f4c4c50     REF_PWRD....PLL_
    61c4:	44525750 00002e2e 43444344 5257505f     PWRD....DCDC_PWR
    61d4:	002e2e44 5f4c4c44 44525750 00002e2e     D...DLL_PWRD....
    61e4:	33323130 37363534 42413938 47464443     0123456789ABCDFG
    61f4:	4c4b4a48 51504e4d 56545352 5a595857     HJKLMNPQRSTVWXYZ
    6204:	00000000                                ....

00006208 <msft_compatible>:
    6208:	00000028 00040100 00000001 00000000     (...............
    6218:	69570100 4253556e 00000000 00000000     ..WinUSB........
	...

00006230 <msft_extended>:
    6230:	0000008e 00050100 00840001 00010000     ................
    6240:	00280000 00650044 00690076 00650063     ..(.D.e.v.i.c.e.
    6250:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
    6260:	00470065 00490055 00000044 0000004e     e.G.U.I.D...N...
    6270:	0033007b 00330063 00620033 00660062     {.3.c.3.3.b.b.f.
    6280:	002d0064 00310037 00390066 0034002d     d.-.7.1.f.9.-.4.
    6290:	00310038 002d0035 00620038 00660038     8.1.5.-.8.b.8.f.
    62a0:	0037002d 00640063 00650031 00390066     -.7.c.d.1.e.f.9.
    62b0:	00380032 00330062 007d0064 00000000     2.8.b.3.d.}.....

000062c0 <devDesc>:
    62c0:	02000112 40000000 204003eb 02010100     .......@..@ ....
    62d0:	00000103                                ....

000062d4 <confDesc>:
    62d4:	00200209 80040101 00040932 00000200     .. .....2.......
    62e4:	05070500 00400301 81050714 14004003     ......@......@..

000062f4 <langDesc>:
    62f4:	04090304                                ....

000062f8 <msft_os>:
    62f8:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
    6308:	0000002e                                ....

0000630c <usb_num_endpoints>:
    630c:	00000008 454d5441 535b204c 6b726170     ....ATMEL [Spark
    631c:	72696620 7261776d 00005d65 556e6957      firmware]..WinU
    632c:	74204253 20747365 69766564 00006563     SB test device..
    633c:	666e6f43 72756769 6f697461 7473206e     Configuration st
    634c:	676e6972 73656420 70697263 00726f74     ring descriptor.
    635c:	65746e49 63616672 74732065 676e6972     Interface string
    636c:	73656420 70697263 00726f74 00003e1a      descriptor..>..
    637c:	00003e2e 00003ef2 00003e2e 00003ef2     .>...>...>...>..
    638c:	00003e3a 00003e46 00003ef2 00003e98     :>..F>...>...>..
    639c:	00003eac 00003ef2 00003ed2 2b302d23     .>...>...>..#-0+
    63ac:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    63bc:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    63cc:	35343332 39383736 64636261 00006665     23456789abcdef..
    63dc:	000063fa 000063fd 00006400 61462d41     .c...c...d..A-Fa
    63ec:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    63fc:	00303000 00005878                       .00.xX..

00006404 <__sf_fake_stderr>:
	...

00006424 <__sf_fake_stdin>:
	...

00006444 <__sf_fake_stdout>:
	...
    6464:	4f500043 00584953 2000002e                       C.POSIX...

0000646e <_ctype_>:
    646e:	20202000 20202020 28282020 20282828     .         ((((( 
    647e:	20202020 20202020 20202020 20202020                     
    648e:	10108820 10101010 10101010 10101010      ...............
    649e:	04040410 04040404 10040404 10101010     ................
    64ae:	41411010 41414141 01010101 01010101     ..AAAAAA........
    64be:	01010101 01010101 01010101 10101010     ................
    64ce:	42421010 42424242 02020202 02020202     ..BBBBBB........
    64de:	02020202 02020202 02020202 10101010     ................
    64ee:	00000020 00000000 00000000 00000000      ...............
	...

00006570 <_init>:
    6570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6572:	46c0      	nop			; (mov r8, r8)
    6574:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6576:	bc08      	pop	{r3}
    6578:	469e      	mov	lr, r3
    657a:	4770      	bx	lr

0000657c <__init_array_start>:
    657c:	000000dd 	.word	0x000000dd

00006580 <_fini>:
    6580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6586:	bc08      	pop	{r3}
    6588:	469e      	mov	lr, r3
    658a:	4770      	bx	lr

0000658c <__fini_array_start>:
    658c:	000000b5 	.word	0x000000b5
