
DEVICE_EXAMPLE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000104  20000000  000061c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000740  20000104  000062c8  00020104  2**2
                  ALLOC
  3 .stack        00002004  20000844  00006a08  00020104  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00044185  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d5e  00000000  00000000  0006430a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000947b  00000000  00000000  0006a068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a98  00000000  00000000  000734e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ee0  00000000  00000000  00073f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000200e2  00000000  00000000  00074e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015f36  00000000  00000000  00094f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094cb0  00000000  00000000  000aae73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ba4  00000000  00000000  0013fb24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 28 00 20 f5 41 00 00 f1 41 00 00 f1 41 00 00     H(. .A...A...A..
	...
      2c:	f1 41 00 00 00 00 00 00 00 00 00 00 f1 41 00 00     .A...........A..
      3c:	f1 41 00 00 f1 41 00 00 f1 41 00 00 f1 41 00 00     .A...A...A...A..
      4c:	45 02 00 00 65 1a 00 00 f1 41 00 00 f1 41 00 00     E...e....A...A..
      5c:	19 3a 00 00 f1 41 00 00 f1 41 00 00 f1 41 00 00     .:...A...A...A..
      6c:	f1 41 00 00 f1 41 00 00 f1 41 00 00 f1 41 00 00     .A...A...A...A..
      7c:	f1 41 00 00 f1 41 00 00 f1 41 00 00 69 01 00 00     .A...A...A..i...
      8c:	f1 41 00 00 f1 41 00 00 f1 41 00 00 f1 41 00 00     .A...A...A...A..
      9c:	f1 41 00 00 f1 41 00 00 f1 41 00 00 f1 41 00 00     .A...A...A...A..
      ac:	f1 41 00 00 00 00 00 00                             .A......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000104 	.word	0x20000104
      d4:	00000000 	.word	0x00000000
      d8:	000061c4 	.word	0x000061c4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000108 	.word	0x20000108
     108:	000061c4 	.word	0x000061c4
     10c:	000061c4 	.word	0x000061c4
     110:	00000000 	.word	0x00000000

00000114 <TurnLightOn>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     114:	2280      	movs	r2, #128	; 0x80
     116:	05d2      	lsls	r2, r2, #23
     118:	4b01      	ldr	r3, [pc, #4]	; (120 <TurnLightOn+0xc>)
     11a:	615a      	str	r2, [r3, #20]
}

static void TurnLightOn(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	41004480 	.word	0x41004480

00000124 <TurnLightOff>:
		port_base->OUTSET.reg = pin_mask;
     124:	2280      	movs	r2, #128	; 0x80
     126:	05d2      	lsls	r2, r2, #23
     128:	4b01      	ldr	r3, [pc, #4]	; (130 <TurnLightOff+0xc>)
     12a:	619a      	str	r2, [r3, #24]

static void TurnLightOff(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	41004480 	.word	0x41004480

00000134 <TurnLightOn1>:
		port_base->OUTCLR.reg = pin_mask;
     134:	2280      	movs	r2, #128	; 0x80
     136:	05d2      	lsls	r2, r2, #23
     138:	4b01      	ldr	r3, [pc, #4]	; (140 <TurnLightOn1+0xc>)
     13a:	615a      	str	r2, [r3, #20]

static void TurnLightOn1(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
}
     13c:	4770      	bx	lr
     13e:	46c0      	nop			; (mov r8, r8)
     140:	41004480 	.word	0x41004480

00000144 <TurnLightOff1>:
		port_base->OUTSET.reg = pin_mask;
     144:	2280      	movs	r2, #128	; 0x80
     146:	05d2      	lsls	r2, r2, #23
     148:	4b01      	ldr	r3, [pc, #4]	; (150 <TurnLightOff1+0xc>)
     14a:	619a      	str	r2, [r3, #24]

static void TurnLightOff1(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
}
     14c:	4770      	bx	lr
     14e:	46c0      	nop			; (mov r8, r8)
     150:	41004480 	.word	0x41004480

00000154 <Get_time>:

void Get_time(){
     154:	b510      	push	{r4, lr}
	key = keypadScan();
     156:	4b02      	ldr	r3, [pc, #8]	; (160 <Get_time+0xc>)
     158:	4798      	blx	r3
     15a:	4b02      	ldr	r3, [pc, #8]	; (164 <Get_time+0x10>)
     15c:	7018      	strb	r0, [r3, #0]
}
     15e:	bd10      	pop	{r4, pc}
     160:	00000b2d 	.word	0x00000b2d
     164:	200003f8 	.word	0x200003f8

00000168 <TC3_Handler>:

void TC3_Handler(void)
{	
     168:	b570      	push	{r4, r5, r6, lr}
	if(!timeset)
     16a:	4b29      	ldr	r3, [pc, #164]	; (210 <TC3_Handler+0xa8>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d046      	beq.n	200 <TC3_Handler+0x98>
			
	}
	else
	{
		//Print Data to LCD screen
		if(TC3->COUNT16.INTFLAG.bit.MC0)
     172:	4b28      	ldr	r3, [pc, #160]	; (214 <TC3_Handler+0xac>)
     174:	7b9b      	ldrb	r3, [r3, #14]
     176:	06db      	lsls	r3, r3, #27
     178:	d40c      	bmi.n	194 <TC3_Handler+0x2c>
			}
		}
	}
	
	// Get values from Sensors
	if(TC3->COUNT16.INTFLAG.bit.OVF)
     17a:	4b26      	ldr	r3, [pc, #152]	; (214 <TC3_Handler+0xac>)
     17c:	7b9b      	ldrb	r3, [r3, #14]
     17e:	07db      	lsls	r3, r3, #31
     180:	d507      	bpl.n	192 <TC3_Handler+0x2a>
	{
		if(!timeset)
			Get_time();
		else{
		temp1 =  Si7021_GetTemp();
     182:	4b25      	ldr	r3, [pc, #148]	; (218 <TC3_Handler+0xb0>)
     184:	4798      	blx	r3
     186:	4b25      	ldr	r3, [pc, #148]	; (21c <TC3_Handler+0xb4>)
     188:	6018      	str	r0, [r3, #0]
		RH1 =    Si7021_GetRH();
     18a:	4b25      	ldr	r3, [pc, #148]	; (220 <TC3_Handler+0xb8>)
     18c:	4798      	blx	r3
     18e:	4b25      	ldr	r3, [pc, #148]	; (224 <TC3_Handler+0xbc>)
     190:	6018      	str	r0, [r3, #0]
		}
	}
	
}
     192:	bd70      	pop	{r4, r5, r6, pc}
			i2cLcdprintNum(currentTask,0,26);
     194:	4b24      	ldr	r3, [pc, #144]	; (228 <TC3_Handler+0xc0>)
     196:	7818      	ldrb	r0, [r3, #0]
     198:	221a      	movs	r2, #26
     19a:	2100      	movs	r1, #0
     19c:	4d23      	ldr	r5, [pc, #140]	; (22c <TC3_Handler+0xc4>)
     19e:	47a8      	blx	r5
			i2cLcdprintNum(RH1,0,36);
     1a0:	4b20      	ldr	r3, [pc, #128]	; (224 <TC3_Handler+0xbc>)
     1a2:	7818      	ldrb	r0, [r3, #0]
     1a4:	2224      	movs	r2, #36	; 0x24
     1a6:	2100      	movs	r1, #0
     1a8:	47a8      	blx	r5
			rtc_calendar_get_time(&myTime);
     1aa:	4c21      	ldr	r4, [pc, #132]	; (230 <TC3_Handler+0xc8>)
     1ac:	0020      	movs	r0, r4
     1ae:	4b21      	ldr	r3, [pc, #132]	; (234 <TC3_Handler+0xcc>)
     1b0:	4798      	blx	r3
			i2cLcdprintNum(myTime.hour,0,6);
     1b2:	78a0      	ldrb	r0, [r4, #2]
     1b4:	2206      	movs	r2, #6
     1b6:	2100      	movs	r1, #0
     1b8:	47a8      	blx	r5
			i2cLcdprintNum(myTime.minute,0,9);
     1ba:	7860      	ldrb	r0, [r4, #1]
     1bc:	2209      	movs	r2, #9
     1be:	2100      	movs	r1, #0
     1c0:	47a8      	blx	r5
			if(myTime.pm)
     1c2:	78e3      	ldrb	r3, [r4, #3]
     1c4:	2b00      	cmp	r3, #0
     1c6:	d011      	beq.n	1ec <TC3_Handler+0x84>
				str[0]='A';
     1c8:	4a1b      	ldr	r2, [pc, #108]	; (238 <TC3_Handler+0xd0>)
     1ca:	2341      	movs	r3, #65	; 0x41
     1cc:	7013      	strb	r3, [r2, #0]
				str[1]='M';
     1ce:	330c      	adds	r3, #12
     1d0:	7053      	strb	r3, [r2, #1]
				i2cLcdPrint(0,12,str);
     1d2:	210c      	movs	r1, #12
     1d4:	2000      	movs	r0, #0
     1d6:	4b19      	ldr	r3, [pc, #100]	; (23c <TC3_Handler+0xd4>)
     1d8:	4798      	blx	r3
	if(TC3->COUNT16.INTFLAG.bit.OVF)
     1da:	4b0e      	ldr	r3, [pc, #56]	; (214 <TC3_Handler+0xac>)
     1dc:	7b9b      	ldrb	r3, [r3, #14]
     1de:	07db      	lsls	r3, r3, #31
     1e0:	d5d7      	bpl.n	192 <TC3_Handler+0x2a>
		if(!timeset)
     1e2:	4b0b      	ldr	r3, [pc, #44]	; (210 <TC3_Handler+0xa8>)
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	2b00      	cmp	r3, #0
     1e8:	d1cb      	bne.n	182 <TC3_Handler+0x1a>
     1ea:	e00d      	b.n	208 <TC3_Handler+0xa0>
				str[0]='P';
     1ec:	4a12      	ldr	r2, [pc, #72]	; (238 <TC3_Handler+0xd0>)
     1ee:	2350      	movs	r3, #80	; 0x50
     1f0:	7013      	strb	r3, [r2, #0]
				str[1]='M';
     1f2:	3b03      	subs	r3, #3
     1f4:	7053      	strb	r3, [r2, #1]
				i2cLcdPrint(0,12,str);
     1f6:	210c      	movs	r1, #12
     1f8:	2000      	movs	r0, #0
     1fa:	4b10      	ldr	r3, [pc, #64]	; (23c <TC3_Handler+0xd4>)
     1fc:	4798      	blx	r3
     1fe:	e7ec      	b.n	1da <TC3_Handler+0x72>
	if(TC3->COUNT16.INTFLAG.bit.OVF)
     200:	4b04      	ldr	r3, [pc, #16]	; (214 <TC3_Handler+0xac>)
     202:	7b9b      	ldrb	r3, [r3, #14]
     204:	07db      	lsls	r3, r3, #31
     206:	d5c4      	bpl.n	192 <TC3_Handler+0x2a>
			Get_time();
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <TC3_Handler+0xd8>)
     20a:	4798      	blx	r3
     20c:	e7c1      	b.n	192 <TC3_Handler+0x2a>
     20e:	46c0      	nop			; (mov r8, r8)
     210:	20000000 	.word	0x20000000
     214:	42002c00 	.word	0x42002c00
     218:	0000478d 	.word	0x0000478d
     21c:	200003f4 	.word	0x200003f4
     220:	0000482d 	.word	0x0000482d
     224:	20000400 	.word	0x20000400
     228:	200003c0 	.word	0x200003c0
     22c:	00000d21 	.word	0x00000d21
     230:	200003b4 	.word	0x200003b4
     234:	00001001 	.word	0x00001001
     238:	200003fc 	.word	0x200003fc
     23c:	00000bf9 	.word	0x00000bf9
     240:	00000155 	.word	0x00000155

00000244 <RTC_Handler>:

void RTC_Handler(void)
{
     244:	b510      	push	{r4, lr}
	//Execute task
	myTask1[currentTask].cb(&myTask1[currentTask]);
     246:	4c10      	ldr	r4, [pc, #64]	; (288 <RTC_Handler+0x44>)
     248:	7823      	ldrb	r3, [r4, #0]
     24a:	4a10      	ldr	r2, [pc, #64]	; (28c <RTC_Handler+0x48>)
     24c:	009b      	lsls	r3, r3, #2
     24e:	18d0      	adds	r0, r2, r3
     250:	589b      	ldr	r3, [r3, r2]
     252:	4798      	blx	r3
	
	//Set next alarm for task
	currentTask++;
     254:	7820      	ldrb	r0, [r4, #0]
     256:	3001      	adds	r0, #1
     258:	b2c3      	uxtb	r3, r0
     25a:	7023      	strb	r3, [r4, #0]
	rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     25c:	0058      	lsls	r0, r3, #1
     25e:	18c0      	adds	r0, r0, r3
     260:	0080      	lsls	r0, r0, #2
     262:	4b0b      	ldr	r3, [pc, #44]	; (290 <RTC_Handler+0x4c>)
     264:	18c0      	adds	r0, r0, r3
     266:	4b0b      	ldr	r3, [pc, #44]	; (294 <RTC_Handler+0x50>)
     268:	4798      	blx	r3
	
	//if all task completed: go back to first task
	if (currentTask == NUM_SCHEDULED_TASKS)
     26a:	7823      	ldrb	r3, [r4, #0]
     26c:	2b04      	cmp	r3, #4
     26e:	d003      	beq.n	278 <RTC_Handler+0x34>
		currentTask = 0;	
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
	}
	
	//clear interupt alarm0 flag
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM0;
     270:	2201      	movs	r2, #1
     272:	4b09      	ldr	r3, [pc, #36]	; (298 <RTC_Handler+0x54>)
     274:	721a      	strb	r2, [r3, #8]
}
     276:	bd10      	pop	{r4, pc}
		currentTask = 0;	
     278:	2200      	movs	r2, #0
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <RTC_Handler+0x44>)
     27c:	701a      	strb	r2, [r3, #0]
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     27e:	4804      	ldr	r0, [pc, #16]	; (290 <RTC_Handler+0x4c>)
     280:	4b04      	ldr	r3, [pc, #16]	; (294 <RTC_Handler+0x50>)
     282:	4798      	blx	r3
     284:	e7f4      	b.n	270 <RTC_Handler+0x2c>
     286:	46c0      	nop			; (mov r8, r8)
     288:	200003c0 	.word	0x200003c0
     28c:	20000120 	.word	0x20000120
     290:	200003c4 	.word	0x200003c4
     294:	00001071 	.word	0x00001071
     298:	40001400 	.word	0x40001400

0000029c <Schedule_config>:

void Schedule_config(){
     29c:	b530      	push	{r4, r5, lr}
	//Configure your schedule here, Use as many tasks as 
	mySchedule[0].hour = 8;
     29e:	4b0f      	ldr	r3, [pc, #60]	; (2dc <Schedule_config+0x40>)
     2a0:	2408      	movs	r4, #8
     2a2:	709c      	strb	r4, [r3, #2]
	mySchedule[0].minute = 0;
     2a4:	2200      	movs	r2, #0
     2a6:	705a      	strb	r2, [r3, #1]
	mySchedule[0].pm = false;
     2a8:	70da      	strb	r2, [r3, #3]
	myTask1[index].cb = cb;
     2aa:	490d      	ldr	r1, [pc, #52]	; (2e0 <Schedule_config+0x44>)
     2ac:	480d      	ldr	r0, [pc, #52]	; (2e4 <Schedule_config+0x48>)
     2ae:	6008      	str	r0, [r1, #0]
	event_cb_register(TurnLightOn,0);

	mySchedule[1].hour = 5;
     2b0:	2005      	movs	r0, #5
     2b2:	7398      	strb	r0, [r3, #14]
	mySchedule[1].minute = 0;
     2b4:	735a      	strb	r2, [r3, #13]
	mySchedule[1].pm = true;
     2b6:	3804      	subs	r0, #4
     2b8:	73d8      	strb	r0, [r3, #15]
	myTask1[index].cb = cb;
     2ba:	4d0b      	ldr	r5, [pc, #44]	; (2e8 <Schedule_config+0x4c>)
     2bc:	604d      	str	r5, [r1, #4]
	event_cb_register(TurnLightOff,1);
	
	mySchedule[2].hour = 8;
     2be:	769c      	strb	r4, [r3, #26]
	mySchedule[2].minute = 0;
     2c0:	765a      	strb	r2, [r3, #25]
	mySchedule[2].pm = true;
     2c2:	76d8      	strb	r0, [r3, #27]
	myTask1[index].cb = cb;
     2c4:	4c09      	ldr	r4, [pc, #36]	; (2ec <Schedule_config+0x50>)
     2c6:	608c      	str	r4, [r1, #8]
	event_cb_register(TurnLightOn1,2);

	mySchedule[3].hour = 10;
     2c8:	250a      	movs	r5, #10
     2ca:	2426      	movs	r4, #38	; 0x26
     2cc:	551d      	strb	r5, [r3, r4]
	mySchedule[3].minute = 0;
     2ce:	3c01      	subs	r4, #1
     2d0:	551a      	strb	r2, [r3, r4]
	mySchedule[3].pm = true;
     2d2:	3227      	adds	r2, #39	; 0x27
     2d4:	5498      	strb	r0, [r3, r2]
	myTask1[index].cb = cb;
     2d6:	4b06      	ldr	r3, [pc, #24]	; (2f0 <Schedule_config+0x54>)
     2d8:	60cb      	str	r3, [r1, #12]
	event_cb_register(TurnLightOff1,3);
}
     2da:	bd30      	pop	{r4, r5, pc}
     2dc:	200003c4 	.word	0x200003c4
     2e0:	20000120 	.word	0x20000120
     2e4:	00000115 	.word	0x00000115
     2e8:	00000125 	.word	0x00000125
     2ec:	00000135 	.word	0x00000135
     2f0:	00000145 	.word	0x00000145

000002f4 <configApp>:

void configApp(){
     2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2f6:	b083      	sub	sp, #12
		//keypadInit();
		while(!timeset)
     2f8:	4b37      	ldr	r3, [pc, #220]	; (3d8 <configApp+0xe4>)
     2fa:	781c      	ldrb	r4, [r3, #0]
     2fc:	2c00      	cmp	r4, #0
     2fe:	d0fd      	beq.n	2fc <configApp+0x8>
		{
				
		}
		
		//temp:-- RH:--
		i2cLcdTemp();
     300:	4b36      	ldr	r3, [pc, #216]	; (3dc <configApp+0xe8>)
     302:	4798      	blx	r3
		i2cLcdRH();
     304:	4b36      	ldr	r3, [pc, #216]	; (3e0 <configApp+0xec>)
     306:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     308:	2280      	movs	r2, #128	; 0x80
     30a:	05d2      	lsls	r2, r2, #23
     30c:	4b35      	ldr	r3, [pc, #212]	; (3e4 <configApp+0xf0>)
     30e:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
		//set time
		myTime.hour      = 9;
     310:	4d35      	ldr	r5, [pc, #212]	; (3e8 <configApp+0xf4>)
     312:	2309      	movs	r3, #9
     314:	70ab      	strb	r3, [r5, #2]
		myTime.minute    = 0;
     316:	2300      	movs	r3, #0
     318:	706b      	strb	r3, [r5, #1]
		myTime.pm		= false;
     31a:	70eb      	strb	r3, [r5, #3]
		rtc_calendar_set_time(&myTime);	
     31c:	0028      	movs	r0, r5
     31e:	4b33      	ldr	r3, [pc, #204]	; (3ec <configApp+0xf8>)
     320:	4798      	blx	r3
		
		//configure Schedule
		Schedule_config();
     322:	4b33      	ldr	r3, [pc, #204]	; (3f0 <configApp+0xfc>)
     324:	4798      	blx	r3
		
		//Find the first task to execute (next scheduled task scheduled within 1 hour of current time)
		currentTask = 255;
     326:	22ff      	movs	r2, #255	; 0xff
     328:	4b32      	ldr	r3, [pc, #200]	; (3f4 <configApp+0x100>)
     32a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = (myTime.hour + 1); i <= 12; i++)
     32c:	78af      	ldrb	r7, [r5, #2]
     32e:	3701      	adds	r7, #1
     330:	b2ff      	uxtb	r7, r7
     332:	2f0c      	cmp	r7, #12
     334:	d81e      	bhi.n	374 <configApp+0x80>
		{
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
			{	
				if((mySchedule[j].hour == i) && (mySchedule[j].pm == myTime.pm))
     336:	4b2c      	ldr	r3, [pc, #176]	; (3e8 <configApp+0xf4>)
     338:	78de      	ldrb	r6, [r3, #3]
     33a:	2000      	movs	r0, #0
     33c:	23ff      	movs	r3, #255	; 0xff
     33e:	9300      	str	r3, [sp, #0]
void configApp(){
     340:	2100      	movs	r1, #0
				if((mySchedule[j].hour == i) && (mySchedule[j].pm == myTime.pm))
     342:	9401      	str	r4, [sp, #4]
     344:	e011      	b.n	36a <configApp+0x76>
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     346:	3301      	adds	r3, #1
     348:	b2db      	uxtb	r3, r3
     34a:	320c      	adds	r2, #12
     34c:	2b04      	cmp	r3, #4
     34e:	d008      	beq.n	362 <configApp+0x6e>
				if((mySchedule[j].hour == i) && (mySchedule[j].pm == myTime.pm))
     350:	7895      	ldrb	r5, [r2, #2]
     352:	42bd      	cmp	r5, r7
     354:	d1f7      	bne.n	346 <configApp+0x52>
     356:	78d5      	ldrb	r5, [r2, #3]
     358:	42b5      	cmp	r5, r6
     35a:	d1f4      	bne.n	346 <configApp+0x52>
     35c:	9801      	ldr	r0, [sp, #4]
				{
					currentTask = j;
     35e:	9300      	str	r3, [sp, #0]
     360:	e7f1      	b.n	346 <configApp+0x52>
		for(uint8_t i = (myTime.hour + 1); i <= 12; i++)
     362:	3701      	adds	r7, #1
     364:	b2ff      	uxtb	r7, r7
     366:	2f0d      	cmp	r7, #13
     368:	d002      	beq.n	370 <configApp+0x7c>
     36a:	4a23      	ldr	r2, [pc, #140]	; (3f8 <configApp+0x104>)
void configApp(){
     36c:	000b      	movs	r3, r1
     36e:	e7ef      	b.n	350 <configApp+0x5c>
     370:	2800      	cmp	r0, #0
     372:	d106      	bne.n	382 <configApp+0x8e>
		{
			for(int i = 0; i < 12; i++)
			{
				for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
				{
					if((mySchedule[j].hour == i) && (mySchedule[j].pm != myTime.pm))
     374:	4b1c      	ldr	r3, [pc, #112]	; (3e8 <configApp+0xf4>)
     376:	78d8      	ldrb	r0, [r3, #3]
     378:	4b1e      	ldr	r3, [pc, #120]	; (3f4 <configApp+0x100>)
     37a:	781e      	ldrb	r6, [r3, #0]
     37c:	2500      	movs	r5, #0
     37e:	2700      	movs	r7, #0
     380:	e016      	b.n	3b0 <configApp+0xbc>
     382:	4b1c      	ldr	r3, [pc, #112]	; (3f4 <configApp+0x100>)
     384:	9a00      	ldr	r2, [sp, #0]
     386:	701a      	strb	r2, [r3, #0]
		if(currentTask == 255)
     388:	2aff      	cmp	r2, #255	; 0xff
     38a:	d116      	bne.n	3ba <configApp+0xc6>
     38c:	e7f2      	b.n	374 <configApp+0x80>
				for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     38e:	3301      	adds	r3, #1
     390:	b2db      	uxtb	r3, r3
     392:	320c      	adds	r2, #12
     394:	2b04      	cmp	r3, #4
     396:	d008      	beq.n	3aa <configApp+0xb6>
					if((mySchedule[j].hour == i) && (mySchedule[j].pm != myTime.pm))
     398:	7891      	ldrb	r1, [r2, #2]
     39a:	42b9      	cmp	r1, r7
     39c:	d1f7      	bne.n	38e <configApp+0x9a>
     39e:	78d1      	ldrb	r1, [r2, #3]
     3a0:	4281      	cmp	r1, r0
     3a2:	d0f4      	beq.n	38e <configApp+0x9a>
     3a4:	0025      	movs	r5, r4
					{
						currentTask = j;
     3a6:	001e      	movs	r6, r3
     3a8:	e7f1      	b.n	38e <configApp+0x9a>
			for(int i = 0; i < 12; i++)
     3aa:	3701      	adds	r7, #1
     3ac:	2f0c      	cmp	r7, #12
     3ae:	d002      	beq.n	3b6 <configApp+0xc2>
     3b0:	4a11      	ldr	r2, [pc, #68]	; (3f8 <configApp+0x104>)
				if((mySchedule[j].hour == i) && (mySchedule[j].pm == myTime.pm))
     3b2:	2300      	movs	r3, #0
     3b4:	e7f0      	b.n	398 <configApp+0xa4>
     3b6:	2d00      	cmp	r5, #0
     3b8:	d10a      	bne.n	3d0 <configApp+0xdc>
					}
				}
			}
		}
					
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));	
     3ba:	4b0e      	ldr	r3, [pc, #56]	; (3f4 <configApp+0x100>)
     3bc:	781b      	ldrb	r3, [r3, #0]
     3be:	0058      	lsls	r0, r3, #1
     3c0:	18c0      	adds	r0, r0, r3
     3c2:	0080      	lsls	r0, r0, #2
     3c4:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <configApp+0x104>)
     3c6:	18c0      	adds	r0, r0, r3
     3c8:	4b0c      	ldr	r3, [pc, #48]	; (3fc <configApp+0x108>)
     3ca:	4798      	blx	r3
     3cc:	b003      	add	sp, #12
     3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <configApp+0x100>)
     3d2:	701e      	strb	r6, [r3, #0]
     3d4:	e7f1      	b.n	3ba <configApp+0xc6>
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	20000000 	.word	0x20000000
     3dc:	00000cb9 	.word	0x00000cb9
     3e0:	00000cf1 	.word	0x00000cf1
     3e4:	41004480 	.word	0x41004480
     3e8:	200003b4 	.word	0x200003b4
     3ec:	00001051 	.word	0x00001051
     3f0:	0000029d 	.word	0x0000029d
     3f4:	200003c0 	.word	0x200003c0
     3f8:	200003c4 	.word	0x200003c4
     3fc:	00001071 	.word	0x00001071

00000400 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     400:	4a02      	ldr	r2, [pc, #8]	; (40c <udi_cdc_comm_disable+0xc>)
     402:	7813      	ldrb	r3, [r2, #0]
     404:	3b01      	subs	r3, #1
     406:	b2db      	uxtb	r3, r3
     408:	7013      	strb	r3, [r2, #0]
}
     40a:	4770      	bx	lr
     40c:	2000013b 	.word	0x2000013b

00000410 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     410:	2000      	movs	r0, #0
     412:	4770      	bx	lr

00000414 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     414:	2000      	movs	r0, #0
     416:	4770      	bx	lr

00000418 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
     418:	4770      	bx	lr
	...

0000041c <udi_cdc_comm_enable>:
{
     41c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     41e:	2200      	movs	r2, #0
     420:	4b10      	ldr	r3, [pc, #64]	; (464 <udi_cdc_comm_enable+0x48>)
     422:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     424:	2100      	movs	r1, #0
     426:	4b10      	ldr	r3, [pc, #64]	; (468 <udi_cdc_comm_enable+0x4c>)
     428:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     42a:	4b10      	ldr	r3, [pc, #64]	; (46c <udi_cdc_comm_enable+0x50>)
     42c:	20a1      	movs	r0, #161	; 0xa1
     42e:	7018      	strb	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     430:	3881      	subs	r0, #129	; 0x81
     432:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     434:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     436:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     438:	381e      	subs	r0, #30
     43a:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     43c:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     43e:	4b0c      	ldr	r3, [pc, #48]	; (470 <udi_cdc_comm_enable+0x54>)
     440:	22e1      	movs	r2, #225	; 0xe1
     442:	0252      	lsls	r2, r2, #9
     444:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     446:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     448:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     44a:	2208      	movs	r2, #8
     44c:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
     44e:	2000      	movs	r0, #0
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <udi_cdc_comm_enable+0x58>)
     452:	4798      	blx	r3
     454:	2800      	cmp	r0, #0
     456:	d004      	beq.n	462 <udi_cdc_comm_enable+0x46>
	udi_cdc_nb_comm_enabled++;
     458:	4a02      	ldr	r2, [pc, #8]	; (464 <udi_cdc_comm_enable+0x48>)
     45a:	7813      	ldrb	r3, [r2, #0]
     45c:	3301      	adds	r3, #1
     45e:	b2db      	uxtb	r3, r3
     460:	7013      	strb	r3, [r2, #0]
}
     462:	bd10      	pop	{r4, pc}
     464:	2000013b 	.word	0x2000013b
     468:	200001d0 	.word	0x200001d0
     46c:	20000268 	.word	0x20000268
     470:	20000134 	.word	0x20000134
     474:	00004521 	.word	0x00004521

00000478 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     47c:	4b46      	ldr	r3, [pc, #280]	; (598 <udi_cdc_tx_send+0x120>)
     47e:	781b      	ldrb	r3, [r3, #0]
     480:	2b00      	cmp	r3, #0
     482:	d001      	beq.n	488 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     484:	b004      	add	sp, #16
     486:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     488:	4b44      	ldr	r3, [pc, #272]	; (59c <udi_cdc_tx_send+0x124>)
     48a:	4798      	blx	r3
     48c:	2800      	cmp	r0, #0
     48e:	d043      	beq.n	518 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     490:	4b43      	ldr	r3, [pc, #268]	; (5a0 <udi_cdc_tx_send+0x128>)
     492:	881c      	ldrh	r4, [r3, #0]
     494:	4b43      	ldr	r3, [pc, #268]	; (5a4 <udi_cdc_tx_send+0x12c>)
     496:	4798      	blx	r3
     498:	4284      	cmp	r4, r0
     49a:	d0f3      	beq.n	484 <udi_cdc_tx_send+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     49c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     4a0:	425a      	negs	r2, r3
     4a2:	4153      	adcs	r3, r2
     4a4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     4a6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     4a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     4ac:	2200      	movs	r2, #0
     4ae:	4b3e      	ldr	r3, [pc, #248]	; (5a8 <udi_cdc_tx_send+0x130>)
     4b0:	701a      	strb	r2, [r3, #0]
	return flags;
     4b2:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     4b4:	4b3d      	ldr	r3, [pc, #244]	; (5ac <udi_cdc_tx_send+0x134>)
     4b6:	781c      	ldrb	r4, [r3, #0]
     4b8:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     4ba:	0062      	lsls	r2, r4, #1
     4bc:	4b3c      	ldr	r3, [pc, #240]	; (5b0 <udi_cdc_tx_send+0x138>)
     4be:	5ad3      	ldrh	r3, [r2, r3]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d030      	beq.n	526 <udi_cdc_tx_send+0xae>
	sof_zlp_counter = 0;
     4c4:	2200      	movs	r2, #0
     4c6:	4b3b      	ldr	r3, [pc, #236]	; (5b4 <udi_cdc_tx_send+0x13c>)
     4c8:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     4ca:	4b3b      	ldr	r3, [pc, #236]	; (5b8 <udi_cdc_tx_send+0x140>)
     4cc:	781b      	ldrb	r3, [r3, #0]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d148      	bne.n	564 <udi_cdc_tx_send+0xec>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     4d2:	4263      	negs	r3, r4
     4d4:	4163      	adcs	r3, r4
     4d6:	b2db      	uxtb	r3, r3
     4d8:	4a34      	ldr	r2, [pc, #208]	; (5ac <udi_cdc_tx_send+0x134>)
     4da:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     4dc:	2201      	movs	r2, #1
     4de:	4b2e      	ldr	r3, [pc, #184]	; (598 <udi_cdc_tx_send+0x120>)
     4e0:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     4e2:	2d00      	cmp	r5, #0
     4e4:	d004      	beq.n	4f0 <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     4e6:	4b30      	ldr	r3, [pc, #192]	; (5a8 <udi_cdc_tx_send+0x130>)
     4e8:	701a      	strb	r2, [r3, #0]
     4ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4ee:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     4f0:	0026      	movs	r6, r4
     4f2:	0063      	lsls	r3, r4, #1
     4f4:	4a2e      	ldr	r2, [pc, #184]	; (5b0 <udi_cdc_tx_send+0x138>)
     4f6:	5a9b      	ldrh	r3, [r3, r2]
     4f8:	001d      	movs	r5, r3
     4fa:	3d40      	subs	r5, #64	; 0x40
     4fc:	1e6a      	subs	r2, r5, #1
     4fe:	4195      	sbcs	r5, r2
     500:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     502:	2b40      	cmp	r3, #64	; 0x40
     504:	d037      	beq.n	576 <udi_cdc_tx_send+0xfe>
		if (udd_is_high_speed()) {
     506:	4b25      	ldr	r3, [pc, #148]	; (59c <udi_cdc_tx_send+0x124>)
     508:	4798      	blx	r3
     50a:	2800      	cmp	r0, #0
     50c:	d02e      	beq.n	56c <udi_cdc_tx_send+0xf4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     50e:	4b25      	ldr	r3, [pc, #148]	; (5a4 <udi_cdc_tx_send+0x12c>)
     510:	4798      	blx	r3
     512:	4b23      	ldr	r3, [pc, #140]	; (5a0 <udi_cdc_tx_send+0x128>)
     514:	8018      	strh	r0, [r3, #0]
     516:	e031      	b.n	57c <udi_cdc_tx_send+0x104>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     518:	4b21      	ldr	r3, [pc, #132]	; (5a0 <udi_cdc_tx_send+0x128>)
     51a:	881c      	ldrh	r4, [r3, #0]
     51c:	4b27      	ldr	r3, [pc, #156]	; (5bc <udi_cdc_tx_send+0x144>)
     51e:	4798      	blx	r3
     520:	4284      	cmp	r4, r0
     522:	d1bb      	bne.n	49c <udi_cdc_tx_send+0x24>
     524:	e7ae      	b.n	484 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     526:	4a23      	ldr	r2, [pc, #140]	; (5b4 <udi_cdc_tx_send+0x13c>)
     528:	8813      	ldrh	r3, [r2, #0]
     52a:	3301      	adds	r3, #1
     52c:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     52e:	4b1b      	ldr	r3, [pc, #108]	; (59c <udi_cdc_tx_send+0x124>)
     530:	4798      	blx	r3
     532:	2800      	cmp	r0, #0
     534:	d103      	bne.n	53e <udi_cdc_tx_send+0xc6>
     536:	4b1f      	ldr	r3, [pc, #124]	; (5b4 <udi_cdc_tx_send+0x13c>)
     538:	881b      	ldrh	r3, [r3, #0]
     53a:	2b63      	cmp	r3, #99	; 0x63
     53c:	d908      	bls.n	550 <udi_cdc_tx_send+0xd8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     53e:	4b17      	ldr	r3, [pc, #92]	; (59c <udi_cdc_tx_send+0x124>)
     540:	4798      	blx	r3
     542:	2800      	cmp	r0, #0
     544:	d0be      	beq.n	4c4 <udi_cdc_tx_send+0x4c>
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <udi_cdc_tx_send+0x148>)
     548:	4a1a      	ldr	r2, [pc, #104]	; (5b4 <udi_cdc_tx_send+0x13c>)
     54a:	8812      	ldrh	r2, [r2, #0]
     54c:	429a      	cmp	r2, r3
     54e:	d8b9      	bhi.n	4c4 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     550:	2d00      	cmp	r5, #0
     552:	d100      	bne.n	556 <udi_cdc_tx_send+0xde>
     554:	e796      	b.n	484 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     556:	2201      	movs	r2, #1
     558:	4b13      	ldr	r3, [pc, #76]	; (5a8 <udi_cdc_tx_send+0x130>)
     55a:	701a      	strb	r2, [r3, #0]
     55c:	f3bf 8f5f 	dmb	sy
     560:	b662      	cpsie	i
     562:	e78f      	b.n	484 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     564:	4262      	negs	r2, r4
     566:	4154      	adcs	r4, r2
     568:	b2e4      	uxtb	r4, r4
     56a:	e7b7      	b.n	4dc <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     56c:	4b13      	ldr	r3, [pc, #76]	; (5bc <udi_cdc_tx_send+0x144>)
     56e:	4798      	blx	r3
     570:	4b0b      	ldr	r3, [pc, #44]	; (5a0 <udi_cdc_tx_send+0x128>)
     572:	8018      	strh	r0, [r3, #0]
     574:	e002      	b.n	57c <udi_cdc_tx_send+0x104>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     576:	2200      	movs	r2, #0
     578:	4b09      	ldr	r3, [pc, #36]	; (5a0 <udi_cdc_tx_send+0x128>)
     57a:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     57c:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     57e:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <udi_cdc_tx_send+0x138>)
     580:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     582:	01a4      	lsls	r4, r4, #6
     584:	4a0f      	ldr	r2, [pc, #60]	; (5c4 <udi_cdc_tx_send+0x14c>)
     586:	1914      	adds	r4, r2, r4
	udd_ep_run( ep,
     588:	4a0f      	ldr	r2, [pc, #60]	; (5c8 <udi_cdc_tx_send+0x150>)
     58a:	9200      	str	r2, [sp, #0]
     58c:	0022      	movs	r2, r4
     58e:	0029      	movs	r1, r5
     590:	2081      	movs	r0, #129	; 0x81
     592:	4c0e      	ldr	r4, [pc, #56]	; (5cc <udi_cdc_tx_send+0x154>)
     594:	47a0      	blx	r4
     596:	e775      	b.n	484 <udi_cdc_tx_send+0xc>
     598:	20000264 	.word	0x20000264
     59c:	00002c99 	.word	0x00002c99
     5a0:	20000260 	.word	0x20000260
     5a4:	00002cad 	.word	0x00002cad
     5a8:	20000100 	.word	0x20000100
     5ac:	2000025c 	.word	0x2000025c
     5b0:	20000258 	.word	0x20000258
     5b4:	20000130 	.word	0x20000130
     5b8:	200001d4 	.word	0x200001d4
     5bc:	00002c9d 	.word	0x00002c9d
     5c0:	0000031f 	.word	0x0000031f
     5c4:	200001d8 	.word	0x200001d8
     5c8:	000005d1 	.word	0x000005d1
     5cc:	00002fa5 	.word	0x00002fa5

000005d0 <udi_cdc_data_sent>:
{
     5d0:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     5d2:	2800      	cmp	r0, #0
     5d4:	d000      	beq.n	5d8 <udi_cdc_data_sent+0x8>
}
     5d6:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     5d8:	4b07      	ldr	r3, [pc, #28]	; (5f8 <udi_cdc_data_sent+0x28>)
     5da:	781b      	ldrb	r3, [r3, #0]
     5dc:	425a      	negs	r2, r3
     5de:	4153      	adcs	r3, r2
     5e0:	005b      	lsls	r3, r3, #1
     5e2:	2200      	movs	r2, #0
     5e4:	4905      	ldr	r1, [pc, #20]	; (5fc <udi_cdc_data_sent+0x2c>)
     5e6:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <udi_cdc_data_sent+0x30>)
     5ea:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     5ec:	4b05      	ldr	r3, [pc, #20]	; (604 <udi_cdc_data_sent+0x34>)
     5ee:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <udi_cdc_data_sent+0x38>)
     5f2:	4798      	blx	r3
     5f4:	e7ef      	b.n	5d6 <udi_cdc_data_sent+0x6>
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	2000025c 	.word	0x2000025c
     5fc:	20000258 	.word	0x20000258
     600:	200001d4 	.word	0x200001d4
     604:	20000264 	.word	0x20000264
     608:	00000479 	.word	0x00000479

0000060c <udi_cdc_data_sof_notify>:
{
     60c:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     60e:	2000      	movs	r0, #0
     610:	4b01      	ldr	r3, [pc, #4]	; (618 <udi_cdc_data_sof_notify+0xc>)
     612:	4798      	blx	r3
}
     614:	bd10      	pop	{r4, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000479 	.word	0x00000479

0000061c <udi_cdc_data_disable>:
{
     61c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     61e:	4a06      	ldr	r2, [pc, #24]	; (638 <udi_cdc_data_disable+0x1c>)
     620:	7813      	ldrb	r3, [r2, #0]
     622:	3b01      	subs	r3, #1
     624:	b2db      	uxtb	r3, r3
     626:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     628:	7810      	ldrb	r0, [r2, #0]
     62a:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     62c:	4b03      	ldr	r3, [pc, #12]	; (63c <udi_cdc_data_disable+0x20>)
     62e:	4798      	blx	r3
	udi_cdc_data_running = false;
     630:	2200      	movs	r2, #0
     632:	4b03      	ldr	r3, [pc, #12]	; (640 <udi_cdc_data_disable+0x24>)
     634:	701a      	strb	r2, [r3, #0]
}
     636:	bd10      	pop	{r4, pc}
     638:	2000013c 	.word	0x2000013c
     63c:	00004531 	.word	0x00004531
     640:	20000132 	.word	0x20000132

00000644 <udi_cdc_comm_setup>:
{
     644:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     646:	4b20      	ldr	r3, [pc, #128]	; (6c8 <udi_cdc_comm_setup+0x84>)
     648:	781a      	ldrb	r2, [r3, #0]
     64a:	b253      	sxtb	r3, r2
     64c:	2b00      	cmp	r3, #0
     64e:	db05      	blt.n	65c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     650:	2360      	movs	r3, #96	; 0x60
     652:	4013      	ands	r3, r2
	return false;  // request Not supported
     654:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     656:	2b20      	cmp	r3, #32
     658:	d014      	beq.n	684 <udi_cdc_comm_setup+0x40>
}
     65a:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     65c:	2360      	movs	r3, #96	; 0x60
     65e:	4013      	ands	r3, r2
	return false;  // request Not supported
     660:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     662:	2b20      	cmp	r3, #32
     664:	d1f9      	bne.n	65a <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     666:	4b18      	ldr	r3, [pc, #96]	; (6c8 <udi_cdc_comm_setup+0x84>)
     668:	785b      	ldrb	r3, [r3, #1]
     66a:	2b21      	cmp	r3, #33	; 0x21
     66c:	d129      	bne.n	6c2 <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     66e:	4b16      	ldr	r3, [pc, #88]	; (6c8 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     670:	88db      	ldrh	r3, [r3, #6]
     672:	2b07      	cmp	r3, #7
     674:	d1f1      	bne.n	65a <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     676:	4b14      	ldr	r3, [pc, #80]	; (6c8 <udi_cdc_comm_setup+0x84>)
     678:	4a14      	ldr	r2, [pc, #80]	; (6cc <udi_cdc_comm_setup+0x88>)
     67a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     67c:	2207      	movs	r2, #7
     67e:	819a      	strh	r2, [r3, #12]
				return true;
     680:	3001      	adds	r0, #1
     682:	e7ea      	b.n	65a <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     684:	4b10      	ldr	r3, [pc, #64]	; (6c8 <udi_cdc_comm_setup+0x84>)
     686:	785b      	ldrb	r3, [r3, #1]
     688:	2b20      	cmp	r3, #32
     68a:	d003      	beq.n	694 <udi_cdc_comm_setup+0x50>
     68c:	2b22      	cmp	r3, #34	; 0x22
     68e:	d00f      	beq.n	6b0 <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     690:	2000      	movs	r0, #0
     692:	e7e2      	b.n	65a <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     694:	4b0c      	ldr	r3, [pc, #48]	; (6c8 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     696:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     698:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     69a:	2b07      	cmp	r3, #7
     69c:	d1dd      	bne.n	65a <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <udi_cdc_comm_setup+0x84>)
     6a0:	4a0b      	ldr	r2, [pc, #44]	; (6d0 <udi_cdc_comm_setup+0x8c>)
     6a2:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     6a4:	4a09      	ldr	r2, [pc, #36]	; (6cc <udi_cdc_comm_setup+0x88>)
     6a6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     6a8:	2207      	movs	r2, #7
     6aa:	819a      	strh	r2, [r3, #12]
				return true;
     6ac:	3001      	adds	r0, #1
     6ae:	e7d4      	b.n	65a <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     6b0:	4b05      	ldr	r3, [pc, #20]	; (6c8 <udi_cdc_comm_setup+0x84>)
     6b2:	885b      	ldrh	r3, [r3, #2]
     6b4:	2101      	movs	r1, #1
     6b6:	4019      	ands	r1, r3
     6b8:	2000      	movs	r0, #0
     6ba:	4b06      	ldr	r3, [pc, #24]	; (6d4 <udi_cdc_comm_setup+0x90>)
     6bc:	4798      	blx	r3
				return true;
     6be:	2001      	movs	r0, #1
     6c0:	e7cb      	b.n	65a <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     6c2:	2000      	movs	r0, #0
     6c4:	e7c9      	b.n	65a <udi_cdc_comm_setup+0x16>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	200006e8 	.word	0x200006e8
     6cc:	20000134 	.word	0x20000134
     6d0:	00000419 	.word	0x00000419
     6d4:	0000453d 	.word	0x0000453d

000006d8 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     6d8:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6da:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     6de:	425a      	negs	r2, r3
     6e0:	4153      	adcs	r3, r2
     6e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     6e4:	b672      	cpsid	i
     6e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     6ea:	2200      	movs	r2, #0
     6ec:	4b0a      	ldr	r3, [pc, #40]	; (718 <udi_cdc_multi_get_nb_received_data+0x40>)
     6ee:	701a      	strb	r2, [r3, #0]
	return flags;
     6f0:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     6f2:	4b0a      	ldr	r3, [pc, #40]	; (71c <udi_cdc_multi_get_nb_received_data+0x44>)
     6f4:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     6f6:	4b0a      	ldr	r3, [pc, #40]	; (720 <udi_cdc_multi_get_nb_received_data+0x48>)
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	005b      	lsls	r3, r3, #1
     6fc:	4809      	ldr	r0, [pc, #36]	; (724 <udi_cdc_multi_get_nb_received_data+0x4c>)
     6fe:	5a18      	ldrh	r0, [r3, r0]
     700:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     702:	2a00      	cmp	r2, #0
     704:	d005      	beq.n	712 <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     706:	2201      	movs	r2, #1
     708:	4b03      	ldr	r3, [pc, #12]	; (718 <udi_cdc_multi_get_nb_received_data+0x40>)
     70a:	701a      	strb	r2, [r3, #0]
     70c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     710:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     712:	b002      	add	sp, #8
     714:	4770      	bx	lr
     716:	46c0      	nop			; (mov r8, r8)
     718:	20000100 	.word	0x20000100
     71c:	200001c8 	.word	0x200001c8
     720:	200001c4 	.word	0x200001c4
     724:	200001c0 	.word	0x200001c0

00000728 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     728:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     72a:	4b03      	ldr	r3, [pc, #12]	; (738 <udi_cdc_multi_is_rx_ready+0x10>)
     72c:	4798      	blx	r3
     72e:	1e43      	subs	r3, r0, #1
     730:	4198      	sbcs	r0, r3
     732:	b2c0      	uxtb	r0, r0
}
     734:	bd10      	pop	{r4, pc}
     736:	46c0      	nop			; (mov r8, r8)
     738:	000006d9 	.word	0x000006d9

0000073c <udi_cdc_rx_start>:
{
     73c:	b510      	push	{r4, lr}
     73e:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     740:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     744:	425a      	negs	r2, r3
     746:	4153      	adcs	r3, r2
     748:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     74a:	b672      	cpsid	i
     74c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     750:	2200      	movs	r2, #0
     752:	4b1f      	ldr	r3, [pc, #124]	; (7d0 <udi_cdc_rx_start+0x94>)
     754:	701a      	strb	r2, [r3, #0]
	return flags;
     756:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     758:	4a1e      	ldr	r2, [pc, #120]	; (7d4 <udi_cdc_rx_start+0x98>)
     75a:	7814      	ldrb	r4, [r2, #0]
     75c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     75e:	4a1e      	ldr	r2, [pc, #120]	; (7d8 <udi_cdc_rx_start+0x9c>)
     760:	7812      	ldrb	r2, [r2, #0]
     762:	2a00      	cmp	r2, #0
     764:	d107      	bne.n	776 <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     766:	4a1d      	ldr	r2, [pc, #116]	; (7dc <udi_cdc_rx_start+0xa0>)
     768:	8812      	ldrh	r2, [r2, #0]
     76a:	0061      	lsls	r1, r4, #1
     76c:	481c      	ldr	r0, [pc, #112]	; (7e0 <udi_cdc_rx_start+0xa4>)
     76e:	5a09      	ldrh	r1, [r1, r0]
     770:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     772:	428a      	cmp	r2, r1
     774:	d20a      	bcs.n	78c <udi_cdc_rx_start+0x50>
		return false;
     776:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     778:	2b00      	cmp	r3, #0
     77a:	d005      	beq.n	788 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     77c:	2201      	movs	r2, #1
     77e:	4b14      	ldr	r3, [pc, #80]	; (7d0 <udi_cdc_rx_start+0x94>)
     780:	701a      	strb	r2, [r3, #0]
     782:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     786:	b662      	cpsie	i
}
     788:	b004      	add	sp, #16
     78a:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     78c:	2100      	movs	r1, #0
     78e:	4a13      	ldr	r2, [pc, #76]	; (7dc <udi_cdc_rx_start+0xa0>)
     790:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     792:	4262      	negs	r2, r4
     794:	4162      	adcs	r2, r4
     796:	b2d2      	uxtb	r2, r2
     798:	490e      	ldr	r1, [pc, #56]	; (7d4 <udi_cdc_rx_start+0x98>)
     79a:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     79c:	2101      	movs	r1, #1
     79e:	4a0e      	ldr	r2, [pc, #56]	; (7d8 <udi_cdc_rx_start+0x9c>)
     7a0:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     7a2:	2b00      	cmp	r3, #0
     7a4:	d005      	beq.n	7b2 <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     7a6:	2201      	movs	r2, #1
     7a8:	4b09      	ldr	r3, [pc, #36]	; (7d0 <udi_cdc_rx_start+0x94>)
     7aa:	701a      	strb	r2, [r3, #0]
     7ac:	f3bf 8f5f 	dmb	sy
     7b0:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     7b2:	2000      	movs	r0, #0
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <udi_cdc_rx_start+0xa8>)
     7b6:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
     7b8:	01a4      	lsls	r4, r4, #6
     7ba:	4a0b      	ldr	r2, [pc, #44]	; (7e8 <udi_cdc_rx_start+0xac>)
     7bc:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     7be:	4b0b      	ldr	r3, [pc, #44]	; (7ec <udi_cdc_rx_start+0xb0>)
     7c0:	9300      	str	r3, [sp, #0]
     7c2:	2340      	movs	r3, #64	; 0x40
     7c4:	2101      	movs	r1, #1
     7c6:	2002      	movs	r0, #2
     7c8:	4c09      	ldr	r4, [pc, #36]	; (7f0 <udi_cdc_rx_start+0xb4>)
     7ca:	47a0      	blx	r4
     7cc:	e7dc      	b.n	788 <udi_cdc_rx_start+0x4c>
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	20000100 	.word	0x20000100
     7d4:	200001c4 	.word	0x200001c4
     7d8:	200001cc 	.word	0x200001cc
     7dc:	200001c8 	.word	0x200001c8
     7e0:	200001c0 	.word	0x200001c0
     7e4:	00000729 	.word	0x00000729
     7e8:	20000140 	.word	0x20000140
     7ec:	00000885 	.word	0x00000885
     7f0:	00002fa5 	.word	0x00002fa5

000007f4 <udi_cdc_data_enable>:
{
     7f4:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     7f6:	2400      	movs	r4, #0
     7f8:	4b15      	ldr	r3, [pc, #84]	; (850 <udi_cdc_data_enable+0x5c>)
     7fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     7fc:	4b15      	ldr	r3, [pc, #84]	; (854 <udi_cdc_data_enable+0x60>)
     7fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     800:	4b15      	ldr	r3, [pc, #84]	; (858 <udi_cdc_data_enable+0x64>)
     802:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <udi_cdc_data_enable+0x68>)
     806:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     808:	4b15      	ldr	r3, [pc, #84]	; (860 <udi_cdc_data_enable+0x6c>)
     80a:	2500      	movs	r5, #0
     80c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     80e:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     810:	4b14      	ldr	r3, [pc, #80]	; (864 <udi_cdc_data_enable+0x70>)
     812:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     814:	2000      	movs	r0, #0
     816:	4b14      	ldr	r3, [pc, #80]	; (868 <udi_cdc_data_enable+0x74>)
     818:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     81a:	4b14      	ldr	r3, [pc, #80]	; (86c <udi_cdc_data_enable+0x78>)
     81c:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     81e:	4b14      	ldr	r3, [pc, #80]	; (870 <udi_cdc_data_enable+0x7c>)
     820:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     822:	4b14      	ldr	r3, [pc, #80]	; (874 <udi_cdc_data_enable+0x80>)
     824:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     826:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     828:	4b13      	ldr	r3, [pc, #76]	; (878 <udi_cdc_data_enable+0x84>)
     82a:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     82c:	2000      	movs	r0, #0
     82e:	4b13      	ldr	r3, [pc, #76]	; (87c <udi_cdc_data_enable+0x88>)
     830:	4798      	blx	r3
     832:	2800      	cmp	r0, #0
     834:	d007      	beq.n	846 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     836:	4a06      	ldr	r2, [pc, #24]	; (850 <udi_cdc_data_enable+0x5c>)
     838:	7813      	ldrb	r3, [r2, #0]
     83a:	3301      	adds	r3, #1
     83c:	b2db      	uxtb	r3, r3
     83e:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     840:	7813      	ldrb	r3, [r2, #0]
     842:	2b01      	cmp	r3, #1
     844:	d000      	beq.n	848 <udi_cdc_data_enable+0x54>
}
     846:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     848:	2201      	movs	r2, #1
     84a:	4b0d      	ldr	r3, [pc, #52]	; (880 <udi_cdc_data_enable+0x8c>)
     84c:	701a      	strb	r2, [r3, #0]
     84e:	e7fa      	b.n	846 <udi_cdc_data_enable+0x52>
     850:	2000013c 	.word	0x2000013c
     854:	20000264 	.word	0x20000264
     858:	200001d4 	.word	0x200001d4
     85c:	2000025c 	.word	0x2000025c
     860:	20000258 	.word	0x20000258
     864:	20000260 	.word	0x20000260
     868:	00000479 	.word	0x00000479
     86c:	200001cc 	.word	0x200001cc
     870:	200001c4 	.word	0x200001c4
     874:	200001c0 	.word	0x200001c0
     878:	200001c8 	.word	0x200001c8
     87c:	0000073d 	.word	0x0000073d
     880:	20000132 	.word	0x20000132

00000884 <udi_cdc_data_received>:
{
     884:	b510      	push	{r4, lr}
     886:	b082      	sub	sp, #8
     888:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     88a:	2800      	cmp	r0, #0
     88c:	d110      	bne.n	8b0 <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     88e:	4b0f      	ldr	r3, [pc, #60]	; (8cc <udi_cdc_data_received+0x48>)
     890:	781a      	ldrb	r2, [r3, #0]
     892:	4253      	negs	r3, r2
     894:	415a      	adcs	r2, r3
     896:	b2d2      	uxtb	r2, r2
	if (!n) {
     898:	2900      	cmp	r1, #0
     89a:	d00b      	beq.n	8b4 <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     89c:	b289      	uxth	r1, r1
     89e:	0052      	lsls	r2, r2, #1
     8a0:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <udi_cdc_data_received+0x4c>)
     8a2:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     8a4:	2200      	movs	r2, #0
     8a6:	4b0b      	ldr	r3, [pc, #44]	; (8d4 <udi_cdc_data_received+0x50>)
     8a8:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     8aa:	2000      	movs	r0, #0
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <udi_cdc_data_received+0x54>)
     8ae:	4798      	blx	r3
}
     8b0:	b002      	add	sp, #8
     8b2:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     8b4:	0192      	lsls	r2, r2, #6
     8b6:	4b09      	ldr	r3, [pc, #36]	; (8dc <udi_cdc_data_received+0x58>)
     8b8:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     8ba:	4b09      	ldr	r3, [pc, #36]	; (8e0 <udi_cdc_data_received+0x5c>)
     8bc:	9300      	str	r3, [sp, #0]
     8be:	2340      	movs	r3, #64	; 0x40
     8c0:	3101      	adds	r1, #1
     8c2:	0020      	movs	r0, r4
     8c4:	4c07      	ldr	r4, [pc, #28]	; (8e4 <udi_cdc_data_received+0x60>)
     8c6:	47a0      	blx	r4
		return;
     8c8:	e7f2      	b.n	8b0 <udi_cdc_data_received+0x2c>
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	200001c4 	.word	0x200001c4
     8d0:	200001c0 	.word	0x200001c0
     8d4:	200001cc 	.word	0x200001cc
     8d8:	0000073d 	.word	0x0000073d
     8dc:	20000140 	.word	0x20000140
     8e0:	00000885 	.word	0x00000885
     8e4:	00002fa5 	.word	0x00002fa5

000008e8 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     8e8:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     8ea:	2000      	movs	r0, #0
     8ec:	4b01      	ldr	r3, [pc, #4]	; (8f4 <udi_cdc_is_rx_ready+0xc>)
     8ee:	4798      	blx	r3
}
     8f0:	bd10      	pop	{r4, pc}
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	00000729 	.word	0x00000729

000008f8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fa:	46d6      	mov	lr, sl
     8fc:	464f      	mov	r7, r9
     8fe:	4646      	mov	r6, r8
     900:	b5c0      	push	{r6, r7, lr}
     902:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     904:	4b27      	ldr	r3, [pc, #156]	; (9a4 <udi_cdc_multi_getc+0xac>)
     906:	799b      	ldrb	r3, [r3, #6]
     908:	3b09      	subs	r3, #9
     90a:	425a      	negs	r2, r3
     90c:	4153      	adcs	r3, r2
     90e:	b2db      	uxtb	r3, r3
     910:	4699      	mov	r9, r3
	int rx_data = 0;
     912:	2300      	movs	r3, #0
     914:	469c      	mov	ip, r3
	cpu_irq_disable();
     916:	4b24      	ldr	r3, [pc, #144]	; (9a8 <udi_cdc_multi_getc+0xb0>)
     918:	4698      	mov	r8, r3
     91a:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     91c:	4e23      	ldr	r6, [pc, #140]	; (9ac <udi_cdc_multi_getc+0xb4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     91e:	4c24      	ldr	r4, [pc, #144]	; (9b0 <udi_cdc_multi_getc+0xb8>)
     920:	e005      	b.n	92e <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     922:	428b      	cmp	r3, r1
     924:	d329      	bcc.n	97a <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     926:	4b23      	ldr	r3, [pc, #140]	; (9b4 <udi_cdc_multi_getc+0xbc>)
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	2b00      	cmp	r3, #0
     92c:	d01d      	beq.n	96a <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     932:	425a      	negs	r2, r3
     934:	4153      	adcs	r3, r2
     936:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     938:	b672      	cpsid	i
     93a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     93e:	4643      	mov	r3, r8
     940:	701f      	strb	r7, [r3, #0]
	return flags;
     942:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     944:	8833      	ldrh	r3, [r6, #0]
     946:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     948:	7822      	ldrb	r2, [r4, #0]
     94a:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     94c:	0055      	lsls	r5, r2, #1
     94e:	491a      	ldr	r1, [pc, #104]	; (9b8 <udi_cdc_multi_getc+0xc0>)
     950:	5a69      	ldrh	r1, [r5, r1]
     952:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     954:	2800      	cmp	r0, #0
     956:	d0e4      	beq.n	922 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     958:	2001      	movs	r0, #1
     95a:	4682      	mov	sl, r0
     95c:	4812      	ldr	r0, [pc, #72]	; (9a8 <udi_cdc_multi_getc+0xb0>)
     95e:	4655      	mov	r5, sl
     960:	7005      	strb	r5, [r0, #0]
     962:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     966:	b662      	cpsie	i
     968:	e7db      	b.n	922 <udi_cdc_multi_getc+0x2a>
			return 0;
     96a:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     96c:	0028      	movs	r0, r5
     96e:	b002      	add	sp, #8
     970:	bc1c      	pop	{r2, r3, r4}
     972:	4690      	mov	r8, r2
     974:	4699      	mov	r9, r3
     976:	46a2      	mov	sl, r4
     978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     97a:	0192      	lsls	r2, r2, #6
     97c:	490f      	ldr	r1, [pc, #60]	; (9bc <udi_cdc_multi_getc+0xc4>)
     97e:	188a      	adds	r2, r1, r2
     980:	5cd2      	ldrb	r2, [r2, r3]
     982:	4665      	mov	r5, ip
     984:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     986:	3301      	adds	r3, #1
     988:	b29b      	uxth	r3, r3
     98a:	4a08      	ldr	r2, [pc, #32]	; (9ac <udi_cdc_multi_getc+0xb4>)
     98c:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     98e:	2000      	movs	r0, #0
     990:	4b0b      	ldr	r3, [pc, #44]	; (9c0 <udi_cdc_multi_getc+0xc8>)
     992:	4798      	blx	r3
	if (b_databit_9) {
     994:	464b      	mov	r3, r9
     996:	2b00      	cmp	r3, #0
     998:	d0e8      	beq.n	96c <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     99a:	022b      	lsls	r3, r5, #8
     99c:	469c      	mov	ip, r3
		b_databit_9 = false;
     99e:	2300      	movs	r3, #0
     9a0:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     9a2:	e7c4      	b.n	92e <udi_cdc_multi_getc+0x36>
     9a4:	20000134 	.word	0x20000134
     9a8:	20000100 	.word	0x20000100
     9ac:	200001c8 	.word	0x200001c8
     9b0:	200001c4 	.word	0x200001c4
     9b4:	20000132 	.word	0x20000132
     9b8:	200001c0 	.word	0x200001c0
     9bc:	20000140 	.word	0x20000140
     9c0:	0000073d 	.word	0x0000073d

000009c4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     9c4:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     9c6:	2000      	movs	r0, #0
     9c8:	4b01      	ldr	r3, [pc, #4]	; (9d0 <udi_cdc_getc+0xc>)
     9ca:	4798      	blx	r3
}
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	000008f9 	.word	0x000008f9

000009d4 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     9d4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9d6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9da:	425a      	negs	r2, r3
     9dc:	4153      	adcs	r3, r2
     9de:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     9e0:	b672      	cpsid	i
     9e2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9e6:	2200      	movs	r2, #0
     9e8:	4b14      	ldr	r3, [pc, #80]	; (a3c <udi_cdc_multi_get_free_tx_buffer+0x68>)
     9ea:	701a      	strb	r2, [r3, #0]
	return flags;
     9ec:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     9ee:	4b14      	ldr	r3, [pc, #80]	; (a40 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     9f4:	0058      	lsls	r0, r3, #1
     9f6:	4a13      	ldr	r2, [pc, #76]	; (a44 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     9f8:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     9fa:	2a40      	cmp	r2, #64	; 0x40
     9fc:	d00b      	beq.n	a16 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     9fe:	2040      	movs	r0, #64	; 0x40
     a00:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     a02:	2900      	cmp	r1, #0
     a04:	d005      	beq.n	a12 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
     a06:	2201      	movs	r2, #1
     a08:	4b0c      	ldr	r3, [pc, #48]	; (a3c <udi_cdc_multi_get_free_tx_buffer+0x68>)
     a0a:	701a      	strb	r2, [r3, #0]
     a0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a10:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     a12:	b002      	add	sp, #8
     a14:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     a16:	480c      	ldr	r0, [pc, #48]	; (a48 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     a18:	7800      	ldrb	r0, [r0, #0]
     a1a:	2800      	cmp	r0, #0
     a1c:	d1ef      	bne.n	9fe <udi_cdc_multi_get_free_tx_buffer+0x2a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     a1e:	480b      	ldr	r0, [pc, #44]	; (a4c <udi_cdc_multi_get_free_tx_buffer+0x78>)
     a20:	7800      	ldrb	r0, [r0, #0]
     a22:	2800      	cmp	r0, #0
     a24:	d1eb      	bne.n	9fe <udi_cdc_multi_get_free_tx_buffer+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
     a26:	3001      	adds	r0, #1
     a28:	4a08      	ldr	r2, [pc, #32]	; (a4c <udi_cdc_multi_get_free_tx_buffer+0x78>)
     a2a:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     a2c:	425a      	negs	r2, r3
     a2e:	4153      	adcs	r3, r2
     a30:	b2db      	uxtb	r3, r3
     a32:	4a03      	ldr	r2, [pc, #12]	; (a40 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     a34:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     a36:	2200      	movs	r2, #0
     a38:	e7e1      	b.n	9fe <udi_cdc_multi_get_free_tx_buffer+0x2a>
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	20000100 	.word	0x20000100
     a40:	2000025c 	.word	0x2000025c
     a44:	20000258 	.word	0x20000258
     a48:	20000264 	.word	0x20000264
     a4c:	200001d4 	.word	0x200001d4

00000a50 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     a50:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     a52:	4b03      	ldr	r3, [pc, #12]	; (a60 <udi_cdc_multi_is_tx_ready+0x10>)
     a54:	4798      	blx	r3
     a56:	1e43      	subs	r3, r0, #1
     a58:	4198      	sbcs	r0, r3
     a5a:	b2c0      	uxtb	r0, r0
}
     a5c:	bd10      	pop	{r4, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	000009d5 	.word	0x000009d5

00000a64 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	46de      	mov	lr, fp
     a68:	4657      	mov	r7, sl
     a6a:	464e      	mov	r6, r9
     a6c:	4645      	mov	r5, r8
     a6e:	b5e0      	push	{r5, r6, r7, lr}
     a70:	b083      	sub	sp, #12
     a72:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     a74:	4b22      	ldr	r3, [pc, #136]	; (b00 <udi_cdc_multi_putc+0x9c>)
     a76:	799d      	ldrb	r5, [r3, #6]
     a78:	3d09      	subs	r5, #9
     a7a:	426b      	negs	r3, r5
     a7c:	415d      	adcs	r5, r3
     a7e:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     a80:	4e20      	ldr	r6, [pc, #128]	; (b04 <udi_cdc_multi_putc+0xa0>)
	cpu_irq_disable();
     a82:	4b21      	ldr	r3, [pc, #132]	; (b08 <udi_cdc_multi_putc+0xa4>)
     a84:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     a86:	4b21      	ldr	r3, [pc, #132]	; (b0c <udi_cdc_multi_putc+0xa8>)
     a88:	469a      	mov	sl, r3
     a8a:	e027      	b.n	adc <udi_cdc_multi_putc+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a8c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a90:	425a      	negs	r2, r3
     a92:	4153      	adcs	r3, r2
     a94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a96:	b672      	cpsid	i
     a98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a9c:	2300      	movs	r3, #0
     a9e:	4642      	mov	r2, r8
     aa0:	7013      	strb	r3, [r2, #0]
	return flags;
     aa2:	9b01      	ldr	r3, [sp, #4]
     aa4:	469b      	mov	fp, r3
     aa6:	4653      	mov	r3, sl
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     aac:	4a18      	ldr	r2, [pc, #96]	; (b10 <udi_cdc_multi_putc+0xac>)
     aae:	4694      	mov	ip, r2
     ab0:	005f      	lsls	r7, r3, #1
     ab2:	5ab9      	ldrh	r1, [r7, r2]
     ab4:	1c4a      	adds	r2, r1, #1
     ab6:	4660      	mov	r0, ip
     ab8:	523a      	strh	r2, [r7, r0]
     aba:	019b      	lsls	r3, r3, #6
     abc:	4a15      	ldr	r2, [pc, #84]	; (b14 <udi_cdc_multi_putc+0xb0>)
     abe:	18d3      	adds	r3, r2, r3
     ac0:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
     ac2:	465b      	mov	r3, fp
     ac4:	2b00      	cmp	r3, #0
     ac6:	d005      	beq.n	ad4 <udi_cdc_multi_putc+0x70>
		cpu_irq_enable();
     ac8:	2201      	movs	r2, #1
     aca:	4b0f      	ldr	r3, [pc, #60]	; (b08 <udi_cdc_multi_putc+0xa4>)
     acc:	701a      	strb	r2, [r3, #0]
     ace:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ad2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     ad4:	2d00      	cmp	r5, #0
     ad6:	d010      	beq.n	afa <udi_cdc_multi_putc+0x96>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     ad8:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     ada:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     adc:	2000      	movs	r0, #0
     ade:	47b0      	blx	r6
     ae0:	2800      	cmp	r0, #0
     ae2:	d1d3      	bne.n	a8c <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <udi_cdc_multi_putc+0xb4>)
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	d1f7      	bne.n	adc <udi_cdc_multi_putc+0x78>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     aec:	b003      	add	sp, #12
     aee:	bc3c      	pop	{r2, r3, r4, r5}
     af0:	4690      	mov	r8, r2
     af2:	4699      	mov	r9, r3
     af4:	46a2      	mov	sl, r4
     af6:	46ab      	mov	fp, r5
     af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     afa:	2001      	movs	r0, #1
     afc:	e7f6      	b.n	aec <udi_cdc_multi_putc+0x88>
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	20000134 	.word	0x20000134
     b04:	00000a51 	.word	0x00000a51
     b08:	20000100 	.word	0x20000100
     b0c:	2000025c 	.word	0x2000025c
     b10:	20000258 	.word	0x20000258
     b14:	200001d8 	.word	0x200001d8
     b18:	20000132 	.word	0x20000132

00000b1c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     b1c:	b510      	push	{r4, lr}
     b1e:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     b20:	2000      	movs	r0, #0
     b22:	4b01      	ldr	r3, [pc, #4]	; (b28 <udi_cdc_putc+0xc>)
     b24:	4798      	blx	r3
}
     b26:	bd10      	pop	{r4, pc}
     b28:	00000a65 	.word	0x00000a65

00000b2c <keypadScan>:
	char keypadScan()
	{
		 //This routine returns the first key found to be pressed during the scan.
		char key = 0;
		
		REG_PORT_OUTSET1 = PORT_ROW1;	
     b2c:	2201      	movs	r2, #1
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <keypadScan+0x20>)
     b30:	601a      	str	r2, [r3, #0]
		//if(REG_PORT_IN1&PORT_COL3)
			//key = 2;
		//if(REG_PORT_IN1&PORT_COL4)
			//key = 3;
			
		if((REG_PORT_IN1&PORT_COL1)==PORT_COL1)
     b32:	4b07      	ldr	r3, [pc, #28]	; (b50 <keypadScan+0x24>)
     b34:	681a      	ldr	r2, [r3, #0]
     b36:	2302      	movs	r3, #2
     b38:	4013      	ands	r3, r2
		key = 1;	
		else
		key = 2;
     b3a:	425a      	negs	r2, r3
     b3c:	4153      	adcs	r3, r2
     b3e:	3301      	adds	r3, #1
		//if(REG_PORT_IN1&PORT_COL4)
		//key = 3;
		//
		//key ++;

		REG_PORT_OUTCLR1 = PORT_ROW1;
     b40:	2101      	movs	r1, #1
     b42:	4a04      	ldr	r2, [pc, #16]	; (b54 <keypadScan+0x28>)
     b44:	6011      	str	r1, [r2, #0]
		//REG_PORT_OUTCLR1 = PORT_ROW2;
		//REG_PORT_OUTCLR1 = PORT_ROW3;
		//REG_PORT_OUTCLR1 = PORT_ROW4;
		
		return keyPadMatrix[key];
     b46:	4a04      	ldr	r2, [pc, #16]	; (b58 <keypadScan+0x2c>)
     b48:	5cd0      	ldrb	r0, [r2, r3]
	}
     b4a:	4770      	bx	lr
     b4c:	41004498 	.word	0x41004498
     b50:	410044a0 	.word	0x410044a0
     b54:	41004494 	.word	0x41004494
     b58:	2000002c 	.word	0x2000002c

00000b5c <i2cLcdClear>:
	LCD_write_buffer[2] = iRows;
	i2c_write(LCD_write_buffer,3,LCD_SLAVE_ADDR);
    timerDelay(5);
}
      
void i2cLcdClear() {
     b5c:	b510      	push	{r4, lr}
	LCD_write_buffer[0] = 0x02;
     b5e:	2302      	movs	r3, #2
     b60:	4a21      	ldr	r2, [pc, #132]	; (be8 <i2cLcdClear+0x8c>)
     b62:	7013      	strb	r3, [r2, #0]


//-----------------------------------------------------------------------------
inline bool i2c_write(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     b64:	4a21      	ldr	r2, [pc, #132]	; (bec <i2cLcdClear+0x90>)
     b66:	6253      	str	r3, [r2, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     b68:	0011      	movs	r1, r2
     b6a:	2201      	movs	r2, #1
     b6c:	7e0b      	ldrb	r3, [r1, #24]
     b6e:	4213      	tst	r3, r2
     b70:	d0fc      	beq.n	b6c <i2cLcdClear+0x10>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     b72:	4b1e      	ldr	r3, [pc, #120]	; (bec <i2cLcdClear+0x90>)
     b74:	8b5b      	ldrh	r3, [r3, #26]
     b76:	075b      	lsls	r3, r3, #29
     b78:	d421      	bmi.n	bbe <i2cLcdClear+0x62>
		return false;
	}

	for (int i = 0; i < size; i++)
	{
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     b7a:	2102      	movs	r1, #2
     b7c:	2328      	movs	r3, #40	; 0x28
     b7e:	4a1b      	ldr	r2, [pc, #108]	; (bec <i2cLcdClear+0x90>)
     b80:	54d1      	strb	r1, [r2, r3]

		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     b82:	0011      	movs	r1, r2
     b84:	2201      	movs	r2, #1
     b86:	7e0b      	ldrb	r3, [r1, #24]
     b88:	4213      	tst	r3, r2
     b8a:	d0fc      	beq.n	b86 <i2cLcdClear+0x2a>

		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     b8c:	4b17      	ldr	r3, [pc, #92]	; (bec <i2cLcdClear+0x90>)
     b8e:	8b5b      	ldrh	r3, [r3, #26]
     b90:	075b      	lsls	r3, r3, #29
     b92:	d41e      	bmi.n	bd2 <i2cLcdClear+0x76>
			return false;
		}
	}
	//udi_cdc_putc('B');

	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b94:	4a15      	ldr	r2, [pc, #84]	; (bec <i2cLcdClear+0x90>)
     b96:	6851      	ldr	r1, [r2, #4]
     b98:	23c0      	movs	r3, #192	; 0xc0
     b9a:	029b      	lsls	r3, r3, #10
     b9c:	430b      	orrs	r3, r1
     b9e:	6053      	str	r3, [r2, #4]

inline void timerDelay(uint16_t ms)
{
	uint16_t cnt;
	
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     ba0:	2200      	movs	r2, #0
     ba2:	4b13      	ldr	r3, [pc, #76]	; (bf0 <i2cLcdClear+0x94>)
     ba4:	821a      	strh	r2, [r3, #16]
     ba6:	2103      	movs	r1, #3
	
	while(cnt!=ms) // Count the ms till target
	{
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     ba8:	001a      	movs	r2, r3
     baa:	2010      	movs	r0, #16
     bac:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     bae:	7b93      	ldrb	r3, [r2, #14]
     bb0:	06db      	lsls	r3, r3, #27
     bb2:	d5fc      	bpl.n	bae <i2cLcdClear+0x52>
     bb4:	3901      	subs	r1, #1
     bb6:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     bb8:	2900      	cmp	r1, #0
     bba:	d1f7      	bne.n	bac <i2cLcdClear+0x50>
	i2c_write(LCD_write_buffer,1,LCD_SLAVE_ADDR);
	timerDelay(3);
    }
     bbc:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bbe:	4a0b      	ldr	r2, [pc, #44]	; (bec <i2cLcdClear+0x90>)
     bc0:	6851      	ldr	r1, [r2, #4]
     bc2:	23c0      	movs	r3, #192	; 0xc0
     bc4:	029b      	lsls	r3, r3, #10
     bc6:	430b      	orrs	r3, r1
     bc8:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     bca:	2041      	movs	r0, #65	; 0x41
     bcc:	4b09      	ldr	r3, [pc, #36]	; (bf4 <i2cLcdClear+0x98>)
     bce:	4798      	blx	r3
     bd0:	e7e6      	b.n	ba0 <i2cLcdClear+0x44>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bd2:	4a06      	ldr	r2, [pc, #24]	; (bec <i2cLcdClear+0x90>)
     bd4:	6851      	ldr	r1, [r2, #4]
     bd6:	23c0      	movs	r3, #192	; 0xc0
     bd8:	029b      	lsls	r3, r3, #10
     bda:	430b      	orrs	r3, r1
     bdc:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     bde:	2042      	movs	r0, #66	; 0x42
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <i2cLcdClear+0x98>)
     be2:	4798      	blx	r3
     be4:	e7dc      	b.n	ba0 <i2cLcdClear+0x44>
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	2000029c 	.word	0x2000029c
     bec:	42001000 	.word	0x42001000
     bf0:	42003000 	.word	0x42003000
     bf4:	00000b1d 	.word	0x00000b1d

00000bf8 <i2cLcdPrint>:
	Wire.send(iRow);
	Wire.endTransmission();
}
*/
      
void i2cLcdPrint(uint8_t iRows, uint8_t iCols, char s[]) {
     bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LCD_write_buffer[0] = 0x04;
     bfa:	4b2b      	ldr	r3, [pc, #172]	; (ca8 <i2cLcdPrint+0xb0>)
     bfc:	2404      	movs	r4, #4
     bfe:	701c      	strb	r4, [r3, #0]
	LCD_write_buffer[1] = iCols;
     c00:	7059      	strb	r1, [r3, #1]
	LCD_write_buffer[2] = iRows;
     c02:	7098      	strb	r0, [r3, #2]
	int i = 0;
	char *p = s;
	while (*p) {
     c04:	7811      	ldrb	r1, [r2, #0]
     c06:	2900      	cmp	r1, #0
     c08:	d038      	beq.n	c7c <i2cLcdPrint+0x84>
     c0a:	2300      	movs	r3, #0
		i++;
		LCD_write_buffer[2+i] = *p++;
     c0c:	4c26      	ldr	r4, [pc, #152]	; (ca8 <i2cLcdPrint+0xb0>)
		i++;
     c0e:	3301      	adds	r3, #1
		LCD_write_buffer[2+i] = *p++;
     c10:	18e0      	adds	r0, r4, r3
     c12:	7081      	strb	r1, [r0, #2]
	while (*p) {
     c14:	5cd1      	ldrb	r1, [r2, r3]
     c16:	2900      	cmp	r1, #0
     c18:	d1f9      	bne.n	c0e <i2cLcdPrint+0x16>
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     c1a:	2102      	movs	r1, #2
     c1c:	4a23      	ldr	r2, [pc, #140]	; (cac <i2cLcdPrint+0xb4>)
     c1e:	6251      	str	r1, [r2, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     c20:	0010      	movs	r0, r2
     c22:	3901      	subs	r1, #1
     c24:	7e02      	ldrb	r2, [r0, #24]
     c26:	420a      	tst	r2, r1
     c28:	d0fc      	beq.n	c24 <i2cLcdPrint+0x2c>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c2a:	4a20      	ldr	r2, [pc, #128]	; (cac <i2cLcdPrint+0xb4>)
     c2c:	8b52      	ldrh	r2, [r2, #26]
     c2e:	0752      	lsls	r2, r2, #29
     c30:	d426      	bmi.n	c80 <i2cLcdPrint+0x88>
	}
	i2c_write(LCD_write_buffer,3+i,LCD_SLAVE_ADDR);
     c32:	1cd9      	adds	r1, r3, #3
     c34:	000a      	movs	r2, r1
	for (int i = 0; i < size; i++)
     c36:	2400      	movs	r4, #0
     c38:	2900      	cmp	r1, #0
     c3a:	dd0f      	ble.n	c5c <i2cLcdPrint+0x64>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     c3c:	4f1a      	ldr	r7, [pc, #104]	; (ca8 <i2cLcdPrint+0xb0>)
     c3e:	491b      	ldr	r1, [pc, #108]	; (cac <i2cLcdPrint+0xb4>)
     c40:	2628      	movs	r6, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     c42:	2001      	movs	r0, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c44:	2504      	movs	r5, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     c46:	5de3      	ldrb	r3, [r4, r7]
     c48:	558b      	strb	r3, [r1, r6]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     c4a:	7e0b      	ldrb	r3, [r1, #24]
     c4c:	4203      	tst	r3, r0
     c4e:	d0fc      	beq.n	c4a <i2cLcdPrint+0x52>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c50:	8b4b      	ldrh	r3, [r1, #26]
     c52:	422b      	tst	r3, r5
     c54:	d11e      	bne.n	c94 <i2cLcdPrint+0x9c>
	for (int i = 0; i < size; i++)
     c56:	3401      	adds	r4, #1
     c58:	42a2      	cmp	r2, r4
     c5a:	d1f4      	bne.n	c46 <i2cLcdPrint+0x4e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c5c:	4a13      	ldr	r2, [pc, #76]	; (cac <i2cLcdPrint+0xb4>)
     c5e:	6851      	ldr	r1, [r2, #4]
     c60:	23c0      	movs	r3, #192	; 0xc0
     c62:	029b      	lsls	r3, r3, #10
     c64:	430b      	orrs	r3, r1
     c66:	6053      	str	r3, [r2, #4]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     c68:	4b11      	ldr	r3, [pc, #68]	; (cb0 <i2cLcdPrint+0xb8>)
     c6a:	2200      	movs	r2, #0
     c6c:	821a      	strh	r2, [r3, #16]
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     c6e:	3210      	adds	r2, #16
     c70:	739a      	strb	r2, [r3, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     c72:	001a      	movs	r2, r3
     c74:	7b93      	ldrb	r3, [r2, #14]
     c76:	06db      	lsls	r3, r3, #27
     c78:	d5fc      	bpl.n	c74 <i2cLcdPrint+0x7c>
	timerDelay(1);
}
     c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int i = 0;
     c7c:	2300      	movs	r3, #0
     c7e:	e7cc      	b.n	c1a <i2cLcdPrint+0x22>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c80:	4a0a      	ldr	r2, [pc, #40]	; (cac <i2cLcdPrint+0xb4>)
     c82:	6851      	ldr	r1, [r2, #4]
     c84:	23c0      	movs	r3, #192	; 0xc0
     c86:	029b      	lsls	r3, r3, #10
     c88:	430b      	orrs	r3, r1
     c8a:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     c8c:	2041      	movs	r0, #65	; 0x41
     c8e:	4b09      	ldr	r3, [pc, #36]	; (cb4 <i2cLcdPrint+0xbc>)
     c90:	4798      	blx	r3
     c92:	e7e9      	b.n	c68 <i2cLcdPrint+0x70>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c94:	4a05      	ldr	r2, [pc, #20]	; (cac <i2cLcdPrint+0xb4>)
     c96:	6851      	ldr	r1, [r2, #4]
     c98:	23c0      	movs	r3, #192	; 0xc0
     c9a:	029b      	lsls	r3, r3, #10
     c9c:	430b      	orrs	r3, r1
     c9e:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     ca0:	2042      	movs	r0, #66	; 0x42
     ca2:	4b04      	ldr	r3, [pc, #16]	; (cb4 <i2cLcdPrint+0xbc>)
     ca4:	4798      	blx	r3
     ca6:	e7df      	b.n	c68 <i2cLcdPrint+0x70>
     ca8:	2000029c 	.word	0x2000029c
     cac:	42001000 	.word	0x42001000
     cb0:	42003000 	.word	0x42003000
     cb4:	00000b1d 	.word	0x00000b1d

00000cb8 <i2cLcdTemp>:
void i2cLcdTemp() {
     cb8:	b510      	push	{r4, lr}
	str1[0] = 'T';
     cba:	4a0b      	ldr	r2, [pc, #44]	; (ce8 <i2cLcdTemp+0x30>)
     cbc:	2354      	movs	r3, #84	; 0x54
     cbe:	7013      	strb	r3, [r2, #0]
	str1[1] = 'e';
     cc0:	3311      	adds	r3, #17
     cc2:	7053      	strb	r3, [r2, #1]
	str1[2] = 'm';
     cc4:	3308      	adds	r3, #8
     cc6:	7093      	strb	r3, [r2, #2]
	str1[3] = 'p';
     cc8:	3303      	adds	r3, #3
     cca:	70d3      	strb	r3, [r2, #3]
	str1[4] = ':';
     ccc:	3b36      	subs	r3, #54	; 0x36
     cce:	7113      	strb	r3, [r2, #4]
	str1[5] = ' ';
     cd0:	3b1a      	subs	r3, #26
     cd2:	7153      	strb	r3, [r2, #5]
	str1[6] = ' ';
     cd4:	7193      	strb	r3, [r2, #6]
	str1[7] = ' ';
     cd6:	71d3      	strb	r3, [r2, #7]
	str1[8] = ' ';
     cd8:	7213      	strb	r3, [r2, #8]
	str1[9] = 'C';
     cda:	3323      	adds	r3, #35	; 0x23
     cdc:	7253      	strb	r3, [r2, #9]
	i2cLcdPrint(0, 20, str1);
     cde:	2114      	movs	r1, #20
     ce0:	2000      	movs	r0, #0
     ce2:	4b02      	ldr	r3, [pc, #8]	; (cec <i2cLcdTemp+0x34>)
     ce4:	4798      	blx	r3
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	20000408 	.word	0x20000408
     cec:	00000bf9 	.word	0x00000bf9

00000cf0 <i2cLcdRH>:
void i2cLcdRH() {
     cf0:	b510      	push	{r4, lr}
	str2[0] = 'R';
     cf2:	4a09      	ldr	r2, [pc, #36]	; (d18 <i2cLcdRH+0x28>)
     cf4:	2352      	movs	r3, #82	; 0x52
     cf6:	7013      	strb	r3, [r2, #0]
	str2[1] = 'H';
     cf8:	3b0a      	subs	r3, #10
     cfa:	7053      	strb	r3, [r2, #1]
	str2[2] = ':';
     cfc:	3b0e      	subs	r3, #14
     cfe:	7093      	strb	r3, [r2, #2]
	str2[3] = ' ';
     d00:	3b1a      	subs	r3, #26
     d02:	70d3      	strb	r3, [r2, #3]
	str2[4] = ' ';
     d04:	7113      	strb	r3, [r2, #4]
	str2[5] = ' ';
     d06:	7153      	strb	r3, [r2, #5]
	str2[6] = '%';
     d08:	3305      	adds	r3, #5
     d0a:	7193      	strb	r3, [r2, #6]
	i2cLcdPrint(0, 32, str2);	
     d0c:	2120      	movs	r1, #32
     d0e:	2000      	movs	r0, #0
     d10:	4b02      	ldr	r3, [pc, #8]	; (d1c <i2cLcdRH+0x2c>)
     d12:	4798      	blx	r3
}
     d14:	bd10      	pop	{r4, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	2000040c 	.word	0x2000040c
     d1c:	00000bf9 	.word	0x00000bf9

00000d20 <i2cLcdprintNum>:
{
     d20:	b5f0      	push	{r4, r5, r6, r7, lr}
     d22:	b083      	sub	sp, #12
     d24:	0007      	movs	r7, r0
     d26:	9101      	str	r1, [sp, #4]
     d28:	0016      	movs	r6, r2
	str3[0] = (d + '0');
     d2a:	4c0a      	ldr	r4, [pc, #40]	; (d54 <i2cLcdprintNum+0x34>)
	d = in / ((int) pow(10, 1)) % 10;
     d2c:	210a      	movs	r1, #10
     d2e:	4b0a      	ldr	r3, [pc, #40]	; (d58 <i2cLcdprintNum+0x38>)
     d30:	4798      	blx	r3
     d32:	4d0a      	ldr	r5, [pc, #40]	; (d5c <i2cLcdprintNum+0x3c>)
     d34:	210a      	movs	r1, #10
     d36:	47a8      	blx	r5
	str3[0] = (d + '0');
     d38:	3130      	adds	r1, #48	; 0x30
     d3a:	7021      	strb	r1, [r4, #0]
	u = in / ((int) pow(10, 0)) % 10;
     d3c:	210a      	movs	r1, #10
     d3e:	0038      	movs	r0, r7
     d40:	47a8      	blx	r5
	str3[1] = (u + '0');
     d42:	3130      	adds	r1, #48	; 0x30
     d44:	7061      	strb	r1, [r4, #1]
	i2cLcdPrint(Col,Row,str3);
     d46:	0022      	movs	r2, r4
     d48:	0031      	movs	r1, r6
     d4a:	9801      	ldr	r0, [sp, #4]
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <i2cLcdprintNum+0x40>)
     d4e:	4798      	blx	r3
}
     d50:	b003      	add	sp, #12
     d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d54:	20000404 	.word	0x20000404
     d58:	000049e1 	.word	0x000049e1
     d5c:	00004bad 	.word	0x00004bad
     d60:	00000bf9 	.word	0x00000bf9

00000d64 <i2cGetBright>:
		LCD_write_buffer[1] = val;
		i2c_write(LCD_write_buffer,2,LCD_SLAVE_ADDR);
		timerDelay(3);
      }
      
      uint8_t i2cGetBright(void) {
     d64:	b510      	push	{r4, lr}
		LCD_write_buffer[0] = 0x09;
     d66:	2209      	movs	r2, #9
     d68:	4b32      	ldr	r3, [pc, #200]	; (e34 <i2cGetBright+0xd0>)
     d6a:	701a      	strb	r2, [r3, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     d6c:	3a07      	subs	r2, #7
     d6e:	4b32      	ldr	r3, [pc, #200]	; (e38 <i2cGetBright+0xd4>)
     d70:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     d72:	0019      	movs	r1, r3
     d74:	3a01      	subs	r2, #1
     d76:	7e0b      	ldrb	r3, [r1, #24]
     d78:	4213      	tst	r3, r2
     d7a:	d0fc      	beq.n	d76 <i2cGetBright+0x12>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     d7c:	4b2e      	ldr	r3, [pc, #184]	; (e38 <i2cGetBright+0xd4>)
     d7e:	8b5b      	ldrh	r3, [r3, #26]
     d80:	075b      	lsls	r3, r3, #29
     d82:	d43c      	bmi.n	dfe <i2cGetBright+0x9a>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     d84:	2109      	movs	r1, #9
     d86:	2328      	movs	r3, #40	; 0x28
     d88:	4a2b      	ldr	r2, [pc, #172]	; (e38 <i2cGetBright+0xd4>)
     d8a:	54d1      	strb	r1, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     d8c:	0011      	movs	r1, r2
     d8e:	2201      	movs	r2, #1
     d90:	7e0b      	ldrb	r3, [r1, #24]
     d92:	4213      	tst	r3, r2
     d94:	d0fc      	beq.n	d90 <i2cGetBright+0x2c>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     d96:	4b28      	ldr	r3, [pc, #160]	; (e38 <i2cGetBright+0xd4>)
     d98:	8b5b      	ldrh	r3, [r3, #26]
     d9a:	075b      	lsls	r3, r3, #29
     d9c:	d439      	bmi.n	e12 <i2cGetBright+0xae>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d9e:	4a26      	ldr	r2, [pc, #152]	; (e38 <i2cGetBright+0xd4>)
     da0:	6851      	ldr	r1, [r2, #4]
     da2:	23c0      	movs	r3, #192	; 0xc0
     da4:	029b      	lsls	r3, r3, #10
     da6:	430b      	orrs	r3, r1
     da8:	6053      	str	r3, [r2, #4]
}

//-----------------------------------------------------------------------------
inline bool i2c_read(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
     daa:	2203      	movs	r2, #3
     dac:	4b22      	ldr	r3, [pc, #136]	; (e38 <i2cGetBright+0xd4>)
     dae:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
     db0:	0019      	movs	r1, r3
     db2:	3a01      	subs	r2, #1
     db4:	7e0b      	ldrb	r3, [r1, #24]
     db6:	4213      	tst	r3, r2
     db8:	d0fc      	beq.n	db4 <i2cGetBright+0x50>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     dba:	4b1f      	ldr	r3, [pc, #124]	; (e38 <i2cGetBright+0xd4>)
     dbc:	8b5b      	ldrh	r3, [r3, #26]
     dbe:	075b      	lsls	r3, r3, #29
     dc0:	d431      	bmi.n	e26 <i2cGetBright+0xc2>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		//dbg_log("I2C: RXNACK during read (address)\r\n");
		return false;
	}

	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     dc2:	4b1d      	ldr	r3, [pc, #116]	; (e38 <i2cGetBright+0xd4>)
     dc4:	685a      	ldr	r2, [r3, #4]
     dc6:	491d      	ldr	r1, [pc, #116]	; (e3c <i2cGetBright+0xd8>)
     dc8:	400a      	ands	r2, r1
     dca:	605a      	str	r2, [r3, #4]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
	}

	if (size)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     dcc:	6859      	ldr	r1, [r3, #4]
     dce:	2280      	movs	r2, #128	; 0x80
     dd0:	02d2      	lsls	r2, r2, #11
     dd2:	430a      	orrs	r2, r1
     dd4:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     dd6:	6859      	ldr	r1, [r3, #4]
     dd8:	22c0      	movs	r2, #192	; 0xc0
     dda:	0292      	lsls	r2, r2, #10
     ddc:	430a      	orrs	r2, r1
     dde:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
     de0:	2228      	movs	r2, #40	; 0x28
     de2:	5c99      	ldrb	r1, [r3, r2]
     de4:	4a16      	ldr	r2, [pc, #88]	; (e40 <i2cGetBright+0xdc>)
     de6:	7011      	strb	r1, [r2, #0]
	}
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
     de8:	8b5a      	ldrh	r2, [r3, #26]
     dea:	2110      	movs	r1, #16
     dec:	430a      	orrs	r2, r1
     dee:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
     df0:	001a      	movs	r2, r3
     df2:	69d3      	ldr	r3, [r2, #28]
     df4:	2b00      	cmp	r3, #0
     df6:	d1fc      	bne.n	df2 <i2cGetBright+0x8e>
		i2c_write(LCD_write_buffer,1,LCD_SLAVE_ADDR);
		i2c_read(LCD_read_buffer,1,LCD_SLAVE_ADDR);
			return *LCD_read_buffer;
     df8:	4b11      	ldr	r3, [pc, #68]	; (e40 <i2cGetBright+0xdc>)
     dfa:	7818      	ldrb	r0, [r3, #0]
      }
     dfc:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     dfe:	4a0e      	ldr	r2, [pc, #56]	; (e38 <i2cGetBright+0xd4>)
     e00:	6851      	ldr	r1, [r2, #4]
     e02:	23c0      	movs	r3, #192	; 0xc0
     e04:	029b      	lsls	r3, r3, #10
     e06:	430b      	orrs	r3, r1
     e08:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     e0a:	2041      	movs	r0, #65	; 0x41
     e0c:	4b0d      	ldr	r3, [pc, #52]	; (e44 <i2cGetBright+0xe0>)
     e0e:	4798      	blx	r3
     e10:	e7cb      	b.n	daa <i2cGetBright+0x46>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e12:	4a09      	ldr	r2, [pc, #36]	; (e38 <i2cGetBright+0xd4>)
     e14:	6851      	ldr	r1, [r2, #4]
     e16:	23c0      	movs	r3, #192	; 0xc0
     e18:	029b      	lsls	r3, r3, #10
     e1a:	430b      	orrs	r3, r1
     e1c:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     e1e:	2042      	movs	r0, #66	; 0x42
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <i2cGetBright+0xe0>)
     e22:	4798      	blx	r3
     e24:	e7c1      	b.n	daa <i2cGetBright+0x46>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e26:	4a04      	ldr	r2, [pc, #16]	; (e38 <i2cGetBright+0xd4>)
     e28:	6851      	ldr	r1, [r2, #4]
     e2a:	23c0      	movs	r3, #192	; 0xc0
     e2c:	029b      	lsls	r3, r3, #10
     e2e:	430b      	orrs	r3, r1
     e30:	6053      	str	r3, [r2, #4]
     e32:	e7e1      	b.n	df8 <i2cGetBright+0x94>
     e34:	2000029c 	.word	0x2000029c
     e38:	42001000 	.word	0x42001000
     e3c:	fffbffff 	.word	0xfffbffff
     e40:	20000274 	.word	0x20000274
     e44:	00000b1d 	.word	0x00000b1d

00000e48 <i2cGetContrast>:
      
      uint8_t i2cGetContrast(void) {
     e48:	b510      	push	{r4, lr}
		LCD_write_buffer[0] = 0x0A;
     e4a:	220a      	movs	r2, #10
     e4c:	4b32      	ldr	r3, [pc, #200]	; (f18 <i2cGetContrast+0xd0>)
     e4e:	701a      	strb	r2, [r3, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     e50:	3a08      	subs	r2, #8
     e52:	4b32      	ldr	r3, [pc, #200]	; (f1c <i2cGetContrast+0xd4>)
     e54:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     e56:	0019      	movs	r1, r3
     e58:	3a01      	subs	r2, #1
     e5a:	7e0b      	ldrb	r3, [r1, #24]
     e5c:	4213      	tst	r3, r2
     e5e:	d0fc      	beq.n	e5a <i2cGetContrast+0x12>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     e60:	4b2e      	ldr	r3, [pc, #184]	; (f1c <i2cGetContrast+0xd4>)
     e62:	8b5b      	ldrh	r3, [r3, #26]
     e64:	075b      	lsls	r3, r3, #29
     e66:	d43c      	bmi.n	ee2 <i2cGetContrast+0x9a>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     e68:	210a      	movs	r1, #10
     e6a:	2328      	movs	r3, #40	; 0x28
     e6c:	4a2b      	ldr	r2, [pc, #172]	; (f1c <i2cGetContrast+0xd4>)
     e6e:	54d1      	strb	r1, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     e70:	0011      	movs	r1, r2
     e72:	2201      	movs	r2, #1
     e74:	7e0b      	ldrb	r3, [r1, #24]
     e76:	4213      	tst	r3, r2
     e78:	d0fc      	beq.n	e74 <i2cGetContrast+0x2c>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     e7a:	4b28      	ldr	r3, [pc, #160]	; (f1c <i2cGetContrast+0xd4>)
     e7c:	8b5b      	ldrh	r3, [r3, #26]
     e7e:	075b      	lsls	r3, r3, #29
     e80:	d439      	bmi.n	ef6 <i2cGetContrast+0xae>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e82:	4a26      	ldr	r2, [pc, #152]	; (f1c <i2cGetContrast+0xd4>)
     e84:	6851      	ldr	r1, [r2, #4]
     e86:	23c0      	movs	r3, #192	; 0xc0
     e88:	029b      	lsls	r3, r3, #10
     e8a:	430b      	orrs	r3, r1
     e8c:	6053      	str	r3, [r2, #4]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
     e8e:	2203      	movs	r2, #3
     e90:	4b22      	ldr	r3, [pc, #136]	; (f1c <i2cGetContrast+0xd4>)
     e92:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
     e94:	0019      	movs	r1, r3
     e96:	3a01      	subs	r2, #1
     e98:	7e0b      	ldrb	r3, [r1, #24]
     e9a:	4213      	tst	r3, r2
     e9c:	d0fc      	beq.n	e98 <i2cGetContrast+0x50>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     e9e:	4b1f      	ldr	r3, [pc, #124]	; (f1c <i2cGetContrast+0xd4>)
     ea0:	8b5b      	ldrh	r3, [r3, #26]
     ea2:	075b      	lsls	r3, r3, #29
     ea4:	d431      	bmi.n	f0a <i2cGetContrast+0xc2>
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ea6:	4b1d      	ldr	r3, [pc, #116]	; (f1c <i2cGetContrast+0xd4>)
     ea8:	685a      	ldr	r2, [r3, #4]
     eaa:	491d      	ldr	r1, [pc, #116]	; (f20 <i2cGetContrast+0xd8>)
     eac:	400a      	ands	r2, r1
     eae:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     eb0:	6859      	ldr	r1, [r3, #4]
     eb2:	2280      	movs	r2, #128	; 0x80
     eb4:	02d2      	lsls	r2, r2, #11
     eb6:	430a      	orrs	r2, r1
     eb8:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     eba:	6859      	ldr	r1, [r3, #4]
     ebc:	22c0      	movs	r2, #192	; 0xc0
     ebe:	0292      	lsls	r2, r2, #10
     ec0:	430a      	orrs	r2, r1
     ec2:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
     ec4:	2228      	movs	r2, #40	; 0x28
     ec6:	5c99      	ldrb	r1, [r3, r2]
     ec8:	4a16      	ldr	r2, [pc, #88]	; (f24 <i2cGetContrast+0xdc>)
     eca:	7011      	strb	r1, [r2, #0]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
     ecc:	8b5a      	ldrh	r2, [r3, #26]
     ece:	2110      	movs	r1, #16
     ed0:	430a      	orrs	r2, r1
     ed2:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
     ed4:	001a      	movs	r2, r3
     ed6:	69d3      	ldr	r3, [r2, #28]
     ed8:	2b00      	cmp	r3, #0
     eda:	d1fc      	bne.n	ed6 <i2cGetContrast+0x8e>
		i2c_write(LCD_write_buffer,1,LCD_SLAVE_ADDR);
		i2c_read(LCD_read_buffer,1,LCD_SLAVE_ADDR);
		return *LCD_read_buffer;
     edc:	4b11      	ldr	r3, [pc, #68]	; (f24 <i2cGetContrast+0xdc>)
     ede:	7818      	ldrb	r0, [r3, #0]
      }
     ee0:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ee2:	4a0e      	ldr	r2, [pc, #56]	; (f1c <i2cGetContrast+0xd4>)
     ee4:	6851      	ldr	r1, [r2, #4]
     ee6:	23c0      	movs	r3, #192	; 0xc0
     ee8:	029b      	lsls	r3, r3, #10
     eea:	430b      	orrs	r3, r1
     eec:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     eee:	2041      	movs	r0, #65	; 0x41
     ef0:	4b0d      	ldr	r3, [pc, #52]	; (f28 <i2cGetContrast+0xe0>)
     ef2:	4798      	blx	r3
     ef4:	e7cb      	b.n	e8e <i2cGetContrast+0x46>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ef6:	4a09      	ldr	r2, [pc, #36]	; (f1c <i2cGetContrast+0xd4>)
     ef8:	6851      	ldr	r1, [r2, #4]
     efa:	23c0      	movs	r3, #192	; 0xc0
     efc:	029b      	lsls	r3, r3, #10
     efe:	430b      	orrs	r3, r1
     f00:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     f02:	2042      	movs	r0, #66	; 0x42
     f04:	4b08      	ldr	r3, [pc, #32]	; (f28 <i2cGetContrast+0xe0>)
     f06:	4798      	blx	r3
     f08:	e7c1      	b.n	e8e <i2cGetContrast+0x46>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f0a:	4a04      	ldr	r2, [pc, #16]	; (f1c <i2cGetContrast+0xd4>)
     f0c:	6851      	ldr	r1, [r2, #4]
     f0e:	23c0      	movs	r3, #192	; 0xc0
     f10:	029b      	lsls	r3, r3, #10
     f12:	430b      	orrs	r3, r1
     f14:	6053      	str	r3, [r2, #4]
     f16:	e7e1      	b.n	edc <i2cGetContrast+0x94>
     f18:	2000029c 	.word	0x2000029c
     f1c:	42001000 	.word	0x42001000
     f20:	fffbffff 	.word	0xfffbffff
     f24:	20000274 	.word	0x20000274
     f28:	00000b1d 	.word	0x00000b1d

00000f2c <RTC_init>:
#include "RTC.h"

void RTC_init(void)
{
	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_RTC;
     f2c:	4a13      	ldr	r2, [pc, #76]	; (f7c <RTC_init+0x50>)
     f2e:	6993      	ldr	r3, [r2, #24]
     f30:	2120      	movs	r1, #32
     f32:	430b      	orrs	r3, r1
     f34:	6193      	str	r3, [r2, #24]
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f36:	4a12      	ldr	r2, [pc, #72]	; (f80 <RTC_init+0x54>)
     f38:	4b12      	ldr	r3, [pc, #72]	; (f84 <RTC_init+0x58>)
     f3a:	805a      	strh	r2, [r3, #2]

	/* Set clear on compare match. */
	//tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;

	/* Set temporary value to register. */
	RTC->MODE2.CTRL.reg = tmp_reg;
     f3c:	4b12      	ldr	r3, [pc, #72]	; (f88 <RTC_init+0x5c>)
     f3e:	2248      	movs	r2, #72	; 0x48
     f40:	801a      	strh	r2, [r3, #0]
	
	/* Set continuously mode. */
	RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     f42:	885a      	ldrh	r2, [r3, #2]
     f44:	2180      	movs	r1, #128	; 0x80
     f46:	01c9      	lsls	r1, r1, #7
     f48:	430a      	orrs	r2, r1
     f4a:	805a      	strh	r2, [r3, #2]
	
	RTC->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM0;
     f4c:	2201      	movs	r2, #1
     f4e:	71da      	strb	r2, [r3, #7]
	
	/* Enable RTC module. */
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_MODE(2) | RTC_CALENDAR_PRESCALER_DIV_1;
     f50:	881a      	ldrh	r2, [r3, #0]
     f52:	2108      	movs	r1, #8
     f54:	2008      	movs	r0, #8
     f56:	4302      	orrs	r2, r0
     f58:	801a      	strh	r2, [r3, #0]
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     f5a:	881a      	ldrh	r2, [r3, #0]
     f5c:	3806      	subs	r0, #6
     f5e:	4302      	orrs	r2, r0
     f60:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     f62:	4a0a      	ldr	r2, [pc, #40]	; (f8c <RTC_init+0x60>)
     f64:	23c0      	movs	r3, #192	; 0xc0
     f66:	005b      	lsls	r3, r3, #1
     f68:	50d1      	str	r1, [r2, r3]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     f6a:	20c0      	movs	r0, #192	; 0xc0
     f6c:	0080      	lsls	r0, r0, #2
     f6e:	5813      	ldr	r3, [r2, r0]
     f70:	021b      	lsls	r3, r3, #8
     f72:	0a1b      	lsrs	r3, r3, #8
     f74:	5013      	str	r3, [r2, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f76:	6011      	str	r1, [r2, #0]
	
	NVIC_ClearPendingIRQ(RTC_IRQn); 
	NVIC_SetPriority(RTC_IRQn, 100);
	NVIC_EnableIRQ(RTC_IRQn);
}
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	40000400 	.word	0x40000400
     f80:	00004404 	.word	0x00004404
     f84:	40000c00 	.word	0x40000c00
     f88:	40001400 	.word	0x40001400
     f8c:	e000e100 	.word	0xe000e100

00000f90 <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time1->year - time1->year_init_value) <<
     f90:	88c3      	ldrh	r3, [r0, #6]
     f92:	8902      	ldrh	r2, [r0, #8]
     f94:	1a9a      	subs	r2, r3, r2
     f96:	0692      	lsls	r2, r2, #26
	RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time1->month << RTC_MODE2_CLOCK_MONTH_Pos);
     f98:	7943      	ldrb	r3, [r0, #5]
     f9a:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time1->day << RTC_MODE2_CLOCK_DAY_Pos);
     f9c:	7901      	ldrb	r1, [r0, #4]
     f9e:	0449      	lsls	r1, r1, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time1->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     fa0:	430b      	orrs	r3, r1
     fa2:	7881      	ldrb	r1, [r0, #2]
     fa4:	0309      	lsls	r1, r1, #12
     fa6:	430b      	orrs	r3, r1
     fa8:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(time1->pm)) {
     faa:	78c2      	ldrb	r2, [r0, #3]
     fac:	2a00      	cmp	r2, #0
     fae:	d102      	bne.n	fb6 <rtc_calendar_time_to_register_value+0x26>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     fb0:	2280      	movs	r2, #128	; 0x80
     fb2:	0252      	lsls	r2, r2, #9
     fb4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time1->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     fb6:	7842      	ldrb	r2, [r0, #1]
     fb8:	0192      	lsls	r2, r2, #6

	/* Set second value into register_value. */
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
     fba:	7800      	ldrb	r0, [r0, #0]
     fbc:	4310      	orrs	r0, r2
     fbe:	4318      	orrs	r0, r3
	

	return register_value;
}
     fc0:	4770      	bx	lr

00000fc2 <rtc_calendar_register_value_to_time>:

void rtc_calendar_register_value_to_time(uint32_t register_value, struct rtc_calendar_time *time1)
{
	/* Set year plus value of initial year. */
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     fc2:	0e83      	lsrs	r3, r0, #26
	RTC_MODE2_CLOCK_YEAR_Pos) + time1->year_init_value;
     fc4:	890a      	ldrh	r2, [r1, #8]
     fc6:	189b      	adds	r3, r3, r2
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     fc8:	80cb      	strh	r3, [r1, #6]

	/* Set month value into time struct. */
	time1->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     fca:	0183      	lsls	r3, r0, #6
     fcc:	0f1b      	lsrs	r3, r3, #28
     fce:	714b      	strb	r3, [r1, #5]
	RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time1->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     fd0:	0283      	lsls	r3, r0, #10
     fd2:	0edb      	lsrs	r3, r3, #27
     fd4:	710b      	strb	r3, [r1, #4]
	RTC_MODE2_CLOCK_DAY_Pos);

	if (time1->clock_24h) {
     fd6:	7a8b      	ldrb	r3, [r1, #10]
     fd8:	2b00      	cmp	r3, #0
     fda:	d10c      	bne.n	ff6 <rtc_calendar_register_value_to_time+0x34>
		time1->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
		RTC_MODE2_CLOCK_HOUR_Pos);
		} else {
		/* Set hour in 12h mode. */
		time1->hour = ((register_value &
		(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     fdc:	0403      	lsls	r3, r0, #16
     fde:	0f1b      	lsrs	r3, r3, #28
		time1->hour = ((register_value &
     fe0:	708b      	strb	r3, [r1, #2]
		RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time1->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     fe2:	03c3      	lsls	r3, r0, #15
     fe4:	0fdb      	lsrs	r3, r3, #31
     fe6:	70cb      	strb	r3, [r1, #3]
	}

	/* Set minute value into time struct. */
	time1->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     fe8:	0982      	lsrs	r2, r0, #6
     fea:	233f      	movs	r3, #63	; 0x3f
     fec:	401a      	ands	r2, r3
     fee:	704a      	strb	r2, [r1, #1]
	RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time1->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     ff0:	4018      	ands	r0, r3
     ff2:	7008      	strb	r0, [r1, #0]
	RTC_MODE2_CLOCK_SECOND_Pos);	
}
     ff4:	4770      	bx	lr
		time1->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     ff6:	03c3      	lsls	r3, r0, #15
     ff8:	0edb      	lsrs	r3, r3, #27
     ffa:	708b      	strb	r3, [r1, #2]
     ffc:	e7f4      	b.n	fe8 <rtc_calendar_register_value_to_time+0x26>
	...

00001000 <rtc_calendar_get_time>:
{
    1000:	b510      	push	{r4, lr}
    1002:	0001      	movs	r1, r0
	if (!(time1->continuously_update)) {
    1004:	7ac3      	ldrb	r3, [r0, #11]
    1006:	2b00      	cmp	r3, #0
    1008:	d10c      	bne.n	1024 <rtc_calendar_get_time+0x24>
		RTC->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    100a:	4a0e      	ldr	r2, [pc, #56]	; (1044 <rtc_calendar_get_time+0x44>)
    100c:	4b0e      	ldr	r3, [pc, #56]	; (1048 <rtc_calendar_get_time+0x48>)
    100e:	805a      	strh	r2, [r3, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1010:	001a      	movs	r2, r3
    1012:	7a93      	ldrb	r3, [r2, #10]
    1014:	b25b      	sxtb	r3, r3
    1016:	2b00      	cmp	r3, #0
    1018:	dbfb      	blt.n	1012 <rtc_calendar_get_time+0x12>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    101a:	4b0b      	ldr	r3, [pc, #44]	; (1048 <rtc_calendar_get_time+0x48>)
    101c:	6918      	ldr	r0, [r3, #16]
	rtc_calendar_register_value_to_time(register_value, time1);
    101e:	4b0b      	ldr	r3, [pc, #44]	; (104c <rtc_calendar_get_time+0x4c>)
    1020:	4798      	blx	r3
}
    1022:	bd10      	pop	{r4, pc}
	} else if (!(RTC->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <rtc_calendar_get_time+0x48>)
    1026:	885b      	ldrh	r3, [r3, #2]
    1028:	045b      	lsls	r3, r3, #17
    102a:	d4f6      	bmi.n	101a <rtc_calendar_get_time+0x1a>
		RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    102c:	4a06      	ldr	r2, [pc, #24]	; (1048 <rtc_calendar_get_time+0x48>)
    102e:	8853      	ldrh	r3, [r2, #2]
    1030:	20c0      	movs	r0, #192	; 0xc0
    1032:	0200      	lsls	r0, r0, #8
    1034:	4303      	orrs	r3, r0
    1036:	8053      	strh	r3, [r2, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1038:	7a93      	ldrb	r3, [r2, #10]
    103a:	b25b      	sxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	dbfb      	blt.n	1038 <rtc_calendar_get_time+0x38>
    1040:	e7eb      	b.n	101a <rtc_calendar_get_time+0x1a>
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	ffff8000 	.word	0xffff8000
    1048:	40001400 	.word	0x40001400
    104c:	00000fc3 	.word	0x00000fc3

00001050 <rtc_calendar_set_time>:

void rtc_calendar_set_time (struct rtc_calendar_time *time1)
{
    1050:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    1052:	4b05      	ldr	r3, [pc, #20]	; (1068 <rtc_calendar_set_time+0x18>)
    1054:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1056:	4a05      	ldr	r2, [pc, #20]	; (106c <rtc_calendar_set_time+0x1c>)
    1058:	7a93      	ldrb	r3, [r2, #10]
    105a:	b25b      	sxtb	r3, r3
    105c:	2b00      	cmp	r3, #0
    105e:	dbfb      	blt.n	1058 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	RTC->MODE2.CLOCK.reg = register_value;
    1060:	4b02      	ldr	r3, [pc, #8]	; (106c <rtc_calendar_set_time+0x1c>)
    1062:	6118      	str	r0, [r3, #16]
}
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00000f91 	.word	0x00000f91
    106c:	40001400 	.word	0x40001400

00001070 <rtc_calendar_set_alarm>:

void rtc_calendar_set_alarm(struct rtc_calendar_time *time1)
{
    1070:	b510      	push	{r4, lr}
	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1072:	4a08      	ldr	r2, [pc, #32]	; (1094 <rtc_calendar_set_alarm+0x24>)
    1074:	7a93      	ldrb	r3, [r2, #10]
    1076:	b25b      	sxtb	r3, r3
    1078:	2b00      	cmp	r3, #0
    107a:	dbfb      	blt.n	1074 <rtc_calendar_set_alarm+0x4>
		/* Wait for synchronization */
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    107c:	4b06      	ldr	r3, [pc, #24]	; (1098 <rtc_calendar_set_alarm+0x28>)
    107e:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1080:	4a04      	ldr	r2, [pc, #16]	; (1094 <rtc_calendar_set_alarm+0x24>)
    1082:	7a93      	ldrb	r3, [r2, #10]
    1084:	b25b      	sxtb	r3, r3
    1086:	2b00      	cmp	r3, #0
    1088:	dbfb      	blt.n	1082 <rtc_calendar_set_alarm+0x12>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	RTC->MODE2.Mode2Alarm[0].ALARM.reg = register_value;
    108a:	4b02      	ldr	r3, [pc, #8]	; (1094 <rtc_calendar_set_alarm+0x24>)
    108c:	6198      	str	r0, [r3, #24]

	/* Set alarm mask */
	RTC->MODE2.Mode2Alarm[0].MASK.reg = RTC_MODE2_MASK_SEL_HHMMSS;
    108e:	2203      	movs	r2, #3
    1090:	771a      	strb	r2, [r3, #28]

	return STATUS_OK;
    1092:	bd10      	pop	{r4, pc}
    1094:	40001400 	.word	0x40001400
    1098:	00000f91 	.word	0x00000f91

0000109c <test_components>:
uint32_t NVM_i = 0;
int n;

void printNum(uint8_t in, uint8_t Col, uint8_t Row);

void test_components(void){			
    109c:	b570      	push	{r4, r5, r6, lr}
	
			/* Data ready to be sent */
			if (udi_cdc_is_rx_ready()) {
    109e:	4b56      	ldr	r3, [pc, #344]	; (11f8 <test_components+0x15c>)
    10a0:	4798      	blx	r3
    10a2:	2800      	cmp	r0, #0
    10a4:	d109      	bne.n	10ba <test_components+0x1e>
				rx_data = udi_cdc_getc();
			}
		switch(rx_data){
    10a6:	4b55      	ldr	r3, [pc, #340]	; (11fc <test_components+0x160>)
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	3b50      	subs	r3, #80	; 0x50
    10ac:	b2da      	uxtb	r2, r3
    10ae:	2a27      	cmp	r2, #39	; 0x27
    10b0:	d810      	bhi.n	10d4 <test_components+0x38>
    10b2:	0093      	lsls	r3, r2, #2
    10b4:	4a52      	ldr	r2, [pc, #328]	; (1200 <test_components+0x164>)
    10b6:	58d3      	ldr	r3, [r2, r3]
    10b8:	469f      	mov	pc, r3
				rx_data = udi_cdc_getc();
    10ba:	4b52      	ldr	r3, [pc, #328]	; (1204 <test_components+0x168>)
    10bc:	4798      	blx	r3
    10be:	4b4f      	ldr	r3, [pc, #316]	; (11fc <test_components+0x160>)
    10c0:	7018      	strb	r0, [r3, #0]
    10c2:	e7f0      	b.n	10a6 <test_components+0xa>
			case 'l' :
				OPT3001_data = OPT3001_read();
    10c4:	4b50      	ldr	r3, [pc, #320]	; (1208 <test_components+0x16c>)
    10c6:	4798      	blx	r3
    10c8:	4b50      	ldr	r3, [pc, #320]	; (120c <test_components+0x170>)
    10ca:	6018      	str	r0, [r3, #0]
				udi_cdc_putc(OPT3001_data[0] + '0');
    10cc:	7800      	ldrb	r0, [r0, #0]
    10ce:	3030      	adds	r0, #48	; 0x30
    10d0:	4b4f      	ldr	r3, [pc, #316]	; (1210 <test_components+0x174>)
    10d2:	4798      	blx	r3
				//i2cSetBright(0);
				//i2cSetContrast(255);	
			break;				
		}
			
			rx_data = 0;
    10d4:	2200      	movs	r2, #0
    10d6:	4b49      	ldr	r3, [pc, #292]	; (11fc <test_components+0x160>)
    10d8:	701a      	strb	r2, [r3, #0]
}
    10da:	bd70      	pop	{r4, r5, r6, pc}
				temp1 =  Si7021_GetTemp();
    10dc:	4b4d      	ldr	r3, [pc, #308]	; (1214 <test_components+0x178>)
    10de:	4798      	blx	r3
    10e0:	4b4d      	ldr	r3, [pc, #308]	; (1218 <test_components+0x17c>)
    10e2:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(temp1,0,26);
    10e4:	b2c0      	uxtb	r0, r0
    10e6:	221a      	movs	r2, #26
    10e8:	2100      	movs	r1, #0
    10ea:	4b4c      	ldr	r3, [pc, #304]	; (121c <test_components+0x180>)
    10ec:	4798      	blx	r3
				break;
    10ee:	e7f1      	b.n	10d4 <test_components+0x38>
				RH1 = Si7021_GetRH();
    10f0:	4b4b      	ldr	r3, [pc, #300]	; (1220 <test_components+0x184>)
    10f2:	4798      	blx	r3
    10f4:	4b4b      	ldr	r3, [pc, #300]	; (1224 <test_components+0x188>)
    10f6:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(RH1,0,36);
    10f8:	b2c0      	uxtb	r0, r0
    10fa:	2224      	movs	r2, #36	; 0x24
    10fc:	2100      	movs	r1, #0
    10fe:	4b47      	ldr	r3, [pc, #284]	; (121c <test_components+0x180>)
    1100:	4798      	blx	r3
			break;
    1102:	e7e7      	b.n	10d4 <test_components+0x38>
					error_code = nvm_read_buffer(
    1104:	4e48      	ldr	r6, [pc, #288]	; (1228 <test_components+0x18c>)
    1106:	4d49      	ldr	r5, [pc, #292]	; (122c <test_components+0x190>)
    1108:	4c49      	ldr	r4, [pc, #292]	; (1230 <test_components+0x194>)
    110a:	2240      	movs	r2, #64	; 0x40
    110c:	0031      	movs	r1, r6
    110e:	20fa      	movs	r0, #250	; 0xfa
    1110:	0240      	lsls	r0, r0, #9
    1112:	47a8      	blx	r5
    1114:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1116:	2805      	cmp	r0, #5
    1118:	d0f7      	beq.n	110a <test_components+0x6e>
    111a:	4c43      	ldr	r4, [pc, #268]	; (1228 <test_components+0x18c>)
    111c:	0026      	movs	r6, r4
    111e:	3640      	adds	r6, #64	; 0x40
					udi_cdc_putc(page_buffer[i] + '0');
    1120:	4d3b      	ldr	r5, [pc, #236]	; (1210 <test_components+0x174>)
    1122:	7820      	ldrb	r0, [r4, #0]
    1124:	3030      	adds	r0, #48	; 0x30
    1126:	47a8      	blx	r5
    1128:	3401      	adds	r4, #1
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    112a:	42b4      	cmp	r4, r6
    112c:	d1f9      	bne.n	1122 <test_components+0x86>
    112e:	e7d1      	b.n	10d4 <test_components+0x38>
		switch(rx_data){
    1130:	2300      	movs	r3, #0
					page_buffer[i] = i;
    1132:	4a3d      	ldr	r2, [pc, #244]	; (1228 <test_components+0x18c>)
    1134:	54d3      	strb	r3, [r2, r3]
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    1136:	3301      	adds	r3, #1
    1138:	2b40      	cmp	r3, #64	; 0x40
    113a:	d1fb      	bne.n	1134 <test_components+0x98>
					error_code = nvm_erase_row(
    113c:	26fa      	movs	r6, #250	; 0xfa
    113e:	0276      	lsls	r6, r6, #9
    1140:	4d3c      	ldr	r5, [pc, #240]	; (1234 <test_components+0x198>)
    1142:	4c3b      	ldr	r4, [pc, #236]	; (1230 <test_components+0x194>)
    1144:	0030      	movs	r0, r6
    1146:	47a8      	blx	r5
    1148:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    114a:	2805      	cmp	r0, #5
    114c:	d0fa      	beq.n	1144 <test_components+0xa8>
					error_code = nvm_write_buffer(
    114e:	4e36      	ldr	r6, [pc, #216]	; (1228 <test_components+0x18c>)
    1150:	4d39      	ldr	r5, [pc, #228]	; (1238 <test_components+0x19c>)
    1152:	4c37      	ldr	r4, [pc, #220]	; (1230 <test_components+0x194>)
    1154:	2240      	movs	r2, #64	; 0x40
    1156:	0031      	movs	r1, r6
    1158:	20fa      	movs	r0, #250	; 0xfa
    115a:	0240      	lsls	r0, r0, #9
    115c:	47a8      	blx	r5
    115e:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1160:	2805      	cmp	r0, #5
    1162:	d0f7      	beq.n	1154 <test_components+0xb8>
    1164:	e7b6      	b.n	10d4 <test_components+0x38>
					error_code = nvm_erase_row(
    1166:	26fa      	movs	r6, #250	; 0xfa
    1168:	0276      	lsls	r6, r6, #9
    116a:	4d32      	ldr	r5, [pc, #200]	; (1234 <test_components+0x198>)
    116c:	4c30      	ldr	r4, [pc, #192]	; (1230 <test_components+0x194>)
    116e:	0030      	movs	r0, r6
    1170:	47a8      	blx	r5
    1172:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1174:	2805      	cmp	r0, #5
    1176:	d0fa      	beq.n	116e <test_components+0xd2>
    1178:	e7ac      	b.n	10d4 <test_components+0x38>
				REG_PORT_OUTSET0 = PORT_PA27;
    117a:	2280      	movs	r2, #128	; 0x80
    117c:	0512      	lsls	r2, r2, #20
    117e:	4b2f      	ldr	r3, [pc, #188]	; (123c <test_components+0x1a0>)
    1180:	601a      	str	r2, [r3, #0]
				break;
    1182:	e7a7      	b.n	10d4 <test_components+0x38>
				rtc_calendar_get_time(&mytime);
    1184:	4c2e      	ldr	r4, [pc, #184]	; (1240 <test_components+0x1a4>)
    1186:	0020      	movs	r0, r4
    1188:	4b2e      	ldr	r3, [pc, #184]	; (1244 <test_components+0x1a8>)
    118a:	4798      	blx	r3
				i2cLcdprintNum(mytime.hour,0,4);
    118c:	78a0      	ldrb	r0, [r4, #2]
    118e:	2204      	movs	r2, #4
    1190:	2100      	movs	r1, #0
    1192:	4d22      	ldr	r5, [pc, #136]	; (121c <test_components+0x180>)
    1194:	47a8      	blx	r5
				i2cLcdprintNum(mytime.minute,0,7);
    1196:	7860      	ldrb	r0, [r4, #1]
    1198:	2207      	movs	r2, #7
    119a:	2100      	movs	r1, #0
    119c:	47a8      	blx	r5
				i2cLcdprintNum(mytime.second, 0, 10);
    119e:	7820      	ldrb	r0, [r4, #0]
    11a0:	220a      	movs	r2, #10
    11a2:	2100      	movs	r1, #0
    11a4:	47a8      	blx	r5
				if(mytime.pm)
    11a6:	78e3      	ldrb	r3, [r4, #3]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d009      	beq.n	11c0 <test_components+0x124>
					str[0]='A';
    11ac:	4a26      	ldr	r2, [pc, #152]	; (1248 <test_components+0x1ac>)
    11ae:	2341      	movs	r3, #65	; 0x41
    11b0:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    11b2:	330c      	adds	r3, #12
    11b4:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);
    11b6:	210e      	movs	r1, #14
    11b8:	2000      	movs	r0, #0
    11ba:	4b24      	ldr	r3, [pc, #144]	; (124c <test_components+0x1b0>)
    11bc:	4798      	blx	r3
    11be:	e789      	b.n	10d4 <test_components+0x38>
					str[0]='P';
    11c0:	4a21      	ldr	r2, [pc, #132]	; (1248 <test_components+0x1ac>)
    11c2:	2350      	movs	r3, #80	; 0x50
    11c4:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    11c6:	3b03      	subs	r3, #3
    11c8:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);					
    11ca:	210e      	movs	r1, #14
    11cc:	2000      	movs	r0, #0
    11ce:	4b1f      	ldr	r3, [pc, #124]	; (124c <test_components+0x1b0>)
    11d0:	4798      	blx	r3
    11d2:	e77f      	b.n	10d4 <test_components+0x38>
				bright = i2cGetBright();
    11d4:	4b1e      	ldr	r3, [pc, #120]	; (1250 <test_components+0x1b4>)
    11d6:	4798      	blx	r3
    11d8:	4c1e      	ldr	r4, [pc, #120]	; (1254 <test_components+0x1b8>)
    11da:	7020      	strb	r0, [r4, #0]
				contrast = i2cGetContrast();
    11dc:	4b1e      	ldr	r3, [pc, #120]	; (1258 <test_components+0x1bc>)
    11de:	4798      	blx	r3
    11e0:	4d1e      	ldr	r5, [pc, #120]	; (125c <test_components+0x1c0>)
    11e2:	7028      	strb	r0, [r5, #0]
				i2cLcdprintNum(bright,0,0);
    11e4:	7820      	ldrb	r0, [r4, #0]
    11e6:	2200      	movs	r2, #0
    11e8:	2100      	movs	r1, #0
    11ea:	4c0c      	ldr	r4, [pc, #48]	; (121c <test_components+0x180>)
    11ec:	47a0      	blx	r4
				i2cLcdprintNum(contrast,1,0);
    11ee:	7828      	ldrb	r0, [r5, #0]
    11f0:	2200      	movs	r2, #0
    11f2:	2101      	movs	r1, #1
    11f4:	47a0      	blx	r4
			break;				
    11f6:	e76d      	b.n	10d4 <test_components+0x38>
    11f8:	000008e9 	.word	0x000008e9
    11fc:	200002c4 	.word	0x200002c4
    1200:	00005f20 	.word	0x00005f20
    1204:	000009c5 	.word	0x000009c5
    1208:	00004559 	.word	0x00004559
    120c:	20000414 	.word	0x20000414
    1210:	00000b1d 	.word	0x00000b1d
    1214:	0000478d 	.word	0x0000478d
    1218:	200003f4 	.word	0x200003f4
    121c:	00000d21 	.word	0x00000d21
    1220:	0000482d 	.word	0x0000482d
    1224:	20000400 	.word	0x20000400
    1228:	20000424 	.word	0x20000424
    122c:	00001d99 	.word	0x00001d99
    1230:	20000474 	.word	0x20000474
    1234:	00001e05 	.word	0x00001e05
    1238:	00001cf1 	.word	0x00001cf1
    123c:	41004418 	.word	0x41004418
    1240:	20000468 	.word	0x20000468
    1244:	00001001 	.word	0x00001001
    1248:	200003fc 	.word	0x200003fc
    124c:	00000bf9 	.word	0x00000bf9
    1250:	00000d65 	.word	0x00000d65
    1254:	20000475 	.word	0x20000475
    1258:	00000e49 	.word	0x00000e49
    125c:	20000420 	.word	0x20000420

00001260 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    1260:	2280      	movs	r2, #128	; 0x80
    1262:	05d2      	lsls	r2, r2, #23
    1264:	4b01      	ldr	r3, [pc, #4]	; (126c <ui_powerdown+0xc>)
    1266:	619a      	str	r2, [r3, #24]
}

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    1268:	4770      	bx	lr
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	41004480 	.word	0x41004480

00001270 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
    1270:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1272:	2100      	movs	r1, #0
    1274:	200f      	movs	r0, #15
    1276:	4b01      	ldr	r3, [pc, #4]	; (127c <ui_wakeup_enable+0xc>)
    1278:	4798      	blx	r3
}
    127a:	bd10      	pop	{r4, pc}
    127c:	00001a25 	.word	0x00001a25

00001280 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    1280:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1282:	2100      	movs	r1, #0
    1284:	200f      	movs	r0, #15
    1286:	4b01      	ldr	r3, [pc, #4]	; (128c <ui_wakeup_disable+0xc>)
    1288:	4798      	blx	r3
}
    128a:	bd10      	pop	{r4, pc}
    128c:	00001a45 	.word	0x00001a45

00001290 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    1290:	2280      	movs	r2, #128	; 0x80
    1292:	05d2      	lsls	r2, r2, #23
    1294:	4b01      	ldr	r3, [pc, #4]	; (129c <ui_wakeup+0xc>)
    1296:	615a      	str	r2, [r3, #20]
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    1298:	4770      	bx	lr
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	41004480 	.word	0x41004480

000012a0 <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
    12a0:	4770      	bx	lr

000012a2 <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
    12a2:	4770      	bx	lr

000012a4 <ui_process>:
{

}

void ui_process(uint16_t framenumber)
{
    12a4:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
    12a6:	21fa      	movs	r1, #250	; 0xfa
    12a8:	0089      	lsls	r1, r1, #2
    12aa:	4b09      	ldr	r3, [pc, #36]	; (12d0 <ui_process+0x2c>)
    12ac:	4798      	blx	r3
    12ae:	b289      	uxth	r1, r1
    12b0:	2900      	cmp	r1, #0
    12b2:	d104      	bne.n	12be <ui_process+0x1a>
    12b4:	2280      	movs	r2, #128	; 0x80
    12b6:	05d2      	lsls	r2, r2, #23
    12b8:	4b06      	ldr	r3, [pc, #24]	; (12d4 <ui_process+0x30>)
    12ba:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
    12bc:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
    12be:	23fa      	movs	r3, #250	; 0xfa
    12c0:	005b      	lsls	r3, r3, #1
    12c2:	4299      	cmp	r1, r3
    12c4:	d1fa      	bne.n	12bc <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
    12c6:	2280      	movs	r2, #128	; 0x80
    12c8:	05d2      	lsls	r2, r2, #23
    12ca:	4b02      	ldr	r3, [pc, #8]	; (12d4 <ui_process+0x30>)
    12cc:	619a      	str	r2, [r3, #24]
}
    12ce:	e7f5      	b.n	12bc <ui_process+0x18>
    12d0:	000049d9 	.word	0x000049d9
    12d4:	41004480 	.word	0x41004480

000012d8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    12d8:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    12da:	4b11      	ldr	r3, [pc, #68]	; (1320 <udc_next_desc_in_iface+0x48>)
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    12e0:	7894      	ldrb	r4, [r2, #2]
    12e2:	78d3      	ldrb	r3, [r2, #3]
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    12e8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    12ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    12ec:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    12ee:	4290      	cmp	r0, r2
    12f0:	d210      	bcs.n	1314 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    12f2:	7843      	ldrb	r3, [r0, #1]
    12f4:	2b04      	cmp	r3, #4
    12f6:	d00f      	beq.n	1318 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    12f8:	428b      	cmp	r3, r1
    12fa:	d00a      	beq.n	1312 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    12fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    12fe:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1300:	4290      	cmp	r0, r2
    1302:	d205      	bcs.n	1310 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1304:	7843      	ldrb	r3, [r0, #1]
    1306:	2b04      	cmp	r3, #4
    1308:	d008      	beq.n	131c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    130a:	428b      	cmp	r3, r1
    130c:	d1f6      	bne.n	12fc <udc_next_desc_in_iface+0x24>
    130e:	e000      	b.n	1312 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1310:	2000      	movs	r0, #0
}
    1312:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1314:	2000      	movs	r0, #0
    1316:	e7fc      	b.n	1312 <udc_next_desc_in_iface+0x3a>
    1318:	2000      	movs	r0, #0
    131a:	e7fa      	b.n	1312 <udc_next_desc_in_iface+0x3a>
    131c:	2000      	movs	r0, #0
    131e:	e7f8      	b.n	1312 <udc_next_desc_in_iface+0x3a>
    1320:	200002d4 	.word	0x200002d4

00001324 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1324:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1326:	4b03      	ldr	r3, [pc, #12]	; (1334 <udc_valid_address+0x10>)
    1328:	885b      	ldrh	r3, [r3, #2]
    132a:	207f      	movs	r0, #127	; 0x7f
    132c:	4018      	ands	r0, r3
    132e:	4b02      	ldr	r3, [pc, #8]	; (1338 <udc_valid_address+0x14>)
    1330:	4798      	blx	r3
}
    1332:	bd10      	pop	{r4, pc}
    1334:	200006e8 	.word	0x200006e8
    1338:	0000317d 	.word	0x0000317d

0000133c <udc_update_iface_desc>:
{
    133c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    133e:	4b19      	ldr	r3, [pc, #100]	; (13a4 <udc_update_iface_desc+0x68>)
    1340:	781b      	ldrb	r3, [r3, #0]
		return false;
    1342:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1344:	2b00      	cmp	r3, #0
    1346:	d029      	beq.n	139c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1348:	4b17      	ldr	r3, [pc, #92]	; (13a8 <udc_update_iface_desc+0x6c>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	791c      	ldrb	r4, [r3, #4]
    1350:	4284      	cmp	r4, r0
    1352:	d923      	bls.n	139c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1354:	4a15      	ldr	r2, [pc, #84]	; (13ac <udc_update_iface_desc+0x70>)
    1356:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1358:	789a      	ldrb	r2, [r3, #2]
    135a:	78dc      	ldrb	r4, [r3, #3]
    135c:	0224      	lsls	r4, r4, #8
    135e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1360:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1362:	42a3      	cmp	r3, r4
    1364:	d21c      	bcs.n	13a0 <udc_update_iface_desc+0x64>
    1366:	2500      	movs	r5, #0
    1368:	2601      	movs	r6, #1
    136a:	e007      	b.n	137c <udc_update_iface_desc+0x40>
    136c:	4a0f      	ldr	r2, [pc, #60]	; (13ac <udc_update_iface_desc+0x70>)
    136e:	6013      	str	r3, [r2, #0]
    1370:	e00f      	b.n	1392 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1372:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1374:	189b      	adds	r3, r3, r2
    1376:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1378:	42a3      	cmp	r3, r4
    137a:	d20c      	bcs.n	1396 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    137c:	785a      	ldrb	r2, [r3, #1]
    137e:	2a04      	cmp	r2, #4
    1380:	d1f7      	bne.n	1372 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1382:	789a      	ldrb	r2, [r3, #2]
    1384:	4282      	cmp	r2, r0
    1386:	d1f4      	bne.n	1372 <udc_update_iface_desc+0x36>
    1388:	78da      	ldrb	r2, [r3, #3]
    138a:	428a      	cmp	r2, r1
    138c:	d1f1      	bne.n	1372 <udc_update_iface_desc+0x36>
    138e:	2d00      	cmp	r5, #0
    1390:	d1ec      	bne.n	136c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1392:	2201      	movs	r2, #1
    1394:	e002      	b.n	139c <udc_update_iface_desc+0x60>
    1396:	4a05      	ldr	r2, [pc, #20]	; (13ac <udc_update_iface_desc+0x70>)
    1398:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    139a:	2200      	movs	r2, #0
}
    139c:	0010      	movs	r0, r2
    139e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    13a0:	2200      	movs	r2, #0
    13a2:	e7fb      	b.n	139c <udc_update_iface_desc+0x60>
    13a4:	200002d0 	.word	0x200002d0
    13a8:	200002d4 	.word	0x200002d4
    13ac:	200002d8 	.word	0x200002d8

000013b0 <udc_iface_disable>:
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	46c6      	mov	lr, r8
    13b4:	b500      	push	{lr}
    13b6:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    13b8:	2100      	movs	r1, #0
    13ba:	4b13      	ldr	r3, [pc, #76]	; (1408 <udc_iface_disable+0x58>)
    13bc:	4798      	blx	r3
    13be:	1e05      	subs	r5, r0, #0
    13c0:	d103      	bne.n	13ca <udc_iface_disable+0x1a>
}
    13c2:	0028      	movs	r0, r5
    13c4:	bc04      	pop	{r2}
    13c6:	4690      	mov	r8, r2
    13c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    13ca:	4b10      	ldr	r3, [pc, #64]	; (140c <udc_iface_disable+0x5c>)
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	685b      	ldr	r3, [r3, #4]
    13d0:	00a2      	lsls	r2, r4, #2
    13d2:	58d3      	ldr	r3, [r2, r3]
    13d4:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    13d6:	68db      	ldr	r3, [r3, #12]
    13d8:	4798      	blx	r3
    13da:	0001      	movs	r1, r0
    13dc:	0020      	movs	r0, r4
    13de:	4b0a      	ldr	r3, [pc, #40]	; (1408 <udc_iface_disable+0x58>)
    13e0:	4798      	blx	r3
    13e2:	1e05      	subs	r5, r0, #0
    13e4:	d0ed      	beq.n	13c2 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    13e6:	4b0a      	ldr	r3, [pc, #40]	; (1410 <udc_iface_disable+0x60>)
    13e8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    13ea:	4e0a      	ldr	r6, [pc, #40]	; (1414 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    13ec:	4f0a      	ldr	r7, [pc, #40]	; (1418 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    13ee:	2105      	movs	r1, #5
    13f0:	0020      	movs	r0, r4
    13f2:	47b0      	blx	r6
    13f4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    13f6:	d002      	beq.n	13fe <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    13f8:	7880      	ldrb	r0, [r0, #2]
    13fa:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    13fc:	e7f7      	b.n	13ee <udc_iface_disable+0x3e>
	udi_api->disable();
    13fe:	4643      	mov	r3, r8
    1400:	685b      	ldr	r3, [r3, #4]
    1402:	4798      	blx	r3
	return true;
    1404:	e7dd      	b.n	13c2 <udc_iface_disable+0x12>
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	0000133d 	.word	0x0000133d
    140c:	200002d4 	.word	0x200002d4
    1410:	200002d8 	.word	0x200002d8
    1414:	000012d9 	.word	0x000012d9
    1418:	00002cbd 	.word	0x00002cbd

0000141c <udc_iface_enable>:
{
    141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    141e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1420:	4b0f      	ldr	r3, [pc, #60]	; (1460 <udc_iface_enable+0x44>)
    1422:	4798      	blx	r3
    1424:	2800      	cmp	r0, #0
    1426:	d019      	beq.n	145c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1428:	4b0e      	ldr	r3, [pc, #56]	; (1464 <udc_iface_enable+0x48>)
    142a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    142c:	4e0e      	ldr	r6, [pc, #56]	; (1468 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    142e:	4f0f      	ldr	r7, [pc, #60]	; (146c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1430:	2105      	movs	r1, #5
    1432:	0020      	movs	r0, r4
    1434:	47b0      	blx	r6
    1436:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1438:	d009      	beq.n	144e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    143a:	7903      	ldrb	r3, [r0, #4]
    143c:	7942      	ldrb	r2, [r0, #5]
    143e:	0212      	lsls	r2, r2, #8
    1440:	431a      	orrs	r2, r3
    1442:	78c1      	ldrb	r1, [r0, #3]
    1444:	7880      	ldrb	r0, [r0, #2]
    1446:	47b8      	blx	r7
    1448:	2800      	cmp	r0, #0
    144a:	d1f1      	bne.n	1430 <udc_iface_enable+0x14>
    144c:	e006      	b.n	145c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    144e:	4b08      	ldr	r3, [pc, #32]	; (1470 <udc_iface_enable+0x54>)
    1450:	681b      	ldr	r3, [r3, #0]
    1452:	685b      	ldr	r3, [r3, #4]
    1454:	00ad      	lsls	r5, r5, #2
    1456:	58eb      	ldr	r3, [r5, r3]
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	4798      	blx	r3
}
    145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	0000133d 	.word	0x0000133d
    1464:	200002d8 	.word	0x200002d8
    1468:	000012d9 	.word	0x000012d9
    146c:	00002d15 	.word	0x00002d15
    1470:	200002d4 	.word	0x200002d4

00001474 <udc_start>:
{
    1474:	b510      	push	{r4, lr}
	udd_enable();
    1476:	4b01      	ldr	r3, [pc, #4]	; (147c <udc_start+0x8>)
    1478:	4798      	blx	r3
}
    147a:	bd10      	pop	{r4, pc}
    147c:	00003289 	.word	0x00003289

00001480 <udc_reset>:
{
    1480:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1482:	4b0e      	ldr	r3, [pc, #56]	; (14bc <udc_reset+0x3c>)
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	2b00      	cmp	r3, #0
    1488:	d011      	beq.n	14ae <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    148a:	4b0d      	ldr	r3, [pc, #52]	; (14c0 <udc_reset+0x40>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1490:	791b      	ldrb	r3, [r3, #4]
    1492:	2b00      	cmp	r3, #0
    1494:	d00b      	beq.n	14ae <udc_reset+0x2e>
    1496:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1498:	4e0a      	ldr	r6, [pc, #40]	; (14c4 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    149a:	4d09      	ldr	r5, [pc, #36]	; (14c0 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    149c:	0020      	movs	r0, r4
    149e:	47b0      	blx	r6
				iface_num++) {
    14a0:	3401      	adds	r4, #1
    14a2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14a4:	682b      	ldr	r3, [r5, #0]
    14a6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    14a8:	791b      	ldrb	r3, [r3, #4]
    14aa:	42a3      	cmp	r3, r4
    14ac:	d8f6      	bhi.n	149c <udc_reset+0x1c>
	udc_num_configuration = 0;
    14ae:	2200      	movs	r2, #0
    14b0:	4b02      	ldr	r3, [pc, #8]	; (14bc <udc_reset+0x3c>)
    14b2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    14b4:	3201      	adds	r2, #1
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <udc_reset+0x48>)
    14b8:	801a      	strh	r2, [r3, #0]
}
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	200002d0 	.word	0x200002d0
    14c0:	200002d4 	.word	0x200002d4
    14c4:	000013b1 	.word	0x000013b1
    14c8:	200002c6 	.word	0x200002c6

000014cc <udc_sof_notify>:
{
    14cc:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    14ce:	4b0e      	ldr	r3, [pc, #56]	; (1508 <udc_sof_notify+0x3c>)
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d017      	beq.n	1506 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14d6:	4b0d      	ldr	r3, [pc, #52]	; (150c <udc_sof_notify+0x40>)
    14d8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    14da:	681a      	ldr	r2, [r3, #0]
    14dc:	7912      	ldrb	r2, [r2, #4]
    14de:	2a00      	cmp	r2, #0
    14e0:	d011      	beq.n	1506 <udc_sof_notify+0x3a>
    14e2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14e4:	4d09      	ldr	r5, [pc, #36]	; (150c <udc_sof_notify+0x40>)
    14e6:	e006      	b.n	14f6 <udc_sof_notify+0x2a>
				iface_num++) {
    14e8:	3401      	adds	r4, #1
    14ea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14ec:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    14ee:	681a      	ldr	r2, [r3, #0]
    14f0:	7912      	ldrb	r2, [r2, #4]
    14f2:	42a2      	cmp	r2, r4
    14f4:	d907      	bls.n	1506 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	00a2      	lsls	r2, r4, #2
    14fa:	58d3      	ldr	r3, [r2, r3]
    14fc:	691b      	ldr	r3, [r3, #16]
    14fe:	2b00      	cmp	r3, #0
    1500:	d0f2      	beq.n	14e8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1502:	4798      	blx	r3
    1504:	e7f0      	b.n	14e8 <udc_sof_notify+0x1c>
}
    1506:	bd70      	pop	{r4, r5, r6, pc}
    1508:	200002d0 	.word	0x200002d0
    150c:	200002d4 	.word	0x200002d4

00001510 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1512:	4baa      	ldr	r3, [pc, #680]	; (17bc <udc_process_setup+0x2ac>)
    1514:	2200      	movs	r2, #0
    1516:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1518:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    151a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	b25a      	sxtb	r2, r3
    1520:	2a00      	cmp	r2, #0
    1522:	db13      	blt.n	154c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1524:	2260      	movs	r2, #96	; 0x60
    1526:	421a      	tst	r2, r3
    1528:	d100      	bne.n	152c <udc_process_setup+0x1c>
    152a:	e0d6      	b.n	16da <udc_process_setup+0x1ca>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    152c:	4ba3      	ldr	r3, [pc, #652]	; (17bc <udc_process_setup+0x2ac>)
    152e:	781a      	ldrb	r2, [r3, #0]
    1530:	231f      	movs	r3, #31
    1532:	4013      	ands	r3, r2
    1534:	2b01      	cmp	r3, #1
    1536:	d100      	bne.n	153a <udc_process_setup+0x2a>
    1538:	e172      	b.n	1820 <udc_process_setup+0x310>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    153a:	4ba0      	ldr	r3, [pc, #640]	; (17bc <udc_process_setup+0x2ac>)
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	231f      	movs	r3, #31
    1540:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1542:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1544:	2b02      	cmp	r3, #2
    1546:	d100      	bne.n	154a <udc_process_setup+0x3a>
    1548:	e1c8      	b.n	18dc <udc_process_setup+0x3cc>
#endif
}
    154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    154c:	4a9b      	ldr	r2, [pc, #620]	; (17bc <udc_process_setup+0x2ac>)
    154e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1550:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1552:	2a00      	cmp	r2, #0
    1554:	d0f9      	beq.n	154a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1556:	2160      	movs	r1, #96	; 0x60
    1558:	4219      	tst	r1, r3
    155a:	d1e7      	bne.n	152c <udc_process_setup+0x1c>
    155c:	211f      	movs	r1, #31
    155e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1560:	d108      	bne.n	1574 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1562:	4996      	ldr	r1, [pc, #600]	; (17bc <udc_process_setup+0x2ac>)
    1564:	7849      	ldrb	r1, [r1, #1]
    1566:	2906      	cmp	r1, #6
    1568:	d023      	beq.n	15b2 <udc_process_setup+0xa2>
    156a:	2908      	cmp	r1, #8
    156c:	d100      	bne.n	1570 <udc_process_setup+0x60>
    156e:	e083      	b.n	1678 <udc_process_setup+0x168>
    1570:	2900      	cmp	r1, #0
    1572:	d017      	beq.n	15a4 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1574:	2b01      	cmp	r3, #1
    1576:	d100      	bne.n	157a <udc_process_setup+0x6a>
    1578:	e086      	b.n	1688 <udc_process_setup+0x178>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    157a:	2b02      	cmp	r3, #2
    157c:	d1d6      	bne.n	152c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    157e:	4b8f      	ldr	r3, [pc, #572]	; (17bc <udc_process_setup+0x2ac>)
    1580:	785b      	ldrb	r3, [r3, #1]
	return false;
    1582:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1584:	2b00      	cmp	r3, #0
    1586:	d000      	beq.n	158a <udc_process_setup+0x7a>
    1588:	e1a4      	b.n	18d4 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    158a:	2a02      	cmp	r2, #2
    158c:	d1d5      	bne.n	153a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    158e:	4b8b      	ldr	r3, [pc, #556]	; (17bc <udc_process_setup+0x2ac>)
    1590:	7918      	ldrb	r0, [r3, #4]
    1592:	4b8b      	ldr	r3, [pc, #556]	; (17c0 <udc_process_setup+0x2b0>)
    1594:	4798      	blx	r3
    1596:	4b8b      	ldr	r3, [pc, #556]	; (17c4 <udc_process_setup+0x2b4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1598:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    159a:	2102      	movs	r1, #2
    159c:	0018      	movs	r0, r3
    159e:	4b8a      	ldr	r3, [pc, #552]	; (17c8 <udc_process_setup+0x2b8>)
    15a0:	4798      	blx	r3
    15a2:	e0fb      	b.n	179c <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    15a4:	2a02      	cmp	r2, #2
    15a6:	d1c8      	bne.n	153a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    15a8:	3102      	adds	r1, #2
    15aa:	4888      	ldr	r0, [pc, #544]	; (17cc <udc_process_setup+0x2bc>)
    15ac:	4b86      	ldr	r3, [pc, #536]	; (17c8 <udc_process_setup+0x2b8>)
    15ae:	4798      	blx	r3
    15b0:	e0f4      	b.n	179c <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    15b2:	4b82      	ldr	r3, [pc, #520]	; (17bc <udc_process_setup+0x2ac>)
    15b4:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    15b6:	0a13      	lsrs	r3, r2, #8
    15b8:	2b02      	cmp	r3, #2
    15ba:	d023      	beq.n	1604 <udc_process_setup+0xf4>
    15bc:	b2d9      	uxtb	r1, r3
    15be:	2902      	cmp	r1, #2
    15c0:	d90f      	bls.n	15e2 <udc_process_setup+0xd2>
    15c2:	2b03      	cmp	r3, #3
    15c4:	d034      	beq.n	1630 <udc_process_setup+0x120>
    15c6:	2b0f      	cmp	r3, #15
    15c8:	d000      	beq.n	15cc <udc_process_setup+0xbc>
    15ca:	e180      	b.n	18ce <udc_process_setup+0x3be>
		if (udc_config.conf_bos == NULL) {
    15cc:	4b80      	ldr	r3, [pc, #512]	; (17d0 <udc_process_setup+0x2c0>)
    15ce:	6898      	ldr	r0, [r3, #8]
    15d0:	2800      	cmp	r0, #0
    15d2:	d0b2      	beq.n	153a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15d4:	7883      	ldrb	r3, [r0, #2]
    15d6:	78c1      	ldrb	r1, [r0, #3]
    15d8:	0209      	lsls	r1, r1, #8
    15da:	4319      	orrs	r1, r3
    15dc:	4b7a      	ldr	r3, [pc, #488]	; (17c8 <udc_process_setup+0x2b8>)
    15de:	4798      	blx	r3
    15e0:	e007      	b.n	15f2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    15e2:	2b01      	cmp	r3, #1
    15e4:	d000      	beq.n	15e8 <udc_process_setup+0xd8>
    15e6:	e172      	b.n	18ce <udc_process_setup+0x3be>
				(uint8_t *) udc_config.confdev_lsfs,
    15e8:	4b79      	ldr	r3, [pc, #484]	; (17d0 <udc_process_setup+0x2c0>)
    15ea:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    15ec:	7801      	ldrb	r1, [r0, #0]
    15ee:	4b76      	ldr	r3, [pc, #472]	; (17c8 <udc_process_setup+0x2b8>)
    15f0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    15f2:	4b72      	ldr	r3, [pc, #456]	; (17bc <udc_process_setup+0x2ac>)
    15f4:	88da      	ldrh	r2, [r3, #6]
    15f6:	899b      	ldrh	r3, [r3, #12]
    15f8:	4293      	cmp	r3, r2
    15fa:	d800      	bhi.n	15fe <udc_process_setup+0xee>
    15fc:	e0ce      	b.n	179c <udc_process_setup+0x28c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    15fe:	4b6f      	ldr	r3, [pc, #444]	; (17bc <udc_process_setup+0x2ac>)
    1600:	819a      	strh	r2, [r3, #12]
    1602:	e0cb      	b.n	179c <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1604:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1606:	4b72      	ldr	r3, [pc, #456]	; (17d0 <udc_process_setup+0x2c0>)
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	7c5b      	ldrb	r3, [r3, #17]
    160c:	4293      	cmp	r3, r2
    160e:	d800      	bhi.n	1612 <udc_process_setup+0x102>
    1610:	e793      	b.n	153a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1612:	4b6f      	ldr	r3, [pc, #444]	; (17d0 <udc_process_setup+0x2c0>)
    1614:	685b      	ldr	r3, [r3, #4]
    1616:	00d2      	lsls	r2, r2, #3
    1618:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    161a:	7883      	ldrb	r3, [r0, #2]
    161c:	78c1      	ldrb	r1, [r0, #3]
    161e:	0209      	lsls	r1, r1, #8
    1620:	4319      	orrs	r1, r3
    1622:	4b69      	ldr	r3, [pc, #420]	; (17c8 <udc_process_setup+0x2b8>)
    1624:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1626:	4b65      	ldr	r3, [pc, #404]	; (17bc <udc_process_setup+0x2ac>)
    1628:	689b      	ldr	r3, [r3, #8]
    162a:	2202      	movs	r2, #2
    162c:	705a      	strb	r2, [r3, #1]
    162e:	e7e0      	b.n	15f2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1630:	23ff      	movs	r3, #255	; 0xff
    1632:	401a      	ands	r2, r3
    1634:	2a01      	cmp	r2, #1
    1636:	d01c      	beq.n	1672 <udc_process_setup+0x162>
    1638:	2a00      	cmp	r2, #0
    163a:	d015      	beq.n	1668 <udc_process_setup+0x158>
    163c:	2a02      	cmp	r2, #2
    163e:	d000      	beq.n	1642 <udc_process_setup+0x132>
    1640:	e774      	b.n	152c <udc_process_setup+0x1c>
		str = udc_string_product_name;
    1642:	4c64      	ldr	r4, [pc, #400]	; (17d4 <udc_process_setup+0x2c4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1644:	210f      	movs	r1, #15
    1646:	4a64      	ldr	r2, [pc, #400]	; (17d8 <udc_process_setup+0x2c8>)
    1648:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    164a:	5ce0      	ldrb	r0, [r4, r3]
    164c:	8050      	strh	r0, [r2, #2]
    164e:	3301      	adds	r3, #1
    1650:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1652:	b2d8      	uxtb	r0, r3
    1654:	4288      	cmp	r0, r1
    1656:	d3f8      	bcc.n	164a <udc_process_setup+0x13a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1658:	0049      	lsls	r1, r1, #1
    165a:	3102      	adds	r1, #2
    165c:	485e      	ldr	r0, [pc, #376]	; (17d8 <udc_process_setup+0x2c8>)
    165e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1660:	b289      	uxth	r1, r1
    1662:	4b59      	ldr	r3, [pc, #356]	; (17c8 <udc_process_setup+0x2b8>)
    1664:	4798      	blx	r3
    1666:	e7c4      	b.n	15f2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1668:	2104      	movs	r1, #4
    166a:	485c      	ldr	r0, [pc, #368]	; (17dc <udc_process_setup+0x2cc>)
    166c:	4b56      	ldr	r3, [pc, #344]	; (17c8 <udc_process_setup+0x2b8>)
    166e:	4798      	blx	r3
    1670:	e7bf      	b.n	15f2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1672:	4c5b      	ldr	r4, [pc, #364]	; (17e0 <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1674:	2109      	movs	r1, #9
    1676:	e7e6      	b.n	1646 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1678:	2a01      	cmp	r2, #1
    167a:	d000      	beq.n	167e <udc_process_setup+0x16e>
    167c:	e75d      	b.n	153a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    167e:	2101      	movs	r1, #1
    1680:	4858      	ldr	r0, [pc, #352]	; (17e4 <udc_process_setup+0x2d4>)
    1682:	4b51      	ldr	r3, [pc, #324]	; (17c8 <udc_process_setup+0x2b8>)
    1684:	4798      	blx	r3
    1686:	e089      	b.n	179c <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1688:	494c      	ldr	r1, [pc, #304]	; (17bc <udc_process_setup+0x2ac>)
    168a:	7849      	ldrb	r1, [r1, #1]
    168c:	290a      	cmp	r1, #10
    168e:	d000      	beq.n	1692 <udc_process_setup+0x182>
    1690:	e773      	b.n	157a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1692:	2a01      	cmp	r2, #1
    1694:	d000      	beq.n	1698 <udc_process_setup+0x188>
    1696:	e0c3      	b.n	1820 <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    1698:	4b52      	ldr	r3, [pc, #328]	; (17e4 <udc_process_setup+0x2d4>)
    169a:	781b      	ldrb	r3, [r3, #0]
    169c:	2b00      	cmp	r3, #0
    169e:	d100      	bne.n	16a2 <udc_process_setup+0x192>
    16a0:	e0be      	b.n	1820 <udc_process_setup+0x310>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16a2:	4b46      	ldr	r3, [pc, #280]	; (17bc <udc_process_setup+0x2ac>)
    16a4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16a6:	4b50      	ldr	r3, [pc, #320]	; (17e8 <udc_process_setup+0x2d8>)
    16a8:	681d      	ldr	r5, [r3, #0]
    16aa:	682b      	ldr	r3, [r5, #0]
    16ac:	791b      	ldrb	r3, [r3, #4]
    16ae:	42a3      	cmp	r3, r4
    16b0:	d800      	bhi.n	16b4 <udc_process_setup+0x1a4>
    16b2:	e0b5      	b.n	1820 <udc_process_setup+0x310>
	if (!udc_update_iface_desc(iface_num, 0)) {
    16b4:	2100      	movs	r1, #0
    16b6:	0020      	movs	r0, r4
    16b8:	4b4c      	ldr	r3, [pc, #304]	; (17ec <udc_process_setup+0x2dc>)
    16ba:	4798      	blx	r3
    16bc:	2800      	cmp	r0, #0
    16be:	d100      	bne.n	16c2 <udc_process_setup+0x1b2>
    16c0:	e734      	b.n	152c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16c2:	686b      	ldr	r3, [r5, #4]
    16c4:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    16c6:	58e3      	ldr	r3, [r4, r3]
    16c8:	68db      	ldr	r3, [r3, #12]
    16ca:	4798      	blx	r3
    16cc:	4b48      	ldr	r3, [pc, #288]	; (17f0 <udc_process_setup+0x2e0>)
    16ce:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    16d0:	2101      	movs	r1, #1
    16d2:	0018      	movs	r0, r3
    16d4:	4b3c      	ldr	r3, [pc, #240]	; (17c8 <udc_process_setup+0x2b8>)
    16d6:	4798      	blx	r3
    16d8:	e060      	b.n	179c <udc_process_setup+0x28c>
    16da:	221f      	movs	r2, #31
    16dc:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16de:	d15f      	bne.n	17a0 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    16e0:	4a36      	ldr	r2, [pc, #216]	; (17bc <udc_process_setup+0x2ac>)
    16e2:	7852      	ldrb	r2, [r2, #1]
    16e4:	2a03      	cmp	r2, #3
    16e6:	d100      	bne.n	16ea <udc_process_setup+0x1da>
    16e8:	e0f3      	b.n	18d2 <udc_process_setup+0x3c2>
    16ea:	b2d1      	uxtb	r1, r2
    16ec:	2903      	cmp	r1, #3
    16ee:	d93b      	bls.n	1768 <udc_process_setup+0x258>
    16f0:	2a05      	cmp	r2, #5
    16f2:	d04b      	beq.n	178c <udc_process_setup+0x27c>
    16f4:	2a09      	cmp	r2, #9
    16f6:	d153      	bne.n	17a0 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    16f8:	4b30      	ldr	r3, [pc, #192]	; (17bc <udc_process_setup+0x2ac>)
    16fa:	88db      	ldrh	r3, [r3, #6]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d000      	beq.n	1702 <udc_process_setup+0x1f2>
    1700:	e71b      	b.n	153a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1702:	4b3c      	ldr	r3, [pc, #240]	; (17f4 <udc_process_setup+0x2e4>)
    1704:	4798      	blx	r3
    1706:	2800      	cmp	r0, #0
    1708:	d100      	bne.n	170c <udc_process_setup+0x1fc>
    170a:	e70f      	b.n	152c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    170c:	4b2b      	ldr	r3, [pc, #172]	; (17bc <udc_process_setup+0x2ac>)
    170e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1710:	4b2f      	ldr	r3, [pc, #188]	; (17d0 <udc_process_setup+0x2c0>)
    1712:	681b      	ldr	r3, [r3, #0]
    1714:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1716:	429a      	cmp	r2, r3
    1718:	dd00      	ble.n	171c <udc_process_setup+0x20c>
    171a:	e707      	b.n	152c <udc_process_setup+0x1c>
	udc_reset();
    171c:	4b36      	ldr	r3, [pc, #216]	; (17f8 <udc_process_setup+0x2e8>)
    171e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1720:	4b26      	ldr	r3, [pc, #152]	; (17bc <udc_process_setup+0x2ac>)
    1722:	789b      	ldrb	r3, [r3, #2]
    1724:	4a2f      	ldr	r2, [pc, #188]	; (17e4 <udc_process_setup+0x2d4>)
    1726:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1728:	2b00      	cmp	r3, #0
    172a:	d037      	beq.n	179c <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    172c:	4a33      	ldr	r2, [pc, #204]	; (17fc <udc_process_setup+0x2ec>)
    172e:	4694      	mov	ip, r2
    1730:	4463      	add	r3, ip
    1732:	00db      	lsls	r3, r3, #3
    1734:	4a26      	ldr	r2, [pc, #152]	; (17d0 <udc_process_setup+0x2c0>)
    1736:	6852      	ldr	r2, [r2, #4]
    1738:	18d3      	adds	r3, r2, r3
    173a:	4a2b      	ldr	r2, [pc, #172]	; (17e8 <udc_process_setup+0x2d8>)
    173c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	791b      	ldrb	r3, [r3, #4]
    1742:	2b00      	cmp	r3, #0
    1744:	d02a      	beq.n	179c <udc_process_setup+0x28c>
    1746:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1748:	4d2d      	ldr	r5, [pc, #180]	; (1800 <udc_process_setup+0x2f0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    174a:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    174c:	2100      	movs	r1, #0
    174e:	0020      	movs	r0, r4
    1750:	47a8      	blx	r5
    1752:	2800      	cmp	r0, #0
    1754:	d100      	bne.n	1758 <udc_process_setup+0x248>
    1756:	e6e9      	b.n	152c <udc_process_setup+0x1c>
			iface_num++) {
    1758:	3401      	adds	r4, #1
    175a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    175c:	6833      	ldr	r3, [r6, #0]
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	791b      	ldrb	r3, [r3, #4]
    1762:	42a3      	cmp	r3, r4
    1764:	d8f2      	bhi.n	174c <udc_process_setup+0x23c>
    1766:	e019      	b.n	179c <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1768:	2a01      	cmp	r2, #1
    176a:	d119      	bne.n	17a0 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    176c:	4b13      	ldr	r3, [pc, #76]	; (17bc <udc_process_setup+0x2ac>)
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	2b00      	cmp	r3, #0
    1772:	d000      	beq.n	1776 <udc_process_setup+0x266>
    1774:	e6e1      	b.n	153a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1776:	4b11      	ldr	r3, [pc, #68]	; (17bc <udc_process_setup+0x2ac>)
    1778:	885b      	ldrh	r3, [r3, #2]
    177a:	2b01      	cmp	r3, #1
    177c:	d000      	beq.n	1780 <udc_process_setup+0x270>
    177e:	e6dc      	b.n	153a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1780:	4a12      	ldr	r2, [pc, #72]	; (17cc <udc_process_setup+0x2bc>)
    1782:	8813      	ldrh	r3, [r2, #0]
    1784:	2102      	movs	r1, #2
    1786:	438b      	bics	r3, r1
    1788:	8013      	strh	r3, [r2, #0]
    178a:	e007      	b.n	179c <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
    178c:	4b0b      	ldr	r3, [pc, #44]	; (17bc <udc_process_setup+0x2ac>)
    178e:	88db      	ldrh	r3, [r3, #6]
    1790:	2b00      	cmp	r3, #0
    1792:	d000      	beq.n	1796 <udc_process_setup+0x286>
    1794:	e6d1      	b.n	153a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1796:	4a1b      	ldr	r2, [pc, #108]	; (1804 <udc_process_setup+0x2f4>)
    1798:	4b08      	ldr	r3, [pc, #32]	; (17bc <udc_process_setup+0x2ac>)
    179a:	611a      	str	r2, [r3, #16]
			return true;
    179c:	2001      	movs	r0, #1
    179e:	e6d4      	b.n	154a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    17a0:	2b01      	cmp	r3, #1
    17a2:	d031      	beq.n	1808 <udc_process_setup+0x2f8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17a4:	2b02      	cmp	r3, #2
    17a6:	d000      	beq.n	17aa <udc_process_setup+0x29a>
    17a8:	e6c0      	b.n	152c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <udc_process_setup+0x2ac>)
    17ac:	785b      	ldrb	r3, [r3, #1]
    17ae:	2b01      	cmp	r3, #1
    17b0:	d06c      	beq.n	188c <udc_process_setup+0x37c>
    17b2:	2b03      	cmp	r3, #3
    17b4:	d100      	bne.n	17b8 <udc_process_setup+0x2a8>
    17b6:	e078      	b.n	18aa <udc_process_setup+0x39a>
	return false;
    17b8:	2000      	movs	r0, #0
    17ba:	e08b      	b.n	18d4 <udc_process_setup+0x3c4>
    17bc:	200006e8 	.word	0x200006e8
    17c0:	00002e1d 	.word	0x00002e1d
    17c4:	200002c8 	.word	0x200002c8
    17c8:	0000319d 	.word	0x0000319d
    17cc:	200002c6 	.word	0x200002c6
    17d0:	20000040 	.word	0x20000040
    17d4:	200000f0 	.word	0x200000f0
    17d8:	200000c0 	.word	0x200000c0
    17dc:	200000e0 	.word	0x200000e0
    17e0:	200000e4 	.word	0x200000e4
    17e4:	200002d0 	.word	0x200002d0
    17e8:	200002d4 	.word	0x200002d4
    17ec:	0000133d 	.word	0x0000133d
    17f0:	200002cc 	.word	0x200002cc
    17f4:	0000318d 	.word	0x0000318d
    17f8:	00001481 	.word	0x00001481
    17fc:	1fffffff 	.word	0x1fffffff
    1800:	0000141d 	.word	0x0000141d
    1804:	00001325 	.word	0x00001325
			switch (udd_g_ctrlreq.req.bRequest) {
    1808:	4a48      	ldr	r2, [pc, #288]	; (192c <udc_process_setup+0x41c>)
    180a:	7852      	ldrb	r2, [r2, #1]
    180c:	2a0b      	cmp	r2, #11
    180e:	d1c9      	bne.n	17a4 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1810:	4b46      	ldr	r3, [pc, #280]	; (192c <udc_process_setup+0x41c>)
    1812:	88db      	ldrh	r3, [r3, #6]
    1814:	2b00      	cmp	r3, #0
    1816:	d103      	bne.n	1820 <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    1818:	4b45      	ldr	r3, [pc, #276]	; (1930 <udc_process_setup+0x420>)
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	2b00      	cmp	r3, #0
    181e:	d127      	bne.n	1870 <udc_process_setup+0x360>
	if (0 == udc_num_configuration) {
    1820:	4b43      	ldr	r3, [pc, #268]	; (1930 <udc_process_setup+0x420>)
    1822:	781b      	ldrb	r3, [r3, #0]
	return false;
    1824:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1826:	2b00      	cmp	r3, #0
    1828:	d100      	bne.n	182c <udc_process_setup+0x31c>
    182a:	e68e      	b.n	154a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    182c:	4b3f      	ldr	r3, [pc, #252]	; (192c <udc_process_setup+0x41c>)
    182e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1830:	4b40      	ldr	r3, [pc, #256]	; (1934 <udc_process_setup+0x424>)
    1832:	681d      	ldr	r5, [r3, #0]
    1834:	682b      	ldr	r3, [r5, #0]
    1836:	791b      	ldrb	r3, [r3, #4]
    1838:	42a3      	cmp	r3, r4
    183a:	d800      	bhi.n	183e <udc_process_setup+0x32e>
    183c:	e685      	b.n	154a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    183e:	2100      	movs	r1, #0
    1840:	0020      	movs	r0, r4
    1842:	4b3d      	ldr	r3, [pc, #244]	; (1938 <udc_process_setup+0x428>)
    1844:	4798      	blx	r3
    1846:	2800      	cmp	r0, #0
    1848:	d100      	bne.n	184c <udc_process_setup+0x33c>
    184a:	e676      	b.n	153a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    184c:	686b      	ldr	r3, [r5, #4]
    184e:	00a2      	lsls	r2, r4, #2
    1850:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1852:	68eb      	ldr	r3, [r5, #12]
    1854:	4798      	blx	r3
    1856:	0001      	movs	r1, r0
    1858:	0020      	movs	r0, r4
    185a:	4b37      	ldr	r3, [pc, #220]	; (1938 <udc_process_setup+0x428>)
    185c:	4798      	blx	r3
    185e:	2800      	cmp	r0, #0
    1860:	d100      	bne.n	1864 <udc_process_setup+0x354>
    1862:	e66a      	b.n	153a <udc_process_setup+0x2a>
	return udi_api->setup();
    1864:	68ab      	ldr	r3, [r5, #8]
    1866:	4798      	blx	r3
		if (udc_req_iface()) {
    1868:	2800      	cmp	r0, #0
    186a:	d000      	beq.n	186e <udc_process_setup+0x35e>
    186c:	e66d      	b.n	154a <udc_process_setup+0x3a>
    186e:	e664      	b.n	153a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1870:	4b2e      	ldr	r3, [pc, #184]	; (192c <udc_process_setup+0x41c>)
    1872:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1874:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1876:	0028      	movs	r0, r5
    1878:	4b30      	ldr	r3, [pc, #192]	; (193c <udc_process_setup+0x42c>)
    187a:	4798      	blx	r3
    187c:	2800      	cmp	r0, #0
    187e:	d100      	bne.n	1882 <udc_process_setup+0x372>
    1880:	e654      	b.n	152c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1882:	b2e1      	uxtb	r1, r4
    1884:	0028      	movs	r0, r5
    1886:	4b2e      	ldr	r3, [pc, #184]	; (1940 <udc_process_setup+0x430>)
    1888:	4798      	blx	r3
    188a:	e023      	b.n	18d4 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    188c:	4b27      	ldr	r3, [pc, #156]	; (192c <udc_process_setup+0x41c>)
    188e:	88db      	ldrh	r3, [r3, #6]
    1890:	2b00      	cmp	r3, #0
    1892:	d000      	beq.n	1896 <udc_process_setup+0x386>
    1894:	e651      	b.n	153a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1896:	4b25      	ldr	r3, [pc, #148]	; (192c <udc_process_setup+0x41c>)
    1898:	885b      	ldrh	r3, [r3, #2]
    189a:	2b00      	cmp	r3, #0
    189c:	d000      	beq.n	18a0 <udc_process_setup+0x390>
    189e:	e64c      	b.n	153a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18a0:	4b22      	ldr	r3, [pc, #136]	; (192c <udc_process_setup+0x41c>)
    18a2:	7918      	ldrb	r0, [r3, #4]
    18a4:	4b27      	ldr	r3, [pc, #156]	; (1944 <udc_process_setup+0x434>)
    18a6:	4798      	blx	r3
    18a8:	e014      	b.n	18d4 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    18aa:	4b20      	ldr	r3, [pc, #128]	; (192c <udc_process_setup+0x41c>)
    18ac:	88db      	ldrh	r3, [r3, #6]
    18ae:	2b00      	cmp	r3, #0
    18b0:	d000      	beq.n	18b4 <udc_process_setup+0x3a4>
    18b2:	e642      	b.n	153a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18b4:	4b1d      	ldr	r3, [pc, #116]	; (192c <udc_process_setup+0x41c>)
    18b6:	885b      	ldrh	r3, [r3, #2]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d000      	beq.n	18be <udc_process_setup+0x3ae>
    18bc:	e63d      	b.n	153a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18be:	4c1b      	ldr	r4, [pc, #108]	; (192c <udc_process_setup+0x41c>)
    18c0:	7920      	ldrb	r0, [r4, #4]
    18c2:	4b21      	ldr	r3, [pc, #132]	; (1948 <udc_process_setup+0x438>)
    18c4:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c6:	7920      	ldrb	r0, [r4, #4]
    18c8:	4b20      	ldr	r3, [pc, #128]	; (194c <udc_process_setup+0x43c>)
    18ca:	4798      	blx	r3
    18cc:	e002      	b.n	18d4 <udc_process_setup+0x3c4>
		return false;
    18ce:	2000      	movs	r0, #0
    18d0:	e000      	b.n	18d4 <udc_process_setup+0x3c4>
				return udc_req_std_dev_set_feature();
    18d2:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    18d4:	2800      	cmp	r0, #0
    18d6:	d000      	beq.n	18da <udc_process_setup+0x3ca>
    18d8:	e637      	b.n	154a <udc_process_setup+0x3a>
    18da:	e627      	b.n	152c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    18dc:	4b14      	ldr	r3, [pc, #80]	; (1930 <udc_process_setup+0x420>)
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d100      	bne.n	18e6 <udc_process_setup+0x3d6>
    18e4:	e631      	b.n	154a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18e6:	4b13      	ldr	r3, [pc, #76]	; (1934 <udc_process_setup+0x424>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	681a      	ldr	r2, [r3, #0]
    18ec:	7912      	ldrb	r2, [r2, #4]
    18ee:	2a00      	cmp	r2, #0
    18f0:	d01a      	beq.n	1928 <udc_process_setup+0x418>
    18f2:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18f4:	4e10      	ldr	r6, [pc, #64]	; (1938 <udc_process_setup+0x428>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18f6:	4f0f      	ldr	r7, [pc, #60]	; (1934 <udc_process_setup+0x424>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    18f8:	685b      	ldr	r3, [r3, #4]
    18fa:	00aa      	lsls	r2, r5, #2
    18fc:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18fe:	68e3      	ldr	r3, [r4, #12]
    1900:	4798      	blx	r3
    1902:	0001      	movs	r1, r0
    1904:	0028      	movs	r0, r5
    1906:	47b0      	blx	r6
    1908:	2800      	cmp	r0, #0
    190a:	d100      	bne.n	190e <udc_process_setup+0x3fe>
    190c:	e61d      	b.n	154a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    190e:	68a3      	ldr	r3, [r4, #8]
    1910:	4798      	blx	r3
    1912:	2800      	cmp	r0, #0
    1914:	d000      	beq.n	1918 <udc_process_setup+0x408>
    1916:	e618      	b.n	154a <udc_process_setup+0x3a>
			iface_num++) {
    1918:	3501      	adds	r5, #1
    191a:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    191c:	683b      	ldr	r3, [r7, #0]
    191e:	681a      	ldr	r2, [r3, #0]
    1920:	7912      	ldrb	r2, [r2, #4]
    1922:	42aa      	cmp	r2, r5
    1924:	d8e8      	bhi.n	18f8 <udc_process_setup+0x3e8>
    1926:	e610      	b.n	154a <udc_process_setup+0x3a>
	return false;
    1928:	2000      	movs	r0, #0
    192a:	e60e      	b.n	154a <udc_process_setup+0x3a>
    192c:	200006e8 	.word	0x200006e8
    1930:	200002d0 	.word	0x200002d0
    1934:	200002d4 	.word	0x200002d4
    1938:	0000133d 	.word	0x0000133d
    193c:	000013b1 	.word	0x000013b1
    1940:	0000141d 	.word	0x0000141d
    1944:	00002f61 	.word	0x00002f61
    1948:	00002c5d 	.word	0x00002c5d
    194c:	00002e31 	.word	0x00002e31

00001950 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1950:	4b0c      	ldr	r3, [pc, #48]	; (1984 <cpu_irq_enter_critical+0x34>)
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	d106      	bne.n	1966 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1958:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    195c:	2b00      	cmp	r3, #0
    195e:	d007      	beq.n	1970 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1960:	2200      	movs	r2, #0
    1962:	4b09      	ldr	r3, [pc, #36]	; (1988 <cpu_irq_enter_critical+0x38>)
    1964:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1966:	4a07      	ldr	r2, [pc, #28]	; (1984 <cpu_irq_enter_critical+0x34>)
    1968:	6813      	ldr	r3, [r2, #0]
    196a:	3301      	adds	r3, #1
    196c:	6013      	str	r3, [r2, #0]
}
    196e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1970:	b672      	cpsid	i
    1972:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1976:	2200      	movs	r2, #0
    1978:	4b04      	ldr	r3, [pc, #16]	; (198c <cpu_irq_enter_critical+0x3c>)
    197a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    197c:	3201      	adds	r2, #1
    197e:	4b02      	ldr	r3, [pc, #8]	; (1988 <cpu_irq_enter_critical+0x38>)
    1980:	701a      	strb	r2, [r3, #0]
    1982:	e7f0      	b.n	1966 <cpu_irq_enter_critical+0x16>
    1984:	200002dc 	.word	0x200002dc
    1988:	200002e0 	.word	0x200002e0
    198c:	20000100 	.word	0x20000100

00001990 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <cpu_irq_leave_critical+0x24>)
    1992:	681a      	ldr	r2, [r3, #0]
    1994:	3a01      	subs	r2, #1
    1996:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d109      	bne.n	19b2 <cpu_irq_leave_critical+0x22>
    199e:	4b06      	ldr	r3, [pc, #24]	; (19b8 <cpu_irq_leave_critical+0x28>)
    19a0:	781b      	ldrb	r3, [r3, #0]
    19a2:	2b00      	cmp	r3, #0
    19a4:	d005      	beq.n	19b2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    19a6:	2201      	movs	r2, #1
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <cpu_irq_leave_critical+0x2c>)
    19aa:	701a      	strb	r2, [r3, #0]
    19ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    19b0:	b662      	cpsie	i
	}
}
    19b2:	4770      	bx	lr
    19b4:	200002dc 	.word	0x200002dc
    19b8:	200002e0 	.word	0x200002e0
    19bc:	20000100 	.word	0x20000100

000019c0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    19c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    19c4:	ac01      	add	r4, sp, #4
    19c6:	2501      	movs	r5, #1
    19c8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    19ca:	2700      	movs	r7, #0
    19cc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    19ce:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    19d0:	0021      	movs	r1, r4
    19d2:	203e      	movs	r0, #62	; 0x3e
    19d4:	4e06      	ldr	r6, [pc, #24]	; (19f0 <system_board_init+0x30>)
    19d6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    19d8:	2280      	movs	r2, #128	; 0x80
    19da:	05d2      	lsls	r2, r2, #23
    19dc:	4b05      	ldr	r3, [pc, #20]	; (19f4 <system_board_init+0x34>)
    19de:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    19e0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    19e2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    19e4:	0021      	movs	r1, r4
    19e6:	200f      	movs	r0, #15
    19e8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    19ea:	b003      	add	sp, #12
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	00001e61 	.word	0x00001e61
    19f4:	41004480 	.word	0x41004480

000019f8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    19f8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    19fa:	2a00      	cmp	r2, #0
    19fc:	d001      	beq.n	1a02 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    19fe:	0018      	movs	r0, r3
    1a00:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1a02:	008b      	lsls	r3, r1, #2
    1a04:	4a06      	ldr	r2, [pc, #24]	; (1a20 <extint_register_callback+0x28>)
    1a06:	589b      	ldr	r3, [r3, r2]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d003      	beq.n	1a14 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1a0c:	4283      	cmp	r3, r0
    1a0e:	d005      	beq.n	1a1c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a10:	231d      	movs	r3, #29
    1a12:	e7f4      	b.n	19fe <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1a14:	0089      	lsls	r1, r1, #2
    1a16:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1a18:	2300      	movs	r3, #0
    1a1a:	e7f0      	b.n	19fe <extint_register_callback+0x6>
		return STATUS_OK;
    1a1c:	2300      	movs	r3, #0
    1a1e:	e7ee      	b.n	19fe <extint_register_callback+0x6>
    1a20:	20000480 	.word	0x20000480

00001a24 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a24:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1a26:	2900      	cmp	r1, #0
    1a28:	d001      	beq.n	1a2e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1a2a:	0018      	movs	r0, r3
    1a2c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1a2e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1a30:	281f      	cmp	r0, #31
    1a32:	d800      	bhi.n	1a36 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1a34:	4a02      	ldr	r2, [pc, #8]	; (1a40 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1a36:	2301      	movs	r3, #1
    1a38:	4083      	lsls	r3, r0
    1a3a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1a3c:	2300      	movs	r3, #0
    1a3e:	e7f4      	b.n	1a2a <extint_chan_enable_callback+0x6>
    1a40:	40001800 	.word	0x40001800

00001a44 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a44:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1a46:	2900      	cmp	r1, #0
    1a48:	d001      	beq.n	1a4e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1a4a:	0018      	movs	r0, r3
    1a4c:	4770      	bx	lr
		return NULL;
    1a4e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1a50:	281f      	cmp	r0, #31
    1a52:	d800      	bhi.n	1a56 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    1a54:	4a02      	ldr	r2, [pc, #8]	; (1a60 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    1a56:	2301      	movs	r3, #1
    1a58:	4083      	lsls	r3, r0
    1a5a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1a5c:	2300      	movs	r3, #0
    1a5e:	e7f4      	b.n	1a4a <extint_chan_disable_callback+0x6>
    1a60:	40001800 	.word	0x40001800

00001a64 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1a66:	2200      	movs	r2, #0
    1a68:	4b10      	ldr	r3, [pc, #64]	; (1aac <EIC_Handler+0x48>)
    1a6a:	701a      	strb	r2, [r3, #0]
    1a6c:	2300      	movs	r3, #0
    1a6e:	4910      	ldr	r1, [pc, #64]	; (1ab0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1a70:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1a72:	4e10      	ldr	r6, [pc, #64]	; (1ab4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1a74:	4c0d      	ldr	r4, [pc, #52]	; (1aac <EIC_Handler+0x48>)
    1a76:	e00a      	b.n	1a8e <EIC_Handler+0x2a>
		return eics[eic_index];
    1a78:	490d      	ldr	r1, [pc, #52]	; (1ab0 <EIC_Handler+0x4c>)
    1a7a:	e008      	b.n	1a8e <EIC_Handler+0x2a>
    1a7c:	7823      	ldrb	r3, [r4, #0]
    1a7e:	3301      	adds	r3, #1
    1a80:	b2db      	uxtb	r3, r3
    1a82:	7023      	strb	r3, [r4, #0]
    1a84:	2b0f      	cmp	r3, #15
    1a86:	d810      	bhi.n	1aaa <EIC_Handler+0x46>
		return NULL;
    1a88:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1a8a:	2b1f      	cmp	r3, #31
    1a8c:	d9f4      	bls.n	1a78 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1a8e:	0028      	movs	r0, r5
    1a90:	4018      	ands	r0, r3
    1a92:	2201      	movs	r2, #1
    1a94:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1a96:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1a98:	4210      	tst	r0, r2
    1a9a:	d0ef      	beq.n	1a7c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1a9c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	599b      	ldr	r3, [r3, r6]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d0ea      	beq.n	1a7c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1aa6:	4798      	blx	r3
    1aa8:	e7e8      	b.n	1a7c <EIC_Handler+0x18>
			}
		}
	}
}
    1aaa:	bd70      	pop	{r4, r5, r6, pc}
    1aac:	2000047d 	.word	0x2000047d
    1ab0:	40001800 	.word	0x40001800
    1ab4:	20000480 	.word	0x20000480

00001ab8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ab8:	4a04      	ldr	r2, [pc, #16]	; (1acc <_extint_enable+0x14>)
    1aba:	7813      	ldrb	r3, [r2, #0]
    1abc:	2102      	movs	r1, #2
    1abe:	430b      	orrs	r3, r1
    1ac0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1ac2:	7853      	ldrb	r3, [r2, #1]
    1ac4:	b25b      	sxtb	r3, r3
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	dbfb      	blt.n	1ac2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1aca:	4770      	bx	lr
    1acc:	40001800 	.word	0x40001800

00001ad0 <_system_extint_init>:
{
    1ad0:	b500      	push	{lr}
    1ad2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1ad4:	4a12      	ldr	r2, [pc, #72]	; (1b20 <_system_extint_init+0x50>)
    1ad6:	6993      	ldr	r3, [r2, #24]
    1ad8:	2140      	movs	r1, #64	; 0x40
    1ada:	430b      	orrs	r3, r1
    1adc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1ade:	a901      	add	r1, sp, #4
    1ae0:	2300      	movs	r3, #0
    1ae2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1ae4:	2005      	movs	r0, #5
    1ae6:	4b0f      	ldr	r3, [pc, #60]	; (1b24 <_system_extint_init+0x54>)
    1ae8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1aea:	2005      	movs	r0, #5
    1aec:	4b0e      	ldr	r3, [pc, #56]	; (1b28 <_system_extint_init+0x58>)
    1aee:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1af0:	4a0e      	ldr	r2, [pc, #56]	; (1b2c <_system_extint_init+0x5c>)
    1af2:	7813      	ldrb	r3, [r2, #0]
    1af4:	2101      	movs	r1, #1
    1af6:	430b      	orrs	r3, r1
    1af8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1afa:	7853      	ldrb	r3, [r2, #1]
    1afc:	b25b      	sxtb	r3, r3
    1afe:	2b00      	cmp	r3, #0
    1b00:	dbfb      	blt.n	1afa <_system_extint_init+0x2a>
    1b02:	4b0b      	ldr	r3, [pc, #44]	; (1b30 <_system_extint_init+0x60>)
    1b04:	0019      	movs	r1, r3
    1b06:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1b08:	2200      	movs	r2, #0
    1b0a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1b0c:	4299      	cmp	r1, r3
    1b0e:	d1fc      	bne.n	1b0a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b10:	2210      	movs	r2, #16
    1b12:	4b08      	ldr	r3, [pc, #32]	; (1b34 <_system_extint_init+0x64>)
    1b14:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1b16:	4b08      	ldr	r3, [pc, #32]	; (1b38 <_system_extint_init+0x68>)
    1b18:	4798      	blx	r3
}
    1b1a:	b003      	add	sp, #12
    1b1c:	bd00      	pop	{pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	40000400 	.word	0x40000400
    1b24:	0000249d 	.word	0x0000249d
    1b28:	00002411 	.word	0x00002411
    1b2c:	40001800 	.word	0x40001800
    1b30:	20000480 	.word	0x20000480
    1b34:	e000e100 	.word	0xe000e100
    1b38:	00001ab9 	.word	0x00001ab9

00001b3c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1b3c:	2300      	movs	r3, #0
    1b3e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1b40:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1b42:	2201      	movs	r2, #1
    1b44:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1b46:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1b48:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1b4a:	3302      	adds	r3, #2
    1b4c:	72c3      	strb	r3, [r0, #11]
}
    1b4e:	4770      	bx	lr

00001b50 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b52:	b083      	sub	sp, #12
    1b54:	0005      	movs	r5, r0
    1b56:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b58:	a901      	add	r1, sp, #4
    1b5a:	2300      	movs	r3, #0
    1b5c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1b5e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1b60:	7923      	ldrb	r3, [r4, #4]
    1b62:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1b64:	7a23      	ldrb	r3, [r4, #8]
    1b66:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1b68:	7820      	ldrb	r0, [r4, #0]
    1b6a:	4b15      	ldr	r3, [pc, #84]	; (1bc0 <extint_chan_set_config+0x70>)
    1b6c:	4798      	blx	r3
		return NULL;
    1b6e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1b70:	2d1f      	cmp	r5, #31
    1b72:	d800      	bhi.n	1b76 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1b74:	4813      	ldr	r0, [pc, #76]	; (1bc4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1b76:	2207      	movs	r2, #7
    1b78:	402a      	ands	r2, r5
    1b7a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1b7c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1b7e:	7aa3      	ldrb	r3, [r4, #10]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d001      	beq.n	1b88 <extint_chan_set_config+0x38>
    1b84:	2308      	movs	r3, #8
    1b86:	431f      	orrs	r7, r3
    1b88:	08eb      	lsrs	r3, r5, #3
    1b8a:	009b      	lsls	r3, r3, #2
    1b8c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1b8e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1b90:	260f      	movs	r6, #15
    1b92:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1b94:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1b96:	4097      	lsls	r7, r2
    1b98:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1b9a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1b9c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1b9e:	7a63      	ldrb	r3, [r4, #9]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d106      	bne.n	1bb2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1ba4:	6943      	ldr	r3, [r0, #20]
    1ba6:	2201      	movs	r2, #1
    1ba8:	40aa      	lsls	r2, r5
    1baa:	4393      	bics	r3, r2
    1bac:	6143      	str	r3, [r0, #20]
	}
}
    1bae:	b003      	add	sp, #12
    1bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1bb2:	6942      	ldr	r2, [r0, #20]
    1bb4:	2301      	movs	r3, #1
    1bb6:	40ab      	lsls	r3, r5
    1bb8:	4313      	orrs	r3, r2
    1bba:	6143      	str	r3, [r0, #20]
    1bbc:	e7f7      	b.n	1bae <extint_chan_set_config+0x5e>
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00002561 	.word	0x00002561
    1bc4:	40001800 	.word	0x40001800

00001bc8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1bc8:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1bca:	4a1e      	ldr	r2, [pc, #120]	; (1c44 <nvm_set_config+0x7c>)
    1bcc:	69d3      	ldr	r3, [r2, #28]
    1bce:	2104      	movs	r1, #4
    1bd0:	430b      	orrs	r3, r1
    1bd2:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1bd4:	4b1c      	ldr	r3, [pc, #112]	; (1c48 <nvm_set_config+0x80>)
    1bd6:	2220      	movs	r2, #32
    1bd8:	32ff      	adds	r2, #255	; 0xff
    1bda:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1bdc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    1bde:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    1be0:	07d2      	lsls	r2, r2, #31
    1be2:	d401      	bmi.n	1be8 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    1be4:	0018      	movs	r0, r3
    1be6:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1be8:	7803      	ldrb	r3, [r0, #0]
    1bea:	021b      	lsls	r3, r3, #8
    1bec:	22c0      	movs	r2, #192	; 0xc0
    1bee:	0092      	lsls	r2, r2, #2
    1bf0:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1bf2:	7841      	ldrb	r1, [r0, #1]
    1bf4:	01c9      	lsls	r1, r1, #7
    1bf6:	22ff      	movs	r2, #255	; 0xff
    1bf8:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1bfa:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1bfc:	7881      	ldrb	r1, [r0, #2]
    1bfe:	0049      	lsls	r1, r1, #1
    1c00:	221e      	movs	r2, #30
    1c02:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1c04:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1c06:	78c2      	ldrb	r2, [r0, #3]
    1c08:	0492      	lsls	r2, r2, #18
    1c0a:	2180      	movs	r1, #128	; 0x80
    1c0c:	02c9      	lsls	r1, r1, #11
    1c0e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1c10:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1c12:	7902      	ldrb	r2, [r0, #4]
    1c14:	0412      	lsls	r2, r2, #16
    1c16:	21c0      	movs	r1, #192	; 0xc0
    1c18:	0289      	lsls	r1, r1, #10
    1c1a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1c1c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    1c1e:	4a0a      	ldr	r2, [pc, #40]	; (1c48 <nvm_set_config+0x80>)
    1c20:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1c22:	6893      	ldr	r3, [r2, #8]
    1c24:	035b      	lsls	r3, r3, #13
    1c26:	0f5b      	lsrs	r3, r3, #29
    1c28:	4908      	ldr	r1, [pc, #32]	; (1c4c <nvm_set_config+0x84>)
    1c2a:	2408      	movs	r4, #8
    1c2c:	409c      	lsls	r4, r3
    1c2e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1c30:	6893      	ldr	r3, [r2, #8]
    1c32:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1c34:	7843      	ldrb	r3, [r0, #1]
    1c36:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1c38:	8b13      	ldrh	r3, [r2, #24]
    1c3a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    1c3c:	0fdb      	lsrs	r3, r3, #31
    1c3e:	011b      	lsls	r3, r3, #4
    1c40:	e7d0      	b.n	1be4 <nvm_set_config+0x1c>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	40000400 	.word	0x40000400
    1c48:	41004000 	.word	0x41004000
    1c4c:	200002e4 	.word	0x200002e4

00001c50 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1c50:	b530      	push	{r4, r5, lr}
    1c52:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1c54:	4a22      	ldr	r2, [pc, #136]	; (1ce0 <nvm_execute_command+0x90>)
    1c56:	8810      	ldrh	r0, [r2, #0]
    1c58:	8853      	ldrh	r3, [r2, #2]
    1c5a:	4343      	muls	r3, r0
    1c5c:	428b      	cmp	r3, r1
    1c5e:	d206      	bcs.n	1c6e <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1c60:	2280      	movs	r2, #128	; 0x80
    1c62:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1c64:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1c66:	4b1f      	ldr	r3, [pc, #124]	; (1ce4 <nvm_execute_command+0x94>)
    1c68:	18cb      	adds	r3, r1, r3
    1c6a:	4293      	cmp	r3, r2
    1c6c:	d80e      	bhi.n	1c8c <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1c6e:	4b1e      	ldr	r3, [pc, #120]	; (1ce8 <nvm_execute_command+0x98>)
    1c70:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1c72:	2280      	movs	r2, #128	; 0x80
    1c74:	02d2      	lsls	r2, r2, #11
    1c76:	432a      	orrs	r2, r5
    1c78:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1c7a:	2220      	movs	r2, #32
    1c7c:	32ff      	adds	r2, #255	; 0xff
    1c7e:	831a      	strh	r2, [r3, #24]
    1c80:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1c82:	07db      	lsls	r3, r3, #31
    1c84:	d403      	bmi.n	1c8e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1c86:	4b18      	ldr	r3, [pc, #96]	; (1ce8 <nvm_execute_command+0x98>)
    1c88:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    1c8a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    1c8c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    1c8e:	2c45      	cmp	r4, #69	; 0x45
    1c90:	d822      	bhi.n	1cd8 <nvm_execute_command+0x88>
    1c92:	00a3      	lsls	r3, r4, #2
    1c94:	4a15      	ldr	r2, [pc, #84]	; (1cec <nvm_execute_command+0x9c>)
    1c96:	58d3      	ldr	r3, [r2, r3]
    1c98:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1c9a:	4b13      	ldr	r3, [pc, #76]	; (1ce8 <nvm_execute_command+0x98>)
    1c9c:	8b1b      	ldrh	r3, [r3, #24]
    1c9e:	05db      	lsls	r3, r3, #23
    1ca0:	d503      	bpl.n	1caa <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    1ca2:	4b11      	ldr	r3, [pc, #68]	; (1ce8 <nvm_execute_command+0x98>)
    1ca4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    1ca6:	2010      	movs	r0, #16
    1ca8:	e7f0      	b.n	1c8c <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1caa:	0889      	lsrs	r1, r1, #2
    1cac:	0049      	lsls	r1, r1, #1
    1cae:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <nvm_execute_command+0x98>)
    1cb0:	61d9      	str	r1, [r3, #28]
			break;
    1cb2:	e003      	b.n	1cbc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1cb4:	0889      	lsrs	r1, r1, #2
    1cb6:	0049      	lsls	r1, r1, #1
    1cb8:	4b0b      	ldr	r3, [pc, #44]	; (1ce8 <nvm_execute_command+0x98>)
    1cba:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1cbc:	20a5      	movs	r0, #165	; 0xa5
    1cbe:	0200      	lsls	r0, r0, #8
    1cc0:	4304      	orrs	r4, r0
    1cc2:	4b09      	ldr	r3, [pc, #36]	; (1ce8 <nvm_execute_command+0x98>)
    1cc4:	801c      	strh	r4, [r3, #0]
    1cc6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    1cc8:	2201      	movs	r2, #1
    1cca:	7d0b      	ldrb	r3, [r1, #20]
    1ccc:	4213      	tst	r3, r2
    1cce:	d0fc      	beq.n	1cca <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    1cd0:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <nvm_execute_command+0x98>)
    1cd2:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    1cd4:	2000      	movs	r0, #0
    1cd6:	e7d9      	b.n	1c8c <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    1cd8:	4b03      	ldr	r3, [pc, #12]	; (1ce8 <nvm_execute_command+0x98>)
    1cda:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    1cdc:	2017      	movs	r0, #23
    1cde:	e7d5      	b.n	1c8c <nvm_execute_command+0x3c>
    1ce0:	200002e4 	.word	0x200002e4
    1ce4:	ff7fc000 	.word	0xff7fc000
    1ce8:	41004000 	.word	0x41004000
    1cec:	00005fc0 	.word	0x00005fc0

00001cf0 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1cf2:	4b25      	ldr	r3, [pc, #148]	; (1d88 <nvm_write_buffer+0x98>)
    1cf4:	881d      	ldrh	r5, [r3, #0]
    1cf6:	885b      	ldrh	r3, [r3, #2]
    1cf8:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1cfa:	2418      	movs	r4, #24
	if (destination_address >
    1cfc:	4283      	cmp	r3, r0
    1cfe:	d201      	bcs.n	1d04 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    1d00:	0020      	movs	r0, r4
    1d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1d04:	1e6b      	subs	r3, r5, #1
    1d06:	4218      	tst	r0, r3
    1d08:	d1fa      	bne.n	1d00 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    1d0a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    1d0c:	4295      	cmp	r5, r2
    1d0e:	d3f7      	bcc.n	1d00 <nvm_write_buffer+0x10>
    1d10:	4b1e      	ldr	r3, [pc, #120]	; (1d8c <nvm_write_buffer+0x9c>)
    1d12:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    1d14:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    1d16:	07db      	lsls	r3, r3, #31
    1d18:	d5f2      	bpl.n	1d00 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1d1a:	4c1d      	ldr	r4, [pc, #116]	; (1d90 <nvm_write_buffer+0xa0>)
    1d1c:	4b1b      	ldr	r3, [pc, #108]	; (1d8c <nvm_write_buffer+0x9c>)
    1d1e:	801c      	strh	r4, [r3, #0]
    1d20:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    1d22:	2401      	movs	r4, #1
    1d24:	7d2b      	ldrb	r3, [r5, #20]
    1d26:	4223      	tst	r3, r4
    1d28:	d0fc      	beq.n	1d24 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1d2a:	2420      	movs	r4, #32
    1d2c:	34ff      	adds	r4, #255	; 0xff
    1d2e:	4b17      	ldr	r3, [pc, #92]	; (1d8c <nvm_write_buffer+0x9c>)
    1d30:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    1d32:	2a00      	cmp	r2, #0
    1d34:	d022      	beq.n	1d7c <nvm_write_buffer+0x8c>
    1d36:	2301      	movs	r3, #1
    1d38:	0005      	movs	r5, r0
    1d3a:	439d      	bics	r5, r3
    1d3c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    1d3e:	1e57      	subs	r7, r2, #1
    1d40:	e009      	b.n	1d56 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    1d42:	18ce      	adds	r6, r1, r3
    1d44:	7876      	ldrb	r6, [r6, #1]
    1d46:	0236      	lsls	r6, r6, #8
    1d48:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    1d4a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1d4c:	3302      	adds	r3, #2
    1d4e:	b29b      	uxth	r3, r3
    1d50:	3502      	adds	r5, #2
    1d52:	429a      	cmp	r2, r3
    1d54:	d904      	bls.n	1d60 <nvm_write_buffer+0x70>
		data = buffer[i];
    1d56:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    1d58:	42bb      	cmp	r3, r7
    1d5a:	dbf2      	blt.n	1d42 <nvm_write_buffer+0x52>
		data = buffer[i];
    1d5c:	b2a4      	uxth	r4, r4
    1d5e:	e7f4      	b.n	1d4a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1d60:	4b09      	ldr	r3, [pc, #36]	; (1d88 <nvm_write_buffer+0x98>)
    1d62:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    1d64:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1d66:	2b00      	cmp	r3, #0
    1d68:	d1ca      	bne.n	1d00 <nvm_write_buffer+0x10>
    1d6a:	2a3f      	cmp	r2, #63	; 0x3f
    1d6c:	d8c8      	bhi.n	1d00 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    1d6e:	2200      	movs	r2, #0
    1d70:	0001      	movs	r1, r0
    1d72:	2004      	movs	r0, #4
    1d74:	4b07      	ldr	r3, [pc, #28]	; (1d94 <nvm_write_buffer+0xa4>)
    1d76:	4798      	blx	r3
    1d78:	0004      	movs	r4, r0
    1d7a:	e7c1      	b.n	1d00 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1d7c:	4b02      	ldr	r3, [pc, #8]	; (1d88 <nvm_write_buffer+0x98>)
    1d7e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    1d80:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1d82:	2b00      	cmp	r3, #0
    1d84:	d0f3      	beq.n	1d6e <nvm_write_buffer+0x7e>
    1d86:	e7bb      	b.n	1d00 <nvm_write_buffer+0x10>
    1d88:	200002e4 	.word	0x200002e4
    1d8c:	41004000 	.word	0x41004000
    1d90:	ffffa544 	.word	0xffffa544
    1d94:	00001c51 	.word	0x00001c51

00001d98 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    1d98:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1d9a:	4b18      	ldr	r3, [pc, #96]	; (1dfc <nvm_read_buffer+0x64>)
    1d9c:	881d      	ldrh	r5, [r3, #0]
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1da2:	2418      	movs	r4, #24
	if (source_address >
    1da4:	4283      	cmp	r3, r0
    1da6:	d201      	bcs.n	1dac <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    1da8:	0020      	movs	r0, r4
    1daa:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    1dac:	1e6b      	subs	r3, r5, #1
    1dae:	4218      	tst	r0, r3
    1db0:	d1fa      	bne.n	1da8 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    1db2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    1db4:	4295      	cmp	r5, r2
    1db6:	d3f7      	bcc.n	1da8 <nvm_read_buffer+0x10>
    1db8:	4b11      	ldr	r3, [pc, #68]	; (1e00 <nvm_read_buffer+0x68>)
    1dba:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    1dbc:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    1dbe:	07db      	lsls	r3, r3, #31
    1dc0:	d5f2      	bpl.n	1da8 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1dc2:	2420      	movs	r4, #32
    1dc4:	34ff      	adds	r4, #255	; 0xff
    1dc6:	4b0e      	ldr	r3, [pc, #56]	; (1e00 <nvm_read_buffer+0x68>)
    1dc8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    1dca:	2a00      	cmp	r2, #0
    1dcc:	d014      	beq.n	1df8 <nvm_read_buffer+0x60>
    1dce:	2301      	movs	r3, #1
    1dd0:	4398      	bics	r0, r3
    1dd2:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    1dd4:	1e56      	subs	r6, r2, #1
    1dd6:	e004      	b.n	1de2 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    1dd8:	3302      	adds	r3, #2
    1dda:	b29b      	uxth	r3, r3
    1ddc:	3002      	adds	r0, #2
    1dde:	429a      	cmp	r2, r3
    1de0:	d908      	bls.n	1df4 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    1de2:	8804      	ldrh	r4, [r0, #0]
    1de4:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    1de6:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    1de8:	42b3      	cmp	r3, r6
    1dea:	daf5      	bge.n	1dd8 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    1dec:	18cd      	adds	r5, r1, r3
    1dee:	0a24      	lsrs	r4, r4, #8
    1df0:	706c      	strb	r4, [r5, #1]
    1df2:	e7f1      	b.n	1dd8 <nvm_read_buffer+0x40>
	return STATUS_OK;
    1df4:	2400      	movs	r4, #0
    1df6:	e7d7      	b.n	1da8 <nvm_read_buffer+0x10>
    1df8:	2400      	movs	r4, #0
    1dfa:	e7d5      	b.n	1da8 <nvm_read_buffer+0x10>
    1dfc:	200002e4 	.word	0x200002e4
    1e00:	41004000 	.word	0x41004000

00001e04 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1e04:	4b13      	ldr	r3, [pc, #76]	; (1e54 <nvm_erase_row+0x50>)
    1e06:	881a      	ldrh	r2, [r3, #0]
    1e08:	885b      	ldrh	r3, [r3, #2]
    1e0a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1e0c:	2118      	movs	r1, #24
	if (row_address >
    1e0e:	4283      	cmp	r3, r0
    1e10:	d201      	bcs.n	1e16 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    1e12:	0008      	movs	r0, r1
    1e14:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    1e16:	0092      	lsls	r2, r2, #2
    1e18:	3a01      	subs	r2, #1
    1e1a:	4210      	tst	r0, r2
    1e1c:	d1f9      	bne.n	1e12 <nvm_erase_row+0xe>
    1e1e:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <nvm_erase_row+0x54>)
    1e20:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    1e22:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    1e24:	07db      	lsls	r3, r3, #31
    1e26:	d5f4      	bpl.n	1e12 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1e28:	4b0b      	ldr	r3, [pc, #44]	; (1e58 <nvm_erase_row+0x54>)
    1e2a:	2220      	movs	r2, #32
    1e2c:	32ff      	adds	r2, #255	; 0xff
    1e2e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1e30:	0880      	lsrs	r0, r0, #2
    1e32:	0040      	lsls	r0, r0, #1
    1e34:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1e36:	4a09      	ldr	r2, [pc, #36]	; (1e5c <nvm_erase_row+0x58>)
    1e38:	801a      	strh	r2, [r3, #0]
    1e3a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    1e3c:	2201      	movs	r2, #1
    1e3e:	7d0b      	ldrb	r3, [r1, #20]
    1e40:	4213      	tst	r3, r2
    1e42:	d0fc      	beq.n	1e3e <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1e44:	4b04      	ldr	r3, [pc, #16]	; (1e58 <nvm_erase_row+0x54>)
    1e46:	8b19      	ldrh	r1, [r3, #24]
    1e48:	201c      	movs	r0, #28
    1e4a:	4001      	ands	r1, r0
	return STATUS_OK;
    1e4c:	1e48      	subs	r0, r1, #1
    1e4e:	4181      	sbcs	r1, r0
    1e50:	0089      	lsls	r1, r1, #2
    1e52:	e7de      	b.n	1e12 <nvm_erase_row+0xe>
    1e54:	200002e4 	.word	0x200002e4
    1e58:	41004000 	.word	0x41004000
    1e5c:	ffffa502 	.word	0xffffa502

00001e60 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1e60:	b500      	push	{lr}
    1e62:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1e64:	ab01      	add	r3, sp, #4
    1e66:	2280      	movs	r2, #128	; 0x80
    1e68:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1e6a:	780a      	ldrb	r2, [r1, #0]
    1e6c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1e6e:	784a      	ldrb	r2, [r1, #1]
    1e70:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1e72:	788a      	ldrb	r2, [r1, #2]
    1e74:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1e76:	0019      	movs	r1, r3
    1e78:	4b01      	ldr	r3, [pc, #4]	; (1e80 <port_pin_set_config+0x20>)
    1e7a:	4798      	blx	r3
}
    1e7c:	b003      	add	sp, #12
    1e7e:	bd00      	pop	{pc}
    1e80:	00002561 	.word	0x00002561

00001e84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1e84:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e86:	490c      	ldr	r1, [pc, #48]	; (1eb8 <system_clock_source_osc8m_set_config+0x34>)
    1e88:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1e8a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1e8c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1e8e:	7840      	ldrb	r0, [r0, #1]
    1e90:	2201      	movs	r2, #1
    1e92:	4010      	ands	r0, r2
    1e94:	0180      	lsls	r0, r0, #6
    1e96:	2640      	movs	r6, #64	; 0x40
    1e98:	43b3      	bics	r3, r6
    1e9a:	4303      	orrs	r3, r0
    1e9c:	402a      	ands	r2, r5
    1e9e:	01d2      	lsls	r2, r2, #7
    1ea0:	2080      	movs	r0, #128	; 0x80
    1ea2:	4383      	bics	r3, r0
    1ea4:	4313      	orrs	r3, r2
    1ea6:	2203      	movs	r2, #3
    1ea8:	4022      	ands	r2, r4
    1eaa:	0212      	lsls	r2, r2, #8
    1eac:	4803      	ldr	r0, [pc, #12]	; (1ebc <system_clock_source_osc8m_set_config+0x38>)
    1eae:	4003      	ands	r3, r0
    1eb0:	4313      	orrs	r3, r2
    1eb2:	620b      	str	r3, [r1, #32]
}
    1eb4:	bd70      	pop	{r4, r5, r6, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	40000800 	.word	0x40000800
    1ebc:	fffffcff 	.word	0xfffffcff

00001ec0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec2:	46ce      	mov	lr, r9
    1ec4:	4647      	mov	r7, r8
    1ec6:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1ec8:	4b19      	ldr	r3, [pc, #100]	; (1f30 <system_clock_source_osc32k_set_config+0x70>)
    1eca:	4699      	mov	r9, r3
    1ecc:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1ece:	7841      	ldrb	r1, [r0, #1]
    1ed0:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1ed2:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ed4:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ed6:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1ed8:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1eda:	7880      	ldrb	r0, [r0, #2]
    1edc:	2101      	movs	r1, #1
    1ede:	4008      	ands	r0, r1
    1ee0:	0080      	lsls	r0, r0, #2
    1ee2:	2204      	movs	r2, #4
    1ee4:	4393      	bics	r3, r2
    1ee6:	4303      	orrs	r3, r0
    1ee8:	4660      	mov	r0, ip
    1eea:	4008      	ands	r0, r1
    1eec:	00c0      	lsls	r0, r0, #3
    1eee:	3204      	adds	r2, #4
    1ef0:	4393      	bics	r3, r2
    1ef2:	4303      	orrs	r3, r0
    1ef4:	0038      	movs	r0, r7
    1ef6:	4008      	ands	r0, r1
    1ef8:	0180      	lsls	r0, r0, #6
    1efa:	2740      	movs	r7, #64	; 0x40
    1efc:	43bb      	bics	r3, r7
    1efe:	4303      	orrs	r3, r0
    1f00:	0030      	movs	r0, r6
    1f02:	4008      	ands	r0, r1
    1f04:	01c0      	lsls	r0, r0, #7
    1f06:	2680      	movs	r6, #128	; 0x80
    1f08:	43b3      	bics	r3, r6
    1f0a:	4303      	orrs	r3, r0
    1f0c:	2007      	movs	r0, #7
    1f0e:	4005      	ands	r5, r0
    1f10:	022d      	lsls	r5, r5, #8
    1f12:	4808      	ldr	r0, [pc, #32]	; (1f34 <system_clock_source_osc32k_set_config+0x74>)
    1f14:	4003      	ands	r3, r0
    1f16:	432b      	orrs	r3, r5
    1f18:	4021      	ands	r1, r4
    1f1a:	0309      	lsls	r1, r1, #12
    1f1c:	4806      	ldr	r0, [pc, #24]	; (1f38 <system_clock_source_osc32k_set_config+0x78>)
    1f1e:	4003      	ands	r3, r0
    1f20:	430b      	orrs	r3, r1
    1f22:	464a      	mov	r2, r9
    1f24:	6193      	str	r3, [r2, #24]
}
    1f26:	bc0c      	pop	{r2, r3}
    1f28:	4690      	mov	r8, r2
    1f2a:	4699      	mov	r9, r3
    1f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	40000800 	.word	0x40000800
    1f34:	fffff8ff 	.word	0xfffff8ff
    1f38:	ffffefff 	.word	0xffffefff

00001f3c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3e:	46de      	mov	lr, fp
    1f40:	4657      	mov	r7, sl
    1f42:	464e      	mov	r6, r9
    1f44:	4645      	mov	r5, r8
    1f46:	b5e0      	push	{r5, r6, r7, lr}
    1f48:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1f4a:	4b26      	ldr	r3, [pc, #152]	; (1fe4 <system_clock_source_xosc32k_set_config+0xa8>)
    1f4c:	469b      	mov	fp, r3
    1f4e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1f50:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1f52:	7800      	ldrb	r0, [r0, #0]
    1f54:	4242      	negs	r2, r0
    1f56:	4142      	adcs	r2, r0
    1f58:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1f5a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1f5c:	78ca      	ldrb	r2, [r1, #3]
    1f5e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1f60:	790a      	ldrb	r2, [r1, #4]
    1f62:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1f64:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1f66:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1f68:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1f6a:	688a      	ldr	r2, [r1, #8]
    1f6c:	491e      	ldr	r1, [pc, #120]	; (1fe8 <system_clock_source_xosc32k_set_config+0xac>)
    1f6e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1f70:	2101      	movs	r1, #1
    1f72:	464a      	mov	r2, r9
    1f74:	0092      	lsls	r2, r2, #2
    1f76:	4691      	mov	r9, r2
    1f78:	2204      	movs	r2, #4
    1f7a:	4393      	bics	r3, r2
    1f7c:	464a      	mov	r2, r9
    1f7e:	4313      	orrs	r3, r2
    1f80:	4642      	mov	r2, r8
    1f82:	400a      	ands	r2, r1
    1f84:	00d2      	lsls	r2, r2, #3
    1f86:	4690      	mov	r8, r2
    1f88:	2208      	movs	r2, #8
    1f8a:	4393      	bics	r3, r2
    1f8c:	4642      	mov	r2, r8
    1f8e:	4313      	orrs	r3, r2
    1f90:	4662      	mov	r2, ip
    1f92:	400a      	ands	r2, r1
    1f94:	0112      	lsls	r2, r2, #4
    1f96:	4694      	mov	ip, r2
    1f98:	2210      	movs	r2, #16
    1f9a:	4393      	bics	r3, r2
    1f9c:	4662      	mov	r2, ip
    1f9e:	4313      	orrs	r3, r2
    1fa0:	4008      	ands	r0, r1
    1fa2:	0140      	lsls	r0, r0, #5
    1fa4:	2220      	movs	r2, #32
    1fa6:	4393      	bics	r3, r2
    1fa8:	4303      	orrs	r3, r0
    1faa:	400f      	ands	r7, r1
    1fac:	01bf      	lsls	r7, r7, #6
    1fae:	2040      	movs	r0, #64	; 0x40
    1fb0:	4383      	bics	r3, r0
    1fb2:	433b      	orrs	r3, r7
    1fb4:	400e      	ands	r6, r1
    1fb6:	01f6      	lsls	r6, r6, #7
    1fb8:	3040      	adds	r0, #64	; 0x40
    1fba:	4383      	bics	r3, r0
    1fbc:	4333      	orrs	r3, r6
    1fbe:	3879      	subs	r0, #121	; 0x79
    1fc0:	4005      	ands	r5, r0
    1fc2:	022d      	lsls	r5, r5, #8
    1fc4:	4809      	ldr	r0, [pc, #36]	; (1fec <system_clock_source_xosc32k_set_config+0xb0>)
    1fc6:	4003      	ands	r3, r0
    1fc8:	432b      	orrs	r3, r5
    1fca:	4021      	ands	r1, r4
    1fcc:	0309      	lsls	r1, r1, #12
    1fce:	4808      	ldr	r0, [pc, #32]	; (1ff0 <system_clock_source_xosc32k_set_config+0xb4>)
    1fd0:	4003      	ands	r3, r0
    1fd2:	430b      	orrs	r3, r1
    1fd4:	465a      	mov	r2, fp
    1fd6:	8293      	strh	r3, [r2, #20]
}
    1fd8:	bc3c      	pop	{r2, r3, r4, r5}
    1fda:	4690      	mov	r8, r2
    1fdc:	4699      	mov	r9, r3
    1fde:	46a2      	mov	sl, r4
    1fe0:	46ab      	mov	fp, r5
    1fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fe4:	40000800 	.word	0x40000800
    1fe8:	200002ec 	.word	0x200002ec
    1fec:	fffff8ff 	.word	0xfffff8ff
    1ff0:	ffffefff 	.word	0xffffefff

00001ff4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1ff4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1ff6:	7a03      	ldrb	r3, [r0, #8]
    1ff8:	069b      	lsls	r3, r3, #26
    1ffa:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1ffc:	8942      	ldrh	r2, [r0, #10]
    1ffe:	0592      	lsls	r2, r2, #22
    2000:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2002:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2004:	4918      	ldr	r1, [pc, #96]	; (2068 <STACK_SIZE+0x68>)
    2006:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2008:	7983      	ldrb	r3, [r0, #6]
    200a:	79c2      	ldrb	r2, [r0, #7]
    200c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    200e:	8842      	ldrh	r2, [r0, #2]
    2010:	8884      	ldrh	r4, [r0, #4]
    2012:	4322      	orrs	r2, r4
    2014:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2016:	7842      	ldrb	r2, [r0, #1]
    2018:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    201a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    201c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    201e:	7803      	ldrb	r3, [r0, #0]
    2020:	2b04      	cmp	r3, #4
    2022:	d011      	beq.n	2048 <STACK_SIZE+0x48>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2024:	2b20      	cmp	r3, #32
    2026:	d10e      	bne.n	2046 <STACK_SIZE+0x46>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2028:	7b03      	ldrb	r3, [r0, #12]
    202a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    202c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    202e:	4313      	orrs	r3, r2
    2030:	89c2      	ldrh	r2, [r0, #14]
    2032:	0412      	lsls	r2, r2, #16
    2034:	490d      	ldr	r1, [pc, #52]	; (206c <STACK_SIZE+0x6c>)
    2036:	400a      	ands	r2, r1
    2038:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    203a:	4a0b      	ldr	r2, [pc, #44]	; (2068 <STACK_SIZE+0x68>)
    203c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    203e:	6811      	ldr	r1, [r2, #0]
    2040:	4b0b      	ldr	r3, [pc, #44]	; (2070 <STACK_SIZE+0x70>)
    2042:	430b      	orrs	r3, r1
    2044:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2046:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2048:	7b03      	ldrb	r3, [r0, #12]
    204a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    204c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    204e:	4313      	orrs	r3, r2
    2050:	89c2      	ldrh	r2, [r0, #14]
    2052:	0412      	lsls	r2, r2, #16
    2054:	4905      	ldr	r1, [pc, #20]	; (206c <STACK_SIZE+0x6c>)
    2056:	400a      	ands	r2, r1
    2058:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    205a:	4a03      	ldr	r2, [pc, #12]	; (2068 <STACK_SIZE+0x68>)
    205c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    205e:	6813      	ldr	r3, [r2, #0]
    2060:	2104      	movs	r1, #4
    2062:	430b      	orrs	r3, r1
    2064:	6013      	str	r3, [r2, #0]
    2066:	e7ee      	b.n	2046 <STACK_SIZE+0x46>
    2068:	200002ec 	.word	0x200002ec
    206c:	03ff0000 	.word	0x03ff0000
    2070:	00000424 	.word	0x00000424

00002074 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2074:	2808      	cmp	r0, #8
    2076:	d803      	bhi.n	2080 <system_clock_source_enable+0xc>
    2078:	0080      	lsls	r0, r0, #2
    207a:	4b25      	ldr	r3, [pc, #148]	; (2110 <system_clock_source_enable+0x9c>)
    207c:	581b      	ldr	r3, [r3, r0]
    207e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2080:	2017      	movs	r0, #23
    2082:	e044      	b.n	210e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2084:	4a23      	ldr	r2, [pc, #140]	; (2114 <system_clock_source_enable+0xa0>)
    2086:	6a13      	ldr	r3, [r2, #32]
    2088:	2102      	movs	r1, #2
    208a:	430b      	orrs	r3, r1
    208c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    208e:	2000      	movs	r0, #0
    2090:	e03d      	b.n	210e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2092:	4a20      	ldr	r2, [pc, #128]	; (2114 <system_clock_source_enable+0xa0>)
    2094:	6993      	ldr	r3, [r2, #24]
    2096:	2102      	movs	r1, #2
    2098:	430b      	orrs	r3, r1
    209a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    209c:	2000      	movs	r0, #0
		break;
    209e:	e036      	b.n	210e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    20a0:	4a1c      	ldr	r2, [pc, #112]	; (2114 <system_clock_source_enable+0xa0>)
    20a2:	8a13      	ldrh	r3, [r2, #16]
    20a4:	2102      	movs	r1, #2
    20a6:	430b      	orrs	r3, r1
    20a8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    20aa:	2000      	movs	r0, #0
		break;
    20ac:	e02f      	b.n	210e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    20ae:	4a19      	ldr	r2, [pc, #100]	; (2114 <system_clock_source_enable+0xa0>)
    20b0:	8a93      	ldrh	r3, [r2, #20]
    20b2:	2102      	movs	r1, #2
    20b4:	430b      	orrs	r3, r1
    20b6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    20b8:	2000      	movs	r0, #0
		break;
    20ba:	e028      	b.n	210e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    20bc:	4916      	ldr	r1, [pc, #88]	; (2118 <system_clock_source_enable+0xa4>)
    20be:	680b      	ldr	r3, [r1, #0]
    20c0:	2202      	movs	r2, #2
    20c2:	4313      	orrs	r3, r2
    20c4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    20c6:	4b13      	ldr	r3, [pc, #76]	; (2114 <system_clock_source_enable+0xa0>)
    20c8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20ca:	0019      	movs	r1, r3
    20cc:	320e      	adds	r2, #14
    20ce:	68cb      	ldr	r3, [r1, #12]
    20d0:	421a      	tst	r2, r3
    20d2:	d0fc      	beq.n	20ce <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    20d4:	4a10      	ldr	r2, [pc, #64]	; (2118 <system_clock_source_enable+0xa4>)
    20d6:	6891      	ldr	r1, [r2, #8]
    20d8:	4b0e      	ldr	r3, [pc, #56]	; (2114 <system_clock_source_enable+0xa0>)
    20da:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    20dc:	6852      	ldr	r2, [r2, #4]
    20de:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    20e0:	2200      	movs	r2, #0
    20e2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20e4:	0019      	movs	r1, r3
    20e6:	3210      	adds	r2, #16
    20e8:	68cb      	ldr	r3, [r1, #12]
    20ea:	421a      	tst	r2, r3
    20ec:	d0fc      	beq.n	20e8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    20ee:	4b0a      	ldr	r3, [pc, #40]	; (2118 <system_clock_source_enable+0xa4>)
    20f0:	681b      	ldr	r3, [r3, #0]
    20f2:	b29b      	uxth	r3, r3
    20f4:	4a07      	ldr	r2, [pc, #28]	; (2114 <system_clock_source_enable+0xa0>)
    20f6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    20f8:	2000      	movs	r0, #0
    20fa:	e008      	b.n	210e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    20fc:	4905      	ldr	r1, [pc, #20]	; (2114 <system_clock_source_enable+0xa0>)
    20fe:	2244      	movs	r2, #68	; 0x44
    2100:	5c8b      	ldrb	r3, [r1, r2]
    2102:	2002      	movs	r0, #2
    2104:	4303      	orrs	r3, r0
    2106:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2108:	2000      	movs	r0, #0
		break;
    210a:	e000      	b.n	210e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    210c:	2000      	movs	r0, #0
}
    210e:	4770      	bx	lr
    2110:	000060d8 	.word	0x000060d8
    2114:	40000800 	.word	0x40000800
    2118:	200002ec 	.word	0x200002ec

0000211c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    211e:	46d6      	mov	lr, sl
    2120:	464f      	mov	r7, r9
    2122:	4646      	mov	r6, r8
    2124:	b5c0      	push	{r6, r7, lr}
    2126:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2128:	22c2      	movs	r2, #194	; 0xc2
    212a:	00d2      	lsls	r2, r2, #3
    212c:	4b60      	ldr	r3, [pc, #384]	; (22b0 <system_clock_init+0x194>)
    212e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2130:	4a60      	ldr	r2, [pc, #384]	; (22b4 <system_clock_init+0x198>)
    2132:	6853      	ldr	r3, [r2, #4]
    2134:	211e      	movs	r1, #30
    2136:	438b      	bics	r3, r1
    2138:	391a      	subs	r1, #26
    213a:	430b      	orrs	r3, r1
    213c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    213e:	2203      	movs	r2, #3
    2140:	ab01      	add	r3, sp, #4
    2142:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2144:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2146:	4d5c      	ldr	r5, [pc, #368]	; (22b8 <system_clock_init+0x19c>)
    2148:	b2e0      	uxtb	r0, r4
    214a:	a901      	add	r1, sp, #4
    214c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    214e:	3401      	adds	r4, #1
    2150:	2c25      	cmp	r4, #37	; 0x25
    2152:	d1f9      	bne.n	2148 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2154:	a80c      	add	r0, sp, #48	; 0x30
    2156:	2300      	movs	r3, #0
    2158:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    215a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    215c:	2280      	movs	r2, #128	; 0x80
    215e:	0212      	lsls	r2, r2, #8
    2160:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2162:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2164:	2201      	movs	r2, #1
    2166:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2168:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    216a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    216c:	3205      	adds	r2, #5
    216e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2170:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2172:	4b52      	ldr	r3, [pc, #328]	; (22bc <system_clock_init+0x1a0>)
    2174:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2176:	2005      	movs	r0, #5
    2178:	4b51      	ldr	r3, [pc, #324]	; (22c0 <system_clock_init+0x1a4>)
    217a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    217c:	494c      	ldr	r1, [pc, #304]	; (22b0 <system_clock_init+0x194>)
    217e:	2202      	movs	r2, #2
    2180:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2182:	421a      	tst	r2, r3
    2184:	d0fc      	beq.n	2180 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2186:	494a      	ldr	r1, [pc, #296]	; (22b0 <system_clock_init+0x194>)
    2188:	8a8b      	ldrh	r3, [r1, #20]
    218a:	2280      	movs	r2, #128	; 0x80
    218c:	4313      	orrs	r3, r2
    218e:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2190:	4c4c      	ldr	r4, [pc, #304]	; (22c4 <system_clock_init+0x1a8>)
	SYSCTRL->OSC32K.bit.CALIB =
    2192:	6823      	ldr	r3, [r4, #0]
    2194:	04db      	lsls	r3, r3, #19
    2196:	698a      	ldr	r2, [r1, #24]
    2198:	0e5b      	lsrs	r3, r3, #25
    219a:	041b      	lsls	r3, r3, #16
    219c:	484a      	ldr	r0, [pc, #296]	; (22c8 <system_clock_init+0x1ac>)
    219e:	4002      	ands	r2, r0
    21a0:	4313      	orrs	r3, r2
    21a2:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    21a4:	a80a      	add	r0, sp, #40	; 0x28
    21a6:	2301      	movs	r3, #1
    21a8:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    21aa:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    21ac:	2500      	movs	r5, #0
    21ae:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    21b0:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    21b2:	3306      	adds	r3, #6
    21b4:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    21b6:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    21b8:	4b44      	ldr	r3, [pc, #272]	; (22cc <system_clock_init+0x1b0>)
    21ba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    21bc:	2004      	movs	r0, #4
    21be:	4b40      	ldr	r3, [pc, #256]	; (22c0 <system_clock_init+0x1a4>)
    21c0:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    21c2:	ab05      	add	r3, sp, #20
    21c4:	2200      	movs	r2, #0
    21c6:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    21c8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    21ca:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    21cc:	2120      	movs	r1, #32
    21ce:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    21d0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    21d2:	6823      	ldr	r3, [r4, #0]
    21d4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    21d6:	2b3f      	cmp	r3, #63	; 0x3f
    21d8:	d068      	beq.n	22ac <system_clock_init+0x190>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    21da:	a805      	add	r0, sp, #20
    21dc:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    21de:	2307      	movs	r3, #7
    21e0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    21e2:	3303      	adds	r3, #3
    21e4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    21e6:	4b3a      	ldr	r3, [pc, #232]	; (22d0 <system_clock_init+0x1b4>)
    21e8:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    21ea:	3bff      	subs	r3, #255	; 0xff
    21ec:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    21ee:	4b39      	ldr	r3, [pc, #228]	; (22d4 <system_clock_init+0x1b8>)
    21f0:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    21f2:	4b39      	ldr	r3, [pc, #228]	; (22d8 <system_clock_init+0x1bc>)
    21f4:	4798      	blx	r3
	config->run_in_standby  = false;
    21f6:	a804      	add	r0, sp, #16
    21f8:	2500      	movs	r5, #0
    21fa:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    21fc:	2601      	movs	r6, #1
    21fe:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2200:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2202:	4b36      	ldr	r3, [pc, #216]	; (22dc <system_clock_init+0x1c0>)
    2204:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2206:	2006      	movs	r0, #6
    2208:	4b2d      	ldr	r3, [pc, #180]	; (22c0 <system_clock_init+0x1a4>)
    220a:	4699      	mov	r9, r3
    220c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    220e:	4b34      	ldr	r3, [pc, #208]	; (22e0 <system_clock_init+0x1c4>)
    2210:	4798      	blx	r3
	config->division_factor    = 1;
    2212:	ac01      	add	r4, sp, #4
    2214:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2216:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2218:	2306      	movs	r3, #6
    221a:	469a      	mov	sl, r3
    221c:	7023      	strb	r3, [r4, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    221e:	7226      	strb	r6, [r4, #8]
    2220:	7266      	strb	r6, [r4, #9]
    2222:	0021      	movs	r1, r4
    2224:	2001      	movs	r0, #1
    2226:	4b2f      	ldr	r3, [pc, #188]	; (22e4 <system_clock_init+0x1c8>)
    2228:	4698      	mov	r8, r3
    222a:	4798      	blx	r3
    222c:	2001      	movs	r0, #1
    222e:	4f2e      	ldr	r7, [pc, #184]	; (22e8 <system_clock_init+0x1cc>)
    2230:	47b8      	blx	r7
	config->division_factor    = 1;
    2232:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2234:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2236:	4653      	mov	r3, sl
    2238:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    223a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    223c:	7265      	strb	r5, [r4, #9]
    223e:	0021      	movs	r1, r4
    2240:	2002      	movs	r0, #2
    2242:	47c0      	blx	r8
    2244:	2002      	movs	r0, #2
    2246:	47b8      	blx	r7
	config->high_when_disabled = false;
    2248:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    224a:	7265      	strb	r5, [r4, #9]
    224c:	2304      	movs	r3, #4
    224e:	7023      	strb	r3, [r4, #0]
    2250:	331c      	adds	r3, #28
    2252:	6063      	str	r3, [r4, #4]
    2254:	7226      	strb	r6, [r4, #8]
    2256:	0021      	movs	r1, r4
    2258:	2004      	movs	r0, #4
    225a:	47c0      	blx	r8
    225c:	2004      	movs	r0, #4
    225e:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2260:	2007      	movs	r0, #7
    2262:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2264:	4912      	ldr	r1, [pc, #72]	; (22b0 <system_clock_init+0x194>)
    2266:	2210      	movs	r2, #16
    2268:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    226a:	421a      	tst	r2, r3
    226c:	d0fc      	beq.n	2268 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    226e:	4a10      	ldr	r2, [pc, #64]	; (22b0 <system_clock_init+0x194>)
    2270:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2272:	2180      	movs	r1, #128	; 0x80
    2274:	430b      	orrs	r3, r1
    2276:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2278:	4a1c      	ldr	r2, [pc, #112]	; (22ec <system_clock_init+0x1d0>)
    227a:	2300      	movs	r3, #0
    227c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    227e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2280:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2282:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2284:	a901      	add	r1, sp, #4
    2286:	2201      	movs	r2, #1
    2288:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    228a:	704b      	strb	r3, [r1, #1]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    228c:	3307      	adds	r3, #7
    228e:	700b      	strb	r3, [r1, #0]
    2290:	720a      	strb	r2, [r1, #8]
    2292:	724a      	strb	r2, [r1, #9]
    2294:	2000      	movs	r0, #0
    2296:	4b13      	ldr	r3, [pc, #76]	; (22e4 <system_clock_init+0x1c8>)
    2298:	4798      	blx	r3
    229a:	2000      	movs	r0, #0
    229c:	4b12      	ldr	r3, [pc, #72]	; (22e8 <system_clock_init+0x1cc>)
    229e:	4798      	blx	r3
#endif
}
    22a0:	b010      	add	sp, #64	; 0x40
    22a2:	bc1c      	pop	{r2, r3, r4}
    22a4:	4690      	mov	r8, r2
    22a6:	4699      	mov	r9, r3
    22a8:	46a2      	mov	sl, r4
    22aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    22ac:	3b20      	subs	r3, #32
    22ae:	e794      	b.n	21da <system_clock_init+0xbe>
    22b0:	40000800 	.word	0x40000800
    22b4:	41004000 	.word	0x41004000
    22b8:	0000249d 	.word	0x0000249d
    22bc:	00001f3d 	.word	0x00001f3d
    22c0:	00002075 	.word	0x00002075
    22c4:	00806024 	.word	0x00806024
    22c8:	ff80ffff 	.word	0xff80ffff
    22cc:	00001ec1 	.word	0x00001ec1
    22d0:	000001ff 	.word	0x000001ff
    22d4:	ffffbb80 	.word	0xffffbb80
    22d8:	00001ff5 	.word	0x00001ff5
    22dc:	00001e85 	.word	0x00001e85
    22e0:	000022f1 	.word	0x000022f1
    22e4:	00002315 	.word	0x00002315
    22e8:	000023cd 	.word	0x000023cd
    22ec:	40000400 	.word	0x40000400

000022f0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    22f0:	4a06      	ldr	r2, [pc, #24]	; (230c <system_gclk_init+0x1c>)
    22f2:	6993      	ldr	r3, [r2, #24]
    22f4:	2108      	movs	r1, #8
    22f6:	430b      	orrs	r3, r1
    22f8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    22fa:	2201      	movs	r2, #1
    22fc:	4b04      	ldr	r3, [pc, #16]	; (2310 <system_gclk_init+0x20>)
    22fe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2300:	0019      	movs	r1, r3
    2302:	780b      	ldrb	r3, [r1, #0]
    2304:	4213      	tst	r3, r2
    2306:	d1fc      	bne.n	2302 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2308:	4770      	bx	lr
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	40000400 	.word	0x40000400
    2310:	40000c00 	.word	0x40000c00

00002314 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2318:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    231a:	780d      	ldrb	r5, [r1, #0]
    231c:	022d      	lsls	r5, r5, #8
    231e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2320:	784b      	ldrb	r3, [r1, #1]
    2322:	2b00      	cmp	r3, #0
    2324:	d002      	beq.n	232c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2326:	2380      	movs	r3, #128	; 0x80
    2328:	02db      	lsls	r3, r3, #11
    232a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    232c:	7a4b      	ldrb	r3, [r1, #9]
    232e:	2b00      	cmp	r3, #0
    2330:	d002      	beq.n	2338 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2332:	2380      	movs	r3, #128	; 0x80
    2334:	031b      	lsls	r3, r3, #12
    2336:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2338:	6848      	ldr	r0, [r1, #4]
    233a:	2801      	cmp	r0, #1
    233c:	d910      	bls.n	2360 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    233e:	1e43      	subs	r3, r0, #1
    2340:	4218      	tst	r0, r3
    2342:	d134      	bne.n	23ae <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2344:	2802      	cmp	r0, #2
    2346:	d930      	bls.n	23aa <system_gclk_gen_set_config+0x96>
    2348:	2302      	movs	r3, #2
    234a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    234c:	3201      	adds	r2, #1
						mask <<= 1) {
    234e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2350:	4298      	cmp	r0, r3
    2352:	d8fb      	bhi.n	234c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2354:	0212      	lsls	r2, r2, #8
    2356:	4332      	orrs	r2, r6
    2358:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    235a:	2380      	movs	r3, #128	; 0x80
    235c:	035b      	lsls	r3, r3, #13
    235e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2360:	7a0b      	ldrb	r3, [r1, #8]
    2362:	2b00      	cmp	r3, #0
    2364:	d002      	beq.n	236c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2366:	2380      	movs	r3, #128	; 0x80
    2368:	039b      	lsls	r3, r3, #14
    236a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    236c:	4a13      	ldr	r2, [pc, #76]	; (23bc <system_gclk_gen_set_config+0xa8>)
    236e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2370:	b25b      	sxtb	r3, r3
    2372:	2b00      	cmp	r3, #0
    2374:	dbfb      	blt.n	236e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2376:	4b12      	ldr	r3, [pc, #72]	; (23c0 <system_gclk_gen_set_config+0xac>)
    2378:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    237a:	4b12      	ldr	r3, [pc, #72]	; (23c4 <system_gclk_gen_set_config+0xb0>)
    237c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    237e:	4a0f      	ldr	r2, [pc, #60]	; (23bc <system_gclk_gen_set_config+0xa8>)
    2380:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2382:	b25b      	sxtb	r3, r3
    2384:	2b00      	cmp	r3, #0
    2386:	dbfb      	blt.n	2380 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2388:	4b0c      	ldr	r3, [pc, #48]	; (23bc <system_gclk_gen_set_config+0xa8>)
    238a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    238c:	001a      	movs	r2, r3
    238e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2390:	b25b      	sxtb	r3, r3
    2392:	2b00      	cmp	r3, #0
    2394:	dbfb      	blt.n	238e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2396:	4a09      	ldr	r2, [pc, #36]	; (23bc <system_gclk_gen_set_config+0xa8>)
    2398:	6853      	ldr	r3, [r2, #4]
    239a:	2180      	movs	r1, #128	; 0x80
    239c:	0249      	lsls	r1, r1, #9
    239e:	400b      	ands	r3, r1
    23a0:	431d      	orrs	r5, r3
    23a2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    23a4:	4b08      	ldr	r3, [pc, #32]	; (23c8 <system_gclk_gen_set_config+0xb4>)
    23a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23a8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    23aa:	2200      	movs	r2, #0
    23ac:	e7d2      	b.n	2354 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    23ae:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    23b0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23b2:	2380      	movs	r3, #128	; 0x80
    23b4:	029b      	lsls	r3, r3, #10
    23b6:	431d      	orrs	r5, r3
    23b8:	e7d2      	b.n	2360 <system_gclk_gen_set_config+0x4c>
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	40000c00 	.word	0x40000c00
    23c0:	00001951 	.word	0x00001951
    23c4:	40000c08 	.word	0x40000c08
    23c8:	00001991 	.word	0x00001991

000023cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    23cc:	b510      	push	{r4, lr}
    23ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23d0:	4a0b      	ldr	r2, [pc, #44]	; (2400 <system_gclk_gen_enable+0x34>)
    23d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23d4:	b25b      	sxtb	r3, r3
    23d6:	2b00      	cmp	r3, #0
    23d8:	dbfb      	blt.n	23d2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    23da:	4b0a      	ldr	r3, [pc, #40]	; (2404 <system_gclk_gen_enable+0x38>)
    23dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23de:	4b0a      	ldr	r3, [pc, #40]	; (2408 <system_gclk_gen_enable+0x3c>)
    23e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23e2:	4a07      	ldr	r2, [pc, #28]	; (2400 <system_gclk_gen_enable+0x34>)
    23e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23e6:	b25b      	sxtb	r3, r3
    23e8:	2b00      	cmp	r3, #0
    23ea:	dbfb      	blt.n	23e4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    23ec:	4a04      	ldr	r2, [pc, #16]	; (2400 <system_gclk_gen_enable+0x34>)
    23ee:	6851      	ldr	r1, [r2, #4]
    23f0:	2380      	movs	r3, #128	; 0x80
    23f2:	025b      	lsls	r3, r3, #9
    23f4:	430b      	orrs	r3, r1
    23f6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    23f8:	4b04      	ldr	r3, [pc, #16]	; (240c <system_gclk_gen_enable+0x40>)
    23fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23fc:	bd10      	pop	{r4, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	40000c00 	.word	0x40000c00
    2404:	00001951 	.word	0x00001951
    2408:	40000c04 	.word	0x40000c04
    240c:	00001991 	.word	0x00001991

00002410 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2410:	b510      	push	{r4, lr}
    2412:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <system_gclk_chan_enable+0x20>)
    2416:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2418:	4b06      	ldr	r3, [pc, #24]	; (2434 <system_gclk_chan_enable+0x24>)
    241a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    241c:	4a06      	ldr	r2, [pc, #24]	; (2438 <system_gclk_chan_enable+0x28>)
    241e:	8853      	ldrh	r3, [r2, #2]
    2420:	2180      	movs	r1, #128	; 0x80
    2422:	01c9      	lsls	r1, r1, #7
    2424:	430b      	orrs	r3, r1
    2426:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2428:	4b04      	ldr	r3, [pc, #16]	; (243c <system_gclk_chan_enable+0x2c>)
    242a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    242c:	bd10      	pop	{r4, pc}
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	00001951 	.word	0x00001951
    2434:	40000c02 	.word	0x40000c02
    2438:	40000c00 	.word	0x40000c00
    243c:	00001991 	.word	0x00001991

00002440 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2440:	b510      	push	{r4, lr}
    2442:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2444:	4b0f      	ldr	r3, [pc, #60]	; (2484 <system_gclk_chan_disable+0x44>)
    2446:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2448:	4b0f      	ldr	r3, [pc, #60]	; (2488 <system_gclk_chan_disable+0x48>)
    244a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    244c:	4a0f      	ldr	r2, [pc, #60]	; (248c <system_gclk_chan_disable+0x4c>)
    244e:	8853      	ldrh	r3, [r2, #2]
    2450:	051b      	lsls	r3, r3, #20
    2452:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2454:	8853      	ldrh	r3, [r2, #2]
    2456:	490e      	ldr	r1, [pc, #56]	; (2490 <system_gclk_chan_disable+0x50>)
    2458:	400b      	ands	r3, r1
    245a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    245c:	8853      	ldrh	r3, [r2, #2]
    245e:	490d      	ldr	r1, [pc, #52]	; (2494 <system_gclk_chan_disable+0x54>)
    2460:	400b      	ands	r3, r1
    2462:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2464:	0011      	movs	r1, r2
    2466:	2280      	movs	r2, #128	; 0x80
    2468:	01d2      	lsls	r2, r2, #7
    246a:	884b      	ldrh	r3, [r1, #2]
    246c:	4213      	tst	r3, r2
    246e:	d1fc      	bne.n	246a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2470:	4906      	ldr	r1, [pc, #24]	; (248c <system_gclk_chan_disable+0x4c>)
    2472:	884a      	ldrh	r2, [r1, #2]
    2474:	0203      	lsls	r3, r0, #8
    2476:	4806      	ldr	r0, [pc, #24]	; (2490 <system_gclk_chan_disable+0x50>)
    2478:	4002      	ands	r2, r0
    247a:	4313      	orrs	r3, r2
    247c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    247e:	4b06      	ldr	r3, [pc, #24]	; (2498 <system_gclk_chan_disable+0x58>)
    2480:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2482:	bd10      	pop	{r4, pc}
    2484:	00001951 	.word	0x00001951
    2488:	40000c02 	.word	0x40000c02
    248c:	40000c00 	.word	0x40000c00
    2490:	fffff0ff 	.word	0xfffff0ff
    2494:	ffffbfff 	.word	0xffffbfff
    2498:	00001991 	.word	0x00001991

0000249c <system_gclk_chan_set_config>:
{
    249c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    249e:	780c      	ldrb	r4, [r1, #0]
    24a0:	0224      	lsls	r4, r4, #8
    24a2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    24a4:	4b02      	ldr	r3, [pc, #8]	; (24b0 <system_gclk_chan_set_config+0x14>)
    24a6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    24a8:	b2a4      	uxth	r4, r4
    24aa:	4b02      	ldr	r3, [pc, #8]	; (24b4 <system_gclk_chan_set_config+0x18>)
    24ac:	805c      	strh	r4, [r3, #2]
}
    24ae:	bd10      	pop	{r4, pc}
    24b0:	00002441 	.word	0x00002441
    24b4:	40000c00 	.word	0x40000c00

000024b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    24b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    24ba:	78d3      	ldrb	r3, [r2, #3]
    24bc:	2b00      	cmp	r3, #0
    24be:	d135      	bne.n	252c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    24c0:	7813      	ldrb	r3, [r2, #0]
    24c2:	2b80      	cmp	r3, #128	; 0x80
    24c4:	d029      	beq.n	251a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    24c6:	061b      	lsls	r3, r3, #24
    24c8:	2480      	movs	r4, #128	; 0x80
    24ca:	0264      	lsls	r4, r4, #9
    24cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    24ce:	7854      	ldrb	r4, [r2, #1]
    24d0:	2502      	movs	r5, #2
    24d2:	43ac      	bics	r4, r5
    24d4:	d106      	bne.n	24e4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    24d6:	7894      	ldrb	r4, [r2, #2]
    24d8:	2c00      	cmp	r4, #0
    24da:	d120      	bne.n	251e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    24dc:	2480      	movs	r4, #128	; 0x80
    24de:	02a4      	lsls	r4, r4, #10
    24e0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    24e2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24e4:	7854      	ldrb	r4, [r2, #1]
    24e6:	3c01      	subs	r4, #1
    24e8:	2c01      	cmp	r4, #1
    24ea:	d91c      	bls.n	2526 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    24ec:	040d      	lsls	r5, r1, #16
    24ee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    24f0:	24a0      	movs	r4, #160	; 0xa0
    24f2:	05e4      	lsls	r4, r4, #23
    24f4:	432c      	orrs	r4, r5
    24f6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24f8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    24fa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24fc:	24d0      	movs	r4, #208	; 0xd0
    24fe:	0624      	lsls	r4, r4, #24
    2500:	432c      	orrs	r4, r5
    2502:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2504:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2506:	78d4      	ldrb	r4, [r2, #3]
    2508:	2c00      	cmp	r4, #0
    250a:	d122      	bne.n	2552 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    250c:	035b      	lsls	r3, r3, #13
    250e:	d51c      	bpl.n	254a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2510:	7893      	ldrb	r3, [r2, #2]
    2512:	2b01      	cmp	r3, #1
    2514:	d01e      	beq.n	2554 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2516:	6141      	str	r1, [r0, #20]
    2518:	e017      	b.n	254a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    251a:	2300      	movs	r3, #0
    251c:	e7d7      	b.n	24ce <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    251e:	24c0      	movs	r4, #192	; 0xc0
    2520:	02e4      	lsls	r4, r4, #11
    2522:	4323      	orrs	r3, r4
    2524:	e7dd      	b.n	24e2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2526:	4c0d      	ldr	r4, [pc, #52]	; (255c <_system_pinmux_config+0xa4>)
    2528:	4023      	ands	r3, r4
    252a:	e7df      	b.n	24ec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    252c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    252e:	040c      	lsls	r4, r1, #16
    2530:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2532:	23a0      	movs	r3, #160	; 0xa0
    2534:	05db      	lsls	r3, r3, #23
    2536:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2538:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    253a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    253c:	23d0      	movs	r3, #208	; 0xd0
    253e:	061b      	lsls	r3, r3, #24
    2540:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2542:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2544:	78d3      	ldrb	r3, [r2, #3]
    2546:	2b00      	cmp	r3, #0
    2548:	d103      	bne.n	2552 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    254a:	7853      	ldrb	r3, [r2, #1]
    254c:	3b01      	subs	r3, #1
    254e:	2b01      	cmp	r3, #1
    2550:	d902      	bls.n	2558 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2552:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2554:	6181      	str	r1, [r0, #24]
    2556:	e7f8      	b.n	254a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2558:	6081      	str	r1, [r0, #8]
}
    255a:	e7fa      	b.n	2552 <_system_pinmux_config+0x9a>
    255c:	fffbffff 	.word	0xfffbffff

00002560 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2560:	b510      	push	{r4, lr}
    2562:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2564:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2566:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2568:	2900      	cmp	r1, #0
    256a:	d104      	bne.n	2576 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    256c:	0943      	lsrs	r3, r0, #5
    256e:	01db      	lsls	r3, r3, #7
    2570:	4905      	ldr	r1, [pc, #20]	; (2588 <system_pinmux_pin_set_config+0x28>)
    2572:	468c      	mov	ip, r1
    2574:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2576:	241f      	movs	r4, #31
    2578:	4020      	ands	r0, r4
    257a:	2101      	movs	r1, #1
    257c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    257e:	0018      	movs	r0, r3
    2580:	4b02      	ldr	r3, [pc, #8]	; (258c <system_pinmux_pin_set_config+0x2c>)
    2582:	4798      	blx	r3
}
    2584:	bd10      	pop	{r4, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	41004400 	.word	0x41004400
    258c:	000024b9 	.word	0x000024b9

00002590 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2590:	4770      	bx	lr
	...

00002594 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2594:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2596:	4b05      	ldr	r3, [pc, #20]	; (25ac <system_init+0x18>)
    2598:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    259a:	4b05      	ldr	r3, [pc, #20]	; (25b0 <system_init+0x1c>)
    259c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    259e:	4b05      	ldr	r3, [pc, #20]	; (25b4 <system_init+0x20>)
    25a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <system_init+0x24>)
    25a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    25a6:	4b05      	ldr	r3, [pc, #20]	; (25bc <system_init+0x28>)
    25a8:	4798      	blx	r3
}
    25aa:	bd10      	pop	{r4, pc}
    25ac:	0000211d 	.word	0x0000211d
    25b0:	000019c1 	.word	0x000019c1
    25b4:	00002591 	.word	0x00002591
    25b8:	00001ad1 	.word	0x00001ad1
    25bc:	00002591 	.word	0x00002591

000025c0 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    25c0:	b510      	push	{r4, lr}
    25c2:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    25c4:	ab03      	add	r3, sp, #12
    25c6:	2200      	movs	r2, #0
    25c8:	701a      	strb	r2, [r3, #0]
    25ca:	3203      	adds	r2, #3
    25cc:	705a      	strb	r2, [r3, #1]
    25ce:	3a01      	subs	r2, #1
    25d0:	709a      	strb	r2, [r3, #2]
    25d2:	3a01      	subs	r2, #1
    25d4:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    25d6:	4b27      	ldr	r3, [pc, #156]	; (2674 <udd_sleep_mode+0xb4>)
    25d8:	781b      	ldrb	r3, [r3, #0]
    25da:	4283      	cmp	r3, r0
    25dc:	d007      	beq.n	25ee <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    25de:	2800      	cmp	r0, #0
    25e0:	d107      	bne.n	25f2 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    25e2:	4b24      	ldr	r3, [pc, #144]	; (2674 <udd_sleep_mode+0xb4>)
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d123      	bne.n	2632 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    25ea:	4b22      	ldr	r3, [pc, #136]	; (2674 <udd_sleep_mode+0xb4>)
    25ec:	7018      	strb	r0, [r3, #0]
}
    25ee:	b004      	add	sp, #16
    25f0:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    25f2:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    25f4:	5c1b      	ldrb	r3, [r3, r0]
    25f6:	4a20      	ldr	r2, [pc, #128]	; (2678 <udd_sleep_mode+0xb8>)
    25f8:	5cd2      	ldrb	r2, [r2, r3]
    25fa:	2aff      	cmp	r2, #255	; 0xff
    25fc:	d100      	bne.n	2600 <udd_sleep_mode+0x40>
    25fe:	e7fe      	b.n	25fe <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2600:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2604:	4251      	negs	r1, r2
    2606:	414a      	adcs	r2, r1
    2608:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    260a:	b672      	cpsid	i
    260c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2610:	2100      	movs	r1, #0
    2612:	4a1a      	ldr	r2, [pc, #104]	; (267c <udd_sleep_mode+0xbc>)
    2614:	7011      	strb	r1, [r2, #0]
	return flags;
    2616:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2618:	4917      	ldr	r1, [pc, #92]	; (2678 <udd_sleep_mode+0xb8>)
    261a:	5cca      	ldrb	r2, [r1, r3]
    261c:	3201      	adds	r2, #1
    261e:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2620:	2c00      	cmp	r4, #0
    2622:	d0de      	beq.n	25e2 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2624:	2201      	movs	r2, #1
    2626:	4b15      	ldr	r3, [pc, #84]	; (267c <udd_sleep_mode+0xbc>)
    2628:	701a      	strb	r2, [r3, #0]
    262a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    262e:	b662      	cpsie	i
    2630:	e7d7      	b.n	25e2 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2632:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2634:	5cd3      	ldrb	r3, [r2, r3]
    2636:	4a10      	ldr	r2, [pc, #64]	; (2678 <udd_sleep_mode+0xb8>)
    2638:	5cd2      	ldrb	r2, [r2, r3]
    263a:	2a00      	cmp	r2, #0
    263c:	d100      	bne.n	2640 <udd_sleep_mode+0x80>
    263e:	e7fe      	b.n	263e <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2640:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2644:	4251      	negs	r1, r2
    2646:	414a      	adcs	r2, r1
    2648:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    264a:	b672      	cpsid	i
    264c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2650:	2100      	movs	r1, #0
    2652:	4a0a      	ldr	r2, [pc, #40]	; (267c <udd_sleep_mode+0xbc>)
    2654:	7011      	strb	r1, [r2, #0]
	return flags;
    2656:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2658:	4907      	ldr	r1, [pc, #28]	; (2678 <udd_sleep_mode+0xb8>)
    265a:	5cca      	ldrb	r2, [r1, r3]
    265c:	3a01      	subs	r2, #1
    265e:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2660:	2c00      	cmp	r4, #0
    2662:	d0c2      	beq.n	25ea <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2664:	2201      	movs	r2, #1
    2666:	4b05      	ldr	r3, [pc, #20]	; (267c <udd_sleep_mode+0xbc>)
    2668:	701a      	strb	r2, [r3, #0]
    266a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    266e:	b662      	cpsie	i
    2670:	e7bb      	b.n	25ea <udd_sleep_mode+0x2a>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	20000384 	.word	0x20000384
    2678:	20000478 	.word	0x20000478
    267c:	20000100 	.word	0x20000100

00002680 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2680:	230f      	movs	r3, #15
    2682:	4003      	ands	r3, r0
    2684:	005b      	lsls	r3, r3, #1
    2686:	09c0      	lsrs	r0, r0, #7
    2688:	1818      	adds	r0, r3, r0
    268a:	3802      	subs	r0, #2
    268c:	0083      	lsls	r3, r0, #2
    268e:	1818      	adds	r0, r3, r0
    2690:	0080      	lsls	r0, r0, #2
    2692:	4b01      	ldr	r3, [pc, #4]	; (2698 <udd_ep_get_job+0x18>)
    2694:	1818      	adds	r0, r3, r0
}
    2696:	4770      	bx	lr
    2698:	2000030c 	.word	0x2000030c

0000269c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    269c:	b5f0      	push	{r4, r5, r6, r7, lr}
    269e:	46d6      	mov	lr, sl
    26a0:	464f      	mov	r7, r9
    26a2:	4646      	mov	r6, r8
    26a4:	b5c0      	push	{r6, r7, lr}
    26a6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    26a8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    26aa:	b26b      	sxtb	r3, r5
    26ac:	2b00      	cmp	r3, #0
    26ae:	db26      	blt.n	26fe <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    26b0:	0028      	movs	r0, r5
    26b2:	4b5e      	ldr	r3, [pc, #376]	; (282c <udd_ep_transfer_process+0x190>)
    26b4:	4798      	blx	r3
    26b6:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    26b8:	270f      	movs	r7, #15
    26ba:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    26bc:	8a03      	ldrh	r3, [r0, #16]
    26be:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    26c0:	464b      	mov	r3, r9
    26c2:	881b      	ldrh	r3, [r3, #0]
    26c4:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    26c6:	7c83      	ldrb	r3, [r0, #18]
    26c8:	075b      	lsls	r3, r3, #29
    26ca:	d46a      	bmi.n	27a2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    26cc:	68e3      	ldr	r3, [r4, #12]
    26ce:	4453      	add	r3, sl
    26d0:	001e      	movs	r6, r3
    26d2:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    26d4:	68a3      	ldr	r3, [r4, #8]
    26d6:	429e      	cmp	r6, r3
    26d8:	d800      	bhi.n	26dc <udd_ep_transfer_process+0x40>
    26da:	e074      	b.n	27c6 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    26dc:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    26de:	7ca3      	ldrb	r3, [r4, #18]
    26e0:	2201      	movs	r2, #1
    26e2:	4393      	bics	r3, r2
    26e4:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    26e6:	6823      	ldr	r3, [r4, #0]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d003      	beq.n	26f4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    26ec:	68e1      	ldr	r1, [r4, #12]
    26ee:	002a      	movs	r2, r5
    26f0:	2000      	movs	r0, #0
    26f2:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    26f4:	bc1c      	pop	{r2, r3, r4}
    26f6:	4690      	mov	r8, r2
    26f8:	4699      	mov	r9, r3
    26fa:	46a2      	mov	sl, r4
    26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    26fe:	0028      	movs	r0, r5
    2700:	4b4a      	ldr	r3, [pc, #296]	; (282c <udd_ep_transfer_process+0x190>)
    2702:	4798      	blx	r3
    2704:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2706:	270f      	movs	r7, #15
    2708:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    270a:	8a03      	ldrh	r3, [r0, #16]
    270c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    270e:	464b      	mov	r3, r9
    2710:	885e      	ldrh	r6, [r3, #2]
    2712:	68c3      	ldr	r3, [r0, #12]
    2714:	469c      	mov	ip, r3
    2716:	4466      	add	r6, ip
    2718:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    271a:	6881      	ldr	r1, [r0, #8]
    271c:	428e      	cmp	r6, r1
    271e:	d025      	beq.n	276c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2720:	1b8d      	subs	r5, r1, r6
    2722:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2724:	4b42      	ldr	r3, [pc, #264]	; (2830 <udd_ep_transfer_process+0x194>)
    2726:	429d      	cmp	r5, r3
    2728:	d906      	bls.n	2738 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    272a:	001d      	movs	r5, r3
    272c:	4641      	mov	r1, r8
    272e:	0018      	movs	r0, r3
    2730:	4b40      	ldr	r3, [pc, #256]	; (2834 <udd_ep_transfer_process+0x198>)
    2732:	4798      	blx	r3
    2734:	1a6d      	subs	r5, r5, r1
    2736:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2738:	7ca2      	ldrb	r2, [r4, #18]
    273a:	2300      	movs	r3, #0
    273c:	0792      	lsls	r2, r2, #30
    273e:	d507      	bpl.n	2750 <udd_ep_transfer_process+0xb4>
    2740:	4641      	mov	r1, r8
    2742:	0028      	movs	r0, r5
    2744:	4b3c      	ldr	r3, [pc, #240]	; (2838 <udd_ep_transfer_process+0x19c>)
    2746:	4798      	blx	r3
    2748:	b289      	uxth	r1, r1
    274a:	424b      	negs	r3, r1
    274c:	414b      	adcs	r3, r1
    274e:	b2db      	uxtb	r3, r3
    2750:	005b      	lsls	r3, r3, #1
    2752:	7ca2      	ldrb	r2, [r4, #18]
    2754:	2102      	movs	r1, #2
    2756:	438a      	bics	r2, r1
    2758:	4313      	orrs	r3, r2
    275a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    275c:	6862      	ldr	r2, [r4, #4]
    275e:	1992      	adds	r2, r2, r6
    2760:	002b      	movs	r3, r5
    2762:	0039      	movs	r1, r7
    2764:	4835      	ldr	r0, [pc, #212]	; (283c <udd_ep_transfer_process+0x1a0>)
    2766:	4c36      	ldr	r4, [pc, #216]	; (2840 <udd_ep_transfer_process+0x1a4>)
    2768:	47a0      	blx	r4
    276a:	e7c3      	b.n	26f4 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    276c:	7c83      	ldrb	r3, [r0, #18]
    276e:	079b      	lsls	r3, r3, #30
    2770:	d40b      	bmi.n	278a <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2772:	7c83      	ldrb	r3, [r0, #18]
    2774:	2201      	movs	r2, #1
    2776:	4393      	bics	r3, r2
    2778:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    277a:	6803      	ldr	r3, [r0, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d0b9      	beq.n	26f4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2780:	002a      	movs	r2, r5
    2782:	0031      	movs	r1, r6
    2784:	2000      	movs	r0, #0
    2786:	4798      	blx	r3
    2788:	e7b4      	b.n	26f4 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    278a:	7c83      	ldrb	r3, [r0, #18]
    278c:	2202      	movs	r2, #2
    278e:	4393      	bics	r3, r2
    2790:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2792:	6842      	ldr	r2, [r0, #4]
    2794:	1992      	adds	r2, r2, r6
    2796:	2300      	movs	r3, #0
    2798:	0039      	movs	r1, r7
    279a:	4828      	ldr	r0, [pc, #160]	; (283c <udd_ep_transfer_process+0x1a0>)
    279c:	4c28      	ldr	r4, [pc, #160]	; (2840 <udd_ep_transfer_process+0x1a4>)
    279e:	47a0      	blx	r4
    27a0:	e7a8      	b.n	26f4 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    27a2:	6843      	ldr	r3, [r0, #4]
    27a4:	68c2      	ldr	r2, [r0, #12]
    27a6:	4694      	mov	ip, r2
    27a8:	4463      	add	r3, ip
    27aa:	001e      	movs	r6, r3
    27ac:	4641      	mov	r1, r8
    27ae:	6880      	ldr	r0, [r0, #8]
    27b0:	4b21      	ldr	r3, [pc, #132]	; (2838 <udd_ep_transfer_process+0x19c>)
    27b2:	4798      	blx	r3
    27b4:	000a      	movs	r2, r1
    27b6:	1e7b      	subs	r3, r7, #1
    27b8:	019b      	lsls	r3, r3, #6
    27ba:	4922      	ldr	r1, [pc, #136]	; (2844 <udd_ep_transfer_process+0x1a8>)
    27bc:	1859      	adds	r1, r3, r1
    27be:	0030      	movs	r0, r6
    27c0:	4b21      	ldr	r3, [pc, #132]	; (2848 <udd_ep_transfer_process+0x1ac>)
    27c2:	4798      	blx	r3
    27c4:	e782      	b.n	26cc <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    27c6:	464a      	mov	r2, r9
    27c8:	8892      	ldrh	r2, [r2, #4]
    27ca:	4552      	cmp	r2, sl
    27cc:	d000      	beq.n	27d0 <udd_ep_transfer_process+0x134>
    27ce:	e786      	b.n	26de <udd_ep_transfer_process+0x42>
    27d0:	429e      	cmp	r6, r3
    27d2:	d100      	bne.n	27d6 <udd_ep_transfer_process+0x13a>
    27d4:	e783      	b.n	26de <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    27d6:	1b9b      	subs	r3, r3, r6
    27d8:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    27da:	4b15      	ldr	r3, [pc, #84]	; (2830 <udd_ep_transfer_process+0x194>)
    27dc:	429d      	cmp	r5, r3
    27de:	d916      	bls.n	280e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    27e0:	001d      	movs	r5, r3
    27e2:	4641      	mov	r1, r8
    27e4:	0018      	movs	r0, r3
    27e6:	4b13      	ldr	r3, [pc, #76]	; (2834 <udd_ep_transfer_process+0x198>)
    27e8:	4798      	blx	r3
    27ea:	1a6b      	subs	r3, r5, r1
    27ec:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    27ee:	4598      	cmp	r8, r3
    27f0:	d914      	bls.n	281c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    27f2:	7ca3      	ldrb	r3, [r4, #18]
    27f4:	2204      	movs	r2, #4
    27f6:	4313      	orrs	r3, r2
    27f8:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    27fa:	1e7a      	subs	r2, r7, #1
    27fc:	0192      	lsls	r2, r2, #6
    27fe:	4b11      	ldr	r3, [pc, #68]	; (2844 <udd_ep_transfer_process+0x1a8>)
    2800:	18d2      	adds	r2, r2, r3
    2802:	4643      	mov	r3, r8
    2804:	0039      	movs	r1, r7
    2806:	480d      	ldr	r0, [pc, #52]	; (283c <udd_ep_transfer_process+0x1a0>)
    2808:	4c10      	ldr	r4, [pc, #64]	; (284c <udd_ep_transfer_process+0x1b0>)
    280a:	47a0      	blx	r4
    280c:	e772      	b.n	26f4 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    280e:	4641      	mov	r1, r8
    2810:	0028      	movs	r0, r5
    2812:	4b09      	ldr	r3, [pc, #36]	; (2838 <udd_ep_transfer_process+0x19c>)
    2814:	4798      	blx	r3
    2816:	1a6b      	subs	r3, r5, r1
    2818:	b29b      	uxth	r3, r3
    281a:	e7e8      	b.n	27ee <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    281c:	6862      	ldr	r2, [r4, #4]
    281e:	1992      	adds	r2, r2, r6
    2820:	0039      	movs	r1, r7
    2822:	4806      	ldr	r0, [pc, #24]	; (283c <udd_ep_transfer_process+0x1a0>)
    2824:	4c09      	ldr	r4, [pc, #36]	; (284c <udd_ep_transfer_process+0x1b0>)
    2826:	47a0      	blx	r4
    2828:	e764      	b.n	26f4 <udd_ep_transfer_process+0x58>
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	00002681 	.word	0x00002681
    2830:	00001fff 	.word	0x00001fff
    2834:	00004bad 	.word	0x00004bad
    2838:	000049d9 	.word	0x000049d9
    283c:	20000580 	.word	0x20000580
    2840:	00003931 	.word	0x00003931
    2844:	200004c0 	.word	0x200004c0
    2848:	00005efd 	.word	0x00005efd
    284c:	00003985 	.word	0x00003985

00002850 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2850:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2852:	2205      	movs	r2, #5
    2854:	4b05      	ldr	r3, [pc, #20]	; (286c <udd_ctrl_stall_data+0x1c>)
    2856:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2858:	4c05      	ldr	r4, [pc, #20]	; (2870 <udd_ctrl_stall_data+0x20>)
    285a:	2180      	movs	r1, #128	; 0x80
    285c:	0020      	movs	r0, r4
    285e:	4b05      	ldr	r3, [pc, #20]	; (2874 <udd_ctrl_stall_data+0x24>)
    2860:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2862:	2100      	movs	r1, #0
    2864:	0020      	movs	r0, r4
    2866:	4b04      	ldr	r3, [pc, #16]	; (2878 <udd_ctrl_stall_data+0x28>)
    2868:	4798      	blx	r3
}
    286a:	bd10      	pop	{r4, pc}
    286c:	2000030a 	.word	0x2000030a
    2870:	20000580 	.word	0x20000580
    2874:	00003885 	.word	0x00003885
    2878:	000038ab 	.word	0x000038ab

0000287c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	000e      	movs	r6, r1
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2880:	4c0e      	ldr	r4, [pc, #56]	; (28bc <_usb_device_lpm_suspend+0x40>)
    2882:	2106      	movs	r1, #6
    2884:	0020      	movs	r0, r4
    2886:	4d0e      	ldr	r5, [pc, #56]	; (28c0 <_usb_device_lpm_suspend+0x44>)
    2888:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    288a:	2104      	movs	r1, #4
    288c:	0020      	movs	r0, r4
    288e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2890:	2102      	movs	r1, #2
    2892:	0020      	movs	r0, r4
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <_usb_device_lpm_suspend+0x48>)
    2896:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2898:	2002      	movs	r0, #2
    289a:	4b0b      	ldr	r3, [pc, #44]	; (28c8 <_usb_device_lpm_suspend+0x4c>)
    289c:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    289e:	6833      	ldr	r3, [r6, #0]
    28a0:	2b00      	cmp	r3, #0
    28a2:	d104      	bne.n	28ae <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    28a4:	4b09      	ldr	r3, [pc, #36]	; (28cc <_usb_device_lpm_suspend+0x50>)
    28a6:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    28a8:	4b09      	ldr	r3, [pc, #36]	; (28d0 <_usb_device_lpm_suspend+0x54>)
    28aa:	4798      	blx	r3
}
    28ac:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    28ae:	4b09      	ldr	r3, [pc, #36]	; (28d4 <_usb_device_lpm_suspend+0x58>)
    28b0:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    28b2:	6833      	ldr	r3, [r6, #0]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d1f7      	bne.n	28a8 <_usb_device_lpm_suspend+0x2c>
    28b8:	e7f4      	b.n	28a4 <_usb_device_lpm_suspend+0x28>
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	20000580 	.word	0x20000580
    28c0:	000033c5 	.word	0x000033c5
    28c4:	000033a5 	.word	0x000033a5
    28c8:	000025c1 	.word	0x000025c1
    28cc:	00004509 	.word	0x00004509
    28d0:	000044fd 	.word	0x000044fd
    28d4:	00004515 	.word	0x00004515

000028d8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    28d8:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    28da:	4b13      	ldr	r3, [pc, #76]	; (2928 <_usb_on_wakeup+0x50>)
    28dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    28de:	069b      	lsls	r3, r3, #26
    28e0:	d41c      	bmi.n	291c <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    28e2:	4911      	ldr	r1, [pc, #68]	; (2928 <_usb_on_wakeup+0x50>)
    28e4:	22d0      	movs	r2, #208	; 0xd0
    28e6:	68cb      	ldr	r3, [r1, #12]
    28e8:	4013      	ands	r3, r2
    28ea:	2bd0      	cmp	r3, #208	; 0xd0
    28ec:	d1fb      	bne.n	28e6 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    28ee:	4c0f      	ldr	r4, [pc, #60]	; (292c <_usb_on_wakeup+0x54>)
    28f0:	2102      	movs	r1, #2
    28f2:	0020      	movs	r0, r4
    28f4:	4b0e      	ldr	r3, [pc, #56]	; (2930 <_usb_on_wakeup+0x58>)
    28f6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    28f8:	2104      	movs	r1, #4
    28fa:	0020      	movs	r0, r4
    28fc:	4d0d      	ldr	r5, [pc, #52]	; (2934 <_usb_on_wakeup+0x5c>)
    28fe:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2900:	4a0d      	ldr	r2, [pc, #52]	; (2938 <_usb_on_wakeup+0x60>)
    2902:	2106      	movs	r1, #6
    2904:	0020      	movs	r0, r4
    2906:	4b0d      	ldr	r3, [pc, #52]	; (293c <_usb_on_wakeup+0x64>)
    2908:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    290a:	2106      	movs	r1, #6
    290c:	0020      	movs	r0, r4
    290e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2910:	2003      	movs	r0, #3
    2912:	4b0b      	ldr	r3, [pc, #44]	; (2940 <_usb_on_wakeup+0x68>)
    2914:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2916:	4b0b      	ldr	r3, [pc, #44]	; (2944 <_usb_on_wakeup+0x6c>)
    2918:	4798      	blx	r3
#endif
}
    291a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    291c:	4902      	ldr	r1, [pc, #8]	; (2928 <_usb_on_wakeup+0x50>)
    291e:	2210      	movs	r2, #16
    2920:	68cb      	ldr	r3, [r1, #12]
    2922:	421a      	tst	r2, r3
    2924:	d0fc      	beq.n	2920 <_usb_on_wakeup+0x48>
    2926:	e7e2      	b.n	28ee <_usb_on_wakeup+0x16>
    2928:	40000800 	.word	0x40000800
    292c:	20000580 	.word	0x20000580
    2930:	000033c5 	.word	0x000033c5
    2934:	000033a5 	.word	0x000033a5
    2938:	0000287d 	.word	0x0000287d
    293c:	00003381 	.word	0x00003381
    2940:	000025c1 	.word	0x000025c1
    2944:	000044c5 	.word	0x000044c5

00002948 <_usb_on_bus_reset>:
{
    2948:	b530      	push	{r4, r5, lr}
    294a:	b083      	sub	sp, #12
    294c:	0004      	movs	r4, r0
	udc_reset();
    294e:	4b1e      	ldr	r3, [pc, #120]	; (29c8 <_usb_on_bus_reset+0x80>)
    2950:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2952:	2380      	movs	r3, #128	; 0x80
    2954:	6822      	ldr	r2, [r4, #0]
    2956:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2958:	ad01      	add	r5, sp, #4
    295a:	0028      	movs	r0, r5
    295c:	4b1b      	ldr	r3, [pc, #108]	; (29cc <_usb_on_bus_reset+0x84>)
    295e:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2960:	2303      	movs	r3, #3
    2962:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2964:	0029      	movs	r1, r5
    2966:	0020      	movs	r0, r4
    2968:	4b19      	ldr	r3, [pc, #100]	; (29d0 <_usb_on_bus_reset+0x88>)
    296a:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    296c:	4919      	ldr	r1, [pc, #100]	; (29d4 <_usb_on_bus_reset+0x8c>)
    296e:	0020      	movs	r0, r4
    2970:	4b19      	ldr	r3, [pc, #100]	; (29d8 <_usb_on_bus_reset+0x90>)
    2972:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2974:	4b19      	ldr	r3, [pc, #100]	; (29dc <_usb_on_bus_reset+0x94>)
    2976:	2202      	movs	r2, #2
    2978:	2100      	movs	r1, #0
    297a:	0020      	movs	r0, r4
    297c:	4d18      	ldr	r5, [pc, #96]	; (29e0 <_usb_on_bus_reset+0x98>)
    297e:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2980:	4b18      	ldr	r3, [pc, #96]	; (29e4 <_usb_on_bus_reset+0x9c>)
    2982:	2200      	movs	r2, #0
    2984:	2100      	movs	r1, #0
    2986:	0020      	movs	r0, r4
    2988:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    298a:	4b17      	ldr	r3, [pc, #92]	; (29e8 <_usb_on_bus_reset+0xa0>)
    298c:	2201      	movs	r2, #1
    298e:	2100      	movs	r1, #0
    2990:	0020      	movs	r0, r4
    2992:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2994:	2202      	movs	r2, #2
    2996:	2100      	movs	r1, #0
    2998:	0020      	movs	r0, r4
    299a:	4d14      	ldr	r5, [pc, #80]	; (29ec <_usb_on_bus_reset+0xa4>)
    299c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    299e:	2200      	movs	r2, #0
    29a0:	2100      	movs	r1, #0
    29a2:	0020      	movs	r0, r4
    29a4:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    29a6:	2201      	movs	r2, #1
    29a8:	2100      	movs	r1, #0
    29aa:	0020      	movs	r0, r4
    29ac:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    29ae:	6821      	ldr	r1, [r4, #0]
    29b0:	890b      	ldrh	r3, [r1, #8]
    29b2:	4a0f      	ldr	r2, [pc, #60]	; (29f0 <_usb_on_bus_reset+0xa8>)
    29b4:	401a      	ands	r2, r3
    29b6:	2380      	movs	r3, #128	; 0x80
    29b8:	00db      	lsls	r3, r3, #3
    29ba:	4313      	orrs	r3, r2
    29bc:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    29be:	2200      	movs	r2, #0
    29c0:	4b0c      	ldr	r3, [pc, #48]	; (29f4 <_usb_on_bus_reset+0xac>)
    29c2:	701a      	strb	r2, [r3, #0]
}
    29c4:	b003      	add	sp, #12
    29c6:	bd30      	pop	{r4, r5, pc}
    29c8:	00001481 	.word	0x00001481
    29cc:	000035d1 	.word	0x000035d1
    29d0:	000035e1 	.word	0x000035e1
    29d4:	20000700 	.word	0x20000700
    29d8:	000039d5 	.word	0x000039d5
    29dc:	00002b31 	.word	0x00002b31
    29e0:	000033e1 	.word	0x000033e1
    29e4:	00002e61 	.word	0x00002e61
    29e8:	00002a35 	.word	0x00002a35
    29ec:	00003431 	.word	0x00003431
    29f0:	fffff3ff 	.word	0xfffff3ff
    29f4:	2000030a 	.word	0x2000030a

000029f8 <udd_ctrl_send_zlp_in>:
{
    29f8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    29fa:	2203      	movs	r2, #3
    29fc:	4b07      	ldr	r3, [pc, #28]	; (2a1c <udd_ctrl_send_zlp_in+0x24>)
    29fe:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2a00:	4c07      	ldr	r4, [pc, #28]	; (2a20 <udd_ctrl_send_zlp_in+0x28>)
    2a02:	4908      	ldr	r1, [pc, #32]	; (2a24 <udd_ctrl_send_zlp_in+0x2c>)
    2a04:	0020      	movs	r0, r4
    2a06:	4b08      	ldr	r3, [pc, #32]	; (2a28 <udd_ctrl_send_zlp_in+0x30>)
    2a08:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2a0a:	4b08      	ldr	r3, [pc, #32]	; (2a2c <udd_ctrl_send_zlp_in+0x34>)
    2a0c:	689a      	ldr	r2, [r3, #8]
    2a0e:	2300      	movs	r3, #0
    2a10:	2100      	movs	r1, #0
    2a12:	0020      	movs	r0, r4
    2a14:	4c06      	ldr	r4, [pc, #24]	; (2a30 <udd_ctrl_send_zlp_in+0x38>)
    2a16:	47a0      	blx	r4
}
    2a18:	bd10      	pop	{r4, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	2000030a 	.word	0x2000030a
    2a20:	20000580 	.word	0x20000580
    2a24:	20000700 	.word	0x20000700
    2a28:	000039d5 	.word	0x000039d5
    2a2c:	200006e8 	.word	0x200006e8
    2a30:	00003931 	.word	0x00003931

00002a34 <_usb_ep0_on_tansfer_fail>:
{
    2a34:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2a36:	7989      	ldrb	r1, [r1, #6]
    2a38:	b24b      	sxtb	r3, r1
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	db06      	blt.n	2a4c <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2a3e:	4b0e      	ldr	r3, [pc, #56]	; (2a78 <_usb_ep0_on_tansfer_fail+0x44>)
    2a40:	781b      	ldrb	r3, [r3, #0]
    2a42:	2b02      	cmp	r3, #2
    2a44:	d00f      	beq.n	2a66 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2a46:	2b03      	cmp	r3, #3
    2a48:	d011      	beq.n	2a6e <_usb_ep0_on_tansfer_fail+0x3a>
}
    2a4a:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <_usb_ep0_on_tansfer_fail+0x44>)
    2a4e:	781b      	ldrb	r3, [r3, #0]
    2a50:	2b01      	cmp	r3, #1
    2a52:	d005      	beq.n	2a60 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a54:	2b04      	cmp	r3, #4
    2a56:	d1f8      	bne.n	2a4a <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2a58:	4808      	ldr	r0, [pc, #32]	; (2a7c <_usb_ep0_on_tansfer_fail+0x48>)
    2a5a:	4b09      	ldr	r3, [pc, #36]	; (2a80 <_usb_ep0_on_tansfer_fail+0x4c>)
    2a5c:	4798      	blx	r3
    2a5e:	e7f4      	b.n	2a4a <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2a60:	4b08      	ldr	r3, [pc, #32]	; (2a84 <_usb_ep0_on_tansfer_fail+0x50>)
    2a62:	4798      	blx	r3
    2a64:	e7f1      	b.n	2a4a <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2a66:	2204      	movs	r2, #4
    2a68:	4b03      	ldr	r3, [pc, #12]	; (2a78 <_usb_ep0_on_tansfer_fail+0x44>)
    2a6a:	701a      	strb	r2, [r3, #0]
    2a6c:	e7ed      	b.n	2a4a <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2a6e:	4803      	ldr	r0, [pc, #12]	; (2a7c <_usb_ep0_on_tansfer_fail+0x48>)
    2a70:	4b03      	ldr	r3, [pc, #12]	; (2a80 <_usb_ep0_on_tansfer_fail+0x4c>)
    2a72:	4798      	blx	r3
}
    2a74:	e7e9      	b.n	2a4a <_usb_ep0_on_tansfer_fail+0x16>
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	2000030a 	.word	0x2000030a
    2a7c:	20000580 	.word	0x20000580
    2a80:	00003885 	.word	0x00003885
    2a84:	000029f9 	.word	0x000029f9

00002a88 <udd_ctrl_in_sent>:
{
    2a88:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a8a:	4b20      	ldr	r3, [pc, #128]	; (2b0c <udd_ctrl_in_sent+0x84>)
    2a8c:	881b      	ldrh	r3, [r3, #0]
    2a8e:	4a20      	ldr	r2, [pc, #128]	; (2b10 <udd_ctrl_in_sent+0x88>)
    2a90:	8994      	ldrh	r4, [r2, #12]
    2a92:	1ae4      	subs	r4, r4, r3
    2a94:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2a96:	2c00      	cmp	r4, #0
    2a98:	d118      	bne.n	2acc <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2a9a:	4a1e      	ldr	r2, [pc, #120]	; (2b14 <udd_ctrl_in_sent+0x8c>)
    2a9c:	8811      	ldrh	r1, [r2, #0]
    2a9e:	185b      	adds	r3, r3, r1
    2aa0:	b29b      	uxth	r3, r3
    2aa2:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2aa4:	4a1a      	ldr	r2, [pc, #104]	; (2b10 <udd_ctrl_in_sent+0x88>)
    2aa6:	88d2      	ldrh	r2, [r2, #6]
    2aa8:	429a      	cmp	r2, r3
    2aaa:	d023      	beq.n	2af4 <udd_ctrl_in_sent+0x6c>
    2aac:	4b1a      	ldr	r3, [pc, #104]	; (2b18 <udd_ctrl_in_sent+0x90>)
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d11f      	bne.n	2af4 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2ab4:	4b16      	ldr	r3, [pc, #88]	; (2b10 <udd_ctrl_in_sent+0x88>)
    2ab6:	695b      	ldr	r3, [r3, #20]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d023      	beq.n	2b04 <udd_ctrl_in_sent+0x7c>
    2abc:	4798      	blx	r3
    2abe:	2800      	cmp	r0, #0
    2ac0:	d020      	beq.n	2b04 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2ac2:	2200      	movs	r2, #0
    2ac4:	4b11      	ldr	r3, [pc, #68]	; (2b0c <udd_ctrl_in_sent+0x84>)
    2ac6:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2ac8:	4b11      	ldr	r3, [pc, #68]	; (2b10 <udd_ctrl_in_sent+0x88>)
    2aca:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2acc:	2c3f      	cmp	r4, #63	; 0x3f
    2ace:	d919      	bls.n	2b04 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2ad0:	2200      	movs	r2, #0
    2ad2:	4b11      	ldr	r3, [pc, #68]	; (2b18 <udd_ctrl_in_sent+0x90>)
    2ad4:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2ad6:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2ad8:	4d0c      	ldr	r5, [pc, #48]	; (2b0c <udd_ctrl_in_sent+0x84>)
    2ada:	882b      	ldrh	r3, [r5, #0]
    2adc:	4a0c      	ldr	r2, [pc, #48]	; (2b10 <udd_ctrl_in_sent+0x88>)
    2ade:	6892      	ldr	r2, [r2, #8]
    2ae0:	18d2      	adds	r2, r2, r3
    2ae2:	0023      	movs	r3, r4
    2ae4:	2100      	movs	r1, #0
    2ae6:	480d      	ldr	r0, [pc, #52]	; (2b1c <udd_ctrl_in_sent+0x94>)
    2ae8:	4e0d      	ldr	r6, [pc, #52]	; (2b20 <udd_ctrl_in_sent+0x98>)
    2aea:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2aec:	882b      	ldrh	r3, [r5, #0]
    2aee:	18e4      	adds	r4, r4, r3
    2af0:	802c      	strh	r4, [r5, #0]
}
    2af2:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2af4:	2204      	movs	r2, #4
    2af6:	4b0b      	ldr	r3, [pc, #44]	; (2b24 <udd_ctrl_in_sent+0x9c>)
    2af8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2afa:	490b      	ldr	r1, [pc, #44]	; (2b28 <udd_ctrl_in_sent+0xa0>)
    2afc:	4807      	ldr	r0, [pc, #28]	; (2b1c <udd_ctrl_in_sent+0x94>)
    2afe:	4b0b      	ldr	r3, [pc, #44]	; (2b2c <udd_ctrl_in_sent+0xa4>)
    2b00:	4798      	blx	r3
			return;
    2b02:	e7f6      	b.n	2af2 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2b04:	2201      	movs	r2, #1
    2b06:	4b04      	ldr	r3, [pc, #16]	; (2b18 <udd_ctrl_in_sent+0x90>)
    2b08:	701a      	strb	r2, [r3, #0]
    2b0a:	e7e5      	b.n	2ad8 <udd_ctrl_in_sent+0x50>
    2b0c:	20000306 	.word	0x20000306
    2b10:	200006e8 	.word	0x200006e8
    2b14:	20000308 	.word	0x20000308
    2b18:	20000304 	.word	0x20000304
    2b1c:	20000580 	.word	0x20000580
    2b20:	00003931 	.word	0x00003931
    2b24:	2000030a 	.word	0x2000030a
    2b28:	20000700 	.word	0x20000700
    2b2c:	000039d5 	.word	0x000039d5

00002b30 <_usb_ep0_on_setup>:
{
    2b30:	b510      	push	{r4, lr}
    2b32:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2b34:	4b2c      	ldr	r3, [pc, #176]	; (2be8 <_usb_ep0_on_setup+0xb8>)
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d007      	beq.n	2b4c <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2b3c:	4b2b      	ldr	r3, [pc, #172]	; (2bec <_usb_ep0_on_setup+0xbc>)
    2b3e:	691b      	ldr	r3, [r3, #16]
    2b40:	2b00      	cmp	r3, #0
    2b42:	d000      	beq.n	2b46 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2b44:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2b46:	2200      	movs	r2, #0
    2b48:	4b27      	ldr	r3, [pc, #156]	; (2be8 <_usb_ep0_on_setup+0xb8>)
    2b4a:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2b4c:	8823      	ldrh	r3, [r4, #0]
    2b4e:	2b08      	cmp	r3, #8
    2b50:	d002      	beq.n	2b58 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2b52:	4b27      	ldr	r3, [pc, #156]	; (2bf0 <_usb_ep0_on_setup+0xc0>)
    2b54:	4798      	blx	r3
}
    2b56:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2b58:	4a24      	ldr	r2, [pc, #144]	; (2bec <_usb_ep0_on_setup+0xbc>)
    2b5a:	4b26      	ldr	r3, [pc, #152]	; (2bf4 <_usb_ep0_on_setup+0xc4>)
    2b5c:	7819      	ldrb	r1, [r3, #0]
    2b5e:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2b60:	7859      	ldrb	r1, [r3, #1]
    2b62:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2b64:	78d8      	ldrb	r0, [r3, #3]
    2b66:	0200      	lsls	r0, r0, #8
    2b68:	7899      	ldrb	r1, [r3, #2]
    2b6a:	1809      	adds	r1, r1, r0
    2b6c:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2b6e:	7958      	ldrb	r0, [r3, #5]
    2b70:	0200      	lsls	r0, r0, #8
    2b72:	7919      	ldrb	r1, [r3, #4]
    2b74:	1809      	adds	r1, r1, r0
    2b76:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2b78:	79d9      	ldrb	r1, [r3, #7]
    2b7a:	0209      	lsls	r1, r1, #8
    2b7c:	799b      	ldrb	r3, [r3, #6]
    2b7e:	185b      	adds	r3, r3, r1
    2b80:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2b82:	4b1d      	ldr	r3, [pc, #116]	; (2bf8 <_usb_ep0_on_setup+0xc8>)
    2b84:	4798      	blx	r3
    2b86:	2800      	cmp	r0, #0
    2b88:	d016      	beq.n	2bb8 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2b8a:	4b18      	ldr	r3, [pc, #96]	; (2bec <_usb_ep0_on_setup+0xbc>)
    2b8c:	781b      	ldrb	r3, [r3, #0]
    2b8e:	2b7f      	cmp	r3, #127	; 0x7f
    2b90:	d815      	bhi.n	2bbe <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2b92:	4b16      	ldr	r3, [pc, #88]	; (2bec <_usb_ep0_on_setup+0xbc>)
    2b94:	88db      	ldrh	r3, [r3, #6]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d022      	beq.n	2be0 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2b9a:	2300      	movs	r3, #0
    2b9c:	4a17      	ldr	r2, [pc, #92]	; (2bfc <_usb_ep0_on_setup+0xcc>)
    2b9e:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2ba0:	4a17      	ldr	r2, [pc, #92]	; (2c00 <_usb_ep0_on_setup+0xd0>)
    2ba2:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2ba4:	2201      	movs	r2, #1
    2ba6:	4b10      	ldr	r3, [pc, #64]	; (2be8 <_usb_ep0_on_setup+0xb8>)
    2ba8:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2baa:	2340      	movs	r3, #64	; 0x40
    2bac:	4a11      	ldr	r2, [pc, #68]	; (2bf4 <_usb_ep0_on_setup+0xc4>)
    2bae:	2100      	movs	r1, #0
    2bb0:	4814      	ldr	r0, [pc, #80]	; (2c04 <_usb_ep0_on_setup+0xd4>)
    2bb2:	4c15      	ldr	r4, [pc, #84]	; (2c08 <_usb_ep0_on_setup+0xd8>)
    2bb4:	47a0      	blx	r4
    2bb6:	e7ce      	b.n	2b56 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2bb8:	4b0d      	ldr	r3, [pc, #52]	; (2bf0 <_usb_ep0_on_setup+0xc0>)
    2bba:	4798      	blx	r3
			return;
    2bbc:	e7cb      	b.n	2b56 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2bbe:	2300      	movs	r3, #0
    2bc0:	4a0e      	ldr	r2, [pc, #56]	; (2bfc <_usb_ep0_on_setup+0xcc>)
    2bc2:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2bc4:	4a0e      	ldr	r2, [pc, #56]	; (2c00 <_usb_ep0_on_setup+0xd0>)
    2bc6:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2bc8:	2202      	movs	r2, #2
    2bca:	4b07      	ldr	r3, [pc, #28]	; (2be8 <_usb_ep0_on_setup+0xb8>)
    2bcc:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2bce:	2340      	movs	r3, #64	; 0x40
    2bd0:	4a08      	ldr	r2, [pc, #32]	; (2bf4 <_usb_ep0_on_setup+0xc4>)
    2bd2:	2100      	movs	r1, #0
    2bd4:	480b      	ldr	r0, [pc, #44]	; (2c04 <_usb_ep0_on_setup+0xd4>)
    2bd6:	4c0c      	ldr	r4, [pc, #48]	; (2c08 <_usb_ep0_on_setup+0xd8>)
    2bd8:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2bda:	4b0c      	ldr	r3, [pc, #48]	; (2c0c <_usb_ep0_on_setup+0xdc>)
    2bdc:	4798      	blx	r3
    2bde:	e7ba      	b.n	2b56 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2be0:	4b0b      	ldr	r3, [pc, #44]	; (2c10 <_usb_ep0_on_setup+0xe0>)
    2be2:	4798      	blx	r3
				return;
    2be4:	e7b7      	b.n	2b56 <_usb_ep0_on_setup+0x26>
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	2000030a 	.word	0x2000030a
    2bec:	200006e8 	.word	0x200006e8
    2bf0:	00002851 	.word	0x00002851
    2bf4:	20000700 	.word	0x20000700
    2bf8:	00001511 	.word	0x00001511
    2bfc:	20000308 	.word	0x20000308
    2c00:	20000306 	.word	0x20000306
    2c04:	20000580 	.word	0x20000580
    2c08:	00003985 	.word	0x00003985
    2c0c:	00002a89 	.word	0x00002a89
    2c10:	000029f9 	.word	0x000029f9

00002c14 <_usb_on_sof_notify>:
{
    2c14:	b510      	push	{r4, lr}
	udc_sof_notify();
    2c16:	4b02      	ldr	r3, [pc, #8]	; (2c20 <_usb_on_sof_notify+0xc>)
    2c18:	4798      	blx	r3
	UDC_SOF_EVENT();
    2c1a:	4b02      	ldr	r3, [pc, #8]	; (2c24 <_usb_on_sof_notify+0x10>)
    2c1c:	4798      	blx	r3
}
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	000014cd 	.word	0x000014cd
    2c24:	000044d1 	.word	0x000044d1

00002c28 <_usb_on_suspend>:
{
    2c28:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2c2a:	4c07      	ldr	r4, [pc, #28]	; (2c48 <_usb_on_suspend+0x20>)
    2c2c:	2104      	movs	r1, #4
    2c2e:	0020      	movs	r0, r4
    2c30:	4b06      	ldr	r3, [pc, #24]	; (2c4c <_usb_on_suspend+0x24>)
    2c32:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2c34:	2102      	movs	r1, #2
    2c36:	0020      	movs	r0, r4
    2c38:	4b05      	ldr	r3, [pc, #20]	; (2c50 <_usb_on_suspend+0x28>)
    2c3a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2c3c:	2001      	movs	r0, #1
    2c3e:	4b05      	ldr	r3, [pc, #20]	; (2c54 <_usb_on_suspend+0x2c>)
    2c40:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_usb_on_suspend+0x30>)
    2c44:	4798      	blx	r3
}
    2c46:	bd10      	pop	{r4, pc}
    2c48:	20000580 	.word	0x20000580
    2c4c:	000033c5 	.word	0x000033c5
    2c50:	000033a5 	.word	0x000033a5
    2c54:	000025c1 	.word	0x000025c1
    2c58:	000044b9 	.word	0x000044b9

00002c5c <udd_ep_abort>:
{
    2c5c:	b510      	push	{r4, lr}
    2c5e:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2c60:	0001      	movs	r1, r0
    2c62:	480a      	ldr	r0, [pc, #40]	; (2c8c <udd_ep_abort+0x30>)
    2c64:	4b0a      	ldr	r3, [pc, #40]	; (2c90 <udd_ep_abort+0x34>)
    2c66:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2c68:	0020      	movs	r0, r4
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <udd_ep_abort+0x38>)
    2c6c:	4798      	blx	r3
	if (!ptr_job->busy) {
    2c6e:	7c83      	ldrb	r3, [r0, #18]
    2c70:	07db      	lsls	r3, r3, #31
    2c72:	d50a      	bpl.n	2c8a <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2c74:	7c83      	ldrb	r3, [r0, #18]
    2c76:	2201      	movs	r2, #1
    2c78:	4393      	bics	r3, r2
    2c7a:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2c7c:	6803      	ldr	r3, [r0, #0]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d003      	beq.n	2c8a <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2c82:	68c1      	ldr	r1, [r0, #12]
    2c84:	0022      	movs	r2, r4
    2c86:	2001      	movs	r0, #1
    2c88:	4798      	blx	r3
}
    2c8a:	bd10      	pop	{r4, pc}
    2c8c:	20000580 	.word	0x20000580
    2c90:	00003825 	.word	0x00003825
    2c94:	00002681 	.word	0x00002681

00002c98 <udd_is_high_speed>:
}
    2c98:	2000      	movs	r0, #0
    2c9a:	4770      	bx	lr

00002c9c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2c9c:	4b02      	ldr	r3, [pc, #8]	; (2ca8 <udd_get_frame_number+0xc>)
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	8a18      	ldrh	r0, [r3, #16]
    2ca2:	0480      	lsls	r0, r0, #18
    2ca4:	0d40      	lsrs	r0, r0, #21
}
    2ca6:	4770      	bx	lr
    2ca8:	20000580 	.word	0x20000580

00002cac <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    2cac:	4b02      	ldr	r3, [pc, #8]	; (2cb8 <udd_get_micro_frame_number+0xc>)
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	8a18      	ldrh	r0, [r3, #16]
    2cb2:	b280      	uxth	r0, r0
}
    2cb4:	4770      	bx	lr
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	20000580 	.word	0x20000580

00002cbc <udd_ep_free>:
{
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	b082      	sub	sp, #8
    2cc0:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2cc2:	ad01      	add	r5, sp, #4
    2cc4:	0028      	movs	r0, r5
    2cc6:	4b0d      	ldr	r3, [pc, #52]	; (2cfc <udd_ep_free+0x40>)
    2cc8:	4798      	blx	r3
	udd_ep_abort(ep);
    2cca:	0020      	movs	r0, r4
    2ccc:	4b0c      	ldr	r3, [pc, #48]	; (2d00 <udd_ep_free+0x44>)
    2cce:	4798      	blx	r3
	config_ep.ep_address = ep;
    2cd0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2cd2:	2300      	movs	r3, #0
    2cd4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2cd6:	4e0b      	ldr	r6, [pc, #44]	; (2d04 <udd_ep_free+0x48>)
    2cd8:	0029      	movs	r1, r5
    2cda:	0030      	movs	r0, r6
    2cdc:	4b0a      	ldr	r3, [pc, #40]	; (2d08 <udd_ep_free+0x4c>)
    2cde:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2ce0:	210f      	movs	r1, #15
    2ce2:	4021      	ands	r1, r4
    2ce4:	2200      	movs	r2, #0
    2ce6:	0030      	movs	r0, r6
    2ce8:	4b08      	ldr	r3, [pc, #32]	; (2d0c <udd_ep_free+0x50>)
    2cea:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2cec:	2200      	movs	r2, #0
    2cee:	0021      	movs	r1, r4
    2cf0:	0030      	movs	r0, r6
    2cf2:	4b07      	ldr	r3, [pc, #28]	; (2d10 <udd_ep_free+0x54>)
    2cf4:	4798      	blx	r3
}
    2cf6:	b002      	add	sp, #8
    2cf8:	bd70      	pop	{r4, r5, r6, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	000035d1 	.word	0x000035d1
    2d00:	00002c5d 	.word	0x00002c5d
    2d04:	20000580 	.word	0x20000580
    2d08:	000035e1 	.word	0x000035e1
    2d0c:	00003409 	.word	0x00003409
    2d10:	00003501 	.word	0x00003501

00002d14 <udd_ep_alloc>:
{
    2d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d16:	b083      	sub	sp, #12
    2d18:	0005      	movs	r5, r0
    2d1a:	000f      	movs	r7, r1
    2d1c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2d1e:	ae01      	add	r6, sp, #4
    2d20:	0030      	movs	r0, r6
    2d22:	4b36      	ldr	r3, [pc, #216]	; (2dfc <udd_ep_alloc+0xe8>)
    2d24:	4798      	blx	r3
	config_ep.ep_address = ep;
    2d26:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2d28:	2c08      	cmp	r4, #8
    2d2a:	d813      	bhi.n	2d54 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2d2c:	2200      	movs	r2, #0
    2d2e:	ab01      	add	r3, sp, #4
    2d30:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2d32:	0028      	movs	r0, r5
    2d34:	4b32      	ldr	r3, [pc, #200]	; (2e00 <udd_ep_alloc+0xec>)
    2d36:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2d38:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2d3a:	2103      	movs	r1, #3
    2d3c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2d3e:	2901      	cmp	r1, #1
    2d40:	d038      	beq.n	2db4 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2d42:	2902      	cmp	r1, #2
    2d44:	d043      	beq.n	2dce <udd_ep_alloc+0xba>
		return false;
    2d46:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2d48:	2903      	cmp	r1, #3
    2d4a:	d13d      	bne.n	2dc8 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2d4c:	2204      	movs	r2, #4
    2d4e:	ab01      	add	r3, sp, #4
    2d50:	70da      	strb	r2, [r3, #3]
    2d52:	e032      	b.n	2dba <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2d54:	2c10      	cmp	r4, #16
    2d56:	d803      	bhi.n	2d60 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2d58:	2201      	movs	r2, #1
    2d5a:	ab01      	add	r3, sp, #4
    2d5c:	705a      	strb	r2, [r3, #1]
    2d5e:	e7e8      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2d60:	2c20      	cmp	r4, #32
    2d62:	d803      	bhi.n	2d6c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2d64:	2202      	movs	r2, #2
    2d66:	ab01      	add	r3, sp, #4
    2d68:	705a      	strb	r2, [r3, #1]
    2d6a:	e7e2      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2d6c:	2c40      	cmp	r4, #64	; 0x40
    2d6e:	d803      	bhi.n	2d78 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2d70:	2203      	movs	r2, #3
    2d72:	ab01      	add	r3, sp, #4
    2d74:	705a      	strb	r2, [r3, #1]
    2d76:	e7dc      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2d78:	2c80      	cmp	r4, #128	; 0x80
    2d7a:	d803      	bhi.n	2d84 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2d7c:	2204      	movs	r2, #4
    2d7e:	ab01      	add	r3, sp, #4
    2d80:	705a      	strb	r2, [r3, #1]
    2d82:	e7d6      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2d84:	2380      	movs	r3, #128	; 0x80
    2d86:	005b      	lsls	r3, r3, #1
    2d88:	429c      	cmp	r4, r3
    2d8a:	d803      	bhi.n	2d94 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2d8c:	2205      	movs	r2, #5
    2d8e:	ab01      	add	r3, sp, #4
    2d90:	705a      	strb	r2, [r3, #1]
    2d92:	e7ce      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2d94:	2380      	movs	r3, #128	; 0x80
    2d96:	009b      	lsls	r3, r3, #2
    2d98:	429c      	cmp	r4, r3
    2d9a:	d803      	bhi.n	2da4 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2d9c:	2206      	movs	r2, #6
    2d9e:	ab01      	add	r3, sp, #4
    2da0:	705a      	strb	r2, [r3, #1]
    2da2:	e7c6      	b.n	2d32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2da4:	4a17      	ldr	r2, [pc, #92]	; (2e04 <udd_ep_alloc+0xf0>)
		return false;
    2da6:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2da8:	4294      	cmp	r4, r2
    2daa:	d80d      	bhi.n	2dc8 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2dac:	2207      	movs	r2, #7
    2dae:	ab01      	add	r3, sp, #4
    2db0:	705a      	strb	r2, [r3, #1]
    2db2:	e7be      	b.n	2d32 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2db4:	2202      	movs	r2, #2
    2db6:	ab01      	add	r3, sp, #4
    2db8:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2dba:	a901      	add	r1, sp, #4
    2dbc:	4812      	ldr	r0, [pc, #72]	; (2e08 <udd_ep_alloc+0xf4>)
    2dbe:	4b13      	ldr	r3, [pc, #76]	; (2e0c <udd_ep_alloc+0xf8>)
    2dc0:	4798      	blx	r3
		return false;
    2dc2:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2dc4:	2800      	cmp	r0, #0
    2dc6:	d006      	beq.n	2dd6 <udd_ep_alloc+0xc2>
}
    2dc8:	0018      	movs	r0, r3
    2dca:	b003      	add	sp, #12
    2dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2dce:	2203      	movs	r2, #3
    2dd0:	ab01      	add	r3, sp, #4
    2dd2:	70da      	strb	r2, [r3, #3]
    2dd4:	e7f1      	b.n	2dba <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2dd6:	210f      	movs	r1, #15
    2dd8:	4029      	ands	r1, r5
    2dda:	4c0b      	ldr	r4, [pc, #44]	; (2e08 <udd_ep_alloc+0xf4>)
    2ddc:	4b0c      	ldr	r3, [pc, #48]	; (2e10 <udd_ep_alloc+0xfc>)
    2dde:	2200      	movs	r2, #0
    2de0:	0020      	movs	r0, r4
    2de2:	4e0c      	ldr	r6, [pc, #48]	; (2e14 <udd_ep_alloc+0x100>)
    2de4:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2de6:	2200      	movs	r2, #0
    2de8:	0029      	movs	r1, r5
    2dea:	0020      	movs	r0, r4
    2dec:	4e0a      	ldr	r6, [pc, #40]	; (2e18 <udd_ep_alloc+0x104>)
    2dee:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2df0:	2201      	movs	r2, #1
    2df2:	0029      	movs	r1, r5
    2df4:	0020      	movs	r0, r4
    2df6:	47b0      	blx	r6
	return true;
    2df8:	2301      	movs	r3, #1
    2dfa:	e7e5      	b.n	2dc8 <udd_ep_alloc+0xb4>
    2dfc:	000035d1 	.word	0x000035d1
    2e00:	00002681 	.word	0x00002681
    2e04:	000003ff 	.word	0x000003ff
    2e08:	20000580 	.word	0x20000580
    2e0c:	000035e1 	.word	0x000035e1
    2e10:	0000269d 	.word	0x0000269d
    2e14:	000033e1 	.word	0x000033e1
    2e18:	00003431 	.word	0x00003431

00002e1c <udd_ep_is_halted>:
{
    2e1c:	b510      	push	{r4, lr}
    2e1e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2e20:	4801      	ldr	r0, [pc, #4]	; (2e28 <udd_ep_is_halted+0xc>)
    2e22:	4b02      	ldr	r3, [pc, #8]	; (2e2c <udd_ep_is_halted+0x10>)
    2e24:	4798      	blx	r3
}
    2e26:	bd10      	pop	{r4, pc}
    2e28:	20000580 	.word	0x20000580
    2e2c:	0000385b 	.word	0x0000385b

00002e30 <udd_ep_set_halt>:
{
    2e30:	b510      	push	{r4, lr}
    2e32:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2e34:	230f      	movs	r3, #15
    2e36:	4003      	ands	r3, r0
		return false;
    2e38:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2e3a:	2b03      	cmp	r3, #3
    2e3c:	d900      	bls.n	2e40 <udd_ep_set_halt+0x10>
}
    2e3e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2e40:	0021      	movs	r1, r4
    2e42:	4804      	ldr	r0, [pc, #16]	; (2e54 <udd_ep_set_halt+0x24>)
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <udd_ep_set_halt+0x28>)
    2e46:	4798      	blx	r3
	udd_ep_abort(ep);
    2e48:	0020      	movs	r0, r4
    2e4a:	4b04      	ldr	r3, [pc, #16]	; (2e5c <udd_ep_set_halt+0x2c>)
    2e4c:	4798      	blx	r3
	return true;
    2e4e:	2001      	movs	r0, #1
    2e50:	e7f5      	b.n	2e3e <udd_ep_set_halt+0xe>
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20000580 	.word	0x20000580
    2e58:	00003885 	.word	0x00003885
    2e5c:	00002c5d 	.word	0x00002c5d

00002e60 <_usb_ep0_on_tansfer_ok>:
{
    2e60:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2e62:	4b34      	ldr	r3, [pc, #208]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	2b01      	cmp	r3, #1
    2e68:	d00a      	beq.n	2e80 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2e6a:	2b02      	cmp	r3, #2
    2e6c:	d05f      	beq.n	2f2e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2e6e:	4b32      	ldr	r3, [pc, #200]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e70:	691b      	ldr	r3, [r3, #16]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d000      	beq.n	2e78 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2e76:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2e78:	2200      	movs	r2, #0
    2e7a:	4b2e      	ldr	r3, [pc, #184]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2e7c:	701a      	strb	r2, [r3, #0]
}
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2e80:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2e82:	4b2d      	ldr	r3, [pc, #180]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e84:	899b      	ldrh	r3, [r3, #12]
    2e86:	4a2d      	ldr	r2, [pc, #180]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2e88:	8814      	ldrh	r4, [r2, #0]
    2e8a:	1962      	adds	r2, r4, r5
    2e8c:	4293      	cmp	r3, r2
    2e8e:	da01      	bge.n	2e94 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2e90:	1b1d      	subs	r5, r3, r4
    2e92:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2e94:	4b28      	ldr	r3, [pc, #160]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2e96:	6898      	ldr	r0, [r3, #8]
    2e98:	1900      	adds	r0, r0, r4
    2e9a:	002a      	movs	r2, r5
    2e9c:	4928      	ldr	r1, [pc, #160]	; (2f40 <_usb_ep0_on_tansfer_ok+0xe0>)
    2e9e:	4b29      	ldr	r3, [pc, #164]	; (2f44 <_usb_ep0_on_tansfer_ok+0xe4>)
    2ea0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2ea2:	1964      	adds	r4, r4, r5
    2ea4:	b2a4      	uxth	r4, r4
    2ea6:	4b25      	ldr	r3, [pc, #148]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2ea8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2eaa:	2d40      	cmp	r5, #64	; 0x40
    2eac:	d00a      	beq.n	2ec4 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2eae:	4b22      	ldr	r3, [pc, #136]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2eb0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2eb2:	695b      	ldr	r3, [r3, #20]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d002      	beq.n	2ebe <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2eb8:	4798      	blx	r3
    2eba:	2800      	cmp	r0, #0
    2ebc:	d014      	beq.n	2ee8 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    2ebe:	4b22      	ldr	r3, [pc, #136]	; (2f48 <_usb_ep0_on_tansfer_ok+0xe8>)
    2ec0:	4798      	blx	r3
    2ec2:	e7dc      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2ec4:	4b1c      	ldr	r3, [pc, #112]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ec6:	88da      	ldrh	r2, [r3, #6]
    2ec8:	4b20      	ldr	r3, [pc, #128]	; (2f4c <_usb_ep0_on_tansfer_ok+0xec>)
    2eca:	881b      	ldrh	r3, [r3, #0]
    2ecc:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2ece:	429a      	cmp	r2, r3
    2ed0:	dded      	ble.n	2eae <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2ed2:	4b19      	ldr	r3, [pc, #100]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ed4:	899b      	ldrh	r3, [r3, #12]
    2ed6:	42a3      	cmp	r3, r4
    2ed8:	d00c      	beq.n	2ef4 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2eda:	2340      	movs	r3, #64	; 0x40
    2edc:	4a18      	ldr	r2, [pc, #96]	; (2f40 <_usb_ep0_on_tansfer_ok+0xe0>)
    2ede:	2100      	movs	r1, #0
    2ee0:	481b      	ldr	r0, [pc, #108]	; (2f50 <_usb_ep0_on_tansfer_ok+0xf0>)
    2ee2:	4c1c      	ldr	r4, [pc, #112]	; (2f54 <_usb_ep0_on_tansfer_ok+0xf4>)
    2ee4:	47a0      	blx	r4
    2ee6:	e7ca      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ee8:	2205      	movs	r2, #5
    2eea:	4b12      	ldr	r3, [pc, #72]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2eec:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2eee:	4b1a      	ldr	r3, [pc, #104]	; (2f58 <_usb_ep0_on_tansfer_ok+0xf8>)
    2ef0:	4798      	blx	r3
    2ef2:	e7c4      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2ef4:	4b10      	ldr	r3, [pc, #64]	; (2f38 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ef6:	695b      	ldr	r3, [r3, #20]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d00b      	beq.n	2f14 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2efc:	4798      	blx	r3
    2efe:	2800      	cmp	r0, #0
    2f00:	d00f      	beq.n	2f22 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2f02:	4912      	ldr	r1, [pc, #72]	; (2f4c <_usb_ep0_on_tansfer_ok+0xec>)
    2f04:	4a0d      	ldr	r2, [pc, #52]	; (2f3c <_usb_ep0_on_tansfer_ok+0xdc>)
    2f06:	880b      	ldrh	r3, [r1, #0]
    2f08:	8810      	ldrh	r0, [r2, #0]
    2f0a:	181b      	adds	r3, r3, r0
    2f0c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2f0e:	2300      	movs	r3, #0
    2f10:	8013      	strh	r3, [r2, #0]
    2f12:	e7e2      	b.n	2eda <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f14:	2205      	movs	r2, #5
    2f16:	4b07      	ldr	r3, [pc, #28]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f18:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2f1a:	2000      	movs	r0, #0
    2f1c:	4b0e      	ldr	r3, [pc, #56]	; (2f58 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f1e:	4798      	blx	r3
    2f20:	e7ad      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f22:	2205      	movs	r2, #5
    2f24:	4b03      	ldr	r3, [pc, #12]	; (2f34 <_usb_ep0_on_tansfer_ok+0xd4>)
    2f26:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2f28:	4b0b      	ldr	r3, [pc, #44]	; (2f58 <_usb_ep0_on_tansfer_ok+0xf8>)
    2f2a:	4798      	blx	r3
    2f2c:	e7a7      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2f2e:	4b0b      	ldr	r3, [pc, #44]	; (2f5c <_usb_ep0_on_tansfer_ok+0xfc>)
    2f30:	4798      	blx	r3
    2f32:	e7a4      	b.n	2e7e <_usb_ep0_on_tansfer_ok+0x1e>
    2f34:	2000030a 	.word	0x2000030a
    2f38:	200006e8 	.word	0x200006e8
    2f3c:	20000306 	.word	0x20000306
    2f40:	20000700 	.word	0x20000700
    2f44:	00005efd 	.word	0x00005efd
    2f48:	000029f9 	.word	0x000029f9
    2f4c:	20000308 	.word	0x20000308
    2f50:	20000580 	.word	0x20000580
    2f54:	00003985 	.word	0x00003985
    2f58:	00002e31 	.word	0x00002e31
    2f5c:	00002a89 	.word	0x00002a89

00002f60 <udd_ep_clear_halt>:
{
    2f60:	b570      	push	{r4, r5, r6, lr}
    2f62:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2f64:	230f      	movs	r3, #15
    2f66:	4003      	ands	r3, r0
		return false;
    2f68:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2f6a:	2b03      	cmp	r3, #3
    2f6c:	d900      	bls.n	2f70 <udd_ep_clear_halt+0x10>
}
    2f6e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2f70:	0020      	movs	r0, r4
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <udd_ep_clear_halt+0x38>)
    2f74:	4798      	blx	r3
    2f76:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2f78:	0021      	movs	r1, r4
    2f7a:	4808      	ldr	r0, [pc, #32]	; (2f9c <udd_ep_clear_halt+0x3c>)
    2f7c:	4b08      	ldr	r3, [pc, #32]	; (2fa0 <udd_ep_clear_halt+0x40>)
    2f7e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2f80:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2f82:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2f84:	07db      	lsls	r3, r3, #31
    2f86:	d5f2      	bpl.n	2f6e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2f88:	7cab      	ldrb	r3, [r5, #18]
    2f8a:	2201      	movs	r2, #1
    2f8c:	4393      	bics	r3, r2
    2f8e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2f90:	682b      	ldr	r3, [r5, #0]
    2f92:	4798      	blx	r3
	return true;
    2f94:	2001      	movs	r0, #1
    2f96:	e7ea      	b.n	2f6e <udd_ep_clear_halt+0xe>
    2f98:	00002681 	.word	0x00002681
    2f9c:	20000580 	.word	0x20000580
    2fa0:	000038ab 	.word	0x000038ab

00002fa4 <udd_ep_run>:
{
    2fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa6:	b087      	sub	sp, #28
    2fa8:	0005      	movs	r5, r0
    2faa:	9103      	str	r1, [sp, #12]
    2fac:	9202      	str	r2, [sp, #8]
    2fae:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2fb0:	260f      	movs	r6, #15
    2fb2:	4006      	ands	r6, r0
		return false;
    2fb4:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2fb6:	2e03      	cmp	r6, #3
    2fb8:	d902      	bls.n	2fc0 <udd_ep_run+0x1c>
}
    2fba:	0020      	movs	r0, r4
    2fbc:	b007      	add	sp, #28
    2fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2fc0:	4b64      	ldr	r3, [pc, #400]	; (3154 <udd_ep_run+0x1b0>)
    2fc2:	4798      	blx	r3
    2fc4:	1e04      	subs	r4, r0, #0
    2fc6:	d000      	beq.n	2fca <udd_ep_run+0x26>
    2fc8:	e0bd      	b.n	3146 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2fca:	0028      	movs	r0, r5
    2fcc:	4b62      	ldr	r3, [pc, #392]	; (3158 <udd_ep_run+0x1b4>)
    2fce:	4798      	blx	r3
    2fd0:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fd2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2fd6:	425a      	negs	r2, r3
    2fd8:	4153      	adcs	r3, r2
    2fda:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2fdc:	b672      	cpsid	i
    2fde:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2fe2:	2200      	movs	r2, #0
    2fe4:	4b5d      	ldr	r3, [pc, #372]	; (315c <udd_ep_run+0x1b8>)
    2fe6:	701a      	strb	r2, [r3, #0]
	return flags;
    2fe8:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2fea:	7c83      	ldrb	r3, [r0, #18]
    2fec:	07db      	lsls	r3, r3, #31
    2fee:	d508      	bpl.n	3002 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    2ff0:	2a00      	cmp	r2, #0
    2ff2:	d0e2      	beq.n	2fba <udd_ep_run+0x16>
		cpu_irq_enable();
    2ff4:	2201      	movs	r2, #1
    2ff6:	4b59      	ldr	r3, [pc, #356]	; (315c <udd_ep_run+0x1b8>)
    2ff8:	701a      	strb	r2, [r3, #0]
    2ffa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ffe:	b662      	cpsie	i
    3000:	e7db      	b.n	2fba <udd_ep_run+0x16>
	ptr_job->busy = true;
    3002:	7c83      	ldrb	r3, [r0, #18]
    3004:	2101      	movs	r1, #1
    3006:	430b      	orrs	r3, r1
    3008:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    300a:	2a00      	cmp	r2, #0
    300c:	d005      	beq.n	301a <udd_ep_run+0x76>
		cpu_irq_enable();
    300e:	2201      	movs	r2, #1
    3010:	4b52      	ldr	r3, [pc, #328]	; (315c <udd_ep_run+0x1b8>)
    3012:	701a      	strb	r2, [r3, #0]
    3014:	f3bf 8f5f 	dmb	sy
    3018:	b662      	cpsie	i
	ptr_job->buf = buf;
    301a:	9b02      	ldr	r3, [sp, #8]
    301c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3022:	2300      	movs	r3, #0
    3024:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3028:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    302a:	2301      	movs	r3, #1
    302c:	9a03      	ldr	r2, [sp, #12]
    302e:	4013      	ands	r3, r2
    3030:	005a      	lsls	r2, r3, #1
    3032:	7cbb      	ldrb	r3, [r7, #18]
    3034:	2102      	movs	r1, #2
    3036:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3038:	4313      	orrs	r3, r2
    303a:	2204      	movs	r2, #4
    303c:	4393      	bics	r3, r2
    303e:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3040:	b26b      	sxtb	r3, r5
    3042:	2b00      	cmp	r3, #0
    3044:	db20      	blt.n	3088 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3046:	9b01      	ldr	r3, [sp, #4]
    3048:	2b00      	cmp	r3, #0
    304a:	d06f      	beq.n	312c <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    304c:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    304e:	4b44      	ldr	r3, [pc, #272]	; (3160 <udd_ep_run+0x1bc>)
    3050:	429c      	cmp	r4, r3
    3052:	d95a      	bls.n	310a <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3054:	8a39      	ldrh	r1, [r7, #16]
    3056:	001c      	movs	r4, r3
    3058:	0018      	movs	r0, r3
    305a:	4b42      	ldr	r3, [pc, #264]	; (3164 <udd_ep_run+0x1c0>)
    305c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    305e:	1a63      	subs	r3, r4, r1
    3060:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3062:	8a3b      	ldrh	r3, [r7, #16]
    3064:	429a      	cmp	r2, r3
    3066:	d257      	bcs.n	3118 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3068:	7cba      	ldrb	r2, [r7, #18]
    306a:	2104      	movs	r1, #4
    306c:	430a      	orrs	r2, r1
    306e:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3070:	1e72      	subs	r2, r6, #1
    3072:	0192      	lsls	r2, r2, #6
    3074:	493c      	ldr	r1, [pc, #240]	; (3168 <udd_ep_run+0x1c4>)
    3076:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3078:	0031      	movs	r1, r6
    307a:	483c      	ldr	r0, [pc, #240]	; (316c <udd_ep_run+0x1c8>)
    307c:	4c3c      	ldr	r4, [pc, #240]	; (3170 <udd_ep_run+0x1cc>)
    307e:	47a0      	blx	r4
				return (STATUS_OK ==
    3080:	4244      	negs	r4, r0
    3082:	4144      	adcs	r4, r0
    3084:	b2e4      	uxtb	r4, r4
    3086:	e798      	b.n	2fba <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	2b00      	cmp	r3, #0
    308c:	d027      	beq.n	30de <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    308e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3090:	4b33      	ldr	r3, [pc, #204]	; (3160 <udd_ep_run+0x1bc>)
    3092:	429d      	cmp	r5, r3
    3094:	d906      	bls.n	30a4 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3096:	8a39      	ldrh	r1, [r7, #16]
    3098:	001d      	movs	r5, r3
    309a:	0018      	movs	r0, r3
    309c:	4b31      	ldr	r3, [pc, #196]	; (3164 <udd_ep_run+0x1c0>)
    309e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    30a0:	1a6b      	subs	r3, r5, r1
    30a2:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    30a4:	7cbb      	ldrb	r3, [r7, #18]
    30a6:	079b      	lsls	r3, r3, #30
    30a8:	d507      	bpl.n	30ba <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    30aa:	8a39      	ldrh	r1, [r7, #16]
    30ac:	0028      	movs	r0, r5
    30ae:	4b31      	ldr	r3, [pc, #196]	; (3174 <udd_ep_run+0x1d0>)
    30b0:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    30b2:	b289      	uxth	r1, r1
    30b4:	424c      	negs	r4, r1
    30b6:	414c      	adcs	r4, r1
    30b8:	b2e4      	uxtb	r4, r4
    30ba:	2001      	movs	r0, #1
    30bc:	4020      	ands	r0, r4
    30be:	0040      	lsls	r0, r0, #1
    30c0:	7cbc      	ldrb	r4, [r7, #18]
    30c2:	2302      	movs	r3, #2
    30c4:	439c      	bics	r4, r3
    30c6:	4304      	orrs	r4, r0
    30c8:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    30ca:	002b      	movs	r3, r5
    30cc:	9a02      	ldr	r2, [sp, #8]
    30ce:	0031      	movs	r1, r6
    30d0:	4826      	ldr	r0, [pc, #152]	; (316c <udd_ep_run+0x1c8>)
    30d2:	4c29      	ldr	r4, [pc, #164]	; (3178 <udd_ep_run+0x1d4>)
    30d4:	47a0      	blx	r4
		return (STATUS_OK ==
    30d6:	4244      	negs	r4, r0
    30d8:	4144      	adcs	r4, r0
    30da:	b2e4      	uxtb	r4, r4
    30dc:	e76d      	b.n	2fba <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    30de:	7cbb      	ldrb	r3, [r7, #18]
    30e0:	079b      	lsls	r3, r3, #30
    30e2:	d505      	bpl.n	30f0 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    30e4:	7cbb      	ldrb	r3, [r7, #18]
    30e6:	2202      	movs	r2, #2
    30e8:	4393      	bics	r3, r2
    30ea:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    30ec:	2500      	movs	r5, #0
    30ee:	e7ec      	b.n	30ca <udd_ep_run+0x126>
			ptr_job->busy = false;
    30f0:	7cbb      	ldrb	r3, [r7, #18]
    30f2:	2201      	movs	r2, #1
    30f4:	4393      	bics	r3, r2
    30f6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    30f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    30fa:	2b00      	cmp	r3, #0
    30fc:	d025      	beq.n	314a <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    30fe:	002a      	movs	r2, r5
    3100:	2100      	movs	r1, #0
    3102:	2000      	movs	r0, #0
    3104:	4798      	blx	r3
			return true;
    3106:	2401      	movs	r4, #1
    3108:	e757      	b.n	2fba <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    310a:	8a39      	ldrh	r1, [r7, #16]
    310c:	0020      	movs	r0, r4
    310e:	4b19      	ldr	r3, [pc, #100]	; (3174 <udd_ep_run+0x1d0>)
    3110:	4798      	blx	r3
    3112:	1a63      	subs	r3, r4, r1
    3114:	b29a      	uxth	r2, r3
    3116:	e7a4      	b.n	3062 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3118:	0013      	movs	r3, r2
    311a:	9a02      	ldr	r2, [sp, #8]
    311c:	0031      	movs	r1, r6
    311e:	4813      	ldr	r0, [pc, #76]	; (316c <udd_ep_run+0x1c8>)
    3120:	4c13      	ldr	r4, [pc, #76]	; (3170 <udd_ep_run+0x1cc>)
    3122:	47a0      	blx	r4
				return (STATUS_OK ==
    3124:	4244      	negs	r4, r0
    3126:	4144      	adcs	r4, r0
    3128:	b2e4      	uxtb	r4, r4
    312a:	e746      	b.n	2fba <udd_ep_run+0x16>
			ptr_job->busy = false;
    312c:	7cbb      	ldrb	r3, [r7, #18]
    312e:	2201      	movs	r2, #1
    3130:	4393      	bics	r3, r2
    3132:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3136:	2b00      	cmp	r3, #0
    3138:	d009      	beq.n	314e <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    313a:	002a      	movs	r2, r5
    313c:	2100      	movs	r1, #0
    313e:	2000      	movs	r0, #0
    3140:	4798      	blx	r3
			return true;
    3142:	2401      	movs	r4, #1
    3144:	e739      	b.n	2fba <udd_ep_run+0x16>
		return false;
    3146:	2400      	movs	r4, #0
    3148:	e737      	b.n	2fba <udd_ep_run+0x16>
			return true;
    314a:	2401      	movs	r4, #1
    314c:	e735      	b.n	2fba <udd_ep_run+0x16>
			return true;
    314e:	2401      	movs	r4, #1
    3150:	e733      	b.n	2fba <udd_ep_run+0x16>
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	00002e1d 	.word	0x00002e1d
    3158:	00002681 	.word	0x00002681
    315c:	20000100 	.word	0x20000100
    3160:	00001fff 	.word	0x00001fff
    3164:	00004bad 	.word	0x00004bad
    3168:	200004c0 	.word	0x200004c0
    316c:	20000580 	.word	0x20000580
    3170:	00003985 	.word	0x00003985
    3174:	000049d9 	.word	0x000049d9
    3178:	00003931 	.word	0x00003931

0000317c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    317c:	4b02      	ldr	r3, [pc, #8]	; (3188 <udd_set_address+0xc>)
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	2280      	movs	r2, #128	; 0x80
    3182:	4310      	orrs	r0, r2
    3184:	7298      	strb	r0, [r3, #10]
}
    3186:	4770      	bx	lr
    3188:	20000580 	.word	0x20000580

0000318c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    318c:	4b02      	ldr	r3, [pc, #8]	; (3198 <udd_getaddress+0xc>)
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	7a98      	ldrb	r0, [r3, #10]
    3192:	0640      	lsls	r0, r0, #25
    3194:	0e40      	lsrs	r0, r0, #25
}
    3196:	4770      	bx	lr
    3198:	20000580 	.word	0x20000580

0000319c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    319c:	4b01      	ldr	r3, [pc, #4]	; (31a4 <udd_set_setup_payload+0x8>)
    319e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    31a0:	8199      	strh	r1, [r3, #12]
}
    31a2:	4770      	bx	lr
    31a4:	200006e8 	.word	0x200006e8

000031a8 <udd_detach>:

void udd_detach(void)
{
    31a8:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    31aa:	4b05      	ldr	r3, [pc, #20]	; (31c0 <udd_detach+0x18>)
    31ac:	681a      	ldr	r2, [r3, #0]
    31ae:	8913      	ldrh	r3, [r2, #8]
    31b0:	2101      	movs	r1, #1
    31b2:	430b      	orrs	r3, r1
    31b4:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    31b6:	2001      	movs	r0, #1
    31b8:	4b02      	ldr	r3, [pc, #8]	; (31c4 <udd_detach+0x1c>)
    31ba:	4798      	blx	r3
}
    31bc:	bd10      	pop	{r4, pc}
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	20000580 	.word	0x20000580
    31c4:	000025c1 	.word	0x000025c1

000031c8 <udd_attach>:

void udd_attach(void)
{
    31c8:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    31ca:	2003      	movs	r0, #3
    31cc:	4b16      	ldr	r3, [pc, #88]	; (3228 <udd_attach+0x60>)
    31ce:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    31d0:	4c16      	ldr	r4, [pc, #88]	; (322c <udd_attach+0x64>)
    31d2:	6822      	ldr	r2, [r4, #0]
    31d4:	8913      	ldrh	r3, [r2, #8]
    31d6:	2101      	movs	r1, #1
    31d8:	438b      	bics	r3, r1
    31da:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    31dc:	4a14      	ldr	r2, [pc, #80]	; (3230 <udd_attach+0x68>)
    31de:	3103      	adds	r1, #3
    31e0:	0020      	movs	r0, r4
    31e2:	4e14      	ldr	r6, [pc, #80]	; (3234 <udd_attach+0x6c>)
    31e4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    31e6:	4a14      	ldr	r2, [pc, #80]	; (3238 <udd_attach+0x70>)
    31e8:	2100      	movs	r1, #0
    31ea:	0020      	movs	r0, r4
    31ec:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    31ee:	4a13      	ldr	r2, [pc, #76]	; (323c <udd_attach+0x74>)
    31f0:	2101      	movs	r1, #1
    31f2:	0020      	movs	r0, r4
    31f4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    31f6:	4a12      	ldr	r2, [pc, #72]	; (3240 <udd_attach+0x78>)
    31f8:	2102      	movs	r1, #2
    31fa:	0020      	movs	r0, r4
    31fc:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    31fe:	2104      	movs	r1, #4
    3200:	0020      	movs	r0, r4
    3202:	4d10      	ldr	r5, [pc, #64]	; (3244 <udd_attach+0x7c>)
    3204:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3206:	2100      	movs	r1, #0
    3208:	0020      	movs	r0, r4
    320a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    320c:	2101      	movs	r1, #1
    320e:	0020      	movs	r0, r4
    3210:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3212:	2102      	movs	r1, #2
    3214:	0020      	movs	r0, r4
    3216:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3218:	4a0b      	ldr	r2, [pc, #44]	; (3248 <udd_attach+0x80>)
    321a:	2106      	movs	r1, #6
    321c:	0020      	movs	r0, r4
    321e:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3220:	2106      	movs	r1, #6
    3222:	0020      	movs	r0, r4
    3224:	47a8      	blx	r5
#endif
}
    3226:	bd70      	pop	{r4, r5, r6, pc}
    3228:	000025c1 	.word	0x000025c1
    322c:	20000580 	.word	0x20000580
    3230:	00002c29 	.word	0x00002c29
    3234:	00003381 	.word	0x00003381
    3238:	00002c15 	.word	0x00002c15
    323c:	00002949 	.word	0x00002949
    3240:	000028d9 	.word	0x000028d9
    3244:	000033a5 	.word	0x000033a5
    3248:	0000287d 	.word	0x0000287d

0000324c <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    324c:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    324e:	2100      	movs	r1, #0
    3250:	200e      	movs	r0, #14
    3252:	4b08      	ldr	r3, [pc, #32]	; (3274 <_uhd_vbus_handler+0x28>)
    3254:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3256:	4b08      	ldr	r3, [pc, #32]	; (3278 <_uhd_vbus_handler+0x2c>)
    3258:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    325a:	045b      	lsls	r3, r3, #17
    325c:	d406      	bmi.n	326c <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    325e:	4b07      	ldr	r3, [pc, #28]	; (327c <_uhd_vbus_handler+0x30>)
    3260:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3262:	2100      	movs	r1, #0
    3264:	200e      	movs	r0, #14
    3266:	4b06      	ldr	r3, [pc, #24]	; (3280 <_uhd_vbus_handler+0x34>)
    3268:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    326a:	bd10      	pop	{r4, pc}
		udd_attach();
    326c:	4b05      	ldr	r3, [pc, #20]	; (3284 <_uhd_vbus_handler+0x38>)
    326e:	4798      	blx	r3
    3270:	e7f7      	b.n	3262 <_uhd_vbus_handler+0x16>
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	00001a45 	.word	0x00001a45
    3278:	41004400 	.word	0x41004400
    327c:	000031a9 	.word	0x000031a9
    3280:	00001a25 	.word	0x00001a25
    3284:	000031c9 	.word	0x000031c9

00003288 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3288:	b570      	push	{r4, r5, r6, lr}
    328a:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    328c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3290:	425a      	negs	r2, r3
    3292:	4153      	adcs	r3, r2
    3294:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3296:	b672      	cpsid	i
    3298:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    329c:	2600      	movs	r6, #0
    329e:	4b29      	ldr	r3, [pc, #164]	; (3344 <udd_enable+0xbc>)
    32a0:	701e      	strb	r6, [r3, #0]
	return flags;
    32a2:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    32a4:	ac05      	add	r4, sp, #20
    32a6:	0020      	movs	r0, r4
    32a8:	4b27      	ldr	r3, [pc, #156]	; (3348 <udd_enable+0xc0>)
    32aa:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    32ac:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    32ae:	4e27      	ldr	r6, [pc, #156]	; (334c <udd_enable+0xc4>)
    32b0:	0022      	movs	r2, r4
    32b2:	4927      	ldr	r1, [pc, #156]	; (3350 <udd_enable+0xc8>)
    32b4:	0030      	movs	r0, r6
    32b6:	4b27      	ldr	r3, [pc, #156]	; (3354 <udd_enable+0xcc>)
    32b8:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    32ba:	0030      	movs	r0, r6
    32bc:	4b26      	ldr	r3, [pc, #152]	; (3358 <udd_enable+0xd0>)
    32be:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    32c0:	4b26      	ldr	r3, [pc, #152]	; (335c <udd_enable+0xd4>)
    32c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    32c4:	069b      	lsls	r3, r3, #26
    32c6:	d434      	bmi.n	3332 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    32c8:	4924      	ldr	r1, [pc, #144]	; (335c <udd_enable+0xd4>)
    32ca:	22d0      	movs	r2, #208	; 0xd0
    32cc:	68cb      	ldr	r3, [r1, #12]
    32ce:	4013      	ands	r3, r2
    32d0:	2bd0      	cmp	r3, #208	; 0xd0
    32d2:	d1fb      	bne.n	32cc <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    32d4:	2001      	movs	r0, #1
    32d6:	4b22      	ldr	r3, [pc, #136]	; (3360 <udd_enable+0xd8>)
    32d8:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    32da:	ac02      	add	r4, sp, #8
    32dc:	0020      	movs	r0, r4
    32de:	4b21      	ldr	r3, [pc, #132]	; (3364 <udd_enable+0xdc>)
    32e0:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    32e2:	230e      	movs	r3, #14
    32e4:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    32e6:	2300      	movs	r3, #0
    32e8:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    32ea:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    32ec:	3303      	adds	r3, #3
    32ee:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    32f0:	3b02      	subs	r3, #2
    32f2:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    32f4:	2100      	movs	r1, #0
    32f6:	200e      	movs	r0, #14
    32f8:	4b1b      	ldr	r3, [pc, #108]	; (3368 <udd_enable+0xe0>)
    32fa:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    32fc:	0021      	movs	r1, r4
    32fe:	200e      	movs	r0, #14
    3300:	4b1a      	ldr	r3, [pc, #104]	; (336c <udd_enable+0xe4>)
    3302:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3304:	2200      	movs	r2, #0
    3306:	210e      	movs	r1, #14
    3308:	4819      	ldr	r0, [pc, #100]	; (3370 <udd_enable+0xe8>)
    330a:	4b1a      	ldr	r3, [pc, #104]	; (3374 <udd_enable+0xec>)
    330c:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    330e:	2100      	movs	r1, #0
    3310:	200e      	movs	r0, #14
    3312:	4b19      	ldr	r3, [pc, #100]	; (3378 <udd_enable+0xf0>)
    3314:	4798      	blx	r3
    3316:	4b19      	ldr	r3, [pc, #100]	; (337c <udd_enable+0xf4>)
    3318:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    331a:	045b      	lsls	r3, r3, #17
    331c:	d40f      	bmi.n	333e <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    331e:	2d00      	cmp	r5, #0
    3320:	d005      	beq.n	332e <udd_enable+0xa6>
		cpu_irq_enable();
    3322:	2201      	movs	r2, #1
    3324:	4b07      	ldr	r3, [pc, #28]	; (3344 <udd_enable+0xbc>)
    3326:	701a      	strb	r2, [r3, #0]
    3328:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    332c:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    332e:	b006      	add	sp, #24
    3330:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3332:	490a      	ldr	r1, [pc, #40]	; (335c <udd_enable+0xd4>)
    3334:	2210      	movs	r2, #16
    3336:	68cb      	ldr	r3, [r1, #12]
    3338:	421a      	tst	r2, r3
    333a:	d0fc      	beq.n	3336 <udd_enable+0xae>
    333c:	e7ca      	b.n	32d4 <udd_enable+0x4c>
		_uhd_vbus_handler();
    333e:	4b0c      	ldr	r3, [pc, #48]	; (3370 <udd_enable+0xe8>)
    3340:	4798      	blx	r3
    3342:	e7ec      	b.n	331e <udd_enable+0x96>
    3344:	20000100 	.word	0x20000100
    3348:	00003fe1 	.word	0x00003fe1
    334c:	20000580 	.word	0x20000580
    3350:	41005000 	.word	0x41005000
    3354:	00003ff1 	.word	0x00003ff1
    3358:	00003a05 	.word	0x00003a05
    335c:	40000800 	.word	0x40000800
    3360:	000025c1 	.word	0x000025c1
    3364:	00001b3d 	.word	0x00001b3d
    3368:	00001a45 	.word	0x00001a45
    336c:	00001b51 	.word	0x00001b51
    3370:	0000324d 	.word	0x0000324d
    3374:	000019f9 	.word	0x000019f9
    3378:	00001a25 	.word	0x00001a25
    337c:	41004400 	.word	0x41004400

00003380 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3380:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3382:	000b      	movs	r3, r1
    3384:	332e      	adds	r3, #46	; 0x2e
    3386:	009b      	lsls	r3, r3, #2
    3388:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    338a:	22aa      	movs	r2, #170	; 0xaa
    338c:	0052      	lsls	r2, r2, #1
    338e:	0049      	lsls	r1, r1, #1
    3390:	5a83      	ldrh	r3, [r0, r2]
    3392:	4c03      	ldr	r4, [pc, #12]	; (33a0 <usb_device_register_callback+0x20>)
    3394:	5b09      	ldrh	r1, [r1, r4]
    3396:	430b      	orrs	r3, r1
    3398:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    339a:	2000      	movs	r0, #0
    339c:	bd10      	pop	{r4, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	00006110 	.word	0x00006110

000033a4 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    33a4:	0049      	lsls	r1, r1, #1
    33a6:	4b06      	ldr	r3, [pc, #24]	; (33c0 <usb_device_enable_callback+0x1c>)
    33a8:	5acb      	ldrh	r3, [r1, r3]
    33aa:	6802      	ldr	r2, [r0, #0]
    33ac:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    33ae:	21ab      	movs	r1, #171	; 0xab
    33b0:	0049      	lsls	r1, r1, #1
    33b2:	5a42      	ldrh	r2, [r0, r1]
    33b4:	431a      	orrs	r2, r3
    33b6:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    33b8:	6802      	ldr	r2, [r0, #0]
    33ba:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    33bc:	2000      	movs	r0, #0
    33be:	4770      	bx	lr
    33c0:	00006110 	.word	0x00006110

000033c4 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    33c4:	0049      	lsls	r1, r1, #1
    33c6:	4b05      	ldr	r3, [pc, #20]	; (33dc <usb_device_disable_callback+0x18>)
    33c8:	5aca      	ldrh	r2, [r1, r3]
    33ca:	21ab      	movs	r1, #171	; 0xab
    33cc:	0049      	lsls	r1, r1, #1
    33ce:	5a43      	ldrh	r3, [r0, r1]
    33d0:	4393      	bics	r3, r2
    33d2:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    33d4:	6803      	ldr	r3, [r0, #0]
    33d6:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    33d8:	2000      	movs	r0, #0
    33da:	4770      	bx	lr
    33dc:	00006110 	.word	0x00006110

000033e0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    33e0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    33e2:	008c      	lsls	r4, r1, #2
    33e4:	18a4      	adds	r4, r4, r2
    33e6:	3434      	adds	r4, #52	; 0x34
    33e8:	00a4      	lsls	r4, r4, #2
    33ea:	1904      	adds	r4, r0, r4
    33ec:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    33ee:	1840      	adds	r0, r0, r1
    33f0:	3059      	adds	r0, #89	; 0x59
    33f2:	30ff      	adds	r0, #255	; 0xff
    33f4:	7803      	ldrb	r3, [r0, #0]
    33f6:	4903      	ldr	r1, [pc, #12]	; (3404 <usb_device_endpoint_register_callback+0x24>)
    33f8:	5c8a      	ldrb	r2, [r1, r2]
    33fa:	4313      	orrs	r3, r2
    33fc:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    33fe:	2000      	movs	r0, #0
    3400:	bd10      	pop	{r4, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	00006120 	.word	0x00006120

00003408 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3408:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    340a:	008b      	lsls	r3, r1, #2
    340c:	189b      	adds	r3, r3, r2
    340e:	3334      	adds	r3, #52	; 0x34
    3410:	009b      	lsls	r3, r3, #2
    3412:	18c3      	adds	r3, r0, r3
    3414:	2400      	movs	r4, #0
    3416:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3418:	1840      	adds	r0, r0, r1
    341a:	3059      	adds	r0, #89	; 0x59
    341c:	30ff      	adds	r0, #255	; 0xff
    341e:	4b03      	ldr	r3, [pc, #12]	; (342c <usb_device_endpoint_unregister_callback+0x24>)
    3420:	5c9a      	ldrb	r2, [r3, r2]
    3422:	7803      	ldrb	r3, [r0, #0]
    3424:	4393      	bics	r3, r2
    3426:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3428:	2000      	movs	r0, #0
    342a:	bd10      	pop	{r4, pc}
    342c:	00006120 	.word	0x00006120

00003430 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3430:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3432:	230f      	movs	r3, #15
    3434:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3436:	18c4      	adds	r4, r0, r3
    3438:	3461      	adds	r4, #97	; 0x61
    343a:	34ff      	adds	r4, #255	; 0xff
    343c:	7825      	ldrb	r5, [r4, #0]
    343e:	4e2f      	ldr	r6, [pc, #188]	; (34fc <usb_device_endpoint_enable_callback+0xcc>)
    3440:	5cb6      	ldrb	r6, [r6, r2]
    3442:	4335      	orrs	r5, r6
    3444:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3446:	2a00      	cmp	r2, #0
    3448:	d129      	bne.n	349e <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    344a:	2b00      	cmp	r3, #0
    344c:	d112      	bne.n	3474 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    344e:	2503      	movs	r5, #3
    3450:	240a      	movs	r4, #10
    3452:	34ff      	adds	r4, #255	; 0xff
    3454:	6806      	ldr	r6, [r0, #0]
    3456:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3458:	2a03      	cmp	r2, #3
    345a:	d109      	bne.n	3470 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    345c:	b249      	sxtb	r1, r1
    345e:	2900      	cmp	r1, #0
    3460:	db44      	blt.n	34ec <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3462:	6802      	ldr	r2, [r0, #0]
    3464:	015b      	lsls	r3, r3, #5
    3466:	18d3      	adds	r3, r2, r3
    3468:	330a      	adds	r3, #10
    346a:	33ff      	adds	r3, #255	; 0xff
    346c:	2220      	movs	r2, #32
    346e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3470:	2000      	movs	r0, #0
    3472:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3474:	b24c      	sxtb	r4, r1
    3476:	2c00      	cmp	r4, #0
    3478:	db08      	blt.n	348c <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    347a:	015c      	lsls	r4, r3, #5
    347c:	6805      	ldr	r5, [r0, #0]
    347e:	46ac      	mov	ip, r5
    3480:	4464      	add	r4, ip
    3482:	340a      	adds	r4, #10
    3484:	34ff      	adds	r4, #255	; 0xff
    3486:	2501      	movs	r5, #1
    3488:	7025      	strb	r5, [r4, #0]
    348a:	e7e5      	b.n	3458 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    348c:	015c      	lsls	r4, r3, #5
    348e:	6805      	ldr	r5, [r0, #0]
    3490:	46ac      	mov	ip, r5
    3492:	4464      	add	r4, ip
    3494:	340a      	adds	r4, #10
    3496:	34ff      	adds	r4, #255	; 0xff
    3498:	2502      	movs	r5, #2
    349a:	7025      	strb	r5, [r4, #0]
    349c:	e7dc      	b.n	3458 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    349e:	2a01      	cmp	r2, #1
    34a0:	d11a      	bne.n	34d8 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    34a2:	2b00      	cmp	r3, #0
    34a4:	d105      	bne.n	34b2 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    34a6:	6802      	ldr	r2, [r0, #0]
    34a8:	210c      	movs	r1, #12
    34aa:	230a      	movs	r3, #10
    34ac:	33ff      	adds	r3, #255	; 0xff
    34ae:	54d1      	strb	r1, [r2, r3]
    34b0:	e7de      	b.n	3470 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    34b2:	b249      	sxtb	r1, r1
    34b4:	2900      	cmp	r1, #0
    34b6:	db07      	blt.n	34c8 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    34b8:	6802      	ldr	r2, [r0, #0]
    34ba:	015b      	lsls	r3, r3, #5
    34bc:	18d3      	adds	r3, r2, r3
    34be:	330a      	adds	r3, #10
    34c0:	33ff      	adds	r3, #255	; 0xff
    34c2:	2204      	movs	r2, #4
    34c4:	701a      	strb	r2, [r3, #0]
    34c6:	e7d3      	b.n	3470 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    34c8:	6802      	ldr	r2, [r0, #0]
    34ca:	015b      	lsls	r3, r3, #5
    34cc:	18d3      	adds	r3, r2, r3
    34ce:	330a      	adds	r3, #10
    34d0:	33ff      	adds	r3, #255	; 0xff
    34d2:	2208      	movs	r2, #8
    34d4:	701a      	strb	r2, [r3, #0]
    34d6:	e7cb      	b.n	3470 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    34d8:	2a02      	cmp	r2, #2
    34da:	d1bd      	bne.n	3458 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    34dc:	6802      	ldr	r2, [r0, #0]
    34de:	015b      	lsls	r3, r3, #5
    34e0:	18d3      	adds	r3, r2, r3
    34e2:	330a      	adds	r3, #10
    34e4:	33ff      	adds	r3, #255	; 0xff
    34e6:	2210      	movs	r2, #16
    34e8:	701a      	strb	r2, [r3, #0]
    34ea:	e7c1      	b.n	3470 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    34ec:	6802      	ldr	r2, [r0, #0]
    34ee:	015b      	lsls	r3, r3, #5
    34f0:	18d3      	adds	r3, r2, r3
    34f2:	330a      	adds	r3, #10
    34f4:	33ff      	adds	r3, #255	; 0xff
    34f6:	2240      	movs	r2, #64	; 0x40
    34f8:	701a      	strb	r2, [r3, #0]
    34fa:	e7b9      	b.n	3470 <usb_device_endpoint_enable_callback+0x40>
    34fc:	00006120 	.word	0x00006120

00003500 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3500:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3502:	230f      	movs	r3, #15
    3504:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3506:	18c4      	adds	r4, r0, r3
    3508:	3461      	adds	r4, #97	; 0x61
    350a:	34ff      	adds	r4, #255	; 0xff
    350c:	4d2f      	ldr	r5, [pc, #188]	; (35cc <usb_device_endpoint_disable_callback+0xcc>)
    350e:	5cae      	ldrb	r6, [r5, r2]
    3510:	7825      	ldrb	r5, [r4, #0]
    3512:	43b5      	bics	r5, r6
    3514:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3516:	2a00      	cmp	r2, #0
    3518:	d129      	bne.n	356e <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    351a:	2b00      	cmp	r3, #0
    351c:	d112      	bne.n	3544 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    351e:	2503      	movs	r5, #3
    3520:	2484      	movs	r4, #132	; 0x84
    3522:	0064      	lsls	r4, r4, #1
    3524:	6806      	ldr	r6, [r0, #0]
    3526:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3528:	2a03      	cmp	r2, #3
    352a:	d109      	bne.n	3540 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    352c:	b249      	sxtb	r1, r1
    352e:	2900      	cmp	r1, #0
    3530:	db44      	blt.n	35bc <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3532:	6802      	ldr	r2, [r0, #0]
    3534:	015b      	lsls	r3, r3, #5
    3536:	18d3      	adds	r3, r2, r3
    3538:	3309      	adds	r3, #9
    353a:	33ff      	adds	r3, #255	; 0xff
    353c:	2220      	movs	r2, #32
    353e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3540:	2000      	movs	r0, #0
    3542:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3544:	b24c      	sxtb	r4, r1
    3546:	2c00      	cmp	r4, #0
    3548:	db08      	blt.n	355c <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    354a:	015c      	lsls	r4, r3, #5
    354c:	6805      	ldr	r5, [r0, #0]
    354e:	46ac      	mov	ip, r5
    3550:	4464      	add	r4, ip
    3552:	3409      	adds	r4, #9
    3554:	34ff      	adds	r4, #255	; 0xff
    3556:	2501      	movs	r5, #1
    3558:	7025      	strb	r5, [r4, #0]
    355a:	e7e5      	b.n	3528 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    355c:	015c      	lsls	r4, r3, #5
    355e:	6805      	ldr	r5, [r0, #0]
    3560:	46ac      	mov	ip, r5
    3562:	4464      	add	r4, ip
    3564:	3409      	adds	r4, #9
    3566:	34ff      	adds	r4, #255	; 0xff
    3568:	2502      	movs	r5, #2
    356a:	7025      	strb	r5, [r4, #0]
    356c:	e7dc      	b.n	3528 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    356e:	2a01      	cmp	r2, #1
    3570:	d11a      	bne.n	35a8 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3572:	2b00      	cmp	r3, #0
    3574:	d105      	bne.n	3582 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3576:	6802      	ldr	r2, [r0, #0]
    3578:	210c      	movs	r1, #12
    357a:	3309      	adds	r3, #9
    357c:	33ff      	adds	r3, #255	; 0xff
    357e:	54d1      	strb	r1, [r2, r3]
    3580:	e7de      	b.n	3540 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3582:	b249      	sxtb	r1, r1
    3584:	2900      	cmp	r1, #0
    3586:	db07      	blt.n	3598 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3588:	6802      	ldr	r2, [r0, #0]
    358a:	015b      	lsls	r3, r3, #5
    358c:	18d3      	adds	r3, r2, r3
    358e:	3309      	adds	r3, #9
    3590:	33ff      	adds	r3, #255	; 0xff
    3592:	2204      	movs	r2, #4
    3594:	701a      	strb	r2, [r3, #0]
    3596:	e7d3      	b.n	3540 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3598:	6802      	ldr	r2, [r0, #0]
    359a:	015b      	lsls	r3, r3, #5
    359c:	18d3      	adds	r3, r2, r3
    359e:	3309      	adds	r3, #9
    35a0:	33ff      	adds	r3, #255	; 0xff
    35a2:	2208      	movs	r2, #8
    35a4:	701a      	strb	r2, [r3, #0]
    35a6:	e7cb      	b.n	3540 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    35a8:	2a02      	cmp	r2, #2
    35aa:	d1bd      	bne.n	3528 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    35ac:	6802      	ldr	r2, [r0, #0]
    35ae:	015b      	lsls	r3, r3, #5
    35b0:	18d3      	adds	r3, r2, r3
    35b2:	3309      	adds	r3, #9
    35b4:	33ff      	adds	r3, #255	; 0xff
    35b6:	2210      	movs	r2, #16
    35b8:	701a      	strb	r2, [r3, #0]
    35ba:	e7c1      	b.n	3540 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    35bc:	6802      	ldr	r2, [r0, #0]
    35be:	015b      	lsls	r3, r3, #5
    35c0:	18d3      	adds	r3, r2, r3
    35c2:	3309      	adds	r3, #9
    35c4:	33ff      	adds	r3, #255	; 0xff
    35c6:	2240      	movs	r2, #64	; 0x40
    35c8:	701a      	strb	r2, [r3, #0]
    35ca:	e7b9      	b.n	3540 <usb_device_endpoint_disable_callback+0x40>
    35cc:	00006120 	.word	0x00006120

000035d0 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    35d0:	2300      	movs	r3, #0
    35d2:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    35d4:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    35d6:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    35d8:	3301      	adds	r3, #1
    35da:	70c3      	strb	r3, [r0, #3]
}
    35dc:	4770      	bx	lr
	...

000035e0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    35e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    35e2:	780c      	ldrb	r4, [r1, #0]
    35e4:	230f      	movs	r3, #15
    35e6:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    35e8:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    35ea:	78ca      	ldrb	r2, [r1, #3]
    35ec:	2a04      	cmp	r2, #4
    35ee:	d870      	bhi.n	36d2 <usb_device_endpoint_set_config+0xf2>
    35f0:	0092      	lsls	r2, r2, #2
    35f2:	4d89      	ldr	r5, [pc, #548]	; (3818 <usb_device_endpoint_set_config+0x238>)
    35f4:	58aa      	ldr	r2, [r5, r2]
    35f6:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    35f8:	6802      	ldr	r2, [r0, #0]
    35fa:	3308      	adds	r3, #8
    35fc:	015b      	lsls	r3, r3, #5
    35fe:	2100      	movs	r1, #0
    3600:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3602:	2200      	movs	r2, #0
    3604:	e082      	b.n	370c <usb_device_endpoint_set_config+0x12c>
    3606:	015c      	lsls	r4, r3, #5
    3608:	6802      	ldr	r2, [r0, #0]
    360a:	4694      	mov	ip, r2
    360c:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    360e:	2280      	movs	r2, #128	; 0x80
    3610:	0052      	lsls	r2, r2, #1
    3612:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3614:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3616:	076d      	lsls	r5, r5, #29
    3618:	d178      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    361a:	32e4      	adds	r2, #228	; 0xe4
    361c:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    361e:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3620:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3622:	422e      	tst	r6, r5
    3624:	d172      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3626:	3d5f      	subs	r5, #95	; 0x5f
    3628:	32e4      	adds	r2, #228	; 0xe4
    362a:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    362c:	001a      	movs	r2, r3
    362e:	3208      	adds	r2, #8
    3630:	0152      	lsls	r2, r2, #5
    3632:	6804      	ldr	r4, [r0, #0]
    3634:	18a4      	adds	r4, r4, r2
    3636:	352f      	adds	r5, #47	; 0x2f
    3638:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    363a:	6800      	ldr	r0, [r0, #0]
    363c:	1882      	adds	r2, r0, r2
    363e:	2080      	movs	r0, #128	; 0x80
    3640:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3642:	788a      	ldrb	r2, [r1, #2]
    3644:	2a00      	cmp	r2, #0
    3646:	d01f      	beq.n	3688 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3648:	0158      	lsls	r0, r3, #5
    364a:	4a74      	ldr	r2, [pc, #464]	; (381c <usb_device_endpoint_set_config+0x23c>)
    364c:	1812      	adds	r2, r2, r0
    364e:	6854      	ldr	r4, [r2, #4]
    3650:	2080      	movs	r0, #128	; 0x80
    3652:	0600      	lsls	r0, r0, #24
    3654:	4304      	orrs	r4, r0
    3656:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3658:	6954      	ldr	r4, [r2, #20]
    365a:	4320      	orrs	r0, r4
    365c:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    365e:	2507      	movs	r5, #7
    3660:	784c      	ldrb	r4, [r1, #1]
    3662:	015a      	lsls	r2, r3, #5
    3664:	4b6d      	ldr	r3, [pc, #436]	; (381c <usb_device_endpoint_set_config+0x23c>)
    3666:	189b      	adds	r3, r3, r2
    3668:	6858      	ldr	r0, [r3, #4]
    366a:	402c      	ands	r4, r5
    366c:	0724      	lsls	r4, r4, #28
    366e:	4e6c      	ldr	r6, [pc, #432]	; (3820 <usb_device_endpoint_set_config+0x240>)
    3670:	4030      	ands	r0, r6
    3672:	4320      	orrs	r0, r4
    3674:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3676:	7849      	ldrb	r1, [r1, #1]
    3678:	695a      	ldr	r2, [r3, #20]
    367a:	4029      	ands	r1, r5
    367c:	0709      	lsls	r1, r1, #28
    367e:	4032      	ands	r2, r6
    3680:	430a      	orrs	r2, r1
    3682:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3684:	2200      	movs	r2, #0
    3686:	e041      	b.n	370c <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3688:	0158      	lsls	r0, r3, #5
    368a:	4a64      	ldr	r2, [pc, #400]	; (381c <usb_device_endpoint_set_config+0x23c>)
    368c:	1812      	adds	r2, r2, r0
    368e:	6850      	ldr	r0, [r2, #4]
    3690:	0040      	lsls	r0, r0, #1
    3692:	0840      	lsrs	r0, r0, #1
    3694:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3696:	6950      	ldr	r0, [r2, #20]
    3698:	0040      	lsls	r0, r0, #1
    369a:	0840      	lsrs	r0, r0, #1
    369c:	6150      	str	r0, [r2, #20]
    369e:	e7de      	b.n	365e <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    36a0:	2c00      	cmp	r4, #0
    36a2:	db35      	blt.n	3710 <usb_device_endpoint_set_config+0x130>
    36a4:	015d      	lsls	r5, r3, #5
    36a6:	6802      	ldr	r2, [r0, #0]
    36a8:	4694      	mov	ip, r2
    36aa:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36ac:	2280      	movs	r2, #128	; 0x80
    36ae:	0052      	lsls	r2, r2, #1
    36b0:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    36b2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    36b4:	0776      	lsls	r6, r6, #29
    36b6:	d129      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    36b8:	2680      	movs	r6, #128	; 0x80
    36ba:	0076      	lsls	r6, r6, #1
    36bc:	5daa      	ldrb	r2, [r5, r6]
    36be:	2702      	movs	r7, #2
    36c0:	433a      	orrs	r2, r7
    36c2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    36c4:	6802      	ldr	r2, [r0, #0]
    36c6:	0018      	movs	r0, r3
    36c8:	3008      	adds	r0, #8
    36ca:	0140      	lsls	r0, r0, #5
    36cc:	1812      	adds	r2, r2, r0
    36ce:	2040      	movs	r0, #64	; 0x40
    36d0:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    36d2:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    36d4:	784f      	ldrb	r7, [r1, #1]
    36d6:	005d      	lsls	r5, r3, #1
    36d8:	18ad      	adds	r5, r5, r2
    36da:	012d      	lsls	r5, r5, #4
    36dc:	4e4f      	ldr	r6, [pc, #316]	; (381c <usb_device_endpoint_set_config+0x23c>)
    36de:	1975      	adds	r5, r6, r5
    36e0:	6868      	ldr	r0, [r5, #4]
    36e2:	2407      	movs	r4, #7
    36e4:	403c      	ands	r4, r7
    36e6:	0724      	lsls	r4, r4, #28
    36e8:	4e4d      	ldr	r6, [pc, #308]	; (3820 <usb_device_endpoint_set_config+0x240>)
    36ea:	4030      	ands	r0, r6
    36ec:	4320      	orrs	r0, r4
    36ee:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    36f0:	7889      	ldrb	r1, [r1, #2]
    36f2:	2900      	cmp	r1, #0
    36f4:	d000      	beq.n	36f8 <usb_device_endpoint_set_config+0x118>
    36f6:	e088      	b.n	380a <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    36f8:	005b      	lsls	r3, r3, #1
    36fa:	189b      	adds	r3, r3, r2
    36fc:	011b      	lsls	r3, r3, #4
    36fe:	4a47      	ldr	r2, [pc, #284]	; (381c <usb_device_endpoint_set_config+0x23c>)
    3700:	18d3      	adds	r3, r2, r3
    3702:	685a      	ldr	r2, [r3, #4]
    3704:	0052      	lsls	r2, r2, #1
    3706:	0852      	lsrs	r2, r2, #1
    3708:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    370a:	2200      	movs	r2, #0
}
    370c:	0010      	movs	r0, r2
    370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3710:	015d      	lsls	r5, r3, #5
    3712:	6802      	ldr	r2, [r0, #0]
    3714:	4694      	mov	ip, r2
    3716:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3718:	2280      	movs	r2, #128	; 0x80
    371a:	0052      	lsls	r2, r2, #1
    371c:	5caf      	ldrb	r7, [r5, r2]
    371e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3720:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3722:	4237      	tst	r7, r6
    3724:	d1f2      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3726:	3690      	adds	r6, #144	; 0x90
    3728:	5daa      	ldrb	r2, [r5, r6]
    372a:	2720      	movs	r7, #32
    372c:	433a      	orrs	r2, r7
    372e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3730:	6802      	ldr	r2, [r0, #0]
    3732:	0018      	movs	r0, r3
    3734:	3008      	adds	r0, #8
    3736:	0140      	lsls	r0, r0, #5
    3738:	1812      	adds	r2, r2, r0
    373a:	2080      	movs	r0, #128	; 0x80
    373c:	7110      	strb	r0, [r2, #4]
    373e:	e7c8      	b.n	36d2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3740:	2c00      	cmp	r4, #0
    3742:	db17      	blt.n	3774 <usb_device_endpoint_set_config+0x194>
    3744:	015d      	lsls	r5, r3, #5
    3746:	6802      	ldr	r2, [r0, #0]
    3748:	4694      	mov	ip, r2
    374a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    374c:	2280      	movs	r2, #128	; 0x80
    374e:	0052      	lsls	r2, r2, #1
    3750:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3752:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3754:	0776      	lsls	r6, r6, #29
    3756:	d1d9      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3758:	2680      	movs	r6, #128	; 0x80
    375a:	0076      	lsls	r6, r6, #1
    375c:	5daa      	ldrb	r2, [r5, r6]
    375e:	2703      	movs	r7, #3
    3760:	433a      	orrs	r2, r7
    3762:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3764:	6802      	ldr	r2, [r0, #0]
    3766:	0018      	movs	r0, r3
    3768:	3008      	adds	r0, #8
    376a:	0140      	lsls	r0, r0, #5
    376c:	1812      	adds	r2, r2, r0
    376e:	2040      	movs	r0, #64	; 0x40
    3770:	7150      	strb	r0, [r2, #5]
    3772:	e7ae      	b.n	36d2 <usb_device_endpoint_set_config+0xf2>
    3774:	015d      	lsls	r5, r3, #5
    3776:	6802      	ldr	r2, [r0, #0]
    3778:	4694      	mov	ip, r2
    377a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    377c:	2280      	movs	r2, #128	; 0x80
    377e:	0052      	lsls	r2, r2, #1
    3780:	5caf      	ldrb	r7, [r5, r2]
    3782:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3784:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3786:	4237      	tst	r7, r6
    3788:	d1c0      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    378a:	3690      	adds	r6, #144	; 0x90
    378c:	5daa      	ldrb	r2, [r5, r6]
    378e:	2730      	movs	r7, #48	; 0x30
    3790:	433a      	orrs	r2, r7
    3792:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3794:	6802      	ldr	r2, [r0, #0]
    3796:	0018      	movs	r0, r3
    3798:	3008      	adds	r0, #8
    379a:	0140      	lsls	r0, r0, #5
    379c:	1812      	adds	r2, r2, r0
    379e:	2080      	movs	r0, #128	; 0x80
    37a0:	7110      	strb	r0, [r2, #4]
    37a2:	e796      	b.n	36d2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    37a4:	2c00      	cmp	r4, #0
    37a6:	db17      	blt.n	37d8 <usb_device_endpoint_set_config+0x1f8>
    37a8:	015d      	lsls	r5, r3, #5
    37aa:	6802      	ldr	r2, [r0, #0]
    37ac:	4694      	mov	ip, r2
    37ae:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    37b0:	2280      	movs	r2, #128	; 0x80
    37b2:	0052      	lsls	r2, r2, #1
    37b4:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    37b6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    37b8:	0776      	lsls	r6, r6, #29
    37ba:	d1a7      	bne.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    37bc:	2680      	movs	r6, #128	; 0x80
    37be:	0076      	lsls	r6, r6, #1
    37c0:	5daa      	ldrb	r2, [r5, r6]
    37c2:	2704      	movs	r7, #4
    37c4:	433a      	orrs	r2, r7
    37c6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    37c8:	6802      	ldr	r2, [r0, #0]
    37ca:	0018      	movs	r0, r3
    37cc:	3008      	adds	r0, #8
    37ce:	0140      	lsls	r0, r0, #5
    37d0:	1812      	adds	r2, r2, r0
    37d2:	2040      	movs	r0, #64	; 0x40
    37d4:	7150      	strb	r0, [r2, #5]
    37d6:	e77c      	b.n	36d2 <usb_device_endpoint_set_config+0xf2>
    37d8:	015d      	lsls	r5, r3, #5
    37da:	6802      	ldr	r2, [r0, #0]
    37dc:	4694      	mov	ip, r2
    37de:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    37e0:	2280      	movs	r2, #128	; 0x80
    37e2:	0052      	lsls	r2, r2, #1
    37e4:	5caf      	ldrb	r7, [r5, r2]
    37e6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    37e8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    37ea:	4237      	tst	r7, r6
    37ec:	d000      	beq.n	37f0 <usb_device_endpoint_set_config+0x210>
    37ee:	e78d      	b.n	370c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    37f0:	3690      	adds	r6, #144	; 0x90
    37f2:	5daa      	ldrb	r2, [r5, r6]
    37f4:	2740      	movs	r7, #64	; 0x40
    37f6:	433a      	orrs	r2, r7
    37f8:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    37fa:	6802      	ldr	r2, [r0, #0]
    37fc:	0018      	movs	r0, r3
    37fe:	3008      	adds	r0, #8
    3800:	0140      	lsls	r0, r0, #5
    3802:	1812      	adds	r2, r2, r0
    3804:	2080      	movs	r0, #128	; 0x80
    3806:	7110      	strb	r0, [r2, #4]
    3808:	e763      	b.n	36d2 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    380a:	6869      	ldr	r1, [r5, #4]
    380c:	2380      	movs	r3, #128	; 0x80
    380e:	061b      	lsls	r3, r3, #24
    3810:	430b      	orrs	r3, r1
    3812:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3814:	2200      	movs	r2, #0
    3816:	e779      	b.n	370c <usb_device_endpoint_set_config+0x12c>
    3818:	000060fc 	.word	0x000060fc
    381c:	20000740 	.word	0x20000740
    3820:	8fffffff 	.word	0x8fffffff

00003824 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3824:	230f      	movs	r3, #15
    3826:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3828:	b249      	sxtb	r1, r1
    382a:	2900      	cmp	r1, #0
    382c:	db0a      	blt.n	3844 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    382e:	3308      	adds	r3, #8
    3830:	015b      	lsls	r3, r3, #5
    3832:	6802      	ldr	r2, [r0, #0]
    3834:	18d2      	adds	r2, r2, r3
    3836:	2140      	movs	r1, #64	; 0x40
    3838:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    383a:	6802      	ldr	r2, [r0, #0]
    383c:	18d3      	adds	r3, r2, r3
    383e:	2201      	movs	r2, #1
    3840:	71da      	strb	r2, [r3, #7]
	}
}
    3842:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3844:	3308      	adds	r3, #8
    3846:	015b      	lsls	r3, r3, #5
    3848:	6802      	ldr	r2, [r0, #0]
    384a:	18d2      	adds	r2, r2, r3
    384c:	2180      	movs	r1, #128	; 0x80
    384e:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3850:	6802      	ldr	r2, [r0, #0]
    3852:	18d3      	adds	r3, r2, r3
    3854:	2202      	movs	r2, #2
    3856:	71da      	strb	r2, [r3, #7]
    3858:	e7f3      	b.n	3842 <usb_device_endpoint_abort_job+0x1e>

0000385a <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    385a:	230f      	movs	r3, #15
    385c:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    385e:	b249      	sxtb	r1, r1
    3860:	2900      	cmp	r1, #0
    3862:	db07      	blt.n	3874 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3864:	6802      	ldr	r2, [r0, #0]
    3866:	3308      	adds	r3, #8
    3868:	015b      	lsls	r3, r3, #5
    386a:	18d3      	adds	r3, r2, r3
    386c:	7998      	ldrb	r0, [r3, #6]
    386e:	06c0      	lsls	r0, r0, #27
    3870:	0fc0      	lsrs	r0, r0, #31
	}
}
    3872:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    3874:	6802      	ldr	r2, [r0, #0]
    3876:	3308      	adds	r3, #8
    3878:	015b      	lsls	r3, r3, #5
    387a:	18d3      	adds	r3, r2, r3
    387c:	7998      	ldrb	r0, [r3, #6]
    387e:	0680      	lsls	r0, r0, #26
    3880:	0fc0      	lsrs	r0, r0, #31
    3882:	e7f6      	b.n	3872 <usb_device_endpoint_is_halted+0x18>

00003884 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3884:	230f      	movs	r3, #15
    3886:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3888:	b249      	sxtb	r1, r1
    388a:	2900      	cmp	r1, #0
    388c:	db06      	blt.n	389c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    388e:	6802      	ldr	r2, [r0, #0]
    3890:	3308      	adds	r3, #8
    3892:	015b      	lsls	r3, r3, #5
    3894:	18d3      	adds	r3, r2, r3
    3896:	2210      	movs	r2, #16
    3898:	715a      	strb	r2, [r3, #5]
	}
}
    389a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    389c:	6802      	ldr	r2, [r0, #0]
    389e:	3308      	adds	r3, #8
    38a0:	015b      	lsls	r3, r3, #5
    38a2:	18d3      	adds	r3, r2, r3
    38a4:	2220      	movs	r2, #32
    38a6:	715a      	strb	r2, [r3, #5]
    38a8:	e7f7      	b.n	389a <usb_device_endpoint_set_halt+0x16>

000038aa <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    38aa:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    38ac:	230f      	movs	r3, #15
    38ae:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    38b0:	b249      	sxtb	r1, r1
    38b2:	2900      	cmp	r1, #0
    38b4:	db1d      	blt.n	38f2 <usb_device_endpoint_clear_halt+0x48>
    38b6:	0159      	lsls	r1, r3, #5
    38b8:	6802      	ldr	r2, [r0, #0]
    38ba:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    38bc:	2483      	movs	r4, #131	; 0x83
    38be:	0064      	lsls	r4, r4, #1
    38c0:	5d14      	ldrb	r4, [r2, r4]
    38c2:	06e4      	lsls	r4, r4, #27
    38c4:	d514      	bpl.n	38f0 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    38c6:	2510      	movs	r5, #16
    38c8:	2482      	movs	r4, #130	; 0x82
    38ca:	0064      	lsls	r4, r4, #1
    38cc:	5515      	strb	r5, [r2, r4]
    38ce:	6802      	ldr	r2, [r0, #0]
    38d0:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    38d2:	2108      	movs	r1, #8
    38d4:	31ff      	adds	r1, #255	; 0xff
    38d6:	5c51      	ldrb	r1, [r2, r1]
    38d8:	0689      	lsls	r1, r1, #26
    38da:	d509      	bpl.n	38f0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    38dc:	3ce4      	subs	r4, #228	; 0xe4
    38de:	2108      	movs	r1, #8
    38e0:	31ff      	adds	r1, #255	; 0xff
    38e2:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    38e4:	6802      	ldr	r2, [r0, #0]
    38e6:	3308      	adds	r3, #8
    38e8:	015b      	lsls	r3, r3, #5
    38ea:	18d3      	adds	r3, r2, r3
    38ec:	2201      	movs	r2, #1
    38ee:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    38f0:	bd30      	pop	{r4, r5, pc}
    38f2:	0159      	lsls	r1, r3, #5
    38f4:	6802      	ldr	r2, [r0, #0]
    38f6:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    38f8:	2483      	movs	r4, #131	; 0x83
    38fa:	0064      	lsls	r4, r4, #1
    38fc:	5d14      	ldrb	r4, [r2, r4]
    38fe:	06a4      	lsls	r4, r4, #26
    3900:	d5f6      	bpl.n	38f0 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3902:	2520      	movs	r5, #32
    3904:	2482      	movs	r4, #130	; 0x82
    3906:	0064      	lsls	r4, r4, #1
    3908:	5515      	strb	r5, [r2, r4]
    390a:	6802      	ldr	r2, [r0, #0]
    390c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    390e:	2108      	movs	r1, #8
    3910:	31ff      	adds	r1, #255	; 0xff
    3912:	5c51      	ldrb	r1, [r2, r1]
    3914:	0649      	lsls	r1, r1, #25
    3916:	d5eb      	bpl.n	38f0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3918:	3cc4      	subs	r4, #196	; 0xc4
    391a:	2108      	movs	r1, #8
    391c:	31ff      	adds	r1, #255	; 0xff
    391e:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3920:	6802      	ldr	r2, [r0, #0]
    3922:	3308      	adds	r3, #8
    3924:	015b      	lsls	r3, r3, #5
    3926:	18d3      	adds	r3, r2, r3
    3928:	2202      	movs	r2, #2
    392a:	711a      	strb	r2, [r3, #4]
    392c:	e7e0      	b.n	38f0 <usb_device_endpoint_clear_halt+0x46>
	...

00003930 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3930:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3932:	000c      	movs	r4, r1
    3934:	3408      	adds	r4, #8
    3936:	0164      	lsls	r4, r4, #5
    3938:	6805      	ldr	r5, [r0, #0]
    393a:	5d64      	ldrb	r4, [r4, r5]
    393c:	0664      	lsls	r4, r4, #25
    393e:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3940:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3942:	2c00      	cmp	r4, #0
    3944:	d101      	bne.n	394a <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3946:	0028      	movs	r0, r5
    3948:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    394a:	014c      	lsls	r4, r1, #5
    394c:	4d0b      	ldr	r5, [pc, #44]	; (397c <usb_device_endpoint_write_buffer_job+0x4c>)
    394e:	192d      	adds	r5, r5, r4
    3950:	002c      	movs	r4, r5
    3952:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3954:	696a      	ldr	r2, [r5, #20]
    3956:	4d0a      	ldr	r5, [pc, #40]	; (3980 <usb_device_endpoint_write_buffer_job+0x50>)
    3958:	402a      	ands	r2, r5
    395a:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    395c:	6962      	ldr	r2, [r4, #20]
    395e:	049b      	lsls	r3, r3, #18
    3960:	0c9b      	lsrs	r3, r3, #18
    3962:	0b92      	lsrs	r2, r2, #14
    3964:	0392      	lsls	r2, r2, #14
    3966:	4313      	orrs	r3, r2
    3968:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    396a:	6803      	ldr	r3, [r0, #0]
    396c:	3108      	adds	r1, #8
    396e:	0149      	lsls	r1, r1, #5
    3970:	1859      	adds	r1, r3, r1
    3972:	2380      	movs	r3, #128	; 0x80
    3974:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    3976:	2500      	movs	r5, #0
    3978:	e7e5      	b.n	3946 <usb_device_endpoint_write_buffer_job+0x16>
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	20000740 	.word	0x20000740
    3980:	f0003fff 	.word	0xf0003fff

00003984 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3984:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3986:	000c      	movs	r4, r1
    3988:	3408      	adds	r4, #8
    398a:	0164      	lsls	r4, r4, #5
    398c:	6805      	ldr	r5, [r0, #0]
    398e:	5d64      	ldrb	r4, [r4, r5]
    3990:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3992:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3994:	2c00      	cmp	r4, #0
    3996:	d101      	bne.n	399c <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3998:	0028      	movs	r0, r5
    399a:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    399c:	4c0b      	ldr	r4, [pc, #44]	; (39cc <usb_device_endpoint_read_buffer_job+0x48>)
    399e:	014d      	lsls	r5, r1, #5
    39a0:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    39a2:	1962      	adds	r2, r4, r5
    39a4:	6854      	ldr	r4, [r2, #4]
    39a6:	049b      	lsls	r3, r3, #18
    39a8:	091b      	lsrs	r3, r3, #4
    39aa:	4d09      	ldr	r5, [pc, #36]	; (39d0 <usb_device_endpoint_read_buffer_job+0x4c>)
    39ac:	402c      	ands	r4, r5
    39ae:	4323      	orrs	r3, r4
    39b0:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    39b2:	6853      	ldr	r3, [r2, #4]
    39b4:	0b9b      	lsrs	r3, r3, #14
    39b6:	039b      	lsls	r3, r3, #14
    39b8:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    39ba:	6803      	ldr	r3, [r0, #0]
    39bc:	3108      	adds	r1, #8
    39be:	0149      	lsls	r1, r1, #5
    39c0:	1859      	adds	r1, r3, r1
    39c2:	2340      	movs	r3, #64	; 0x40
    39c4:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    39c6:	2500      	movs	r5, #0
    39c8:	e7e6      	b.n	3998 <usb_device_endpoint_read_buffer_job+0x14>
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000740 	.word	0x20000740
    39d0:	f0003fff 	.word	0xf0003fff

000039d4 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    39d4:	4b09      	ldr	r3, [pc, #36]	; (39fc <usb_device_endpoint_setup_buffer_job+0x28>)
    39d6:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    39d8:	685a      	ldr	r2, [r3, #4]
    39da:	4909      	ldr	r1, [pc, #36]	; (3a00 <usb_device_endpoint_setup_buffer_job+0x2c>)
    39dc:	4011      	ands	r1, r2
    39de:	2280      	movs	r2, #128	; 0x80
    39e0:	0292      	lsls	r2, r2, #10
    39e2:	430a      	orrs	r2, r1
    39e4:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    39e6:	685a      	ldr	r2, [r3, #4]
    39e8:	0b92      	lsrs	r2, r2, #14
    39ea:	0392      	lsls	r2, r2, #14
    39ec:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    39ee:	6802      	ldr	r2, [r0, #0]
    39f0:	2140      	movs	r1, #64	; 0x40
    39f2:	2382      	movs	r3, #130	; 0x82
    39f4:	005b      	lsls	r3, r3, #1
    39f6:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    39f8:	2000      	movs	r0, #0
    39fa:	4770      	bx	lr
    39fc:	20000740 	.word	0x20000740
    3a00:	f0003fff 	.word	0xf0003fff

00003a04 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3a04:	6802      	ldr	r2, [r0, #0]
    3a06:	7813      	ldrb	r3, [r2, #0]
    3a08:	2102      	movs	r1, #2
    3a0a:	430b      	orrs	r3, r1
    3a0c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3a0e:	6802      	ldr	r2, [r0, #0]
    3a10:	7893      	ldrb	r3, [r2, #2]
    3a12:	2b02      	cmp	r3, #2
    3a14:	d0fc      	beq.n	3a10 <usb_enable+0xc>
}
    3a16:	4770      	bx	lr

00003a18 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	46de      	mov	lr, fp
    3a1c:	4657      	mov	r7, sl
    3a1e:	464e      	mov	r6, r9
    3a20:	4645      	mov	r5, r8
    3a22:	b5e0      	push	{r5, r6, r7, lr}
    3a24:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3a26:	4bc2      	ldr	r3, [pc, #776]	; (3d30 <USB_Handler+0x318>)
    3a28:	681f      	ldr	r7, [r3, #0]
    3a2a:	683d      	ldr	r5, [r7, #0]
    3a2c:	782b      	ldrb	r3, [r5, #0]
    3a2e:	09db      	lsrs	r3, r3, #7
    3a30:	d114      	bne.n	3a5c <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3a32:	8c2e      	ldrh	r6, [r5, #32]
    3a34:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3a36:	2e00      	cmp	r6, #0
    3a38:	d000      	beq.n	3a3c <USB_Handler+0x24>
    3a3a:	e1a9      	b.n	3d90 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3a3c:	8bae      	ldrh	r6, [r5, #28]
    3a3e:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3a40:	23ab      	movs	r3, #171	; 0xab
    3a42:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3a44:	5afb      	ldrh	r3, [r7, r3]
    3a46:	22aa      	movs	r2, #170	; 0xaa
    3a48:	0052      	lsls	r2, r2, #1
    3a4a:	5abd      	ldrh	r5, [r7, r2]
    3a4c:	401d      	ands	r5, r3
    3a4e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3a50:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3a52:	4fb8      	ldr	r7, [pc, #736]	; (3d34 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3a54:	4bb6      	ldr	r3, [pc, #728]	; (3d30 <USB_Handler+0x318>)
    3a56:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3a58:	4698      	mov	r8, r3
    3a5a:	e184      	b.n	3d66 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3a5c:	8c2b      	ldrh	r3, [r5, #32]
    3a5e:	b29b      	uxth	r3, r3
    3a60:	2b00      	cmp	r3, #0
    3a62:	d100      	bne.n	3a66 <USB_Handler+0x4e>
    3a64:	e0de      	b.n	3c24 <USB_Handler+0x20c>
    3a66:	8c28      	ldrh	r0, [r5, #32]
    3a68:	b280      	uxth	r0, r0
    3a6a:	4bb3      	ldr	r3, [pc, #716]	; (3d38 <USB_Handler+0x320>)
    3a6c:	4798      	blx	r3
    3a6e:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3a70:	281f      	cmp	r0, #31
    3a72:	d900      	bls.n	3a76 <USB_Handler+0x5e>
    3a74:	e0d6      	b.n	3c24 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3a76:	0003      	movs	r3, r0
    3a78:	3308      	adds	r3, #8
    3a7a:	015b      	lsls	r3, r3, #5
    3a7c:	18ed      	adds	r5, r5, r3
    3a7e:	79ed      	ldrb	r5, [r5, #7]
    3a80:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3a82:	07ab      	lsls	r3, r5, #30
    3a84:	d041      	beq.n	3b0a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a86:	4aad      	ldr	r2, [pc, #692]	; (3d3c <USB_Handler+0x324>)
    3a88:	2301      	movs	r3, #1
    3a8a:	4083      	lsls	r3, r0
    3a8c:	6811      	ldr	r1, [r2, #0]
    3a8e:	4399      	bics	r1, r3
    3a90:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a92:	0003      	movs	r3, r0
    3a94:	3308      	adds	r3, #8
    3a96:	015b      	lsls	r3, r3, #5
    3a98:	683a      	ldr	r2, [r7, #0]
    3a9a:	4694      	mov	ip, r2
    3a9c:	4463      	add	r3, ip
    3a9e:	2203      	movs	r2, #3
    3aa0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3aa2:	183b      	adds	r3, r7, r0
    3aa4:	33ae      	adds	r3, #174	; 0xae
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	07db      	lsls	r3, r3, #31
    3aaa:	d52e      	bpl.n	3b0a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3aac:	4ba4      	ldr	r3, [pc, #656]	; (3d40 <USB_Handler+0x328>)
    3aae:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3ab0:	683a      	ldr	r2, [r7, #0]
    3ab2:	0003      	movs	r3, r0
    3ab4:	3308      	adds	r3, #8
    3ab6:	015b      	lsls	r3, r3, #5
    3ab8:	5c9b      	ldrb	r3, [r3, r2]
    3aba:	079b      	lsls	r3, r3, #30
    3abc:	0f9b      	lsrs	r3, r3, #30
    3abe:	2b01      	cmp	r3, #1
    3ac0:	d100      	bne.n	3ac4 <USB_Handler+0xac>
    3ac2:	e081      	b.n	3bc8 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3ac4:	0142      	lsls	r2, r0, #5
    3ac6:	4b9f      	ldr	r3, [pc, #636]	; (3d44 <USB_Handler+0x32c>)
    3ac8:	189b      	adds	r3, r3, r2
    3aca:	685a      	ldr	r2, [r3, #4]
    3acc:	0112      	lsls	r2, r2, #4
    3ace:	0c92      	lsrs	r2, r2, #18
    3ad0:	b290      	uxth	r0, r2
    3ad2:	499b      	ldr	r1, [pc, #620]	; (3d40 <USB_Handler+0x328>)
    3ad4:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3ad6:	685a      	ldr	r2, [r3, #4]
    3ad8:	0492      	lsls	r2, r2, #18
    3ada:	0c92      	lsrs	r2, r2, #18
    3adc:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3ade:	685a      	ldr	r2, [r3, #4]
    3ae0:	4999      	ldr	r1, [pc, #612]	; (3d48 <USB_Handler+0x330>)
    3ae2:	400a      	ands	r2, r1
    3ae4:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d107      	bne.n	3afa <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3aea:	0162      	lsls	r2, r4, #5
    3aec:	4b95      	ldr	r3, [pc, #596]	; (3d44 <USB_Handler+0x32c>)
    3aee:	189b      	adds	r3, r3, r2
    3af0:	685b      	ldr	r3, [r3, #4]
    3af2:	049b      	lsls	r3, r3, #18
    3af4:	0c9b      	lsrs	r3, r3, #18
    3af6:	4a92      	ldr	r2, [pc, #584]	; (3d40 <USB_Handler+0x328>)
    3af8:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3afa:	4b8d      	ldr	r3, [pc, #564]	; (3d30 <USB_Handler+0x318>)
    3afc:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3afe:	1ca3      	adds	r3, r4, #2
    3b00:	011b      	lsls	r3, r3, #4
    3b02:	18c3      	adds	r3, r0, r3
    3b04:	685b      	ldr	r3, [r3, #4]
    3b06:	498e      	ldr	r1, [pc, #568]	; (3d40 <USB_Handler+0x328>)
    3b08:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3b0a:	076b      	lsls	r3, r5, #29
    3b0c:	d50e      	bpl.n	3b2c <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b0e:	4a8b      	ldr	r2, [pc, #556]	; (3d3c <USB_Handler+0x324>)
    3b10:	2301      	movs	r3, #1
    3b12:	40a3      	lsls	r3, r4
    3b14:	6811      	ldr	r1, [r2, #0]
    3b16:	4399      	bics	r1, r3
    3b18:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b1a:	4b85      	ldr	r3, [pc, #532]	; (3d30 <USB_Handler+0x318>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	681b      	ldr	r3, [r3, #0]
    3b20:	0022      	movs	r2, r4
    3b22:	3208      	adds	r2, #8
    3b24:	0152      	lsls	r2, r2, #5
    3b26:	189b      	adds	r3, r3, r2
    3b28:	2204      	movs	r2, #4
    3b2a:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3b2c:	072b      	lsls	r3, r5, #28
    3b2e:	d514      	bpl.n	3b5a <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b30:	4a82      	ldr	r2, [pc, #520]	; (3d3c <USB_Handler+0x324>)
    3b32:	2301      	movs	r3, #1
    3b34:	40a3      	lsls	r3, r4
    3b36:	6811      	ldr	r1, [r2, #0]
    3b38:	4399      	bics	r1, r3
    3b3a:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b3c:	4b7c      	ldr	r3, [pc, #496]	; (3d30 <USB_Handler+0x318>)
    3b3e:	6818      	ldr	r0, [r3, #0]
    3b40:	0023      	movs	r3, r4
    3b42:	3308      	adds	r3, #8
    3b44:	015b      	lsls	r3, r3, #5
    3b46:	6802      	ldr	r2, [r0, #0]
    3b48:	4694      	mov	ip, r2
    3b4a:	4463      	add	r3, ip
    3b4c:	2208      	movs	r2, #8
    3b4e:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3b50:	1903      	adds	r3, r0, r4
    3b52:	33ae      	adds	r3, #174	; 0xae
    3b54:	781b      	ldrb	r3, [r3, #0]
    3b56:	079b      	lsls	r3, r3, #30
    3b58:	d447      	bmi.n	3bea <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3b5a:	06eb      	lsls	r3, r5, #27
    3b5c:	d514      	bpl.n	3b88 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b5e:	4a77      	ldr	r2, [pc, #476]	; (3d3c <USB_Handler+0x324>)
    3b60:	2301      	movs	r3, #1
    3b62:	40a3      	lsls	r3, r4
    3b64:	6811      	ldr	r1, [r2, #0]
    3b66:	4399      	bics	r1, r3
    3b68:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b6a:	4b71      	ldr	r3, [pc, #452]	; (3d30 <USB_Handler+0x318>)
    3b6c:	6818      	ldr	r0, [r3, #0]
    3b6e:	0023      	movs	r3, r4
    3b70:	3308      	adds	r3, #8
    3b72:	015b      	lsls	r3, r3, #5
    3b74:	6802      	ldr	r2, [r0, #0]
    3b76:	4694      	mov	ip, r2
    3b78:	4463      	add	r3, ip
    3b7a:	2210      	movs	r2, #16
    3b7c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3b7e:	1903      	adds	r3, r0, r4
    3b80:	33ae      	adds	r3, #174	; 0xae
    3b82:	781b      	ldrb	r3, [r3, #0]
    3b84:	075b      	lsls	r3, r3, #29
    3b86:	d43e      	bmi.n	3c06 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3b88:	06ab      	lsls	r3, r5, #26
    3b8a:	d400      	bmi.n	3b8e <USB_Handler+0x176>
    3b8c:	e0b0      	b.n	3cf0 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3b8e:	4a6b      	ldr	r2, [pc, #428]	; (3d3c <USB_Handler+0x324>)
    3b90:	2301      	movs	r3, #1
    3b92:	40a3      	lsls	r3, r4
    3b94:	6811      	ldr	r1, [r2, #0]
    3b96:	4399      	bics	r1, r3
    3b98:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3b9a:	4b65      	ldr	r3, [pc, #404]	; (3d30 <USB_Handler+0x318>)
    3b9c:	6818      	ldr	r0, [r3, #0]
    3b9e:	0023      	movs	r3, r4
    3ba0:	3308      	adds	r3, #8
    3ba2:	015b      	lsls	r3, r3, #5
    3ba4:	6802      	ldr	r2, [r0, #0]
    3ba6:	4694      	mov	ip, r2
    3ba8:	4463      	add	r3, ip
    3baa:	2220      	movs	r2, #32
    3bac:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3bae:	1903      	adds	r3, r0, r4
    3bb0:	33ae      	adds	r3, #174	; 0xae
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	071b      	lsls	r3, r3, #28
    3bb6:	d400      	bmi.n	3bba <USB_Handler+0x1a2>
    3bb8:	e09a      	b.n	3cf0 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    3bba:	4961      	ldr	r1, [pc, #388]	; (3d40 <USB_Handler+0x328>)
    3bbc:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3bbe:	0124      	lsls	r4, r4, #4
    3bc0:	1904      	adds	r4, r0, r4
    3bc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3bc4:	4798      	blx	r3
    3bc6:	e093      	b.n	3cf0 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3bc8:	0142      	lsls	r2, r0, #5
    3bca:	4b5e      	ldr	r3, [pc, #376]	; (3d44 <USB_Handler+0x32c>)
    3bcc:	189b      	adds	r3, r3, r2
    3bce:	685a      	ldr	r2, [r3, #4]
    3bd0:	0492      	lsls	r2, r2, #18
    3bd2:	0c92      	lsrs	r2, r2, #18
    3bd4:	495a      	ldr	r1, [pc, #360]	; (3d40 <USB_Handler+0x328>)
    3bd6:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3bd8:	685a      	ldr	r2, [r3, #4]
    3bda:	0112      	lsls	r2, r2, #4
    3bdc:	0c92      	lsrs	r2, r2, #18
    3bde:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3be0:	685a      	ldr	r2, [r3, #4]
    3be2:	0b92      	lsrs	r2, r2, #14
    3be4:	0392      	lsls	r2, r2, #14
    3be6:	605a      	str	r2, [r3, #4]
    3be8:	e787      	b.n	3afa <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    3bea:	4955      	ldr	r1, [pc, #340]	; (3d40 <USB_Handler+0x328>)
    3bec:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3bee:	0162      	lsls	r2, r4, #5
    3bf0:	4b54      	ldr	r3, [pc, #336]	; (3d44 <USB_Handler+0x32c>)
    3bf2:	189b      	adds	r3, r3, r2
    3bf4:	89db      	ldrh	r3, [r3, #14]
    3bf6:	221f      	movs	r2, #31
    3bf8:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3bfa:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3bfc:	0123      	lsls	r3, r4, #4
    3bfe:	18c3      	adds	r3, r0, r3
    3c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c02:	4798      	blx	r3
    3c04:	e7a9      	b.n	3b5a <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    3c06:	494e      	ldr	r1, [pc, #312]	; (3d40 <USB_Handler+0x328>)
    3c08:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3c0a:	0162      	lsls	r2, r4, #5
    3c0c:	4b4d      	ldr	r3, [pc, #308]	; (3d44 <USB_Handler+0x32c>)
    3c0e:	189b      	adds	r3, r3, r2
    3c10:	685b      	ldr	r3, [r3, #4]
    3c12:	011b      	lsls	r3, r3, #4
    3c14:	0c9b      	lsrs	r3, r3, #18
    3c16:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3c18:	0123      	lsls	r3, r4, #4
    3c1a:	18c3      	adds	r3, r0, r3
    3c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c1e:	2100      	movs	r1, #0
    3c20:	4798      	blx	r3
    3c22:	e7b1      	b.n	3b88 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3c24:	8bac      	ldrh	r4, [r5, #28]
    3c26:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3c28:	0763      	lsls	r3, r4, #29
    3c2a:	d505      	bpl.n	3c38 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3c2c:	2304      	movs	r3, #4
    3c2e:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3c30:	33a1      	adds	r3, #161	; 0xa1
    3c32:	5cfb      	ldrb	r3, [r7, r3]
    3c34:	07db      	lsls	r3, r3, #31
    3c36:	d462      	bmi.n	3cfe <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    3c38:	0723      	lsls	r3, r4, #28
    3c3a:	d50b      	bpl.n	3c54 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    3c3c:	2200      	movs	r2, #0
    3c3e:	4b3f      	ldr	r3, [pc, #252]	; (3d3c <USB_Handler+0x324>)
    3c40:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3c42:	4b3b      	ldr	r3, [pc, #236]	; (3d30 <USB_Handler+0x318>)
    3c44:	6818      	ldr	r0, [r3, #0]
    3c46:	2308      	movs	r3, #8
    3c48:	6802      	ldr	r2, [r0, #0]
    3c4a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3c4c:	339d      	adds	r3, #157	; 0x9d
    3c4e:	5cc3      	ldrb	r3, [r0, r3]
    3c50:	079b      	lsls	r3, r3, #30
    3c52:	d458      	bmi.n	3d06 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3c54:	0663      	lsls	r3, r4, #25
    3c56:	d508      	bpl.n	3c6a <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3c58:	4b35      	ldr	r3, [pc, #212]	; (3d30 <USB_Handler+0x318>)
    3c5a:	6818      	ldr	r0, [r3, #0]
    3c5c:	2340      	movs	r3, #64	; 0x40
    3c5e:	6802      	ldr	r2, [r0, #0]
    3c60:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3c62:	3365      	adds	r3, #101	; 0x65
    3c64:	5cc3      	ldrb	r3, [r0, r3]
    3c66:	06db      	lsls	r3, r3, #27
    3c68:	d450      	bmi.n	3d0c <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3c6a:	06a3      	lsls	r3, r4, #26
    3c6c:	d508      	bpl.n	3c80 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3c6e:	4b30      	ldr	r3, [pc, #192]	; (3d30 <USB_Handler+0x318>)
    3c70:	6818      	ldr	r0, [r3, #0]
    3c72:	2320      	movs	r3, #32
    3c74:	6802      	ldr	r2, [r0, #0]
    3c76:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3c78:	3385      	adds	r3, #133	; 0x85
    3c7a:	5cc3      	ldrb	r3, [r0, r3]
    3c7c:	071b      	lsls	r3, r3, #28
    3c7e:	d448      	bmi.n	3d12 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3c80:	06e3      	lsls	r3, r4, #27
    3c82:	d508      	bpl.n	3c96 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3c84:	4b2a      	ldr	r3, [pc, #168]	; (3d30 <USB_Handler+0x318>)
    3c86:	6818      	ldr	r0, [r3, #0]
    3c88:	2310      	movs	r3, #16
    3c8a:	6802      	ldr	r2, [r0, #0]
    3c8c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3c8e:	3395      	adds	r3, #149	; 0x95
    3c90:	5cc3      	ldrb	r3, [r0, r3]
    3c92:	075b      	lsls	r3, r3, #29
    3c94:	d440      	bmi.n	3d18 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3c96:	0623      	lsls	r3, r4, #24
    3c98:	d50b      	bpl.n	3cb2 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    3c9a:	2200      	movs	r2, #0
    3c9c:	4b27      	ldr	r3, [pc, #156]	; (3d3c <USB_Handler+0x324>)
    3c9e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3ca0:	4b23      	ldr	r3, [pc, #140]	; (3d30 <USB_Handler+0x318>)
    3ca2:	6818      	ldr	r0, [r3, #0]
    3ca4:	2380      	movs	r3, #128	; 0x80
    3ca6:	6802      	ldr	r2, [r0, #0]
    3ca8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3caa:	3325      	adds	r3, #37	; 0x25
    3cac:	5cc3      	ldrb	r3, [r0, r3]
    3cae:	069b      	lsls	r3, r3, #26
    3cb0:	d435      	bmi.n	3d1e <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3cb2:	05e3      	lsls	r3, r4, #23
    3cb4:	d50c      	bpl.n	3cd0 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    3cb6:	2200      	movs	r2, #0
    3cb8:	4b20      	ldr	r3, [pc, #128]	; (3d3c <USB_Handler+0x324>)
    3cba:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3cbc:	4b1c      	ldr	r3, [pc, #112]	; (3d30 <USB_Handler+0x318>)
    3cbe:	6818      	ldr	r0, [r3, #0]
    3cc0:	2380      	movs	r3, #128	; 0x80
    3cc2:	005b      	lsls	r3, r3, #1
    3cc4:	6802      	ldr	r2, [r0, #0]
    3cc6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3cc8:	3b5b      	subs	r3, #91	; 0x5b
    3cca:	5cc3      	ldrb	r3, [r0, r3]
    3ccc:	065b      	lsls	r3, r3, #25
    3cce:	d429      	bmi.n	3d24 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3cd0:	05a3      	lsls	r3, r4, #22
    3cd2:	d50d      	bpl.n	3cf0 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    3cd4:	2200      	movs	r2, #0
    3cd6:	4b19      	ldr	r3, [pc, #100]	; (3d3c <USB_Handler+0x324>)
    3cd8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3cda:	4b15      	ldr	r3, [pc, #84]	; (3d30 <USB_Handler+0x318>)
    3cdc:	6818      	ldr	r0, [r3, #0]
    3cde:	2380      	movs	r3, #128	; 0x80
    3ce0:	009b      	lsls	r3, r3, #2
    3ce2:	6802      	ldr	r2, [r0, #0]
    3ce4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3ce6:	3b5c      	subs	r3, #92	; 0x5c
    3ce8:	3bff      	subs	r3, #255	; 0xff
    3cea:	5cc3      	ldrb	r3, [r0, r3]
    3cec:	2b7f      	cmp	r3, #127	; 0x7f
    3cee:	d81c      	bhi.n	3d2a <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3cf0:	b003      	add	sp, #12
    3cf2:	bc3c      	pop	{r2, r3, r4, r5}
    3cf4:	4690      	mov	r8, r2
    3cf6:	4699      	mov	r9, r3
    3cf8:	46a2      	mov	sl, r4
    3cfa:	46ab      	mov	fp, r5
    3cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	0038      	movs	r0, r7
    3d02:	4798      	blx	r3
    3d04:	e798      	b.n	3c38 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3d06:	6883      	ldr	r3, [r0, #8]
    3d08:	4798      	blx	r3
    3d0a:	e7a3      	b.n	3c54 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3d0c:	6943      	ldr	r3, [r0, #20]
    3d0e:	4798      	blx	r3
    3d10:	e7ab      	b.n	3c6a <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3d12:	6903      	ldr	r3, [r0, #16]
    3d14:	4798      	blx	r3
    3d16:	e7b3      	b.n	3c80 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3d18:	68c3      	ldr	r3, [r0, #12]
    3d1a:	4798      	blx	r3
    3d1c:	e7bb      	b.n	3c96 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3d1e:	6983      	ldr	r3, [r0, #24]
    3d20:	4798      	blx	r3
    3d22:	e7c6      	b.n	3cb2 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3d24:	69c3      	ldr	r3, [r0, #28]
    3d26:	4798      	blx	r3
    3d28:	e7d2      	b.n	3cd0 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3d2a:	6a03      	ldr	r3, [r0, #32]
    3d2c:	4798      	blx	r3
    3d2e:	e7df      	b.n	3cf0 <USB_Handler+0x2d8>
    3d30:	20000388 	.word	0x20000388
    3d34:	00006110 	.word	0x00006110
    3d38:	00004bf5 	.word	0x00004bf5
    3d3c:	20000398 	.word	0x20000398
    3d40:	2000039c 	.word	0x2000039c
    3d44:	20000740 	.word	0x20000740
    3d48:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3d4c:	0023      	movs	r3, r4
    3d4e:	332e      	adds	r3, #46	; 0x2e
    3d50:	009b      	lsls	r3, r3, #2
    3d52:	4642      	mov	r2, r8
    3d54:	6812      	ldr	r2, [r2, #0]
    3d56:	589b      	ldr	r3, [r3, r2]
    3d58:	499e      	ldr	r1, [pc, #632]	; (3fd4 <USB_Handler+0x5bc>)
    3d5a:	4642      	mov	r2, r8
    3d5c:	6810      	ldr	r0, [r2, #0]
    3d5e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3d60:	3401      	adds	r4, #1
    3d62:	2c07      	cmp	r4, #7
    3d64:	d0c4      	beq.n	3cf0 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    3d66:	0063      	lsls	r3, r4, #1
    3d68:	5bdb      	ldrh	r3, [r3, r7]
    3d6a:	4233      	tst	r3, r6
    3d6c:	d003      	beq.n	3d76 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3d6e:	464a      	mov	r2, r9
    3d70:	6812      	ldr	r2, [r2, #0]
    3d72:	6812      	ldr	r2, [r2, #0]
    3d74:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3d76:	422b      	tst	r3, r5
    3d78:	d0f2      	beq.n	3d60 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3d7a:	2c06      	cmp	r4, #6
    3d7c:	d1e6      	bne.n	3d4c <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3d7e:	4b96      	ldr	r3, [pc, #600]	; (3fd8 <USB_Handler+0x5c0>)
    3d80:	891b      	ldrh	r3, [r3, #8]
    3d82:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3d84:	2280      	movs	r2, #128	; 0x80
    3d86:	0052      	lsls	r2, r2, #1
    3d88:	4013      	ands	r3, r2
    3d8a:	4a92      	ldr	r2, [pc, #584]	; (3fd4 <USB_Handler+0x5bc>)
    3d8c:	6013      	str	r3, [r2, #0]
    3d8e:	e7dd      	b.n	3d4c <USB_Handler+0x334>
    3d90:	003c      	movs	r4, r7
    3d92:	3459      	adds	r4, #89	; 0x59
    3d94:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3d96:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3d98:	2201      	movs	r2, #1
    3d9a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3d9c:	325f      	adds	r2, #95	; 0x5f
    3d9e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3da0:	3a50      	subs	r2, #80	; 0x50
    3da2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3da4:	3a0d      	subs	r2, #13
    3da6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3da8:	46b8      	mov	r8, r7
    3daa:	002f      	movs	r7, r5
    3dac:	e0b9      	b.n	3f22 <USB_Handler+0x50a>
    3dae:	002a      	movs	r2, r5
    3db0:	003d      	movs	r5, r7
    3db2:	4647      	mov	r7, r8
    3db4:	4690      	mov	r8, r2
    3db6:	015b      	lsls	r3, r3, #5
    3db8:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3dba:	2308      	movs	r3, #8
    3dbc:	33ff      	adds	r3, #255	; 0xff
    3dbe:	5ceb      	ldrb	r3, [r5, r3]
    3dc0:	065b      	lsls	r3, r3, #25
    3dc2:	d516      	bpl.n	3df2 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3dc4:	2240      	movs	r2, #64	; 0x40
    3dc6:	2308      	movs	r3, #8
    3dc8:	33ff      	adds	r3, #255	; 0xff
    3dca:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3dcc:	3b88      	subs	r3, #136	; 0x88
    3dce:	3bff      	subs	r3, #255	; 0xff
    3dd0:	4642      	mov	r2, r8
    3dd2:	4313      	orrs	r3, r2
    3dd4:	4a81      	ldr	r2, [pc, #516]	; (3fdc <USB_Handler+0x5c4>)
    3dd6:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3dd8:	2360      	movs	r3, #96	; 0x60
    3dda:	420b      	tst	r3, r1
    3ddc:	d100      	bne.n	3de0 <USB_Handler+0x3c8>
    3dde:	e787      	b.n	3cf0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	011b      	lsls	r3, r3, #4
    3de4:	18fb      	adds	r3, r7, r3
    3de6:	33e0      	adds	r3, #224	; 0xe0
    3de8:	681b      	ldr	r3, [r3, #0]
    3dea:	497c      	ldr	r1, [pc, #496]	; (3fdc <USB_Handler+0x5c4>)
    3dec:	0038      	movs	r0, r7
    3dee:	4798      	blx	r3
    3df0:	e77e      	b.n	3cf0 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3df2:	2308      	movs	r3, #8
    3df4:	33ff      	adds	r3, #255	; 0xff
    3df6:	5ceb      	ldrb	r3, [r5, r3]
    3df8:	069b      	lsls	r3, r3, #26
    3dfa:	d5ed      	bpl.n	3dd8 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3dfc:	2220      	movs	r2, #32
    3dfe:	2308      	movs	r3, #8
    3e00:	33ff      	adds	r3, #255	; 0xff
    3e02:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3e04:	4b75      	ldr	r3, [pc, #468]	; (3fdc <USB_Handler+0x5c4>)
    3e06:	4642      	mov	r2, r8
    3e08:	719a      	strb	r2, [r3, #6]
    3e0a:	e7e5      	b.n	3dd8 <USB_Handler+0x3c0>
    3e0c:	003d      	movs	r5, r7
    3e0e:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3e10:	9a01      	ldr	r2, [sp, #4]
    3e12:	0013      	movs	r3, r2
    3e14:	3308      	adds	r3, #8
    3e16:	015b      	lsls	r3, r3, #5
    3e18:	18ed      	adds	r5, r5, r3
    3e1a:	2310      	movs	r3, #16
    3e1c:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3e1e:	18bb      	adds	r3, r7, r2
    3e20:	3361      	adds	r3, #97	; 0x61
    3e22:	33ff      	adds	r3, #255	; 0xff
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	06db      	lsls	r3, r3, #27
    3e28:	d400      	bmi.n	3e2c <USB_Handler+0x414>
    3e2a:	e761      	b.n	3cf0 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3e2c:	0010      	movs	r0, r2
    3e2e:	0152      	lsls	r2, r2, #5
    3e30:	4b69      	ldr	r3, [pc, #420]	; (3fd8 <USB_Handler+0x5c0>)
    3e32:	189b      	adds	r3, r3, r2
    3e34:	685b      	ldr	r3, [r3, #4]
    3e36:	049b      	lsls	r3, r3, #18
    3e38:	0c9b      	lsrs	r3, r3, #18
    3e3a:	4968      	ldr	r1, [pc, #416]	; (3fdc <USB_Handler+0x5c4>)
    3e3c:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3e3e:	0103      	lsls	r3, r0, #4
    3e40:	18fb      	adds	r3, r7, r3
    3e42:	33dc      	adds	r3, #220	; 0xdc
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	4640      	mov	r0, r8
    3e48:	4798      	blx	r3
    3e4a:	e751      	b.n	3cf0 <USB_Handler+0x2d8>
    3e4c:	002a      	movs	r2, r5
    3e4e:	003d      	movs	r5, r7
    3e50:	4647      	mov	r7, r8
    3e52:	4690      	mov	r8, r2
    3e54:	015b      	lsls	r3, r3, #5
    3e56:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3e58:	2308      	movs	r3, #8
    3e5a:	33ff      	adds	r3, #255	; 0xff
    3e5c:	5ceb      	ldrb	r3, [r5, r3]
    3e5e:	079b      	lsls	r3, r3, #30
    3e60:	d51e      	bpl.n	3ea0 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3e62:	2202      	movs	r2, #2
    3e64:	2308      	movs	r3, #8
    3e66:	33ff      	adds	r3, #255	; 0xff
    3e68:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3e6a:	485c      	ldr	r0, [pc, #368]	; (3fdc <USB_Handler+0x5c4>)
    3e6c:	3b88      	subs	r3, #136	; 0x88
    3e6e:	3bff      	subs	r3, #255	; 0xff
    3e70:	4642      	mov	r2, r8
    3e72:	4313      	orrs	r3, r2
    3e74:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3e76:	9b01      	ldr	r3, [sp, #4]
    3e78:	015a      	lsls	r2, r3, #5
    3e7a:	4b57      	ldr	r3, [pc, #348]	; (3fd8 <USB_Handler+0x5c0>)
    3e7c:	189b      	adds	r3, r3, r2
    3e7e:	3310      	adds	r3, #16
    3e80:	685b      	ldr	r3, [r3, #4]
    3e82:	049b      	lsls	r3, r3, #18
    3e84:	0c9b      	lsrs	r3, r3, #18
    3e86:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3e88:	078b      	lsls	r3, r1, #30
    3e8a:	d100      	bne.n	3e8e <USB_Handler+0x476>
    3e8c:	e730      	b.n	3cf0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3e8e:	9b01      	ldr	r3, [sp, #4]
    3e90:	330d      	adds	r3, #13
    3e92:	011b      	lsls	r3, r3, #4
    3e94:	18fb      	adds	r3, r7, r3
    3e96:	685b      	ldr	r3, [r3, #4]
    3e98:	4950      	ldr	r1, [pc, #320]	; (3fdc <USB_Handler+0x5c4>)
    3e9a:	0038      	movs	r0, r7
    3e9c:	4798      	blx	r3
    3e9e:	e727      	b.n	3cf0 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3ea0:	2308      	movs	r3, #8
    3ea2:	33ff      	adds	r3, #255	; 0xff
    3ea4:	5ceb      	ldrb	r3, [r5, r3]
    3ea6:	07db      	lsls	r3, r3, #31
    3ea8:	d5ee      	bpl.n	3e88 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3eaa:	2201      	movs	r2, #1
    3eac:	2308      	movs	r3, #8
    3eae:	33ff      	adds	r3, #255	; 0xff
    3eb0:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3eb2:	484a      	ldr	r0, [pc, #296]	; (3fdc <USB_Handler+0x5c4>)
    3eb4:	4643      	mov	r3, r8
    3eb6:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3eb8:	9b01      	ldr	r3, [sp, #4]
    3eba:	015b      	lsls	r3, r3, #5
    3ebc:	4a46      	ldr	r2, [pc, #280]	; (3fd8 <USB_Handler+0x5c0>)
    3ebe:	18d2      	adds	r2, r2, r3
    3ec0:	6853      	ldr	r3, [r2, #4]
    3ec2:	049b      	lsls	r3, r3, #18
    3ec4:	0c9b      	lsrs	r3, r3, #18
    3ec6:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3ec8:	6853      	ldr	r3, [r2, #4]
    3eca:	011b      	lsls	r3, r3, #4
    3ecc:	0c9b      	lsrs	r3, r3, #18
    3ece:	8083      	strh	r3, [r0, #4]
    3ed0:	e7da      	b.n	3e88 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3ed2:	2208      	movs	r2, #8
    3ed4:	32ff      	adds	r2, #255	; 0xff
    3ed6:	5c9a      	ldrb	r2, [r3, r2]
    3ed8:	0752      	lsls	r2, r2, #29
    3eda:	d56e      	bpl.n	3fba <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3edc:	2004      	movs	r0, #4
    3ede:	2208      	movs	r2, #8
    3ee0:	32ff      	adds	r2, #255	; 0xff
    3ee2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3ee4:	9801      	ldr	r0, [sp, #4]
    3ee6:	0142      	lsls	r2, r0, #5
    3ee8:	4b3b      	ldr	r3, [pc, #236]	; (3fd8 <USB_Handler+0x5c0>)
    3eea:	189b      	adds	r3, r3, r2
    3eec:	7a9b      	ldrb	r3, [r3, #10]
    3eee:	079b      	lsls	r3, r3, #30
    3ef0:	d505      	bpl.n	3efe <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3ef2:	4b39      	ldr	r3, [pc, #228]	; (3fd8 <USB_Handler+0x5c0>)
    3ef4:	189b      	adds	r3, r3, r2
    3ef6:	7a9a      	ldrb	r2, [r3, #10]
    3ef8:	2002      	movs	r0, #2
    3efa:	4382      	bics	r2, r0
    3efc:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3efe:	4b37      	ldr	r3, [pc, #220]	; (3fdc <USB_Handler+0x5c4>)
    3f00:	4642      	mov	r2, r8
    3f02:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3f04:	9b01      	ldr	r3, [sp, #4]
    3f06:	3308      	adds	r3, #8
    3f08:	015b      	lsls	r3, r3, #5
    3f0a:	683a      	ldr	r2, [r7, #0]
    3f0c:	4694      	mov	ip, r2
    3f0e:	4463      	add	r3, ip
    3f10:	79db      	ldrb	r3, [r3, #7]
    3f12:	07db      	lsls	r3, r3, #31
    3f14:	d551      	bpl.n	3fba <USB_Handler+0x5a2>
    3f16:	e6eb      	b.n	3cf0 <USB_Handler+0x2d8>
    3f18:	3301      	adds	r3, #1
    3f1a:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3f1c:	2b08      	cmp	r3, #8
    3f1e:	d100      	bne.n	3f22 <USB_Handler+0x50a>
    3f20:	e6e6      	b.n	3cf0 <USB_Handler+0x2d8>
    3f22:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3f24:	9301      	str	r3, [sp, #4]
    3f26:	0032      	movs	r2, r6
    3f28:	411a      	asrs	r2, r3
    3f2a:	4661      	mov	r1, ip
    3f2c:	4211      	tst	r1, r2
    3f2e:	d0f3      	beq.n	3f18 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3f30:	001a      	movs	r2, r3
    3f32:	3208      	adds	r2, #8
    3f34:	0152      	lsls	r2, r2, #5
    3f36:	18ba      	adds	r2, r7, r2
    3f38:	79d2      	ldrb	r2, [r2, #7]
    3f3a:	b2d2      	uxtb	r2, r2
    3f3c:	7a21      	ldrb	r1, [r4, #8]
    3f3e:	4011      	ands	r1, r2
    3f40:	7820      	ldrb	r0, [r4, #0]
    3f42:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3f44:	4648      	mov	r0, r9
    3f46:	4210      	tst	r0, r2
    3f48:	d000      	beq.n	3f4c <USB_Handler+0x534>
    3f4a:	e730      	b.n	3dae <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3f4c:	4650      	mov	r0, sl
    3f4e:	4210      	tst	r0, r2
    3f50:	d000      	beq.n	3f54 <USB_Handler+0x53c>
    3f52:	e75b      	b.n	3e0c <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3f54:	4658      	mov	r0, fp
    3f56:	4210      	tst	r0, r2
    3f58:	d000      	beq.n	3f5c <USB_Handler+0x544>
    3f5a:	e777      	b.n	3e4c <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3f5c:	200c      	movs	r0, #12
    3f5e:	4210      	tst	r0, r2
    3f60:	d0da      	beq.n	3f18 <USB_Handler+0x500>
    3f62:	002a      	movs	r2, r5
    3f64:	003d      	movs	r5, r7
    3f66:	4647      	mov	r7, r8
    3f68:	4690      	mov	r8, r2
    3f6a:	015b      	lsls	r3, r3, #5
    3f6c:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3f6e:	2208      	movs	r2, #8
    3f70:	32ff      	adds	r2, #255	; 0xff
    3f72:	5c9a      	ldrb	r2, [r3, r2]
    3f74:	0712      	lsls	r2, r2, #28
    3f76:	d5ac      	bpl.n	3ed2 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3f78:	3804      	subs	r0, #4
    3f7a:	2208      	movs	r2, #8
    3f7c:	32ff      	adds	r2, #255	; 0xff
    3f7e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3f80:	9801      	ldr	r0, [sp, #4]
    3f82:	0142      	lsls	r2, r0, #5
    3f84:	4b14      	ldr	r3, [pc, #80]	; (3fd8 <USB_Handler+0x5c0>)
    3f86:	189b      	adds	r3, r3, r2
    3f88:	7e9b      	ldrb	r3, [r3, #26]
    3f8a:	079b      	lsls	r3, r3, #30
    3f8c:	d505      	bpl.n	3f9a <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3f8e:	4b12      	ldr	r3, [pc, #72]	; (3fd8 <USB_Handler+0x5c0>)
    3f90:	189b      	adds	r3, r3, r2
    3f92:	7e9a      	ldrb	r2, [r3, #26]
    3f94:	2002      	movs	r0, #2
    3f96:	4382      	bics	r2, r0
    3f98:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3f9a:	2380      	movs	r3, #128	; 0x80
    3f9c:	425b      	negs	r3, r3
    3f9e:	4642      	mov	r2, r8
    3fa0:	4313      	orrs	r3, r2
    3fa2:	4a0e      	ldr	r2, [pc, #56]	; (3fdc <USB_Handler+0x5c4>)
    3fa4:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3fa6:	9b01      	ldr	r3, [sp, #4]
    3fa8:	3308      	adds	r3, #8
    3faa:	015b      	lsls	r3, r3, #5
    3fac:	683a      	ldr	r2, [r7, #0]
    3fae:	4694      	mov	ip, r2
    3fb0:	4463      	add	r3, ip
    3fb2:	79db      	ldrb	r3, [r3, #7]
    3fb4:	079b      	lsls	r3, r3, #30
    3fb6:	d500      	bpl.n	3fba <USB_Handler+0x5a2>
    3fb8:	e69a      	b.n	3cf0 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3fba:	230c      	movs	r3, #12
    3fbc:	420b      	tst	r3, r1
    3fbe:	d100      	bne.n	3fc2 <USB_Handler+0x5aa>
    3fc0:	e696      	b.n	3cf0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3fc2:	9b01      	ldr	r3, [sp, #4]
    3fc4:	011b      	lsls	r3, r3, #4
    3fc6:	18fb      	adds	r3, r7, r3
    3fc8:	33d8      	adds	r3, #216	; 0xd8
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	4903      	ldr	r1, [pc, #12]	; (3fdc <USB_Handler+0x5c4>)
    3fce:	0038      	movs	r0, r7
    3fd0:	4798      	blx	r3
    3fd2:	e68d      	b.n	3cf0 <USB_Handler+0x2d8>
    3fd4:	2000038c 	.word	0x2000038c
    3fd8:	20000740 	.word	0x20000740
    3fdc:	20000390 	.word	0x20000390

00003fe0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3fe0:	2200      	movs	r2, #0
    3fe2:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    3fe4:	2301      	movs	r3, #1
    3fe6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    3fe8:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3fea:	70c3      	strb	r3, [r0, #3]
}
    3fec:	4770      	bx	lr
	...

00003ff0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	46ce      	mov	lr, r9
    3ff4:	4647      	mov	r7, r8
    3ff6:	b580      	push	{r7, lr}
    3ff8:	b083      	sub	sp, #12
    3ffa:	0004      	movs	r4, r0
    3ffc:	000d      	movs	r5, r1
    3ffe:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4000:	2300      	movs	r3, #0
    4002:	4a6e      	ldr	r2, [pc, #440]	; (41bc <usb_init+0x1cc>)
    4004:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4006:	4a6e      	ldr	r2, [pc, #440]	; (41c0 <usb_init+0x1d0>)
    4008:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    400a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    400c:	496d      	ldr	r1, [pc, #436]	; (41c4 <usb_init+0x1d4>)
    400e:	69ca      	ldr	r2, [r1, #28]
    4010:	2020      	movs	r0, #32
    4012:	4302      	orrs	r2, r0
    4014:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4016:	af01      	add	r7, sp, #4
    4018:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    401a:	2201      	movs	r2, #1
    401c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    401e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4020:	3306      	adds	r3, #6
    4022:	4699      	mov	r9, r3
    4024:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4026:	0039      	movs	r1, r7
    4028:	3808      	subs	r0, #8
    402a:	4b67      	ldr	r3, [pc, #412]	; (41c8 <usb_init+0x1d8>)
    402c:	4698      	mov	r8, r3
    402e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4030:	464b      	mov	r3, r9
    4032:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4034:	0039      	movs	r1, r7
    4036:	2019      	movs	r0, #25
    4038:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    403a:	78b3      	ldrb	r3, [r6, #2]
    403c:	466a      	mov	r2, sp
    403e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4040:	4669      	mov	r1, sp
    4042:	2006      	movs	r0, #6
    4044:	4b61      	ldr	r3, [pc, #388]	; (41cc <usb_init+0x1dc>)
    4046:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4048:	2006      	movs	r0, #6
    404a:	4b61      	ldr	r3, [pc, #388]	; (41d0 <usb_init+0x1e0>)
    404c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    404e:	782b      	ldrb	r3, [r5, #0]
    4050:	2201      	movs	r2, #1
    4052:	4313      	orrs	r3, r2
    4054:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4056:	78ab      	ldrb	r3, [r5, #2]
    4058:	07db      	lsls	r3, r3, #31
    405a:	d4fc      	bmi.n	4056 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    405c:	4a5d      	ldr	r2, [pc, #372]	; (41d4 <usb_init+0x1e4>)
    405e:	78d3      	ldrb	r3, [r2, #3]
    4060:	2103      	movs	r1, #3
    4062:	438b      	bics	r3, r1
    4064:	2102      	movs	r1, #2
    4066:	430b      	orrs	r3, r1
    4068:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    406a:	78d3      	ldrb	r3, [r2, #3]
    406c:	210c      	movs	r1, #12
    406e:	438b      	bics	r3, r1
    4070:	2108      	movs	r1, #8
    4072:	430b      	orrs	r3, r1
    4074:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4076:	4b58      	ldr	r3, [pc, #352]	; (41d8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4078:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    407a:	039b      	lsls	r3, r3, #14
    407c:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    407e:	2b1f      	cmp	r3, #31
    4080:	d100      	bne.n	4084 <usb_init+0x94>
    4082:	e08f      	b.n	41a4 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4084:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4086:	019b      	lsls	r3, r3, #6
    4088:	4954      	ldr	r1, [pc, #336]	; (41dc <usb_init+0x1ec>)
    408a:	400a      	ands	r2, r1
    408c:	4313      	orrs	r3, r2
    408e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4090:	4b51      	ldr	r3, [pc, #324]	; (41d8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4092:	681b      	ldr	r3, [r3, #0]
    4094:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4096:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4098:	2b1f      	cmp	r3, #31
    409a:	d100      	bne.n	409e <usb_init+0xae>
    409c:	e084      	b.n	41a8 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    409e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    40a0:	211f      	movs	r1, #31
    40a2:	438a      	bics	r2, r1
    40a4:	4313      	orrs	r3, r2
    40a6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    40a8:	4b4b      	ldr	r3, [pc, #300]	; (41d8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    40aa:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    40ac:	019b      	lsls	r3, r3, #6
    40ae:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    40b0:	2b07      	cmp	r3, #7
    40b2:	d100      	bne.n	40b6 <usb_init+0xc6>
    40b4:	e07a      	b.n	41ac <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    40b6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    40b8:	031b      	lsls	r3, r3, #12
    40ba:	4949      	ldr	r1, [pc, #292]	; (41e0 <usb_init+0x1f0>)
    40bc:	400a      	ands	r2, r1
    40be:	4313      	orrs	r3, r2
    40c0:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    40c2:	7832      	ldrb	r2, [r6, #0]
    40c4:	7829      	ldrb	r1, [r5, #0]
    40c6:	01d2      	lsls	r2, r2, #7
    40c8:	237f      	movs	r3, #127	; 0x7f
    40ca:	400b      	ands	r3, r1
    40cc:	4313      	orrs	r3, r2
    40ce:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    40d0:	7871      	ldrb	r1, [r6, #1]
    40d2:	782b      	ldrb	r3, [r5, #0]
    40d4:	2201      	movs	r2, #1
    40d6:	400a      	ands	r2, r1
    40d8:	0092      	lsls	r2, r2, #2
    40da:	2104      	movs	r1, #4
    40dc:	438b      	bics	r3, r1
    40de:	4313      	orrs	r3, r2
    40e0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    40e2:	4b40      	ldr	r3, [pc, #256]	; (41e4 <usb_init+0x1f4>)
    40e4:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    40e6:	78f3      	ldrb	r3, [r6, #3]
    40e8:	2b01      	cmp	r3, #1
    40ea:	d061      	beq.n	41b0 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    40ec:	2b00      	cmp	r3, #0
    40ee:	d106      	bne.n	40fe <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    40f0:	6822      	ldr	r2, [r4, #0]
    40f2:	8913      	ldrh	r3, [r2, #8]
    40f4:	210c      	movs	r1, #12
    40f6:	438b      	bics	r3, r1
    40f8:	2104      	movs	r1, #4
    40fa:	430b      	orrs	r3, r1
    40fc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    40fe:	2280      	movs	r2, #128	; 0x80
    4100:	0052      	lsls	r2, r2, #1
    4102:	2100      	movs	r1, #0
    4104:	4837      	ldr	r0, [pc, #220]	; (41e4 <usb_init+0x1f4>)
    4106:	4b38      	ldr	r3, [pc, #224]	; (41e8 <usb_init+0x1f8>)
    4108:	4798      	blx	r3
    410a:	1d23      	adds	r3, r4, #4
    410c:	0021      	movs	r1, r4
    410e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4110:	2200      	movs	r2, #0
    4112:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4114:	428b      	cmp	r3, r1
    4116:	d1fc      	bne.n	4112 <usb_init+0x122>
    4118:	0021      	movs	r1, r4
    411a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    411c:	2200      	movs	r2, #0
    411e:	601a      	str	r2, [r3, #0]
    4120:	605a      	str	r2, [r3, #4]
    4122:	609a      	str	r2, [r3, #8]
    4124:	60da      	str	r2, [r3, #12]
    4126:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4128:	428b      	cmp	r3, r1
    412a:	d1f8      	bne.n	411e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    412c:	2300      	movs	r3, #0
    412e:	22a4      	movs	r2, #164	; 0xa4
    4130:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4132:	3201      	adds	r2, #1
    4134:	54a3      	strb	r3, [r4, r2]
    4136:	0023      	movs	r3, r4
    4138:	33a6      	adds	r3, #166	; 0xa6
    413a:	0021      	movs	r1, r4
    413c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    413e:	2200      	movs	r2, #0
    4140:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4142:	721a      	strb	r2, [r3, #8]
    4144:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4146:	4299      	cmp	r1, r3
    4148:	d1fa      	bne.n	4140 <usb_init+0x150>
    414a:	0023      	movs	r3, r4
    414c:	33b8      	adds	r3, #184	; 0xb8
    414e:	0021      	movs	r1, r4
    4150:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4152:	2200      	movs	r2, #0
    4154:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4156:	428b      	cmp	r3, r1
    4158:	d1fc      	bne.n	4154 <usb_init+0x164>
    415a:	0021      	movs	r1, r4
    415c:	3155      	adds	r1, #85	; 0x55
    415e:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4160:	2200      	movs	r2, #0
    4162:	601a      	str	r2, [r3, #0]
    4164:	605a      	str	r2, [r3, #4]
    4166:	609a      	str	r2, [r3, #8]
    4168:	60da      	str	r2, [r3, #12]
    416a:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    416c:	428b      	cmp	r3, r1
    416e:	d1f8      	bne.n	4162 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4170:	2300      	movs	r3, #0
    4172:	22aa      	movs	r2, #170	; 0xaa
    4174:	0052      	lsls	r2, r2, #1
    4176:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4178:	3202      	adds	r2, #2
    417a:	52a3      	strh	r3, [r4, r2]
    417c:	0023      	movs	r3, r4
    417e:	3359      	adds	r3, #89	; 0x59
    4180:	33ff      	adds	r3, #255	; 0xff
    4182:	3461      	adds	r4, #97	; 0x61
    4184:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4186:	2200      	movs	r2, #0
    4188:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    418a:	721a      	strb	r2, [r3, #8]
    418c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    418e:	42a3      	cmp	r3, r4
    4190:	d1fa      	bne.n	4188 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4192:	2280      	movs	r2, #128	; 0x80
    4194:	4b15      	ldr	r3, [pc, #84]	; (41ec <usb_init+0x1fc>)
    4196:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4198:	2000      	movs	r0, #0
    419a:	b003      	add	sp, #12
    419c:	bc0c      	pop	{r2, r3}
    419e:	4690      	mov	r8, r2
    41a0:	4699      	mov	r9, r3
    41a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    41a4:	3b1a      	subs	r3, #26
    41a6:	e76d      	b.n	4084 <usb_init+0x94>
		pad_transp = 29;
    41a8:	3b02      	subs	r3, #2
    41aa:	e778      	b.n	409e <usb_init+0xae>
		pad_trim = 3;
    41ac:	3b04      	subs	r3, #4
    41ae:	e782      	b.n	40b6 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    41b0:	6822      	ldr	r2, [r4, #0]
    41b2:	8913      	ldrh	r3, [r2, #8]
    41b4:	3108      	adds	r1, #8
    41b6:	438b      	bics	r3, r1
    41b8:	8113      	strh	r3, [r2, #8]
    41ba:	e7a0      	b.n	40fe <usb_init+0x10e>
    41bc:	20000398 	.word	0x20000398
    41c0:	20000388 	.word	0x20000388
    41c4:	40000400 	.word	0x40000400
    41c8:	00002561 	.word	0x00002561
    41cc:	0000249d 	.word	0x0000249d
    41d0:	00002411 	.word	0x00002411
    41d4:	41005000 	.word	0x41005000
    41d8:	00806024 	.word	0x00806024
    41dc:	fffff83f 	.word	0xfffff83f
    41e0:	ffff8fff 	.word	0xffff8fff
    41e4:	20000740 	.word	0x20000740
    41e8:	00005f0f 	.word	0x00005f0f
    41ec:	e000e100 	.word	0xe000e100

000041f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    41f0:	e7fe      	b.n	41f0 <Dummy_Handler>
	...

000041f4 <Reset_Handler>:
{
    41f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    41f6:	4a2a      	ldr	r2, [pc, #168]	; (42a0 <Reset_Handler+0xac>)
    41f8:	4b2a      	ldr	r3, [pc, #168]	; (42a4 <Reset_Handler+0xb0>)
    41fa:	429a      	cmp	r2, r3
    41fc:	d011      	beq.n	4222 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    41fe:	001a      	movs	r2, r3
    4200:	4b29      	ldr	r3, [pc, #164]	; (42a8 <Reset_Handler+0xb4>)
    4202:	429a      	cmp	r2, r3
    4204:	d20d      	bcs.n	4222 <Reset_Handler+0x2e>
    4206:	4a29      	ldr	r2, [pc, #164]	; (42ac <Reset_Handler+0xb8>)
    4208:	3303      	adds	r3, #3
    420a:	1a9b      	subs	r3, r3, r2
    420c:	089b      	lsrs	r3, r3, #2
    420e:	3301      	adds	r3, #1
    4210:	009b      	lsls	r3, r3, #2
    4212:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4214:	4823      	ldr	r0, [pc, #140]	; (42a4 <Reset_Handler+0xb0>)
    4216:	4922      	ldr	r1, [pc, #136]	; (42a0 <Reset_Handler+0xac>)
    4218:	588c      	ldr	r4, [r1, r2]
    421a:	5084      	str	r4, [r0, r2]
    421c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    421e:	429a      	cmp	r2, r3
    4220:	d1fa      	bne.n	4218 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4222:	4a23      	ldr	r2, [pc, #140]	; (42b0 <Reset_Handler+0xbc>)
    4224:	4b23      	ldr	r3, [pc, #140]	; (42b4 <Reset_Handler+0xc0>)
    4226:	429a      	cmp	r2, r3
    4228:	d20a      	bcs.n	4240 <Reset_Handler+0x4c>
    422a:	43d3      	mvns	r3, r2
    422c:	4921      	ldr	r1, [pc, #132]	; (42b4 <Reset_Handler+0xc0>)
    422e:	185b      	adds	r3, r3, r1
    4230:	2103      	movs	r1, #3
    4232:	438b      	bics	r3, r1
    4234:	3304      	adds	r3, #4
    4236:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4238:	2100      	movs	r1, #0
    423a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    423c:	4293      	cmp	r3, r2
    423e:	d1fc      	bne.n	423a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4240:	4a1d      	ldr	r2, [pc, #116]	; (42b8 <Reset_Handler+0xc4>)
    4242:	21ff      	movs	r1, #255	; 0xff
    4244:	4b1d      	ldr	r3, [pc, #116]	; (42bc <Reset_Handler+0xc8>)
    4246:	438b      	bics	r3, r1
    4248:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    424a:	39fd      	subs	r1, #253	; 0xfd
    424c:	2390      	movs	r3, #144	; 0x90
    424e:	005b      	lsls	r3, r3, #1
    4250:	4a1b      	ldr	r2, [pc, #108]	; (42c0 <Reset_Handler+0xcc>)
    4252:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4254:	4a1b      	ldr	r2, [pc, #108]	; (42c4 <Reset_Handler+0xd0>)
    4256:	78d3      	ldrb	r3, [r2, #3]
    4258:	2503      	movs	r5, #3
    425a:	43ab      	bics	r3, r5
    425c:	2402      	movs	r4, #2
    425e:	4323      	orrs	r3, r4
    4260:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4262:	78d3      	ldrb	r3, [r2, #3]
    4264:	270c      	movs	r7, #12
    4266:	43bb      	bics	r3, r7
    4268:	2608      	movs	r6, #8
    426a:	4333      	orrs	r3, r6
    426c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    426e:	4b16      	ldr	r3, [pc, #88]	; (42c8 <Reset_Handler+0xd4>)
    4270:	7b98      	ldrb	r0, [r3, #14]
    4272:	2230      	movs	r2, #48	; 0x30
    4274:	4390      	bics	r0, r2
    4276:	2220      	movs	r2, #32
    4278:	4310      	orrs	r0, r2
    427a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    427c:	7b99      	ldrb	r1, [r3, #14]
    427e:	43b9      	bics	r1, r7
    4280:	4331      	orrs	r1, r6
    4282:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4284:	7b9a      	ldrb	r2, [r3, #14]
    4286:	43aa      	bics	r2, r5
    4288:	4322      	orrs	r2, r4
    428a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    428c:	4a0f      	ldr	r2, [pc, #60]	; (42cc <Reset_Handler+0xd8>)
    428e:	6853      	ldr	r3, [r2, #4]
    4290:	2180      	movs	r1, #128	; 0x80
    4292:	430b      	orrs	r3, r1
    4294:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4296:	4b0e      	ldr	r3, [pc, #56]	; (42d0 <Reset_Handler+0xdc>)
    4298:	4798      	blx	r3
        main();
    429a:	4b0e      	ldr	r3, [pc, #56]	; (42d4 <Reset_Handler+0xe0>)
    429c:	4798      	blx	r3
    429e:	e7fe      	b.n	429e <Reset_Handler+0xaa>
    42a0:	000061c4 	.word	0x000061c4
    42a4:	20000000 	.word	0x20000000
    42a8:	20000104 	.word	0x20000104
    42ac:	20000004 	.word	0x20000004
    42b0:	20000104 	.word	0x20000104
    42b4:	20000844 	.word	0x20000844
    42b8:	e000ed00 	.word	0xe000ed00
    42bc:	00000000 	.word	0x00000000
    42c0:	41007000 	.word	0x41007000
    42c4:	41005000 	.word	0x41005000
    42c8:	41004800 	.word	0x41004800
    42cc:	41004000 	.word	0x41004000
    42d0:	00005eb5 	.word	0x00005eb5
    42d4:	00004309 	.word	0x00004309

000042d8 <configure_nvm>:

#include <asf.h>
#include "flash.h"

void configure_nvm(void)
{
    42d8:	b500      	push	{lr}
    42da:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    42dc:	2200      	movs	r2, #0
    42de:	466b      	mov	r3, sp
    42e0:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    42e2:	4b07      	ldr	r3, [pc, #28]	; (4300 <configure_nvm+0x28>)
    42e4:	685b      	ldr	r3, [r3, #4]
    42e6:	06db      	lsls	r3, r3, #27
    42e8:	0f1b      	lsrs	r3, r3, #28
    42ea:	4669      	mov	r1, sp
    42ec:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    42ee:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    42f0:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    42f2:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    42f4:	4668      	mov	r0, sp
    42f6:	4b03      	ldr	r3, [pc, #12]	; (4304 <configure_nvm+0x2c>)
    42f8:	4798      	blx	r3
}
    42fa:	b003      	add	sp, #12
    42fc:	bd00      	pop	{pc}
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	41004000 	.word	0x41004000
    4304:	00001bc9 	.word	0x00001bc9

00004308 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    4308:	b5f0      	push	{r4, r5, r6, r7, lr}
    430a:	46c6      	mov	lr, r8
    430c:	b500      	push	{lr}


	irq_initialize_vectors();
	cpu_irq_enable();
    430e:	2101      	movs	r1, #1
    4310:	2401      	movs	r4, #1
    4312:	4b50      	ldr	r3, [pc, #320]	; (4454 <main+0x14c>)
    4314:	7019      	strb	r1, [r3, #0]
    4316:	f3bf 8f5f 	dmb	sy
    431a:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    431c:	4b4e      	ldr	r3, [pc, #312]	; (4458 <main+0x150>)
    431e:	2200      	movs	r2, #0
    4320:	701a      	strb	r2, [r3, #0]
    4322:	705a      	strb	r2, [r3, #1]
    4324:	709a      	strb	r2, [r3, #2]
    4326:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4328:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    432a:	4b4c      	ldr	r3, [pc, #304]	; (445c <main+0x154>)
    432c:	4798      	blx	r3
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    432e:	4b4c      	ldr	r3, [pc, #304]	; (4460 <main+0x158>)
    4330:	2148      	movs	r1, #72	; 0x48
    4332:	5c5a      	ldrb	r2, [r3, r1]
    4334:	4322      	orrs	r2, r4
    4336:	545a      	strb	r2, [r3, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    4338:	2234      	movs	r2, #52	; 0x34
    433a:	5c99      	ldrb	r1, [r3, r2]
    433c:	200f      	movs	r0, #15
    433e:	4381      	bics	r1, r0
    4340:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    4342:	5c99      	ldrb	r1, [r3, r2]
    4344:	380c      	subs	r0, #12
    4346:	4301      	orrs	r1, r0
    4348:	5499      	strb	r1, [r3, r2]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    434a:	3046      	adds	r0, #70	; 0x46
    434c:	5c19      	ldrb	r1, [r3, r0]
    434e:	4321      	orrs	r1, r4
    4350:	5419      	strb	r1, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    4352:	5c99      	ldrb	r1, [r3, r2]
    4354:	383a      	subs	r0, #58	; 0x3a
    4356:	4001      	ands	r1, r0
    4358:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    435a:	5c99      	ldrb	r1, [r3, r2]
    435c:	3021      	adds	r0, #33	; 0x21
    435e:	4301      	orrs	r1, r0
    4360:	5499      	strb	r1, [r3, r2]
	PM->APBCMASK.reg |= I2C_SERCOM_APBCMASK;
    4362:	4a40      	ldr	r2, [pc, #256]	; (4464 <main+0x15c>)
    4364:	6a13      	ldr	r3, [r2, #32]
    4366:	2110      	movs	r1, #16
    4368:	430b      	orrs	r3, r1
    436a:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(I2C_SERCOM_GCLK_ID) |
    436c:	4a3e      	ldr	r2, [pc, #248]	; (4468 <main+0x160>)
    436e:	4b3f      	ldr	r3, [pc, #252]	; (446c <main+0x164>)
    4370:	805a      	strh	r2, [r3, #2]
	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4372:	2280      	movs	r2, #128	; 0x80
    4374:	0052      	lsls	r2, r2, #1
    4376:	4b3e      	ldr	r3, [pc, #248]	; (4470 <main+0x168>)
    4378:	605a      	str	r2, [r3, #4]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    437a:	69da      	ldr	r2, [r3, #28]
    437c:	2a00      	cmp	r2, #0
    437e:	d1fc      	bne.n	437a <main+0x72>
	SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(34);
    4380:	3222      	adds	r2, #34	; 0x22
    4382:	4b3b      	ldr	r3, [pc, #236]	; (4470 <main+0x168>)
    4384:	60da      	str	r2, [r3, #12]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4386:	69da      	ldr	r2, [r3, #28]
    4388:	2a00      	cmp	r2, #0
    438a:	d1fc      	bne.n	4386 <main+0x7e>
	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
    438c:	4a39      	ldr	r2, [pc, #228]	; (4474 <main+0x16c>)
    438e:	4b38      	ldr	r3, [pc, #224]	; (4470 <main+0x168>)
    4390:	601a      	str	r2, [r3, #0]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4392:	69da      	ldr	r2, [r3, #28]
    4394:	2a00      	cmp	r2, #0
    4396:	d1fc      	bne.n	4392 <main+0x8a>
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    4398:	4a35      	ldr	r2, [pc, #212]	; (4470 <main+0x168>)
    439a:	8b53      	ldrh	r3, [r2, #26]
    439c:	2110      	movs	r1, #16
    439e:	430b      	orrs	r3, r1
    43a0:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);	
    43a2:	0013      	movs	r3, r2
    43a4:	69da      	ldr	r2, [r3, #28]
    43a6:	2a00      	cmp	r2, #0
    43a8:	d1fc      	bne.n	43a4 <main+0x9c>
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    43aa:	4c2e      	ldr	r4, [pc, #184]	; (4464 <main+0x15c>)
    43ac:	6a22      	ldr	r2, [r4, #32]
    43ae:	2380      	movs	r3, #128	; 0x80
    43b0:	015b      	lsls	r3, r3, #5
    43b2:	4313      	orrs	r3, r2
    43b4:	6223      	str	r3, [r4, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    43b6:	4b2d      	ldr	r3, [pc, #180]	; (446c <main+0x164>)
    43b8:	4698      	mov	r8, r3
    43ba:	4b2f      	ldr	r3, [pc, #188]	; (4478 <main+0x170>)
    43bc:	4642      	mov	r2, r8
    43be:	8053      	strh	r3, [r2, #2]
	TC4->COUNT16.CTRLA.reg =
    43c0:	4b2e      	ldr	r3, [pc, #184]	; (447c <main+0x174>)
    43c2:	27a9      	movs	r7, #169	; 0xa9
    43c4:	017f      	lsls	r7, r7, #5
    43c6:	801f      	strh	r7, [r3, #0]
	TC4->COUNT16.COUNT.reg = 0;
    43c8:	2600      	movs	r6, #0
    43ca:	821e      	strh	r6, [r3, #16]
	TC4->COUNT16.CC[0].reg = 800u; // Count to 800 to get 0.1ms
    43cc:	22c8      	movs	r2, #200	; 0xc8
    43ce:	0092      	lsls	r2, r2, #2
    43d0:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    43d2:	881a      	ldrh	r2, [r3, #0]
    43d4:	2502      	movs	r5, #2
    43d6:	432a      	orrs	r2, r5
    43d8:	b292      	uxth	r2, r2
    43da:	801a      	strh	r2, [r3, #0]
	//spiInit1();
	
	timerInit();
	
	//configue flash non-volatile memory
	configure_nvm();
    43dc:	4b28      	ldr	r3, [pc, #160]	; (4480 <main+0x178>)
    43de:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    43e0:	4b28      	ldr	r3, [pc, #160]	; (4484 <main+0x17c>)
    43e2:	4798      	blx	r3
	//light sensor initialization
	OPT3001_init();
    43e4:	4b28      	ldr	r3, [pc, #160]	; (4488 <main+0x180>)
    43e6:	4798      	blx	r3
	//temperature sensor initialization
	Si7021_init();
    43e8:	4b28      	ldr	r3, [pc, #160]	; (448c <main+0x184>)
    43ea:	4798      	blx	r3
	
	RTC_init();
    43ec:	4b28      	ldr	r3, [pc, #160]	; (4490 <main+0x188>)
    43ee:	4798      	blx	r3

	i2cLcdClear();
    43f0:	4b28      	ldr	r3, [pc, #160]	; (4494 <main+0x18c>)
    43f2:	4798      	blx	r3

#undef ENABLE

static inline void timerInit1(void)
{
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    43f4:	6a22      	ldr	r2, [r4, #32]
    43f6:	2380      	movs	r3, #128	; 0x80
    43f8:	011b      	lsls	r3, r3, #4
    43fa:	4313      	orrs	r3, r2
    43fc:	6223      	str	r3, [r4, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC3_GCLK_ID) |
    43fe:	4b26      	ldr	r3, [pc, #152]	; (4498 <main+0x190>)
    4400:	4642      	mov	r2, r8
    4402:	8053      	strh	r3, [r2, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(2); // Take from clock generator 2 (8 MHz)

	TC3->COUNT16.CTRLA.reg =
    4404:	4b25      	ldr	r3, [pc, #148]	; (449c <main+0x194>)
    4406:	801f      	strh	r7, [r3, #0]
	TC_CTRLA_MODE(TC_CTRLA_MODE_COUNT16_Val) |
	TC_CTRLA_WAVEGEN(TC_CTRLA_WAVEGEN_MFRQ_Val) |
	TC_CTRLA_PRESCALER(TC_CTRLA_PRESCALER_DIV64_Val) |// Divide clock by 64
	TC_CTRLA_PRESCSYNC(TC_CTRLA_PRESCSYNC_PRESC_Val);
	TC3->COUNT16.COUNT.reg = 0;
    4408:	821e      	strh	r6, [r3, #16]
	TC3->COUNT16.CC[0].reg = 2125u; // about 60 times per second
    440a:	4a25      	ldr	r2, [pc, #148]	; (44a0 <main+0x198>)
    440c:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.INTENSET.bit.MC0 = 1;
    440e:	7b5a      	ldrb	r2, [r3, #13]
    4410:	2110      	movs	r1, #16
    4412:	430a      	orrs	r2, r1
    4414:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.INTENSET.bit.OVF = 1;
    4416:	7b5a      	ldrb	r2, [r3, #13]
    4418:	2101      	movs	r1, #1
    441a:	430a      	orrs	r2, r1
    441c:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    441e:	881a      	ldrh	r2, [r3, #0]
    4420:	432a      	orrs	r2, r5
    4422:	b292      	uxth	r2, r2
    4424:	801a      	strh	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    4426:	4b1f      	ldr	r3, [pc, #124]	; (44a4 <main+0x19c>)
    4428:	2180      	movs	r1, #128	; 0x80
    442a:	02c9      	lsls	r1, r1, #11
    442c:	22c0      	movs	r2, #192	; 0xc0
    442e:	0052      	lsls	r2, r2, #1
    4430:	5099      	str	r1, [r3, r2]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4432:	20c4      	movs	r0, #196	; 0xc4
    4434:	0080      	lsls	r0, r0, #2
    4436:	581a      	ldr	r2, [r3, r0]
    4438:	4c1b      	ldr	r4, [pc, #108]	; (44a8 <main+0x1a0>)
    443a:	4022      	ands	r2, r4
    443c:	501a      	str	r2, [r3, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    443e:	6019      	str	r1, [r3, #0]
	timerInit1();
		
	REG_PORT_DIRSET0 = PORT_PA27;
    4440:	2380      	movs	r3, #128	; 0x80
    4442:	051b      	lsls	r3, r3, #20
    4444:	4a19      	ldr	r2, [pc, #100]	; (44ac <main+0x1a4>)
    4446:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR0 = PORT_PA27;
    4448:	4a19      	ldr	r2, [pc, #100]	; (44b0 <main+0x1a8>)
    444a:	6013      	str	r3, [r2, #0]
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	configApp();
    444c:	4b19      	ldr	r3, [pc, #100]	; (44b4 <main+0x1ac>)
    444e:	4798      	blx	r3
    4450:	e7fe      	b.n	4450 <main+0x148>
    4452:	46c0      	nop			; (mov r8, r8)
    4454:	20000100 	.word	0x20000100
    4458:	20000478 	.word	0x20000478
    445c:	00002595 	.word	0x00002595
    4460:	41004400 	.word	0x41004400
    4464:	40000400 	.word	0x40000400
    4468:	00004216 	.word	0x00004216
    446c:	40000c00 	.word	0x40000c00
    4470:	42001000 	.word	0x42001000
    4474:	00300016 	.word	0x00300016
    4478:	0000421c 	.word	0x0000421c
    447c:	42003000 	.word	0x42003000
    4480:	000042d9 	.word	0x000042d9
    4484:	00001475 	.word	0x00001475
    4488:	00004675 	.word	0x00004675
    448c:	00004691 	.word	0x00004691
    4490:	00000f2d 	.word	0x00000f2d
    4494:	00000b5d 	.word	0x00000b5d
    4498:	0000421b 	.word	0x0000421b
    449c:	42002c00 	.word	0x42002c00
    44a0:	0000084d 	.word	0x0000084d
    44a4:	e000e100 	.word	0xe000e100
    44a8:	ff00ffff 	.word	0xff00ffff
    44ac:	41004408 	.word	0x41004408
    44b0:	41004414 	.word	0x41004414
    44b4:	000002f5 	.word	0x000002f5

000044b8 <main_suspend_action>:
	}
}


void main_suspend_action(void)
{
    44b8:	b510      	push	{r4, lr}
	ui_powerdown();
    44ba:	4b01      	ldr	r3, [pc, #4]	; (44c0 <main_suspend_action+0x8>)
    44bc:	4798      	blx	r3
}
    44be:	bd10      	pop	{r4, pc}
    44c0:	00001261 	.word	0x00001261

000044c4 <main_resume_action>:

void main_resume_action(void)
{
    44c4:	b510      	push	{r4, lr}
	ui_wakeup();
    44c6:	4b01      	ldr	r3, [pc, #4]	; (44cc <main_resume_action+0x8>)
    44c8:	4798      	blx	r3
}
    44ca:	bd10      	pop	{r4, pc}
    44cc:	00001291 	.word	0x00001291

000044d0 <main_sof_action>:

void main_sof_action(void)
{
    44d0:	b510      	push	{r4, lr}
	test_components();
    44d2:	4b06      	ldr	r3, [pc, #24]	; (44ec <main_sof_action+0x1c>)
    44d4:	4798      	blx	r3
	if (!main_b_cdc_enable)
    44d6:	4b06      	ldr	r3, [pc, #24]	; (44f0 <main_sof_action+0x20>)
    44d8:	781b      	ldrb	r3, [r3, #0]
    44da:	2b00      	cmp	r3, #0
    44dc:	d100      	bne.n	44e0 <main_sof_action+0x10>
	return;
	ui_process(udd_get_frame_number());
}
    44de:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    44e0:	4b04      	ldr	r3, [pc, #16]	; (44f4 <main_sof_action+0x24>)
    44e2:	4798      	blx	r3
    44e4:	4b04      	ldr	r3, [pc, #16]	; (44f8 <main_sof_action+0x28>)
    44e6:	4798      	blx	r3
    44e8:	e7f9      	b.n	44de <main_sof_action+0xe>
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	0000109d 	.word	0x0000109d
    44f0:	200003a2 	.word	0x200003a2
    44f4:	00002c9d 	.word	0x00002c9d
    44f8:	000012a5 	.word	0x000012a5

000044fc <main_suspend_lpm_action>:


#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    44fc:	b510      	push	{r4, lr}
	ui_powerdown();
    44fe:	4b01      	ldr	r3, [pc, #4]	; (4504 <main_suspend_lpm_action+0x8>)
    4500:	4798      	blx	r3
}
    4502:	bd10      	pop	{r4, pc}
    4504:	00001261 	.word	0x00001261

00004508 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    4508:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    450a:	4b01      	ldr	r3, [pc, #4]	; (4510 <main_remotewakeup_lpm_disable+0x8>)
    450c:	4798      	blx	r3
}
    450e:	bd10      	pop	{r4, pc}
    4510:	00001281 	.word	0x00001281

00004514 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    4514:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    4516:	4b01      	ldr	r3, [pc, #4]	; (451c <main_remotewakeup_lpm_enable+0x8>)
    4518:	4798      	blx	r3
}
    451a:	bd10      	pop	{r4, pc}
    451c:	00001271 	.word	0x00001271

00004520 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    4520:	2201      	movs	r2, #1
    4522:	4b02      	ldr	r3, [pc, #8]	; (452c <main_cdc_enable+0xc>)
    4524:	701a      	strb	r2, [r3, #0]
	// Open communication
	//uart_open(port);
	return true;
}
    4526:	2001      	movs	r0, #1
    4528:	4770      	bx	lr
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	200003a2 	.word	0x200003a2

00004530 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    4530:	2200      	movs	r2, #0
    4532:	4b01      	ldr	r3, [pc, #4]	; (4538 <main_cdc_disable+0x8>)
    4534:	701a      	strb	r2, [r3, #0]
	// Close communication
	//uart_close(port);
}
    4536:	4770      	bx	lr
    4538:	200003a2 	.word	0x200003a2

0000453c <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    453c:	b510      	push	{r4, lr}
	if (b_enable) {
    453e:	2900      	cmp	r1, #0
    4540:	d102      	bne.n	4548 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    4542:	4b03      	ldr	r3, [pc, #12]	; (4550 <main_cdc_set_dtr+0x14>)
    4544:	4798      	blx	r3
	}
}
    4546:	bd10      	pop	{r4, pc}
		ui_com_open(port);
    4548:	4b02      	ldr	r3, [pc, #8]	; (4554 <main_cdc_set_dtr+0x18>)
    454a:	4798      	blx	r3
    454c:	e7fb      	b.n	4546 <main_cdc_set_dtr+0xa>
    454e:	46c0      	nop			; (mov r8, r8)
    4550:	000012a3 	.word	0x000012a3
    4554:	000012a1 	.word	0x000012a1

00004558 <OPT3001_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    4558:	2289      	movs	r2, #137	; 0x89
    455a:	4b21      	ldr	r3, [pc, #132]	; (45e0 <OPT3001_read+0x88>)
    455c:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    455e:	0019      	movs	r1, r3
    4560:	3a87      	subs	r2, #135	; 0x87
    4562:	7e0b      	ldrb	r3, [r1, #24]
    4564:	4213      	tst	r3, r2
    4566:	d0fc      	beq.n	4562 <OPT3001_read+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4568:	4b1d      	ldr	r3, [pc, #116]	; (45e0 <OPT3001_read+0x88>)
    456a:	8b5b      	ldrh	r3, [r3, #26]
    456c:	075b      	lsls	r3, r3, #29
    456e:	d430      	bmi.n	45d2 <OPT3001_read+0x7a>
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4570:	4b1b      	ldr	r3, [pc, #108]	; (45e0 <OPT3001_read+0x88>)
    4572:	685a      	ldr	r2, [r3, #4]
    4574:	491b      	ldr	r1, [pc, #108]	; (45e4 <OPT3001_read+0x8c>)
    4576:	400a      	ands	r2, r1
    4578:	605a      	str	r2, [r3, #4]
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    457a:	2228      	movs	r2, #40	; 0x28
    457c:	5c9a      	ldrb	r2, [r3, r2]
    457e:	4b1a      	ldr	r3, [pc, #104]	; (45e8 <OPT3001_read+0x90>)
    4580:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4582:	4917      	ldr	r1, [pc, #92]	; (45e0 <OPT3001_read+0x88>)
    4584:	2202      	movs	r2, #2
    4586:	7e0b      	ldrb	r3, [r1, #24]
    4588:	4213      	tst	r3, r2
    458a:	d0fc      	beq.n	4586 <OPT3001_read+0x2e>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    458c:	2328      	movs	r3, #40	; 0x28
    458e:	4a14      	ldr	r2, [pc, #80]	; (45e0 <OPT3001_read+0x88>)
    4590:	5cd2      	ldrb	r2, [r2, r3]
    4592:	4b15      	ldr	r3, [pc, #84]	; (45e8 <OPT3001_read+0x90>)
    4594:	705a      	strb	r2, [r3, #1]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4596:	4912      	ldr	r1, [pc, #72]	; (45e0 <OPT3001_read+0x88>)
    4598:	2202      	movs	r2, #2
    459a:	7e0b      	ldrb	r3, [r1, #24]
    459c:	4213      	tst	r3, r2
    459e:	d0fc      	beq.n	459a <OPT3001_read+0x42>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    45a0:	4b0f      	ldr	r3, [pc, #60]	; (45e0 <OPT3001_read+0x88>)
    45a2:	6859      	ldr	r1, [r3, #4]
    45a4:	2280      	movs	r2, #128	; 0x80
    45a6:	02d2      	lsls	r2, r2, #11
    45a8:	430a      	orrs	r2, r1
    45aa:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    45ac:	6859      	ldr	r1, [r3, #4]
    45ae:	22c0      	movs	r2, #192	; 0xc0
    45b0:	0292      	lsls	r2, r2, #10
    45b2:	430a      	orrs	r2, r1
    45b4:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    45b6:	2228      	movs	r2, #40	; 0x28
    45b8:	5c99      	ldrb	r1, [r3, r2]
    45ba:	4a0b      	ldr	r2, [pc, #44]	; (45e8 <OPT3001_read+0x90>)
    45bc:	7091      	strb	r1, [r2, #2]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    45be:	8b5a      	ldrh	r2, [r3, #26]
    45c0:	2110      	movs	r1, #16
    45c2:	430a      	orrs	r2, r1
    45c4:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    45c6:	001a      	movs	r2, r3
    45c8:	69d3      	ldr	r3, [r2, #28]
    45ca:	2b00      	cmp	r3, #0
    45cc:	d1fc      	bne.n	45c8 <OPT3001_read+0x70>
//Reads the register that was last written to
uint8_t* OPT3001_read(){
	
	i2c_read(OPT3001_read_buffer, 3, OPT3001_SLAVE_ADDR);
	return OPT3001_read_buffer;
}
    45ce:	4806      	ldr	r0, [pc, #24]	; (45e8 <OPT3001_read+0x90>)
    45d0:	4770      	bx	lr
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    45d2:	4a03      	ldr	r2, [pc, #12]	; (45e0 <OPT3001_read+0x88>)
    45d4:	6851      	ldr	r1, [r2, #4]
    45d6:	23c0      	movs	r3, #192	; 0xc0
    45d8:	029b      	lsls	r3, r3, #10
    45da:	430b      	orrs	r3, r1
    45dc:	6053      	str	r3, [r2, #4]
    45de:	e7f6      	b.n	45ce <OPT3001_read+0x76>
    45e0:	42001000 	.word	0x42001000
    45e4:	fffbffff 	.word	0xfffbffff
    45e8:	200003a4 	.word	0x200003a4

000045ec <OPT3001_write>:

void OPT3001_write(uint8_t reg, uint8_t byte1, uint8_t byte2){
    45ec:	b570      	push	{r4, r5, r6, lr}
	
	OPT3001_write_buffer[0] = reg;
    45ee:	4b1e      	ldr	r3, [pc, #120]	; (4668 <OPT3001_write+0x7c>)
    45f0:	7018      	strb	r0, [r3, #0]
	OPT3001_write_buffer[1] = byte1;
    45f2:	7059      	strb	r1, [r3, #1]
	OPT3001_write_buffer[2] = byte2;
    45f4:	709a      	strb	r2, [r3, #2]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    45f6:	2288      	movs	r2, #136	; 0x88
    45f8:	4b1c      	ldr	r3, [pc, #112]	; (466c <OPT3001_write+0x80>)
    45fa:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    45fc:	0019      	movs	r1, r3
    45fe:	3a87      	subs	r2, #135	; 0x87
    4600:	7e0b      	ldrb	r3, [r1, #24]
    4602:	4213      	tst	r3, r2
    4604:	d0fc      	beq.n	4600 <OPT3001_write+0x14>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4606:	4b19      	ldr	r3, [pc, #100]	; (466c <OPT3001_write+0x80>)
    4608:	8b5b      	ldrh	r3, [r3, #26]
    460a:	2000      	movs	r0, #0
    460c:	075b      	lsls	r3, r3, #29
    460e:	d416      	bmi.n	463e <OPT3001_write+0x52>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4610:	4e15      	ldr	r6, [pc, #84]	; (4668 <OPT3001_write+0x7c>)
    4612:	4a16      	ldr	r2, [pc, #88]	; (466c <OPT3001_write+0x80>)
    4614:	2528      	movs	r5, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4616:	2101      	movs	r1, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4618:	2404      	movs	r4, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    461a:	5d83      	ldrb	r3, [r0, r6]
    461c:	5553      	strb	r3, [r2, r5]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    461e:	7e13      	ldrb	r3, [r2, #24]
    4620:	420b      	tst	r3, r1
    4622:	d0fc      	beq.n	461e <OPT3001_write+0x32>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4624:	8b53      	ldrh	r3, [r2, #26]
    4626:	4223      	tst	r3, r4
    4628:	d113      	bne.n	4652 <OPT3001_write+0x66>
	for (int i = 0; i < size; i++)
    462a:	3001      	adds	r0, #1
    462c:	2803      	cmp	r0, #3
    462e:	d1f4      	bne.n	461a <OPT3001_write+0x2e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4630:	4a0e      	ldr	r2, [pc, #56]	; (466c <OPT3001_write+0x80>)
    4632:	6851      	ldr	r1, [r2, #4]
    4634:	23c0      	movs	r3, #192	; 0xc0
    4636:	029b      	lsls	r3, r3, #10
    4638:	430b      	orrs	r3, r1
    463a:	6053      	str	r3, [r2, #4]
	
	i2c_write(OPT3001_write_buffer, 3, OPT3001_SLAVE_ADDR);

    463c:	bd70      	pop	{r4, r5, r6, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    463e:	4a0b      	ldr	r2, [pc, #44]	; (466c <OPT3001_write+0x80>)
    4640:	6851      	ldr	r1, [r2, #4]
    4642:	23c0      	movs	r3, #192	; 0xc0
    4644:	029b      	lsls	r3, r3, #10
    4646:	430b      	orrs	r3, r1
    4648:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    464a:	3041      	adds	r0, #65	; 0x41
    464c:	4b08      	ldr	r3, [pc, #32]	; (4670 <OPT3001_write+0x84>)
    464e:	4798      	blx	r3
    4650:	e7f4      	b.n	463c <OPT3001_write+0x50>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4652:	4a06      	ldr	r2, [pc, #24]	; (466c <OPT3001_write+0x80>)
    4654:	6851      	ldr	r1, [r2, #4]
    4656:	23c0      	movs	r3, #192	; 0xc0
    4658:	029b      	lsls	r3, r3, #10
    465a:	430b      	orrs	r3, r1
    465c:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    465e:	2042      	movs	r0, #66	; 0x42
    4660:	4b03      	ldr	r3, [pc, #12]	; (4670 <OPT3001_write+0x84>)
    4662:	4798      	blx	r3
    4664:	e7ea      	b.n	463c <OPT3001_write+0x50>
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	200003a8 	.word	0x200003a8
    466c:	42001000 	.word	0x42001000
    4670:	00000b1d 	.word	0x00000b1d

00004674 <OPT3001_init>:
void OPT3001_init(){
    4674:	b510      	push	{r4, lr}
	OPT3001_write(OPT3001_CONFIG,0xc4,0x10);
    4676:	2210      	movs	r2, #16
    4678:	21c4      	movs	r1, #196	; 0xc4
    467a:	2001      	movs	r0, #1
    467c:	4c03      	ldr	r4, [pc, #12]	; (468c <OPT3001_init+0x18>)
    467e:	47a0      	blx	r4
	OPT3001_write(OPT3001_RESULT,0x00,0x00);
    4680:	2200      	movs	r2, #0
    4682:	2100      	movs	r1, #0
    4684:	2000      	movs	r0, #0
    4686:	47a0      	blx	r4
}
    4688:	bd10      	pop	{r4, pc}
    468a:	46c0      	nop			; (mov r8, r8)
    468c:	000045ed 	.word	0x000045ed

00004690 <Si7021_init>:
}

void Si7021_init(){
	
	
}
    4690:	4770      	bx	lr
	...

00004694 <Si7021_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    4694:	2281      	movs	r2, #129	; 0x81
    4696:	4b1c      	ldr	r3, [pc, #112]	; (4708 <Si7021_read+0x74>)
    4698:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    469a:	0019      	movs	r1, r3
    469c:	3a7f      	subs	r2, #127	; 0x7f
    469e:	7e0b      	ldrb	r3, [r1, #24]
    46a0:	4213      	tst	r3, r2
    46a2:	d0fc      	beq.n	469e <Si7021_read+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    46a4:	4b18      	ldr	r3, [pc, #96]	; (4708 <Si7021_read+0x74>)
    46a6:	8b5b      	ldrh	r3, [r3, #26]
    46a8:	075b      	lsls	r3, r3, #29
    46aa:	d507      	bpl.n	46bc <Si7021_read+0x28>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    46ac:	4a16      	ldr	r2, [pc, #88]	; (4708 <Si7021_read+0x74>)
    46ae:	6851      	ldr	r1, [r2, #4]
    46b0:	23c0      	movs	r3, #192	; 0xc0
    46b2:	029b      	lsls	r3, r3, #10
    46b4:	430b      	orrs	r3, r1
    46b6:	6053      	str	r3, [r2, #4]

uint8_t* Si7021_read(){
	
	i2c_read(Si7021_read_buffer,2,SI7021_SLAVE_ADDR);
	return Si7021_read_buffer;
}
    46b8:	4814      	ldr	r0, [pc, #80]	; (470c <Si7021_read+0x78>)
    46ba:	4770      	bx	lr
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    46bc:	4b12      	ldr	r3, [pc, #72]	; (4708 <Si7021_read+0x74>)
    46be:	685a      	ldr	r2, [r3, #4]
    46c0:	4913      	ldr	r1, [pc, #76]	; (4710 <Si7021_read+0x7c>)
    46c2:	400a      	ands	r2, r1
    46c4:	605a      	str	r2, [r3, #4]
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    46c6:	2228      	movs	r2, #40	; 0x28
    46c8:	5c9a      	ldrb	r2, [r3, r2]
    46ca:	4b10      	ldr	r3, [pc, #64]	; (470c <Si7021_read+0x78>)
    46cc:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    46ce:	490e      	ldr	r1, [pc, #56]	; (4708 <Si7021_read+0x74>)
    46d0:	2202      	movs	r2, #2
    46d2:	7e0b      	ldrb	r3, [r1, #24]
    46d4:	4213      	tst	r3, r2
    46d6:	d0fc      	beq.n	46d2 <Si7021_read+0x3e>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    46d8:	4b0b      	ldr	r3, [pc, #44]	; (4708 <Si7021_read+0x74>)
    46da:	6859      	ldr	r1, [r3, #4]
    46dc:	2280      	movs	r2, #128	; 0x80
    46de:	02d2      	lsls	r2, r2, #11
    46e0:	430a      	orrs	r2, r1
    46e2:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    46e4:	6859      	ldr	r1, [r3, #4]
    46e6:	22c0      	movs	r2, #192	; 0xc0
    46e8:	0292      	lsls	r2, r2, #10
    46ea:	430a      	orrs	r2, r1
    46ec:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    46ee:	2228      	movs	r2, #40	; 0x28
    46f0:	5c99      	ldrb	r1, [r3, r2]
    46f2:	4a06      	ldr	r2, [pc, #24]	; (470c <Si7021_read+0x78>)
    46f4:	7051      	strb	r1, [r2, #1]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    46f6:	8b5a      	ldrh	r2, [r3, #26]
    46f8:	2110      	movs	r1, #16
    46fa:	430a      	orrs	r2, r1
    46fc:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    46fe:	001a      	movs	r2, r3
    4700:	69d3      	ldr	r3, [r2, #28]
    4702:	2b00      	cmp	r3, #0
    4704:	d1fc      	bne.n	4700 <Si7021_read+0x6c>
    4706:	e7d7      	b.n	46b8 <Si7021_read+0x24>
    4708:	42001000 	.word	0x42001000
    470c:	200003ac 	.word	0x200003ac
    4710:	fffbffff 	.word	0xfffbffff

00004714 <Si7021_command>:

void Si7021_writereg(uint8_t reg, uint8_t byte1){
	
}

void Si7021_command(uint8_t command){
    4714:	b510      	push	{r4, lr}
	
	Si7021_write_buffer[0] = command;	
    4716:	4b1a      	ldr	r3, [pc, #104]	; (4780 <Si7021_command+0x6c>)
    4718:	7018      	strb	r0, [r3, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    471a:	2280      	movs	r2, #128	; 0x80
    471c:	4b19      	ldr	r3, [pc, #100]	; (4784 <Si7021_command+0x70>)
    471e:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4720:	0019      	movs	r1, r3
    4722:	3a7f      	subs	r2, #127	; 0x7f
    4724:	7e0b      	ldrb	r3, [r1, #24]
    4726:	4213      	tst	r3, r2
    4728:	d0fc      	beq.n	4724 <Si7021_command+0x10>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    472a:	4b16      	ldr	r3, [pc, #88]	; (4784 <Si7021_command+0x70>)
    472c:	8b5b      	ldrh	r3, [r3, #26]
    472e:	075b      	lsls	r3, r3, #29
    4730:	d412      	bmi.n	4758 <Si7021_command+0x44>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4732:	2328      	movs	r3, #40	; 0x28
    4734:	4a13      	ldr	r2, [pc, #76]	; (4784 <Si7021_command+0x70>)
    4736:	54d0      	strb	r0, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4738:	0011      	movs	r1, r2
    473a:	2201      	movs	r2, #1
    473c:	7e0b      	ldrb	r3, [r1, #24]
    473e:	4213      	tst	r3, r2
    4740:	d0fc      	beq.n	473c <Si7021_command+0x28>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4742:	4b10      	ldr	r3, [pc, #64]	; (4784 <Si7021_command+0x70>)
    4744:	8b5b      	ldrh	r3, [r3, #26]
    4746:	075b      	lsls	r3, r3, #29
    4748:	d410      	bmi.n	476c <Si7021_command+0x58>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    474a:	4a0e      	ldr	r2, [pc, #56]	; (4784 <Si7021_command+0x70>)
    474c:	6851      	ldr	r1, [r2, #4]
    474e:	23c0      	movs	r3, #192	; 0xc0
    4750:	029b      	lsls	r3, r3, #10
    4752:	430b      	orrs	r3, r1
    4754:	6053      	str	r3, [r2, #4]
	i2c_write(Si7021_write_buffer,1,SI7021_SLAVE_ADDR);

}
    4756:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4758:	4a0a      	ldr	r2, [pc, #40]	; (4784 <Si7021_command+0x70>)
    475a:	6851      	ldr	r1, [r2, #4]
    475c:	23c0      	movs	r3, #192	; 0xc0
    475e:	029b      	lsls	r3, r3, #10
    4760:	430b      	orrs	r3, r1
    4762:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    4764:	2041      	movs	r0, #65	; 0x41
    4766:	4b08      	ldr	r3, [pc, #32]	; (4788 <Si7021_command+0x74>)
    4768:	4798      	blx	r3
    476a:	e7f4      	b.n	4756 <Si7021_command+0x42>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    476c:	4a05      	ldr	r2, [pc, #20]	; (4784 <Si7021_command+0x70>)
    476e:	6851      	ldr	r1, [r2, #4]
    4770:	23c0      	movs	r3, #192	; 0xc0
    4772:	029b      	lsls	r3, r3, #10
    4774:	430b      	orrs	r3, r1
    4776:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    4778:	2042      	movs	r0, #66	; 0x42
    477a:	4b03      	ldr	r3, [pc, #12]	; (4788 <Si7021_command+0x74>)
    477c:	4798      	blx	r3
    477e:	e7ea      	b.n	4756 <Si7021_command+0x42>
    4780:	200003b0 	.word	0x200003b0
    4784:	42001000 	.word	0x42001000
    4788:	00000b1d 	.word	0x00000b1d

0000478c <Si7021_GetTemp>:
int Si7021_GetTemp(){
    478c:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_T_HMH);
    478e:	20e3      	movs	r0, #227	; 0xe3
    4790:	4b16      	ldr	r3, [pc, #88]	; (47ec <Si7021_GetTemp+0x60>)
    4792:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4794:	2200      	movs	r2, #0
    4796:	4b16      	ldr	r3, [pc, #88]	; (47f0 <Si7021_GetTemp+0x64>)
    4798:	821a      	strh	r2, [r3, #16]
    479a:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    479c:	001a      	movs	r2, r3
    479e:	2010      	movs	r0, #16
    47a0:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    47a2:	7b93      	ldrb	r3, [r2, #14]
    47a4:	06db      	lsls	r3, r3, #27
    47a6:	d5fc      	bpl.n	47a2 <Si7021_GetTemp+0x16>
    47a8:	3901      	subs	r1, #1
    47aa:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    47ac:	2900      	cmp	r1, #0
    47ae:	d1f7      	bne.n	47a0 <Si7021_GetTemp+0x14>
	Si7021_data = Si7021_read();
    47b0:	4b10      	ldr	r3, [pc, #64]	; (47f4 <Si7021_GetTemp+0x68>)
    47b2:	4798      	blx	r3
    47b4:	4b10      	ldr	r3, [pc, #64]	; (47f8 <Si7021_GetTemp+0x6c>)
    47b6:	6018      	str	r0, [r3, #0]
	temp_data = (Si7021_data[0]<<8) | Si7021_data[1];
    47b8:	7803      	ldrb	r3, [r0, #0]
    47ba:	021b      	lsls	r3, r3, #8
    47bc:	7840      	ldrb	r0, [r0, #1]
    47be:	4318      	orrs	r0, r3
    47c0:	4b0e      	ldr	r3, [pc, #56]	; (47fc <Si7021_GetTemp+0x70>)
    47c2:	8018      	strh	r0, [r3, #0]
	temp1 = ((175.72*temp_data)/65535)-46.85;	
    47c4:	4b0e      	ldr	r3, [pc, #56]	; (4800 <Si7021_GetTemp+0x74>)
    47c6:	4798      	blx	r3
    47c8:	4a0e      	ldr	r2, [pc, #56]	; (4804 <Si7021_GetTemp+0x78>)
    47ca:	4b0f      	ldr	r3, [pc, #60]	; (4808 <Si7021_GetTemp+0x7c>)
    47cc:	4c0f      	ldr	r4, [pc, #60]	; (480c <Si7021_GetTemp+0x80>)
    47ce:	47a0      	blx	r4
    47d0:	2200      	movs	r2, #0
    47d2:	4b0f      	ldr	r3, [pc, #60]	; (4810 <Si7021_GetTemp+0x84>)
    47d4:	4c0f      	ldr	r4, [pc, #60]	; (4814 <Si7021_GetTemp+0x88>)
    47d6:	47a0      	blx	r4
    47d8:	4a0f      	ldr	r2, [pc, #60]	; (4818 <Si7021_GetTemp+0x8c>)
    47da:	4b10      	ldr	r3, [pc, #64]	; (481c <Si7021_GetTemp+0x90>)
    47dc:	4c10      	ldr	r4, [pc, #64]	; (4820 <Si7021_GetTemp+0x94>)
    47de:	47a0      	blx	r4
    47e0:	4b10      	ldr	r3, [pc, #64]	; (4824 <Si7021_GetTemp+0x98>)
    47e2:	4798      	blx	r3
    47e4:	4b10      	ldr	r3, [pc, #64]	; (4828 <Si7021_GetTemp+0x9c>)
    47e6:	6018      	str	r0, [r3, #0]
}
    47e8:	bd10      	pop	{r4, pc}
    47ea:	46c0      	nop			; (mov r8, r8)
    47ec:	00004715 	.word	0x00004715
    47f0:	42003000 	.word	0x42003000
    47f4:	00004695 	.word	0x00004695
    47f8:	2000041c 	.word	0x2000041c
    47fc:	20000842 	.word	0x20000842
    4800:	00005e31 	.word	0x00005e31
    4804:	3d70a3d7 	.word	0x3d70a3d7
    4808:	4065f70a 	.word	0x4065f70a
    480c:	0000529d 	.word	0x0000529d
    4810:	40efffe0 	.word	0x40efffe0
    4814:	00004c35 	.word	0x00004c35
    4818:	cccccccd 	.word	0xcccccccd
    481c:	40476ccc 	.word	0x40476ccc
    4820:	0000579d 	.word	0x0000579d
    4824:	00005dc9 	.word	0x00005dc9
    4828:	200003f4 	.word	0x200003f4

0000482c <Si7021_GetRH>:
int Si7021_GetRH(){
    482c:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_RH_HMH);
    482e:	20e5      	movs	r0, #229	; 0xe5
    4830:	4b16      	ldr	r3, [pc, #88]	; (488c <Si7021_GetRH+0x60>)
    4832:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4834:	2200      	movs	r2, #0
    4836:	4b16      	ldr	r3, [pc, #88]	; (4890 <Si7021_GetRH+0x64>)
    4838:	821a      	strh	r2, [r3, #16]
    483a:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    483c:	001a      	movs	r2, r3
    483e:	2010      	movs	r0, #16
    4840:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4842:	7b93      	ldrb	r3, [r2, #14]
    4844:	06db      	lsls	r3, r3, #27
    4846:	d5fc      	bpl.n	4842 <Si7021_GetRH+0x16>
    4848:	3901      	subs	r1, #1
    484a:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    484c:	2900      	cmp	r1, #0
    484e:	d1f7      	bne.n	4840 <Si7021_GetRH+0x14>
	Si7021_data = Si7021_read();
    4850:	4b10      	ldr	r3, [pc, #64]	; (4894 <Si7021_GetRH+0x68>)
    4852:	4798      	blx	r3
    4854:	4b10      	ldr	r3, [pc, #64]	; (4898 <Si7021_GetRH+0x6c>)
    4856:	6018      	str	r0, [r3, #0]
	RH_data = (Si7021_data[0]<<8) | Si7021_data[1];
    4858:	7803      	ldrb	r3, [r0, #0]
    485a:	021b      	lsls	r3, r3, #8
    485c:	7840      	ldrb	r0, [r0, #1]
    485e:	4318      	orrs	r0, r3
    4860:	4b0e      	ldr	r3, [pc, #56]	; (489c <Si7021_GetRH+0x70>)
    4862:	8018      	strh	r0, [r3, #0]
	RH1 = ((175.72*RH_data)/65535)-46.85;
    4864:	4b0e      	ldr	r3, [pc, #56]	; (48a0 <Si7021_GetRH+0x74>)
    4866:	4798      	blx	r3
    4868:	4a0e      	ldr	r2, [pc, #56]	; (48a4 <Si7021_GetRH+0x78>)
    486a:	4b0f      	ldr	r3, [pc, #60]	; (48a8 <Si7021_GetRH+0x7c>)
    486c:	4c0f      	ldr	r4, [pc, #60]	; (48ac <Si7021_GetRH+0x80>)
    486e:	47a0      	blx	r4
    4870:	2200      	movs	r2, #0
    4872:	4b0f      	ldr	r3, [pc, #60]	; (48b0 <Si7021_GetRH+0x84>)
    4874:	4c0f      	ldr	r4, [pc, #60]	; (48b4 <Si7021_GetRH+0x88>)
    4876:	47a0      	blx	r4
    4878:	4a0f      	ldr	r2, [pc, #60]	; (48b8 <Si7021_GetRH+0x8c>)
    487a:	4b10      	ldr	r3, [pc, #64]	; (48bc <Si7021_GetRH+0x90>)
    487c:	4c10      	ldr	r4, [pc, #64]	; (48c0 <Si7021_GetRH+0x94>)
    487e:	47a0      	blx	r4
    4880:	4b10      	ldr	r3, [pc, #64]	; (48c4 <Si7021_GetRH+0x98>)
    4882:	4798      	blx	r3
    4884:	4b10      	ldr	r3, [pc, #64]	; (48c8 <Si7021_GetRH+0x9c>)
    4886:	6018      	str	r0, [r3, #0]
}
    4888:	bd10      	pop	{r4, pc}
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	00004715 	.word	0x00004715
    4890:	42003000 	.word	0x42003000
    4894:	00004695 	.word	0x00004695
    4898:	2000041c 	.word	0x2000041c
    489c:	20000840 	.word	0x20000840
    48a0:	00005e31 	.word	0x00005e31
    48a4:	3d70a3d7 	.word	0x3d70a3d7
    48a8:	4065f70a 	.word	0x4065f70a
    48ac:	0000529d 	.word	0x0000529d
    48b0:	40efffe0 	.word	0x40efffe0
    48b4:	00004c35 	.word	0x00004c35
    48b8:	cccccccd 	.word	0xcccccccd
    48bc:	40476ccc 	.word	0x40476ccc
    48c0:	0000579d 	.word	0x0000579d
    48c4:	00005dc9 	.word	0x00005dc9
    48c8:	20000400 	.word	0x20000400

000048cc <__udivsi3>:
    48cc:	2200      	movs	r2, #0
    48ce:	0843      	lsrs	r3, r0, #1
    48d0:	428b      	cmp	r3, r1
    48d2:	d374      	bcc.n	49be <__udivsi3+0xf2>
    48d4:	0903      	lsrs	r3, r0, #4
    48d6:	428b      	cmp	r3, r1
    48d8:	d35f      	bcc.n	499a <__udivsi3+0xce>
    48da:	0a03      	lsrs	r3, r0, #8
    48dc:	428b      	cmp	r3, r1
    48de:	d344      	bcc.n	496a <__udivsi3+0x9e>
    48e0:	0b03      	lsrs	r3, r0, #12
    48e2:	428b      	cmp	r3, r1
    48e4:	d328      	bcc.n	4938 <__udivsi3+0x6c>
    48e6:	0c03      	lsrs	r3, r0, #16
    48e8:	428b      	cmp	r3, r1
    48ea:	d30d      	bcc.n	4908 <__udivsi3+0x3c>
    48ec:	22ff      	movs	r2, #255	; 0xff
    48ee:	0209      	lsls	r1, r1, #8
    48f0:	ba12      	rev	r2, r2
    48f2:	0c03      	lsrs	r3, r0, #16
    48f4:	428b      	cmp	r3, r1
    48f6:	d302      	bcc.n	48fe <__udivsi3+0x32>
    48f8:	1212      	asrs	r2, r2, #8
    48fa:	0209      	lsls	r1, r1, #8
    48fc:	d065      	beq.n	49ca <__udivsi3+0xfe>
    48fe:	0b03      	lsrs	r3, r0, #12
    4900:	428b      	cmp	r3, r1
    4902:	d319      	bcc.n	4938 <__udivsi3+0x6c>
    4904:	e000      	b.n	4908 <__udivsi3+0x3c>
    4906:	0a09      	lsrs	r1, r1, #8
    4908:	0bc3      	lsrs	r3, r0, #15
    490a:	428b      	cmp	r3, r1
    490c:	d301      	bcc.n	4912 <__udivsi3+0x46>
    490e:	03cb      	lsls	r3, r1, #15
    4910:	1ac0      	subs	r0, r0, r3
    4912:	4152      	adcs	r2, r2
    4914:	0b83      	lsrs	r3, r0, #14
    4916:	428b      	cmp	r3, r1
    4918:	d301      	bcc.n	491e <__udivsi3+0x52>
    491a:	038b      	lsls	r3, r1, #14
    491c:	1ac0      	subs	r0, r0, r3
    491e:	4152      	adcs	r2, r2
    4920:	0b43      	lsrs	r3, r0, #13
    4922:	428b      	cmp	r3, r1
    4924:	d301      	bcc.n	492a <__udivsi3+0x5e>
    4926:	034b      	lsls	r3, r1, #13
    4928:	1ac0      	subs	r0, r0, r3
    492a:	4152      	adcs	r2, r2
    492c:	0b03      	lsrs	r3, r0, #12
    492e:	428b      	cmp	r3, r1
    4930:	d301      	bcc.n	4936 <__udivsi3+0x6a>
    4932:	030b      	lsls	r3, r1, #12
    4934:	1ac0      	subs	r0, r0, r3
    4936:	4152      	adcs	r2, r2
    4938:	0ac3      	lsrs	r3, r0, #11
    493a:	428b      	cmp	r3, r1
    493c:	d301      	bcc.n	4942 <__udivsi3+0x76>
    493e:	02cb      	lsls	r3, r1, #11
    4940:	1ac0      	subs	r0, r0, r3
    4942:	4152      	adcs	r2, r2
    4944:	0a83      	lsrs	r3, r0, #10
    4946:	428b      	cmp	r3, r1
    4948:	d301      	bcc.n	494e <__udivsi3+0x82>
    494a:	028b      	lsls	r3, r1, #10
    494c:	1ac0      	subs	r0, r0, r3
    494e:	4152      	adcs	r2, r2
    4950:	0a43      	lsrs	r3, r0, #9
    4952:	428b      	cmp	r3, r1
    4954:	d301      	bcc.n	495a <__udivsi3+0x8e>
    4956:	024b      	lsls	r3, r1, #9
    4958:	1ac0      	subs	r0, r0, r3
    495a:	4152      	adcs	r2, r2
    495c:	0a03      	lsrs	r3, r0, #8
    495e:	428b      	cmp	r3, r1
    4960:	d301      	bcc.n	4966 <__udivsi3+0x9a>
    4962:	020b      	lsls	r3, r1, #8
    4964:	1ac0      	subs	r0, r0, r3
    4966:	4152      	adcs	r2, r2
    4968:	d2cd      	bcs.n	4906 <__udivsi3+0x3a>
    496a:	09c3      	lsrs	r3, r0, #7
    496c:	428b      	cmp	r3, r1
    496e:	d301      	bcc.n	4974 <__udivsi3+0xa8>
    4970:	01cb      	lsls	r3, r1, #7
    4972:	1ac0      	subs	r0, r0, r3
    4974:	4152      	adcs	r2, r2
    4976:	0983      	lsrs	r3, r0, #6
    4978:	428b      	cmp	r3, r1
    497a:	d301      	bcc.n	4980 <__udivsi3+0xb4>
    497c:	018b      	lsls	r3, r1, #6
    497e:	1ac0      	subs	r0, r0, r3
    4980:	4152      	adcs	r2, r2
    4982:	0943      	lsrs	r3, r0, #5
    4984:	428b      	cmp	r3, r1
    4986:	d301      	bcc.n	498c <__udivsi3+0xc0>
    4988:	014b      	lsls	r3, r1, #5
    498a:	1ac0      	subs	r0, r0, r3
    498c:	4152      	adcs	r2, r2
    498e:	0903      	lsrs	r3, r0, #4
    4990:	428b      	cmp	r3, r1
    4992:	d301      	bcc.n	4998 <__udivsi3+0xcc>
    4994:	010b      	lsls	r3, r1, #4
    4996:	1ac0      	subs	r0, r0, r3
    4998:	4152      	adcs	r2, r2
    499a:	08c3      	lsrs	r3, r0, #3
    499c:	428b      	cmp	r3, r1
    499e:	d301      	bcc.n	49a4 <__udivsi3+0xd8>
    49a0:	00cb      	lsls	r3, r1, #3
    49a2:	1ac0      	subs	r0, r0, r3
    49a4:	4152      	adcs	r2, r2
    49a6:	0883      	lsrs	r3, r0, #2
    49a8:	428b      	cmp	r3, r1
    49aa:	d301      	bcc.n	49b0 <__udivsi3+0xe4>
    49ac:	008b      	lsls	r3, r1, #2
    49ae:	1ac0      	subs	r0, r0, r3
    49b0:	4152      	adcs	r2, r2
    49b2:	0843      	lsrs	r3, r0, #1
    49b4:	428b      	cmp	r3, r1
    49b6:	d301      	bcc.n	49bc <__udivsi3+0xf0>
    49b8:	004b      	lsls	r3, r1, #1
    49ba:	1ac0      	subs	r0, r0, r3
    49bc:	4152      	adcs	r2, r2
    49be:	1a41      	subs	r1, r0, r1
    49c0:	d200      	bcs.n	49c4 <__udivsi3+0xf8>
    49c2:	4601      	mov	r1, r0
    49c4:	4152      	adcs	r2, r2
    49c6:	4610      	mov	r0, r2
    49c8:	4770      	bx	lr
    49ca:	e7ff      	b.n	49cc <__udivsi3+0x100>
    49cc:	b501      	push	{r0, lr}
    49ce:	2000      	movs	r0, #0
    49d0:	f000 f8f0 	bl	4bb4 <__aeabi_idiv0>
    49d4:	bd02      	pop	{r1, pc}
    49d6:	46c0      	nop			; (mov r8, r8)

000049d8 <__aeabi_uidivmod>:
    49d8:	2900      	cmp	r1, #0
    49da:	d0f7      	beq.n	49cc <__udivsi3+0x100>
    49dc:	e776      	b.n	48cc <__udivsi3>
    49de:	4770      	bx	lr

000049e0 <__divsi3>:
    49e0:	4603      	mov	r3, r0
    49e2:	430b      	orrs	r3, r1
    49e4:	d47f      	bmi.n	4ae6 <__divsi3+0x106>
    49e6:	2200      	movs	r2, #0
    49e8:	0843      	lsrs	r3, r0, #1
    49ea:	428b      	cmp	r3, r1
    49ec:	d374      	bcc.n	4ad8 <__divsi3+0xf8>
    49ee:	0903      	lsrs	r3, r0, #4
    49f0:	428b      	cmp	r3, r1
    49f2:	d35f      	bcc.n	4ab4 <__divsi3+0xd4>
    49f4:	0a03      	lsrs	r3, r0, #8
    49f6:	428b      	cmp	r3, r1
    49f8:	d344      	bcc.n	4a84 <__divsi3+0xa4>
    49fa:	0b03      	lsrs	r3, r0, #12
    49fc:	428b      	cmp	r3, r1
    49fe:	d328      	bcc.n	4a52 <__divsi3+0x72>
    4a00:	0c03      	lsrs	r3, r0, #16
    4a02:	428b      	cmp	r3, r1
    4a04:	d30d      	bcc.n	4a22 <__divsi3+0x42>
    4a06:	22ff      	movs	r2, #255	; 0xff
    4a08:	0209      	lsls	r1, r1, #8
    4a0a:	ba12      	rev	r2, r2
    4a0c:	0c03      	lsrs	r3, r0, #16
    4a0e:	428b      	cmp	r3, r1
    4a10:	d302      	bcc.n	4a18 <__divsi3+0x38>
    4a12:	1212      	asrs	r2, r2, #8
    4a14:	0209      	lsls	r1, r1, #8
    4a16:	d065      	beq.n	4ae4 <__divsi3+0x104>
    4a18:	0b03      	lsrs	r3, r0, #12
    4a1a:	428b      	cmp	r3, r1
    4a1c:	d319      	bcc.n	4a52 <__divsi3+0x72>
    4a1e:	e000      	b.n	4a22 <__divsi3+0x42>
    4a20:	0a09      	lsrs	r1, r1, #8
    4a22:	0bc3      	lsrs	r3, r0, #15
    4a24:	428b      	cmp	r3, r1
    4a26:	d301      	bcc.n	4a2c <__divsi3+0x4c>
    4a28:	03cb      	lsls	r3, r1, #15
    4a2a:	1ac0      	subs	r0, r0, r3
    4a2c:	4152      	adcs	r2, r2
    4a2e:	0b83      	lsrs	r3, r0, #14
    4a30:	428b      	cmp	r3, r1
    4a32:	d301      	bcc.n	4a38 <__divsi3+0x58>
    4a34:	038b      	lsls	r3, r1, #14
    4a36:	1ac0      	subs	r0, r0, r3
    4a38:	4152      	adcs	r2, r2
    4a3a:	0b43      	lsrs	r3, r0, #13
    4a3c:	428b      	cmp	r3, r1
    4a3e:	d301      	bcc.n	4a44 <__divsi3+0x64>
    4a40:	034b      	lsls	r3, r1, #13
    4a42:	1ac0      	subs	r0, r0, r3
    4a44:	4152      	adcs	r2, r2
    4a46:	0b03      	lsrs	r3, r0, #12
    4a48:	428b      	cmp	r3, r1
    4a4a:	d301      	bcc.n	4a50 <__divsi3+0x70>
    4a4c:	030b      	lsls	r3, r1, #12
    4a4e:	1ac0      	subs	r0, r0, r3
    4a50:	4152      	adcs	r2, r2
    4a52:	0ac3      	lsrs	r3, r0, #11
    4a54:	428b      	cmp	r3, r1
    4a56:	d301      	bcc.n	4a5c <__divsi3+0x7c>
    4a58:	02cb      	lsls	r3, r1, #11
    4a5a:	1ac0      	subs	r0, r0, r3
    4a5c:	4152      	adcs	r2, r2
    4a5e:	0a83      	lsrs	r3, r0, #10
    4a60:	428b      	cmp	r3, r1
    4a62:	d301      	bcc.n	4a68 <__divsi3+0x88>
    4a64:	028b      	lsls	r3, r1, #10
    4a66:	1ac0      	subs	r0, r0, r3
    4a68:	4152      	adcs	r2, r2
    4a6a:	0a43      	lsrs	r3, r0, #9
    4a6c:	428b      	cmp	r3, r1
    4a6e:	d301      	bcc.n	4a74 <__divsi3+0x94>
    4a70:	024b      	lsls	r3, r1, #9
    4a72:	1ac0      	subs	r0, r0, r3
    4a74:	4152      	adcs	r2, r2
    4a76:	0a03      	lsrs	r3, r0, #8
    4a78:	428b      	cmp	r3, r1
    4a7a:	d301      	bcc.n	4a80 <__divsi3+0xa0>
    4a7c:	020b      	lsls	r3, r1, #8
    4a7e:	1ac0      	subs	r0, r0, r3
    4a80:	4152      	adcs	r2, r2
    4a82:	d2cd      	bcs.n	4a20 <__divsi3+0x40>
    4a84:	09c3      	lsrs	r3, r0, #7
    4a86:	428b      	cmp	r3, r1
    4a88:	d301      	bcc.n	4a8e <__divsi3+0xae>
    4a8a:	01cb      	lsls	r3, r1, #7
    4a8c:	1ac0      	subs	r0, r0, r3
    4a8e:	4152      	adcs	r2, r2
    4a90:	0983      	lsrs	r3, r0, #6
    4a92:	428b      	cmp	r3, r1
    4a94:	d301      	bcc.n	4a9a <__divsi3+0xba>
    4a96:	018b      	lsls	r3, r1, #6
    4a98:	1ac0      	subs	r0, r0, r3
    4a9a:	4152      	adcs	r2, r2
    4a9c:	0943      	lsrs	r3, r0, #5
    4a9e:	428b      	cmp	r3, r1
    4aa0:	d301      	bcc.n	4aa6 <__divsi3+0xc6>
    4aa2:	014b      	lsls	r3, r1, #5
    4aa4:	1ac0      	subs	r0, r0, r3
    4aa6:	4152      	adcs	r2, r2
    4aa8:	0903      	lsrs	r3, r0, #4
    4aaa:	428b      	cmp	r3, r1
    4aac:	d301      	bcc.n	4ab2 <__divsi3+0xd2>
    4aae:	010b      	lsls	r3, r1, #4
    4ab0:	1ac0      	subs	r0, r0, r3
    4ab2:	4152      	adcs	r2, r2
    4ab4:	08c3      	lsrs	r3, r0, #3
    4ab6:	428b      	cmp	r3, r1
    4ab8:	d301      	bcc.n	4abe <__divsi3+0xde>
    4aba:	00cb      	lsls	r3, r1, #3
    4abc:	1ac0      	subs	r0, r0, r3
    4abe:	4152      	adcs	r2, r2
    4ac0:	0883      	lsrs	r3, r0, #2
    4ac2:	428b      	cmp	r3, r1
    4ac4:	d301      	bcc.n	4aca <__divsi3+0xea>
    4ac6:	008b      	lsls	r3, r1, #2
    4ac8:	1ac0      	subs	r0, r0, r3
    4aca:	4152      	adcs	r2, r2
    4acc:	0843      	lsrs	r3, r0, #1
    4ace:	428b      	cmp	r3, r1
    4ad0:	d301      	bcc.n	4ad6 <__divsi3+0xf6>
    4ad2:	004b      	lsls	r3, r1, #1
    4ad4:	1ac0      	subs	r0, r0, r3
    4ad6:	4152      	adcs	r2, r2
    4ad8:	1a41      	subs	r1, r0, r1
    4ada:	d200      	bcs.n	4ade <__divsi3+0xfe>
    4adc:	4601      	mov	r1, r0
    4ade:	4152      	adcs	r2, r2
    4ae0:	4610      	mov	r0, r2
    4ae2:	4770      	bx	lr
    4ae4:	e05d      	b.n	4ba2 <__divsi3+0x1c2>
    4ae6:	0fca      	lsrs	r2, r1, #31
    4ae8:	d000      	beq.n	4aec <__divsi3+0x10c>
    4aea:	4249      	negs	r1, r1
    4aec:	1003      	asrs	r3, r0, #32
    4aee:	d300      	bcc.n	4af2 <__divsi3+0x112>
    4af0:	4240      	negs	r0, r0
    4af2:	4053      	eors	r3, r2
    4af4:	2200      	movs	r2, #0
    4af6:	469c      	mov	ip, r3
    4af8:	0903      	lsrs	r3, r0, #4
    4afa:	428b      	cmp	r3, r1
    4afc:	d32d      	bcc.n	4b5a <__divsi3+0x17a>
    4afe:	0a03      	lsrs	r3, r0, #8
    4b00:	428b      	cmp	r3, r1
    4b02:	d312      	bcc.n	4b2a <__divsi3+0x14a>
    4b04:	22fc      	movs	r2, #252	; 0xfc
    4b06:	0189      	lsls	r1, r1, #6
    4b08:	ba12      	rev	r2, r2
    4b0a:	0a03      	lsrs	r3, r0, #8
    4b0c:	428b      	cmp	r3, r1
    4b0e:	d30c      	bcc.n	4b2a <__divsi3+0x14a>
    4b10:	0189      	lsls	r1, r1, #6
    4b12:	1192      	asrs	r2, r2, #6
    4b14:	428b      	cmp	r3, r1
    4b16:	d308      	bcc.n	4b2a <__divsi3+0x14a>
    4b18:	0189      	lsls	r1, r1, #6
    4b1a:	1192      	asrs	r2, r2, #6
    4b1c:	428b      	cmp	r3, r1
    4b1e:	d304      	bcc.n	4b2a <__divsi3+0x14a>
    4b20:	0189      	lsls	r1, r1, #6
    4b22:	d03a      	beq.n	4b9a <__divsi3+0x1ba>
    4b24:	1192      	asrs	r2, r2, #6
    4b26:	e000      	b.n	4b2a <__divsi3+0x14a>
    4b28:	0989      	lsrs	r1, r1, #6
    4b2a:	09c3      	lsrs	r3, r0, #7
    4b2c:	428b      	cmp	r3, r1
    4b2e:	d301      	bcc.n	4b34 <__divsi3+0x154>
    4b30:	01cb      	lsls	r3, r1, #7
    4b32:	1ac0      	subs	r0, r0, r3
    4b34:	4152      	adcs	r2, r2
    4b36:	0983      	lsrs	r3, r0, #6
    4b38:	428b      	cmp	r3, r1
    4b3a:	d301      	bcc.n	4b40 <__divsi3+0x160>
    4b3c:	018b      	lsls	r3, r1, #6
    4b3e:	1ac0      	subs	r0, r0, r3
    4b40:	4152      	adcs	r2, r2
    4b42:	0943      	lsrs	r3, r0, #5
    4b44:	428b      	cmp	r3, r1
    4b46:	d301      	bcc.n	4b4c <__divsi3+0x16c>
    4b48:	014b      	lsls	r3, r1, #5
    4b4a:	1ac0      	subs	r0, r0, r3
    4b4c:	4152      	adcs	r2, r2
    4b4e:	0903      	lsrs	r3, r0, #4
    4b50:	428b      	cmp	r3, r1
    4b52:	d301      	bcc.n	4b58 <__divsi3+0x178>
    4b54:	010b      	lsls	r3, r1, #4
    4b56:	1ac0      	subs	r0, r0, r3
    4b58:	4152      	adcs	r2, r2
    4b5a:	08c3      	lsrs	r3, r0, #3
    4b5c:	428b      	cmp	r3, r1
    4b5e:	d301      	bcc.n	4b64 <__divsi3+0x184>
    4b60:	00cb      	lsls	r3, r1, #3
    4b62:	1ac0      	subs	r0, r0, r3
    4b64:	4152      	adcs	r2, r2
    4b66:	0883      	lsrs	r3, r0, #2
    4b68:	428b      	cmp	r3, r1
    4b6a:	d301      	bcc.n	4b70 <__divsi3+0x190>
    4b6c:	008b      	lsls	r3, r1, #2
    4b6e:	1ac0      	subs	r0, r0, r3
    4b70:	4152      	adcs	r2, r2
    4b72:	d2d9      	bcs.n	4b28 <__divsi3+0x148>
    4b74:	0843      	lsrs	r3, r0, #1
    4b76:	428b      	cmp	r3, r1
    4b78:	d301      	bcc.n	4b7e <__divsi3+0x19e>
    4b7a:	004b      	lsls	r3, r1, #1
    4b7c:	1ac0      	subs	r0, r0, r3
    4b7e:	4152      	adcs	r2, r2
    4b80:	1a41      	subs	r1, r0, r1
    4b82:	d200      	bcs.n	4b86 <__divsi3+0x1a6>
    4b84:	4601      	mov	r1, r0
    4b86:	4663      	mov	r3, ip
    4b88:	4152      	adcs	r2, r2
    4b8a:	105b      	asrs	r3, r3, #1
    4b8c:	4610      	mov	r0, r2
    4b8e:	d301      	bcc.n	4b94 <__divsi3+0x1b4>
    4b90:	4240      	negs	r0, r0
    4b92:	2b00      	cmp	r3, #0
    4b94:	d500      	bpl.n	4b98 <__divsi3+0x1b8>
    4b96:	4249      	negs	r1, r1
    4b98:	4770      	bx	lr
    4b9a:	4663      	mov	r3, ip
    4b9c:	105b      	asrs	r3, r3, #1
    4b9e:	d300      	bcc.n	4ba2 <__divsi3+0x1c2>
    4ba0:	4240      	negs	r0, r0
    4ba2:	b501      	push	{r0, lr}
    4ba4:	2000      	movs	r0, #0
    4ba6:	f000 f805 	bl	4bb4 <__aeabi_idiv0>
    4baa:	bd02      	pop	{r1, pc}

00004bac <__aeabi_idivmod>:
    4bac:	2900      	cmp	r1, #0
    4bae:	d0f8      	beq.n	4ba2 <__divsi3+0x1c2>
    4bb0:	e716      	b.n	49e0 <__divsi3>
    4bb2:	4770      	bx	lr

00004bb4 <__aeabi_idiv0>:
    4bb4:	4770      	bx	lr
    4bb6:	46c0      	nop			; (mov r8, r8)

00004bb8 <__clzsi2>:
    4bb8:	211c      	movs	r1, #28
    4bba:	2301      	movs	r3, #1
    4bbc:	041b      	lsls	r3, r3, #16
    4bbe:	4298      	cmp	r0, r3
    4bc0:	d301      	bcc.n	4bc6 <__clzsi2+0xe>
    4bc2:	0c00      	lsrs	r0, r0, #16
    4bc4:	3910      	subs	r1, #16
    4bc6:	0a1b      	lsrs	r3, r3, #8
    4bc8:	4298      	cmp	r0, r3
    4bca:	d301      	bcc.n	4bd0 <__clzsi2+0x18>
    4bcc:	0a00      	lsrs	r0, r0, #8
    4bce:	3908      	subs	r1, #8
    4bd0:	091b      	lsrs	r3, r3, #4
    4bd2:	4298      	cmp	r0, r3
    4bd4:	d301      	bcc.n	4bda <__clzsi2+0x22>
    4bd6:	0900      	lsrs	r0, r0, #4
    4bd8:	3904      	subs	r1, #4
    4bda:	a202      	add	r2, pc, #8	; (adr r2, 4be4 <__clzsi2+0x2c>)
    4bdc:	5c10      	ldrb	r0, [r2, r0]
    4bde:	1840      	adds	r0, r0, r1
    4be0:	4770      	bx	lr
    4be2:	46c0      	nop			; (mov r8, r8)
    4be4:	02020304 	.word	0x02020304
    4be8:	01010101 	.word	0x01010101
	...

00004bf4 <__ctzsi2>:
    4bf4:	4241      	negs	r1, r0
    4bf6:	4008      	ands	r0, r1
    4bf8:	211c      	movs	r1, #28
    4bfa:	2301      	movs	r3, #1
    4bfc:	041b      	lsls	r3, r3, #16
    4bfe:	4298      	cmp	r0, r3
    4c00:	d301      	bcc.n	4c06 <__ctzsi2+0x12>
    4c02:	0c00      	lsrs	r0, r0, #16
    4c04:	3910      	subs	r1, #16
    4c06:	0a1b      	lsrs	r3, r3, #8
    4c08:	4298      	cmp	r0, r3
    4c0a:	d301      	bcc.n	4c10 <__ctzsi2+0x1c>
    4c0c:	0a00      	lsrs	r0, r0, #8
    4c0e:	3908      	subs	r1, #8
    4c10:	091b      	lsrs	r3, r3, #4
    4c12:	4298      	cmp	r0, r3
    4c14:	d301      	bcc.n	4c1a <__ctzsi2+0x26>
    4c16:	0900      	lsrs	r0, r0, #4
    4c18:	3904      	subs	r1, #4
    4c1a:	a202      	add	r2, pc, #8	; (adr r2, 4c24 <__ctzsi2+0x30>)
    4c1c:	5c10      	ldrb	r0, [r2, r0]
    4c1e:	1a40      	subs	r0, r0, r1
    4c20:	4770      	bx	lr
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	1d1d1c1b 	.word	0x1d1d1c1b
    4c28:	1e1e1e1e 	.word	0x1e1e1e1e
    4c2c:	1f1f1f1f 	.word	0x1f1f1f1f
    4c30:	1f1f1f1f 	.word	0x1f1f1f1f

00004c34 <__aeabi_ddiv>:
    4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c36:	4657      	mov	r7, sl
    4c38:	4645      	mov	r5, r8
    4c3a:	46de      	mov	lr, fp
    4c3c:	464e      	mov	r6, r9
    4c3e:	b5e0      	push	{r5, r6, r7, lr}
    4c40:	004c      	lsls	r4, r1, #1
    4c42:	030e      	lsls	r6, r1, #12
    4c44:	b087      	sub	sp, #28
    4c46:	4683      	mov	fp, r0
    4c48:	4692      	mov	sl, r2
    4c4a:	001d      	movs	r5, r3
    4c4c:	4680      	mov	r8, r0
    4c4e:	0b36      	lsrs	r6, r6, #12
    4c50:	0d64      	lsrs	r4, r4, #21
    4c52:	0fcf      	lsrs	r7, r1, #31
    4c54:	2c00      	cmp	r4, #0
    4c56:	d04f      	beq.n	4cf8 <__aeabi_ddiv+0xc4>
    4c58:	4b6f      	ldr	r3, [pc, #444]	; (4e18 <__aeabi_ddiv+0x1e4>)
    4c5a:	429c      	cmp	r4, r3
    4c5c:	d035      	beq.n	4cca <__aeabi_ddiv+0x96>
    4c5e:	2380      	movs	r3, #128	; 0x80
    4c60:	0f42      	lsrs	r2, r0, #29
    4c62:	041b      	lsls	r3, r3, #16
    4c64:	00f6      	lsls	r6, r6, #3
    4c66:	4313      	orrs	r3, r2
    4c68:	4333      	orrs	r3, r6
    4c6a:	4699      	mov	r9, r3
    4c6c:	00c3      	lsls	r3, r0, #3
    4c6e:	4698      	mov	r8, r3
    4c70:	4b6a      	ldr	r3, [pc, #424]	; (4e1c <__aeabi_ddiv+0x1e8>)
    4c72:	2600      	movs	r6, #0
    4c74:	469c      	mov	ip, r3
    4c76:	2300      	movs	r3, #0
    4c78:	4464      	add	r4, ip
    4c7a:	9303      	str	r3, [sp, #12]
    4c7c:	032b      	lsls	r3, r5, #12
    4c7e:	0b1b      	lsrs	r3, r3, #12
    4c80:	469b      	mov	fp, r3
    4c82:	006b      	lsls	r3, r5, #1
    4c84:	0fed      	lsrs	r5, r5, #31
    4c86:	4650      	mov	r0, sl
    4c88:	0d5b      	lsrs	r3, r3, #21
    4c8a:	9501      	str	r5, [sp, #4]
    4c8c:	d05e      	beq.n	4d4c <__aeabi_ddiv+0x118>
    4c8e:	4a62      	ldr	r2, [pc, #392]	; (4e18 <__aeabi_ddiv+0x1e4>)
    4c90:	4293      	cmp	r3, r2
    4c92:	d053      	beq.n	4d3c <__aeabi_ddiv+0x108>
    4c94:	465a      	mov	r2, fp
    4c96:	00d1      	lsls	r1, r2, #3
    4c98:	2280      	movs	r2, #128	; 0x80
    4c9a:	0f40      	lsrs	r0, r0, #29
    4c9c:	0412      	lsls	r2, r2, #16
    4c9e:	4302      	orrs	r2, r0
    4ca0:	430a      	orrs	r2, r1
    4ca2:	4693      	mov	fp, r2
    4ca4:	4652      	mov	r2, sl
    4ca6:	00d1      	lsls	r1, r2, #3
    4ca8:	4a5c      	ldr	r2, [pc, #368]	; (4e1c <__aeabi_ddiv+0x1e8>)
    4caa:	4694      	mov	ip, r2
    4cac:	2200      	movs	r2, #0
    4cae:	4463      	add	r3, ip
    4cb0:	0038      	movs	r0, r7
    4cb2:	4068      	eors	r0, r5
    4cb4:	4684      	mov	ip, r0
    4cb6:	9002      	str	r0, [sp, #8]
    4cb8:	1ae4      	subs	r4, r4, r3
    4cba:	4316      	orrs	r6, r2
    4cbc:	2e0f      	cmp	r6, #15
    4cbe:	d900      	bls.n	4cc2 <__aeabi_ddiv+0x8e>
    4cc0:	e0b4      	b.n	4e2c <__aeabi_ddiv+0x1f8>
    4cc2:	4b57      	ldr	r3, [pc, #348]	; (4e20 <__aeabi_ddiv+0x1ec>)
    4cc4:	00b6      	lsls	r6, r6, #2
    4cc6:	599b      	ldr	r3, [r3, r6]
    4cc8:	469f      	mov	pc, r3
    4cca:	0003      	movs	r3, r0
    4ccc:	4333      	orrs	r3, r6
    4cce:	4699      	mov	r9, r3
    4cd0:	d16c      	bne.n	4dac <__aeabi_ddiv+0x178>
    4cd2:	2300      	movs	r3, #0
    4cd4:	4698      	mov	r8, r3
    4cd6:	3302      	adds	r3, #2
    4cd8:	2608      	movs	r6, #8
    4cda:	9303      	str	r3, [sp, #12]
    4cdc:	e7ce      	b.n	4c7c <__aeabi_ddiv+0x48>
    4cde:	46cb      	mov	fp, r9
    4ce0:	4641      	mov	r1, r8
    4ce2:	9a03      	ldr	r2, [sp, #12]
    4ce4:	9701      	str	r7, [sp, #4]
    4ce6:	2a02      	cmp	r2, #2
    4ce8:	d165      	bne.n	4db6 <__aeabi_ddiv+0x182>
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	4c4a      	ldr	r4, [pc, #296]	; (4e18 <__aeabi_ddiv+0x1e4>)
    4cee:	469c      	mov	ip, r3
    4cf0:	2300      	movs	r3, #0
    4cf2:	2200      	movs	r2, #0
    4cf4:	4698      	mov	r8, r3
    4cf6:	e06b      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    4cf8:	0003      	movs	r3, r0
    4cfa:	4333      	orrs	r3, r6
    4cfc:	4699      	mov	r9, r3
    4cfe:	d04e      	beq.n	4d9e <__aeabi_ddiv+0x16a>
    4d00:	2e00      	cmp	r6, #0
    4d02:	d100      	bne.n	4d06 <__aeabi_ddiv+0xd2>
    4d04:	e1bc      	b.n	5080 <__aeabi_ddiv+0x44c>
    4d06:	0030      	movs	r0, r6
    4d08:	f7ff ff56 	bl	4bb8 <__clzsi2>
    4d0c:	0003      	movs	r3, r0
    4d0e:	3b0b      	subs	r3, #11
    4d10:	2b1c      	cmp	r3, #28
    4d12:	dd00      	ble.n	4d16 <__aeabi_ddiv+0xe2>
    4d14:	e1ac      	b.n	5070 <__aeabi_ddiv+0x43c>
    4d16:	221d      	movs	r2, #29
    4d18:	1ad3      	subs	r3, r2, r3
    4d1a:	465a      	mov	r2, fp
    4d1c:	0001      	movs	r1, r0
    4d1e:	40da      	lsrs	r2, r3
    4d20:	3908      	subs	r1, #8
    4d22:	408e      	lsls	r6, r1
    4d24:	0013      	movs	r3, r2
    4d26:	4333      	orrs	r3, r6
    4d28:	4699      	mov	r9, r3
    4d2a:	465b      	mov	r3, fp
    4d2c:	408b      	lsls	r3, r1
    4d2e:	4698      	mov	r8, r3
    4d30:	2300      	movs	r3, #0
    4d32:	4c3c      	ldr	r4, [pc, #240]	; (4e24 <__aeabi_ddiv+0x1f0>)
    4d34:	2600      	movs	r6, #0
    4d36:	1a24      	subs	r4, r4, r0
    4d38:	9303      	str	r3, [sp, #12]
    4d3a:	e79f      	b.n	4c7c <__aeabi_ddiv+0x48>
    4d3c:	4651      	mov	r1, sl
    4d3e:	465a      	mov	r2, fp
    4d40:	4311      	orrs	r1, r2
    4d42:	d129      	bne.n	4d98 <__aeabi_ddiv+0x164>
    4d44:	2200      	movs	r2, #0
    4d46:	4693      	mov	fp, r2
    4d48:	3202      	adds	r2, #2
    4d4a:	e7b1      	b.n	4cb0 <__aeabi_ddiv+0x7c>
    4d4c:	4659      	mov	r1, fp
    4d4e:	4301      	orrs	r1, r0
    4d50:	d01e      	beq.n	4d90 <__aeabi_ddiv+0x15c>
    4d52:	465b      	mov	r3, fp
    4d54:	2b00      	cmp	r3, #0
    4d56:	d100      	bne.n	4d5a <__aeabi_ddiv+0x126>
    4d58:	e19e      	b.n	5098 <__aeabi_ddiv+0x464>
    4d5a:	4658      	mov	r0, fp
    4d5c:	f7ff ff2c 	bl	4bb8 <__clzsi2>
    4d60:	0003      	movs	r3, r0
    4d62:	3b0b      	subs	r3, #11
    4d64:	2b1c      	cmp	r3, #28
    4d66:	dd00      	ble.n	4d6a <__aeabi_ddiv+0x136>
    4d68:	e18f      	b.n	508a <__aeabi_ddiv+0x456>
    4d6a:	0002      	movs	r2, r0
    4d6c:	4659      	mov	r1, fp
    4d6e:	3a08      	subs	r2, #8
    4d70:	4091      	lsls	r1, r2
    4d72:	468b      	mov	fp, r1
    4d74:	211d      	movs	r1, #29
    4d76:	1acb      	subs	r3, r1, r3
    4d78:	4651      	mov	r1, sl
    4d7a:	40d9      	lsrs	r1, r3
    4d7c:	000b      	movs	r3, r1
    4d7e:	4659      	mov	r1, fp
    4d80:	430b      	orrs	r3, r1
    4d82:	4651      	mov	r1, sl
    4d84:	469b      	mov	fp, r3
    4d86:	4091      	lsls	r1, r2
    4d88:	4b26      	ldr	r3, [pc, #152]	; (4e24 <__aeabi_ddiv+0x1f0>)
    4d8a:	2200      	movs	r2, #0
    4d8c:	1a1b      	subs	r3, r3, r0
    4d8e:	e78f      	b.n	4cb0 <__aeabi_ddiv+0x7c>
    4d90:	2300      	movs	r3, #0
    4d92:	2201      	movs	r2, #1
    4d94:	469b      	mov	fp, r3
    4d96:	e78b      	b.n	4cb0 <__aeabi_ddiv+0x7c>
    4d98:	4651      	mov	r1, sl
    4d9a:	2203      	movs	r2, #3
    4d9c:	e788      	b.n	4cb0 <__aeabi_ddiv+0x7c>
    4d9e:	2300      	movs	r3, #0
    4da0:	4698      	mov	r8, r3
    4da2:	3301      	adds	r3, #1
    4da4:	2604      	movs	r6, #4
    4da6:	2400      	movs	r4, #0
    4da8:	9303      	str	r3, [sp, #12]
    4daa:	e767      	b.n	4c7c <__aeabi_ddiv+0x48>
    4dac:	2303      	movs	r3, #3
    4dae:	46b1      	mov	r9, r6
    4db0:	9303      	str	r3, [sp, #12]
    4db2:	260c      	movs	r6, #12
    4db4:	e762      	b.n	4c7c <__aeabi_ddiv+0x48>
    4db6:	2a03      	cmp	r2, #3
    4db8:	d100      	bne.n	4dbc <__aeabi_ddiv+0x188>
    4dba:	e25c      	b.n	5276 <__aeabi_ddiv+0x642>
    4dbc:	9b01      	ldr	r3, [sp, #4]
    4dbe:	2a01      	cmp	r2, #1
    4dc0:	d000      	beq.n	4dc4 <__aeabi_ddiv+0x190>
    4dc2:	e1e4      	b.n	518e <__aeabi_ddiv+0x55a>
    4dc4:	4013      	ands	r3, r2
    4dc6:	469c      	mov	ip, r3
    4dc8:	2300      	movs	r3, #0
    4dca:	2400      	movs	r4, #0
    4dcc:	2200      	movs	r2, #0
    4dce:	4698      	mov	r8, r3
    4dd0:	2100      	movs	r1, #0
    4dd2:	0312      	lsls	r2, r2, #12
    4dd4:	0b13      	lsrs	r3, r2, #12
    4dd6:	0d0a      	lsrs	r2, r1, #20
    4dd8:	0512      	lsls	r2, r2, #20
    4dda:	431a      	orrs	r2, r3
    4ddc:	0523      	lsls	r3, r4, #20
    4dde:	4c12      	ldr	r4, [pc, #72]	; (4e28 <__aeabi_ddiv+0x1f4>)
    4de0:	4640      	mov	r0, r8
    4de2:	4022      	ands	r2, r4
    4de4:	4313      	orrs	r3, r2
    4de6:	4662      	mov	r2, ip
    4de8:	005b      	lsls	r3, r3, #1
    4dea:	07d2      	lsls	r2, r2, #31
    4dec:	085b      	lsrs	r3, r3, #1
    4dee:	4313      	orrs	r3, r2
    4df0:	0019      	movs	r1, r3
    4df2:	b007      	add	sp, #28
    4df4:	bc3c      	pop	{r2, r3, r4, r5}
    4df6:	4690      	mov	r8, r2
    4df8:	4699      	mov	r9, r3
    4dfa:	46a2      	mov	sl, r4
    4dfc:	46ab      	mov	fp, r5
    4dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e00:	2300      	movs	r3, #0
    4e02:	2280      	movs	r2, #128	; 0x80
    4e04:	469c      	mov	ip, r3
    4e06:	0312      	lsls	r2, r2, #12
    4e08:	4698      	mov	r8, r3
    4e0a:	4c03      	ldr	r4, [pc, #12]	; (4e18 <__aeabi_ddiv+0x1e4>)
    4e0c:	e7e0      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    4e0e:	2300      	movs	r3, #0
    4e10:	4c01      	ldr	r4, [pc, #4]	; (4e18 <__aeabi_ddiv+0x1e4>)
    4e12:	2200      	movs	r2, #0
    4e14:	4698      	mov	r8, r3
    4e16:	e7db      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    4e18:	000007ff 	.word	0x000007ff
    4e1c:	fffffc01 	.word	0xfffffc01
    4e20:	00006124 	.word	0x00006124
    4e24:	fffffc0d 	.word	0xfffffc0d
    4e28:	800fffff 	.word	0x800fffff
    4e2c:	45d9      	cmp	r9, fp
    4e2e:	d900      	bls.n	4e32 <__aeabi_ddiv+0x1fe>
    4e30:	e139      	b.n	50a6 <__aeabi_ddiv+0x472>
    4e32:	d100      	bne.n	4e36 <__aeabi_ddiv+0x202>
    4e34:	e134      	b.n	50a0 <__aeabi_ddiv+0x46c>
    4e36:	2300      	movs	r3, #0
    4e38:	4646      	mov	r6, r8
    4e3a:	464d      	mov	r5, r9
    4e3c:	469a      	mov	sl, r3
    4e3e:	3c01      	subs	r4, #1
    4e40:	465b      	mov	r3, fp
    4e42:	0e0a      	lsrs	r2, r1, #24
    4e44:	021b      	lsls	r3, r3, #8
    4e46:	431a      	orrs	r2, r3
    4e48:	020b      	lsls	r3, r1, #8
    4e4a:	0c17      	lsrs	r7, r2, #16
    4e4c:	9303      	str	r3, [sp, #12]
    4e4e:	0413      	lsls	r3, r2, #16
    4e50:	0c1b      	lsrs	r3, r3, #16
    4e52:	0039      	movs	r1, r7
    4e54:	0028      	movs	r0, r5
    4e56:	4690      	mov	r8, r2
    4e58:	9301      	str	r3, [sp, #4]
    4e5a:	f7ff fd37 	bl	48cc <__udivsi3>
    4e5e:	0002      	movs	r2, r0
    4e60:	9b01      	ldr	r3, [sp, #4]
    4e62:	4683      	mov	fp, r0
    4e64:	435a      	muls	r2, r3
    4e66:	0028      	movs	r0, r5
    4e68:	0039      	movs	r1, r7
    4e6a:	4691      	mov	r9, r2
    4e6c:	f7ff fdb4 	bl	49d8 <__aeabi_uidivmod>
    4e70:	0c35      	lsrs	r5, r6, #16
    4e72:	0409      	lsls	r1, r1, #16
    4e74:	430d      	orrs	r5, r1
    4e76:	45a9      	cmp	r9, r5
    4e78:	d90d      	bls.n	4e96 <__aeabi_ddiv+0x262>
    4e7a:	465b      	mov	r3, fp
    4e7c:	4445      	add	r5, r8
    4e7e:	3b01      	subs	r3, #1
    4e80:	45a8      	cmp	r8, r5
    4e82:	d900      	bls.n	4e86 <__aeabi_ddiv+0x252>
    4e84:	e13a      	b.n	50fc <__aeabi_ddiv+0x4c8>
    4e86:	45a9      	cmp	r9, r5
    4e88:	d800      	bhi.n	4e8c <__aeabi_ddiv+0x258>
    4e8a:	e137      	b.n	50fc <__aeabi_ddiv+0x4c8>
    4e8c:	2302      	movs	r3, #2
    4e8e:	425b      	negs	r3, r3
    4e90:	469c      	mov	ip, r3
    4e92:	4445      	add	r5, r8
    4e94:	44e3      	add	fp, ip
    4e96:	464b      	mov	r3, r9
    4e98:	1aeb      	subs	r3, r5, r3
    4e9a:	0039      	movs	r1, r7
    4e9c:	0018      	movs	r0, r3
    4e9e:	9304      	str	r3, [sp, #16]
    4ea0:	f7ff fd14 	bl	48cc <__udivsi3>
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	0005      	movs	r5, r0
    4ea8:	4343      	muls	r3, r0
    4eaa:	0039      	movs	r1, r7
    4eac:	9804      	ldr	r0, [sp, #16]
    4eae:	4699      	mov	r9, r3
    4eb0:	f7ff fd92 	bl	49d8 <__aeabi_uidivmod>
    4eb4:	0433      	lsls	r3, r6, #16
    4eb6:	0409      	lsls	r1, r1, #16
    4eb8:	0c1b      	lsrs	r3, r3, #16
    4eba:	430b      	orrs	r3, r1
    4ebc:	4599      	cmp	r9, r3
    4ebe:	d909      	bls.n	4ed4 <__aeabi_ddiv+0x2a0>
    4ec0:	4443      	add	r3, r8
    4ec2:	1e6a      	subs	r2, r5, #1
    4ec4:	4598      	cmp	r8, r3
    4ec6:	d900      	bls.n	4eca <__aeabi_ddiv+0x296>
    4ec8:	e11a      	b.n	5100 <__aeabi_ddiv+0x4cc>
    4eca:	4599      	cmp	r9, r3
    4ecc:	d800      	bhi.n	4ed0 <__aeabi_ddiv+0x29c>
    4ece:	e117      	b.n	5100 <__aeabi_ddiv+0x4cc>
    4ed0:	3d02      	subs	r5, #2
    4ed2:	4443      	add	r3, r8
    4ed4:	464a      	mov	r2, r9
    4ed6:	1a9b      	subs	r3, r3, r2
    4ed8:	465a      	mov	r2, fp
    4eda:	0412      	lsls	r2, r2, #16
    4edc:	432a      	orrs	r2, r5
    4ede:	9903      	ldr	r1, [sp, #12]
    4ee0:	4693      	mov	fp, r2
    4ee2:	0c10      	lsrs	r0, r2, #16
    4ee4:	0c0a      	lsrs	r2, r1, #16
    4ee6:	4691      	mov	r9, r2
    4ee8:	0409      	lsls	r1, r1, #16
    4eea:	465a      	mov	r2, fp
    4eec:	0c09      	lsrs	r1, r1, #16
    4eee:	464e      	mov	r6, r9
    4ef0:	000d      	movs	r5, r1
    4ef2:	0412      	lsls	r2, r2, #16
    4ef4:	0c12      	lsrs	r2, r2, #16
    4ef6:	4345      	muls	r5, r0
    4ef8:	9105      	str	r1, [sp, #20]
    4efa:	4351      	muls	r1, r2
    4efc:	4372      	muls	r2, r6
    4efe:	4370      	muls	r0, r6
    4f00:	1952      	adds	r2, r2, r5
    4f02:	0c0e      	lsrs	r6, r1, #16
    4f04:	18b2      	adds	r2, r6, r2
    4f06:	4295      	cmp	r5, r2
    4f08:	d903      	bls.n	4f12 <__aeabi_ddiv+0x2de>
    4f0a:	2580      	movs	r5, #128	; 0x80
    4f0c:	026d      	lsls	r5, r5, #9
    4f0e:	46ac      	mov	ip, r5
    4f10:	4460      	add	r0, ip
    4f12:	0c15      	lsrs	r5, r2, #16
    4f14:	0409      	lsls	r1, r1, #16
    4f16:	0412      	lsls	r2, r2, #16
    4f18:	0c09      	lsrs	r1, r1, #16
    4f1a:	1828      	adds	r0, r5, r0
    4f1c:	1852      	adds	r2, r2, r1
    4f1e:	4283      	cmp	r3, r0
    4f20:	d200      	bcs.n	4f24 <__aeabi_ddiv+0x2f0>
    4f22:	e0ce      	b.n	50c2 <__aeabi_ddiv+0x48e>
    4f24:	d100      	bne.n	4f28 <__aeabi_ddiv+0x2f4>
    4f26:	e0c8      	b.n	50ba <__aeabi_ddiv+0x486>
    4f28:	1a1d      	subs	r5, r3, r0
    4f2a:	4653      	mov	r3, sl
    4f2c:	1a9e      	subs	r6, r3, r2
    4f2e:	45b2      	cmp	sl, r6
    4f30:	4192      	sbcs	r2, r2
    4f32:	4252      	negs	r2, r2
    4f34:	1aab      	subs	r3, r5, r2
    4f36:	469a      	mov	sl, r3
    4f38:	4598      	cmp	r8, r3
    4f3a:	d100      	bne.n	4f3e <__aeabi_ddiv+0x30a>
    4f3c:	e117      	b.n	516e <__aeabi_ddiv+0x53a>
    4f3e:	0039      	movs	r1, r7
    4f40:	0018      	movs	r0, r3
    4f42:	f7ff fcc3 	bl	48cc <__udivsi3>
    4f46:	9b01      	ldr	r3, [sp, #4]
    4f48:	0005      	movs	r5, r0
    4f4a:	4343      	muls	r3, r0
    4f4c:	0039      	movs	r1, r7
    4f4e:	4650      	mov	r0, sl
    4f50:	9304      	str	r3, [sp, #16]
    4f52:	f7ff fd41 	bl	49d8 <__aeabi_uidivmod>
    4f56:	9804      	ldr	r0, [sp, #16]
    4f58:	040b      	lsls	r3, r1, #16
    4f5a:	0c31      	lsrs	r1, r6, #16
    4f5c:	4319      	orrs	r1, r3
    4f5e:	4288      	cmp	r0, r1
    4f60:	d909      	bls.n	4f76 <__aeabi_ddiv+0x342>
    4f62:	4441      	add	r1, r8
    4f64:	1e6b      	subs	r3, r5, #1
    4f66:	4588      	cmp	r8, r1
    4f68:	d900      	bls.n	4f6c <__aeabi_ddiv+0x338>
    4f6a:	e107      	b.n	517c <__aeabi_ddiv+0x548>
    4f6c:	4288      	cmp	r0, r1
    4f6e:	d800      	bhi.n	4f72 <__aeabi_ddiv+0x33e>
    4f70:	e104      	b.n	517c <__aeabi_ddiv+0x548>
    4f72:	3d02      	subs	r5, #2
    4f74:	4441      	add	r1, r8
    4f76:	9b04      	ldr	r3, [sp, #16]
    4f78:	1acb      	subs	r3, r1, r3
    4f7a:	0018      	movs	r0, r3
    4f7c:	0039      	movs	r1, r7
    4f7e:	9304      	str	r3, [sp, #16]
    4f80:	f7ff fca4 	bl	48cc <__udivsi3>
    4f84:	9b01      	ldr	r3, [sp, #4]
    4f86:	4682      	mov	sl, r0
    4f88:	4343      	muls	r3, r0
    4f8a:	0039      	movs	r1, r7
    4f8c:	9804      	ldr	r0, [sp, #16]
    4f8e:	9301      	str	r3, [sp, #4]
    4f90:	f7ff fd22 	bl	49d8 <__aeabi_uidivmod>
    4f94:	9801      	ldr	r0, [sp, #4]
    4f96:	040b      	lsls	r3, r1, #16
    4f98:	0431      	lsls	r1, r6, #16
    4f9a:	0c09      	lsrs	r1, r1, #16
    4f9c:	4319      	orrs	r1, r3
    4f9e:	4288      	cmp	r0, r1
    4fa0:	d90d      	bls.n	4fbe <__aeabi_ddiv+0x38a>
    4fa2:	4653      	mov	r3, sl
    4fa4:	4441      	add	r1, r8
    4fa6:	3b01      	subs	r3, #1
    4fa8:	4588      	cmp	r8, r1
    4faa:	d900      	bls.n	4fae <__aeabi_ddiv+0x37a>
    4fac:	e0e8      	b.n	5180 <__aeabi_ddiv+0x54c>
    4fae:	4288      	cmp	r0, r1
    4fb0:	d800      	bhi.n	4fb4 <__aeabi_ddiv+0x380>
    4fb2:	e0e5      	b.n	5180 <__aeabi_ddiv+0x54c>
    4fb4:	2302      	movs	r3, #2
    4fb6:	425b      	negs	r3, r3
    4fb8:	469c      	mov	ip, r3
    4fba:	4441      	add	r1, r8
    4fbc:	44e2      	add	sl, ip
    4fbe:	9b01      	ldr	r3, [sp, #4]
    4fc0:	042d      	lsls	r5, r5, #16
    4fc2:	1ace      	subs	r6, r1, r3
    4fc4:	4651      	mov	r1, sl
    4fc6:	4329      	orrs	r1, r5
    4fc8:	9d05      	ldr	r5, [sp, #20]
    4fca:	464f      	mov	r7, r9
    4fcc:	002a      	movs	r2, r5
    4fce:	040b      	lsls	r3, r1, #16
    4fd0:	0c08      	lsrs	r0, r1, #16
    4fd2:	0c1b      	lsrs	r3, r3, #16
    4fd4:	435a      	muls	r2, r3
    4fd6:	4345      	muls	r5, r0
    4fd8:	437b      	muls	r3, r7
    4fda:	4378      	muls	r0, r7
    4fdc:	195b      	adds	r3, r3, r5
    4fde:	0c17      	lsrs	r7, r2, #16
    4fe0:	18fb      	adds	r3, r7, r3
    4fe2:	429d      	cmp	r5, r3
    4fe4:	d903      	bls.n	4fee <__aeabi_ddiv+0x3ba>
    4fe6:	2580      	movs	r5, #128	; 0x80
    4fe8:	026d      	lsls	r5, r5, #9
    4fea:	46ac      	mov	ip, r5
    4fec:	4460      	add	r0, ip
    4fee:	0c1d      	lsrs	r5, r3, #16
    4ff0:	0412      	lsls	r2, r2, #16
    4ff2:	041b      	lsls	r3, r3, #16
    4ff4:	0c12      	lsrs	r2, r2, #16
    4ff6:	1828      	adds	r0, r5, r0
    4ff8:	189b      	adds	r3, r3, r2
    4ffa:	4286      	cmp	r6, r0
    4ffc:	d200      	bcs.n	5000 <__aeabi_ddiv+0x3cc>
    4ffe:	e093      	b.n	5128 <__aeabi_ddiv+0x4f4>
    5000:	d100      	bne.n	5004 <__aeabi_ddiv+0x3d0>
    5002:	e08e      	b.n	5122 <__aeabi_ddiv+0x4ee>
    5004:	2301      	movs	r3, #1
    5006:	4319      	orrs	r1, r3
    5008:	4ba0      	ldr	r3, [pc, #640]	; (528c <__aeabi_ddiv+0x658>)
    500a:	18e3      	adds	r3, r4, r3
    500c:	2b00      	cmp	r3, #0
    500e:	dc00      	bgt.n	5012 <__aeabi_ddiv+0x3de>
    5010:	e099      	b.n	5146 <__aeabi_ddiv+0x512>
    5012:	074a      	lsls	r2, r1, #29
    5014:	d000      	beq.n	5018 <__aeabi_ddiv+0x3e4>
    5016:	e09e      	b.n	5156 <__aeabi_ddiv+0x522>
    5018:	465a      	mov	r2, fp
    501a:	01d2      	lsls	r2, r2, #7
    501c:	d506      	bpl.n	502c <__aeabi_ddiv+0x3f8>
    501e:	465a      	mov	r2, fp
    5020:	4b9b      	ldr	r3, [pc, #620]	; (5290 <__aeabi_ddiv+0x65c>)
    5022:	401a      	ands	r2, r3
    5024:	2380      	movs	r3, #128	; 0x80
    5026:	4693      	mov	fp, r2
    5028:	00db      	lsls	r3, r3, #3
    502a:	18e3      	adds	r3, r4, r3
    502c:	4a99      	ldr	r2, [pc, #612]	; (5294 <__aeabi_ddiv+0x660>)
    502e:	4293      	cmp	r3, r2
    5030:	dd68      	ble.n	5104 <__aeabi_ddiv+0x4d0>
    5032:	2301      	movs	r3, #1
    5034:	9a02      	ldr	r2, [sp, #8]
    5036:	4c98      	ldr	r4, [pc, #608]	; (5298 <__aeabi_ddiv+0x664>)
    5038:	401a      	ands	r2, r3
    503a:	2300      	movs	r3, #0
    503c:	4694      	mov	ip, r2
    503e:	4698      	mov	r8, r3
    5040:	2200      	movs	r2, #0
    5042:	e6c5      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    5044:	2280      	movs	r2, #128	; 0x80
    5046:	464b      	mov	r3, r9
    5048:	0312      	lsls	r2, r2, #12
    504a:	4213      	tst	r3, r2
    504c:	d00a      	beq.n	5064 <__aeabi_ddiv+0x430>
    504e:	465b      	mov	r3, fp
    5050:	4213      	tst	r3, r2
    5052:	d106      	bne.n	5062 <__aeabi_ddiv+0x42e>
    5054:	431a      	orrs	r2, r3
    5056:	0312      	lsls	r2, r2, #12
    5058:	0b12      	lsrs	r2, r2, #12
    505a:	46ac      	mov	ip, r5
    505c:	4688      	mov	r8, r1
    505e:	4c8e      	ldr	r4, [pc, #568]	; (5298 <__aeabi_ddiv+0x664>)
    5060:	e6b6      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    5062:	464b      	mov	r3, r9
    5064:	431a      	orrs	r2, r3
    5066:	0312      	lsls	r2, r2, #12
    5068:	0b12      	lsrs	r2, r2, #12
    506a:	46bc      	mov	ip, r7
    506c:	4c8a      	ldr	r4, [pc, #552]	; (5298 <__aeabi_ddiv+0x664>)
    506e:	e6af      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    5070:	0003      	movs	r3, r0
    5072:	465a      	mov	r2, fp
    5074:	3b28      	subs	r3, #40	; 0x28
    5076:	409a      	lsls	r2, r3
    5078:	2300      	movs	r3, #0
    507a:	4691      	mov	r9, r2
    507c:	4698      	mov	r8, r3
    507e:	e657      	b.n	4d30 <__aeabi_ddiv+0xfc>
    5080:	4658      	mov	r0, fp
    5082:	f7ff fd99 	bl	4bb8 <__clzsi2>
    5086:	3020      	adds	r0, #32
    5088:	e640      	b.n	4d0c <__aeabi_ddiv+0xd8>
    508a:	0003      	movs	r3, r0
    508c:	4652      	mov	r2, sl
    508e:	3b28      	subs	r3, #40	; 0x28
    5090:	409a      	lsls	r2, r3
    5092:	2100      	movs	r1, #0
    5094:	4693      	mov	fp, r2
    5096:	e677      	b.n	4d88 <__aeabi_ddiv+0x154>
    5098:	f7ff fd8e 	bl	4bb8 <__clzsi2>
    509c:	3020      	adds	r0, #32
    509e:	e65f      	b.n	4d60 <__aeabi_ddiv+0x12c>
    50a0:	4588      	cmp	r8, r1
    50a2:	d200      	bcs.n	50a6 <__aeabi_ddiv+0x472>
    50a4:	e6c7      	b.n	4e36 <__aeabi_ddiv+0x202>
    50a6:	464b      	mov	r3, r9
    50a8:	07de      	lsls	r6, r3, #31
    50aa:	085d      	lsrs	r5, r3, #1
    50ac:	4643      	mov	r3, r8
    50ae:	085b      	lsrs	r3, r3, #1
    50b0:	431e      	orrs	r6, r3
    50b2:	4643      	mov	r3, r8
    50b4:	07db      	lsls	r3, r3, #31
    50b6:	469a      	mov	sl, r3
    50b8:	e6c2      	b.n	4e40 <__aeabi_ddiv+0x20c>
    50ba:	2500      	movs	r5, #0
    50bc:	4592      	cmp	sl, r2
    50be:	d300      	bcc.n	50c2 <__aeabi_ddiv+0x48e>
    50c0:	e733      	b.n	4f2a <__aeabi_ddiv+0x2f6>
    50c2:	9e03      	ldr	r6, [sp, #12]
    50c4:	4659      	mov	r1, fp
    50c6:	46b4      	mov	ip, r6
    50c8:	44e2      	add	sl, ip
    50ca:	45b2      	cmp	sl, r6
    50cc:	41ad      	sbcs	r5, r5
    50ce:	426d      	negs	r5, r5
    50d0:	4445      	add	r5, r8
    50d2:	18eb      	adds	r3, r5, r3
    50d4:	3901      	subs	r1, #1
    50d6:	4598      	cmp	r8, r3
    50d8:	d207      	bcs.n	50ea <__aeabi_ddiv+0x4b6>
    50da:	4298      	cmp	r0, r3
    50dc:	d900      	bls.n	50e0 <__aeabi_ddiv+0x4ac>
    50de:	e07f      	b.n	51e0 <__aeabi_ddiv+0x5ac>
    50e0:	d100      	bne.n	50e4 <__aeabi_ddiv+0x4b0>
    50e2:	e0bc      	b.n	525e <__aeabi_ddiv+0x62a>
    50e4:	1a1d      	subs	r5, r3, r0
    50e6:	468b      	mov	fp, r1
    50e8:	e71f      	b.n	4f2a <__aeabi_ddiv+0x2f6>
    50ea:	4598      	cmp	r8, r3
    50ec:	d1fa      	bne.n	50e4 <__aeabi_ddiv+0x4b0>
    50ee:	9d03      	ldr	r5, [sp, #12]
    50f0:	4555      	cmp	r5, sl
    50f2:	d9f2      	bls.n	50da <__aeabi_ddiv+0x4a6>
    50f4:	4643      	mov	r3, r8
    50f6:	468b      	mov	fp, r1
    50f8:	1a1d      	subs	r5, r3, r0
    50fa:	e716      	b.n	4f2a <__aeabi_ddiv+0x2f6>
    50fc:	469b      	mov	fp, r3
    50fe:	e6ca      	b.n	4e96 <__aeabi_ddiv+0x262>
    5100:	0015      	movs	r5, r2
    5102:	e6e7      	b.n	4ed4 <__aeabi_ddiv+0x2a0>
    5104:	465a      	mov	r2, fp
    5106:	08c9      	lsrs	r1, r1, #3
    5108:	0752      	lsls	r2, r2, #29
    510a:	430a      	orrs	r2, r1
    510c:	055b      	lsls	r3, r3, #21
    510e:	4690      	mov	r8, r2
    5110:	0d5c      	lsrs	r4, r3, #21
    5112:	465a      	mov	r2, fp
    5114:	2301      	movs	r3, #1
    5116:	9902      	ldr	r1, [sp, #8]
    5118:	0252      	lsls	r2, r2, #9
    511a:	4019      	ands	r1, r3
    511c:	0b12      	lsrs	r2, r2, #12
    511e:	468c      	mov	ip, r1
    5120:	e656      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    5122:	2b00      	cmp	r3, #0
    5124:	d100      	bne.n	5128 <__aeabi_ddiv+0x4f4>
    5126:	e76f      	b.n	5008 <__aeabi_ddiv+0x3d4>
    5128:	4446      	add	r6, r8
    512a:	1e4a      	subs	r2, r1, #1
    512c:	45b0      	cmp	r8, r6
    512e:	d929      	bls.n	5184 <__aeabi_ddiv+0x550>
    5130:	0011      	movs	r1, r2
    5132:	4286      	cmp	r6, r0
    5134:	d000      	beq.n	5138 <__aeabi_ddiv+0x504>
    5136:	e765      	b.n	5004 <__aeabi_ddiv+0x3d0>
    5138:	9a03      	ldr	r2, [sp, #12]
    513a:	4293      	cmp	r3, r2
    513c:	d000      	beq.n	5140 <__aeabi_ddiv+0x50c>
    513e:	e761      	b.n	5004 <__aeabi_ddiv+0x3d0>
    5140:	e762      	b.n	5008 <__aeabi_ddiv+0x3d4>
    5142:	2101      	movs	r1, #1
    5144:	4249      	negs	r1, r1
    5146:	2001      	movs	r0, #1
    5148:	1ac2      	subs	r2, r0, r3
    514a:	2a38      	cmp	r2, #56	; 0x38
    514c:	dd21      	ble.n	5192 <__aeabi_ddiv+0x55e>
    514e:	9b02      	ldr	r3, [sp, #8]
    5150:	4003      	ands	r3, r0
    5152:	469c      	mov	ip, r3
    5154:	e638      	b.n	4dc8 <__aeabi_ddiv+0x194>
    5156:	220f      	movs	r2, #15
    5158:	400a      	ands	r2, r1
    515a:	2a04      	cmp	r2, #4
    515c:	d100      	bne.n	5160 <__aeabi_ddiv+0x52c>
    515e:	e75b      	b.n	5018 <__aeabi_ddiv+0x3e4>
    5160:	000a      	movs	r2, r1
    5162:	1d11      	adds	r1, r2, #4
    5164:	4291      	cmp	r1, r2
    5166:	4192      	sbcs	r2, r2
    5168:	4252      	negs	r2, r2
    516a:	4493      	add	fp, r2
    516c:	e754      	b.n	5018 <__aeabi_ddiv+0x3e4>
    516e:	4b47      	ldr	r3, [pc, #284]	; (528c <__aeabi_ddiv+0x658>)
    5170:	18e3      	adds	r3, r4, r3
    5172:	2b00      	cmp	r3, #0
    5174:	dde5      	ble.n	5142 <__aeabi_ddiv+0x50e>
    5176:	2201      	movs	r2, #1
    5178:	4252      	negs	r2, r2
    517a:	e7f2      	b.n	5162 <__aeabi_ddiv+0x52e>
    517c:	001d      	movs	r5, r3
    517e:	e6fa      	b.n	4f76 <__aeabi_ddiv+0x342>
    5180:	469a      	mov	sl, r3
    5182:	e71c      	b.n	4fbe <__aeabi_ddiv+0x38a>
    5184:	42b0      	cmp	r0, r6
    5186:	d839      	bhi.n	51fc <__aeabi_ddiv+0x5c8>
    5188:	d06e      	beq.n	5268 <__aeabi_ddiv+0x634>
    518a:	0011      	movs	r1, r2
    518c:	e73a      	b.n	5004 <__aeabi_ddiv+0x3d0>
    518e:	9302      	str	r3, [sp, #8]
    5190:	e73a      	b.n	5008 <__aeabi_ddiv+0x3d4>
    5192:	2a1f      	cmp	r2, #31
    5194:	dc3c      	bgt.n	5210 <__aeabi_ddiv+0x5dc>
    5196:	2320      	movs	r3, #32
    5198:	1a9b      	subs	r3, r3, r2
    519a:	000c      	movs	r4, r1
    519c:	4658      	mov	r0, fp
    519e:	4099      	lsls	r1, r3
    51a0:	4098      	lsls	r0, r3
    51a2:	1e4b      	subs	r3, r1, #1
    51a4:	4199      	sbcs	r1, r3
    51a6:	465b      	mov	r3, fp
    51a8:	40d4      	lsrs	r4, r2
    51aa:	40d3      	lsrs	r3, r2
    51ac:	4320      	orrs	r0, r4
    51ae:	4308      	orrs	r0, r1
    51b0:	001a      	movs	r2, r3
    51b2:	0743      	lsls	r3, r0, #29
    51b4:	d009      	beq.n	51ca <__aeabi_ddiv+0x596>
    51b6:	230f      	movs	r3, #15
    51b8:	4003      	ands	r3, r0
    51ba:	2b04      	cmp	r3, #4
    51bc:	d005      	beq.n	51ca <__aeabi_ddiv+0x596>
    51be:	0001      	movs	r1, r0
    51c0:	1d08      	adds	r0, r1, #4
    51c2:	4288      	cmp	r0, r1
    51c4:	419b      	sbcs	r3, r3
    51c6:	425b      	negs	r3, r3
    51c8:	18d2      	adds	r2, r2, r3
    51ca:	0213      	lsls	r3, r2, #8
    51cc:	d53a      	bpl.n	5244 <__aeabi_ddiv+0x610>
    51ce:	2301      	movs	r3, #1
    51d0:	9a02      	ldr	r2, [sp, #8]
    51d2:	2401      	movs	r4, #1
    51d4:	401a      	ands	r2, r3
    51d6:	2300      	movs	r3, #0
    51d8:	4694      	mov	ip, r2
    51da:	4698      	mov	r8, r3
    51dc:	2200      	movs	r2, #0
    51de:	e5f7      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    51e0:	2102      	movs	r1, #2
    51e2:	4249      	negs	r1, r1
    51e4:	468c      	mov	ip, r1
    51e6:	9d03      	ldr	r5, [sp, #12]
    51e8:	44e3      	add	fp, ip
    51ea:	46ac      	mov	ip, r5
    51ec:	44e2      	add	sl, ip
    51ee:	45aa      	cmp	sl, r5
    51f0:	41ad      	sbcs	r5, r5
    51f2:	426d      	negs	r5, r5
    51f4:	4445      	add	r5, r8
    51f6:	18ed      	adds	r5, r5, r3
    51f8:	1a2d      	subs	r5, r5, r0
    51fa:	e696      	b.n	4f2a <__aeabi_ddiv+0x2f6>
    51fc:	1e8a      	subs	r2, r1, #2
    51fe:	9903      	ldr	r1, [sp, #12]
    5200:	004d      	lsls	r5, r1, #1
    5202:	428d      	cmp	r5, r1
    5204:	4189      	sbcs	r1, r1
    5206:	4249      	negs	r1, r1
    5208:	4441      	add	r1, r8
    520a:	1876      	adds	r6, r6, r1
    520c:	9503      	str	r5, [sp, #12]
    520e:	e78f      	b.n	5130 <__aeabi_ddiv+0x4fc>
    5210:	201f      	movs	r0, #31
    5212:	4240      	negs	r0, r0
    5214:	1ac3      	subs	r3, r0, r3
    5216:	4658      	mov	r0, fp
    5218:	40d8      	lsrs	r0, r3
    521a:	0003      	movs	r3, r0
    521c:	2a20      	cmp	r2, #32
    521e:	d028      	beq.n	5272 <__aeabi_ddiv+0x63e>
    5220:	2040      	movs	r0, #64	; 0x40
    5222:	465d      	mov	r5, fp
    5224:	1a82      	subs	r2, r0, r2
    5226:	4095      	lsls	r5, r2
    5228:	4329      	orrs	r1, r5
    522a:	1e4a      	subs	r2, r1, #1
    522c:	4191      	sbcs	r1, r2
    522e:	4319      	orrs	r1, r3
    5230:	2307      	movs	r3, #7
    5232:	2200      	movs	r2, #0
    5234:	400b      	ands	r3, r1
    5236:	d009      	beq.n	524c <__aeabi_ddiv+0x618>
    5238:	230f      	movs	r3, #15
    523a:	2200      	movs	r2, #0
    523c:	400b      	ands	r3, r1
    523e:	0008      	movs	r0, r1
    5240:	2b04      	cmp	r3, #4
    5242:	d1bd      	bne.n	51c0 <__aeabi_ddiv+0x58c>
    5244:	0001      	movs	r1, r0
    5246:	0753      	lsls	r3, r2, #29
    5248:	0252      	lsls	r2, r2, #9
    524a:	0b12      	lsrs	r2, r2, #12
    524c:	08c9      	lsrs	r1, r1, #3
    524e:	4319      	orrs	r1, r3
    5250:	2301      	movs	r3, #1
    5252:	4688      	mov	r8, r1
    5254:	9902      	ldr	r1, [sp, #8]
    5256:	2400      	movs	r4, #0
    5258:	4019      	ands	r1, r3
    525a:	468c      	mov	ip, r1
    525c:	e5b8      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    525e:	4552      	cmp	r2, sl
    5260:	d8be      	bhi.n	51e0 <__aeabi_ddiv+0x5ac>
    5262:	468b      	mov	fp, r1
    5264:	2500      	movs	r5, #0
    5266:	e660      	b.n	4f2a <__aeabi_ddiv+0x2f6>
    5268:	9d03      	ldr	r5, [sp, #12]
    526a:	429d      	cmp	r5, r3
    526c:	d3c6      	bcc.n	51fc <__aeabi_ddiv+0x5c8>
    526e:	0011      	movs	r1, r2
    5270:	e762      	b.n	5138 <__aeabi_ddiv+0x504>
    5272:	2500      	movs	r5, #0
    5274:	e7d8      	b.n	5228 <__aeabi_ddiv+0x5f4>
    5276:	2280      	movs	r2, #128	; 0x80
    5278:	465b      	mov	r3, fp
    527a:	0312      	lsls	r2, r2, #12
    527c:	431a      	orrs	r2, r3
    527e:	9b01      	ldr	r3, [sp, #4]
    5280:	0312      	lsls	r2, r2, #12
    5282:	0b12      	lsrs	r2, r2, #12
    5284:	469c      	mov	ip, r3
    5286:	4688      	mov	r8, r1
    5288:	4c03      	ldr	r4, [pc, #12]	; (5298 <__aeabi_ddiv+0x664>)
    528a:	e5a1      	b.n	4dd0 <__aeabi_ddiv+0x19c>
    528c:	000003ff 	.word	0x000003ff
    5290:	feffffff 	.word	0xfeffffff
    5294:	000007fe 	.word	0x000007fe
    5298:	000007ff 	.word	0x000007ff

0000529c <__aeabi_dmul>:
    529c:	b5f0      	push	{r4, r5, r6, r7, lr}
    529e:	4657      	mov	r7, sl
    52a0:	4645      	mov	r5, r8
    52a2:	46de      	mov	lr, fp
    52a4:	464e      	mov	r6, r9
    52a6:	b5e0      	push	{r5, r6, r7, lr}
    52a8:	030c      	lsls	r4, r1, #12
    52aa:	4698      	mov	r8, r3
    52ac:	004e      	lsls	r6, r1, #1
    52ae:	0b23      	lsrs	r3, r4, #12
    52b0:	b087      	sub	sp, #28
    52b2:	0007      	movs	r7, r0
    52b4:	4692      	mov	sl, r2
    52b6:	469b      	mov	fp, r3
    52b8:	0d76      	lsrs	r6, r6, #21
    52ba:	0fcd      	lsrs	r5, r1, #31
    52bc:	2e00      	cmp	r6, #0
    52be:	d06b      	beq.n	5398 <__aeabi_dmul+0xfc>
    52c0:	4b6d      	ldr	r3, [pc, #436]	; (5478 <__aeabi_dmul+0x1dc>)
    52c2:	429e      	cmp	r6, r3
    52c4:	d035      	beq.n	5332 <__aeabi_dmul+0x96>
    52c6:	2480      	movs	r4, #128	; 0x80
    52c8:	465b      	mov	r3, fp
    52ca:	0f42      	lsrs	r2, r0, #29
    52cc:	0424      	lsls	r4, r4, #16
    52ce:	00db      	lsls	r3, r3, #3
    52d0:	4314      	orrs	r4, r2
    52d2:	431c      	orrs	r4, r3
    52d4:	00c3      	lsls	r3, r0, #3
    52d6:	4699      	mov	r9, r3
    52d8:	4b68      	ldr	r3, [pc, #416]	; (547c <__aeabi_dmul+0x1e0>)
    52da:	46a3      	mov	fp, r4
    52dc:	469c      	mov	ip, r3
    52de:	2300      	movs	r3, #0
    52e0:	2700      	movs	r7, #0
    52e2:	4466      	add	r6, ip
    52e4:	9302      	str	r3, [sp, #8]
    52e6:	4643      	mov	r3, r8
    52e8:	031c      	lsls	r4, r3, #12
    52ea:	005a      	lsls	r2, r3, #1
    52ec:	0fdb      	lsrs	r3, r3, #31
    52ee:	4650      	mov	r0, sl
    52f0:	0b24      	lsrs	r4, r4, #12
    52f2:	0d52      	lsrs	r2, r2, #21
    52f4:	4698      	mov	r8, r3
    52f6:	d100      	bne.n	52fa <__aeabi_dmul+0x5e>
    52f8:	e076      	b.n	53e8 <__aeabi_dmul+0x14c>
    52fa:	4b5f      	ldr	r3, [pc, #380]	; (5478 <__aeabi_dmul+0x1dc>)
    52fc:	429a      	cmp	r2, r3
    52fe:	d06d      	beq.n	53dc <__aeabi_dmul+0x140>
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	0f41      	lsrs	r1, r0, #29
    5304:	041b      	lsls	r3, r3, #16
    5306:	430b      	orrs	r3, r1
    5308:	495c      	ldr	r1, [pc, #368]	; (547c <__aeabi_dmul+0x1e0>)
    530a:	00e4      	lsls	r4, r4, #3
    530c:	468c      	mov	ip, r1
    530e:	431c      	orrs	r4, r3
    5310:	00c3      	lsls	r3, r0, #3
    5312:	2000      	movs	r0, #0
    5314:	4462      	add	r2, ip
    5316:	4641      	mov	r1, r8
    5318:	18b6      	adds	r6, r6, r2
    531a:	4069      	eors	r1, r5
    531c:	1c72      	adds	r2, r6, #1
    531e:	9101      	str	r1, [sp, #4]
    5320:	4694      	mov	ip, r2
    5322:	4307      	orrs	r7, r0
    5324:	2f0f      	cmp	r7, #15
    5326:	d900      	bls.n	532a <__aeabi_dmul+0x8e>
    5328:	e0b0      	b.n	548c <__aeabi_dmul+0x1f0>
    532a:	4a55      	ldr	r2, [pc, #340]	; (5480 <__aeabi_dmul+0x1e4>)
    532c:	00bf      	lsls	r7, r7, #2
    532e:	59d2      	ldr	r2, [r2, r7]
    5330:	4697      	mov	pc, r2
    5332:	465b      	mov	r3, fp
    5334:	4303      	orrs	r3, r0
    5336:	4699      	mov	r9, r3
    5338:	d000      	beq.n	533c <__aeabi_dmul+0xa0>
    533a:	e087      	b.n	544c <__aeabi_dmul+0x1b0>
    533c:	2300      	movs	r3, #0
    533e:	469b      	mov	fp, r3
    5340:	3302      	adds	r3, #2
    5342:	2708      	movs	r7, #8
    5344:	9302      	str	r3, [sp, #8]
    5346:	e7ce      	b.n	52e6 <__aeabi_dmul+0x4a>
    5348:	4642      	mov	r2, r8
    534a:	9201      	str	r2, [sp, #4]
    534c:	2802      	cmp	r0, #2
    534e:	d067      	beq.n	5420 <__aeabi_dmul+0x184>
    5350:	2803      	cmp	r0, #3
    5352:	d100      	bne.n	5356 <__aeabi_dmul+0xba>
    5354:	e20e      	b.n	5774 <__aeabi_dmul+0x4d8>
    5356:	2801      	cmp	r0, #1
    5358:	d000      	beq.n	535c <__aeabi_dmul+0xc0>
    535a:	e162      	b.n	5622 <__aeabi_dmul+0x386>
    535c:	2300      	movs	r3, #0
    535e:	2400      	movs	r4, #0
    5360:	2200      	movs	r2, #0
    5362:	4699      	mov	r9, r3
    5364:	9901      	ldr	r1, [sp, #4]
    5366:	4001      	ands	r1, r0
    5368:	b2cd      	uxtb	r5, r1
    536a:	2100      	movs	r1, #0
    536c:	0312      	lsls	r2, r2, #12
    536e:	0d0b      	lsrs	r3, r1, #20
    5370:	0b12      	lsrs	r2, r2, #12
    5372:	051b      	lsls	r3, r3, #20
    5374:	4313      	orrs	r3, r2
    5376:	4a43      	ldr	r2, [pc, #268]	; (5484 <__aeabi_dmul+0x1e8>)
    5378:	0524      	lsls	r4, r4, #20
    537a:	4013      	ands	r3, r2
    537c:	431c      	orrs	r4, r3
    537e:	0064      	lsls	r4, r4, #1
    5380:	07ed      	lsls	r5, r5, #31
    5382:	0864      	lsrs	r4, r4, #1
    5384:	432c      	orrs	r4, r5
    5386:	4648      	mov	r0, r9
    5388:	0021      	movs	r1, r4
    538a:	b007      	add	sp, #28
    538c:	bc3c      	pop	{r2, r3, r4, r5}
    538e:	4690      	mov	r8, r2
    5390:	4699      	mov	r9, r3
    5392:	46a2      	mov	sl, r4
    5394:	46ab      	mov	fp, r5
    5396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5398:	4303      	orrs	r3, r0
    539a:	4699      	mov	r9, r3
    539c:	d04f      	beq.n	543e <__aeabi_dmul+0x1a2>
    539e:	465b      	mov	r3, fp
    53a0:	2b00      	cmp	r3, #0
    53a2:	d100      	bne.n	53a6 <__aeabi_dmul+0x10a>
    53a4:	e189      	b.n	56ba <__aeabi_dmul+0x41e>
    53a6:	4658      	mov	r0, fp
    53a8:	f7ff fc06 	bl	4bb8 <__clzsi2>
    53ac:	0003      	movs	r3, r0
    53ae:	3b0b      	subs	r3, #11
    53b0:	2b1c      	cmp	r3, #28
    53b2:	dd00      	ble.n	53b6 <__aeabi_dmul+0x11a>
    53b4:	e17a      	b.n	56ac <__aeabi_dmul+0x410>
    53b6:	221d      	movs	r2, #29
    53b8:	1ad3      	subs	r3, r2, r3
    53ba:	003a      	movs	r2, r7
    53bc:	0001      	movs	r1, r0
    53be:	465c      	mov	r4, fp
    53c0:	40da      	lsrs	r2, r3
    53c2:	3908      	subs	r1, #8
    53c4:	408c      	lsls	r4, r1
    53c6:	0013      	movs	r3, r2
    53c8:	408f      	lsls	r7, r1
    53ca:	4323      	orrs	r3, r4
    53cc:	469b      	mov	fp, r3
    53ce:	46b9      	mov	r9, r7
    53d0:	2300      	movs	r3, #0
    53d2:	4e2d      	ldr	r6, [pc, #180]	; (5488 <__aeabi_dmul+0x1ec>)
    53d4:	2700      	movs	r7, #0
    53d6:	1a36      	subs	r6, r6, r0
    53d8:	9302      	str	r3, [sp, #8]
    53da:	e784      	b.n	52e6 <__aeabi_dmul+0x4a>
    53dc:	4653      	mov	r3, sl
    53de:	4323      	orrs	r3, r4
    53e0:	d12a      	bne.n	5438 <__aeabi_dmul+0x19c>
    53e2:	2400      	movs	r4, #0
    53e4:	2002      	movs	r0, #2
    53e6:	e796      	b.n	5316 <__aeabi_dmul+0x7a>
    53e8:	4653      	mov	r3, sl
    53ea:	4323      	orrs	r3, r4
    53ec:	d020      	beq.n	5430 <__aeabi_dmul+0x194>
    53ee:	2c00      	cmp	r4, #0
    53f0:	d100      	bne.n	53f4 <__aeabi_dmul+0x158>
    53f2:	e157      	b.n	56a4 <__aeabi_dmul+0x408>
    53f4:	0020      	movs	r0, r4
    53f6:	f7ff fbdf 	bl	4bb8 <__clzsi2>
    53fa:	0003      	movs	r3, r0
    53fc:	3b0b      	subs	r3, #11
    53fe:	2b1c      	cmp	r3, #28
    5400:	dd00      	ble.n	5404 <__aeabi_dmul+0x168>
    5402:	e149      	b.n	5698 <__aeabi_dmul+0x3fc>
    5404:	211d      	movs	r1, #29
    5406:	1acb      	subs	r3, r1, r3
    5408:	4651      	mov	r1, sl
    540a:	0002      	movs	r2, r0
    540c:	40d9      	lsrs	r1, r3
    540e:	4653      	mov	r3, sl
    5410:	3a08      	subs	r2, #8
    5412:	4094      	lsls	r4, r2
    5414:	4093      	lsls	r3, r2
    5416:	430c      	orrs	r4, r1
    5418:	4a1b      	ldr	r2, [pc, #108]	; (5488 <__aeabi_dmul+0x1ec>)
    541a:	1a12      	subs	r2, r2, r0
    541c:	2000      	movs	r0, #0
    541e:	e77a      	b.n	5316 <__aeabi_dmul+0x7a>
    5420:	2501      	movs	r5, #1
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	4c14      	ldr	r4, [pc, #80]	; (5478 <__aeabi_dmul+0x1dc>)
    5426:	401d      	ands	r5, r3
    5428:	2300      	movs	r3, #0
    542a:	2200      	movs	r2, #0
    542c:	4699      	mov	r9, r3
    542e:	e79c      	b.n	536a <__aeabi_dmul+0xce>
    5430:	2400      	movs	r4, #0
    5432:	2200      	movs	r2, #0
    5434:	2001      	movs	r0, #1
    5436:	e76e      	b.n	5316 <__aeabi_dmul+0x7a>
    5438:	4653      	mov	r3, sl
    543a:	2003      	movs	r0, #3
    543c:	e76b      	b.n	5316 <__aeabi_dmul+0x7a>
    543e:	2300      	movs	r3, #0
    5440:	469b      	mov	fp, r3
    5442:	3301      	adds	r3, #1
    5444:	2704      	movs	r7, #4
    5446:	2600      	movs	r6, #0
    5448:	9302      	str	r3, [sp, #8]
    544a:	e74c      	b.n	52e6 <__aeabi_dmul+0x4a>
    544c:	2303      	movs	r3, #3
    544e:	4681      	mov	r9, r0
    5450:	270c      	movs	r7, #12
    5452:	9302      	str	r3, [sp, #8]
    5454:	e747      	b.n	52e6 <__aeabi_dmul+0x4a>
    5456:	2280      	movs	r2, #128	; 0x80
    5458:	2300      	movs	r3, #0
    545a:	2500      	movs	r5, #0
    545c:	0312      	lsls	r2, r2, #12
    545e:	4699      	mov	r9, r3
    5460:	4c05      	ldr	r4, [pc, #20]	; (5478 <__aeabi_dmul+0x1dc>)
    5462:	e782      	b.n	536a <__aeabi_dmul+0xce>
    5464:	465c      	mov	r4, fp
    5466:	464b      	mov	r3, r9
    5468:	9802      	ldr	r0, [sp, #8]
    546a:	e76f      	b.n	534c <__aeabi_dmul+0xb0>
    546c:	465c      	mov	r4, fp
    546e:	464b      	mov	r3, r9
    5470:	9501      	str	r5, [sp, #4]
    5472:	9802      	ldr	r0, [sp, #8]
    5474:	e76a      	b.n	534c <__aeabi_dmul+0xb0>
    5476:	46c0      	nop			; (mov r8, r8)
    5478:	000007ff 	.word	0x000007ff
    547c:	fffffc01 	.word	0xfffffc01
    5480:	00006164 	.word	0x00006164
    5484:	800fffff 	.word	0x800fffff
    5488:	fffffc0d 	.word	0xfffffc0d
    548c:	464a      	mov	r2, r9
    548e:	4649      	mov	r1, r9
    5490:	0c17      	lsrs	r7, r2, #16
    5492:	0c1a      	lsrs	r2, r3, #16
    5494:	041b      	lsls	r3, r3, #16
    5496:	0c1b      	lsrs	r3, r3, #16
    5498:	0408      	lsls	r0, r1, #16
    549a:	0019      	movs	r1, r3
    549c:	0c00      	lsrs	r0, r0, #16
    549e:	4341      	muls	r1, r0
    54a0:	0015      	movs	r5, r2
    54a2:	4688      	mov	r8, r1
    54a4:	0019      	movs	r1, r3
    54a6:	437d      	muls	r5, r7
    54a8:	4379      	muls	r1, r7
    54aa:	9503      	str	r5, [sp, #12]
    54ac:	4689      	mov	r9, r1
    54ae:	0029      	movs	r1, r5
    54b0:	0015      	movs	r5, r2
    54b2:	4345      	muls	r5, r0
    54b4:	444d      	add	r5, r9
    54b6:	9502      	str	r5, [sp, #8]
    54b8:	4645      	mov	r5, r8
    54ba:	0c2d      	lsrs	r5, r5, #16
    54bc:	46aa      	mov	sl, r5
    54be:	9d02      	ldr	r5, [sp, #8]
    54c0:	4455      	add	r5, sl
    54c2:	45a9      	cmp	r9, r5
    54c4:	d906      	bls.n	54d4 <__aeabi_dmul+0x238>
    54c6:	468a      	mov	sl, r1
    54c8:	2180      	movs	r1, #128	; 0x80
    54ca:	0249      	lsls	r1, r1, #9
    54cc:	4689      	mov	r9, r1
    54ce:	44ca      	add	sl, r9
    54d0:	4651      	mov	r1, sl
    54d2:	9103      	str	r1, [sp, #12]
    54d4:	0c29      	lsrs	r1, r5, #16
    54d6:	9104      	str	r1, [sp, #16]
    54d8:	4641      	mov	r1, r8
    54da:	0409      	lsls	r1, r1, #16
    54dc:	042d      	lsls	r5, r5, #16
    54de:	0c09      	lsrs	r1, r1, #16
    54e0:	4688      	mov	r8, r1
    54e2:	0029      	movs	r1, r5
    54e4:	0c25      	lsrs	r5, r4, #16
    54e6:	0424      	lsls	r4, r4, #16
    54e8:	4441      	add	r1, r8
    54ea:	0c24      	lsrs	r4, r4, #16
    54ec:	9105      	str	r1, [sp, #20]
    54ee:	0021      	movs	r1, r4
    54f0:	4341      	muls	r1, r0
    54f2:	4688      	mov	r8, r1
    54f4:	0021      	movs	r1, r4
    54f6:	4379      	muls	r1, r7
    54f8:	468a      	mov	sl, r1
    54fa:	4368      	muls	r0, r5
    54fc:	4641      	mov	r1, r8
    54fe:	4450      	add	r0, sl
    5500:	4681      	mov	r9, r0
    5502:	0c08      	lsrs	r0, r1, #16
    5504:	4448      	add	r0, r9
    5506:	436f      	muls	r7, r5
    5508:	4582      	cmp	sl, r0
    550a:	d903      	bls.n	5514 <__aeabi_dmul+0x278>
    550c:	2180      	movs	r1, #128	; 0x80
    550e:	0249      	lsls	r1, r1, #9
    5510:	4689      	mov	r9, r1
    5512:	444f      	add	r7, r9
    5514:	0c01      	lsrs	r1, r0, #16
    5516:	4689      	mov	r9, r1
    5518:	0039      	movs	r1, r7
    551a:	4449      	add	r1, r9
    551c:	9102      	str	r1, [sp, #8]
    551e:	4641      	mov	r1, r8
    5520:	040f      	lsls	r7, r1, #16
    5522:	9904      	ldr	r1, [sp, #16]
    5524:	0c3f      	lsrs	r7, r7, #16
    5526:	4688      	mov	r8, r1
    5528:	0400      	lsls	r0, r0, #16
    552a:	19c0      	adds	r0, r0, r7
    552c:	4480      	add	r8, r0
    552e:	4641      	mov	r1, r8
    5530:	9104      	str	r1, [sp, #16]
    5532:	4659      	mov	r1, fp
    5534:	0c0f      	lsrs	r7, r1, #16
    5536:	0409      	lsls	r1, r1, #16
    5538:	0c09      	lsrs	r1, r1, #16
    553a:	4688      	mov	r8, r1
    553c:	4359      	muls	r1, r3
    553e:	468a      	mov	sl, r1
    5540:	0039      	movs	r1, r7
    5542:	4351      	muls	r1, r2
    5544:	4689      	mov	r9, r1
    5546:	4641      	mov	r1, r8
    5548:	434a      	muls	r2, r1
    554a:	4651      	mov	r1, sl
    554c:	0c09      	lsrs	r1, r1, #16
    554e:	468b      	mov	fp, r1
    5550:	437b      	muls	r3, r7
    5552:	18d2      	adds	r2, r2, r3
    5554:	445a      	add	r2, fp
    5556:	4293      	cmp	r3, r2
    5558:	d903      	bls.n	5562 <__aeabi_dmul+0x2c6>
    555a:	2380      	movs	r3, #128	; 0x80
    555c:	025b      	lsls	r3, r3, #9
    555e:	469b      	mov	fp, r3
    5560:	44d9      	add	r9, fp
    5562:	4651      	mov	r1, sl
    5564:	0409      	lsls	r1, r1, #16
    5566:	0c09      	lsrs	r1, r1, #16
    5568:	468a      	mov	sl, r1
    556a:	4641      	mov	r1, r8
    556c:	4361      	muls	r1, r4
    556e:	437c      	muls	r4, r7
    5570:	0c13      	lsrs	r3, r2, #16
    5572:	0412      	lsls	r2, r2, #16
    5574:	444b      	add	r3, r9
    5576:	4452      	add	r2, sl
    5578:	46a1      	mov	r9, r4
    557a:	468a      	mov	sl, r1
    557c:	003c      	movs	r4, r7
    557e:	4641      	mov	r1, r8
    5580:	436c      	muls	r4, r5
    5582:	434d      	muls	r5, r1
    5584:	4651      	mov	r1, sl
    5586:	444d      	add	r5, r9
    5588:	0c0f      	lsrs	r7, r1, #16
    558a:	197d      	adds	r5, r7, r5
    558c:	45a9      	cmp	r9, r5
    558e:	d903      	bls.n	5598 <__aeabi_dmul+0x2fc>
    5590:	2180      	movs	r1, #128	; 0x80
    5592:	0249      	lsls	r1, r1, #9
    5594:	4688      	mov	r8, r1
    5596:	4444      	add	r4, r8
    5598:	9f04      	ldr	r7, [sp, #16]
    559a:	9903      	ldr	r1, [sp, #12]
    559c:	46b8      	mov	r8, r7
    559e:	4441      	add	r1, r8
    55a0:	468b      	mov	fp, r1
    55a2:	4583      	cmp	fp, r0
    55a4:	4180      	sbcs	r0, r0
    55a6:	4241      	negs	r1, r0
    55a8:	4688      	mov	r8, r1
    55aa:	4651      	mov	r1, sl
    55ac:	0408      	lsls	r0, r1, #16
    55ae:	042f      	lsls	r7, r5, #16
    55b0:	0c00      	lsrs	r0, r0, #16
    55b2:	183f      	adds	r7, r7, r0
    55b4:	4658      	mov	r0, fp
    55b6:	9902      	ldr	r1, [sp, #8]
    55b8:	1810      	adds	r0, r2, r0
    55ba:	4689      	mov	r9, r1
    55bc:	4290      	cmp	r0, r2
    55be:	4192      	sbcs	r2, r2
    55c0:	444f      	add	r7, r9
    55c2:	46ba      	mov	sl, r7
    55c4:	4252      	negs	r2, r2
    55c6:	4699      	mov	r9, r3
    55c8:	4693      	mov	fp, r2
    55ca:	44c2      	add	sl, r8
    55cc:	44d1      	add	r9, sl
    55ce:	44cb      	add	fp, r9
    55d0:	428f      	cmp	r7, r1
    55d2:	41bf      	sbcs	r7, r7
    55d4:	45c2      	cmp	sl, r8
    55d6:	4189      	sbcs	r1, r1
    55d8:	4599      	cmp	r9, r3
    55da:	419b      	sbcs	r3, r3
    55dc:	4593      	cmp	fp, r2
    55de:	4192      	sbcs	r2, r2
    55e0:	427f      	negs	r7, r7
    55e2:	4249      	negs	r1, r1
    55e4:	0c2d      	lsrs	r5, r5, #16
    55e6:	4252      	negs	r2, r2
    55e8:	430f      	orrs	r7, r1
    55ea:	425b      	negs	r3, r3
    55ec:	4313      	orrs	r3, r2
    55ee:	197f      	adds	r7, r7, r5
    55f0:	18ff      	adds	r7, r7, r3
    55f2:	465b      	mov	r3, fp
    55f4:	193c      	adds	r4, r7, r4
    55f6:	0ddb      	lsrs	r3, r3, #23
    55f8:	9a05      	ldr	r2, [sp, #20]
    55fa:	0264      	lsls	r4, r4, #9
    55fc:	431c      	orrs	r4, r3
    55fe:	0243      	lsls	r3, r0, #9
    5600:	4313      	orrs	r3, r2
    5602:	1e5d      	subs	r5, r3, #1
    5604:	41ab      	sbcs	r3, r5
    5606:	465a      	mov	r2, fp
    5608:	0dc0      	lsrs	r0, r0, #23
    560a:	4303      	orrs	r3, r0
    560c:	0252      	lsls	r2, r2, #9
    560e:	4313      	orrs	r3, r2
    5610:	01e2      	lsls	r2, r4, #7
    5612:	d556      	bpl.n	56c2 <__aeabi_dmul+0x426>
    5614:	2001      	movs	r0, #1
    5616:	085a      	lsrs	r2, r3, #1
    5618:	4003      	ands	r3, r0
    561a:	4313      	orrs	r3, r2
    561c:	07e2      	lsls	r2, r4, #31
    561e:	4313      	orrs	r3, r2
    5620:	0864      	lsrs	r4, r4, #1
    5622:	485a      	ldr	r0, [pc, #360]	; (578c <__aeabi_dmul+0x4f0>)
    5624:	4460      	add	r0, ip
    5626:	2800      	cmp	r0, #0
    5628:	dd4d      	ble.n	56c6 <__aeabi_dmul+0x42a>
    562a:	075a      	lsls	r2, r3, #29
    562c:	d009      	beq.n	5642 <__aeabi_dmul+0x3a6>
    562e:	220f      	movs	r2, #15
    5630:	401a      	ands	r2, r3
    5632:	2a04      	cmp	r2, #4
    5634:	d005      	beq.n	5642 <__aeabi_dmul+0x3a6>
    5636:	1d1a      	adds	r2, r3, #4
    5638:	429a      	cmp	r2, r3
    563a:	419b      	sbcs	r3, r3
    563c:	425b      	negs	r3, r3
    563e:	18e4      	adds	r4, r4, r3
    5640:	0013      	movs	r3, r2
    5642:	01e2      	lsls	r2, r4, #7
    5644:	d504      	bpl.n	5650 <__aeabi_dmul+0x3b4>
    5646:	2080      	movs	r0, #128	; 0x80
    5648:	4a51      	ldr	r2, [pc, #324]	; (5790 <__aeabi_dmul+0x4f4>)
    564a:	00c0      	lsls	r0, r0, #3
    564c:	4014      	ands	r4, r2
    564e:	4460      	add	r0, ip
    5650:	4a50      	ldr	r2, [pc, #320]	; (5794 <__aeabi_dmul+0x4f8>)
    5652:	4290      	cmp	r0, r2
    5654:	dd00      	ble.n	5658 <__aeabi_dmul+0x3bc>
    5656:	e6e3      	b.n	5420 <__aeabi_dmul+0x184>
    5658:	2501      	movs	r5, #1
    565a:	08db      	lsrs	r3, r3, #3
    565c:	0762      	lsls	r2, r4, #29
    565e:	431a      	orrs	r2, r3
    5660:	0264      	lsls	r4, r4, #9
    5662:	9b01      	ldr	r3, [sp, #4]
    5664:	4691      	mov	r9, r2
    5666:	0b22      	lsrs	r2, r4, #12
    5668:	0544      	lsls	r4, r0, #21
    566a:	0d64      	lsrs	r4, r4, #21
    566c:	401d      	ands	r5, r3
    566e:	e67c      	b.n	536a <__aeabi_dmul+0xce>
    5670:	2280      	movs	r2, #128	; 0x80
    5672:	4659      	mov	r1, fp
    5674:	0312      	lsls	r2, r2, #12
    5676:	4211      	tst	r1, r2
    5678:	d008      	beq.n	568c <__aeabi_dmul+0x3f0>
    567a:	4214      	tst	r4, r2
    567c:	d106      	bne.n	568c <__aeabi_dmul+0x3f0>
    567e:	4322      	orrs	r2, r4
    5680:	0312      	lsls	r2, r2, #12
    5682:	0b12      	lsrs	r2, r2, #12
    5684:	4645      	mov	r5, r8
    5686:	4699      	mov	r9, r3
    5688:	4c43      	ldr	r4, [pc, #268]	; (5798 <__aeabi_dmul+0x4fc>)
    568a:	e66e      	b.n	536a <__aeabi_dmul+0xce>
    568c:	465b      	mov	r3, fp
    568e:	431a      	orrs	r2, r3
    5690:	0312      	lsls	r2, r2, #12
    5692:	0b12      	lsrs	r2, r2, #12
    5694:	4c40      	ldr	r4, [pc, #256]	; (5798 <__aeabi_dmul+0x4fc>)
    5696:	e668      	b.n	536a <__aeabi_dmul+0xce>
    5698:	0003      	movs	r3, r0
    569a:	4654      	mov	r4, sl
    569c:	3b28      	subs	r3, #40	; 0x28
    569e:	409c      	lsls	r4, r3
    56a0:	2300      	movs	r3, #0
    56a2:	e6b9      	b.n	5418 <__aeabi_dmul+0x17c>
    56a4:	f7ff fa88 	bl	4bb8 <__clzsi2>
    56a8:	3020      	adds	r0, #32
    56aa:	e6a6      	b.n	53fa <__aeabi_dmul+0x15e>
    56ac:	0003      	movs	r3, r0
    56ae:	3b28      	subs	r3, #40	; 0x28
    56b0:	409f      	lsls	r7, r3
    56b2:	2300      	movs	r3, #0
    56b4:	46bb      	mov	fp, r7
    56b6:	4699      	mov	r9, r3
    56b8:	e68a      	b.n	53d0 <__aeabi_dmul+0x134>
    56ba:	f7ff fa7d 	bl	4bb8 <__clzsi2>
    56be:	3020      	adds	r0, #32
    56c0:	e674      	b.n	53ac <__aeabi_dmul+0x110>
    56c2:	46b4      	mov	ip, r6
    56c4:	e7ad      	b.n	5622 <__aeabi_dmul+0x386>
    56c6:	2501      	movs	r5, #1
    56c8:	1a2a      	subs	r2, r5, r0
    56ca:	2a38      	cmp	r2, #56	; 0x38
    56cc:	dd06      	ble.n	56dc <__aeabi_dmul+0x440>
    56ce:	9b01      	ldr	r3, [sp, #4]
    56d0:	2400      	movs	r4, #0
    56d2:	401d      	ands	r5, r3
    56d4:	2300      	movs	r3, #0
    56d6:	2200      	movs	r2, #0
    56d8:	4699      	mov	r9, r3
    56da:	e646      	b.n	536a <__aeabi_dmul+0xce>
    56dc:	2a1f      	cmp	r2, #31
    56de:	dc21      	bgt.n	5724 <__aeabi_dmul+0x488>
    56e0:	2520      	movs	r5, #32
    56e2:	0020      	movs	r0, r4
    56e4:	1aad      	subs	r5, r5, r2
    56e6:	001e      	movs	r6, r3
    56e8:	40ab      	lsls	r3, r5
    56ea:	40a8      	lsls	r0, r5
    56ec:	40d6      	lsrs	r6, r2
    56ee:	1e5d      	subs	r5, r3, #1
    56f0:	41ab      	sbcs	r3, r5
    56f2:	4330      	orrs	r0, r6
    56f4:	4318      	orrs	r0, r3
    56f6:	40d4      	lsrs	r4, r2
    56f8:	0743      	lsls	r3, r0, #29
    56fa:	d009      	beq.n	5710 <__aeabi_dmul+0x474>
    56fc:	230f      	movs	r3, #15
    56fe:	4003      	ands	r3, r0
    5700:	2b04      	cmp	r3, #4
    5702:	d005      	beq.n	5710 <__aeabi_dmul+0x474>
    5704:	0003      	movs	r3, r0
    5706:	1d18      	adds	r0, r3, #4
    5708:	4298      	cmp	r0, r3
    570a:	419b      	sbcs	r3, r3
    570c:	425b      	negs	r3, r3
    570e:	18e4      	adds	r4, r4, r3
    5710:	0223      	lsls	r3, r4, #8
    5712:	d521      	bpl.n	5758 <__aeabi_dmul+0x4bc>
    5714:	2501      	movs	r5, #1
    5716:	9b01      	ldr	r3, [sp, #4]
    5718:	2401      	movs	r4, #1
    571a:	401d      	ands	r5, r3
    571c:	2300      	movs	r3, #0
    571e:	2200      	movs	r2, #0
    5720:	4699      	mov	r9, r3
    5722:	e622      	b.n	536a <__aeabi_dmul+0xce>
    5724:	251f      	movs	r5, #31
    5726:	0021      	movs	r1, r4
    5728:	426d      	negs	r5, r5
    572a:	1a28      	subs	r0, r5, r0
    572c:	40c1      	lsrs	r1, r0
    572e:	0008      	movs	r0, r1
    5730:	2a20      	cmp	r2, #32
    5732:	d01d      	beq.n	5770 <__aeabi_dmul+0x4d4>
    5734:	355f      	adds	r5, #95	; 0x5f
    5736:	1aaa      	subs	r2, r5, r2
    5738:	4094      	lsls	r4, r2
    573a:	4323      	orrs	r3, r4
    573c:	1e5c      	subs	r4, r3, #1
    573e:	41a3      	sbcs	r3, r4
    5740:	2507      	movs	r5, #7
    5742:	4303      	orrs	r3, r0
    5744:	401d      	ands	r5, r3
    5746:	2200      	movs	r2, #0
    5748:	2d00      	cmp	r5, #0
    574a:	d009      	beq.n	5760 <__aeabi_dmul+0x4c4>
    574c:	220f      	movs	r2, #15
    574e:	2400      	movs	r4, #0
    5750:	401a      	ands	r2, r3
    5752:	0018      	movs	r0, r3
    5754:	2a04      	cmp	r2, #4
    5756:	d1d6      	bne.n	5706 <__aeabi_dmul+0x46a>
    5758:	0003      	movs	r3, r0
    575a:	0765      	lsls	r5, r4, #29
    575c:	0264      	lsls	r4, r4, #9
    575e:	0b22      	lsrs	r2, r4, #12
    5760:	08db      	lsrs	r3, r3, #3
    5762:	432b      	orrs	r3, r5
    5764:	2501      	movs	r5, #1
    5766:	4699      	mov	r9, r3
    5768:	9b01      	ldr	r3, [sp, #4]
    576a:	2400      	movs	r4, #0
    576c:	401d      	ands	r5, r3
    576e:	e5fc      	b.n	536a <__aeabi_dmul+0xce>
    5770:	2400      	movs	r4, #0
    5772:	e7e2      	b.n	573a <__aeabi_dmul+0x49e>
    5774:	2280      	movs	r2, #128	; 0x80
    5776:	2501      	movs	r5, #1
    5778:	0312      	lsls	r2, r2, #12
    577a:	4322      	orrs	r2, r4
    577c:	9901      	ldr	r1, [sp, #4]
    577e:	0312      	lsls	r2, r2, #12
    5780:	0b12      	lsrs	r2, r2, #12
    5782:	400d      	ands	r5, r1
    5784:	4699      	mov	r9, r3
    5786:	4c04      	ldr	r4, [pc, #16]	; (5798 <__aeabi_dmul+0x4fc>)
    5788:	e5ef      	b.n	536a <__aeabi_dmul+0xce>
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	000003ff 	.word	0x000003ff
    5790:	feffffff 	.word	0xfeffffff
    5794:	000007fe 	.word	0x000007fe
    5798:	000007ff 	.word	0x000007ff

0000579c <__aeabi_dsub>:
    579c:	b5f0      	push	{r4, r5, r6, r7, lr}
    579e:	4646      	mov	r6, r8
    57a0:	46d6      	mov	lr, sl
    57a2:	464f      	mov	r7, r9
    57a4:	030c      	lsls	r4, r1, #12
    57a6:	b5c0      	push	{r6, r7, lr}
    57a8:	0fcd      	lsrs	r5, r1, #31
    57aa:	004e      	lsls	r6, r1, #1
    57ac:	0a61      	lsrs	r1, r4, #9
    57ae:	0f44      	lsrs	r4, r0, #29
    57b0:	430c      	orrs	r4, r1
    57b2:	00c1      	lsls	r1, r0, #3
    57b4:	0058      	lsls	r0, r3, #1
    57b6:	0d40      	lsrs	r0, r0, #21
    57b8:	4684      	mov	ip, r0
    57ba:	468a      	mov	sl, r1
    57bc:	000f      	movs	r7, r1
    57be:	0319      	lsls	r1, r3, #12
    57c0:	0f50      	lsrs	r0, r2, #29
    57c2:	0a49      	lsrs	r1, r1, #9
    57c4:	4301      	orrs	r1, r0
    57c6:	48c6      	ldr	r0, [pc, #792]	; (5ae0 <__aeabi_dsub+0x344>)
    57c8:	0d76      	lsrs	r6, r6, #21
    57ca:	46a8      	mov	r8, r5
    57cc:	0fdb      	lsrs	r3, r3, #31
    57ce:	00d2      	lsls	r2, r2, #3
    57d0:	4584      	cmp	ip, r0
    57d2:	d100      	bne.n	57d6 <__aeabi_dsub+0x3a>
    57d4:	e0d8      	b.n	5988 <__aeabi_dsub+0x1ec>
    57d6:	2001      	movs	r0, #1
    57d8:	4043      	eors	r3, r0
    57da:	42ab      	cmp	r3, r5
    57dc:	d100      	bne.n	57e0 <__aeabi_dsub+0x44>
    57de:	e0a6      	b.n	592e <__aeabi_dsub+0x192>
    57e0:	4660      	mov	r0, ip
    57e2:	1a35      	subs	r5, r6, r0
    57e4:	2d00      	cmp	r5, #0
    57e6:	dc00      	bgt.n	57ea <__aeabi_dsub+0x4e>
    57e8:	e105      	b.n	59f6 <__aeabi_dsub+0x25a>
    57ea:	2800      	cmp	r0, #0
    57ec:	d110      	bne.n	5810 <__aeabi_dsub+0x74>
    57ee:	000b      	movs	r3, r1
    57f0:	4313      	orrs	r3, r2
    57f2:	d100      	bne.n	57f6 <__aeabi_dsub+0x5a>
    57f4:	e0d7      	b.n	59a6 <__aeabi_dsub+0x20a>
    57f6:	1e6b      	subs	r3, r5, #1
    57f8:	2b00      	cmp	r3, #0
    57fa:	d000      	beq.n	57fe <__aeabi_dsub+0x62>
    57fc:	e14b      	b.n	5a96 <__aeabi_dsub+0x2fa>
    57fe:	4653      	mov	r3, sl
    5800:	1a9f      	subs	r7, r3, r2
    5802:	45ba      	cmp	sl, r7
    5804:	4180      	sbcs	r0, r0
    5806:	1a64      	subs	r4, r4, r1
    5808:	4240      	negs	r0, r0
    580a:	1a24      	subs	r4, r4, r0
    580c:	2601      	movs	r6, #1
    580e:	e01e      	b.n	584e <__aeabi_dsub+0xb2>
    5810:	4bb3      	ldr	r3, [pc, #716]	; (5ae0 <__aeabi_dsub+0x344>)
    5812:	429e      	cmp	r6, r3
    5814:	d048      	beq.n	58a8 <__aeabi_dsub+0x10c>
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	041b      	lsls	r3, r3, #16
    581a:	4319      	orrs	r1, r3
    581c:	2d38      	cmp	r5, #56	; 0x38
    581e:	dd00      	ble.n	5822 <__aeabi_dsub+0x86>
    5820:	e119      	b.n	5a56 <__aeabi_dsub+0x2ba>
    5822:	2d1f      	cmp	r5, #31
    5824:	dd00      	ble.n	5828 <__aeabi_dsub+0x8c>
    5826:	e14c      	b.n	5ac2 <__aeabi_dsub+0x326>
    5828:	2320      	movs	r3, #32
    582a:	000f      	movs	r7, r1
    582c:	1b5b      	subs	r3, r3, r5
    582e:	0010      	movs	r0, r2
    5830:	409a      	lsls	r2, r3
    5832:	409f      	lsls	r7, r3
    5834:	40e8      	lsrs	r0, r5
    5836:	1e53      	subs	r3, r2, #1
    5838:	419a      	sbcs	r2, r3
    583a:	40e9      	lsrs	r1, r5
    583c:	4307      	orrs	r7, r0
    583e:	4317      	orrs	r7, r2
    5840:	4653      	mov	r3, sl
    5842:	1bdf      	subs	r7, r3, r7
    5844:	1a61      	subs	r1, r4, r1
    5846:	45ba      	cmp	sl, r7
    5848:	41a4      	sbcs	r4, r4
    584a:	4264      	negs	r4, r4
    584c:	1b0c      	subs	r4, r1, r4
    584e:	0223      	lsls	r3, r4, #8
    5850:	d400      	bmi.n	5854 <__aeabi_dsub+0xb8>
    5852:	e0c5      	b.n	59e0 <__aeabi_dsub+0x244>
    5854:	0264      	lsls	r4, r4, #9
    5856:	0a65      	lsrs	r5, r4, #9
    5858:	2d00      	cmp	r5, #0
    585a:	d100      	bne.n	585e <__aeabi_dsub+0xc2>
    585c:	e0f6      	b.n	5a4c <__aeabi_dsub+0x2b0>
    585e:	0028      	movs	r0, r5
    5860:	f7ff f9aa 	bl	4bb8 <__clzsi2>
    5864:	0003      	movs	r3, r0
    5866:	3b08      	subs	r3, #8
    5868:	2b1f      	cmp	r3, #31
    586a:	dd00      	ble.n	586e <__aeabi_dsub+0xd2>
    586c:	e0e9      	b.n	5a42 <__aeabi_dsub+0x2a6>
    586e:	2220      	movs	r2, #32
    5870:	003c      	movs	r4, r7
    5872:	1ad2      	subs	r2, r2, r3
    5874:	409d      	lsls	r5, r3
    5876:	40d4      	lsrs	r4, r2
    5878:	409f      	lsls	r7, r3
    587a:	4325      	orrs	r5, r4
    587c:	429e      	cmp	r6, r3
    587e:	dd00      	ble.n	5882 <__aeabi_dsub+0xe6>
    5880:	e0db      	b.n	5a3a <__aeabi_dsub+0x29e>
    5882:	1b9e      	subs	r6, r3, r6
    5884:	1c73      	adds	r3, r6, #1
    5886:	2b1f      	cmp	r3, #31
    5888:	dd00      	ble.n	588c <__aeabi_dsub+0xf0>
    588a:	e10a      	b.n	5aa2 <__aeabi_dsub+0x306>
    588c:	2220      	movs	r2, #32
    588e:	0038      	movs	r0, r7
    5890:	1ad2      	subs	r2, r2, r3
    5892:	0029      	movs	r1, r5
    5894:	4097      	lsls	r7, r2
    5896:	002c      	movs	r4, r5
    5898:	4091      	lsls	r1, r2
    589a:	40d8      	lsrs	r0, r3
    589c:	1e7a      	subs	r2, r7, #1
    589e:	4197      	sbcs	r7, r2
    58a0:	40dc      	lsrs	r4, r3
    58a2:	2600      	movs	r6, #0
    58a4:	4301      	orrs	r1, r0
    58a6:	430f      	orrs	r7, r1
    58a8:	077b      	lsls	r3, r7, #29
    58aa:	d009      	beq.n	58c0 <__aeabi_dsub+0x124>
    58ac:	230f      	movs	r3, #15
    58ae:	403b      	ands	r3, r7
    58b0:	2b04      	cmp	r3, #4
    58b2:	d005      	beq.n	58c0 <__aeabi_dsub+0x124>
    58b4:	1d3b      	adds	r3, r7, #4
    58b6:	42bb      	cmp	r3, r7
    58b8:	41bf      	sbcs	r7, r7
    58ba:	427f      	negs	r7, r7
    58bc:	19e4      	adds	r4, r4, r7
    58be:	001f      	movs	r7, r3
    58c0:	0223      	lsls	r3, r4, #8
    58c2:	d525      	bpl.n	5910 <__aeabi_dsub+0x174>
    58c4:	4b86      	ldr	r3, [pc, #536]	; (5ae0 <__aeabi_dsub+0x344>)
    58c6:	3601      	adds	r6, #1
    58c8:	429e      	cmp	r6, r3
    58ca:	d100      	bne.n	58ce <__aeabi_dsub+0x132>
    58cc:	e0af      	b.n	5a2e <__aeabi_dsub+0x292>
    58ce:	4b85      	ldr	r3, [pc, #532]	; (5ae4 <__aeabi_dsub+0x348>)
    58d0:	2501      	movs	r5, #1
    58d2:	401c      	ands	r4, r3
    58d4:	4643      	mov	r3, r8
    58d6:	0762      	lsls	r2, r4, #29
    58d8:	08ff      	lsrs	r7, r7, #3
    58da:	0264      	lsls	r4, r4, #9
    58dc:	0576      	lsls	r6, r6, #21
    58de:	4317      	orrs	r7, r2
    58e0:	0b24      	lsrs	r4, r4, #12
    58e2:	0d76      	lsrs	r6, r6, #21
    58e4:	401d      	ands	r5, r3
    58e6:	2100      	movs	r1, #0
    58e8:	0324      	lsls	r4, r4, #12
    58ea:	0b23      	lsrs	r3, r4, #12
    58ec:	0d0c      	lsrs	r4, r1, #20
    58ee:	4a7e      	ldr	r2, [pc, #504]	; (5ae8 <__aeabi_dsub+0x34c>)
    58f0:	0524      	lsls	r4, r4, #20
    58f2:	431c      	orrs	r4, r3
    58f4:	4014      	ands	r4, r2
    58f6:	0533      	lsls	r3, r6, #20
    58f8:	4323      	orrs	r3, r4
    58fa:	005b      	lsls	r3, r3, #1
    58fc:	07ed      	lsls	r5, r5, #31
    58fe:	085b      	lsrs	r3, r3, #1
    5900:	432b      	orrs	r3, r5
    5902:	0038      	movs	r0, r7
    5904:	0019      	movs	r1, r3
    5906:	bc1c      	pop	{r2, r3, r4}
    5908:	4690      	mov	r8, r2
    590a:	4699      	mov	r9, r3
    590c:	46a2      	mov	sl, r4
    590e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5910:	2501      	movs	r5, #1
    5912:	4643      	mov	r3, r8
    5914:	0762      	lsls	r2, r4, #29
    5916:	08ff      	lsrs	r7, r7, #3
    5918:	4317      	orrs	r7, r2
    591a:	08e4      	lsrs	r4, r4, #3
    591c:	401d      	ands	r5, r3
    591e:	4b70      	ldr	r3, [pc, #448]	; (5ae0 <__aeabi_dsub+0x344>)
    5920:	429e      	cmp	r6, r3
    5922:	d036      	beq.n	5992 <__aeabi_dsub+0x1f6>
    5924:	0324      	lsls	r4, r4, #12
    5926:	0576      	lsls	r6, r6, #21
    5928:	0b24      	lsrs	r4, r4, #12
    592a:	0d76      	lsrs	r6, r6, #21
    592c:	e7db      	b.n	58e6 <__aeabi_dsub+0x14a>
    592e:	4663      	mov	r3, ip
    5930:	1af3      	subs	r3, r6, r3
    5932:	2b00      	cmp	r3, #0
    5934:	dc00      	bgt.n	5938 <__aeabi_dsub+0x19c>
    5936:	e094      	b.n	5a62 <__aeabi_dsub+0x2c6>
    5938:	4660      	mov	r0, ip
    593a:	2800      	cmp	r0, #0
    593c:	d035      	beq.n	59aa <__aeabi_dsub+0x20e>
    593e:	4868      	ldr	r0, [pc, #416]	; (5ae0 <__aeabi_dsub+0x344>)
    5940:	4286      	cmp	r6, r0
    5942:	d0b1      	beq.n	58a8 <__aeabi_dsub+0x10c>
    5944:	2780      	movs	r7, #128	; 0x80
    5946:	043f      	lsls	r7, r7, #16
    5948:	4339      	orrs	r1, r7
    594a:	2b38      	cmp	r3, #56	; 0x38
    594c:	dc00      	bgt.n	5950 <__aeabi_dsub+0x1b4>
    594e:	e0fd      	b.n	5b4c <__aeabi_dsub+0x3b0>
    5950:	430a      	orrs	r2, r1
    5952:	0017      	movs	r7, r2
    5954:	2100      	movs	r1, #0
    5956:	1e7a      	subs	r2, r7, #1
    5958:	4197      	sbcs	r7, r2
    595a:	4457      	add	r7, sl
    595c:	4557      	cmp	r7, sl
    595e:	4180      	sbcs	r0, r0
    5960:	1909      	adds	r1, r1, r4
    5962:	4244      	negs	r4, r0
    5964:	190c      	adds	r4, r1, r4
    5966:	0223      	lsls	r3, r4, #8
    5968:	d53a      	bpl.n	59e0 <__aeabi_dsub+0x244>
    596a:	4b5d      	ldr	r3, [pc, #372]	; (5ae0 <__aeabi_dsub+0x344>)
    596c:	3601      	adds	r6, #1
    596e:	429e      	cmp	r6, r3
    5970:	d100      	bne.n	5974 <__aeabi_dsub+0x1d8>
    5972:	e14b      	b.n	5c0c <__aeabi_dsub+0x470>
    5974:	2201      	movs	r2, #1
    5976:	4b5b      	ldr	r3, [pc, #364]	; (5ae4 <__aeabi_dsub+0x348>)
    5978:	401c      	ands	r4, r3
    597a:	087b      	lsrs	r3, r7, #1
    597c:	4017      	ands	r7, r2
    597e:	431f      	orrs	r7, r3
    5980:	07e2      	lsls	r2, r4, #31
    5982:	4317      	orrs	r7, r2
    5984:	0864      	lsrs	r4, r4, #1
    5986:	e78f      	b.n	58a8 <__aeabi_dsub+0x10c>
    5988:	0008      	movs	r0, r1
    598a:	4310      	orrs	r0, r2
    598c:	d000      	beq.n	5990 <__aeabi_dsub+0x1f4>
    598e:	e724      	b.n	57da <__aeabi_dsub+0x3e>
    5990:	e721      	b.n	57d6 <__aeabi_dsub+0x3a>
    5992:	0023      	movs	r3, r4
    5994:	433b      	orrs	r3, r7
    5996:	d100      	bne.n	599a <__aeabi_dsub+0x1fe>
    5998:	e1b9      	b.n	5d0e <__aeabi_dsub+0x572>
    599a:	2280      	movs	r2, #128	; 0x80
    599c:	0312      	lsls	r2, r2, #12
    599e:	4314      	orrs	r4, r2
    59a0:	0324      	lsls	r4, r4, #12
    59a2:	0b24      	lsrs	r4, r4, #12
    59a4:	e79f      	b.n	58e6 <__aeabi_dsub+0x14a>
    59a6:	002e      	movs	r6, r5
    59a8:	e77e      	b.n	58a8 <__aeabi_dsub+0x10c>
    59aa:	0008      	movs	r0, r1
    59ac:	4310      	orrs	r0, r2
    59ae:	d100      	bne.n	59b2 <__aeabi_dsub+0x216>
    59b0:	e0ca      	b.n	5b48 <__aeabi_dsub+0x3ac>
    59b2:	1e58      	subs	r0, r3, #1
    59b4:	4684      	mov	ip, r0
    59b6:	2800      	cmp	r0, #0
    59b8:	d000      	beq.n	59bc <__aeabi_dsub+0x220>
    59ba:	e0e7      	b.n	5b8c <__aeabi_dsub+0x3f0>
    59bc:	4452      	add	r2, sl
    59be:	4552      	cmp	r2, sl
    59c0:	4180      	sbcs	r0, r0
    59c2:	1864      	adds	r4, r4, r1
    59c4:	4240      	negs	r0, r0
    59c6:	1824      	adds	r4, r4, r0
    59c8:	0017      	movs	r7, r2
    59ca:	2601      	movs	r6, #1
    59cc:	0223      	lsls	r3, r4, #8
    59ce:	d507      	bpl.n	59e0 <__aeabi_dsub+0x244>
    59d0:	2602      	movs	r6, #2
    59d2:	e7cf      	b.n	5974 <__aeabi_dsub+0x1d8>
    59d4:	4664      	mov	r4, ip
    59d6:	432c      	orrs	r4, r5
    59d8:	d100      	bne.n	59dc <__aeabi_dsub+0x240>
    59da:	e1b3      	b.n	5d44 <__aeabi_dsub+0x5a8>
    59dc:	002c      	movs	r4, r5
    59de:	4667      	mov	r7, ip
    59e0:	077b      	lsls	r3, r7, #29
    59e2:	d000      	beq.n	59e6 <__aeabi_dsub+0x24a>
    59e4:	e762      	b.n	58ac <__aeabi_dsub+0x110>
    59e6:	0763      	lsls	r3, r4, #29
    59e8:	08ff      	lsrs	r7, r7, #3
    59ea:	431f      	orrs	r7, r3
    59ec:	2501      	movs	r5, #1
    59ee:	4643      	mov	r3, r8
    59f0:	08e4      	lsrs	r4, r4, #3
    59f2:	401d      	ands	r5, r3
    59f4:	e793      	b.n	591e <__aeabi_dsub+0x182>
    59f6:	2d00      	cmp	r5, #0
    59f8:	d178      	bne.n	5aec <__aeabi_dsub+0x350>
    59fa:	1c75      	adds	r5, r6, #1
    59fc:	056d      	lsls	r5, r5, #21
    59fe:	0d6d      	lsrs	r5, r5, #21
    5a00:	2d01      	cmp	r5, #1
    5a02:	dc00      	bgt.n	5a06 <__aeabi_dsub+0x26a>
    5a04:	e0f2      	b.n	5bec <__aeabi_dsub+0x450>
    5a06:	4650      	mov	r0, sl
    5a08:	1a80      	subs	r0, r0, r2
    5a0a:	4582      	cmp	sl, r0
    5a0c:	41bf      	sbcs	r7, r7
    5a0e:	1a65      	subs	r5, r4, r1
    5a10:	427f      	negs	r7, r7
    5a12:	1bed      	subs	r5, r5, r7
    5a14:	4684      	mov	ip, r0
    5a16:	0228      	lsls	r0, r5, #8
    5a18:	d400      	bmi.n	5a1c <__aeabi_dsub+0x280>
    5a1a:	e08c      	b.n	5b36 <__aeabi_dsub+0x39a>
    5a1c:	4650      	mov	r0, sl
    5a1e:	1a17      	subs	r7, r2, r0
    5a20:	42ba      	cmp	r2, r7
    5a22:	4192      	sbcs	r2, r2
    5a24:	1b0c      	subs	r4, r1, r4
    5a26:	4255      	negs	r5, r2
    5a28:	1b65      	subs	r5, r4, r5
    5a2a:	4698      	mov	r8, r3
    5a2c:	e714      	b.n	5858 <__aeabi_dsub+0xbc>
    5a2e:	2501      	movs	r5, #1
    5a30:	4643      	mov	r3, r8
    5a32:	2400      	movs	r4, #0
    5a34:	401d      	ands	r5, r3
    5a36:	2700      	movs	r7, #0
    5a38:	e755      	b.n	58e6 <__aeabi_dsub+0x14a>
    5a3a:	4c2a      	ldr	r4, [pc, #168]	; (5ae4 <__aeabi_dsub+0x348>)
    5a3c:	1af6      	subs	r6, r6, r3
    5a3e:	402c      	ands	r4, r5
    5a40:	e732      	b.n	58a8 <__aeabi_dsub+0x10c>
    5a42:	003d      	movs	r5, r7
    5a44:	3828      	subs	r0, #40	; 0x28
    5a46:	4085      	lsls	r5, r0
    5a48:	2700      	movs	r7, #0
    5a4a:	e717      	b.n	587c <__aeabi_dsub+0xe0>
    5a4c:	0038      	movs	r0, r7
    5a4e:	f7ff f8b3 	bl	4bb8 <__clzsi2>
    5a52:	3020      	adds	r0, #32
    5a54:	e706      	b.n	5864 <__aeabi_dsub+0xc8>
    5a56:	430a      	orrs	r2, r1
    5a58:	0017      	movs	r7, r2
    5a5a:	2100      	movs	r1, #0
    5a5c:	1e7a      	subs	r2, r7, #1
    5a5e:	4197      	sbcs	r7, r2
    5a60:	e6ee      	b.n	5840 <__aeabi_dsub+0xa4>
    5a62:	2b00      	cmp	r3, #0
    5a64:	d000      	beq.n	5a68 <__aeabi_dsub+0x2cc>
    5a66:	e0e5      	b.n	5c34 <__aeabi_dsub+0x498>
    5a68:	1c73      	adds	r3, r6, #1
    5a6a:	469c      	mov	ip, r3
    5a6c:	055b      	lsls	r3, r3, #21
    5a6e:	0d5b      	lsrs	r3, r3, #21
    5a70:	2b01      	cmp	r3, #1
    5a72:	dc00      	bgt.n	5a76 <__aeabi_dsub+0x2da>
    5a74:	e09f      	b.n	5bb6 <__aeabi_dsub+0x41a>
    5a76:	4b1a      	ldr	r3, [pc, #104]	; (5ae0 <__aeabi_dsub+0x344>)
    5a78:	459c      	cmp	ip, r3
    5a7a:	d100      	bne.n	5a7e <__aeabi_dsub+0x2e2>
    5a7c:	e0c5      	b.n	5c0a <__aeabi_dsub+0x46e>
    5a7e:	4452      	add	r2, sl
    5a80:	4552      	cmp	r2, sl
    5a82:	4180      	sbcs	r0, r0
    5a84:	1864      	adds	r4, r4, r1
    5a86:	4240      	negs	r0, r0
    5a88:	1824      	adds	r4, r4, r0
    5a8a:	07e7      	lsls	r7, r4, #31
    5a8c:	0852      	lsrs	r2, r2, #1
    5a8e:	4317      	orrs	r7, r2
    5a90:	0864      	lsrs	r4, r4, #1
    5a92:	4666      	mov	r6, ip
    5a94:	e708      	b.n	58a8 <__aeabi_dsub+0x10c>
    5a96:	4812      	ldr	r0, [pc, #72]	; (5ae0 <__aeabi_dsub+0x344>)
    5a98:	4285      	cmp	r5, r0
    5a9a:	d100      	bne.n	5a9e <__aeabi_dsub+0x302>
    5a9c:	e085      	b.n	5baa <__aeabi_dsub+0x40e>
    5a9e:	001d      	movs	r5, r3
    5aa0:	e6bc      	b.n	581c <__aeabi_dsub+0x80>
    5aa2:	0029      	movs	r1, r5
    5aa4:	3e1f      	subs	r6, #31
    5aa6:	40f1      	lsrs	r1, r6
    5aa8:	2b20      	cmp	r3, #32
    5aaa:	d100      	bne.n	5aae <__aeabi_dsub+0x312>
    5aac:	e07f      	b.n	5bae <__aeabi_dsub+0x412>
    5aae:	2240      	movs	r2, #64	; 0x40
    5ab0:	1ad3      	subs	r3, r2, r3
    5ab2:	409d      	lsls	r5, r3
    5ab4:	432f      	orrs	r7, r5
    5ab6:	1e7d      	subs	r5, r7, #1
    5ab8:	41af      	sbcs	r7, r5
    5aba:	2400      	movs	r4, #0
    5abc:	430f      	orrs	r7, r1
    5abe:	2600      	movs	r6, #0
    5ac0:	e78e      	b.n	59e0 <__aeabi_dsub+0x244>
    5ac2:	002b      	movs	r3, r5
    5ac4:	000f      	movs	r7, r1
    5ac6:	3b20      	subs	r3, #32
    5ac8:	40df      	lsrs	r7, r3
    5aca:	2d20      	cmp	r5, #32
    5acc:	d071      	beq.n	5bb2 <__aeabi_dsub+0x416>
    5ace:	2340      	movs	r3, #64	; 0x40
    5ad0:	1b5d      	subs	r5, r3, r5
    5ad2:	40a9      	lsls	r1, r5
    5ad4:	430a      	orrs	r2, r1
    5ad6:	1e51      	subs	r1, r2, #1
    5ad8:	418a      	sbcs	r2, r1
    5ada:	2100      	movs	r1, #0
    5adc:	4317      	orrs	r7, r2
    5ade:	e6af      	b.n	5840 <__aeabi_dsub+0xa4>
    5ae0:	000007ff 	.word	0x000007ff
    5ae4:	ff7fffff 	.word	0xff7fffff
    5ae8:	800fffff 	.word	0x800fffff
    5aec:	2e00      	cmp	r6, #0
    5aee:	d03e      	beq.n	5b6e <__aeabi_dsub+0x3d2>
    5af0:	4eb3      	ldr	r6, [pc, #716]	; (5dc0 <__aeabi_dsub+0x624>)
    5af2:	45b4      	cmp	ip, r6
    5af4:	d045      	beq.n	5b82 <__aeabi_dsub+0x3e6>
    5af6:	2680      	movs	r6, #128	; 0x80
    5af8:	0436      	lsls	r6, r6, #16
    5afa:	426d      	negs	r5, r5
    5afc:	4334      	orrs	r4, r6
    5afe:	2d38      	cmp	r5, #56	; 0x38
    5b00:	dd00      	ble.n	5b04 <__aeabi_dsub+0x368>
    5b02:	e0a8      	b.n	5c56 <__aeabi_dsub+0x4ba>
    5b04:	2d1f      	cmp	r5, #31
    5b06:	dd00      	ble.n	5b0a <__aeabi_dsub+0x36e>
    5b08:	e11f      	b.n	5d4a <__aeabi_dsub+0x5ae>
    5b0a:	2620      	movs	r6, #32
    5b0c:	0027      	movs	r7, r4
    5b0e:	4650      	mov	r0, sl
    5b10:	1b76      	subs	r6, r6, r5
    5b12:	40b7      	lsls	r7, r6
    5b14:	40e8      	lsrs	r0, r5
    5b16:	4307      	orrs	r7, r0
    5b18:	4650      	mov	r0, sl
    5b1a:	40b0      	lsls	r0, r6
    5b1c:	1e46      	subs	r6, r0, #1
    5b1e:	41b0      	sbcs	r0, r6
    5b20:	40ec      	lsrs	r4, r5
    5b22:	4338      	orrs	r0, r7
    5b24:	1a17      	subs	r7, r2, r0
    5b26:	42ba      	cmp	r2, r7
    5b28:	4192      	sbcs	r2, r2
    5b2a:	1b0c      	subs	r4, r1, r4
    5b2c:	4252      	negs	r2, r2
    5b2e:	1aa4      	subs	r4, r4, r2
    5b30:	4666      	mov	r6, ip
    5b32:	4698      	mov	r8, r3
    5b34:	e68b      	b.n	584e <__aeabi_dsub+0xb2>
    5b36:	4664      	mov	r4, ip
    5b38:	4667      	mov	r7, ip
    5b3a:	432c      	orrs	r4, r5
    5b3c:	d000      	beq.n	5b40 <__aeabi_dsub+0x3a4>
    5b3e:	e68b      	b.n	5858 <__aeabi_dsub+0xbc>
    5b40:	2500      	movs	r5, #0
    5b42:	2600      	movs	r6, #0
    5b44:	2700      	movs	r7, #0
    5b46:	e6ea      	b.n	591e <__aeabi_dsub+0x182>
    5b48:	001e      	movs	r6, r3
    5b4a:	e6ad      	b.n	58a8 <__aeabi_dsub+0x10c>
    5b4c:	2b1f      	cmp	r3, #31
    5b4e:	dc60      	bgt.n	5c12 <__aeabi_dsub+0x476>
    5b50:	2720      	movs	r7, #32
    5b52:	1af8      	subs	r0, r7, r3
    5b54:	000f      	movs	r7, r1
    5b56:	4684      	mov	ip, r0
    5b58:	4087      	lsls	r7, r0
    5b5a:	0010      	movs	r0, r2
    5b5c:	40d8      	lsrs	r0, r3
    5b5e:	4307      	orrs	r7, r0
    5b60:	4660      	mov	r0, ip
    5b62:	4082      	lsls	r2, r0
    5b64:	1e50      	subs	r0, r2, #1
    5b66:	4182      	sbcs	r2, r0
    5b68:	40d9      	lsrs	r1, r3
    5b6a:	4317      	orrs	r7, r2
    5b6c:	e6f5      	b.n	595a <__aeabi_dsub+0x1be>
    5b6e:	0026      	movs	r6, r4
    5b70:	4650      	mov	r0, sl
    5b72:	4306      	orrs	r6, r0
    5b74:	d005      	beq.n	5b82 <__aeabi_dsub+0x3e6>
    5b76:	43ed      	mvns	r5, r5
    5b78:	2d00      	cmp	r5, #0
    5b7a:	d0d3      	beq.n	5b24 <__aeabi_dsub+0x388>
    5b7c:	4e90      	ldr	r6, [pc, #576]	; (5dc0 <__aeabi_dsub+0x624>)
    5b7e:	45b4      	cmp	ip, r6
    5b80:	d1bd      	bne.n	5afe <__aeabi_dsub+0x362>
    5b82:	000c      	movs	r4, r1
    5b84:	0017      	movs	r7, r2
    5b86:	4666      	mov	r6, ip
    5b88:	4698      	mov	r8, r3
    5b8a:	e68d      	b.n	58a8 <__aeabi_dsub+0x10c>
    5b8c:	488c      	ldr	r0, [pc, #560]	; (5dc0 <__aeabi_dsub+0x624>)
    5b8e:	4283      	cmp	r3, r0
    5b90:	d00b      	beq.n	5baa <__aeabi_dsub+0x40e>
    5b92:	4663      	mov	r3, ip
    5b94:	e6d9      	b.n	594a <__aeabi_dsub+0x1ae>
    5b96:	2d00      	cmp	r5, #0
    5b98:	d000      	beq.n	5b9c <__aeabi_dsub+0x400>
    5b9a:	e096      	b.n	5cca <__aeabi_dsub+0x52e>
    5b9c:	0008      	movs	r0, r1
    5b9e:	4310      	orrs	r0, r2
    5ba0:	d100      	bne.n	5ba4 <__aeabi_dsub+0x408>
    5ba2:	e0e2      	b.n	5d6a <__aeabi_dsub+0x5ce>
    5ba4:	000c      	movs	r4, r1
    5ba6:	0017      	movs	r7, r2
    5ba8:	4698      	mov	r8, r3
    5baa:	4e85      	ldr	r6, [pc, #532]	; (5dc0 <__aeabi_dsub+0x624>)
    5bac:	e67c      	b.n	58a8 <__aeabi_dsub+0x10c>
    5bae:	2500      	movs	r5, #0
    5bb0:	e780      	b.n	5ab4 <__aeabi_dsub+0x318>
    5bb2:	2100      	movs	r1, #0
    5bb4:	e78e      	b.n	5ad4 <__aeabi_dsub+0x338>
    5bb6:	0023      	movs	r3, r4
    5bb8:	4650      	mov	r0, sl
    5bba:	4303      	orrs	r3, r0
    5bbc:	2e00      	cmp	r6, #0
    5bbe:	d000      	beq.n	5bc2 <__aeabi_dsub+0x426>
    5bc0:	e0a8      	b.n	5d14 <__aeabi_dsub+0x578>
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d100      	bne.n	5bc8 <__aeabi_dsub+0x42c>
    5bc6:	e0de      	b.n	5d86 <__aeabi_dsub+0x5ea>
    5bc8:	000b      	movs	r3, r1
    5bca:	4313      	orrs	r3, r2
    5bcc:	d100      	bne.n	5bd0 <__aeabi_dsub+0x434>
    5bce:	e66b      	b.n	58a8 <__aeabi_dsub+0x10c>
    5bd0:	4452      	add	r2, sl
    5bd2:	4552      	cmp	r2, sl
    5bd4:	4180      	sbcs	r0, r0
    5bd6:	1864      	adds	r4, r4, r1
    5bd8:	4240      	negs	r0, r0
    5bda:	1824      	adds	r4, r4, r0
    5bdc:	0017      	movs	r7, r2
    5bde:	0223      	lsls	r3, r4, #8
    5be0:	d400      	bmi.n	5be4 <__aeabi_dsub+0x448>
    5be2:	e6fd      	b.n	59e0 <__aeabi_dsub+0x244>
    5be4:	4b77      	ldr	r3, [pc, #476]	; (5dc4 <__aeabi_dsub+0x628>)
    5be6:	4666      	mov	r6, ip
    5be8:	401c      	ands	r4, r3
    5bea:	e65d      	b.n	58a8 <__aeabi_dsub+0x10c>
    5bec:	0025      	movs	r5, r4
    5bee:	4650      	mov	r0, sl
    5bf0:	4305      	orrs	r5, r0
    5bf2:	2e00      	cmp	r6, #0
    5bf4:	d1cf      	bne.n	5b96 <__aeabi_dsub+0x3fa>
    5bf6:	2d00      	cmp	r5, #0
    5bf8:	d14f      	bne.n	5c9a <__aeabi_dsub+0x4fe>
    5bfa:	000c      	movs	r4, r1
    5bfc:	4314      	orrs	r4, r2
    5bfe:	d100      	bne.n	5c02 <__aeabi_dsub+0x466>
    5c00:	e0a0      	b.n	5d44 <__aeabi_dsub+0x5a8>
    5c02:	000c      	movs	r4, r1
    5c04:	0017      	movs	r7, r2
    5c06:	4698      	mov	r8, r3
    5c08:	e64e      	b.n	58a8 <__aeabi_dsub+0x10c>
    5c0a:	4666      	mov	r6, ip
    5c0c:	2400      	movs	r4, #0
    5c0e:	2700      	movs	r7, #0
    5c10:	e685      	b.n	591e <__aeabi_dsub+0x182>
    5c12:	001f      	movs	r7, r3
    5c14:	0008      	movs	r0, r1
    5c16:	3f20      	subs	r7, #32
    5c18:	40f8      	lsrs	r0, r7
    5c1a:	0007      	movs	r7, r0
    5c1c:	2b20      	cmp	r3, #32
    5c1e:	d100      	bne.n	5c22 <__aeabi_dsub+0x486>
    5c20:	e08e      	b.n	5d40 <__aeabi_dsub+0x5a4>
    5c22:	2040      	movs	r0, #64	; 0x40
    5c24:	1ac3      	subs	r3, r0, r3
    5c26:	4099      	lsls	r1, r3
    5c28:	430a      	orrs	r2, r1
    5c2a:	1e51      	subs	r1, r2, #1
    5c2c:	418a      	sbcs	r2, r1
    5c2e:	2100      	movs	r1, #0
    5c30:	4317      	orrs	r7, r2
    5c32:	e692      	b.n	595a <__aeabi_dsub+0x1be>
    5c34:	2e00      	cmp	r6, #0
    5c36:	d114      	bne.n	5c62 <__aeabi_dsub+0x4c6>
    5c38:	0026      	movs	r6, r4
    5c3a:	4650      	mov	r0, sl
    5c3c:	4306      	orrs	r6, r0
    5c3e:	d062      	beq.n	5d06 <__aeabi_dsub+0x56a>
    5c40:	43db      	mvns	r3, r3
    5c42:	2b00      	cmp	r3, #0
    5c44:	d15c      	bne.n	5d00 <__aeabi_dsub+0x564>
    5c46:	1887      	adds	r7, r0, r2
    5c48:	4297      	cmp	r7, r2
    5c4a:	4192      	sbcs	r2, r2
    5c4c:	1864      	adds	r4, r4, r1
    5c4e:	4252      	negs	r2, r2
    5c50:	18a4      	adds	r4, r4, r2
    5c52:	4666      	mov	r6, ip
    5c54:	e687      	b.n	5966 <__aeabi_dsub+0x1ca>
    5c56:	4650      	mov	r0, sl
    5c58:	4320      	orrs	r0, r4
    5c5a:	1e44      	subs	r4, r0, #1
    5c5c:	41a0      	sbcs	r0, r4
    5c5e:	2400      	movs	r4, #0
    5c60:	e760      	b.n	5b24 <__aeabi_dsub+0x388>
    5c62:	4e57      	ldr	r6, [pc, #348]	; (5dc0 <__aeabi_dsub+0x624>)
    5c64:	45b4      	cmp	ip, r6
    5c66:	d04e      	beq.n	5d06 <__aeabi_dsub+0x56a>
    5c68:	2680      	movs	r6, #128	; 0x80
    5c6a:	0436      	lsls	r6, r6, #16
    5c6c:	425b      	negs	r3, r3
    5c6e:	4334      	orrs	r4, r6
    5c70:	2b38      	cmp	r3, #56	; 0x38
    5c72:	dd00      	ble.n	5c76 <__aeabi_dsub+0x4da>
    5c74:	e07f      	b.n	5d76 <__aeabi_dsub+0x5da>
    5c76:	2b1f      	cmp	r3, #31
    5c78:	dd00      	ble.n	5c7c <__aeabi_dsub+0x4e0>
    5c7a:	e08b      	b.n	5d94 <__aeabi_dsub+0x5f8>
    5c7c:	2620      	movs	r6, #32
    5c7e:	0027      	movs	r7, r4
    5c80:	4650      	mov	r0, sl
    5c82:	1af6      	subs	r6, r6, r3
    5c84:	40b7      	lsls	r7, r6
    5c86:	40d8      	lsrs	r0, r3
    5c88:	4307      	orrs	r7, r0
    5c8a:	4650      	mov	r0, sl
    5c8c:	40b0      	lsls	r0, r6
    5c8e:	1e46      	subs	r6, r0, #1
    5c90:	41b0      	sbcs	r0, r6
    5c92:	4307      	orrs	r7, r0
    5c94:	40dc      	lsrs	r4, r3
    5c96:	18bf      	adds	r7, r7, r2
    5c98:	e7d6      	b.n	5c48 <__aeabi_dsub+0x4ac>
    5c9a:	000d      	movs	r5, r1
    5c9c:	4315      	orrs	r5, r2
    5c9e:	d100      	bne.n	5ca2 <__aeabi_dsub+0x506>
    5ca0:	e602      	b.n	58a8 <__aeabi_dsub+0x10c>
    5ca2:	4650      	mov	r0, sl
    5ca4:	1a80      	subs	r0, r0, r2
    5ca6:	4582      	cmp	sl, r0
    5ca8:	41bf      	sbcs	r7, r7
    5caa:	1a65      	subs	r5, r4, r1
    5cac:	427f      	negs	r7, r7
    5cae:	1bed      	subs	r5, r5, r7
    5cb0:	4684      	mov	ip, r0
    5cb2:	0228      	lsls	r0, r5, #8
    5cb4:	d400      	bmi.n	5cb8 <__aeabi_dsub+0x51c>
    5cb6:	e68d      	b.n	59d4 <__aeabi_dsub+0x238>
    5cb8:	4650      	mov	r0, sl
    5cba:	1a17      	subs	r7, r2, r0
    5cbc:	42ba      	cmp	r2, r7
    5cbe:	4192      	sbcs	r2, r2
    5cc0:	1b0c      	subs	r4, r1, r4
    5cc2:	4252      	negs	r2, r2
    5cc4:	1aa4      	subs	r4, r4, r2
    5cc6:	4698      	mov	r8, r3
    5cc8:	e5ee      	b.n	58a8 <__aeabi_dsub+0x10c>
    5cca:	000d      	movs	r5, r1
    5ccc:	4315      	orrs	r5, r2
    5cce:	d100      	bne.n	5cd2 <__aeabi_dsub+0x536>
    5cd0:	e76b      	b.n	5baa <__aeabi_dsub+0x40e>
    5cd2:	4650      	mov	r0, sl
    5cd4:	0767      	lsls	r7, r4, #29
    5cd6:	08c0      	lsrs	r0, r0, #3
    5cd8:	4307      	orrs	r7, r0
    5cda:	2080      	movs	r0, #128	; 0x80
    5cdc:	08e4      	lsrs	r4, r4, #3
    5cde:	0300      	lsls	r0, r0, #12
    5ce0:	4204      	tst	r4, r0
    5ce2:	d007      	beq.n	5cf4 <__aeabi_dsub+0x558>
    5ce4:	08cd      	lsrs	r5, r1, #3
    5ce6:	4205      	tst	r5, r0
    5ce8:	d104      	bne.n	5cf4 <__aeabi_dsub+0x558>
    5cea:	002c      	movs	r4, r5
    5cec:	4698      	mov	r8, r3
    5cee:	08d7      	lsrs	r7, r2, #3
    5cf0:	0749      	lsls	r1, r1, #29
    5cf2:	430f      	orrs	r7, r1
    5cf4:	0f7b      	lsrs	r3, r7, #29
    5cf6:	00e4      	lsls	r4, r4, #3
    5cf8:	431c      	orrs	r4, r3
    5cfa:	00ff      	lsls	r7, r7, #3
    5cfc:	4e30      	ldr	r6, [pc, #192]	; (5dc0 <__aeabi_dsub+0x624>)
    5cfe:	e5d3      	b.n	58a8 <__aeabi_dsub+0x10c>
    5d00:	4e2f      	ldr	r6, [pc, #188]	; (5dc0 <__aeabi_dsub+0x624>)
    5d02:	45b4      	cmp	ip, r6
    5d04:	d1b4      	bne.n	5c70 <__aeabi_dsub+0x4d4>
    5d06:	000c      	movs	r4, r1
    5d08:	0017      	movs	r7, r2
    5d0a:	4666      	mov	r6, ip
    5d0c:	e5cc      	b.n	58a8 <__aeabi_dsub+0x10c>
    5d0e:	2700      	movs	r7, #0
    5d10:	2400      	movs	r4, #0
    5d12:	e5e8      	b.n	58e6 <__aeabi_dsub+0x14a>
    5d14:	2b00      	cmp	r3, #0
    5d16:	d039      	beq.n	5d8c <__aeabi_dsub+0x5f0>
    5d18:	000b      	movs	r3, r1
    5d1a:	4313      	orrs	r3, r2
    5d1c:	d100      	bne.n	5d20 <__aeabi_dsub+0x584>
    5d1e:	e744      	b.n	5baa <__aeabi_dsub+0x40e>
    5d20:	08c0      	lsrs	r0, r0, #3
    5d22:	0767      	lsls	r7, r4, #29
    5d24:	4307      	orrs	r7, r0
    5d26:	2080      	movs	r0, #128	; 0x80
    5d28:	08e4      	lsrs	r4, r4, #3
    5d2a:	0300      	lsls	r0, r0, #12
    5d2c:	4204      	tst	r4, r0
    5d2e:	d0e1      	beq.n	5cf4 <__aeabi_dsub+0x558>
    5d30:	08cb      	lsrs	r3, r1, #3
    5d32:	4203      	tst	r3, r0
    5d34:	d1de      	bne.n	5cf4 <__aeabi_dsub+0x558>
    5d36:	08d7      	lsrs	r7, r2, #3
    5d38:	0749      	lsls	r1, r1, #29
    5d3a:	430f      	orrs	r7, r1
    5d3c:	001c      	movs	r4, r3
    5d3e:	e7d9      	b.n	5cf4 <__aeabi_dsub+0x558>
    5d40:	2100      	movs	r1, #0
    5d42:	e771      	b.n	5c28 <__aeabi_dsub+0x48c>
    5d44:	2500      	movs	r5, #0
    5d46:	2700      	movs	r7, #0
    5d48:	e5e9      	b.n	591e <__aeabi_dsub+0x182>
    5d4a:	002e      	movs	r6, r5
    5d4c:	0027      	movs	r7, r4
    5d4e:	3e20      	subs	r6, #32
    5d50:	40f7      	lsrs	r7, r6
    5d52:	2d20      	cmp	r5, #32
    5d54:	d02f      	beq.n	5db6 <__aeabi_dsub+0x61a>
    5d56:	2640      	movs	r6, #64	; 0x40
    5d58:	1b75      	subs	r5, r6, r5
    5d5a:	40ac      	lsls	r4, r5
    5d5c:	4650      	mov	r0, sl
    5d5e:	4320      	orrs	r0, r4
    5d60:	1e44      	subs	r4, r0, #1
    5d62:	41a0      	sbcs	r0, r4
    5d64:	2400      	movs	r4, #0
    5d66:	4338      	orrs	r0, r7
    5d68:	e6dc      	b.n	5b24 <__aeabi_dsub+0x388>
    5d6a:	2480      	movs	r4, #128	; 0x80
    5d6c:	2500      	movs	r5, #0
    5d6e:	0324      	lsls	r4, r4, #12
    5d70:	4e13      	ldr	r6, [pc, #76]	; (5dc0 <__aeabi_dsub+0x624>)
    5d72:	2700      	movs	r7, #0
    5d74:	e5d3      	b.n	591e <__aeabi_dsub+0x182>
    5d76:	4650      	mov	r0, sl
    5d78:	4320      	orrs	r0, r4
    5d7a:	0007      	movs	r7, r0
    5d7c:	1e78      	subs	r0, r7, #1
    5d7e:	4187      	sbcs	r7, r0
    5d80:	2400      	movs	r4, #0
    5d82:	18bf      	adds	r7, r7, r2
    5d84:	e760      	b.n	5c48 <__aeabi_dsub+0x4ac>
    5d86:	000c      	movs	r4, r1
    5d88:	0017      	movs	r7, r2
    5d8a:	e58d      	b.n	58a8 <__aeabi_dsub+0x10c>
    5d8c:	000c      	movs	r4, r1
    5d8e:	0017      	movs	r7, r2
    5d90:	4e0b      	ldr	r6, [pc, #44]	; (5dc0 <__aeabi_dsub+0x624>)
    5d92:	e589      	b.n	58a8 <__aeabi_dsub+0x10c>
    5d94:	001e      	movs	r6, r3
    5d96:	0027      	movs	r7, r4
    5d98:	3e20      	subs	r6, #32
    5d9a:	40f7      	lsrs	r7, r6
    5d9c:	2b20      	cmp	r3, #32
    5d9e:	d00c      	beq.n	5dba <__aeabi_dsub+0x61e>
    5da0:	2640      	movs	r6, #64	; 0x40
    5da2:	1af3      	subs	r3, r6, r3
    5da4:	409c      	lsls	r4, r3
    5da6:	4650      	mov	r0, sl
    5da8:	4320      	orrs	r0, r4
    5daa:	1e44      	subs	r4, r0, #1
    5dac:	41a0      	sbcs	r0, r4
    5dae:	4307      	orrs	r7, r0
    5db0:	2400      	movs	r4, #0
    5db2:	18bf      	adds	r7, r7, r2
    5db4:	e748      	b.n	5c48 <__aeabi_dsub+0x4ac>
    5db6:	2400      	movs	r4, #0
    5db8:	e7d0      	b.n	5d5c <__aeabi_dsub+0x5c0>
    5dba:	2400      	movs	r4, #0
    5dbc:	e7f3      	b.n	5da6 <__aeabi_dsub+0x60a>
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	000007ff 	.word	0x000007ff
    5dc4:	ff7fffff 	.word	0xff7fffff

00005dc8 <__aeabi_d2iz>:
    5dc8:	b530      	push	{r4, r5, lr}
    5dca:	4d13      	ldr	r5, [pc, #76]	; (5e18 <__aeabi_d2iz+0x50>)
    5dcc:	030a      	lsls	r2, r1, #12
    5dce:	004b      	lsls	r3, r1, #1
    5dd0:	0b12      	lsrs	r2, r2, #12
    5dd2:	0d5b      	lsrs	r3, r3, #21
    5dd4:	0fc9      	lsrs	r1, r1, #31
    5dd6:	2400      	movs	r4, #0
    5dd8:	42ab      	cmp	r3, r5
    5dda:	dd10      	ble.n	5dfe <__aeabi_d2iz+0x36>
    5ddc:	4c0f      	ldr	r4, [pc, #60]	; (5e1c <__aeabi_d2iz+0x54>)
    5dde:	42a3      	cmp	r3, r4
    5de0:	dc0f      	bgt.n	5e02 <__aeabi_d2iz+0x3a>
    5de2:	2480      	movs	r4, #128	; 0x80
    5de4:	4d0e      	ldr	r5, [pc, #56]	; (5e20 <__aeabi_d2iz+0x58>)
    5de6:	0364      	lsls	r4, r4, #13
    5de8:	4322      	orrs	r2, r4
    5dea:	1aed      	subs	r5, r5, r3
    5dec:	2d1f      	cmp	r5, #31
    5dee:	dd0b      	ble.n	5e08 <__aeabi_d2iz+0x40>
    5df0:	480c      	ldr	r0, [pc, #48]	; (5e24 <__aeabi_d2iz+0x5c>)
    5df2:	1ac3      	subs	r3, r0, r3
    5df4:	40da      	lsrs	r2, r3
    5df6:	4254      	negs	r4, r2
    5df8:	2900      	cmp	r1, #0
    5dfa:	d100      	bne.n	5dfe <__aeabi_d2iz+0x36>
    5dfc:	0014      	movs	r4, r2
    5dfe:	0020      	movs	r0, r4
    5e00:	bd30      	pop	{r4, r5, pc}
    5e02:	4b09      	ldr	r3, [pc, #36]	; (5e28 <__aeabi_d2iz+0x60>)
    5e04:	18cc      	adds	r4, r1, r3
    5e06:	e7fa      	b.n	5dfe <__aeabi_d2iz+0x36>
    5e08:	4c08      	ldr	r4, [pc, #32]	; (5e2c <__aeabi_d2iz+0x64>)
    5e0a:	40e8      	lsrs	r0, r5
    5e0c:	46a4      	mov	ip, r4
    5e0e:	4463      	add	r3, ip
    5e10:	409a      	lsls	r2, r3
    5e12:	4302      	orrs	r2, r0
    5e14:	e7ef      	b.n	5df6 <__aeabi_d2iz+0x2e>
    5e16:	46c0      	nop			; (mov r8, r8)
    5e18:	000003fe 	.word	0x000003fe
    5e1c:	0000041d 	.word	0x0000041d
    5e20:	00000433 	.word	0x00000433
    5e24:	00000413 	.word	0x00000413
    5e28:	7fffffff 	.word	0x7fffffff
    5e2c:	fffffbed 	.word	0xfffffbed

00005e30 <__aeabi_i2d>:
    5e30:	b570      	push	{r4, r5, r6, lr}
    5e32:	2800      	cmp	r0, #0
    5e34:	d030      	beq.n	5e98 <__aeabi_i2d+0x68>
    5e36:	17c3      	asrs	r3, r0, #31
    5e38:	18c4      	adds	r4, r0, r3
    5e3a:	405c      	eors	r4, r3
    5e3c:	0fc5      	lsrs	r5, r0, #31
    5e3e:	0020      	movs	r0, r4
    5e40:	f7fe feba 	bl	4bb8 <__clzsi2>
    5e44:	4b17      	ldr	r3, [pc, #92]	; (5ea4 <__aeabi_i2d+0x74>)
    5e46:	4a18      	ldr	r2, [pc, #96]	; (5ea8 <__aeabi_i2d+0x78>)
    5e48:	1a1b      	subs	r3, r3, r0
    5e4a:	1ad2      	subs	r2, r2, r3
    5e4c:	2a1f      	cmp	r2, #31
    5e4e:	dd18      	ble.n	5e82 <__aeabi_i2d+0x52>
    5e50:	4a16      	ldr	r2, [pc, #88]	; (5eac <__aeabi_i2d+0x7c>)
    5e52:	1ad2      	subs	r2, r2, r3
    5e54:	4094      	lsls	r4, r2
    5e56:	2200      	movs	r2, #0
    5e58:	0324      	lsls	r4, r4, #12
    5e5a:	055b      	lsls	r3, r3, #21
    5e5c:	0b24      	lsrs	r4, r4, #12
    5e5e:	0d5b      	lsrs	r3, r3, #21
    5e60:	2100      	movs	r1, #0
    5e62:	0010      	movs	r0, r2
    5e64:	0324      	lsls	r4, r4, #12
    5e66:	0d0a      	lsrs	r2, r1, #20
    5e68:	0b24      	lsrs	r4, r4, #12
    5e6a:	0512      	lsls	r2, r2, #20
    5e6c:	4322      	orrs	r2, r4
    5e6e:	4c10      	ldr	r4, [pc, #64]	; (5eb0 <__aeabi_i2d+0x80>)
    5e70:	051b      	lsls	r3, r3, #20
    5e72:	4022      	ands	r2, r4
    5e74:	4313      	orrs	r3, r2
    5e76:	005b      	lsls	r3, r3, #1
    5e78:	07ed      	lsls	r5, r5, #31
    5e7a:	085b      	lsrs	r3, r3, #1
    5e7c:	432b      	orrs	r3, r5
    5e7e:	0019      	movs	r1, r3
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	0021      	movs	r1, r4
    5e84:	4091      	lsls	r1, r2
    5e86:	000a      	movs	r2, r1
    5e88:	210b      	movs	r1, #11
    5e8a:	1a08      	subs	r0, r1, r0
    5e8c:	40c4      	lsrs	r4, r0
    5e8e:	055b      	lsls	r3, r3, #21
    5e90:	0324      	lsls	r4, r4, #12
    5e92:	0b24      	lsrs	r4, r4, #12
    5e94:	0d5b      	lsrs	r3, r3, #21
    5e96:	e7e3      	b.n	5e60 <__aeabi_i2d+0x30>
    5e98:	2500      	movs	r5, #0
    5e9a:	2300      	movs	r3, #0
    5e9c:	2400      	movs	r4, #0
    5e9e:	2200      	movs	r2, #0
    5ea0:	e7de      	b.n	5e60 <__aeabi_i2d+0x30>
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	0000041e 	.word	0x0000041e
    5ea8:	00000433 	.word	0x00000433
    5eac:	00000413 	.word	0x00000413
    5eb0:	800fffff 	.word	0x800fffff

00005eb4 <__libc_init_array>:
    5eb4:	b570      	push	{r4, r5, r6, lr}
    5eb6:	2600      	movs	r6, #0
    5eb8:	4d0c      	ldr	r5, [pc, #48]	; (5eec <__libc_init_array+0x38>)
    5eba:	4c0d      	ldr	r4, [pc, #52]	; (5ef0 <__libc_init_array+0x3c>)
    5ebc:	1b64      	subs	r4, r4, r5
    5ebe:	10a4      	asrs	r4, r4, #2
    5ec0:	42a6      	cmp	r6, r4
    5ec2:	d109      	bne.n	5ed8 <__libc_init_array+0x24>
    5ec4:	2600      	movs	r6, #0
    5ec6:	f000 f96d 	bl	61a4 <_init>
    5eca:	4d0a      	ldr	r5, [pc, #40]	; (5ef4 <__libc_init_array+0x40>)
    5ecc:	4c0a      	ldr	r4, [pc, #40]	; (5ef8 <__libc_init_array+0x44>)
    5ece:	1b64      	subs	r4, r4, r5
    5ed0:	10a4      	asrs	r4, r4, #2
    5ed2:	42a6      	cmp	r6, r4
    5ed4:	d105      	bne.n	5ee2 <__libc_init_array+0x2e>
    5ed6:	bd70      	pop	{r4, r5, r6, pc}
    5ed8:	00b3      	lsls	r3, r6, #2
    5eda:	58eb      	ldr	r3, [r5, r3]
    5edc:	4798      	blx	r3
    5ede:	3601      	adds	r6, #1
    5ee0:	e7ee      	b.n	5ec0 <__libc_init_array+0xc>
    5ee2:	00b3      	lsls	r3, r6, #2
    5ee4:	58eb      	ldr	r3, [r5, r3]
    5ee6:	4798      	blx	r3
    5ee8:	3601      	adds	r6, #1
    5eea:	e7f2      	b.n	5ed2 <__libc_init_array+0x1e>
    5eec:	000061b0 	.word	0x000061b0
    5ef0:	000061b0 	.word	0x000061b0
    5ef4:	000061b0 	.word	0x000061b0
    5ef8:	000061b4 	.word	0x000061b4

00005efc <memcpy>:
    5efc:	2300      	movs	r3, #0
    5efe:	b510      	push	{r4, lr}
    5f00:	429a      	cmp	r2, r3
    5f02:	d100      	bne.n	5f06 <memcpy+0xa>
    5f04:	bd10      	pop	{r4, pc}
    5f06:	5ccc      	ldrb	r4, [r1, r3]
    5f08:	54c4      	strb	r4, [r0, r3]
    5f0a:	3301      	adds	r3, #1
    5f0c:	e7f8      	b.n	5f00 <memcpy+0x4>

00005f0e <memset>:
    5f0e:	0003      	movs	r3, r0
    5f10:	1882      	adds	r2, r0, r2
    5f12:	4293      	cmp	r3, r2
    5f14:	d100      	bne.n	5f18 <memset+0xa>
    5f16:	4770      	bx	lr
    5f18:	7019      	strb	r1, [r3, #0]
    5f1a:	3301      	adds	r3, #1
    5f1c:	e7f9      	b.n	5f12 <memset+0x4>
    5f1e:	0000      	movs	r0, r0
    5f20:	0000117a 	.word	0x0000117a
    5f24:	000010d4 	.word	0x000010d4
    5f28:	000010d4 	.word	0x000010d4
    5f2c:	000010d4 	.word	0x000010d4
    5f30:	00001184 	.word	0x00001184
    5f34:	000010d4 	.word	0x000010d4
    5f38:	000010d4 	.word	0x000010d4
    5f3c:	000010d4 	.word	0x000010d4
    5f40:	000010d4 	.word	0x000010d4
    5f44:	000010d4 	.word	0x000010d4
    5f48:	000010d4 	.word	0x000010d4
    5f4c:	000010d4 	.word	0x000010d4
    5f50:	000010d4 	.word	0x000010d4
    5f54:	000010d4 	.word	0x000010d4
    5f58:	000010d4 	.word	0x000010d4
    5f5c:	000010d4 	.word	0x000010d4
    5f60:	000010d4 	.word	0x000010d4
    5f64:	000010d4 	.word	0x000010d4
    5f68:	000010d4 	.word	0x000010d4
    5f6c:	000011d4 	.word	0x000011d4
    5f70:	000010d4 	.word	0x000010d4
    5f74:	00001166 	.word	0x00001166
    5f78:	000010d4 	.word	0x000010d4
    5f7c:	000010d4 	.word	0x000010d4
    5f80:	000010f0 	.word	0x000010f0
    5f84:	000010d4 	.word	0x000010d4
    5f88:	000010d4 	.word	0x000010d4
    5f8c:	000010d4 	.word	0x000010d4
    5f90:	000010c4 	.word	0x000010c4
    5f94:	000010d4 	.word	0x000010d4
    5f98:	000010d4 	.word	0x000010d4
    5f9c:	000010d4 	.word	0x000010d4
    5fa0:	000010d4 	.word	0x000010d4
    5fa4:	000010d4 	.word	0x000010d4
    5fa8:	00001104 	.word	0x00001104
    5fac:	000010d4 	.word	0x000010d4
    5fb0:	000010dc 	.word	0x000010dc
    5fb4:	000010d4 	.word	0x000010d4
    5fb8:	000010d4 	.word	0x000010d4
    5fbc:	00001130 	.word	0x00001130
    5fc0:	00001cd8 	.word	0x00001cd8
    5fc4:	00001cd8 	.word	0x00001cd8
    5fc8:	00001cb4 	.word	0x00001cb4
    5fcc:	00001cd8 	.word	0x00001cd8
    5fd0:	00001cb4 	.word	0x00001cb4
    5fd4:	00001c9a 	.word	0x00001c9a
    5fd8:	00001c9a 	.word	0x00001c9a
    5fdc:	00001cd8 	.word	0x00001cd8
    5fe0:	00001cd8 	.word	0x00001cd8
    5fe4:	00001cd8 	.word	0x00001cd8
    5fe8:	00001cd8 	.word	0x00001cd8
    5fec:	00001cd8 	.word	0x00001cd8
    5ff0:	00001cd8 	.word	0x00001cd8
    5ff4:	00001cd8 	.word	0x00001cd8
    5ff8:	00001cd8 	.word	0x00001cd8
    5ffc:	00001cd8 	.word	0x00001cd8
    6000:	00001cd8 	.word	0x00001cd8
    6004:	00001cd8 	.word	0x00001cd8
    6008:	00001cd8 	.word	0x00001cd8
    600c:	00001cd8 	.word	0x00001cd8
    6010:	00001cd8 	.word	0x00001cd8
    6014:	00001cd8 	.word	0x00001cd8
    6018:	00001cd8 	.word	0x00001cd8
    601c:	00001cd8 	.word	0x00001cd8
    6020:	00001cd8 	.word	0x00001cd8
    6024:	00001cd8 	.word	0x00001cd8
    6028:	00001cd8 	.word	0x00001cd8
    602c:	00001cd8 	.word	0x00001cd8
    6030:	00001cd8 	.word	0x00001cd8
    6034:	00001cd8 	.word	0x00001cd8
    6038:	00001cd8 	.word	0x00001cd8
    603c:	00001cd8 	.word	0x00001cd8
    6040:	00001cd8 	.word	0x00001cd8
    6044:	00001cd8 	.word	0x00001cd8
    6048:	00001cd8 	.word	0x00001cd8
    604c:	00001cd8 	.word	0x00001cd8
    6050:	00001cd8 	.word	0x00001cd8
    6054:	00001cd8 	.word	0x00001cd8
    6058:	00001cd8 	.word	0x00001cd8
    605c:	00001cd8 	.word	0x00001cd8
    6060:	00001cd8 	.word	0x00001cd8
    6064:	00001cd8 	.word	0x00001cd8
    6068:	00001cd8 	.word	0x00001cd8
    606c:	00001cd8 	.word	0x00001cd8
    6070:	00001cd8 	.word	0x00001cd8
    6074:	00001cd8 	.word	0x00001cd8
    6078:	00001cd8 	.word	0x00001cd8
    607c:	00001cd8 	.word	0x00001cd8
    6080:	00001cd8 	.word	0x00001cd8
    6084:	00001cd8 	.word	0x00001cd8
    6088:	00001cd8 	.word	0x00001cd8
    608c:	00001cd8 	.word	0x00001cd8
    6090:	00001cd8 	.word	0x00001cd8
    6094:	00001cd8 	.word	0x00001cd8
    6098:	00001cd8 	.word	0x00001cd8
    609c:	00001cd8 	.word	0x00001cd8
    60a0:	00001cd8 	.word	0x00001cd8
    60a4:	00001cd8 	.word	0x00001cd8
    60a8:	00001cd8 	.word	0x00001cd8
    60ac:	00001cd8 	.word	0x00001cd8
    60b0:	00001cd8 	.word	0x00001cd8
    60b4:	00001cd8 	.word	0x00001cd8
    60b8:	00001cd8 	.word	0x00001cd8
    60bc:	00001cd8 	.word	0x00001cd8
    60c0:	00001cb4 	.word	0x00001cb4
    60c4:	00001cb4 	.word	0x00001cb4
    60c8:	00001cbc 	.word	0x00001cbc
    60cc:	00001cbc 	.word	0x00001cbc
    60d0:	00001cbc 	.word	0x00001cbc
    60d4:	00001cbc 	.word	0x00001cbc
    60d8:	000020a0 	.word	0x000020a0
    60dc:	00002080 	.word	0x00002080
    60e0:	00002080 	.word	0x00002080
    60e4:	0000210c 	.word	0x0000210c
    60e8:	00002092 	.word	0x00002092
    60ec:	000020ae 	.word	0x000020ae
    60f0:	00002084 	.word	0x00002084
    60f4:	000020bc 	.word	0x000020bc
    60f8:	000020fc 	.word	0x000020fc
    60fc:	000035f8 	.word	0x000035f8
    6100:	00003606 	.word	0x00003606
    6104:	000036a0 	.word	0x000036a0
    6108:	00003740 	.word	0x00003740
    610c:	000037a4 	.word	0x000037a4

00006110 <_usb_device_irq_bits>:
    6110:	00080004 00800070 01000001 00000200     ....p...........

00006120 <_usb_endpoint_irq_bits>:
    6120:	60100c03 00004e2c 00004e0e 00004dc8     ...`,N...N...M..
    6130:	00004ce6 00004dc8 00004e00 00004dc8     .L...M...N...M..
    6140:	00004ce6 00004e0e 00004e0e 00004e00     .L...N...N...N..
    6150:	00004ce6 00004cde 00004cde 00004cde     .L...L...L...L..
    6160:	00005044 0000548c 0000534c 0000534c     DP...T..LS..LS..
    6170:	00005348 00005464 00005464 00005456     HS..dT..dT..VT..
    6180:	00005348 00005464 00005456 00005464     HS..dT..VT..dT..
    6190:	00005348 0000546c 0000546c 0000546c     HS..lT..lT..lT..
    61a0:	00005670                                pV..

000061a4 <_init>:
    61a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61aa:	bc08      	pop	{r3}
    61ac:	469e      	mov	lr, r3
    61ae:	4770      	bx	lr

000061b0 <__init_array_start>:
    61b0:	000000dd 	.word	0x000000dd

000061b4 <_fini>:
    61b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61ba:	bc08      	pop	{r3}
    61bc:	469e      	mov	lr, r3
    61be:	4770      	bx	lr

000061c0 <__fini_array_start>:
    61c0:	000000b5 	.word	0x000000b5
