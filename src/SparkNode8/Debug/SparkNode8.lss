
SparkNode8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007834  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000214  20000000  00007834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d0c  20000218  00007a50  00020218  2**3
                  ALLOC
  3 .stack        00002004  20000f24  0000875c  00020218  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00033668  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c82  00000000  00000000  000538fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ef3  00000000  00000000  0005757f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f0  00000000  00000000  0005d472  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c10  00000000  00000000  0005db62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000168fb  00000000  00000000  0005e772  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009d6c  00000000  00000000  0007506d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078892  00000000  00000000  0007edd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018dc  00000000  00000000  000f766c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 2f 00 20 dd 2a 00 00 d9 2a 00 00 d9 2a 00 00     (/. .*...*...*..
	...
      2c:	d9 2a 00 00 00 00 00 00 00 00 00 00 d9 2a 00 00     .*...........*..
      3c:	d9 2a 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .*...*...*...*..
      4c:	d9 2a 00 00 b5 33 00 00 d9 2a 00 00 d9 2a 00 00     .*...3...*...*..
      5c:	c9 49 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .I...*...*...*..
      6c:	d9 2a 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .*...*...*...*..
      7c:	d9 2a 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .*...*...*...*..
      8c:	d9 2a 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .*...*...*...*..
      9c:	d9 2a 00 00 d9 2a 00 00 d9 2a 00 00 d9 2a 00 00     .*...*...*...*..
      ac:	e5 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000218 	.word	0x20000218
      d4:	00000000 	.word	0x00000000
      d8:	00007834 	.word	0x00007834

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000021c 	.word	0x2000021c
     108:	00007834 	.word	0x00007834
     10c:	00007834 	.word	0x00007834
     110:	00000000 	.word	0x00000000

00000114 <flashWrite>:
#define FLASH_SIZE 64 // 64 bytes is one page, must write a whole page at a time
uint8_t flash_mem[FLASH_SIZE];
const uint32_t flash_addr = 0x00030600;

void flashWrite()
{
     114:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = 0;
	for(uint8_t i=0;i<FLASH_SIZE;i++)
     116:	2300      	movs	r3, #0
     118:	e004      	b.n	124 <flashWrite+0x10>
		flash_mem[i] = 0;
     11a:	2100      	movs	r1, #0
     11c:	4a22      	ldr	r2, [pc, #136]	; (1a8 <flashWrite+0x94>)
     11e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<FLASH_SIZE;i++)
     120:	3301      	adds	r3, #1
     122:	b2db      	uxtb	r3, r3
     124:	2b3f      	cmp	r3, #63	; 0x3f
     126:	d9f8      	bls.n	11a <flashWrite+0x6>
	flash_mem[p] = 0xcd; p++;
     128:	4b1f      	ldr	r3, [pc, #124]	; (1a8 <flashWrite+0x94>)
     12a:	22cd      	movs	r2, #205	; 0xcd
     12c:	701a      	strb	r2, [r3, #0]
	
	// Put configuration
	flash_mem[p] = linkPacketSize >> 8; p++;
     12e:	4a1f      	ldr	r2, [pc, #124]	; (1ac <flashWrite+0x98>)
     130:	8812      	ldrh	r2, [r2, #0]
     132:	0a11      	lsrs	r1, r2, #8
     134:	7059      	strb	r1, [r3, #1]
	flash_mem[p] = linkPacketSize & 0xFF; p++;
     136:	709a      	strb	r2, [r3, #2]
	flash_mem[p] = linkPacketRate >> 8; p++;
     138:	4a1d      	ldr	r2, [pc, #116]	; (1b0 <flashWrite+0x9c>)
     13a:	8812      	ldrh	r2, [r2, #0]
     13c:	0a11      	lsrs	r1, r2, #8
     13e:	70d9      	strb	r1, [r3, #3]
	flash_mem[p] = linkPacketRate & 0xFF; p++;
     140:	711a      	strb	r2, [r3, #4]
	flash_mem[p] = linkSleepMode; p++;
     142:	4a1c      	ldr	r2, [pc, #112]	; (1b4 <flashWrite+0xa0>)
     144:	7812      	ldrb	r2, [r2, #0]
     146:	715a      	strb	r2, [r3, #5]
	flash_mem[p] = linkSyncWord >> 8; p++;
     148:	4a1b      	ldr	r2, [pc, #108]	; (1b8 <flashWrite+0xa4>)
     14a:	8812      	ldrh	r2, [r2, #0]
     14c:	0a11      	lsrs	r1, r2, #8
     14e:	7199      	strb	r1, [r3, #6]
	flash_mem[p] = linkSyncWord & 0xFF; p++;
     150:	71da      	strb	r2, [r3, #7]
	flash_mem[p] = linkBidirectional; p++;
     152:	4a1a      	ldr	r2, [pc, #104]	; (1bc <flashWrite+0xa8>)
     154:	7812      	ldrb	r2, [r2, #0]
     156:	721a      	strb	r2, [r3, #8]
	flash_mem[p] = linkMaster; p++;
     158:	4a19      	ldr	r2, [pc, #100]	; (1c0 <flashWrite+0xac>)
     15a:	7812      	ldrb	r2, [r2, #0]
     15c:	725a      	strb	r2, [r3, #9]
	flash_mem[p] = linkRandom; p++;
     15e:	4a19      	ldr	r2, [pc, #100]	; (1c4 <flashWrite+0xb0>)
     160:	7812      	ldrb	r2, [r2, #0]
     162:	729a      	strb	r2, [r3, #10]
	flash_mem[p] = linkAudio; p++;
     164:	4a18      	ldr	r2, [pc, #96]	; (1c8 <flashWrite+0xb4>)
     166:	7812      	ldrb	r2, [r2, #0]
     168:	72da      	strb	r2, [r3, #11]
	flash_mem[p] = linkSensor; p++;
     16a:	4a18      	ldr	r2, [pc, #96]	; (1cc <flashWrite+0xb8>)
     16c:	7812      	ldrb	r2, [r2, #0]
     16e:	731a      	strb	r2, [r3, #12]
	for(uint8_t i=0;i<12;i++)
     170:	2300      	movs	r3, #0
	flash_mem[p] = linkSensor; p++;
     172:	220d      	movs	r2, #13
	for(uint8_t i=0;i<12;i++)
     174:	e007      	b.n	186 <flashWrite+0x72>
		flash_mem[p++] = linkTXMask[i];
     176:	1c51      	adds	r1, r2, #1
     178:	4815      	ldr	r0, [pc, #84]	; (1d0 <flashWrite+0xbc>)
     17a:	5cc4      	ldrb	r4, [r0, r3]
     17c:	480a      	ldr	r0, [pc, #40]	; (1a8 <flashWrite+0x94>)
     17e:	5484      	strb	r4, [r0, r2]
	for(uint8_t i=0;i<12;i++)
     180:	3301      	adds	r3, #1
     182:	b2db      	uxtb	r3, r3
		flash_mem[p++] = linkTXMask[i];
     184:	b2ca      	uxtb	r2, r1
	for(uint8_t i=0;i<12;i++)
     186:	2b0b      	cmp	r3, #11
     188:	d9f5      	bls.n	176 <flashWrite+0x62>
	flash_mem[p] = audioDecimate; p++;	
     18a:	4d07      	ldr	r5, [pc, #28]	; (1a8 <flashWrite+0x94>)
     18c:	4b11      	ldr	r3, [pc, #68]	; (1d4 <flashWrite+0xc0>)
     18e:	781b      	ldrb	r3, [r3, #0]
     190:	54ab      	strb	r3, [r5, r2]
	
	
	// Write
	flash_erase_row(flash_addr);
     192:	4c11      	ldr	r4, [pc, #68]	; (1d8 <flashWrite+0xc4>)
     194:	0020      	movs	r0, r4
     196:	4b11      	ldr	r3, [pc, #68]	; (1dc <flashWrite+0xc8>)
     198:	4798      	blx	r3
	flash_write_buffer(flash_addr, flash_mem, FLASH_SIZE);
     19a:	2240      	movs	r2, #64	; 0x40
     19c:	0029      	movs	r1, r5
     19e:	0020      	movs	r0, r4
     1a0:	4b0f      	ldr	r3, [pc, #60]	; (1e0 <flashWrite+0xcc>)
     1a2:	4798      	blx	r3
}
     1a4:	bd70      	pop	{r4, r5, r6, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	20000324 	.word	0x20000324
     1ac:	20000498 	.word	0x20000498
     1b0:	200005b6 	.word	0x200005b6
     1b4:	200002e9 	.word	0x200002e9
     1b8:	2000031c 	.word	0x2000031c
     1bc:	200005b2 	.word	0x200005b2
     1c0:	20000488 	.word	0x20000488
     1c4:	20000301 	.word	0x20000301
     1c8:	200002e8 	.word	0x200002e8
     1cc:	2000048d 	.word	0x2000048d
     1d0:	20000364 	.word	0x20000364
     1d4:	200005c0 	.word	0x200005c0
     1d8:	00030600 	.word	0x00030600
     1dc:	00002ddd 	.word	0x00002ddd
     1e0:	00002e01 	.word	0x00002e01

000001e4 <flashRead>:

void flashRead()
{
     1e4:	b510      	push	{r4, lr}
	uint8_t p = 0;
	
	// Read
	flash_read_buffer(flash_addr, flash_mem, FLASH_SIZE);
     1e6:	4c25      	ldr	r4, [pc, #148]	; (27c <flashRead+0x98>)
     1e8:	2240      	movs	r2, #64	; 0x40
     1ea:	0021      	movs	r1, r4
     1ec:	4824      	ldr	r0, [pc, #144]	; (280 <flashRead+0x9c>)
     1ee:	4b25      	ldr	r3, [pc, #148]	; (284 <flashRead+0xa0>)
     1f0:	4798      	blx	r3
	for(uint8_t i=0;i<FLASH_SIZE;i++)
	usbPrintf("%02hx ", flash_mem[i]);
	usbPrintf("\n");*/
	
	// Get configuration
	if(flash_mem[p++]!= 0xcd) // header
     1f2:	7823      	ldrb	r3, [r4, #0]
     1f4:	2bcd      	cmp	r3, #205	; 0xcd
     1f6:	d000      	beq.n	1fa <flashRead+0x16>
	linkAudio = flash_mem[p++];	
	linkSensor = flash_mem[p++];
	for(uint8_t i=0;i<12;i++)
		linkTXMask[i] = flash_mem[p++];
	audioDecimate = flash_mem[p++];	
}
     1f8:	bd10      	pop	{r4, pc}
	linkPacketSize = flash_mem[p++]; linkPacketSize <<= 8;
     1fa:	4b20      	ldr	r3, [pc, #128]	; (27c <flashRead+0x98>)
     1fc:	785a      	ldrb	r2, [r3, #1]
     1fe:	0212      	lsls	r2, r2, #8
	linkPacketSize |= flash_mem[p++];
     200:	7899      	ldrb	r1, [r3, #2]
     202:	430a      	orrs	r2, r1
     204:	4920      	ldr	r1, [pc, #128]	; (288 <flashRead+0xa4>)
     206:	800a      	strh	r2, [r1, #0]
	linkPacketRate = flash_mem[p++]; linkPacketRate <<= 8;
     208:	78da      	ldrb	r2, [r3, #3]
     20a:	0212      	lsls	r2, r2, #8
	linkPacketRate |= flash_mem[p++];
     20c:	7919      	ldrb	r1, [r3, #4]
     20e:	430a      	orrs	r2, r1
     210:	491e      	ldr	r1, [pc, #120]	; (28c <flashRead+0xa8>)
     212:	800a      	strh	r2, [r1, #0]
	linkSleepMode = flash_mem[p++];
     214:	7959      	ldrb	r1, [r3, #5]
     216:	4a1e      	ldr	r2, [pc, #120]	; (290 <flashRead+0xac>)
     218:	7011      	strb	r1, [r2, #0]
	linkSyncWord = flash_mem[p++]; linkSyncWord <<= 8;
     21a:	799a      	ldrb	r2, [r3, #6]
     21c:	0212      	lsls	r2, r2, #8
	linkSyncWord |= flash_mem[p++];
     21e:	79d9      	ldrb	r1, [r3, #7]
     220:	430a      	orrs	r2, r1
     222:	491c      	ldr	r1, [pc, #112]	; (294 <flashRead+0xb0>)
     224:	800a      	strh	r2, [r1, #0]
	linkBidirectional = flash_mem[p++];
     226:	7a1a      	ldrb	r2, [r3, #8]
     228:	1e51      	subs	r1, r2, #1
     22a:	418a      	sbcs	r2, r1
     22c:	491a      	ldr	r1, [pc, #104]	; (298 <flashRead+0xb4>)
     22e:	700a      	strb	r2, [r1, #0]
	linkMaster = flash_mem[p++];
     230:	7a5a      	ldrb	r2, [r3, #9]
     232:	1e51      	subs	r1, r2, #1
     234:	418a      	sbcs	r2, r1
     236:	4919      	ldr	r1, [pc, #100]	; (29c <flashRead+0xb8>)
     238:	700a      	strb	r2, [r1, #0]
	linkRandom = flash_mem[p++];
     23a:	7a9a      	ldrb	r2, [r3, #10]
     23c:	1e51      	subs	r1, r2, #1
     23e:	418a      	sbcs	r2, r1
     240:	4917      	ldr	r1, [pc, #92]	; (2a0 <flashRead+0xbc>)
     242:	700a      	strb	r2, [r1, #0]
	linkAudio = flash_mem[p++];	
     244:	7ada      	ldrb	r2, [r3, #11]
     246:	1e51      	subs	r1, r2, #1
     248:	418a      	sbcs	r2, r1
     24a:	4916      	ldr	r1, [pc, #88]	; (2a4 <flashRead+0xc0>)
     24c:	700a      	strb	r2, [r1, #0]
	linkSensor = flash_mem[p++];
     24e:	7b1b      	ldrb	r3, [r3, #12]
     250:	1e5a      	subs	r2, r3, #1
     252:	4193      	sbcs	r3, r2
     254:	4a14      	ldr	r2, [pc, #80]	; (2a8 <flashRead+0xc4>)
     256:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=0;i<12;i++)
     258:	2300      	movs	r3, #0
	linkSensor = flash_mem[p++];
     25a:	220d      	movs	r2, #13
	for(uint8_t i=0;i<12;i++)
     25c:	e007      	b.n	26e <flashRead+0x8a>
		linkTXMask[i] = flash_mem[p++];
     25e:	1c51      	adds	r1, r2, #1
     260:	4806      	ldr	r0, [pc, #24]	; (27c <flashRead+0x98>)
     262:	5c80      	ldrb	r0, [r0, r2]
     264:	4a11      	ldr	r2, [pc, #68]	; (2ac <flashRead+0xc8>)
     266:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0;i<12;i++)
     268:	3301      	adds	r3, #1
     26a:	b2db      	uxtb	r3, r3
		linkTXMask[i] = flash_mem[p++];
     26c:	b2ca      	uxtb	r2, r1
	for(uint8_t i=0;i<12;i++)
     26e:	2b0b      	cmp	r3, #11
     270:	d9f5      	bls.n	25e <flashRead+0x7a>
	audioDecimate = flash_mem[p++];	
     272:	4b02      	ldr	r3, [pc, #8]	; (27c <flashRead+0x98>)
     274:	5c9a      	ldrb	r2, [r3, r2]
     276:	4b0e      	ldr	r3, [pc, #56]	; (2b0 <flashRead+0xcc>)
     278:	701a      	strb	r2, [r3, #0]
     27a:	e7bd      	b.n	1f8 <flashRead+0x14>
     27c:	20000324 	.word	0x20000324
     280:	00030600 	.word	0x00030600
     284:	00002d9d 	.word	0x00002d9d
     288:	20000498 	.word	0x20000498
     28c:	200005b6 	.word	0x200005b6
     290:	200002e9 	.word	0x200002e9
     294:	2000031c 	.word	0x2000031c
     298:	200005b2 	.word	0x200005b2
     29c:	20000488 	.word	0x20000488
     2a0:	20000301 	.word	0x20000301
     2a4:	200002e8 	.word	0x200002e8
     2a8:	2000048d 	.word	0x2000048d
     2ac:	20000364 	.word	0x20000364
     2b0:	200005c0 	.word	0x200005c0

000002b4 <defaultLinkSettings>:

void defaultLinkSettings()
{
     2b4:	b510      	push	{r4, lr}
	flash_init();
     2b6:	4b20      	ldr	r3, [pc, #128]	; (338 <defaultLinkSettings+0x84>)
     2b8:	4798      	blx	r3
	
	linkPacketSize = 240;
     2ba:	22f0      	movs	r2, #240	; 0xf0
     2bc:	4b1f      	ldr	r3, [pc, #124]	; (33c <defaultLinkSettings+0x88>)
     2be:	801a      	strh	r2, [r3, #0]
	linkPacketRate = 2000;
     2c0:	22fa      	movs	r2, #250	; 0xfa
     2c2:	00d2      	lsls	r2, r2, #3
     2c4:	4b1e      	ldr	r3, [pc, #120]	; (340 <defaultLinkSettings+0x8c>)
     2c6:	801a      	strh	r2, [r3, #0]
	linkSleepMode = SPARK_SLEEP_SHALLOW;
     2c8:	2202      	movs	r2, #2
     2ca:	4b1e      	ldr	r3, [pc, #120]	; (344 <defaultLinkSettings+0x90>)
     2cc:	701a      	strb	r2, [r3, #0]
	linkSyncWord = 0xad13;
     2ce:	4a1e      	ldr	r2, [pc, #120]	; (348 <defaultLinkSettings+0x94>)
     2d0:	4b1e      	ldr	r3, [pc, #120]	; (34c <defaultLinkSettings+0x98>)
     2d2:	801a      	strh	r2, [r3, #0]
	linkPreambleSize = 0x3f;
     2d4:	223f      	movs	r2, #63	; 0x3f
     2d6:	4b1e      	ldr	r3, [pc, #120]	; (350 <defaultLinkSettings+0x9c>)
     2d8:	801a      	strh	r2, [r3, #0]
	linkMinNoiLvl = 0x11;
     2da:	3a2e      	subs	r2, #46	; 0x2e
     2dc:	4b1d      	ldr	r3, [pc, #116]	; (354 <defaultLinkSettings+0xa0>)
     2de:	801a      	strh	r2, [r3, #0]
	linkMinPulAmp = 0x2a;
     2e0:	3219      	adds	r2, #25
     2e2:	4b1d      	ldr	r3, [pc, #116]	; (358 <defaultLinkSettings+0xa4>)
     2e4:	801a      	strh	r2, [r3, #0]
	linkMinSigStr = 0x12;
     2e6:	3a18      	subs	r2, #24
     2e8:	4b1c      	ldr	r3, [pc, #112]	; (35c <defaultLinkSettings+0xa8>)
     2ea:	801a      	strh	r2, [r3, #0]
	linkBidirectional = true;
     2ec:	3a11      	subs	r2, #17
     2ee:	4b1c      	ldr	r3, [pc, #112]	; (360 <defaultLinkSettings+0xac>)
     2f0:	701a      	strb	r2, [r3, #0]
	linkMaster =  false;
     2f2:	2200      	movs	r2, #0
     2f4:	4b1b      	ldr	r3, [pc, #108]	; (364 <defaultLinkSettings+0xb0>)
     2f6:	701a      	strb	r2, [r3, #0]
	linkRandom = false;
     2f8:	4b1b      	ldr	r3, [pc, #108]	; (368 <defaultLinkSettings+0xb4>)
     2fa:	701a      	strb	r2, [r3, #0]
	linkAudio = false;
     2fc:	4b1b      	ldr	r3, [pc, #108]	; (36c <defaultLinkSettings+0xb8>)
     2fe:	701a      	strb	r2, [r3, #0]
	linkSensor = false;
     300:	4b1b      	ldr	r3, [pc, #108]	; (370 <defaultLinkSettings+0xbc>)
     302:	701a      	strb	r2, [r3, #0]
	
	linkTXMask[0] = 0x00;
     304:	4b1b      	ldr	r3, [pc, #108]	; (374 <defaultLinkSettings+0xc0>)
     306:	701a      	strb	r2, [r3, #0]
	linkTXMask[1] = 0x00;
     308:	705a      	strb	r2, [r3, #1]
	linkTXMask[2] = 0xbd;
     30a:	21bd      	movs	r1, #189	; 0xbd
     30c:	7099      	strb	r1, [r3, #2]
	linkTXMask[3] = 0xbb;
     30e:	3902      	subs	r1, #2
     310:	70d9      	strb	r1, [r3, #3]
	linkTXMask[4] = 0xb9;
     312:	3902      	subs	r1, #2
     314:	7119      	strb	r1, [r3, #4]
	linkTXMask[5] = 0xb7;
     316:	3902      	subs	r1, #2
     318:	7159      	strb	r1, [r3, #5]
	linkTXMask[6] = 0xb5;
     31a:	3902      	subs	r1, #2
     31c:	7199      	strb	r1, [r3, #6]
	linkTXMask[7] = 0xb3;
     31e:	3902      	subs	r1, #2
     320:	71d9      	strb	r1, [r3, #7]
	linkTXMask[8] = 0x00;
     322:	721a      	strb	r2, [r3, #8]
	linkTXMask[9] = 0x00;
     324:	725a      	strb	r2, [r3, #9]
	linkTXMask[10] = 0x00;
     326:	729a      	strb	r2, [r3, #10]
	linkTXMask[11] = 0x00;
     328:	72da      	strb	r2, [r3, #11]
	
	audioDecimate = 6;
     32a:	3206      	adds	r2, #6
     32c:	4b12      	ldr	r3, [pc, #72]	; (378 <defaultLinkSettings+0xc4>)
     32e:	701a      	strb	r2, [r3, #0]
	
	// Try to read configuration
	flashRead();
     330:	4b12      	ldr	r3, [pc, #72]	; (37c <defaultLinkSettings+0xc8>)
     332:	4798      	blx	r3
}
     334:	bd10      	pop	{r4, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	00002d69 	.word	0x00002d69
     33c:	20000498 	.word	0x20000498
     340:	200005b6 	.word	0x200005b6
     344:	200002e9 	.word	0x200002e9
     348:	ffffad13 	.word	0xffffad13
     34c:	2000031c 	.word	0x2000031c
     350:	200005b4 	.word	0x200005b4
     354:	200005b0 	.word	0x200005b0
     358:	200002d0 	.word	0x200002d0
     35c:	2000048a 	.word	0x2000048a
     360:	200005b2 	.word	0x200005b2
     364:	20000488 	.word	0x20000488
     368:	20000301 	.word	0x20000301
     36c:	200002e8 	.word	0x200002e8
     370:	2000048d 	.word	0x2000048d
     374:	20000364 	.word	0x20000364
     378:	200005c0 	.word	0x200005c0
     37c:	000001e5 	.word	0x000001e5

00000380 <configureLink>:

void configureLink()
{
     380:	b530      	push	{r4, r5, lr}
     382:	b085      	sub	sp, #20
	linkPacketSize = linkPacketSize & 0xFFF0; // Multiple of 2 bytes
     384:	4b14      	ldr	r3, [pc, #80]	; (3d8 <configureLink+0x58>)
     386:	881c      	ldrh	r4, [r3, #0]
     388:	220f      	movs	r2, #15
     38a:	4394      	bics	r4, r2
     38c:	801c      	strh	r4, [r3, #0]
	
	// Packet setup
	sparkPacketSetup(linkMinNoiLvl, linkMinPulAmp, linkMinSigStr, linkPreambleSize, linkPacketSize/8, linkSyncWord, linkRandom); // preamble, packet size, sync word, gen random
     38e:	4b13      	ldr	r3, [pc, #76]	; (3dc <configureLink+0x5c>)
     390:	781b      	ldrb	r3, [r3, #0]
     392:	4a13      	ldr	r2, [pc, #76]	; (3e0 <configureLink+0x60>)
     394:	7812      	ldrb	r2, [r2, #0]
     396:	4913      	ldr	r1, [pc, #76]	; (3e4 <configureLink+0x64>)
     398:	7809      	ldrb	r1, [r1, #0]
     39a:	4813      	ldr	r0, [pc, #76]	; (3e8 <configureLink+0x68>)
     39c:	7800      	ldrb	r0, [r0, #0]
     39e:	4d13      	ldr	r5, [pc, #76]	; (3ec <configureLink+0x6c>)
     3a0:	782d      	ldrb	r5, [r5, #0]
     3a2:	9502      	str	r5, [sp, #8]
     3a4:	4d12      	ldr	r5, [pc, #72]	; (3f0 <configureLink+0x70>)
     3a6:	882d      	ldrh	r5, [r5, #0]
     3a8:	9501      	str	r5, [sp, #4]
     3aa:	08e4      	lsrs	r4, r4, #3
     3ac:	b2e4      	uxtb	r4, r4
     3ae:	9400      	str	r4, [sp, #0]
     3b0:	4c10      	ldr	r4, [pc, #64]	; (3f4 <configureLink+0x74>)
     3b2:	47a0      	blx	r4
	
	// Setup sleep and wakeup cycle
	sparkSleepSetup(linkSleepMode, linkPacketRate, 100); // sleep depth, packets/s, framelength in us
     3b4:	4b10      	ldr	r3, [pc, #64]	; (3f8 <configureLink+0x78>)
     3b6:	8819      	ldrh	r1, [r3, #0]
     3b8:	4b10      	ldr	r3, [pc, #64]	; (3fc <configureLink+0x7c>)
     3ba:	7818      	ldrb	r0, [r3, #0]
     3bc:	2264      	movs	r2, #100	; 0x64
     3be:	4b10      	ldr	r3, [pc, #64]	; (400 <configureLink+0x80>)
     3c0:	4798      	blx	r3
	
	// Link Mode
	sparkSetBidirectional(linkBidirectional, linkMaster);  
     3c2:	4b10      	ldr	r3, [pc, #64]	; (404 <configureLink+0x84>)
     3c4:	7819      	ldrb	r1, [r3, #0]
     3c6:	4b10      	ldr	r3, [pc, #64]	; (408 <configureLink+0x88>)
     3c8:	7818      	ldrb	r0, [r3, #0]
     3ca:	4b10      	ldr	r3, [pc, #64]	; (40c <configureLink+0x8c>)
     3cc:	4798      	blx	r3
	
	// TX spectrum
	sparkSpectralSetup(linkTXMask);
     3ce:	4810      	ldr	r0, [pc, #64]	; (410 <configureLink+0x90>)
     3d0:	4b10      	ldr	r3, [pc, #64]	; (414 <configureLink+0x94>)
     3d2:	4798      	blx	r3
}
     3d4:	b005      	add	sp, #20
     3d6:	bd30      	pop	{r4, r5, pc}
     3d8:	20000498 	.word	0x20000498
     3dc:	200005b4 	.word	0x200005b4
     3e0:	2000048a 	.word	0x2000048a
     3e4:	200002d0 	.word	0x200002d0
     3e8:	200005b0 	.word	0x200005b0
     3ec:	20000301 	.word	0x20000301
     3f0:	2000031c 	.word	0x2000031c
     3f4:	00003df1 	.word	0x00003df1
     3f8:	200005b6 	.word	0x200005b6
     3fc:	200002e9 	.word	0x200002e9
     400:	00003c69 	.word	0x00003c69
     404:	20000488 	.word	0x20000488
     408:	200005b2 	.word	0x200005b2
     40c:	00004585 	.word	0x00004585
     410:	20000364 	.word	0x20000364
     414:	00003e99 	.word	0x00003e99

00000418 <resetStatistics>:
unsigned char statLastNSSI;
unsigned int  statLinkLost;
unsigned int  statException;

void resetStatistics()
{
     418:	b510      	push	{r4, lr}
  statSendPackets = 0;
     41a:	2300      	movs	r3, #0
     41c:	4a0e      	ldr	r2, [pc, #56]	; (458 <resetStatistics+0x40>)
     41e:	6013      	str	r3, [r2, #0]
  statReceivedPackets = 0;
     420:	4a0e      	ldr	r2, [pc, #56]	; (45c <resetStatistics+0x44>)
     422:	6013      	str	r3, [r2, #0]
  statMissingPackets = 0;
     424:	4a0e      	ldr	r2, [pc, #56]	; (460 <resetStatistics+0x48>)
     426:	6013      	str	r3, [r2, #0]
  statNumErrors = 0;
     428:	4a0e      	ldr	r2, [pc, #56]	; (464 <resetStatistics+0x4c>)
     42a:	6013      	str	r3, [r2, #0]
  for(unsigned char i=0;i<31;i++)
     42c:	e005      	b.n	43a <resetStatistics+0x22>
    statBERdist[i] = 0;
     42e:	0099      	lsls	r1, r3, #2
     430:	2000      	movs	r0, #0
     432:	4a0d      	ldr	r2, [pc, #52]	; (468 <resetStatistics+0x50>)
     434:	5088      	str	r0, [r1, r2]
  for(unsigned char i=0;i<31;i++)
     436:	3301      	adds	r3, #1
     438:	b2db      	uxtb	r3, r3
     43a:	2b1e      	cmp	r3, #30
     43c:	d9f7      	bls.n	42e <resetStatistics+0x16>
  statLastRSSI = 0;
     43e:	2300      	movs	r3, #0
     440:	4a0a      	ldr	r2, [pc, #40]	; (46c <resetStatistics+0x54>)
     442:	7013      	strb	r3, [r2, #0]
  statLastNSSI = 0;
     444:	4a0a      	ldr	r2, [pc, #40]	; (470 <resetStatistics+0x58>)
     446:	7013      	strb	r3, [r2, #0]
  statLinkLost = 0;
     448:	4a0a      	ldr	r2, [pc, #40]	; (474 <resetStatistics+0x5c>)
     44a:	6013      	str	r3, [r2, #0]
  statException = 0;
     44c:	4a0a      	ldr	r2, [pc, #40]	; (478 <resetStatistics+0x60>)
     44e:	6013      	str	r3, [r2, #0]
  
  audioResetStatistics();
     450:	4b0a      	ldr	r3, [pc, #40]	; (47c <resetStatistics+0x64>)
     452:	4798      	blx	r3
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	20000378 	.word	0x20000378
     45c:	20000494 	.word	0x20000494
     460:	20000320 	.word	0x20000320
     464:	20000380 	.word	0x20000380
     468:	2000040c 	.word	0x2000040c
     46c:	20000388 	.word	0x20000388
     470:	2000048c 	.word	0x2000048c
     474:	20000384 	.word	0x20000384
     478:	20000374 	.word	0x20000374
     47c:	0000222d 	.word	0x0000222d

00000480 <printStatistics>:

void printStatistics()
{   
     480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     482:	46ce      	mov	lr, r9
     484:	4647      	mov	r7, r8
     486:	b580      	push	{r7, lr}
  // Tell mode
  if(sparkIsBidirectional())
     488:	4bb6      	ldr	r3, [pc, #728]	; (764 <printStatistics+0x2e4>)
     48a:	4798      	blx	r3
     48c:	2800      	cmp	r0, #0
     48e:	d100      	bne.n	492 <printStatistics+0x12>
     490:	e0a5      	b.n	5de <printStatistics+0x15e>
  {
	  if(sparkIsMaster())
     492:	4bb5      	ldr	r3, [pc, #724]	; (768 <printStatistics+0x2e8>)
     494:	4798      	blx	r3
     496:	2800      	cmp	r0, #0
     498:	d100      	bne.n	49c <printStatistics+0x1c>
     49a:	e094      	b.n	5c6 <printStatistics+0x146>
		usbPrintf("Bidirectional Master\n");
     49c:	48b3      	ldr	r0, [pc, #716]	; (76c <printStatistics+0x2ec>)
     49e:	4bb4      	ldr	r3, [pc, #720]	; (770 <printStatistics+0x2f0>)
     4a0:	4798      	blx	r3
	  }
	  else
		usbPrintf("TX Mode\n");
  }
    
  usbPrintf("statException = %d\n", statException);
     4a2:	4bb4      	ldr	r3, [pc, #720]	; (774 <printStatistics+0x2f4>)
     4a4:	6819      	ldr	r1, [r3, #0]
     4a6:	48b4      	ldr	r0, [pc, #720]	; (778 <printStatistics+0x2f8>)
     4a8:	4cb1      	ldr	r4, [pc, #708]	; (770 <printStatistics+0x2f0>)
     4aa:	47a0      	blx	r4
  usbPrintf("sparkLastInt = %d\n", sparkLastInt);
     4ac:	4bb3      	ldr	r3, [pc, #716]	; (77c <printStatistics+0x2fc>)
     4ae:	7819      	ldrb	r1, [r3, #0]
     4b0:	48b3      	ldr	r0, [pc, #716]	; (780 <printStatistics+0x300>)
     4b2:	47a0      	blx	r4
  usbPrintf("statLinkLost = %d\n", statLinkLost);
     4b4:	4bb3      	ldr	r3, [pc, #716]	; (784 <printStatistics+0x304>)
     4b6:	6819      	ldr	r1, [r3, #0]
     4b8:	48b3      	ldr	r0, [pc, #716]	; (788 <printStatistics+0x308>)
     4ba:	47a0      	blx	r4
  usbPrintf("statSendPackets = %d\n", statSendPackets);
     4bc:	4bb3      	ldr	r3, [pc, #716]	; (78c <printStatistics+0x30c>)
     4be:	6819      	ldr	r1, [r3, #0]
     4c0:	48b3      	ldr	r0, [pc, #716]	; (790 <printStatistics+0x310>)
     4c2:	47a0      	blx	r4
  usbPrintf("statReceivedPackets = %d\n", statReceivedPackets);
     4c4:	4db3      	ldr	r5, [pc, #716]	; (794 <printStatistics+0x314>)
     4c6:	6829      	ldr	r1, [r5, #0]
     4c8:	48b3      	ldr	r0, [pc, #716]	; (798 <printStatistics+0x318>)
     4ca:	47a0      	blx	r4
  usbPrintf("statMissingPackets = %d\n", statMissingPackets);
     4cc:	4eb3      	ldr	r6, [pc, #716]	; (79c <printStatistics+0x31c>)
     4ce:	6831      	ldr	r1, [r6, #0]
     4d0:	48b3      	ldr	r0, [pc, #716]	; (7a0 <printStatistics+0x320>)
     4d2:	47a0      	blx	r4
  usbPrintf("statNumErrors = %d\n", statNumErrors);
     4d4:	4fb3      	ldr	r7, [pc, #716]	; (7a4 <printStatistics+0x324>)
     4d6:	6839      	ldr	r1, [r7, #0]
     4d8:	48b3      	ldr	r0, [pc, #716]	; (7a8 <printStatistics+0x328>)
     4da:	47a0      	blx	r4
  usbPrintf("=> PER = 1 in %d\n", (statReceivedPackets+statMissingPackets)/statMissingPackets);
     4dc:	6831      	ldr	r1, [r6, #0]
     4de:	682b      	ldr	r3, [r5, #0]
     4e0:	18c8      	adds	r0, r1, r3
     4e2:	4eb2      	ldr	r6, [pc, #712]	; (7ac <printStatistics+0x32c>)
     4e4:	47b0      	blx	r6
     4e6:	0001      	movs	r1, r0
     4e8:	48b1      	ldr	r0, [pc, #708]	; (7b0 <printStatistics+0x330>)
     4ea:	47a0      	blx	r4
  usbPrintf("=> BER = 1 in %d\n",(statReceivedPackets*linkPacketSize)/statNumErrors);
     4ec:	4bb1      	ldr	r3, [pc, #708]	; (7b4 <printStatistics+0x334>)
     4ee:	8818      	ldrh	r0, [r3, #0]
     4f0:	682b      	ldr	r3, [r5, #0]
     4f2:	4358      	muls	r0, r3
     4f4:	6839      	ldr	r1, [r7, #0]
     4f6:	47b0      	blx	r6
     4f8:	0001      	movs	r1, r0
     4fa:	48af      	ldr	r0, [pc, #700]	; (7b8 <printStatistics+0x338>)
     4fc:	47a0      	blx	r4
  
  usbPrintf("0 errors: %d packets (%d%%)\n", statBERdist[0], (statBERdist[0]*100)/statReceivedPackets);
     4fe:	4baf      	ldr	r3, [pc, #700]	; (7bc <printStatistics+0x33c>)
     500:	4698      	mov	r8, r3
     502:	681b      	ldr	r3, [r3, #0]
     504:	4699      	mov	r9, r3
     506:	2764      	movs	r7, #100	; 0x64
     508:	0018      	movs	r0, r3
     50a:	4378      	muls	r0, r7
     50c:	6829      	ldr	r1, [r5, #0]
     50e:	47b0      	blx	r6
     510:	0002      	movs	r2, r0
     512:	4649      	mov	r1, r9
     514:	48aa      	ldr	r0, [pc, #680]	; (7c0 <printStatistics+0x340>)
     516:	47a0      	blx	r4
  usbPrintf("1 errors: %d packets (%d%%)\n", statBERdist[1], (statBERdist[1]*100)/statReceivedPackets);
     518:	4643      	mov	r3, r8
     51a:	685b      	ldr	r3, [r3, #4]
     51c:	4699      	mov	r9, r3
     51e:	0018      	movs	r0, r3
     520:	4378      	muls	r0, r7
     522:	6829      	ldr	r1, [r5, #0]
     524:	47b0      	blx	r6
     526:	0002      	movs	r2, r0
     528:	4649      	mov	r1, r9
     52a:	48a6      	ldr	r0, [pc, #664]	; (7c4 <printStatistics+0x344>)
     52c:	47a0      	blx	r4
  usbPrintf("2 errors: %d packets (%d%%)\n", statBERdist[2], (statBERdist[2]*100)/statReceivedPackets);
     52e:	4643      	mov	r3, r8
     530:	689b      	ldr	r3, [r3, #8]
     532:	4699      	mov	r9, r3
     534:	0018      	movs	r0, r3
     536:	4378      	muls	r0, r7
     538:	6829      	ldr	r1, [r5, #0]
     53a:	47b0      	blx	r6
     53c:	0002      	movs	r2, r0
     53e:	4649      	mov	r1, r9
     540:	48a1      	ldr	r0, [pc, #644]	; (7c8 <printStatistics+0x348>)
     542:	47a0      	blx	r4
  usbPrintf("3-4 errors: %d packets (%d%%)\n", statBERdist[3], (statBERdist[3]*100)/statReceivedPackets);
     544:	4643      	mov	r3, r8
     546:	68db      	ldr	r3, [r3, #12]
     548:	4699      	mov	r9, r3
     54a:	0018      	movs	r0, r3
     54c:	4378      	muls	r0, r7
     54e:	6829      	ldr	r1, [r5, #0]
     550:	47b0      	blx	r6
     552:	0002      	movs	r2, r0
     554:	4649      	mov	r1, r9
     556:	489d      	ldr	r0, [pc, #628]	; (7cc <printStatistics+0x34c>)
     558:	47a0      	blx	r4
  usbPrintf("5-8 errors: %d packets (%d%%)\n", statBERdist[4], (statBERdist[4]*100)/statReceivedPackets);
     55a:	4643      	mov	r3, r8
     55c:	691b      	ldr	r3, [r3, #16]
     55e:	4699      	mov	r9, r3
     560:	0018      	movs	r0, r3
     562:	4378      	muls	r0, r7
     564:	6829      	ldr	r1, [r5, #0]
     566:	47b0      	blx	r6
     568:	0002      	movs	r2, r0
     56a:	4649      	mov	r1, r9
     56c:	4898      	ldr	r0, [pc, #608]	; (7d0 <printStatistics+0x350>)
     56e:	47a0      	blx	r4
  usbPrintf("9-15 errors: %d packets (%d%%)\n", statBERdist[5], (statBERdist[5]*100)/statReceivedPackets);
     570:	4643      	mov	r3, r8
     572:	695b      	ldr	r3, [r3, #20]
     574:	4699      	mov	r9, r3
     576:	0018      	movs	r0, r3
     578:	4378      	muls	r0, r7
     57a:	6829      	ldr	r1, [r5, #0]
     57c:	47b0      	blx	r6
     57e:	0002      	movs	r2, r0
     580:	4649      	mov	r1, r9
     582:	4894      	ldr	r0, [pc, #592]	; (7d4 <printStatistics+0x354>)
     584:	47a0      	blx	r4
  usbPrintf("16-31 errors: %d packets (%d%%)\n", statBERdist[6], (statBERdist[6]*100)/statReceivedPackets);
     586:	4643      	mov	r3, r8
     588:	699b      	ldr	r3, [r3, #24]
     58a:	4699      	mov	r9, r3
     58c:	0018      	movs	r0, r3
     58e:	4378      	muls	r0, r7
     590:	6829      	ldr	r1, [r5, #0]
     592:	47b0      	blx	r6
     594:	0002      	movs	r2, r0
     596:	4649      	mov	r1, r9
     598:	488f      	ldr	r0, [pc, #572]	; (7d8 <printStatistics+0x358>)
     59a:	47a0      	blx	r4
  usbPrintf(">=32 errors: %d packets (%d%%)\n", statBERdist[7], (statBERdist[7]*100)/statReceivedPackets);
     59c:	4643      	mov	r3, r8
     59e:	69db      	ldr	r3, [r3, #28]
     5a0:	4698      	mov	r8, r3
     5a2:	0018      	movs	r0, r3
     5a4:	4378      	muls	r0, r7
     5a6:	6829      	ldr	r1, [r5, #0]
     5a8:	47b0      	blx	r6
     5aa:	0002      	movs	r2, r0
     5ac:	4641      	mov	r1, r8
     5ae:	488b      	ldr	r0, [pc, #556]	; (7dc <printStatistics+0x35c>)
     5b0:	47a0      	blx	r4
  
  uint16_t p;
  
  p=0;
  std_buf[p] = 'T'; p++;
     5b2:	4b8b      	ldr	r3, [pc, #556]	; (7e0 <printStatistics+0x360>)
     5b4:	2254      	movs	r2, #84	; 0x54
     5b6:	701a      	strb	r2, [r3, #0]
  std_buf[p] = 'X'; p++;
     5b8:	3204      	adds	r2, #4
     5ba:	705a      	strb	r2, [r3, #1]
  std_buf[p] = ' '; p++;
     5bc:	3a38      	subs	r2, #56	; 0x38
     5be:	709a      	strb	r2, [r3, #2]
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     5c0:	2400      	movs	r4, #0
  std_buf[p] = ' '; p++;
     5c2:	2303      	movs	r3, #3
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     5c4:	e021      	b.n	60a <printStatistics+0x18a>
	  else if(sparkIsScanning())
     5c6:	4b87      	ldr	r3, [pc, #540]	; (7e4 <printStatistics+0x364>)
     5c8:	4798      	blx	r3
     5ca:	2800      	cmp	r0, #0
     5cc:	d003      	beq.n	5d6 <printStatistics+0x156>
		usbPrintf("Bidirectional Slave: Scanning\n");
     5ce:	4886      	ldr	r0, [pc, #536]	; (7e8 <printStatistics+0x368>)
     5d0:	4b67      	ldr	r3, [pc, #412]	; (770 <printStatistics+0x2f0>)
     5d2:	4798      	blx	r3
     5d4:	e765      	b.n	4a2 <printStatistics+0x22>
		usbPrintf("Bidirectional Slave: Locked\n");
     5d6:	4885      	ldr	r0, [pc, #532]	; (7ec <printStatistics+0x36c>)
     5d8:	4b65      	ldr	r3, [pc, #404]	; (770 <printStatistics+0x2f0>)
     5da:	4798      	blx	r3
     5dc:	e761      	b.n	4a2 <printStatistics+0x22>
  	  if(sparkGetMode() == SPARK_MODE_RX)
     5de:	4b84      	ldr	r3, [pc, #528]	; (7f0 <printStatistics+0x370>)
     5e0:	4798      	blx	r3
     5e2:	2800      	cmp	r0, #0
     5e4:	d10b      	bne.n	5fe <printStatistics+0x17e>
		if(sparkIsScanning())
     5e6:	4b7f      	ldr	r3, [pc, #508]	; (7e4 <printStatistics+0x364>)
     5e8:	4798      	blx	r3
     5ea:	2800      	cmp	r0, #0
     5ec:	d003      	beq.n	5f6 <printStatistics+0x176>
		  usbPrintf("RX Mode: scanning\n");
     5ee:	4881      	ldr	r0, [pc, #516]	; (7f4 <printStatistics+0x374>)
     5f0:	4b5f      	ldr	r3, [pc, #380]	; (770 <printStatistics+0x2f0>)
     5f2:	4798      	blx	r3
     5f4:	e755      	b.n	4a2 <printStatistics+0x22>
		  usbPrintf("RX Mode: locked\n");
     5f6:	4880      	ldr	r0, [pc, #512]	; (7f8 <printStatistics+0x378>)
     5f8:	4b5d      	ldr	r3, [pc, #372]	; (770 <printStatistics+0x2f0>)
     5fa:	4798      	blx	r3
     5fc:	e751      	b.n	4a2 <printStatistics+0x22>
		usbPrintf("TX Mode\n");
     5fe:	487f      	ldr	r0, [pc, #508]	; (7fc <printStatistics+0x37c>)
     600:	4b5b      	ldr	r3, [pc, #364]	; (770 <printStatistics+0x2f0>)
     602:	4798      	blx	r3
     604:	e74d      	b.n	4a2 <printStatistics+0x22>
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     606:	3401      	adds	r4, #1
     608:	b2e4      	uxtb	r4, r4
     60a:	b2a1      	uxth	r1, r4
     60c:	4a69      	ldr	r2, [pc, #420]	; (7b4 <printStatistics+0x334>)
     60e:	8812      	ldrh	r2, [r2, #0]
     610:	08d2      	lsrs	r2, r2, #3
     612:	4291      	cmp	r1, r2
     614:	d21e      	bcs.n	654 <printStatistics+0x1d4>
  {
	  std_buf[p] = nibble_hex[sparkTXbuffer[i] >> 4]; p++;
     616:	4a7a      	ldr	r2, [pc, #488]	; (800 <printStatistics+0x380>)
     618:	6812      	ldr	r2, [r2, #0]
     61a:	1912      	adds	r2, r2, r4
     61c:	7811      	ldrb	r1, [r2, #0]
     61e:	0909      	lsrs	r1, r1, #4
     620:	4d78      	ldr	r5, [pc, #480]	; (804 <printStatistics+0x384>)
     622:	5c68      	ldrb	r0, [r5, r1]
     624:	496e      	ldr	r1, [pc, #440]	; (7e0 <printStatistics+0x360>)
     626:	54c8      	strb	r0, [r1, r3]
     628:	1c58      	adds	r0, r3, #1
     62a:	b280      	uxth	r0, r0
	  std_buf[p] = nibble_hex[sparkTXbuffer[i] & 0x0F]; p++;
     62c:	7816      	ldrb	r6, [r2, #0]
     62e:	220f      	movs	r2, #15
     630:	4032      	ands	r2, r6
     632:	5caa      	ldrb	r2, [r5, r2]
     634:	540a      	strb	r2, [r1, r0]
     636:	1c9a      	adds	r2, r3, #2
     638:	b292      	uxth	r2, r2
	  std_buf[p] = ' '; p++;
     63a:	2020      	movs	r0, #32
     63c:	5488      	strb	r0, [r1, r2]
     63e:	3303      	adds	r3, #3
     640:	b29b      	uxth	r3, r3
	  
	  if(p > 55)
     642:	2b37      	cmp	r3, #55	; 0x37
     644:	d9df      	bls.n	606 <printStatistics+0x186>
	  {
		 // std_buf[p] = '\n'; p++;
		  std_buf[p] = 0; p++;
     646:	0008      	movs	r0, r1
     648:	2200      	movs	r2, #0
     64a:	54ca      	strb	r2, [r1, r3]
		  usbPrintf(std_buf);
     64c:	4b48      	ldr	r3, [pc, #288]	; (770 <printStatistics+0x2f0>)
     64e:	4798      	blx	r3
		  p = 0;
     650:	2300      	movs	r3, #0
     652:	e7d8      	b.n	606 <printStatistics+0x186>
	  }
  } 
  usbPrintf("\n"); 
     654:	486c      	ldr	r0, [pc, #432]	; (808 <printStatistics+0x388>)
     656:	4b46      	ldr	r3, [pc, #280]	; (770 <printStatistics+0x2f0>)
     658:	4798      	blx	r3
  
  p=0;
  std_buf[p] = 'R'; p++;
     65a:	4b61      	ldr	r3, [pc, #388]	; (7e0 <printStatistics+0x360>)
     65c:	2252      	movs	r2, #82	; 0x52
     65e:	701a      	strb	r2, [r3, #0]
  std_buf[p] = 'X'; p++;
     660:	3206      	adds	r2, #6
     662:	705a      	strb	r2, [r3, #1]
  std_buf[p] = ' '; p++;
     664:	3a38      	subs	r2, #56	; 0x38
     666:	709a      	strb	r2, [r3, #2]
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     668:	2400      	movs	r4, #0
  std_buf[p] = ' '; p++;
     66a:	2303      	movs	r3, #3
  for(unsigned char i=0;i<linkPacketSize/8;i++)
     66c:	e001      	b.n	672 <printStatistics+0x1f2>
     66e:	3401      	adds	r4, #1
     670:	b2e4      	uxtb	r4, r4
     672:	b2a1      	uxth	r1, r4
     674:	4a4f      	ldr	r2, [pc, #316]	; (7b4 <printStatistics+0x334>)
     676:	8812      	ldrh	r2, [r2, #0]
     678:	08d2      	lsrs	r2, r2, #3
     67a:	4291      	cmp	r1, r2
     67c:	d21e      	bcs.n	6bc <printStatistics+0x23c>
  {
	  std_buf[p] = nibble_hex[sparkRXbuffer[i] >> 4]; p++;
     67e:	4a63      	ldr	r2, [pc, #396]	; (80c <printStatistics+0x38c>)
     680:	6812      	ldr	r2, [r2, #0]
     682:	1912      	adds	r2, r2, r4
     684:	7811      	ldrb	r1, [r2, #0]
     686:	0909      	lsrs	r1, r1, #4
     688:	4d5e      	ldr	r5, [pc, #376]	; (804 <printStatistics+0x384>)
     68a:	5c68      	ldrb	r0, [r5, r1]
     68c:	4954      	ldr	r1, [pc, #336]	; (7e0 <printStatistics+0x360>)
     68e:	54c8      	strb	r0, [r1, r3]
     690:	1c58      	adds	r0, r3, #1
     692:	b280      	uxth	r0, r0
	  std_buf[p] = nibble_hex[sparkRXbuffer[i] & 0x0F]; p++;
     694:	7816      	ldrb	r6, [r2, #0]
     696:	220f      	movs	r2, #15
     698:	4032      	ands	r2, r6
     69a:	5caa      	ldrb	r2, [r5, r2]
     69c:	540a      	strb	r2, [r1, r0]
     69e:	1c9a      	adds	r2, r3, #2
     6a0:	b292      	uxth	r2, r2
	  std_buf[p] = ' '; p++;
     6a2:	2020      	movs	r0, #32
     6a4:	5488      	strb	r0, [r1, r2]
     6a6:	3303      	adds	r3, #3
     6a8:	b29b      	uxth	r3, r3
	  
	  if(p > 55)
     6aa:	2b37      	cmp	r3, #55	; 0x37
     6ac:	d9df      	bls.n	66e <printStatistics+0x1ee>
	  {
		  //std_buf[p] = '\n'; p++;
		  std_buf[p] = 0; p++;
     6ae:	0008      	movs	r0, r1
     6b0:	2200      	movs	r2, #0
     6b2:	54ca      	strb	r2, [r1, r3]
		  usbPrintf(std_buf);
     6b4:	4b2e      	ldr	r3, [pc, #184]	; (770 <printStatistics+0x2f0>)
     6b6:	4798      	blx	r3
		  p = 0;
     6b8:	2300      	movs	r3, #0
     6ba:	e7d8      	b.n	66e <printStatistics+0x1ee>
	  }
  }
  usbPrintf("\n");
     6bc:	4852      	ldr	r0, [pc, #328]	; (808 <printStatistics+0x388>)
     6be:	4b2c      	ldr	r3, [pc, #176]	; (770 <printStatistics+0x2f0>)
     6c0:	4798      	blx	r3

    p=0;
    std_buf[p] = 'S'; p++;
     6c2:	4b47      	ldr	r3, [pc, #284]	; (7e0 <printStatistics+0x360>)
     6c4:	2253      	movs	r2, #83	; 0x53
     6c6:	701a      	strb	r2, [r3, #0]
    std_buf[p] = 'X'; p++;
     6c8:	3205      	adds	r2, #5
     6ca:	705a      	strb	r2, [r3, #1]
    std_buf[p] = ' '; p++;
     6cc:	3a38      	subs	r2, #56	; 0x38
     6ce:	709a      	strb	r2, [r3, #2]
    for(unsigned char i=0;i<linkPacketSize/8;i++)
     6d0:	2400      	movs	r4, #0
    std_buf[p] = ' '; p++;
     6d2:	2303      	movs	r3, #3
    for(unsigned char i=0;i<linkPacketSize/8;i++)
     6d4:	e001      	b.n	6da <printStatistics+0x25a>
     6d6:	3401      	adds	r4, #1
     6d8:	b2e4      	uxtb	r4, r4
     6da:	b2a1      	uxth	r1, r4
     6dc:	4a35      	ldr	r2, [pc, #212]	; (7b4 <printStatistics+0x334>)
     6de:	8812      	ldrh	r2, [r2, #0]
     6e0:	08d2      	lsrs	r2, r2, #3
     6e2:	4291      	cmp	r1, r2
     6e4:	d21b      	bcs.n	71e <printStatistics+0x29e>
    {
	    std_buf[p] = nibble_hex[sensorRXbuffer[i] >> 4]; p++;
     6e6:	4a4a      	ldr	r2, [pc, #296]	; (810 <printStatistics+0x390>)
     6e8:	5d16      	ldrb	r6, [r2, r4]
     6ea:	0932      	lsrs	r2, r6, #4
     6ec:	4d45      	ldr	r5, [pc, #276]	; (804 <printStatistics+0x384>)
     6ee:	5caa      	ldrb	r2, [r5, r2]
     6f0:	493b      	ldr	r1, [pc, #236]	; (7e0 <printStatistics+0x360>)
     6f2:	54ca      	strb	r2, [r1, r3]
     6f4:	1c5a      	adds	r2, r3, #1
     6f6:	b292      	uxth	r2, r2
	    std_buf[p] = nibble_hex[sensorRXbuffer[i] & 0x0F]; p++;
     6f8:	200f      	movs	r0, #15
     6fa:	4030      	ands	r0, r6
     6fc:	5c28      	ldrb	r0, [r5, r0]
     6fe:	5488      	strb	r0, [r1, r2]
     700:	1c9a      	adds	r2, r3, #2
     702:	b292      	uxth	r2, r2
	    std_buf[p] = ' '; p++;
     704:	2020      	movs	r0, #32
     706:	5488      	strb	r0, [r1, r2]
     708:	3303      	adds	r3, #3
     70a:	b29b      	uxth	r3, r3
	    
	    if(p > 55)
     70c:	2b37      	cmp	r3, #55	; 0x37
     70e:	d9e2      	bls.n	6d6 <printStatistics+0x256>
	    {
		    //std_buf[p] = '\n'; p++;
		    std_buf[p] = 0; p++;
     710:	0008      	movs	r0, r1
     712:	2200      	movs	r2, #0
     714:	54ca      	strb	r2, [r1, r3]
		    usbPrintf(std_buf);
     716:	4b16      	ldr	r3, [pc, #88]	; (770 <printStatistics+0x2f0>)
     718:	4798      	blx	r3
		    p = 0;
     71a:	2300      	movs	r3, #0
     71c:	e7db      	b.n	6d6 <printStatistics+0x256>
	    }
    }
    usbPrintf("\n");
     71e:	483a      	ldr	r0, [pc, #232]	; (808 <printStatistics+0x388>)
     720:	4c13      	ldr	r4, [pc, #76]	; (770 <printStatistics+0x2f0>)
     722:	47a0      	blx	r4
  usbPrintf("\n");
  for(unsigned char i=0;i<linkPacketSize/8;i++)
  usbPrintf("%02hx ", sparkRXbuffer[i]);
  usbPrintf("\n");*/
  
  usbPrintf("statLastRSSI: %d\n", statLastRSSI);
     724:	4d3b      	ldr	r5, [pc, #236]	; (814 <printStatistics+0x394>)
     726:	7829      	ldrb	r1, [r5, #0]
     728:	483b      	ldr	r0, [pc, #236]	; (818 <printStatistics+0x398>)
     72a:	47a0      	blx	r4
  usbPrintf("statLastNSSI: %d\n", statLastNSSI);
     72c:	4e3b      	ldr	r6, [pc, #236]	; (81c <printStatistics+0x39c>)
     72e:	7831      	ldrb	r1, [r6, #0]
     730:	483b      	ldr	r0, [pc, #236]	; (820 <printStatistics+0x3a0>)
     732:	47a0      	blx	r4
  usbPrintf("statLastRXWaited: %d\n", sparkPacketRXWaited);
     734:	4b3b      	ldr	r3, [pc, #236]	; (824 <printStatistics+0x3a4>)
     736:	8819      	ldrh	r1, [r3, #0]
     738:	483b      	ldr	r0, [pc, #236]	; (828 <printStatistics+0x3a8>)
     73a:	47a0      	blx	r4
  usbPrintf("lastLinkMargin: %d dB\n", (statLastNSSI-statLastRSSI)/2);
     73c:	7831      	ldrb	r1, [r6, #0]
     73e:	782b      	ldrb	r3, [r5, #0]
     740:	1acb      	subs	r3, r1, r3
     742:	0fd9      	lsrs	r1, r3, #31
     744:	18c9      	adds	r1, r1, r3
     746:	1049      	asrs	r1, r1, #1
     748:	4838      	ldr	r0, [pc, #224]	; (82c <printStatistics+0x3ac>)
     74a:	47a0      	blx	r4
  
  if(linkAudio)
     74c:	4b38      	ldr	r3, [pc, #224]	; (830 <printStatistics+0x3b0>)
     74e:	781b      	ldrb	r3, [r3, #0]
     750:	2b00      	cmp	r3, #0
     752:	d103      	bne.n	75c <printStatistics+0x2dc>
	audioPrintStatistics();
}
     754:	bc0c      	pop	{r2, r3}
     756:	4690      	mov	r8, r2
     758:	4699      	mov	r9, r3
     75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	audioPrintStatistics();
     75c:	4b35      	ldr	r3, [pc, #212]	; (834 <printStatistics+0x3b4>)
     75e:	4798      	blx	r3
}
     760:	e7f8      	b.n	754 <printStatistics+0x2d4>
     762:	46c0      	nop			; (mov r8, r8)
     764:	000045c5 	.word	0x000045c5
     768:	000045d1 	.word	0x000045d1
     76c:	00006c98 	.word	0x00006c98
     770:	0000346d 	.word	0x0000346d
     774:	20000374 	.word	0x20000374
     778:	00006d24 	.word	0x00006d24
     77c:	20000c7a 	.word	0x20000c7a
     780:	00006d38 	.word	0x00006d38
     784:	20000384 	.word	0x20000384
     788:	00006d4c 	.word	0x00006d4c
     78c:	20000378 	.word	0x20000378
     790:	00006d60 	.word	0x00006d60
     794:	20000494 	.word	0x20000494
     798:	00006d78 	.word	0x00006d78
     79c:	20000320 	.word	0x20000320
     7a0:	00006d94 	.word	0x00006d94
     7a4:	20000380 	.word	0x20000380
     7a8:	00006db0 	.word	0x00006db0
     7ac:	00005329 	.word	0x00005329
     7b0:	00006dc4 	.word	0x00006dc4
     7b4:	20000498 	.word	0x20000498
     7b8:	00006dd8 	.word	0x00006dd8
     7bc:	2000040c 	.word	0x2000040c
     7c0:	00006dec 	.word	0x00006dec
     7c4:	00006e90 	.word	0x00006e90
     7c8:	00006e0c 	.word	0x00006e0c
     7cc:	00006e2c 	.word	0x00006e2c
     7d0:	00006e4c 	.word	0x00006e4c
     7d4:	00006e6c 	.word	0x00006e6c
     7d8:	00006e8c 	.word	0x00006e8c
     7dc:	00006eb0 	.word	0x00006eb0
     7e0:	200006bc 	.word	0x200006bc
     7e4:	00004579 	.word	0x00004579
     7e8:	00006cb0 	.word	0x00006cb0
     7ec:	00006cd0 	.word	0x00006cd0
     7f0:	000040a1 	.word	0x000040a1
     7f4:	00006cf0 	.word	0x00006cf0
     7f8:	00006d04 	.word	0x00006d04
     7fc:	00006d18 	.word	0x00006d18
     800:	20000c70 	.word	0x20000c70
     804:	00006c40 	.word	0x00006c40
     808:	00007190 	.word	0x00007190
     80c:	20000c68 	.word	0x20000c68
     810:	2000049c 	.word	0x2000049c
     814:	20000388 	.word	0x20000388
     818:	00006ed0 	.word	0x00006ed0
     81c:	2000048c 	.word	0x2000048c
     820:	00006ee4 	.word	0x00006ee4
     824:	20000c62 	.word	0x20000c62
     828:	00006ef8 	.word	0x00006ef8
     82c:	00006f10 	.word	0x00006f10
     830:	200002e8 	.word	0x200002e8
     834:	00002289 	.word	0x00002289

00000838 <publishStats>:
 
void publishStats(void)
{
     838:	b510      	push	{r4, lr}
     83a:	b084      	sub	sp, #16
	usbPrintf("%d %d %d %d %d %d %d\n", statSendPackets, statReceivedPackets, statMissingPackets, statNumErrors, statLastRSSI, statLastNSSI, sparkPacketRXWaited);
     83c:	4b0b      	ldr	r3, [pc, #44]	; (86c <publishStats+0x34>)
     83e:	681b      	ldr	r3, [r3, #0]
     840:	4a0b      	ldr	r2, [pc, #44]	; (870 <publishStats+0x38>)
     842:	6812      	ldr	r2, [r2, #0]
     844:	490b      	ldr	r1, [pc, #44]	; (874 <publishStats+0x3c>)
     846:	6809      	ldr	r1, [r1, #0]
     848:	480b      	ldr	r0, [pc, #44]	; (878 <publishStats+0x40>)
     84a:	8800      	ldrh	r0, [r0, #0]
     84c:	9003      	str	r0, [sp, #12]
     84e:	480b      	ldr	r0, [pc, #44]	; (87c <publishStats+0x44>)
     850:	7800      	ldrb	r0, [r0, #0]
     852:	9002      	str	r0, [sp, #8]
     854:	480a      	ldr	r0, [pc, #40]	; (880 <publishStats+0x48>)
     856:	7800      	ldrb	r0, [r0, #0]
     858:	9001      	str	r0, [sp, #4]
     85a:	480a      	ldr	r0, [pc, #40]	; (884 <publishStats+0x4c>)
     85c:	6800      	ldr	r0, [r0, #0]
     85e:	9000      	str	r0, [sp, #0]
     860:	4809      	ldr	r0, [pc, #36]	; (888 <publishStats+0x50>)
     862:	4c0a      	ldr	r4, [pc, #40]	; (88c <publishStats+0x54>)
     864:	47a0      	blx	r4
}
     866:	b004      	add	sp, #16
     868:	bd10      	pop	{r4, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	20000320 	.word	0x20000320
     870:	20000494 	.word	0x20000494
     874:	20000378 	.word	0x20000378
     878:	20000c62 	.word	0x20000c62
     87c:	2000048c 	.word	0x2000048c
     880:	20000388 	.word	0x20000388
     884:	20000380 	.word	0x20000380
     888:	00006f28 	.word	0x00006f28
     88c:	0000346d 	.word	0x0000346d

00000890 <callbackPacketSend>:
  return errors;
}

// Callbacks activated by Spark driver
void callbackPacketSend(unsigned char numBytes)
{
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	46de      	mov	lr, fp
     894:	4657      	mov	r7, sl
     896:	464e      	mov	r6, r9
     898:	4645      	mov	r5, r8
     89a:	b5e0      	push	{r5, r6, r7, lr}
     89c:	b08d      	sub	sp, #52	; 0x34
     89e:	4680      	mov	r8, r0
  // Fill packet
  if(linkAudio)
     8a0:	4bce      	ldr	r3, [pc, #824]	; (bdc <callbackPacketSend+0x34c>)
     8a2:	781b      	ldrb	r3, [r3, #0]
     8a4:	2b00      	cmp	r3, #0
     8a6:	d113      	bne.n	8d0 <callbackPacketSend+0x40>
  {
	audioFillPacket(numBytes);
  }
  else if(linkSensor)
     8a8:	4bcd      	ldr	r3, [pc, #820]	; (be0 <callbackPacketSend+0x350>)
     8aa:	781b      	ldrb	r3, [r3, #0]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d100      	bne.n	8b2 <callbackPacketSend+0x22>
     8b0:	e182      	b.n	bb8 <callbackPacketSend+0x328>
  {  
	//Encode FEC
	encodeFEC(sensorTXbuffer,sparkTXbuffer,8);
     8b2:	4bcc      	ldr	r3, [pc, #816]	; (be4 <callbackPacketSend+0x354>)
     8b4:	681b      	ldr	r3, [r3, #0]
     8b6:	4699      	mov	r9, r3
     8b8:	4bcb      	ldr	r3, [pc, #812]	; (be8 <callbackPacketSend+0x358>)
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	9301      	str	r3, [sp, #4]
    unsigned char preInterleave[4];
    unsigned char i = 0;
    unsigned char j = 0;
    
    if (pInData==NULL){    
        fecReg = 0; //Initialize CRC
     8be:	2200      	movs	r2, #0
     8c0:	4bca      	ldr	r3, [pc, #808]	; (bec <callbackPacketSend+0x35c>)
     8c2:	801a      	strh	r2, [r3, #0]
    // Loop through the data packet, 2 bytes at a time
    numBytes = numPayload + 4; // Payload + CRC + Trellis Terminator
    numRemBytes = numPayload + 4;
    numRemEnc = numBytes;
    encCRC=0xFFFF;
    for(int i=0; i<numBytes/2;i++)
     8c4:	2600      	movs	r6, #0
    numRemEnc = numBytes;
     8c6:	230c      	movs	r3, #12
     8c8:	469b      	mov	fp, r3
    encCRC=0xFFFF;
     8ca:	4bc9      	ldr	r3, [pc, #804]	; (bf0 <callbackPacketSend+0x360>)
     8cc:	469a      	mov	sl, r3
     8ce:	e08e      	b.n	9ee <callbackPacketSend+0x15e>
	audioFillPacket(numBytes);
     8d0:	4bc8      	ldr	r3, [pc, #800]	; (bf4 <callbackPacketSend+0x364>)
     8d2:	4798      	blx	r3
     8d4:	e165      	b.n	ba2 <callbackPacketSend+0x312>
	    if(numRemEnc <= 2) // Append Trellis Terminator
	    {
		    dataIn[0] = 0x0B;
		    dataIn[1] = 0x0B;
	    }
	    else if(numRemEnc <= 4) // Append CRC
     8d6:	465b      	mov	r3, fp
     8d8:	2b04      	cmp	r3, #4
     8da:	d807      	bhi.n	8ec <callbackPacketSend+0x5c>
	    {
		    dataIn[0] = encCRC >> 8;
     8dc:	4653      	mov	r3, sl
     8de:	0a1b      	lsrs	r3, r3, #8
     8e0:	aa02      	add	r2, sp, #8
     8e2:	7013      	strb	r3, [r2, #0]
		    dataIn[1] = encCRC & 0xFF;
     8e4:	0013      	movs	r3, r2
     8e6:	4652      	mov	r2, sl
     8e8:	705a      	strb	r2, [r3, #1]
     8ea:	e08b      	b.n	a04 <callbackPacketSend+0x174>
	    }
	    else
	    {            // 2 data bytes
		    if(i == 0)
     8ec:	2e00      	cmp	r6, #0
     8ee:	d108      	bne.n	902 <callbackPacketSend+0x72>
		    {
				dataIn[0] = inBuffer[(2*i)+0];
     8f0:	0073      	lsls	r3, r6, #1
     8f2:	464a      	mov	r2, r9
     8f4:	5cd2      	ldrb	r2, [r2, r3]
     8f6:	a902      	add	r1, sp, #8
     8f8:	700a      	strb	r2, [r1, #0]
				dataIn[1] = inBuffer[(2*i)+1];
     8fa:	444b      	add	r3, r9
     8fc:	785b      	ldrb	r3, [r3, #1]
     8fe:	704b      	strb	r3, [r1, #1]
     900:	e080      	b.n	a04 <callbackPacketSend+0x174>
		    }
		    else
		    {
				dataIn[0] = inBuffer[(2*i)+0];
     902:	0073      	lsls	r3, r6, #1
     904:	464a      	mov	r2, r9
     906:	5cd2      	ldrb	r2, [r2, r3]
     908:	a902      	add	r1, sp, #8
     90a:	700a      	strb	r2, [r1, #0]
				dataIn[1] = inBuffer[(2*i)+1];
     90c:	444b      	add	r3, r9
     90e:	785b      	ldrb	r3, [r3, #1]
     910:	704b      	strb	r3, [r1, #1]
     912:	e077      	b.n	a04 <callbackPacketSend+0x174>
		crcReg = (crcReg << 1); crcData <<= 1;
     914:	4652      	mov	r2, sl
     916:	0054      	lsls	r4, r2, #1
     918:	b2a4      	uxth	r4, r4
     91a:	e081      	b.n	a20 <callbackPacketSend+0x190>
		crcReg = (crcReg << 1); crcData <<= 1;
     91c:	0064      	lsls	r4, r4, #1
     91e:	b2a4      	uxth	r4, r4
     920:	e08a      	b.n	a38 <callbackPacketSend+0x1a8>
		crcReg = (crcReg << 1); crcData <<= 1;
     922:	0064      	lsls	r4, r4, #1
     924:	b2a4      	uxth	r4, r4
     926:	e093      	b.n	a50 <callbackPacketSend+0x1c0>
		crcReg = (crcReg << 1); crcData <<= 1;
     928:	0064      	lsls	r4, r4, #1
     92a:	b2a4      	uxth	r4, r4
     92c:	e09c      	b.n	a68 <callbackPacketSend+0x1d8>
		crcReg = (crcReg << 1); crcData <<= 1;
     92e:	0064      	lsls	r4, r4, #1
     930:	b2a4      	uxth	r4, r4
     932:	e0a5      	b.n	a80 <callbackPacketSend+0x1f0>
		crcReg = (crcReg << 1); crcData <<= 1;
     934:	0064      	lsls	r4, r4, #1
     936:	b2a4      	uxth	r4, r4
     938:	e0ae      	b.n	a98 <callbackPacketSend+0x208>
		crcReg = (crcReg << 1); crcData <<= 1;
     93a:	0064      	lsls	r4, r4, #1
     93c:	b2a4      	uxth	r4, r4
     93e:	e0b7      	b.n	ab0 <callbackPacketSend+0x220>
		crcReg = (crcReg << 1); crcData <<= 1;
     940:	0064      	lsls	r4, r4, #1
     942:	b2a4      	uxth	r4, r4
     944:	e0c0      	b.n	ac8 <callbackPacketSend+0x238>
		crcReg = (crcReg << 1); crcData <<= 1;
     946:	0064      	lsls	r4, r4, #1
     948:	b2a4      	uxth	r4, r4
     94a:	e0c9      	b.n	ae0 <callbackPacketSend+0x250>
		crcReg = (crcReg << 1); crcData <<= 1;
     94c:	0064      	lsls	r4, r4, #1
     94e:	b2a4      	uxth	r4, r4
     950:	e0d2      	b.n	af8 <callbackPacketSend+0x268>
		crcReg = (crcReg << 1); crcData <<= 1;
     952:	0064      	lsls	r4, r4, #1
     954:	b2a4      	uxth	r4, r4
     956:	e0db      	b.n	b10 <callbackPacketSend+0x280>
		crcReg = (crcReg << 1); crcData <<= 1;
     958:	0064      	lsls	r4, r4, #1
     95a:	b2a4      	uxth	r4, r4
     95c:	e0e4      	b.n	b28 <callbackPacketSend+0x298>
		crcReg = (crcReg << 1); crcData <<= 1;
     95e:	0064      	lsls	r4, r4, #1
     960:	b2a4      	uxth	r4, r4
     962:	e0ed      	b.n	b40 <callbackPacketSend+0x2b0>
		crcReg = (crcReg << 1); crcData <<= 1;
     964:	0064      	lsls	r4, r4, #1
     966:	b2a4      	uxth	r4, r4
     968:	e0f6      	b.n	b58 <callbackPacketSend+0x2c8>
		crcReg = (crcReg << 1); crcData <<= 1;
     96a:	0064      	lsls	r4, r4, #1
     96c:	b2a4      	uxth	r4, r4
     96e:	e0ff      	b.n	b70 <callbackPacketSend+0x2e0>
		crcReg = (crcReg << 1); crcData <<= 1;
     970:	0064      	lsls	r4, r4, #1
     972:	b2a3      	uxth	r3, r4
     974:	469a      	mov	sl, r3
     976:	e108      	b.n	b8a <callbackPacketSend+0x2fa>
            fecOutput = (fecOutput << 2) | fecEncodeTable[fecReg >> 7];
     978:	0095      	lsls	r5, r2, #2
     97a:	489c      	ldr	r0, [pc, #624]	; (bec <callbackPacketSend+0x35c>)
     97c:	8803      	ldrh	r3, [r0, #0]
     97e:	09da      	lsrs	r2, r3, #7
     980:	0052      	lsls	r2, r2, #1
     982:	af04      	add	r7, sp, #16
     984:	5fd2      	ldrsh	r2, [r2, r7]
     986:	432a      	orrs	r2, r5
     988:	b292      	uxth	r2, r2
            fecReg = (fecReg << 1) & 0x7FF;
     98a:	059b      	lsls	r3, r3, #22
     98c:	0d5b      	lsrs	r3, r3, #21
     98e:	8003      	strh	r3, [r0, #0]
        for (j = 0; j < 8; j++) {
     990:	3101      	adds	r1, #1
     992:	b2c9      	uxtb	r1, r1
     994:	2907      	cmp	r1, #7
     996:	d9ef      	bls.n	978 <callbackPacketSend+0xe8>
        preInterleave[i << 1] = fecOutput >> 8;
     998:	0063      	lsls	r3, r4, #1
     99a:	a903      	add	r1, sp, #12
     99c:	0a10      	lsrs	r0, r2, #8
     99e:	54c8      	strb	r0, [r1, r3]
        preInterleave[(i << 1)+1] = fecOutput & 0xFF;
     9a0:	3301      	adds	r3, #1
     9a2:	54ca      	strb	r2, [r1, r3]
    for(i=0;i<2;i++)
     9a4:	3401      	adds	r4, #1
     9a6:	b2e4      	uxtb	r4, r4
     9a8:	2c01      	cmp	r4, #1
     9aa:	d80b      	bhi.n	9c4 <callbackPacketSend+0x134>
        fecReg = (fecReg & 0x700) | (pInData[i] & 0xFF);
     9ac:	4a8f      	ldr	r2, [pc, #572]	; (bec <callbackPacketSend+0x35c>)
     9ae:	8813      	ldrh	r3, [r2, #0]
     9b0:	21e0      	movs	r1, #224	; 0xe0
     9b2:	00c9      	lsls	r1, r1, #3
     9b4:	400b      	ands	r3, r1
     9b6:	a902      	add	r1, sp, #8
     9b8:	5d09      	ldrb	r1, [r1, r4]
     9ba:	430b      	orrs	r3, r1
     9bc:	8013      	strh	r3, [r2, #0]
        for (j = 0; j < 8; j++) {
     9be:	2100      	movs	r1, #0
        fecOutput = 0;
     9c0:	2200      	movs	r2, #0
     9c2:	e7e7      	b.n	994 <callbackPacketSend+0x104>
    pOutData[0] = preInterleave[0];
     9c4:	ab03      	add	r3, sp, #12
     9c6:	7819      	ldrb	r1, [r3, #0]
    pOutData[1] = preInterleave[1];
     9c8:	785a      	ldrb	r2, [r3, #1]
     9ca:	4694      	mov	ip, r2
    pOutData[2] = preInterleave[2];
     9cc:	7898      	ldrb	r0, [r3, #2]
    pOutData[3] = preInterleave[3];
     9ce:	78da      	ldrb	r2, [r3, #3]
	    // Encode CRC
	    encCRC = calcCRC(dataIn[0],encCRC);
	    encCRC = calcCRC(dataIn[1],encCRC);
	    
	    numEnc = fecEncode(dataEnc, dataIn, numRemEnc);
	    numRemEnc -= numEnc;
     9d0:	465d      	mov	r5, fp
     9d2:	3d02      	subs	r5, #2
     9d4:	b2ab      	uxth	r3, r5
     9d6:	469b      	mov	fp, r3

		outBuffer[(4*i)+0] = dataEnc[0];
     9d8:	00b3      	lsls	r3, r6, #2
     9da:	9c01      	ldr	r4, [sp, #4]
     9dc:	54e1      	strb	r1, [r4, r3]
		outBuffer[(4*i)+1] = dataEnc[1];
     9de:	1c59      	adds	r1, r3, #1
     9e0:	4665      	mov	r5, ip
     9e2:	5465      	strb	r5, [r4, r1]
		outBuffer[(4*i)+2] = dataEnc[2];
     9e4:	1c99      	adds	r1, r3, #2
     9e6:	5460      	strb	r0, [r4, r1]
		outBuffer[(4*i)+3] = dataEnc[3];
     9e8:	3303      	adds	r3, #3
     9ea:	54e2      	strb	r2, [r4, r3]
    for(int i=0; i<numBytes/2;i++)
     9ec:	3601      	adds	r6, #1
     9ee:	2e05      	cmp	r6, #5
     9f0:	dd00      	ble.n	9f4 <callbackPacketSend+0x164>
     9f2:	e0d2      	b.n	b9a <callbackPacketSend+0x30a>
	    if(numRemEnc <= 2) // Append Trellis Terminator
     9f4:	465b      	mov	r3, fp
     9f6:	2b02      	cmp	r3, #2
     9f8:	d900      	bls.n	9fc <callbackPacketSend+0x16c>
     9fa:	e76c      	b.n	8d6 <callbackPacketSend+0x46>
		    dataIn[0] = 0x0B;
     9fc:	230b      	movs	r3, #11
     9fe:	aa02      	add	r2, sp, #8
     a00:	7013      	strb	r3, [r2, #0]
		    dataIn[1] = 0x0B;
     a02:	7053      	strb	r3, [r2, #1]
	    encCRC = calcCRC(dataIn[0],encCRC);
     a04:	ab02      	add	r3, sp, #8
     a06:	781b      	ldrb	r3, [r3, #0]
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a08:	4652      	mov	r2, sl
     a0a:	1212      	asrs	r2, r2, #8
     a0c:	405a      	eors	r2, r3
     a0e:	2180      	movs	r1, #128	; 0x80
     a10:	4211      	tst	r1, r2
     a12:	d100      	bne.n	a16 <callbackPacketSend+0x186>
     a14:	e77e      	b.n	914 <callbackPacketSend+0x84>
		crcReg = (crcReg << 1) ^ 0x8005;
     a16:	4652      	mov	r2, sl
     a18:	0052      	lsls	r2, r2, #1
     a1a:	4c77      	ldr	r4, [pc, #476]	; (bf8 <callbackPacketSend+0x368>)
     a1c:	4054      	eors	r4, r2
     a1e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a20:	005a      	lsls	r2, r3, #1
     a22:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a24:	1221      	asrs	r1, r4, #8
     a26:	404a      	eors	r2, r1
     a28:	2180      	movs	r1, #128	; 0x80
     a2a:	4211      	tst	r1, r2
     a2c:	d100      	bne.n	a30 <callbackPacketSend+0x1a0>
     a2e:	e775      	b.n	91c <callbackPacketSend+0x8c>
		crcReg = (crcReg << 1) ^ 0x8005;
     a30:	0064      	lsls	r4, r4, #1
     a32:	4a71      	ldr	r2, [pc, #452]	; (bf8 <callbackPacketSend+0x368>)
     a34:	4054      	eors	r4, r2
     a36:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a38:	009a      	lsls	r2, r3, #2
     a3a:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a3c:	1221      	asrs	r1, r4, #8
     a3e:	404a      	eors	r2, r1
     a40:	2180      	movs	r1, #128	; 0x80
     a42:	4211      	tst	r1, r2
     a44:	d100      	bne.n	a48 <callbackPacketSend+0x1b8>
     a46:	e76c      	b.n	922 <callbackPacketSend+0x92>
		crcReg = (crcReg << 1) ^ 0x8005;
     a48:	0064      	lsls	r4, r4, #1
     a4a:	4a6b      	ldr	r2, [pc, #428]	; (bf8 <callbackPacketSend+0x368>)
     a4c:	4054      	eors	r4, r2
     a4e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a50:	00da      	lsls	r2, r3, #3
     a52:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a54:	1221      	asrs	r1, r4, #8
     a56:	404a      	eors	r2, r1
     a58:	2180      	movs	r1, #128	; 0x80
     a5a:	4211      	tst	r1, r2
     a5c:	d100      	bne.n	a60 <callbackPacketSend+0x1d0>
     a5e:	e763      	b.n	928 <callbackPacketSend+0x98>
		crcReg = (crcReg << 1) ^ 0x8005;
     a60:	0064      	lsls	r4, r4, #1
     a62:	4a65      	ldr	r2, [pc, #404]	; (bf8 <callbackPacketSend+0x368>)
     a64:	4054      	eors	r4, r2
     a66:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a68:	011a      	lsls	r2, r3, #4
     a6a:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a6c:	1221      	asrs	r1, r4, #8
     a6e:	404a      	eors	r2, r1
     a70:	2180      	movs	r1, #128	; 0x80
     a72:	4211      	tst	r1, r2
     a74:	d100      	bne.n	a78 <callbackPacketSend+0x1e8>
     a76:	e75a      	b.n	92e <callbackPacketSend+0x9e>
		crcReg = (crcReg << 1) ^ 0x8005;
     a78:	0064      	lsls	r4, r4, #1
     a7a:	4a5f      	ldr	r2, [pc, #380]	; (bf8 <callbackPacketSend+0x368>)
     a7c:	4054      	eors	r4, r2
     a7e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a80:	015a      	lsls	r2, r3, #5
     a82:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a84:	1221      	asrs	r1, r4, #8
     a86:	404a      	eors	r2, r1
     a88:	2180      	movs	r1, #128	; 0x80
     a8a:	4211      	tst	r1, r2
     a8c:	d100      	bne.n	a90 <callbackPacketSend+0x200>
     a8e:	e751      	b.n	934 <callbackPacketSend+0xa4>
		crcReg = (crcReg << 1) ^ 0x8005;
     a90:	0064      	lsls	r4, r4, #1
     a92:	4a59      	ldr	r2, [pc, #356]	; (bf8 <callbackPacketSend+0x368>)
     a94:	4054      	eors	r4, r2
     a96:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     a98:	019a      	lsls	r2, r3, #6
     a9a:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     a9c:	1221      	asrs	r1, r4, #8
     a9e:	404a      	eors	r2, r1
     aa0:	2180      	movs	r1, #128	; 0x80
     aa2:	4211      	tst	r1, r2
     aa4:	d100      	bne.n	aa8 <callbackPacketSend+0x218>
     aa6:	e748      	b.n	93a <callbackPacketSend+0xaa>
		crcReg = (crcReg << 1) ^ 0x8005;
     aa8:	0064      	lsls	r4, r4, #1
     aaa:	4a53      	ldr	r2, [pc, #332]	; (bf8 <callbackPacketSend+0x368>)
     aac:	4054      	eors	r4, r2
     aae:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     ab0:	01db      	lsls	r3, r3, #7
     ab2:	b2db      	uxtb	r3, r3
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     ab4:	1222      	asrs	r2, r4, #8
     ab6:	4053      	eors	r3, r2
     ab8:	2280      	movs	r2, #128	; 0x80
     aba:	421a      	tst	r2, r3
     abc:	d100      	bne.n	ac0 <callbackPacketSend+0x230>
     abe:	e73f      	b.n	940 <callbackPacketSend+0xb0>
		crcReg = (crcReg << 1) ^ 0x8005;
     ac0:	0064      	lsls	r4, r4, #1
     ac2:	4b4d      	ldr	r3, [pc, #308]	; (bf8 <callbackPacketSend+0x368>)
     ac4:	405c      	eors	r4, r3
     ac6:	b2a4      	uxth	r4, r4
	    encCRC = calcCRC(dataIn[1],encCRC);
     ac8:	ab02      	add	r3, sp, #8
     aca:	785b      	ldrb	r3, [r3, #1]
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     acc:	1222      	asrs	r2, r4, #8
     ace:	405a      	eors	r2, r3
     ad0:	2180      	movs	r1, #128	; 0x80
     ad2:	4211      	tst	r1, r2
     ad4:	d100      	bne.n	ad8 <callbackPacketSend+0x248>
     ad6:	e736      	b.n	946 <callbackPacketSend+0xb6>
		crcReg = (crcReg << 1) ^ 0x8005;
     ad8:	0064      	lsls	r4, r4, #1
     ada:	4a47      	ldr	r2, [pc, #284]	; (bf8 <callbackPacketSend+0x368>)
     adc:	4054      	eors	r4, r2
     ade:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     ae0:	005a      	lsls	r2, r3, #1
     ae2:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     ae4:	1221      	asrs	r1, r4, #8
     ae6:	404a      	eors	r2, r1
     ae8:	2180      	movs	r1, #128	; 0x80
     aea:	4211      	tst	r1, r2
     aec:	d100      	bne.n	af0 <callbackPacketSend+0x260>
     aee:	e72d      	b.n	94c <callbackPacketSend+0xbc>
		crcReg = (crcReg << 1) ^ 0x8005;
     af0:	0064      	lsls	r4, r4, #1
     af2:	4a41      	ldr	r2, [pc, #260]	; (bf8 <callbackPacketSend+0x368>)
     af4:	4054      	eors	r4, r2
     af6:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     af8:	009a      	lsls	r2, r3, #2
     afa:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     afc:	1221      	asrs	r1, r4, #8
     afe:	404a      	eors	r2, r1
     b00:	2180      	movs	r1, #128	; 0x80
     b02:	4211      	tst	r1, r2
     b04:	d100      	bne.n	b08 <callbackPacketSend+0x278>
     b06:	e724      	b.n	952 <callbackPacketSend+0xc2>
		crcReg = (crcReg << 1) ^ 0x8005;
     b08:	0064      	lsls	r4, r4, #1
     b0a:	4a3b      	ldr	r2, [pc, #236]	; (bf8 <callbackPacketSend+0x368>)
     b0c:	4054      	eors	r4, r2
     b0e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     b10:	00da      	lsls	r2, r3, #3
     b12:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     b14:	1221      	asrs	r1, r4, #8
     b16:	404a      	eors	r2, r1
     b18:	2180      	movs	r1, #128	; 0x80
     b1a:	4211      	tst	r1, r2
     b1c:	d100      	bne.n	b20 <callbackPacketSend+0x290>
     b1e:	e71b      	b.n	958 <callbackPacketSend+0xc8>
		crcReg = (crcReg << 1) ^ 0x8005;
     b20:	0064      	lsls	r4, r4, #1
     b22:	4a35      	ldr	r2, [pc, #212]	; (bf8 <callbackPacketSend+0x368>)
     b24:	4054      	eors	r4, r2
     b26:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     b28:	011a      	lsls	r2, r3, #4
     b2a:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     b2c:	1221      	asrs	r1, r4, #8
     b2e:	404a      	eors	r2, r1
     b30:	2180      	movs	r1, #128	; 0x80
     b32:	4211      	tst	r1, r2
     b34:	d100      	bne.n	b38 <callbackPacketSend+0x2a8>
     b36:	e712      	b.n	95e <callbackPacketSend+0xce>
		crcReg = (crcReg << 1) ^ 0x8005;
     b38:	0064      	lsls	r4, r4, #1
     b3a:	4a2f      	ldr	r2, [pc, #188]	; (bf8 <callbackPacketSend+0x368>)
     b3c:	4054      	eors	r4, r2
     b3e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     b40:	015a      	lsls	r2, r3, #5
     b42:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     b44:	1221      	asrs	r1, r4, #8
     b46:	404a      	eors	r2, r1
     b48:	2180      	movs	r1, #128	; 0x80
     b4a:	4211      	tst	r1, r2
     b4c:	d100      	bne.n	b50 <callbackPacketSend+0x2c0>
     b4e:	e709      	b.n	964 <callbackPacketSend+0xd4>
		crcReg = (crcReg << 1) ^ 0x8005;
     b50:	0064      	lsls	r4, r4, #1
     b52:	4a29      	ldr	r2, [pc, #164]	; (bf8 <callbackPacketSend+0x368>)
     b54:	4054      	eors	r4, r2
     b56:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     b58:	019a      	lsls	r2, r3, #6
     b5a:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     b5c:	1221      	asrs	r1, r4, #8
     b5e:	404a      	eors	r2, r1
     b60:	2180      	movs	r1, #128	; 0x80
     b62:	4211      	tst	r1, r2
     b64:	d100      	bne.n	b68 <callbackPacketSend+0x2d8>
     b66:	e700      	b.n	96a <callbackPacketSend+0xda>
		crcReg = (crcReg << 1) ^ 0x8005;
     b68:	0064      	lsls	r4, r4, #1
     b6a:	4a23      	ldr	r2, [pc, #140]	; (bf8 <callbackPacketSend+0x368>)
     b6c:	4054      	eors	r4, r2
     b6e:	b2a4      	uxth	r4, r4
		crcReg = (crcReg << 1); crcData <<= 1;
     b70:	01db      	lsls	r3, r3, #7
     b72:	b2db      	uxtb	r3, r3
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     b74:	1222      	asrs	r2, r4, #8
     b76:	4053      	eors	r3, r2
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	421a      	tst	r2, r3
     b7c:	d100      	bne.n	b80 <callbackPacketSend+0x2f0>
     b7e:	e6f7      	b.n	970 <callbackPacketSend+0xe0>
		crcReg = (crcReg << 1) ^ 0x8005;
     b80:	0064      	lsls	r4, r4, #1
     b82:	4b1d      	ldr	r3, [pc, #116]	; (bf8 <callbackPacketSend+0x368>)
     b84:	405c      	eors	r4, r3
     b86:	b2a3      	uxth	r3, r4
     b88:	469a      	mov	sl, r3
    unsigned short fecEncodeTable[] = {0, 3, 1, 2, 3, 0, 2, 1, 3, 0, 2, 1, 0, 3, 1, 2};
     b8a:	2220      	movs	r2, #32
     b8c:	491b      	ldr	r1, [pc, #108]	; (bfc <callbackPacketSend+0x36c>)
     b8e:	3110      	adds	r1, #16
     b90:	a804      	add	r0, sp, #16
     b92:	4b1b      	ldr	r3, [pc, #108]	; (c00 <callbackPacketSend+0x370>)
     b94:	4798      	blx	r3
     b96:	2400      	movs	r4, #0
     b98:	e706      	b.n	9a8 <callbackPacketSend+0x118>
	//Send TX data
	sparkPushTX(0, numBytes);
     b9a:	4641      	mov	r1, r8
     b9c:	2000      	movs	r0, #0
     b9e:	4b19      	ldr	r3, [pc, #100]	; (c04 <callbackPacketSend+0x374>)
     ba0:	4798      	blx	r3
    for(unsigned char i=0;i<numBytes;i++)
		sparkTXbuffer[i] = i;// Dummy data
	
	sparkPushTX(0, numBytes);
  }
  statSendPackets++;
     ba2:	4a19      	ldr	r2, [pc, #100]	; (c08 <callbackPacketSend+0x378>)
     ba4:	6813      	ldr	r3, [r2, #0]
     ba6:	3301      	adds	r3, #1
     ba8:	6013      	str	r3, [r2, #0]
}
     baa:	b00d      	add	sp, #52	; 0x34
     bac:	bc3c      	pop	{r2, r3, r4, r5}
     bae:	4690      	mov	r8, r2
     bb0:	4699      	mov	r9, r3
     bb2:	46a2      	mov	sl, r4
     bb4:	46ab      	mov	fp, r5
     bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(!linkRandom)
     bb8:	4b14      	ldr	r3, [pc, #80]	; (c0c <callbackPacketSend+0x37c>)
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d005      	beq.n	bcc <callbackPacketSend+0x33c>
     bc0:	e7ef      	b.n	ba2 <callbackPacketSend+0x312>
		sparkTXbuffer[i] = i;// Dummy data
     bc2:	4a09      	ldr	r2, [pc, #36]	; (be8 <callbackPacketSend+0x358>)
     bc4:	6812      	ldr	r2, [r2, #0]
     bc6:	54d3      	strb	r3, [r2, r3]
    for(unsigned char i=0;i<numBytes;i++)
     bc8:	3301      	adds	r3, #1
     bca:	b2db      	uxtb	r3, r3
     bcc:	4543      	cmp	r3, r8
     bce:	d3f8      	bcc.n	bc2 <callbackPacketSend+0x332>
	sparkPushTX(0, numBytes);
     bd0:	4641      	mov	r1, r8
     bd2:	2000      	movs	r0, #0
     bd4:	4b0b      	ldr	r3, [pc, #44]	; (c04 <callbackPacketSend+0x374>)
     bd6:	4798      	blx	r3
     bd8:	e7e3      	b.n	ba2 <callbackPacketSend+0x312>
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	200002e8 	.word	0x200002e8
     be0:	2000048d 	.word	0x2000048d
     be4:	20000370 	.word	0x20000370
     be8:	20000c70 	.word	0x20000c70
     bec:	20000234 	.word	0x20000234
     bf0:	0000ffff 	.word	0x0000ffff
     bf4:	00002699 	.word	0x00002699
     bf8:	ffff8005 	.word	0xffff8005
     bfc:	00006c40 	.word	0x00006c40
     c00:	00005685 	.word	0x00005685
     c04:	00003ecd 	.word	0x00003ecd
     c08:	20000378 	.word	0x20000378
     c0c:	20000301 	.word	0x20000301

00000c10 <callbackPacketReceived>:

bool callbackPacketReceived(unsigned char numBytes) // Return true if packet was succesfully received
{
     c10:	b5f0      	push	{r4, r5, r6, r7, lr}
     c12:	46de      	mov	lr, fp
     c14:	4657      	mov	r7, sl
     c16:	464e      	mov	r6, r9
     c18:	4645      	mov	r5, r8
     c1a:	b5e0      	push	{r5, r6, r7, lr}
     c1c:	b093      	sub	sp, #76	; 0x4c
     c1e:	0004      	movs	r4, r0
  unsigned char errors = 0;
  uint8_t b;
  bool reception = false; 
 
  
  if(linkAudio)
     c20:	4bb4      	ldr	r3, [pc, #720]	; (ef4 <callbackPacketReceived+0x2e4>)
     c22:	781b      	ldrb	r3, [r3, #0]
     c24:	930f      	str	r3, [sp, #60]	; 0x3c
     c26:	2b00      	cmp	r3, #0
     c28:	d114      	bne.n	c54 <callbackPacketReceived+0x44>
  {
	  reception = audioProcessPacket(numBytes);
	  errors = 0;
  }
  else if(linkSensor)
     c2a:	4bb3      	ldr	r3, [pc, #716]	; (ef8 <callbackPacketReceived+0x2e8>)
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	930d      	str	r3, [sp, #52]	; 0x34
     c30:	2b00      	cmp	r3, #0
     c32:	d100      	bne.n	c36 <callbackPacketReceived+0x26>
     c34:	e3c0      	b.n	13b8 <callbackPacketReceived+0x7a8>
  {
		//Get RX data
		sparkPullRX(0, numBytes);
     c36:	0001      	movs	r1, r0
     c38:	2000      	movs	r0, #0
     c3a:	4bb0      	ldr	r3, [pc, #704]	; (efc <callbackPacketReceived+0x2ec>)
     c3c:	4798      	blx	r3
		//Decode FEC and Check CRC, Send previous sensor values if CRC check failed
		if(decodeFEC(sparkRXbuffer,sensorRXbuffer,8))
     c3e:	4bb0      	ldr	r3, [pc, #704]	; (f00 <callbackPacketReceived+0x2f0>)
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	930e      	str	r3, [sp, #56]	; 0x38
        memset(nCost, 0, sizeof(nCost));
     c44:	2210      	movs	r2, #16
     c46:	2100      	movs	r1, #0
     c48:	48ae      	ldr	r0, [pc, #696]	; (f04 <callbackPacketReceived+0x2f4>)
     c4a:	3004      	adds	r0, #4
     c4c:	4bae      	ldr	r3, [pc, #696]	; (f08 <callbackPacketReceived+0x2f8>)
     c4e:	4798      	blx	r3
        for (n = 1; n < 8; n++)
     c50:	2101      	movs	r1, #1
     c52:	e014      	b.n	c7e <callbackPacketReceived+0x6e>
	  reception = audioProcessPacket(numBytes);
     c54:	4bad      	ldr	r3, [pc, #692]	; (f0c <callbackPacketReceived+0x2fc>)
     c56:	4798      	blx	r3
     c58:	900d      	str	r0, [sp, #52]	; 0x34
	  errors = 0;
     c5a:	2100      	movs	r1, #0
     c5c:	e3e9      	b.n	1432 <callbackPacketReceived+0x822>
            nCost[0][n] = 100;
     c5e:	4ba9      	ldr	r3, [pc, #676]	; (f04 <callbackPacketReceived+0x2f4>)
     c60:	1858      	adds	r0, r3, r1
     c62:	2264      	movs	r2, #100	; 0x64
     c64:	7102      	strb	r2, [r0, #4]
            nCost[1][n] = 0; // Added
     c66:	2200      	movs	r2, #0
     c68:	7302      	strb	r2, [r0, #12]
            aPath[0][n] = 0; // Added
     c6a:	0088      	lsls	r0, r1, #2
     c6c:	1818      	adds	r0, r3, r0
     c6e:	6142      	str	r2, [r0, #20]
            aPath[1][n] = 0; // Added
     c70:	0008      	movs	r0, r1
     c72:	3008      	adds	r0, #8
     c74:	0080      	lsls	r0, r0, #2
     c76:	181b      	adds	r3, r3, r0
     c78:	615a      	str	r2, [r3, #20]
        for (n = 1; n < 8; n++)
     c7a:	3101      	adds	r1, #1
     c7c:	b2c9      	uxtb	r1, r1
     c7e:	2907      	cmp	r1, #7
     c80:	d9ed      	bls.n	c5e <callbackPacketReceived+0x4e>
        iLastBuf = 0;
     c82:	4ba0      	ldr	r3, [pc, #640]	; (f04 <callbackPacketReceived+0x2f4>)
     c84:	2200      	movs	r2, #0
     c86:	2154      	movs	r1, #84	; 0x54
     c88:	545a      	strb	r2, [r3, r1]
        iCurrBuf = 1;
     c8a:	2001      	movs	r0, #1
     c8c:	3101      	adds	r1, #1
     c8e:	5458      	strb	r0, [r3, r1]
        nPathBits = 0;
     c90:	3101      	adds	r1, #1
     c92:	545a      	strb	r2, [r3, r1]
      fecDecode(NULL, NULL, 0);
      numBytes = numPayload + 4; // Payload + CRC + Trellis Terminator
      numRemBytes = numPayload + 4;
      //numRemDec = numBytes;
      decCRC=0xFFFF;
      for(int i=0; i<numBytes/2;i++)
     c94:	2300      	movs	r3, #0
     c96:	930b      	str	r3, [sp, #44]	; 0x2c
      decCRC=0xFFFF;
     c98:	4b9d      	ldr	r3, [pc, #628]	; (f10 <callbackPacketReceived+0x300>)
     c9a:	930c      	str	r3, [sp, #48]	; 0x30
      numRemBytes = numPayload + 4;
     c9c:	230c      	movs	r3, #12
     c9e:	930a      	str	r3, [sp, #40]	; 0x28
     ca0:	e1b3      	b.n	100a <callbackPacketReceived+0x3fa>
            pInData++; // Update pointer to the next byte of received data
     ca2:	9b07      	ldr	r3, [sp, #28]
     ca4:	3301      	adds	r3, #1
     ca6:	9307      	str	r3, [sp, #28]
            iBit = 6;
     ca8:	2306      	movs	r3, #6
     caa:	9305      	str	r3, [sp, #20]
     cac:	e0c5      	b.n	e3a <callbackPacketReceived+0x22a>
    return (a <= b ? a : b);
     cae:	b2d3      	uxtb	r3, r2
     cb0:	9300      	str	r3, [sp, #0]
                aPath[iCurrBuf][iDestState] = (aPath[iLastBuf][iSrcState0] << 1) | nInputBit;
     cb2:	4a94      	ldr	r2, [pc, #592]	; (f04 <callbackPacketReceived+0x2f4>)
     cb4:	9b02      	ldr	r3, [sp, #8]
     cb6:	00db      	lsls	r3, r3, #3
     cb8:	4453      	add	r3, sl
     cba:	009b      	lsls	r3, r3, #2
     cbc:	18d3      	adds	r3, r2, r3
     cbe:	695b      	ldr	r3, [r3, #20]
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	4648      	mov	r0, r9
     cc4:	4318      	orrs	r0, r3
     cc6:	0003      	movs	r3, r0
     cc8:	00c9      	lsls	r1, r1, #3
     cca:	9801      	ldr	r0, [sp, #4]
     ccc:	4684      	mov	ip, r0
     cce:	4461      	add	r1, ip
     cd0:	0089      	lsls	r1, r1, #2
     cd2:	1851      	adds	r1, r2, r1
     cd4:	614b      	str	r3, [r1, #20]
        for (iDestState = 0; iDestState < 8; iDestState++) {
     cd6:	3401      	adds	r4, #1
     cd8:	b2e4      	uxtb	r4, r4
     cda:	2c07      	cmp	r4, #7
     cdc:	d875      	bhi.n	dca <callbackPacketReceived+0x1ba>
            nInputBit = aTrellisTransitionInput[iDestState];
     cde:	9401      	str	r4, [sp, #4]
     ce0:	488c      	ldr	r0, [pc, #560]	; (f14 <callbackPacketReceived+0x304>)
     ce2:	1902      	adds	r2, r0, r4
     ce4:	2330      	movs	r3, #48	; 0x30
     ce6:	5cd3      	ldrb	r3, [r2, r3]
     ce8:	4699      	mov	r9, r3
            iSrcState0 = aTrellisSourceStateLut[iDestState][0];
     cea:	0063      	lsls	r3, r4, #1
     cec:	18c0      	adds	r0, r0, r3
     cee:	2338      	movs	r3, #56	; 0x38
     cf0:	5cc3      	ldrb	r3, [r0, r3]
     cf2:	469a      	mov	sl, r3
            nCost0 = nCost[iLastBuf][iSrcState0];
     cf4:	4e83      	ldr	r6, [pc, #524]	; (f04 <callbackPacketReceived+0x2f4>)
     cf6:	2354      	movs	r3, #84	; 0x54
     cf8:	5cf3      	ldrb	r3, [r6, r3]
     cfa:	9302      	str	r3, [sp, #8]
     cfc:	00da      	lsls	r2, r3, #3
     cfe:	18b6      	adds	r6, r6, r2
     d00:	4653      	mov	r3, sl
     d02:	18f2      	adds	r2, r6, r3
     d04:	7913      	ldrb	r3, [r2, #4]
     d06:	469c      	mov	ip, r3
            nCost0 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][0]);
     d08:	2248      	movs	r2, #72	; 0x48
     d0a:	5c82      	ldrb	r2, [r0, r2]
     d0c:	465b      	mov	r3, fp
     d0e:	405a      	eors	r2, r3
    a = ((a & 0xAA) >> 1) + (a & 0x55);
     d10:	1057      	asrs	r7, r2, #1
     d12:	2155      	movs	r1, #85	; 0x55
     d14:	400f      	ands	r7, r1
     d16:	400a      	ands	r2, r1
     d18:	18bf      	adds	r7, r7, r2
    a = ((a & 0xCC) >> 2) + (a & 0x33);
     d1a:	10bd      	asrs	r5, r7, #2
     d1c:	2233      	movs	r2, #51	; 0x33
     d1e:	4015      	ands	r5, r2
     d20:	4017      	ands	r7, r2
     d22:	19ed      	adds	r5, r5, r7
    a = ((a & 0xF0) >> 4) + (a & 0x0F);
     d24:	092f      	lsrs	r7, r5, #4
     d26:	b2ff      	uxtb	r7, r7
     d28:	230f      	movs	r3, #15
     d2a:	4698      	mov	r8, r3
     d2c:	401d      	ands	r5, r3
     d2e:	197d      	adds	r5, r7, r5
     d30:	b2ed      	uxtb	r5, r5
            nCost0 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][0]);
     d32:	4465      	add	r5, ip
     d34:	b2ed      	uxtb	r5, r5
            iSrcState1 = aTrellisSourceStateLut[iDestState][1];
     d36:	0007      	movs	r7, r0
     d38:	3739      	adds	r7, #57	; 0x39
     d3a:	783f      	ldrb	r7, [r7, #0]
            nCost1 = nCost[iLastBuf][iSrcState1];
     d3c:	19f6      	adds	r6, r6, r7
     d3e:	7936      	ldrb	r6, [r6, #4]
            nCost1 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][1]);
     d40:	3049      	adds	r0, #73	; 0x49
     d42:	7800      	ldrb	r0, [r0, #0]
     d44:	465b      	mov	r3, fp
     d46:	4058      	eors	r0, r3
    a = ((a & 0xAA) >> 1) + (a & 0x55);
     d48:	1043      	asrs	r3, r0, #1
     d4a:	400b      	ands	r3, r1
     d4c:	469c      	mov	ip, r3
     d4e:	4001      	ands	r1, r0
     d50:	4461      	add	r1, ip
    a = ((a & 0xCC) >> 2) + (a & 0x33);
     d52:	1088      	asrs	r0, r1, #2
     d54:	4010      	ands	r0, r2
     d56:	4011      	ands	r1, r2
     d58:	1840      	adds	r0, r0, r1
    a = ((a & 0xF0) >> 4) + (a & 0x0F);
     d5a:	0901      	lsrs	r1, r0, #4
     d5c:	b2c9      	uxtb	r1, r1
     d5e:	4643      	mov	r3, r8
     d60:	4018      	ands	r0, r3
     d62:	1808      	adds	r0, r1, r0
     d64:	b2c0      	uxtb	r0, r0
            nCost1 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][1]);
     d66:	1836      	adds	r6, r6, r0
     d68:	b2f6      	uxtb	r6, r6
            if (nCost0 <= nCost1) {
     d6a:	42b5      	cmp	r5, r6
     d6c:	d80c      	bhi.n	d88 <callbackPacketReceived+0x178>
                nCost[iCurrBuf][iDestState] = nCost0;
     d6e:	4a65      	ldr	r2, [pc, #404]	; (f04 <callbackPacketReceived+0x2f4>)
     d70:	2155      	movs	r1, #85	; 0x55
     d72:	5c51      	ldrb	r1, [r2, r1]
     d74:	00c8      	lsls	r0, r1, #3
     d76:	1812      	adds	r2, r2, r0
     d78:	1912      	adds	r2, r2, r4
     d7a:	7115      	strb	r5, [r2, #4]
    return (a <= b ? a : b);
     d7c:	1c2a      	adds	r2, r5, #0
     d7e:	9800      	ldr	r0, [sp, #0]
     d80:	4285      	cmp	r5, r0
     d82:	d994      	bls.n	cae <callbackPacketReceived+0x9e>
     d84:	1c02      	adds	r2, r0, #0
     d86:	e792      	b.n	cae <callbackPacketReceived+0x9e>
                nCost[iCurrBuf][iDestState] = nCost1;
     d88:	4a5e      	ldr	r2, [pc, #376]	; (f04 <callbackPacketReceived+0x2f4>)
     d8a:	2155      	movs	r1, #85	; 0x55
     d8c:	5c51      	ldrb	r1, [r2, r1]
     d8e:	00c8      	lsls	r0, r1, #3
     d90:	1812      	adds	r2, r2, r0
     d92:	1912      	adds	r2, r2, r4
     d94:	7116      	strb	r6, [r2, #4]
    return (a <= b ? a : b);
     d96:	1c32      	adds	r2, r6, #0
     d98:	9800      	ldr	r0, [sp, #0]
     d9a:	4286      	cmp	r6, r0
     d9c:	d900      	bls.n	da0 <callbackPacketReceived+0x190>
     d9e:	1c02      	adds	r2, r0, #0
     da0:	b2d3      	uxtb	r3, r2
     da2:	9300      	str	r3, [sp, #0]
                aPath[iCurrBuf][iDestState] = (aPath[iLastBuf][iSrcState1] << 1) | nInputBit;
     da4:	4a57      	ldr	r2, [pc, #348]	; (f04 <callbackPacketReceived+0x2f4>)
     da6:	9b02      	ldr	r3, [sp, #8]
     da8:	00db      	lsls	r3, r3, #3
     daa:	19df      	adds	r7, r3, r7
     dac:	00bf      	lsls	r7, r7, #2
     dae:	19d7      	adds	r7, r2, r7
     db0:	697b      	ldr	r3, [r7, #20]
     db2:	005b      	lsls	r3, r3, #1
     db4:	4648      	mov	r0, r9
     db6:	4318      	orrs	r0, r3
     db8:	0003      	movs	r3, r0
     dba:	00c9      	lsls	r1, r1, #3
     dbc:	9801      	ldr	r0, [sp, #4]
     dbe:	4684      	mov	ip, r0
     dc0:	4461      	add	r1, ip
     dc2:	0089      	lsls	r1, r1, #2
     dc4:	1852      	adds	r2, r2, r1
     dc6:	6153      	str	r3, [r2, #20]
     dc8:	e785      	b.n	cd6 <callbackPacketReceived+0xc6>
        nPathBits++;
     dca:	494e      	ldr	r1, [pc, #312]	; (f04 <callbackPacketReceived+0x2f4>)
     dcc:	2256      	movs	r2, #86	; 0x56
     dce:	5c88      	ldrb	r0, [r1, r2]
     dd0:	1c43      	adds	r3, r0, #1
     dd2:	b2db      	uxtb	r3, r3
     dd4:	548b      	strb	r3, [r1, r2]
        if (nPathBits == 32) {
     dd6:	2b20      	cmp	r3, #32
     dd8:	d035      	beq.n	e46 <callbackPacketReceived+0x236>
        if ((nRemBytes <= 3) && (nPathBits == ((8 * nRemBytes) + 3))) {
     dda:	9906      	ldr	r1, [sp, #24]
     ddc:	2903      	cmp	r1, #3
     dde:	d806      	bhi.n	dee <callbackPacketReceived+0x1de>
     de0:	2356      	movs	r3, #86	; 0x56
     de2:	4a48      	ldr	r2, [pc, #288]	; (f04 <callbackPacketReceived+0x2f4>)
     de4:	5cd2      	ldrb	r2, [r2, r3]
     de6:	00cb      	lsls	r3, r1, #3
     de8:	3303      	adds	r3, #3
     dea:	429a      	cmp	r2, r3
     dec:	d041      	beq.n	e72 <callbackPacketReceived+0x262>
        iLastBuf = (iLastBuf + 1) % 2;
     dee:	4945      	ldr	r1, [pc, #276]	; (f04 <callbackPacketReceived+0x2f4>)
     df0:	2054      	movs	r0, #84	; 0x54
     df2:	5c0b      	ldrb	r3, [r1, r0]
     df4:	3301      	adds	r3, #1
     df6:	0fdc      	lsrs	r4, r3, #31
     df8:	191b      	adds	r3, r3, r4
     dfa:	2201      	movs	r2, #1
     dfc:	4013      	ands	r3, r2
     dfe:	1b1b      	subs	r3, r3, r4
     e00:	540b      	strb	r3, [r1, r0]
        iCurrBuf = (iCurrBuf + 1) % 2;
     e02:	3001      	adds	r0, #1
     e04:	5c0b      	ldrb	r3, [r1, r0]
     e06:	3301      	adds	r3, #1
     e08:	0fdc      	lsrs	r4, r3, #31
     e0a:	191b      	adds	r3, r3, r4
     e0c:	401a      	ands	r2, r3
     e0e:	1b12      	subs	r2, r2, r4
     e10:	540a      	strb	r2, [r1, r0]
    for (nIterations = 16; nIterations > 0; nIterations--)
     e12:	9b04      	ldr	r3, [sp, #16]
     e14:	3b01      	subs	r3, #1
     e16:	b2db      	uxtb	r3, r3
     e18:	9304      	str	r3, [sp, #16]
     e1a:	9b04      	ldr	r3, [sp, #16]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d044      	beq.n	eaa <callbackPacketReceived+0x29a>
        unsigned char symbol = ((*pInData) >> iBit) & 0x03;
     e20:	9b07      	ldr	r3, [sp, #28]
     e22:	781b      	ldrb	r3, [r3, #0]
     e24:	9905      	ldr	r1, [sp, #20]
     e26:	410b      	asrs	r3, r1
     e28:	2203      	movs	r2, #3
     e2a:	4013      	ands	r3, r2
     e2c:	469b      	mov	fp, r3
        if ((iBit -= 2) < 0) {
     e2e:	1e8b      	subs	r3, r1, #2
     e30:	b25b      	sxtb	r3, r3
     e32:	9305      	str	r3, [sp, #20]
     e34:	2b00      	cmp	r3, #0
     e36:	da00      	bge.n	e3a <callbackPacketReceived+0x22a>
     e38:	e733      	b.n	ca2 <callbackPacketReceived+0x92>
        for (iDestState = 0; iDestState < 8; iDestState++) {
     e3a:	2300      	movs	r3, #0
     e3c:	469a      	mov	sl, r3
        nMinCost = 0xFF;
     e3e:	33ff      	adds	r3, #255	; 0xff
     e40:	9300      	str	r3, [sp, #0]
     e42:	4654      	mov	r4, sl
     e44:	e749      	b.n	cda <callbackPacketReceived+0xca>
            *pDecData++ = (aPath[iCurrBuf][0] >> 24) & 0xFF;
     e46:	000a      	movs	r2, r1
     e48:	3335      	adds	r3, #53	; 0x35
     e4a:	5ccb      	ldrb	r3, [r1, r3]
     e4c:	015b      	lsls	r3, r3, #5
     e4e:	18cb      	adds	r3, r1, r3
     e50:	7ddb      	ldrb	r3, [r3, #23]
     e52:	9909      	ldr	r1, [sp, #36]	; 0x24
     e54:	700b      	strb	r3, [r1, #0]
            nOutputBytes++;
     e56:	9b08      	ldr	r3, [sp, #32]
     e58:	3301      	adds	r3, #1
     e5a:	b29b      	uxth	r3, r3
     e5c:	9308      	str	r3, [sp, #32]
            nPathBits -= 8;
     e5e:	3807      	subs	r0, #7
     e60:	2356      	movs	r3, #86	; 0x56
     e62:	54d0      	strb	r0, [r2, r3]
            nRemBytes--;
     e64:	9b06      	ldr	r3, [sp, #24]
     e66:	3b01      	subs	r3, #1
     e68:	b29b      	uxth	r3, r3
     e6a:	9306      	str	r3, [sp, #24]
            *pDecData++ = (aPath[iCurrBuf][0] >> 24) & 0xFF;
     e6c:	1c4b      	adds	r3, r1, #1
     e6e:	9309      	str	r3, [sp, #36]	; 0x24
     e70:	e7b3      	b.n	dda <callbackPacketReceived+0x1ca>
     e72:	9c09      	ldr	r4, [sp, #36]	; 0x24
     e74:	9908      	ldr	r1, [sp, #32]
     e76:	e00d      	b.n	e94 <callbackPacketReceived+0x284>
                *pDecData++ = (aPath[iCurrBuf][0] >> (nPathBits - 8)) & 0xFF; nOutputBytes++;
     e78:	4822      	ldr	r0, [pc, #136]	; (f04 <callbackPacketReceived+0x2f4>)
     e7a:	2255      	movs	r2, #85	; 0x55
     e7c:	5c82      	ldrb	r2, [r0, r2]
     e7e:	0152      	lsls	r2, r2, #5
     e80:	1882      	adds	r2, r0, r2
     e82:	6952      	ldr	r2, [r2, #20]
     e84:	3b08      	subs	r3, #8
     e86:	40da      	lsrs	r2, r3
     e88:	7022      	strb	r2, [r4, #0]
     e8a:	3101      	adds	r1, #1
     e8c:	b289      	uxth	r1, r1
                nPathBits -= 8;
     e8e:	2256      	movs	r2, #86	; 0x56
     e90:	5483      	strb	r3, [r0, r2]
                *pDecData++ = (aPath[iCurrBuf][0] >> (nPathBits - 8)) & 0xFF; nOutputBytes++;
     e92:	3401      	adds	r4, #1
            while (nPathBits >= 8) {
     e94:	2356      	movs	r3, #86	; 0x56
     e96:	4a1b      	ldr	r2, [pc, #108]	; (f04 <callbackPacketReceived+0x2f4>)
     e98:	5cd3      	ldrb	r3, [r2, r3]
     e9a:	2b07      	cmp	r3, #7
     e9c:	d8ec      	bhi.n	e78 <callbackPacketReceived+0x268>
     e9e:	9108      	str	r1, [sp, #32]

		  //outBuffer[(2*i)+0] = dataOut[0];
		  //outBuffer[(2*i)+1] = dataOut[1];

	      
	      for(int j=0;j<numDec;j++)
     ea0:	2100      	movs	r1, #0
     ea2:	9808      	ldr	r0, [sp, #32]
     ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ea8:	e03b      	b.n	f22 <callbackPacketReceived+0x312>
     eaa:	9800      	ldr	r0, [sp, #0]
     eac:	001a      	movs	r2, r3
        for (iState = 0; iState < 8; iState++)
     eae:	2a07      	cmp	r2, #7
     eb0:	d8f6      	bhi.n	ea0 <callbackPacketReceived+0x290>
            nCost[iLastBuf][iState] -= nMinCost;
     eb2:	4b14      	ldr	r3, [pc, #80]	; (f04 <callbackPacketReceived+0x2f4>)
     eb4:	2154      	movs	r1, #84	; 0x54
     eb6:	5c59      	ldrb	r1, [r3, r1]
     eb8:	00c9      	lsls	r1, r1, #3
     eba:	185b      	adds	r3, r3, r1
     ebc:	189b      	adds	r3, r3, r2
     ebe:	7919      	ldrb	r1, [r3, #4]
     ec0:	1a09      	subs	r1, r1, r0
     ec2:	7119      	strb	r1, [r3, #4]
        for (iState = 0; iState < 8; iState++)
     ec4:	3201      	adds	r2, #1
     ec6:	b2d2      	uxtb	r2, r2
     ec8:	e7f1      	b.n	eae <callbackPacketReceived+0x29e>
		crcReg = (crcReg << 1); crcData <<= 1;
     eca:	005b      	lsls	r3, r3, #1
     ecc:	b29b      	uxth	r3, r3
     ece:	e037      	b.n	f40 <callbackPacketReceived+0x330>
		crcReg = (crcReg << 1); crcData <<= 1;
     ed0:	005b      	lsls	r3, r3, #1
     ed2:	b29b      	uxth	r3, r3
     ed4:	e03f      	b.n	f56 <callbackPacketReceived+0x346>
		crcReg = (crcReg << 1); crcData <<= 1;
     ed6:	005b      	lsls	r3, r3, #1
     ed8:	b29b      	uxth	r3, r3
     eda:	e047      	b.n	f6c <callbackPacketReceived+0x35c>
		crcReg = (crcReg << 1); crcData <<= 1;
     edc:	005b      	lsls	r3, r3, #1
     ede:	b29b      	uxth	r3, r3
     ee0:	e04f      	b.n	f82 <callbackPacketReceived+0x372>
		crcReg = (crcReg << 1); crcData <<= 1;
     ee2:	005b      	lsls	r3, r3, #1
     ee4:	b29b      	uxth	r3, r3
     ee6:	e057      	b.n	f98 <callbackPacketReceived+0x388>
		crcReg = (crcReg << 1); crcData <<= 1;
     ee8:	005b      	lsls	r3, r3, #1
     eea:	b29b      	uxth	r3, r3
     eec:	e05f      	b.n	fae <callbackPacketReceived+0x39e>
		crcReg = (crcReg << 1); crcData <<= 1;
     eee:	005b      	lsls	r3, r3, #1
     ef0:	b29b      	uxth	r3, r3
     ef2:	e067      	b.n	fc4 <callbackPacketReceived+0x3b4>
     ef4:	200002e8 	.word	0x200002e8
     ef8:	2000048d 	.word	0x2000048d
     efc:	00003f05 	.word	0x00003f05
     f00:	20000c68 	.word	0x20000c68
     f04:	20000234 	.word	0x20000234
     f08:	00005697 	.word	0x00005697
     f0c:	00002451 	.word	0x00002451
     f10:	0000ffff 	.word	0x0000ffff
     f14:	00006c40 	.word	0x00006c40
		crcReg = (crcReg << 1); crcData <<= 1;
     f18:	005b      	lsls	r3, r3, #1
     f1a:	b29b      	uxth	r3, r3
	      {
		      if(numRemBytes > 2)
		      decCRC = calcCRC(dataOut[j], decCRC);
		      numRemBytes--;
     f1c:	3a01      	subs	r2, #1
     f1e:	b292      	uxth	r2, r2
	      for(int j=0;j<numDec;j++)
     f20:	3101      	adds	r1, #1
     f22:	4281      	cmp	r1, r0
     f24:	da5a      	bge.n	fdc <callbackPacketReceived+0x3cc>
		      if(numRemBytes > 2)
     f26:	2a02      	cmp	r2, #2
     f28:	d9f8      	bls.n	f1c <callbackPacketReceived+0x30c>
		      decCRC = calcCRC(dataOut[j], decCRC);
     f2a:	ac11      	add	r4, sp, #68	; 0x44
     f2c:	5c64      	ldrb	r4, [r4, r1]
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f2e:	121d      	asrs	r5, r3, #8
     f30:	4065      	eors	r5, r4
     f32:	2680      	movs	r6, #128	; 0x80
     f34:	422e      	tst	r6, r5
     f36:	d0c8      	beq.n	eca <callbackPacketReceived+0x2ba>
		crcReg = (crcReg << 1) ^ 0x8005;
     f38:	005b      	lsls	r3, r3, #1
     f3a:	4db7      	ldr	r5, [pc, #732]	; (1218 <callbackPacketReceived+0x608>)
     f3c:	406b      	eors	r3, r5
     f3e:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     f40:	0065      	lsls	r5, r4, #1
     f42:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f44:	121e      	asrs	r6, r3, #8
     f46:	4075      	eors	r5, r6
     f48:	2680      	movs	r6, #128	; 0x80
     f4a:	422e      	tst	r6, r5
     f4c:	d0c0      	beq.n	ed0 <callbackPacketReceived+0x2c0>
		crcReg = (crcReg << 1) ^ 0x8005;
     f4e:	005b      	lsls	r3, r3, #1
     f50:	4db1      	ldr	r5, [pc, #708]	; (1218 <callbackPacketReceived+0x608>)
     f52:	406b      	eors	r3, r5
     f54:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     f56:	00a5      	lsls	r5, r4, #2
     f58:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f5a:	121e      	asrs	r6, r3, #8
     f5c:	4075      	eors	r5, r6
     f5e:	2680      	movs	r6, #128	; 0x80
     f60:	422e      	tst	r6, r5
     f62:	d0b8      	beq.n	ed6 <callbackPacketReceived+0x2c6>
		crcReg = (crcReg << 1) ^ 0x8005;
     f64:	005b      	lsls	r3, r3, #1
     f66:	4dac      	ldr	r5, [pc, #688]	; (1218 <callbackPacketReceived+0x608>)
     f68:	406b      	eors	r3, r5
     f6a:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     f6c:	00e5      	lsls	r5, r4, #3
     f6e:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f70:	121e      	asrs	r6, r3, #8
     f72:	4075      	eors	r5, r6
     f74:	2680      	movs	r6, #128	; 0x80
     f76:	422e      	tst	r6, r5
     f78:	d0b0      	beq.n	edc <callbackPacketReceived+0x2cc>
		crcReg = (crcReg << 1) ^ 0x8005;
     f7a:	005b      	lsls	r3, r3, #1
     f7c:	4da6      	ldr	r5, [pc, #664]	; (1218 <callbackPacketReceived+0x608>)
     f7e:	406b      	eors	r3, r5
     f80:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     f82:	0125      	lsls	r5, r4, #4
     f84:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f86:	121e      	asrs	r6, r3, #8
     f88:	4075      	eors	r5, r6
     f8a:	2680      	movs	r6, #128	; 0x80
     f8c:	422e      	tst	r6, r5
     f8e:	d0a8      	beq.n	ee2 <callbackPacketReceived+0x2d2>
		crcReg = (crcReg << 1) ^ 0x8005;
     f90:	005b      	lsls	r3, r3, #1
     f92:	4da1      	ldr	r5, [pc, #644]	; (1218 <callbackPacketReceived+0x608>)
     f94:	406b      	eors	r3, r5
     f96:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     f98:	0165      	lsls	r5, r4, #5
     f9a:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     f9c:	121e      	asrs	r6, r3, #8
     f9e:	4075      	eors	r5, r6
     fa0:	2680      	movs	r6, #128	; 0x80
     fa2:	422e      	tst	r6, r5
     fa4:	d0a0      	beq.n	ee8 <callbackPacketReceived+0x2d8>
		crcReg = (crcReg << 1) ^ 0x8005;
     fa6:	005b      	lsls	r3, r3, #1
     fa8:	4d9b      	ldr	r5, [pc, #620]	; (1218 <callbackPacketReceived+0x608>)
     faa:	406b      	eors	r3, r5
     fac:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     fae:	01a5      	lsls	r5, r4, #6
     fb0:	b2ed      	uxtb	r5, r5
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     fb2:	121e      	asrs	r6, r3, #8
     fb4:	4075      	eors	r5, r6
     fb6:	2680      	movs	r6, #128	; 0x80
     fb8:	422e      	tst	r6, r5
     fba:	d098      	beq.n	eee <callbackPacketReceived+0x2de>
		crcReg = (crcReg << 1) ^ 0x8005;
     fbc:	005b      	lsls	r3, r3, #1
     fbe:	4d96      	ldr	r5, [pc, #600]	; (1218 <callbackPacketReceived+0x608>)
     fc0:	406b      	eors	r3, r5
     fc2:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
     fc4:	01e4      	lsls	r4, r4, #7
     fc6:	b2e4      	uxtb	r4, r4
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
     fc8:	121d      	asrs	r5, r3, #8
     fca:	406c      	eors	r4, r5
     fcc:	2580      	movs	r5, #128	; 0x80
     fce:	4225      	tst	r5, r4
     fd0:	d0a2      	beq.n	f18 <callbackPacketReceived+0x308>
		crcReg = (crcReg << 1) ^ 0x8005;
     fd2:	005b      	lsls	r3, r3, #1
     fd4:	4c90      	ldr	r4, [pc, #576]	; (1218 <callbackPacketReceived+0x608>)
     fd6:	4063      	eors	r3, r4
     fd8:	b29b      	uxth	r3, r3
     fda:	e79f      	b.n	f1c <callbackPacketReceived+0x30c>
     fdc:	920a      	str	r2, [sp, #40]	; 0x28
     fde:	930c      	str	r3, [sp, #48]	; 0x30

		      //*p_dec = dataOut[j]; p_dec++;
	      }
	      
	      if(numRemBytes == 1) // Flush last byte
     fe0:	2a01      	cmp	r2, #1
     fe2:	d100      	bne.n	fe6 <callbackPacketReceived+0x3d6>
     fe4:	e193      	b.n	130e <callbackPacketReceived+0x6fe>
		      numRemBytes--;

		      //*p_dec = dataOut[0]; p_dec++;
	      }

	      if(numRemBytes > 4 && numDec > 0)
     fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fe8:	2b04      	cmp	r3, #4
     fea:	d90b      	bls.n	1004 <callbackPacketReceived+0x3f4>
     fec:	9b08      	ldr	r3, [sp, #32]
     fee:	2b00      	cmp	r3, #0
     ff0:	d008      	beq.n	1004 <callbackPacketReceived+0x3f4>
		  {
			//data = dataOut[0];
			outBuffer[(2*i)+0] = dataOut[0];
     ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     ff4:	005b      	lsls	r3, r3, #1
     ff6:	4989      	ldr	r1, [pc, #548]	; (121c <callbackPacketReceived+0x60c>)
     ff8:	aa11      	add	r2, sp, #68	; 0x44
     ffa:	7810      	ldrb	r0, [r2, #0]
     ffc:	54c8      	strb	r0, [r1, r3]
			outBuffer[(2*i)+1] = dataOut[1];
     ffe:	3301      	adds	r3, #1
    1000:	7852      	ldrb	r2, [r2, #1]
    1002:	54ca      	strb	r2, [r1, r3]
      for(int i=0; i<numBytes/2;i++)
    1004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1006:	3301      	adds	r3, #1
    1008:	930b      	str	r3, [sp, #44]	; 0x2c
    100a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    100c:	2b05      	cmp	r3, #5
    100e:	dd00      	ble.n	1012 <callbackPacketReceived+0x402>
    1010:	e1b2      	b.n	1378 <callbackPacketReceived+0x768>
		  dataEnc[0] = inBuffer[(4*i)+0];
    1012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1014:	009b      	lsls	r3, r3, #2
    1016:	990e      	ldr	r1, [sp, #56]	; 0x38
    1018:	5cca      	ldrb	r2, [r1, r3]
    101a:	a810      	add	r0, sp, #64	; 0x40
    101c:	7002      	strb	r2, [r0, #0]
		  dataEnc[1] = inBuffer[(4*i)+1];
    101e:	468c      	mov	ip, r1
    1020:	4463      	add	r3, ip
    1022:	785a      	ldrb	r2, [r3, #1]
    1024:	7042      	strb	r2, [r0, #1]
		  dataEnc[2] = inBuffer[(4*i)+2];
    1026:	789a      	ldrb	r2, [r3, #2]
    1028:	7082      	strb	r2, [r0, #2]
		  dataEnc[3] = inBuffer[(4*i)+3];
    102a:	78db      	ldrb	r3, [r3, #3]
    102c:	70c3      	strb	r3, [r0, #3]
	      numDec = fecDecode(dataOut, dataEnc, numRemBytes-2);
    102e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1030:	3b02      	subs	r3, #2
    1032:	b29b      	uxth	r3, r3
    1034:	9306      	str	r3, [sp, #24]
    1036:	2306      	movs	r3, #6
    1038:	9305      	str	r3, [sp, #20]
    103a:	2300      	movs	r3, #0
    103c:	9308      	str	r3, [sp, #32]
    103e:	3310      	adds	r3, #16
    1040:	9304      	str	r3, [sp, #16]
    1042:	9007      	str	r0, [sp, #28]
    1044:	ab11      	add	r3, sp, #68	; 0x44
    1046:	9309      	str	r3, [sp, #36]	; 0x24
    1048:	e6e7      	b.n	e1a <callbackPacketReceived+0x20a>
            pInData++; // Update pointer to the next byte of received data
    104a:	9b06      	ldr	r3, [sp, #24]
    104c:	3301      	adds	r3, #1
    104e:	9306      	str	r3, [sp, #24]
            iBit = 6;
    1050:	2306      	movs	r3, #6
    1052:	9305      	str	r3, [sp, #20]
    1054:	e0c6      	b.n	11e4 <callbackPacketReceived+0x5d4>
    return (a <= b ? a : b);
    1056:	b2d3      	uxtb	r3, r2
    1058:	9303      	str	r3, [sp, #12]
                aPath[iCurrBuf][iDestState] = (aPath[iLastBuf][iSrcState0] << 1) | nInputBit;
    105a:	4a71      	ldr	r2, [pc, #452]	; (1220 <callbackPacketReceived+0x610>)
    105c:	9b02      	ldr	r3, [sp, #8]
    105e:	00db      	lsls	r3, r3, #3
    1060:	4453      	add	r3, sl
    1062:	009b      	lsls	r3, r3, #2
    1064:	18d3      	adds	r3, r2, r3
    1066:	695b      	ldr	r3, [r3, #20]
    1068:	005b      	lsls	r3, r3, #1
    106a:	4648      	mov	r0, r9
    106c:	4318      	orrs	r0, r3
    106e:	0003      	movs	r3, r0
    1070:	00c9      	lsls	r1, r1, #3
    1072:	9801      	ldr	r0, [sp, #4]
    1074:	4684      	mov	ip, r0
    1076:	4461      	add	r1, ip
    1078:	0089      	lsls	r1, r1, #2
    107a:	1851      	adds	r1, r2, r1
    107c:	614b      	str	r3, [r1, #20]
        for (iDestState = 0; iDestState < 8; iDestState++) {
    107e:	3401      	adds	r4, #1
    1080:	b2e4      	uxtb	r4, r4
    1082:	2c07      	cmp	r4, #7
    1084:	d875      	bhi.n	1172 <callbackPacketReceived+0x562>
            nInputBit = aTrellisTransitionInput[iDestState];
    1086:	9401      	str	r4, [sp, #4]
    1088:	4866      	ldr	r0, [pc, #408]	; (1224 <callbackPacketReceived+0x614>)
    108a:	1902      	adds	r2, r0, r4
    108c:	2330      	movs	r3, #48	; 0x30
    108e:	5cd3      	ldrb	r3, [r2, r3]
    1090:	4699      	mov	r9, r3
            iSrcState0 = aTrellisSourceStateLut[iDestState][0];
    1092:	0063      	lsls	r3, r4, #1
    1094:	18c0      	adds	r0, r0, r3
    1096:	2338      	movs	r3, #56	; 0x38
    1098:	5cc3      	ldrb	r3, [r0, r3]
    109a:	469a      	mov	sl, r3
            nCost0 = nCost[iLastBuf][iSrcState0];
    109c:	4e60      	ldr	r6, [pc, #384]	; (1220 <callbackPacketReceived+0x610>)
    109e:	2354      	movs	r3, #84	; 0x54
    10a0:	5cf3      	ldrb	r3, [r6, r3]
    10a2:	9302      	str	r3, [sp, #8]
    10a4:	00da      	lsls	r2, r3, #3
    10a6:	18b6      	adds	r6, r6, r2
    10a8:	4653      	mov	r3, sl
    10aa:	18f2      	adds	r2, r6, r3
    10ac:	7913      	ldrb	r3, [r2, #4]
    10ae:	469c      	mov	ip, r3
            nCost0 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][0]);
    10b0:	2248      	movs	r2, #72	; 0x48
    10b2:	5c82      	ldrb	r2, [r0, r2]
    10b4:	465b      	mov	r3, fp
    10b6:	405a      	eors	r2, r3
    a = ((a & 0xAA) >> 1) + (a & 0x55);
    10b8:	1057      	asrs	r7, r2, #1
    10ba:	2155      	movs	r1, #85	; 0x55
    10bc:	400f      	ands	r7, r1
    10be:	400a      	ands	r2, r1
    10c0:	18bf      	adds	r7, r7, r2
    a = ((a & 0xCC) >> 2) + (a & 0x33);
    10c2:	10bd      	asrs	r5, r7, #2
    10c4:	2233      	movs	r2, #51	; 0x33
    10c6:	4015      	ands	r5, r2
    10c8:	4017      	ands	r7, r2
    10ca:	19ed      	adds	r5, r5, r7
    a = ((a & 0xF0) >> 4) + (a & 0x0F);
    10cc:	092f      	lsrs	r7, r5, #4
    10ce:	b2ff      	uxtb	r7, r7
    10d0:	230f      	movs	r3, #15
    10d2:	4698      	mov	r8, r3
    10d4:	401d      	ands	r5, r3
    10d6:	197d      	adds	r5, r7, r5
    10d8:	b2ed      	uxtb	r5, r5
            nCost0 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][0]);
    10da:	4465      	add	r5, ip
    10dc:	b2ed      	uxtb	r5, r5
            iSrcState1 = aTrellisSourceStateLut[iDestState][1];
    10de:	0007      	movs	r7, r0
    10e0:	3739      	adds	r7, #57	; 0x39
    10e2:	783f      	ldrb	r7, [r7, #0]
            nCost1 = nCost[iLastBuf][iSrcState1];
    10e4:	19f6      	adds	r6, r6, r7
    10e6:	7936      	ldrb	r6, [r6, #4]
            nCost1 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][1]);
    10e8:	3049      	adds	r0, #73	; 0x49
    10ea:	7800      	ldrb	r0, [r0, #0]
    10ec:	465b      	mov	r3, fp
    10ee:	4058      	eors	r0, r3
    a = ((a & 0xAA) >> 1) + (a & 0x55);
    10f0:	1043      	asrs	r3, r0, #1
    10f2:	400b      	ands	r3, r1
    10f4:	469c      	mov	ip, r3
    10f6:	4001      	ands	r1, r0
    10f8:	4461      	add	r1, ip
    a = ((a & 0xCC) >> 2) + (a & 0x33);
    10fa:	1088      	asrs	r0, r1, #2
    10fc:	4010      	ands	r0, r2
    10fe:	4011      	ands	r1, r2
    1100:	1840      	adds	r0, r0, r1
    a = ((a & 0xF0) >> 4) + (a & 0x0F);
    1102:	0901      	lsrs	r1, r0, #4
    1104:	b2c9      	uxtb	r1, r1
    1106:	4643      	mov	r3, r8
    1108:	4018      	ands	r0, r3
    110a:	1808      	adds	r0, r1, r0
    110c:	b2c0      	uxtb	r0, r0
            nCost1 += hammWeight(symbol ^ aTrellisTransitionOutput[iDestState][1]);
    110e:	1836      	adds	r6, r6, r0
    1110:	b2f6      	uxtb	r6, r6
            if (nCost0 <= nCost1) {
    1112:	42b5      	cmp	r5, r6
    1114:	d80c      	bhi.n	1130 <callbackPacketReceived+0x520>
                nCost[iCurrBuf][iDestState] = nCost0;
    1116:	4a42      	ldr	r2, [pc, #264]	; (1220 <callbackPacketReceived+0x610>)
    1118:	2155      	movs	r1, #85	; 0x55
    111a:	5c51      	ldrb	r1, [r2, r1]
    111c:	00c8      	lsls	r0, r1, #3
    111e:	1812      	adds	r2, r2, r0
    1120:	1912      	adds	r2, r2, r4
    1122:	7115      	strb	r5, [r2, #4]
    return (a <= b ? a : b);
    1124:	1c2a      	adds	r2, r5, #0
    1126:	9803      	ldr	r0, [sp, #12]
    1128:	4285      	cmp	r5, r0
    112a:	d994      	bls.n	1056 <callbackPacketReceived+0x446>
    112c:	1c02      	adds	r2, r0, #0
    112e:	e792      	b.n	1056 <callbackPacketReceived+0x446>
                nCost[iCurrBuf][iDestState] = nCost1;
    1130:	4a3b      	ldr	r2, [pc, #236]	; (1220 <callbackPacketReceived+0x610>)
    1132:	2155      	movs	r1, #85	; 0x55
    1134:	5c51      	ldrb	r1, [r2, r1]
    1136:	00c8      	lsls	r0, r1, #3
    1138:	1812      	adds	r2, r2, r0
    113a:	1912      	adds	r2, r2, r4
    113c:	7116      	strb	r6, [r2, #4]
    return (a <= b ? a : b);
    113e:	1c32      	adds	r2, r6, #0
    1140:	9803      	ldr	r0, [sp, #12]
    1142:	4286      	cmp	r6, r0
    1144:	d900      	bls.n	1148 <callbackPacketReceived+0x538>
    1146:	1c02      	adds	r2, r0, #0
    1148:	b2d3      	uxtb	r3, r2
    114a:	9303      	str	r3, [sp, #12]
                aPath[iCurrBuf][iDestState] = (aPath[iLastBuf][iSrcState1] << 1) | nInputBit;
    114c:	4a34      	ldr	r2, [pc, #208]	; (1220 <callbackPacketReceived+0x610>)
    114e:	9b02      	ldr	r3, [sp, #8]
    1150:	00db      	lsls	r3, r3, #3
    1152:	19df      	adds	r7, r3, r7
    1154:	00bf      	lsls	r7, r7, #2
    1156:	19d7      	adds	r7, r2, r7
    1158:	697b      	ldr	r3, [r7, #20]
    115a:	005b      	lsls	r3, r3, #1
    115c:	4648      	mov	r0, r9
    115e:	4318      	orrs	r0, r3
    1160:	0003      	movs	r3, r0
    1162:	00c9      	lsls	r1, r1, #3
    1164:	9801      	ldr	r0, [sp, #4]
    1166:	4684      	mov	ip, r0
    1168:	4461      	add	r1, ip
    116a:	0089      	lsls	r1, r1, #2
    116c:	1852      	adds	r2, r2, r1
    116e:	6153      	str	r3, [r2, #20]
    1170:	e785      	b.n	107e <callbackPacketReceived+0x46e>
        nPathBits++;
    1172:	492b      	ldr	r1, [pc, #172]	; (1220 <callbackPacketReceived+0x610>)
    1174:	2256      	movs	r2, #86	; 0x56
    1176:	5c88      	ldrb	r0, [r1, r2]
    1178:	1c43      	adds	r3, r0, #1
    117a:	b2db      	uxtb	r3, r3
    117c:	548b      	strb	r3, [r1, r2]
        if (nPathBits == 32) {
    117e:	2b20      	cmp	r3, #32
    1180:	d036      	beq.n	11f0 <callbackPacketReceived+0x5e0>
        if ((nRemBytes <= 3) && (nPathBits == ((8 * nRemBytes) + 3))) {
    1182:	9907      	ldr	r1, [sp, #28]
    1184:	2903      	cmp	r1, #3
    1186:	d806      	bhi.n	1196 <callbackPacketReceived+0x586>
    1188:	2356      	movs	r3, #86	; 0x56
    118a:	4a25      	ldr	r2, [pc, #148]	; (1220 <callbackPacketReceived+0x610>)
    118c:	5cd2      	ldrb	r2, [r2, r3]
    118e:	00cb      	lsls	r3, r1, #3
    1190:	3303      	adds	r3, #3
    1192:	429a      	cmp	r2, r3
    1194:	d03e      	beq.n	1214 <callbackPacketReceived+0x604>
        iLastBuf = (iLastBuf + 1) % 2;
    1196:	4a22      	ldr	r2, [pc, #136]	; (1220 <callbackPacketReceived+0x610>)
    1198:	2154      	movs	r1, #84	; 0x54
    119a:	5c53      	ldrb	r3, [r2, r1]
    119c:	3301      	adds	r3, #1
    119e:	0fdc      	lsrs	r4, r3, #31
    11a0:	191b      	adds	r3, r3, r4
    11a2:	2001      	movs	r0, #1
    11a4:	4003      	ands	r3, r0
    11a6:	1b1b      	subs	r3, r3, r4
    11a8:	5453      	strb	r3, [r2, r1]
        iCurrBuf = (iCurrBuf + 1) % 2;
    11aa:	3101      	adds	r1, #1
    11ac:	5c53      	ldrb	r3, [r2, r1]
    11ae:	3301      	adds	r3, #1
    11b0:	0fdc      	lsrs	r4, r3, #31
    11b2:	191b      	adds	r3, r3, r4
    11b4:	4018      	ands	r0, r3
    11b6:	1b00      	subs	r0, r0, r4
    11b8:	5450      	strb	r0, [r2, r1]
    for (nIterations = 16; nIterations > 0; nIterations--)
    11ba:	9b04      	ldr	r3, [sp, #16]
    11bc:	3b01      	subs	r3, #1
    11be:	b2db      	uxtb	r3, r3
    11c0:	9304      	str	r3, [sp, #16]
    11c2:	9b04      	ldr	r3, [sp, #16]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d100      	bne.n	11ca <callbackPacketReceived+0x5ba>
    11c8:	e0ac      	b.n	1324 <callbackPacketReceived+0x714>
        unsigned char symbol = ((*pInData) >> iBit) & 0x03;
    11ca:	9b06      	ldr	r3, [sp, #24]
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	9905      	ldr	r1, [sp, #20]
    11d0:	410b      	asrs	r3, r1
    11d2:	2203      	movs	r2, #3
    11d4:	4013      	ands	r3, r2
    11d6:	469b      	mov	fp, r3
        if ((iBit -= 2) < 0) {
    11d8:	1e8b      	subs	r3, r1, #2
    11da:	b25b      	sxtb	r3, r3
    11dc:	9305      	str	r3, [sp, #20]
    11de:	2b00      	cmp	r3, #0
    11e0:	da00      	bge.n	11e4 <callbackPacketReceived+0x5d4>
    11e2:	e732      	b.n	104a <callbackPacketReceived+0x43a>
        for (iDestState = 0; iDestState < 8; iDestState++) {
    11e4:	2300      	movs	r3, #0
    11e6:	469a      	mov	sl, r3
        nMinCost = 0xFF;
    11e8:	33ff      	adds	r3, #255	; 0xff
    11ea:	9303      	str	r3, [sp, #12]
    11ec:	4654      	mov	r4, sl
    11ee:	e748      	b.n	1082 <callbackPacketReceived+0x472>
            *pDecData++ = (aPath[iCurrBuf][0] >> 24) & 0xFF;
    11f0:	000a      	movs	r2, r1
    11f2:	3335      	adds	r3, #53	; 0x35
    11f4:	5ccb      	ldrb	r3, [r1, r3]
    11f6:	015b      	lsls	r3, r3, #5
    11f8:	18cb      	adds	r3, r1, r3
    11fa:	7ddb      	ldrb	r3, [r3, #23]
    11fc:	9909      	ldr	r1, [sp, #36]	; 0x24
    11fe:	700b      	strb	r3, [r1, #0]
            nPathBits -= 8;
    1200:	3807      	subs	r0, #7
    1202:	2356      	movs	r3, #86	; 0x56
    1204:	54d0      	strb	r0, [r2, r3]
            nRemBytes--;
    1206:	9b07      	ldr	r3, [sp, #28]
    1208:	3b01      	subs	r3, #1
    120a:	b29b      	uxth	r3, r3
    120c:	9307      	str	r3, [sp, #28]
            *pDecData++ = (aPath[iCurrBuf][0] >> 24) & 0xFF;
    120e:	1c4b      	adds	r3, r1, #1
    1210:	9309      	str	r3, [sp, #36]	; 0x24
    1212:	e7b6      	b.n	1182 <callbackPacketReceived+0x572>
    1214:	9809      	ldr	r0, [sp, #36]	; 0x24
    1216:	e013      	b.n	1240 <callbackPacketReceived+0x630>
    1218:	ffff8005 	.word	0xffff8005
    121c:	2000049c 	.word	0x2000049c
    1220:	20000234 	.word	0x20000234
    1224:	00006c40 	.word	0x00006c40
                *pDecData++ = (aPath[iCurrBuf][0] >> (nPathBits - 8)) & 0xFF; nOutputBytes++;
    1228:	4996      	ldr	r1, [pc, #600]	; (1484 <callbackPacketReceived+0x874>)
    122a:	2255      	movs	r2, #85	; 0x55
    122c:	5c8a      	ldrb	r2, [r1, r2]
    122e:	0152      	lsls	r2, r2, #5
    1230:	188a      	adds	r2, r1, r2
    1232:	6952      	ldr	r2, [r2, #20]
    1234:	3b08      	subs	r3, #8
    1236:	40da      	lsrs	r2, r3
    1238:	7002      	strb	r2, [r0, #0]
                nPathBits -= 8;
    123a:	2256      	movs	r2, #86	; 0x56
    123c:	548b      	strb	r3, [r1, r2]
                *pDecData++ = (aPath[iCurrBuf][0] >> (nPathBits - 8)) & 0xFF; nOutputBytes++;
    123e:	3001      	adds	r0, #1
            while (nPathBits >= 8) {
    1240:	2356      	movs	r3, #86	; 0x56
    1242:	4a90      	ldr	r2, [pc, #576]	; (1484 <callbackPacketReceived+0x874>)
    1244:	5cd3      	ldrb	r3, [r2, r3]
    1246:	2b07      	cmp	r3, #7
    1248:	d8ee      	bhi.n	1228 <callbackPacketReceived+0x618>
		      if(numRemBytes > 2)
    124a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    124c:	2b02      	cmp	r3, #2
    124e:	d959      	bls.n	1304 <callbackPacketReceived+0x6f4>
		      decCRC = calcCRC(dataOut[0], decCRC);
    1250:	ab11      	add	r3, sp, #68	; 0x44
    1252:	781a      	ldrb	r2, [r3, #0]
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    1254:	980c      	ldr	r0, [sp, #48]	; 0x30
    1256:	1203      	asrs	r3, r0, #8
    1258:	4053      	eors	r3, r2
    125a:	2180      	movs	r1, #128	; 0x80
    125c:	4219      	tst	r1, r3
    125e:	d071      	beq.n	1344 <callbackPacketReceived+0x734>
		crcReg = (crcReg << 1) ^ 0x8005;
    1260:	0041      	lsls	r1, r0, #1
    1262:	4b89      	ldr	r3, [pc, #548]	; (1488 <callbackPacketReceived+0x878>)
    1264:	404b      	eors	r3, r1
    1266:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    1268:	0051      	lsls	r1, r2, #1
    126a:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    126c:	1218      	asrs	r0, r3, #8
    126e:	4041      	eors	r1, r0
    1270:	2080      	movs	r0, #128	; 0x80
    1272:	4208      	tst	r0, r1
    1274:	d06a      	beq.n	134c <callbackPacketReceived+0x73c>
		crcReg = (crcReg << 1) ^ 0x8005;
    1276:	005b      	lsls	r3, r3, #1
    1278:	4983      	ldr	r1, [pc, #524]	; (1488 <callbackPacketReceived+0x878>)
    127a:	404b      	eors	r3, r1
    127c:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    127e:	0091      	lsls	r1, r2, #2
    1280:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    1282:	1218      	asrs	r0, r3, #8
    1284:	4041      	eors	r1, r0
    1286:	2080      	movs	r0, #128	; 0x80
    1288:	4208      	tst	r0, r1
    128a:	d062      	beq.n	1352 <callbackPacketReceived+0x742>
		crcReg = (crcReg << 1) ^ 0x8005;
    128c:	005b      	lsls	r3, r3, #1
    128e:	497e      	ldr	r1, [pc, #504]	; (1488 <callbackPacketReceived+0x878>)
    1290:	404b      	eors	r3, r1
    1292:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    1294:	00d1      	lsls	r1, r2, #3
    1296:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    1298:	1218      	asrs	r0, r3, #8
    129a:	4041      	eors	r1, r0
    129c:	2080      	movs	r0, #128	; 0x80
    129e:	4208      	tst	r0, r1
    12a0:	d05a      	beq.n	1358 <callbackPacketReceived+0x748>
		crcReg = (crcReg << 1) ^ 0x8005;
    12a2:	005b      	lsls	r3, r3, #1
    12a4:	4978      	ldr	r1, [pc, #480]	; (1488 <callbackPacketReceived+0x878>)
    12a6:	404b      	eors	r3, r1
    12a8:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    12aa:	0111      	lsls	r1, r2, #4
    12ac:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    12ae:	1218      	asrs	r0, r3, #8
    12b0:	4041      	eors	r1, r0
    12b2:	2080      	movs	r0, #128	; 0x80
    12b4:	4208      	tst	r0, r1
    12b6:	d052      	beq.n	135e <callbackPacketReceived+0x74e>
		crcReg = (crcReg << 1) ^ 0x8005;
    12b8:	005b      	lsls	r3, r3, #1
    12ba:	4973      	ldr	r1, [pc, #460]	; (1488 <callbackPacketReceived+0x878>)
    12bc:	404b      	eors	r3, r1
    12be:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    12c0:	0151      	lsls	r1, r2, #5
    12c2:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    12c4:	1218      	asrs	r0, r3, #8
    12c6:	4041      	eors	r1, r0
    12c8:	2080      	movs	r0, #128	; 0x80
    12ca:	4208      	tst	r0, r1
    12cc:	d04a      	beq.n	1364 <callbackPacketReceived+0x754>
		crcReg = (crcReg << 1) ^ 0x8005;
    12ce:	005b      	lsls	r3, r3, #1
    12d0:	496d      	ldr	r1, [pc, #436]	; (1488 <callbackPacketReceived+0x878>)
    12d2:	404b      	eors	r3, r1
    12d4:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    12d6:	0191      	lsls	r1, r2, #6
    12d8:	b2c9      	uxtb	r1, r1
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    12da:	1218      	asrs	r0, r3, #8
    12dc:	4041      	eors	r1, r0
    12de:	2080      	movs	r0, #128	; 0x80
    12e0:	4208      	tst	r0, r1
    12e2:	d042      	beq.n	136a <callbackPacketReceived+0x75a>
		crcReg = (crcReg << 1) ^ 0x8005;
    12e4:	005b      	lsls	r3, r3, #1
    12e6:	4968      	ldr	r1, [pc, #416]	; (1488 <callbackPacketReceived+0x878>)
    12e8:	404b      	eors	r3, r1
    12ea:	b29b      	uxth	r3, r3
		crcReg = (crcReg << 1); crcData <<= 1;
    12ec:	01d2      	lsls	r2, r2, #7
    12ee:	b2d2      	uxtb	r2, r2
	if (((crcReg & 0x8000) >> 8) ^ (crcData & 0x80))
    12f0:	1219      	asrs	r1, r3, #8
    12f2:	404a      	eors	r2, r1
    12f4:	2180      	movs	r1, #128	; 0x80
    12f6:	4211      	tst	r1, r2
    12f8:	d03a      	beq.n	1370 <callbackPacketReceived+0x760>
		crcReg = (crcReg << 1) ^ 0x8005;
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	4a62      	ldr	r2, [pc, #392]	; (1488 <callbackPacketReceived+0x878>)
    12fe:	4053      	eors	r3, r2
    1300:	b29b      	uxth	r3, r3
    1302:	930c      	str	r3, [sp, #48]	; 0x30
		      numRemBytes--;
    1304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1306:	3b01      	subs	r3, #1
    1308:	b29b      	uxth	r3, r3
    130a:	930a      	str	r3, [sp, #40]	; 0x28
    130c:	e66b      	b.n	fe6 <callbackPacketReceived+0x3d6>
	      if(numRemBytes == 1) // Flush last byte
    130e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1310:	9307      	str	r3, [sp, #28]
    1312:	2306      	movs	r3, #6
    1314:	9305      	str	r3, [sp, #20]
    1316:	330a      	adds	r3, #10
    1318:	9304      	str	r3, [sp, #16]
    131a:	ab10      	add	r3, sp, #64	; 0x40
    131c:	9306      	str	r3, [sp, #24]
    131e:	ab11      	add	r3, sp, #68	; 0x44
    1320:	9309      	str	r3, [sp, #36]	; 0x24
    1322:	e74e      	b.n	11c2 <callbackPacketReceived+0x5b2>
    1324:	9803      	ldr	r0, [sp, #12]
    1326:	001a      	movs	r2, r3
        for (iState = 0; iState < 8; iState++)
    1328:	2a07      	cmp	r2, #7
    132a:	d88e      	bhi.n	124a <callbackPacketReceived+0x63a>
            nCost[iLastBuf][iState] -= nMinCost;
    132c:	4b55      	ldr	r3, [pc, #340]	; (1484 <callbackPacketReceived+0x874>)
    132e:	2154      	movs	r1, #84	; 0x54
    1330:	5c59      	ldrb	r1, [r3, r1]
    1332:	00c9      	lsls	r1, r1, #3
    1334:	185b      	adds	r3, r3, r1
    1336:	189b      	adds	r3, r3, r2
    1338:	7919      	ldrb	r1, [r3, #4]
    133a:	1a09      	subs	r1, r1, r0
    133c:	7119      	strb	r1, [r3, #4]
        for (iState = 0; iState < 8; iState++)
    133e:	3201      	adds	r2, #1
    1340:	b2d2      	uxtb	r2, r2
    1342:	e7f1      	b.n	1328 <callbackPacketReceived+0x718>
		crcReg = (crcReg << 1); crcData <<= 1;
    1344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1346:	005b      	lsls	r3, r3, #1
    1348:	b29b      	uxth	r3, r3
    134a:	e78d      	b.n	1268 <callbackPacketReceived+0x658>
		crcReg = (crcReg << 1); crcData <<= 1;
    134c:	005b      	lsls	r3, r3, #1
    134e:	b29b      	uxth	r3, r3
    1350:	e795      	b.n	127e <callbackPacketReceived+0x66e>
		crcReg = (crcReg << 1); crcData <<= 1;
    1352:	005b      	lsls	r3, r3, #1
    1354:	b29b      	uxth	r3, r3
    1356:	e79d      	b.n	1294 <callbackPacketReceived+0x684>
		crcReg = (crcReg << 1); crcData <<= 1;
    1358:	005b      	lsls	r3, r3, #1
    135a:	b29b      	uxth	r3, r3
    135c:	e7a5      	b.n	12aa <callbackPacketReceived+0x69a>
		crcReg = (crcReg << 1); crcData <<= 1;
    135e:	005b      	lsls	r3, r3, #1
    1360:	b29b      	uxth	r3, r3
    1362:	e7ad      	b.n	12c0 <callbackPacketReceived+0x6b0>
		crcReg = (crcReg << 1); crcData <<= 1;
    1364:	005b      	lsls	r3, r3, #1
    1366:	b29b      	uxth	r3, r3
    1368:	e7b5      	b.n	12d6 <callbackPacketReceived+0x6c6>
		crcReg = (crcReg << 1); crcData <<= 1;
    136a:	005b      	lsls	r3, r3, #1
    136c:	b29b      	uxth	r3, r3
    136e:	e7bd      	b.n	12ec <callbackPacketReceived+0x6dc>
		crcReg = (crcReg << 1); crcData <<= 1;
    1370:	005b      	lsls	r3, r3, #1
    1372:	b29b      	uxth	r3, r3
    1374:	930c      	str	r3, [sp, #48]	; 0x30
    1376:	e7c5      	b.n	1304 <callbackPacketReceived+0x6f4>
		  }
      }
	  if(decCRC == 0x00) // CRC is good
    1378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    137a:	2b00      	cmp	r3, #0
    137c:	d101      	bne.n	1382 <callbackPacketReceived+0x772>
	  return true; 
    137e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1380:	930f      	str	r3, [sp, #60]	; 0x3c
		if(decodeFEC(sparkRXbuffer,sensorRXbuffer,8))
    1382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1384:	2b00      	cmp	r3, #0
    1386:	d013      	beq.n	13b0 <callbackPacketReceived+0x7a0>
    1388:	2300      	movs	r3, #0
    138a:	e005      	b.n	1398 <callbackPacketReceived+0x788>
		{
			//Save current values
		    for(unsigned char i=0;i<20;i++)
				tempBuffer[i] = sensorRXbuffer[i];
    138c:	4a3f      	ldr	r2, [pc, #252]	; (148c <callbackPacketReceived+0x87c>)
    138e:	5cd1      	ldrb	r1, [r2, r3]
    1390:	4a3f      	ldr	r2, [pc, #252]	; (1490 <callbackPacketReceived+0x880>)
    1392:	54d1      	strb	r1, [r2, r3]
		    for(unsigned char i=0;i<20;i++)
    1394:	3301      	adds	r3, #1
    1396:	b2db      	uxtb	r3, r3
    1398:	2b13      	cmp	r3, #19
    139a:	d9f7      	bls.n	138c <callbackPacketReceived+0x77c>
		{
			//Send last CRC checked values
			for(unsigned char i=0;i<20;i++)
				sensorRXbuffer[i] = tempBuffer[i];
		}		
		reception = true;
    139c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    139e:	930d      	str	r3, [sp, #52]	; 0x34
  unsigned char errors = 0;
    13a0:	2100      	movs	r1, #0
    13a2:	e046      	b.n	1432 <callbackPacketReceived+0x822>
				sensorRXbuffer[i] = tempBuffer[i];
    13a4:	4a3a      	ldr	r2, [pc, #232]	; (1490 <callbackPacketReceived+0x880>)
    13a6:	5cd1      	ldrb	r1, [r2, r3]
    13a8:	4a38      	ldr	r2, [pc, #224]	; (148c <callbackPacketReceived+0x87c>)
    13aa:	54d1      	strb	r1, [r2, r3]
			for(unsigned char i=0;i<20;i++)
    13ac:	3301      	adds	r3, #1
    13ae:	b2db      	uxtb	r3, r3
    13b0:	2b13      	cmp	r3, #19
    13b2:	d9f7      	bls.n	13a4 <callbackPacketReceived+0x794>
  unsigned char errors = 0;
    13b4:	2100      	movs	r1, #0
    13b6:	e03c      	b.n	1432 <callbackPacketReceived+0x822>
  }
  else
  {
	  sparkPullRX(0, numBytes);
    13b8:	0001      	movs	r1, r0
    13ba:	2000      	movs	r0, #0
    13bc:	4b35      	ldr	r3, [pc, #212]	; (1494 <callbackPacketReceived+0x884>)
    13be:	4798      	blx	r3
	  
	  // Get packet?
	  for(unsigned char i=0;i<numBytes;i++)
    13c0:	2000      	movs	r0, #0
  unsigned char errors = 0;
    13c2:	2100      	movs	r1, #0
    13c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	  for(unsigned char i=0;i<numBytes;i++)
    13c6:	e00a      	b.n	13de <callbackPacketReceived+0x7ce>
    errors++;
    13c8:	2201      	movs	r2, #1
    13ca:	e015      	b.n	13f8 <callbackPacketReceived+0x7e8>
  if( (b1 & 128) != (b2 & 128) )
    13cc:	b26d      	sxtb	r5, r5
    13ce:	2d00      	cmp	r5, #0
    13d0:	db2b      	blt.n	142a <callbackPacketReceived+0x81a>
	  {
		b = sparkRXbuffer[i];
		if(linkRandom)
		  errors = b;
		else
		  errors += byteErrors(b, i); // This takes a lot of time
    13d2:	188b      	adds	r3, r1, r2
    13d4:	b2dd      	uxtb	r5, r3
	  for(unsigned char i=0;i<numBytes;i++)
    13d6:	3001      	adds	r0, #1
    13d8:	b2c0      	uxtb	r0, r0
    
		reception = true;
    13da:	2301      	movs	r3, #1
    13dc:	0029      	movs	r1, r5
	  for(unsigned char i=0;i<numBytes;i++)
    13de:	42a0      	cmp	r0, r4
    13e0:	d226      	bcs.n	1430 <callbackPacketReceived+0x820>
		b = sparkRXbuffer[i];
    13e2:	4b2d      	ldr	r3, [pc, #180]	; (1498 <callbackPacketReceived+0x888>)
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	5c1d      	ldrb	r5, [r3, r0]
		if(linkRandom)
    13e8:	4b2c      	ldr	r3, [pc, #176]	; (149c <callbackPacketReceived+0x88c>)
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d1f2      	bne.n	13d6 <callbackPacketReceived+0x7c6>
  if( (b1 & 1) != (b2 & 1) )
    13f0:	4045      	eors	r5, r0
    13f2:	07eb      	lsls	r3, r5, #31
    13f4:	d4e8      	bmi.n	13c8 <callbackPacketReceived+0x7b8>
  uint8_t errors = 0;
    13f6:	2200      	movs	r2, #0
  if( (b1 & 2) != (b2 & 2) )
    13f8:	07ab      	lsls	r3, r5, #30
    13fa:	d501      	bpl.n	1400 <callbackPacketReceived+0x7f0>
    errors++;
    13fc:	3201      	adds	r2, #1
    13fe:	b2d2      	uxtb	r2, r2
  if( (b1 & 4) != (b2 & 4) )
    1400:	076b      	lsls	r3, r5, #29
    1402:	d501      	bpl.n	1408 <callbackPacketReceived+0x7f8>
    errors++;
    1404:	3201      	adds	r2, #1
    1406:	b2d2      	uxtb	r2, r2
  if( (b1 & 8) != (b2 & 8) )
    1408:	072b      	lsls	r3, r5, #28
    140a:	d501      	bpl.n	1410 <callbackPacketReceived+0x800>
    errors++;
    140c:	3201      	adds	r2, #1
    140e:	b2d2      	uxtb	r2, r2
  if( (b1 & 16) != (b2 & 16) )
    1410:	06eb      	lsls	r3, r5, #27
    1412:	d501      	bpl.n	1418 <callbackPacketReceived+0x808>
    errors++;
    1414:	3201      	adds	r2, #1
    1416:	b2d2      	uxtb	r2, r2
  if( (b1 & 32) != (b2 & 32) )
    1418:	06ab      	lsls	r3, r5, #26
    141a:	d501      	bpl.n	1420 <callbackPacketReceived+0x810>
    errors++;
    141c:	3201      	adds	r2, #1
    141e:	b2d2      	uxtb	r2, r2
  if( (b1 & 64) != (b2 & 64) )
    1420:	066b      	lsls	r3, r5, #25
    1422:	d5d3      	bpl.n	13cc <callbackPacketReceived+0x7bc>
    errors++;
    1424:	3201      	adds	r2, #1
    1426:	b2d2      	uxtb	r2, r2
    1428:	e7d0      	b.n	13cc <callbackPacketReceived+0x7bc>
    errors++;
    142a:	3201      	adds	r2, #1
    142c:	b2d2      	uxtb	r2, r2
    142e:	e7d0      	b.n	13d2 <callbackPacketReceived+0x7c2>
    1430:	930d      	str	r3, [sp, #52]	; 0x34
	  }
  }

  // Statistics
  if(!reception)
    1432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1434:	2b00      	cmp	r3, #0
    1436:	d01f      	beq.n	1478 <callbackPacketReceived+0x868>
  {
    statMissingPackets++;
  }
  else
  {
    statReceivedPackets++;
    1438:	4a19      	ldr	r2, [pc, #100]	; (14a0 <callbackPacketReceived+0x890>)
    143a:	6813      	ldr	r3, [r2, #0]
    143c:	3301      	adds	r3, #1
    143e:	6013      	str	r3, [r2, #0]
    statNumErrors += errors;
    1440:	4a18      	ldr	r2, [pc, #96]	; (14a4 <callbackPacketReceived+0x894>)
    1442:	6813      	ldr	r3, [r2, #0]
    1444:	185b      	adds	r3, r3, r1
    1446:	6013      	str	r3, [r2, #0]
    else if(errors <= 32)
      statBERdist[6]++;
    else
      statBERdist[7]++;
	  */
	if(errors >= 30)
    1448:	291d      	cmp	r1, #29
    144a:	d900      	bls.n	144e <callbackPacketReceived+0x83e>
		errors = 30;
    144c:	211e      	movs	r1, #30
	statBERdist[errors]++;
    144e:	4a16      	ldr	r2, [pc, #88]	; (14a8 <callbackPacketReceived+0x898>)
    1450:	0089      	lsls	r1, r1, #2
    1452:	588b      	ldr	r3, [r1, r2]
    1454:	3301      	adds	r3, #1
    1456:	508b      	str	r3, [r1, r2]
      
    statLastRSSI = sparkPacketRSSI;
    1458:	4b14      	ldr	r3, [pc, #80]	; (14ac <callbackPacketReceived+0x89c>)
    145a:	781a      	ldrb	r2, [r3, #0]
    145c:	4b14      	ldr	r3, [pc, #80]	; (14b0 <callbackPacketReceived+0x8a0>)
    145e:	701a      	strb	r2, [r3, #0]
    statLastNSSI = sparkPacketNSSI;
    1460:	4b14      	ldr	r3, [pc, #80]	; (14b4 <callbackPacketReceived+0x8a4>)
    1462:	781a      	ldrb	r2, [r3, #0]
    1464:	4b14      	ldr	r3, [pc, #80]	; (14b8 <callbackPacketReceived+0x8a8>)
    1466:	701a      	strb	r2, [r3, #0]
  }
   
  
  return reception;
}
    1468:	980d      	ldr	r0, [sp, #52]	; 0x34
    146a:	b013      	add	sp, #76	; 0x4c
    146c:	bc3c      	pop	{r2, r3, r4, r5}
    146e:	4690      	mov	r8, r2
    1470:	4699      	mov	r9, r3
    1472:	46a2      	mov	sl, r4
    1474:	46ab      	mov	fp, r5
    1476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    statMissingPackets++;
    1478:	4a10      	ldr	r2, [pc, #64]	; (14bc <callbackPacketReceived+0x8ac>)
    147a:	6813      	ldr	r3, [r2, #0]
    147c:	3301      	adds	r3, #1
    147e:	6013      	str	r3, [r2, #0]
    1480:	e7f2      	b.n	1468 <callbackPacketReceived+0x858>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	20000234 	.word	0x20000234
    1488:	ffff8005 	.word	0xffff8005
    148c:	2000049c 	.word	0x2000049c
    1490:	20000304 	.word	0x20000304
    1494:	00003f05 	.word	0x00003f05
    1498:	20000c68 	.word	0x20000c68
    149c:	20000301 	.word	0x20000301
    14a0:	20000494 	.word	0x20000494
    14a4:	20000380 	.word	0x20000380
    14a8:	2000040c 	.word	0x2000040c
    14ac:	20000c76 	.word	0x20000c76
    14b0:	20000388 	.word	0x20000388
    14b4:	20000c64 	.word	0x20000c64
    14b8:	2000048c 	.word	0x2000048c
    14bc:	20000320 	.word	0x20000320

000014c0 <callBackPacketUpkeep>:

void callBackPacketUpkeep(void)
{
    14c0:	b510      	push	{r4, lr}
	if(linkAudio)
    14c2:	4b04      	ldr	r3, [pc, #16]	; (14d4 <callBackPacketUpkeep+0x14>)
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d100      	bne.n	14cc <callBackPacketUpkeep+0xc>
		audioUpkeepPacket();
}
    14ca:	bd10      	pop	{r4, pc}
		audioUpkeepPacket();
    14cc:	4b02      	ldr	r3, [pc, #8]	; (14d8 <callBackPacketUpkeep+0x18>)
    14ce:	4798      	blx	r3
}
    14d0:	e7fb      	b.n	14ca <callBackPacketUpkeep+0xa>
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	200002e8 	.word	0x200002e8
    14d8:	0000253d 	.word	0x0000253d

000014dc <callbackLinkLost>:

void callbackLinkLost(void)
{
  statLinkLost++;
    14dc:	4a02      	ldr	r2, [pc, #8]	; (14e8 <callbackLinkLost+0xc>)
    14de:	6813      	ldr	r3, [r2, #0]
    14e0:	3301      	adds	r3, #1
    14e2:	6013      	str	r3, [r2, #0]
}
    14e4:	4770      	bx	lr
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	20000384 	.word	0x20000384

000014ec <appStart>:
  statException++;
}

// Application layer
void appStart(void)
{
    14ec:	b510      	push	{r4, lr}
	if(linkAudio)
    14ee:	4b07      	ldr	r3, [pc, #28]	; (150c <appStart+0x20>)
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d106      	bne.n	1504 <appStart+0x18>
		audioStart();
	audioReset();
    14f6:	4b06      	ldr	r3, [pc, #24]	; (1510 <appStart+0x24>)
    14f8:	4798      	blx	r3
	sparkStartRadio();
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <appStart+0x28>)
    14fc:	4798      	blx	r3
	resetStatistics();
    14fe:	4b06      	ldr	r3, [pc, #24]	; (1518 <appStart+0x2c>)
    1500:	4798      	blx	r3
}
    1502:	bd10      	pop	{r4, pc}
		audioStart();
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <appStart+0x30>)
    1506:	4798      	blx	r3
    1508:	e7f5      	b.n	14f6 <appStart+0xa>
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	200002e8 	.word	0x200002e8
    1510:	00002379 	.word	0x00002379
    1514:	00003f3d 	.word	0x00003f3d
    1518:	00000419 	.word	0x00000419
    151c:	00002355 	.word	0x00002355

00001520 <appStop>:

void appStop(void)
{	
    1520:	b510      	push	{r4, lr}
	sparkStopRadio();
    1522:	4b05      	ldr	r3, [pc, #20]	; (1538 <appStop+0x18>)
    1524:	4798      	blx	r3
	if(linkAudio)
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <appStop+0x1c>)
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b00      	cmp	r3, #0
    152c:	d100      	bne.n	1530 <appStop+0x10>
		audioStop();
}
    152e:	bd10      	pop	{r4, pc}
		audioStop();
    1530:	4b03      	ldr	r3, [pc, #12]	; (1540 <appStop+0x20>)
    1532:	4798      	blx	r3
}
    1534:	e7fb      	b.n	152e <appStop+0xe>
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	000044fd 	.word	0x000044fd
    153c:	200002e8 	.word	0x200002e8
    1540:	0000236d 	.word	0x0000236d

00001544 <appInit>:

void appInit(void)
{
    1544:	b510      	push	{r4, lr}
  BISTcompleted = sparkBIST(false);
  if(!BISTcompleted)
    return;*/
  
  // Setup radio
  sparkRadioSetup();
    1546:	4b08      	ldr	r3, [pc, #32]	; (1568 <appInit+0x24>)
    1548:	4798      	blx	r3
  
  // Setup link parameters  
  defaultLinkSettings();
    154a:	4b08      	ldr	r3, [pc, #32]	; (156c <appInit+0x28>)
    154c:	4798      	blx	r3
  configureLink();
    154e:	4b08      	ldr	r3, [pc, #32]	; (1570 <appInit+0x2c>)
    1550:	4798      	blx	r3
  
  // Setup Audio
  if(linkAudio)
    1552:	4b08      	ldr	r3, [pc, #32]	; (1574 <appInit+0x30>)
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	d102      	bne.n	1560 <appInit+0x1c>
    audioConfigure();
  
  // Start
  appStart();
    155a:	4b07      	ldr	r3, [pc, #28]	; (1578 <appInit+0x34>)
    155c:	4798      	blx	r3
}
    155e:	bd10      	pop	{r4, pc}
    audioConfigure();
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <appInit+0x38>)
    1562:	4798      	blx	r3
    1564:	e7f9      	b.n	155a <appInit+0x16>
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	00003b5d 	.word	0x00003b5d
    156c:	000002b5 	.word	0x000002b5
    1570:	00000381 	.word	0x00000381
    1574:	200002e8 	.word	0x200002e8
    1578:	000014ed 	.word	0x000014ed
    157c:	000023b9 	.word	0x000023b9

00001580 <guiSendSensor>:
// GUI interface
uint8_t in_buf[128];
uint8_t out_buf[128];

void guiSendSensor(void) // Send BER distribution
{
    1580:	b510      	push	{r4, lr}

	uint8_t b;
	uint16_t p = 0; // Pointer of packet

	// Byte #0 Header
	out_buf[p] = 0xf7; p++;
    1582:	4812      	ldr	r0, [pc, #72]	; (15cc <guiSendSensor+0x4c>)
    1584:	23f7      	movs	r3, #247	; 0xf7
    1586:	7003      	strb	r3, [r0, #0]
	
	// Byte #1 (MSB), byte #2 (LSB), Node Address
	out_buf[p] = 0x01; p++;
    1588:	3bf6      	subs	r3, #246	; 0xf6
    158a:	7043      	strb	r3, [r0, #1]
	out_buf[p] = 0x02; p++;
    158c:	3301      	adds	r3, #1
    158e:	7083      	strb	r3, [r0, #2]

	// Byte #2 (MSB), byte #3 (LSB), Temperature
	out_buf[p] = sensorRXbuffer[2];p++;
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <guiSendSensor+0x50>)
    1592:	789a      	ldrb	r2, [r3, #2]
    1594:	70c2      	strb	r2, [r0, #3]
	out_buf[p] = sensorRXbuffer[4];p++;
    1596:	791a      	ldrb	r2, [r3, #4]
    1598:	7102      	strb	r2, [r0, #4]

	// Byte #4 (MSB), byte #5 (LSB), Relative Humidity
	out_buf[p] = sensorRXbuffer[7]; p++;
    159a:	79da      	ldrb	r2, [r3, #7]
    159c:	7142      	strb	r2, [r0, #5]
	out_buf[p] = sensorRXbuffer[8]; p++;
    159e:	7a1a      	ldrb	r2, [r3, #8]
    15a0:	7182      	strb	r2, [r0, #6]

	// Byte #6 (MSB), byte #7 (LSB), Light intensity
	out_buf[p] = sensorRXbuffer[5] & 0x7f; p++;
    15a2:	7959      	ldrb	r1, [r3, #5]
    15a4:	227f      	movs	r2, #127	; 0x7f
    15a6:	400a      	ands	r2, r1
    15a8:	71c2      	strb	r2, [r0, #7]
	out_buf[p] = sensorRXbuffer[6]; p++;
    15aa:	799a      	ldrb	r2, [r3, #6]
    15ac:	7202      	strb	r2, [r0, #8]

	// Byte #8 (MSB), byte #9 (LSB), X-Axis Acceleration
	out_buf[p] = sparkRXbuffer[0]; p++;
    15ae:	4a09      	ldr	r2, [pc, #36]	; (15d4 <guiSendSensor+0x54>)
    15b0:	6812      	ldr	r2, [r2, #0]
    15b2:	7812      	ldrb	r2, [r2, #0]
    15b4:	7242      	strb	r2, [r0, #9]
	out_buf[p] = 0x00; p++;
    15b6:	2200      	movs	r2, #0
    15b8:	7282      	strb	r2, [r0, #10]

	// Byte #10 (MSB), byte #11 (LSB), Y-Axis Acceleration
	//OPT3001_data = OPT3001_read();
	out_buf[p] = sensorRXbuffer[9]; p++;
    15ba:	7a5b      	ldrb	r3, [r3, #9]
    15bc:	72c3      	strb	r3, [r0, #11]
	out_buf[p] = 0x00; p++;
    15be:	7302      	strb	r2, [r0, #12]

	// Byte #12 (MSB), byte #13 (LSB), Z-Axis Acceleration
	out_buf[p] = 0x00; p++;
    15c0:	7342      	strb	r2, [r0, #13]
	out_buf[p] = 0x00; p++;
    15c2:	7382      	strb	r2, [r0, #14]
	
	// Send the packet
	usb_put(out_buf, p);
    15c4:	210f      	movs	r1, #15
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <guiSendSensor+0x58>)
    15c8:	4798      	blx	r3
}
    15ca:	bd10      	pop	{r4, pc}
    15cc:	200004b0 	.word	0x200004b0
    15d0:	2000049c 	.word	0x2000049c
    15d4:	20000c68 	.word	0x20000c68
    15d8:	00004f05 	.word	0x00004f05

000015dc <guiSendBER>:

void guiSendBER(void) // Send BER distribution
{
    15dc:	b510      	push	{r4, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x04; p++;
    15de:	4b1c      	ldr	r3, [pc, #112]	; (1650 <guiSendBER+0x74>)
    15e0:	2204      	movs	r2, #4
    15e2:	701a      	strb	r2, [r3, #0]
	
	// Byte #1 (MSB), byte #2, byte #3 (LSB), total number of errors
	out_buf[p] = (statNumErrors >> 16) & 0xFF; p++;
    15e4:	4a1b      	ldr	r2, [pc, #108]	; (1654 <guiSendBER+0x78>)
    15e6:	6812      	ldr	r2, [r2, #0]
    15e8:	0c11      	lsrs	r1, r2, #16
    15ea:	7059      	strb	r1, [r3, #1]
	out_buf[p] = (statNumErrors >> 8) & 0xFF; p++;
    15ec:	0a11      	lsrs	r1, r2, #8
    15ee:	7099      	strb	r1, [r3, #2]
	out_buf[p] = (statNumErrors >> 0) & 0xFF; p++;
    15f0:	70da      	strb	r2, [r3, #3]
	
	// Byte #4 and byte #5 and byte #6
	out_buf[p++] = statLastRSSI;
    15f2:	4a19      	ldr	r2, [pc, #100]	; (1658 <guiSendBER+0x7c>)
    15f4:	7811      	ldrb	r1, [r2, #0]
    15f6:	7119      	strb	r1, [r3, #4]
	out_buf[p++] = statLastNSSI;
    15f8:	4a18      	ldr	r2, [pc, #96]	; (165c <guiSendBER+0x80>)
    15fa:	7812      	ldrb	r2, [r2, #0]
    15fc:	715a      	strb	r2, [r3, #5]
	out_buf[p++] =(statLastNSSI-statLastRSSI)/2;
    15fe:	1a51      	subs	r1, r2, r1
    1600:	0fca      	lsrs	r2, r1, #31
    1602:	1852      	adds	r2, r2, r1
    1604:	1052      	asrs	r2, r2, #1
    1606:	719a      	strb	r2, [r3, #6]
	
	// Error distribution, 2 bytes per bin (MSB first), 0 errors first
	// ! increase number of bins?
	out_buf[p] = statSendPackets >> 8; p++;
    1608:	4a15      	ldr	r2, [pc, #84]	; (1660 <guiSendBER+0x84>)
    160a:	6812      	ldr	r2, [r2, #0]
    160c:	0a11      	lsrs	r1, r2, #8
    160e:	71d9      	strb	r1, [r3, #7]
	out_buf[p] = statSendPackets & 0xFF; p++;
    1610:	721a      	strb	r2, [r3, #8]
	for(uint8_t i=0;i<31;i++)
    1612:	2300      	movs	r3, #0
	out_buf[p] = statSendPackets & 0xFF; p++;
    1614:	2109      	movs	r1, #9
	for(uint8_t i=0;i<31;i++)
    1616:	e00c      	b.n	1632 <guiSendBER+0x56>
	{
		out_buf[p] = statBERdist[i] >> 8; p++;
    1618:	0098      	lsls	r0, r3, #2
    161a:	4a12      	ldr	r2, [pc, #72]	; (1664 <guiSendBER+0x88>)
    161c:	5884      	ldr	r4, [r0, r2]
    161e:	0a22      	lsrs	r2, r4, #8
    1620:	480b      	ldr	r0, [pc, #44]	; (1650 <guiSendBER+0x74>)
    1622:	5442      	strb	r2, [r0, r1]
    1624:	1c4a      	adds	r2, r1, #1
    1626:	b292      	uxth	r2, r2
		out_buf[p] = statBERdist[i] & 0xFF; p++;
    1628:	5484      	strb	r4, [r0, r2]
    162a:	3102      	adds	r1, #2
    162c:	b289      	uxth	r1, r1
	for(uint8_t i=0;i<31;i++)
    162e:	3301      	adds	r3, #1
    1630:	b2db      	uxtb	r3, r3
    1632:	2b1e      	cmp	r3, #30
    1634:	d9f0      	bls.n	1618 <guiSendBER+0x3c>
	}	
	out_buf[p] = statMissingPackets >> 8; p++;
    1636:	4b0c      	ldr	r3, [pc, #48]	; (1668 <guiSendBER+0x8c>)
    1638:	681a      	ldr	r2, [r3, #0]
    163a:	0a13      	lsrs	r3, r2, #8
    163c:	4804      	ldr	r0, [pc, #16]	; (1650 <guiSendBER+0x74>)
    163e:	5443      	strb	r3, [r0, r1]
    1640:	1c4b      	adds	r3, r1, #1
    1642:	b29b      	uxth	r3, r3
	out_buf[p] = statMissingPackets & 0xFF; p++;
    1644:	54c2      	strb	r2, [r0, r3]
    1646:	3102      	adds	r1, #2
    1648:	b289      	uxth	r1, r1
	
	// Send the packet
	usb_put(out_buf, p);
    164a:	4b08      	ldr	r3, [pc, #32]	; (166c <guiSendBER+0x90>)
    164c:	4798      	blx	r3
}
    164e:	bd10      	pop	{r4, pc}
    1650:	200004b0 	.word	0x200004b0
    1654:	20000380 	.word	0x20000380
    1658:	20000388 	.word	0x20000388
    165c:	2000048c 	.word	0x2000048c
    1660:	20000378 	.word	0x20000378
    1664:	2000040c 	.word	0x2000040c
    1668:	20000320 	.word	0x20000320
    166c:	00004f05 	.word	0x00004f05

00001670 <guiSendAudio>:

void guiSendAudio(void) // Send BER distribution
{
    1670:	b510      	push	{r4, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x05; p++;
    1672:	4803      	ldr	r0, [pc, #12]	; (1680 <guiSendAudio+0x10>)
    1674:	2305      	movs	r3, #5
    1676:	7003      	strb	r3, [r0, #0]
	
	// Send the packet
	usb_put(out_buf, p);
    1678:	2101      	movs	r1, #1
    167a:	4b02      	ldr	r3, [pc, #8]	; (1684 <guiSendAudio+0x14>)
    167c:	4798      	blx	r3
}
    167e:	bd10      	pop	{r4, pc}
    1680:	200004b0 	.word	0x200004b0
    1684:	00004f05 	.word	0x00004f05

00001688 <guiSendConfig>:

void guiSendConfig(void) // Sends the configuration package
{
    1688:	b570      	push	{r4, r5, r6, lr}
	uint8_t b;
	uint16_t p = 0; // Pointer of packet
	
	// Header
	out_buf[p] = 0x03; p++;
    168a:	2203      	movs	r2, #3
    168c:	4b28      	ldr	r3, [pc, #160]	; (1730 <guiSendConfig+0xa8>)
    168e:	701a      	strb	r2, [r3, #0]
	
	// Byte #0, bit 1-0 tells application: BER (0b00) or audio (0b01)
	b = 0;
	if(linkBidirectional)
    1690:	4b28      	ldr	r3, [pc, #160]	; (1734 <guiSendConfig+0xac>)
    1692:	781b      	ldrb	r3, [r3, #0]
    1694:	2b00      	cmp	r3, #0
    1696:	d040      	beq.n	171a <guiSendConfig+0x92>
	{
		if(linkMaster)
    1698:	4b27      	ldr	r3, [pc, #156]	; (1738 <guiSendConfig+0xb0>)
    169a:	781b      	ldrb	r3, [r3, #0]
    169c:	2b00      	cmp	r3, #0
    169e:	d042      	beq.n	1726 <guiSendConfig+0x9e>
			b |= 0x03;
    16a0:	2503      	movs	r5, #3
		if(linkMaster)
			b |= 0x00;
		else
			b |= 0x01;
	}
	b <<= 2;
    16a2:	00ad      	lsls	r5, r5, #2
	//if(linkMaster)
	//	b |= 1 << 3;
	if(linkAudio)
    16a4:	4b25      	ldr	r3, [pc, #148]	; (173c <guiSendConfig+0xb4>)
    16a6:	781b      	ldrb	r3, [r3, #0]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d002      	beq.n	16b2 <guiSendConfig+0x2a>
		b |= 1 << 0;
    16ac:	2301      	movs	r3, #1
    16ae:	431d      	orrs	r5, r3
    16b0:	b2ed      	uxtb	r5, r5
	if(linkSensor)
    16b2:	4b23      	ldr	r3, [pc, #140]	; (1740 <guiSendConfig+0xb8>)
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	2b00      	cmp	r3, #0
    16b8:	d002      	beq.n	16c0 <guiSendConfig+0x38>
		b |= 0x03;
    16ba:	2303      	movs	r3, #3
    16bc:	431d      	orrs	r5, r3
    16be:	b2ed      	uxtb	r5, r5
	if(linkRandom)
    16c0:	4b20      	ldr	r3, [pc, #128]	; (1744 <guiSendConfig+0xbc>)
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d002      	beq.n	16ce <guiSendConfig+0x46>
		b |= 1 << 5;
    16c8:	2320      	movs	r3, #32
    16ca:	431d      	orrs	r5, r3
    16cc:	b2ed      	uxtb	r5, r5
	if(sparkIsRunning())
    16ce:	4b1e      	ldr	r3, [pc, #120]	; (1748 <guiSendConfig+0xc0>)
    16d0:	4798      	blx	r3
    16d2:	2800      	cmp	r0, #0
    16d4:	d003      	beq.n	16de <guiSendConfig+0x56>
		b |= 1 << 7;
    16d6:	2380      	movs	r3, #128	; 0x80
    16d8:	425b      	negs	r3, r3
    16da:	431d      	orrs	r5, r3
    16dc:	b2ed      	uxtb	r5, r5
	out_buf[p] = b; p++;
    16de:	4c14      	ldr	r4, [pc, #80]	; (1730 <guiSendConfig+0xa8>)
    16e0:	7065      	strb	r5, [r4, #1]
	
	// Byte #1 (MSB), byte #2 (LSB), TX address, not implemented
	out_buf[p] = 0; p++;
    16e2:	2500      	movs	r5, #0
    16e4:	70a5      	strb	r5, [r4, #2]
	out_buf[p] = 0; p++;
    16e6:	70e5      	strb	r5, [r4, #3]
	
	// Byte #3 (MSB), byte #4 (LSB), RX address, not implemented
	out_buf[p] = 0; p++;
    16e8:	7125      	strb	r5, [r4, #4]
	out_buf[p] = 0; p++;
    16ea:	7165      	strb	r5, [r4, #5]
	
	// Byte #5, packet payload size in bytes
	out_buf[p] = linkPacketSize/8; p++;
    16ec:	4b17      	ldr	r3, [pc, #92]	; (174c <guiSendConfig+0xc4>)
    16ee:	881b      	ldrh	r3, [r3, #0]
    16f0:	08db      	lsrs	r3, r3, #3
    16f2:	71a3      	strb	r3, [r4, #6]
	
	// Byte #6 (MSB), byte #7 (LSB), packet period in multiples of 100us
	uint16_t period = 10000 / linkPacketRate; // linkPacketRate is packets/s
    16f4:	4b16      	ldr	r3, [pc, #88]	; (1750 <guiSendConfig+0xc8>)
    16f6:	8819      	ldrh	r1, [r3, #0]
    16f8:	4816      	ldr	r0, [pc, #88]	; (1754 <guiSendConfig+0xcc>)
    16fa:	4b17      	ldr	r3, [pc, #92]	; (1758 <guiSendConfig+0xd0>)
    16fc:	4798      	blx	r3
    16fe:	b283      	uxth	r3, r0
	out_buf[p] = period >> 8; p++;
    1700:	0a1b      	lsrs	r3, r3, #8
    1702:	71e3      	strb	r3, [r4, #7]
	out_buf[p] = period & 0x00FF; p++;
    1704:	b2c0      	uxtb	r0, r0
    1706:	7220      	strb	r0, [r4, #8]
	
	// Byte #8 (MSB), byte #9 (LSB), packet period in multiples of 100us
	//uint16_t period = 10000 / linkPacketRate; // linkPacketRate is packets/s
	out_buf[p] = period >> 8; p++;
    1708:	7263      	strb	r3, [r4, #9]
	out_buf[p] = period & 0x00FF; p++;
    170a:	72a0      	strb	r0, [r4, #10]
	
	// Byte #10, parameter bitset, not implemented
	out_buf[p] = 0; p++;
    170c:	72e5      	strb	r5, [r4, #11]
	
	// Byte #11, not implemented
	out_buf[p] = 0; p++;
    170e:	7325      	strb	r5, [r4, #12]
	
	// Send the packet
	usb_put(out_buf, p);
    1710:	210d      	movs	r1, #13
    1712:	0020      	movs	r0, r4
    1714:	4b11      	ldr	r3, [pc, #68]	; (175c <guiSendConfig+0xd4>)
    1716:	4798      	blx	r3
}
    1718:	bd70      	pop	{r4, r5, r6, pc}
		if(linkMaster)
    171a:	4b07      	ldr	r3, [pc, #28]	; (1738 <guiSendConfig+0xb0>)
    171c:	781b      	ldrb	r3, [r3, #0]
    171e:	2b00      	cmp	r3, #0
    1720:	d003      	beq.n	172a <guiSendConfig+0xa2>
			b |= 0x00;
    1722:	2500      	movs	r5, #0
    1724:	e7bd      	b.n	16a2 <guiSendConfig+0x1a>
			b |= 0x02;	
    1726:	2502      	movs	r5, #2
    1728:	e7bb      	b.n	16a2 <guiSendConfig+0x1a>
			b |= 0x01;
    172a:	2501      	movs	r5, #1
    172c:	e7b9      	b.n	16a2 <guiSendConfig+0x1a>
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	200004b0 	.word	0x200004b0
    1734:	200005b2 	.word	0x200005b2
    1738:	20000488 	.word	0x20000488
    173c:	200002e8 	.word	0x200002e8
    1740:	2000048d 	.word	0x2000048d
    1744:	20000301 	.word	0x20000301
    1748:	000045dd 	.word	0x000045dd
    174c:	20000498 	.word	0x20000498
    1750:	200005b6 	.word	0x200005b6
    1754:	00002710 	.word	0x00002710
    1758:	0000543d 	.word	0x0000543d
    175c:	00004f05 	.word	0x00004f05

00001760 <guiReceiveConfig>:

void guiReceiveConfig(void) // Changes configuration, reads from in_buf
{
    1760:	b510      	push	{r4, lr}
	uint16_t p = 1; // Pointer of packet, start from 1 because of header	
	
	//appStop();	
	
	// Byte #0, , bit 1-0 tells application: BER (0b00) or audio (0b01)
	b = in_buf[p]; p++;
    1762:	4b38      	ldr	r3, [pc, #224]	; (1844 <guiReceiveConfig+0xe4>)
    1764:	7859      	ldrb	r1, [r3, #1]
	switch( (b >> 2) & 0x03)
    1766:	088b      	lsrs	r3, r1, #2
    1768:	2203      	movs	r2, #3
    176a:	401a      	ands	r2, r3
    176c:	2a01      	cmp	r2, #1
    176e:	d036      	beq.n	17de <guiReceiveConfig+0x7e>
    1770:	2a00      	cmp	r2, #0
    1772:	d02d      	beq.n	17d0 <guiReceiveConfig+0x70>
    1774:	2a02      	cmp	r2, #2
    1776:	d038      	beq.n	17ea <guiReceiveConfig+0x8a>
    1778:	2a03      	cmp	r2, #3
    177a:	d03d      	beq.n	17f8 <guiReceiveConfig+0x98>
    177c:	2303      	movs	r3, #3
    177e:	400b      	ands	r3, r1
		case 0x03:
			linkBidirectional = true;
			linkMaster = true;
			break;
	}
	switch((b&0x03))
    1780:	2b02      	cmp	r3, #2
    1782:	d046      	beq.n	1812 <guiReceiveConfig+0xb2>
    1784:	d33e      	bcc.n	1804 <guiReceiveConfig+0xa4>
    1786:	2b03      	cmp	r3, #3
    1788:	d049      	beq.n	181e <guiReceiveConfig+0xbe>
		case 0x03:
			linkSensor = true;
			linkAudio = false;
			break;
	}
	probe = (b&0x03);
    178a:	4a2f      	ldr	r2, [pc, #188]	; (1848 <guiReceiveConfig+0xe8>)
    178c:	7013      	strb	r3, [r2, #0]
	// Byte #3 (MSB), byte #4 (LSB), RX address, not implemented
	b = in_buf[p]; p++;
	b = in_buf[p]; p++;
	
	// Byte #5, packet payload size in bytes
	b = in_buf[p]; p++;
    178e:	4b2d      	ldr	r3, [pc, #180]	; (1844 <guiReceiveConfig+0xe4>)
    1790:	799a      	ldrb	r2, [r3, #6]
	linkPacketSize = ((uint16_t)b) * 8l;
    1792:	00d2      	lsls	r2, r2, #3
    1794:	492d      	ldr	r1, [pc, #180]	; (184c <guiReceiveConfig+0xec>)
    1796:	800a      	strh	r2, [r1, #0]
	
	// Byte #6 (MSB), byte #7 (LSB), packet period in multiples of 100us
	uint16_t period;
	b = in_buf[p]; p++;
    1798:	79d9      	ldrb	r1, [r3, #7]
	period = b; period << 8;
	b = in_buf[p]; p++;
    179a:	7a1b      	ldrb	r3, [r3, #8]
	period |= b;
	linkPacketRate = 10000 / period;
    179c:	4319      	orrs	r1, r3
    179e:	482c      	ldr	r0, [pc, #176]	; (1850 <guiReceiveConfig+0xf0>)
    17a0:	4b2c      	ldr	r3, [pc, #176]	; (1854 <guiReceiveConfig+0xf4>)
    17a2:	4798      	blx	r3
    17a4:	4b2c      	ldr	r3, [pc, #176]	; (1858 <guiReceiveConfig+0xf8>)
    17a6:	8018      	strh	r0, [r3, #0]
	b = in_buf[p]; p++;
	
	// Byte #11, not implemented
	b = in_buf[p]; p++;

	if(linkSensor){
    17a8:	4b2c      	ldr	r3, [pc, #176]	; (185c <guiReceiveConfig+0xfc>)
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	2b00      	cmp	r3, #0
    17ae:	d046      	beq.n	183e <guiReceiveConfig+0xde>
		linkPacketSize = 160;
    17b0:	22a0      	movs	r2, #160	; 0xa0
    17b2:	4b26      	ldr	r3, [pc, #152]	; (184c <guiReceiveConfig+0xec>)
    17b4:	801a      	strh	r2, [r3, #0]
		linkPacketRate = 2000;
    17b6:	22fa      	movs	r2, #250	; 0xfa
    17b8:	00d2      	lsls	r2, r2, #3
    17ba:	4b27      	ldr	r3, [pc, #156]	; (1858 <guiReceiveConfig+0xf8>)
    17bc:	801a      	strh	r2, [r3, #0]
		if(linkMaster)
    17be:	4b28      	ldr	r3, [pc, #160]	; (1860 <guiReceiveConfig+0x100>)
    17c0:	781b      	ldrb	r3, [r3, #0]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d002      	beq.n	17cc <guiReceiveConfig+0x6c>
			linkSleepMode = SPARK_SLEEP_DEEP;
    17c6:	2203      	movs	r2, #3
    17c8:	4b26      	ldr	r3, [pc, #152]	; (1864 <guiReceiveConfig+0x104>)
    17ca:	701a      	strb	r2, [r3, #0]
{
    17cc:	2300      	movs	r3, #0
    17ce:	e034      	b.n	183a <guiReceiveConfig+0xda>
			linkBidirectional = false;
    17d0:	2200      	movs	r2, #0
    17d2:	4b25      	ldr	r3, [pc, #148]	; (1868 <guiReceiveConfig+0x108>)
    17d4:	701a      	strb	r2, [r3, #0]
			linkMaster = true;
    17d6:	3201      	adds	r2, #1
    17d8:	4b21      	ldr	r3, [pc, #132]	; (1860 <guiReceiveConfig+0x100>)
    17da:	701a      	strb	r2, [r3, #0]
			break;
    17dc:	e7ce      	b.n	177c <guiReceiveConfig+0x1c>
			linkBidirectional = false;
    17de:	2300      	movs	r3, #0
    17e0:	4a21      	ldr	r2, [pc, #132]	; (1868 <guiReceiveConfig+0x108>)
    17e2:	7013      	strb	r3, [r2, #0]
			linkMaster = false;
    17e4:	4a1e      	ldr	r2, [pc, #120]	; (1860 <guiReceiveConfig+0x100>)
    17e6:	7013      	strb	r3, [r2, #0]
			break;
    17e8:	e7c8      	b.n	177c <guiReceiveConfig+0x1c>
			linkBidirectional = true;
    17ea:	2201      	movs	r2, #1
    17ec:	4b1e      	ldr	r3, [pc, #120]	; (1868 <guiReceiveConfig+0x108>)
    17ee:	701a      	strb	r2, [r3, #0]
			linkMaster = false;
    17f0:	2200      	movs	r2, #0
    17f2:	4b1b      	ldr	r3, [pc, #108]	; (1860 <guiReceiveConfig+0x100>)
    17f4:	701a      	strb	r2, [r3, #0]
			break;
    17f6:	e7c1      	b.n	177c <guiReceiveConfig+0x1c>
			linkBidirectional = true;
    17f8:	2301      	movs	r3, #1
    17fa:	4a1b      	ldr	r2, [pc, #108]	; (1868 <guiReceiveConfig+0x108>)
    17fc:	7013      	strb	r3, [r2, #0]
			linkMaster = true;
    17fe:	4a18      	ldr	r2, [pc, #96]	; (1860 <guiReceiveConfig+0x100>)
    1800:	7013      	strb	r3, [r2, #0]
			break;
    1802:	e7bb      	b.n	177c <guiReceiveConfig+0x1c>
			linkAudio = true;
    1804:	2101      	movs	r1, #1
    1806:	4a19      	ldr	r2, [pc, #100]	; (186c <guiReceiveConfig+0x10c>)
    1808:	7011      	strb	r1, [r2, #0]
			linkSensor = false;
    180a:	2100      	movs	r1, #0
    180c:	4a13      	ldr	r2, [pc, #76]	; (185c <guiReceiveConfig+0xfc>)
    180e:	7011      	strb	r1, [r2, #0]
			break;
    1810:	e7bb      	b.n	178a <guiReceiveConfig+0x2a>
			linkAudio = false;
    1812:	2200      	movs	r2, #0
    1814:	4915      	ldr	r1, [pc, #84]	; (186c <guiReceiveConfig+0x10c>)
    1816:	700a      	strb	r2, [r1, #0]
			linkSensor = false;
    1818:	4910      	ldr	r1, [pc, #64]	; (185c <guiReceiveConfig+0xfc>)
    181a:	700a      	strb	r2, [r1, #0]
			break;
    181c:	e7b5      	b.n	178a <guiReceiveConfig+0x2a>
			linkSensor = true;
    181e:	2101      	movs	r1, #1
    1820:	4a0e      	ldr	r2, [pc, #56]	; (185c <guiReceiveConfig+0xfc>)
    1822:	7011      	strb	r1, [r2, #0]
			linkAudio = false;
    1824:	2100      	movs	r1, #0
    1826:	4a11      	ldr	r2, [pc, #68]	; (186c <guiReceiveConfig+0x10c>)
    1828:	7011      	strb	r1, [r2, #0]
			break;
    182a:	e7ae      	b.n	178a <guiReceiveConfig+0x2a>
		for(unsigned char i=0;i<30;i++)
		sparkTXbuffer[i] = 0x00;
    182c:	4a10      	ldr	r2, [pc, #64]	; (1870 <guiReceiveConfig+0x110>)
    182e:	6812      	ldr	r2, [r2, #0]
    1830:	18d2      	adds	r2, r2, r3
    1832:	2100      	movs	r1, #0
    1834:	7011      	strb	r1, [r2, #0]
		for(unsigned char i=0;i<30;i++)
    1836:	3301      	adds	r3, #1
    1838:	b2db      	uxtb	r3, r3
    183a:	2b1d      	cmp	r3, #29
    183c:	d9f6      	bls.n	182c <guiReceiveConfig+0xcc>
		}
	
	configureLink();
    183e:	4b0d      	ldr	r3, [pc, #52]	; (1874 <guiReceiveConfig+0x114>)
    1840:	4798      	blx	r3
	//appStart();
}
    1842:	bd10      	pop	{r4, pc}
    1844:	2000038c 	.word	0x2000038c
    1848:	200002d2 	.word	0x200002d2
    184c:	20000498 	.word	0x20000498
    1850:	00002710 	.word	0x00002710
    1854:	0000543d 	.word	0x0000543d
    1858:	200005b6 	.word	0x200005b6
    185c:	2000048d 	.word	0x2000048d
    1860:	20000488 	.word	0x20000488
    1864:	200002e9 	.word	0x200002e9
    1868:	200005b2 	.word	0x200005b2
    186c:	200002e8 	.word	0x200002e8
    1870:	20000c70 	.word	0x20000c70
    1874:	00000381 	.word	0x00000381

00001878 <guiHandle>:

void guiHandle(void)
{
    1878:	b510      	push	{r4, lr}
	uint16_t size = usbBytesAvailable();	
    187a:	4b25      	ldr	r3, [pc, #148]	; (1910 <guiHandle+0x98>)
    187c:	4798      	blx	r3
    187e:	0001      	movs	r1, r0
	usb_get(in_buf, size);	
    1880:	4c24      	ldr	r4, [pc, #144]	; (1914 <guiHandle+0x9c>)
    1882:	0020      	movs	r0, r4
    1884:	4b24      	ldr	r3, [pc, #144]	; (1918 <guiHandle+0xa0>)
    1886:	4798      	blx	r3
	
	// Read first byte for command
	switch(in_buf[0])
    1888:	7823      	ldrb	r3, [r4, #0]
    188a:	2b47      	cmp	r3, #71	; 0x47
    188c:	d035      	beq.n	18fa <guiHandle+0x82>
    188e:	d911      	bls.n	18b4 <guiHandle+0x3c>
    1890:	2b72      	cmp	r3, #114	; 0x72
    1892:	d026      	beq.n	18e2 <guiHandle+0x6a>
    1894:	d91b      	bls.n	18ce <guiHandle+0x56>
    1896:	2b77      	cmp	r3, #119	; 0x77
    1898:	d01e      	beq.n	18d8 <guiHandle+0x60>
    189a:	2b7e      	cmp	r3, #126	; 0x7e
    189c:	d134      	bne.n	1908 <guiHandle+0x90>
		case '-': // Stop radio
			appStop();
			break;
			
		case '~': // Request data
			if(linkAudio)
    189e:	4b1f      	ldr	r3, [pc, #124]	; (191c <guiHandle+0xa4>)
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d123      	bne.n	18ee <guiHandle+0x76>
				guiSendAudio();
			else if(linkSensor)
    18a6:	4b1e      	ldr	r3, [pc, #120]	; (1920 <guiHandle+0xa8>)
    18a8:	781b      	ldrb	r3, [r3, #0]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d022      	beq.n	18f4 <guiHandle+0x7c>
				guiSendSensor();
    18ae:	4b1d      	ldr	r3, [pc, #116]	; (1924 <guiHandle+0xac>)
    18b0:	4798      	blx	r3
    18b2:	e006      	b.n	18c2 <guiHandle+0x4a>
	switch(in_buf[0])
    18b4:	2b2b      	cmp	r3, #43	; 0x2b
    18b6:	d017      	beq.n	18e8 <guiHandle+0x70>
    18b8:	d804      	bhi.n	18c4 <guiHandle+0x4c>
    18ba:	3b05      	subs	r3, #5
    18bc:	b2db      	uxtb	r3, r3
    18be:	2b02      	cmp	r3, #2
    18c0:	d822      	bhi.n	1908 <guiHandle+0x90>
			
		default:
			guiSendConfig();
			break;
	}	
}
    18c2:	bd10      	pop	{r4, pc}
	switch(in_buf[0])
    18c4:	2b2d      	cmp	r3, #45	; 0x2d
    18c6:	d11f      	bne.n	1908 <guiHandle+0x90>
			appStop();
    18c8:	4b17      	ldr	r3, [pc, #92]	; (1928 <guiHandle+0xb0>)
    18ca:	4798      	blx	r3
			break;
    18cc:	e7f9      	b.n	18c2 <guiHandle+0x4a>
	switch(in_buf[0])
    18ce:	2b69      	cmp	r3, #105	; 0x69
    18d0:	d11a      	bne.n	1908 <guiHandle+0x90>
			guiSendConfig();
    18d2:	4b16      	ldr	r3, [pc, #88]	; (192c <guiHandle+0xb4>)
    18d4:	4798      	blx	r3
			break;
    18d6:	e7f4      	b.n	18c2 <guiHandle+0x4a>
			guiReceiveConfig();
    18d8:	4b15      	ldr	r3, [pc, #84]	; (1930 <guiHandle+0xb8>)
    18da:	4798      	blx	r3
			guiSendConfig();
    18dc:	4b13      	ldr	r3, [pc, #76]	; (192c <guiHandle+0xb4>)
    18de:	4798      	blx	r3
			break;
    18e0:	e7ef      	b.n	18c2 <guiHandle+0x4a>
			resetStatistics();
    18e2:	4b14      	ldr	r3, [pc, #80]	; (1934 <guiHandle+0xbc>)
    18e4:	4798      	blx	r3
			break;
    18e6:	e7ec      	b.n	18c2 <guiHandle+0x4a>
			appStart();			
    18e8:	4b13      	ldr	r3, [pc, #76]	; (1938 <guiHandle+0xc0>)
    18ea:	4798      	blx	r3
			break;
    18ec:	e7e9      	b.n	18c2 <guiHandle+0x4a>
				guiSendAudio();
    18ee:	4b13      	ldr	r3, [pc, #76]	; (193c <guiHandle+0xc4>)
    18f0:	4798      	blx	r3
    18f2:	e7e6      	b.n	18c2 <guiHandle+0x4a>
				guiSendBER();
    18f4:	4b12      	ldr	r3, [pc, #72]	; (1940 <guiHandle+0xc8>)
    18f6:	4798      	blx	r3
    18f8:	e7e3      	b.n	18c2 <guiHandle+0x4a>
			runGUI = false;
    18fa:	2200      	movs	r2, #0
    18fc:	4b11      	ldr	r3, [pc, #68]	; (1944 <guiHandle+0xcc>)
    18fe:	701a      	strb	r2, [r3, #0]
			usbPrintf("Verbose mode\n");
    1900:	4811      	ldr	r0, [pc, #68]	; (1948 <guiHandle+0xd0>)
    1902:	4b12      	ldr	r3, [pc, #72]	; (194c <guiHandle+0xd4>)
    1904:	4798      	blx	r3
			break;
    1906:	e7dc      	b.n	18c2 <guiHandle+0x4a>
			guiSendConfig();
    1908:	4b08      	ldr	r3, [pc, #32]	; (192c <guiHandle+0xb4>)
    190a:	4798      	blx	r3
}
    190c:	e7d9      	b.n	18c2 <guiHandle+0x4a>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	00003445 	.word	0x00003445
    1914:	2000038c 	.word	0x2000038c
    1918:	00004eb9 	.word	0x00004eb9
    191c:	200002e8 	.word	0x200002e8
    1920:	2000048d 	.word	0x2000048d
    1924:	00001581 	.word	0x00001581
    1928:	00001521 	.word	0x00001521
    192c:	00001689 	.word	0x00001689
    1930:	00001761 	.word	0x00001761
    1934:	00000419 	.word	0x00000419
    1938:	000014ed 	.word	0x000014ed
    193c:	00001671 	.word	0x00001671
    1940:	000015dd 	.word	0x000015dd
    1944:	20000000 	.word	0x20000000
    1948:	00006f40 	.word	0x00006f40
    194c:	0000346d 	.word	0x0000346d

00001950 <handleUSB>:

void handleUSB(void)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	46de      	mov	lr, fp
    1954:	4657      	mov	r7, sl
    1956:	464e      	mov	r6, r9
    1958:	4645      	mov	r5, r8
    195a:	b5e0      	push	{r5, r6, r7, lr}
    195c:	b08f      	sub	sp, #60	; 0x3c
  char command;
  uint8_t w;
  uint16_t b,r;
  
    if(linkSensor){
    195e:	4bd7      	ldr	r3, [pc, #860]	; (1cbc <handleUSB+0x36c>)
    1960:	781b      	ldrb	r3, [r3, #0]
    1962:	2b00      	cmp	r3, #0
    1964:	d012      	beq.n	198c <handleUSB+0x3c>
{
	uint16_t cnt;
	
	//NVIC_DisableIRQ(USB_IRQn);
	
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    1966:	2200      	movs	r2, #0
    1968:	4bd5      	ldr	r3, [pc, #852]	; (1cc0 <handleUSB+0x370>)
    196a:	821a      	strh	r2, [r3, #16]
    196c:	e008      	b.n	1980 <handleUSB+0x30>
	
	while(cnt!=ms) // Count the ms till target
	{
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    196e:	2110      	movs	r1, #16
    1970:	4bd3      	ldr	r3, [pc, #844]	; (1cc0 <handleUSB+0x370>)
    1972:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    1974:	4bd2      	ldr	r3, [pc, #840]	; (1cc0 <handleUSB+0x370>)
    1976:	7b9b      	ldrb	r3, [r3, #14]
    1978:	06db      	lsls	r3, r3, #27
    197a:	d5fb      	bpl.n	1974 <handleUSB+0x24>
		cnt++;
    197c:	3201      	adds	r2, #1
    197e:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    1980:	2a14      	cmp	r2, #20
    1982:	d1f4      	bne.n	196e <handleUSB+0x1e>
		timerDelay(20);
		sensorTXbuffer = Sensors_get();  
    1984:	4bcf      	ldr	r3, [pc, #828]	; (1cc4 <handleUSB+0x374>)
    1986:	4798      	blx	r3
    1988:	4bcf      	ldr	r3, [pc, #828]	; (1cc8 <handleUSB+0x378>)
    198a:	6018      	str	r0, [r3, #0]
    }

  // Loop through input
  while(usbIsAvailable()){
    198c:	4bcf      	ldr	r3, [pc, #828]	; (1ccc <handleUSB+0x37c>)
    198e:	4798      	blx	r3
    1990:	2800      	cmp	r0, #0
    1992:	d101      	bne.n	1998 <handleUSB+0x48>
    1994:	f000 fc3f 	bl	2216 <STACK_SIZE+0x216>
	
	if(runGUI)
    1998:	4bcd      	ldr	r3, [pc, #820]	; (1cd0 <handleUSB+0x380>)
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	2b00      	cmp	r3, #0
    199e:	d002      	beq.n	19a6 <handleUSB+0x56>
	{
		guiHandle();
    19a0:	4bcc      	ldr	r3, [pc, #816]	; (1cd4 <handleUSB+0x384>)
    19a2:	4798      	blx	r3
		continue;
    19a4:	e7f2      	b.n	198c <handleUSB+0x3c>
	}
	
    command = usbGet(); // First command character
    19a6:	4bcc      	ldr	r3, [pc, #816]	; (1cd8 <handleUSB+0x388>)
    19a8:	4798      	blx	r3
    
    
    switch(command){
    19aa:	380a      	subs	r0, #10
    19ac:	b2c3      	uxtb	r3, r0
    19ae:	2b74      	cmp	r3, #116	; 0x74
    19b0:	d901      	bls.n	19b6 <handleUSB+0x66>
    19b2:	f000 fc2b 	bl	220c <STACK_SIZE+0x20c>
    19b6:	0098      	lsls	r0, r3, #2
    19b8:	4bc8      	ldr	r3, [pc, #800]	; (1cdc <handleUSB+0x38c>)
    19ba:	581b      	ldr	r3, [r3, r0]
    19bc:	469f      	mov	pc, r3
		
	  case  'G': // Gabriel entry point for GUI, byte code 0x47
		  runGUI = true;
    19be:	2201      	movs	r2, #1
    19c0:	4bc3      	ldr	r3, [pc, #780]	; (1cd0 <handleUSB+0x380>)
    19c2:	701a      	strb	r2, [r3, #0]
		  break;
    19c4:	e7e2      	b.n	198c <handleUSB+0x3c>
      
      case 'i': // Identity            
          usbPrintf("==Eval Kit==\n");
    19c6:	48c6      	ldr	r0, [pc, #792]	; (1ce0 <handleUSB+0x390>)
    19c8:	4bc6      	ldr	r3, [pc, #792]	; (1ce4 <handleUSB+0x394>)
    19ca:	4798      	blx	r3
          if(!BISTcompleted)
    19cc:	4bc6      	ldr	r3, [pc, #792]	; (1ce8 <handleUSB+0x398>)
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d05f      	beq.n	1a94 <handleUSB+0x144>
            usbPrintf("BIST failed\n");
          usbPrintf("linkPacketSize = %d\n", linkPacketSize);
    19d4:	4bc5      	ldr	r3, [pc, #788]	; (1cec <handleUSB+0x39c>)
    19d6:	8819      	ldrh	r1, [r3, #0]
    19d8:	48c5      	ldr	r0, [pc, #788]	; (1cf0 <handleUSB+0x3a0>)
    19da:	4cc2      	ldr	r4, [pc, #776]	; (1ce4 <handleUSB+0x394>)
    19dc:	47a0      	blx	r4
          usbPrintf("linkPacketRate = %d\n", linkPacketRate);
    19de:	4bc5      	ldr	r3, [pc, #788]	; (1cf4 <handleUSB+0x3a4>)
    19e0:	8819      	ldrh	r1, [r3, #0]
    19e2:	48c5      	ldr	r0, [pc, #788]	; (1cf8 <handleUSB+0x3a8>)
    19e4:	47a0      	blx	r4
          usbPrintf("linkSleepMode = p%d\n", linkSleepMode);
    19e6:	4bc5      	ldr	r3, [pc, #788]	; (1cfc <handleUSB+0x3ac>)
    19e8:	7819      	ldrb	r1, [r3, #0]
    19ea:	48c5      	ldr	r0, [pc, #788]	; (1d00 <handleUSB+0x3b0>)
    19ec:	47a0      	blx	r4
		  usbPrintf("linkSyncWord = 0x%04hx\n", linkSyncWord);
    19ee:	4bc5      	ldr	r3, [pc, #788]	; (1d04 <handleUSB+0x3b4>)
    19f0:	8819      	ldrh	r1, [r3, #0]
    19f2:	48c5      	ldr	r0, [pc, #788]	; (1d08 <handleUSB+0x3b8>)
    19f4:	47a0      	blx	r4
		  usbPrintf("linkPreambleSize = 0x%02hx\n", linkPreambleSize);
    19f6:	4bc5      	ldr	r3, [pc, #788]	; (1d0c <handleUSB+0x3bc>)
    19f8:	8819      	ldrh	r1, [r3, #0]
    19fa:	48c5      	ldr	r0, [pc, #788]	; (1d10 <handleUSB+0x3c0>)
    19fc:	47a0      	blx	r4
		  usbPrintf("linkMinNoiLvl = 0x%02hx\n", linkMinNoiLvl);
    19fe:	4bc5      	ldr	r3, [pc, #788]	; (1d14 <handleUSB+0x3c4>)
    1a00:	8819      	ldrh	r1, [r3, #0]
    1a02:	48c5      	ldr	r0, [pc, #788]	; (1d18 <handleUSB+0x3c8>)
    1a04:	47a0      	blx	r4
		  usbPrintf("linkMinPulAmp = 0x%02hx\n", linkMinPulAmp);
    1a06:	4bc5      	ldr	r3, [pc, #788]	; (1d1c <handleUSB+0x3cc>)
    1a08:	8819      	ldrh	r1, [r3, #0]
    1a0a:	48c5      	ldr	r0, [pc, #788]	; (1d20 <handleUSB+0x3d0>)
    1a0c:	47a0      	blx	r4
		  usbPrintf("linkMinSigStr = 0x%02hx\n", linkMinSigStr);
    1a0e:	4bc5      	ldr	r3, [pc, #788]	; (1d24 <handleUSB+0x3d4>)
    1a10:	8819      	ldrh	r1, [r3, #0]
    1a12:	48c5      	ldr	r0, [pc, #788]	; (1d28 <handleUSB+0x3d8>)
    1a14:	47a0      	blx	r4
		  usbPrintf("linkBidirectional = %d\n", linkBidirectional);
    1a16:	4bc5      	ldr	r3, [pc, #788]	; (1d2c <handleUSB+0x3dc>)
    1a18:	7819      	ldrb	r1, [r3, #0]
    1a1a:	48c5      	ldr	r0, [pc, #788]	; (1d30 <handleUSB+0x3e0>)
    1a1c:	47a0      	blx	r4
		  usbPrintf("linkMaster = %d\n", linkMaster);
    1a1e:	4bc5      	ldr	r3, [pc, #788]	; (1d34 <handleUSB+0x3e4>)
    1a20:	7819      	ldrb	r1, [r3, #0]
    1a22:	48c5      	ldr	r0, [pc, #788]	; (1d38 <handleUSB+0x3e8>)
    1a24:	47a0      	blx	r4
		  usbPrintf("linkRandom = %d\n", linkRandom);
    1a26:	4bc5      	ldr	r3, [pc, #788]	; (1d3c <handleUSB+0x3ec>)
    1a28:	7819      	ldrb	r1, [r3, #0]
    1a2a:	48c5      	ldr	r0, [pc, #788]	; (1d40 <handleUSB+0x3f0>)
    1a2c:	47a0      	blx	r4
		  usbPrintf("linkAudio = %d\n", linkAudio);
    1a2e:	4bc5      	ldr	r3, [pc, #788]	; (1d44 <handleUSB+0x3f4>)
    1a30:	7819      	ldrb	r1, [r3, #0]
    1a32:	48c5      	ldr	r0, [pc, #788]	; (1d48 <handleUSB+0x3f8>)
    1a34:	47a0      	blx	r4
		  usbPrintf("linkSensor = %d\n", linkSensor);
    1a36:	4ba1      	ldr	r3, [pc, #644]	; (1cbc <handleUSB+0x36c>)
    1a38:	7819      	ldrb	r1, [r3, #0]
    1a3a:	48c4      	ldr	r0, [pc, #784]	; (1d4c <handleUSB+0x3fc>)
    1a3c:	47a0      	blx	r4
		  usbPrintf("probe = 0x%02hx\n", probe);
    1a3e:	4bc4      	ldr	r3, [pc, #784]	; (1d50 <handleUSB+0x400>)
    1a40:	7819      	ldrb	r1, [r3, #0]
    1a42:	48c4      	ldr	r0, [pc, #784]	; (1d54 <handleUSB+0x404>)
    1a44:	47a0      	blx	r4
		  usbPrintf("linkMask = %02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx%02hx\n", linkTXMask[0],linkTXMask[1],linkTXMask[2],linkTXMask[3], linkTXMask[4],linkTXMask[5],linkTXMask[6],linkTXMask[7], linkTXMask[8],linkTXMask[9],linkTXMask[10],linkTXMask[11] );
    1a46:	48c4      	ldr	r0, [pc, #784]	; (1d58 <handleUSB+0x408>)
    1a48:	7801      	ldrb	r1, [r0, #0]
    1a4a:	7842      	ldrb	r2, [r0, #1]
    1a4c:	7883      	ldrb	r3, [r0, #2]
    1a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    1a50:	78c5      	ldrb	r5, [r0, #3]
    1a52:	7906      	ldrb	r6, [r0, #4]
    1a54:	7947      	ldrb	r7, [r0, #5]
    1a56:	7983      	ldrb	r3, [r0, #6]
    1a58:	469c      	mov	ip, r3
    1a5a:	79c3      	ldrb	r3, [r0, #7]
    1a5c:	4698      	mov	r8, r3
    1a5e:	7a03      	ldrb	r3, [r0, #8]
    1a60:	4699      	mov	r9, r3
    1a62:	7a43      	ldrb	r3, [r0, #9]
    1a64:	469a      	mov	sl, r3
    1a66:	7a83      	ldrb	r3, [r0, #10]
    1a68:	7ac0      	ldrb	r0, [r0, #11]
    1a6a:	9008      	str	r0, [sp, #32]
    1a6c:	9307      	str	r3, [sp, #28]
    1a6e:	4653      	mov	r3, sl
    1a70:	9306      	str	r3, [sp, #24]
    1a72:	464b      	mov	r3, r9
    1a74:	9305      	str	r3, [sp, #20]
    1a76:	4643      	mov	r3, r8
    1a78:	9304      	str	r3, [sp, #16]
    1a7a:	4663      	mov	r3, ip
    1a7c:	9303      	str	r3, [sp, #12]
    1a7e:	9702      	str	r7, [sp, #8]
    1a80:	9601      	str	r6, [sp, #4]
    1a82:	9500      	str	r5, [sp, #0]
    1a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a86:	48b5      	ldr	r0, [pc, #724]	; (1d5c <handleUSB+0x40c>)
    1a88:	47a0      	blx	r4
		  usbPrintf("audioDecimate = %d\n", audioDecimate);
    1a8a:	4bb5      	ldr	r3, [pc, #724]	; (1d60 <handleUSB+0x410>)
    1a8c:	7819      	ldrb	r1, [r3, #0]
    1a8e:	48b5      	ldr	r0, [pc, #724]	; (1d64 <handleUSB+0x414>)
    1a90:	47a0      	blx	r4
          usbPrintf("sparkMode = "); 
          if(sparkGetMode() == SPARK_MODE_RX)
            usbPrintf("SPARK_MODE_RX\n");
          else
            usbPrintf("SPARK_MODE_TX\n");*/
          break;  
    1a92:	e77b      	b.n	198c <handleUSB+0x3c>
            usbPrintf("BIST failed\n");
    1a94:	48b4      	ldr	r0, [pc, #720]	; (1d68 <handleUSB+0x418>)
    1a96:	4b93      	ldr	r3, [pc, #588]	; (1ce4 <handleUSB+0x394>)
    1a98:	4798      	blx	r3
    1a9a:	e79b      	b.n	19d4 <handleUSB+0x84>
		  
		case 'L': // Toggle on-board LED
			toggleLED();
    1a9c:	4bb3      	ldr	r3, [pc, #716]	; (1d6c <handleUSB+0x41c>)
    1a9e:	4798      	blx	r3
			break;
    1aa0:	e774      	b.n	198c <handleUSB+0x3c>

        case '?':
          usbPrintf("Running BIST..\n");
    1aa2:	48b3      	ldr	r0, [pc, #716]	; (1d70 <handleUSB+0x420>)
    1aa4:	4c8f      	ldr	r4, [pc, #572]	; (1ce4 <handleUSB+0x394>)
    1aa6:	47a0      	blx	r4
          //sparkStopRadio();
          //boardSetup();
          BISTcompleted = sparkBIST(true);
    1aa8:	2001      	movs	r0, #1
    1aaa:	4bb2      	ldr	r3, [pc, #712]	; (1d74 <handleUSB+0x424>)
    1aac:	4798      	blx	r3
    1aae:	4b8e      	ldr	r3, [pc, #568]	; (1ce8 <handleUSB+0x398>)
    1ab0:	7018      	strb	r0, [r3, #0]
          usbPrintf("done\n");
    1ab2:	48b1      	ldr	r0, [pc, #708]	; (1d78 <handleUSB+0x428>)
    1ab4:	47a0      	blx	r4
          break;
    1ab6:	e769      	b.n	198c <handleUSB+0x3c>
		  
		case '~':
			publishStats();
    1ab8:	4bb0      	ldr	r3, [pc, #704]	; (1d7c <handleUSB+0x42c>)
    1aba:	4798      	blx	r3
			break;
    1abc:	e766      	b.n	198c <handleUSB+0x3c>

        case 'l': // Packet rate
          linkPacketRate = usbParseInt();
    1abe:	4bb0      	ldr	r3, [pc, #704]	; (1d80 <handleUSB+0x430>)
    1ac0:	4798      	blx	r3
    1ac2:	b281      	uxth	r1, r0
    1ac4:	4b8b      	ldr	r3, [pc, #556]	; (1cf4 <handleUSB+0x3a4>)
    1ac6:	8019      	strh	r1, [r3, #0]
          usbPrintf("linkPacketRate = %d\n", linkPacketRate);
    1ac8:	488b      	ldr	r0, [pc, #556]	; (1cf8 <handleUSB+0x3a8>)
    1aca:	4b86      	ldr	r3, [pc, #536]	; (1ce4 <handleUSB+0x394>)
    1acc:	4798      	blx	r3
          appStop();
    1ace:	4bad      	ldr	r3, [pc, #692]	; (1d84 <handleUSB+0x434>)
    1ad0:	4798      	blx	r3
          configureLink();
    1ad2:	4bad      	ldr	r3, [pc, #692]	; (1d88 <handleUSB+0x438>)
    1ad4:	4798      	blx	r3
          appStart();
    1ad6:	4bad      	ldr	r3, [pc, #692]	; (1d8c <handleUSB+0x43c>)
    1ad8:	4798      	blx	r3
          break;
    1ada:	e757      	b.n	198c <handleUSB+0x3c>
		  
		case 'J':
			disableClockGate();
    1adc:	4bac      	ldr	r3, [pc, #688]	; (1d90 <handleUSB+0x440>)
    1ade:	4798      	blx	r3
			break;
    1ae0:	e754      	b.n	198c <handleUSB+0x3c>
		
		case 'D':
		  audioDecimate = usbParseInt();
    1ae2:	4ba7      	ldr	r3, [pc, #668]	; (1d80 <handleUSB+0x430>)
    1ae4:	4798      	blx	r3
    1ae6:	4b9e      	ldr	r3, [pc, #632]	; (1d60 <handleUSB+0x410>)
    1ae8:	7018      	strb	r0, [r3, #0]
		  break;
    1aea:	e74f      	b.n	198c <handleUSB+0x3c>

        case 'w': // Packet size
          linkPacketSize = (usbParseInt()/8)*8; 
    1aec:	4ba4      	ldr	r3, [pc, #656]	; (1d80 <handleUSB+0x430>)
    1aee:	4798      	blx	r3
    1af0:	2307      	movs	r3, #7
    1af2:	0001      	movs	r1, r0
    1af4:	4399      	bics	r1, r3
    1af6:	b289      	uxth	r1, r1
    1af8:	4b7c      	ldr	r3, [pc, #496]	; (1cec <handleUSB+0x39c>)
    1afa:	8019      	strh	r1, [r3, #0]
          usbPrintf("linkPacketSize = %d\n", linkPacketSize);
    1afc:	487c      	ldr	r0, [pc, #496]	; (1cf0 <handleUSB+0x3a0>)
    1afe:	4b79      	ldr	r3, [pc, #484]	; (1ce4 <handleUSB+0x394>)
    1b00:	4798      	blx	r3
          appStop();
    1b02:	4ba0      	ldr	r3, [pc, #640]	; (1d84 <handleUSB+0x434>)
    1b04:	4798      	blx	r3
          configureLink();
    1b06:	4ba0      	ldr	r3, [pc, #640]	; (1d88 <handleUSB+0x438>)
    1b08:	4798      	blx	r3
          appStart();
    1b0a:	4ba0      	ldr	r3, [pc, #640]	; (1d8c <handleUSB+0x43c>)
    1b0c:	4798      	blx	r3
          break;
    1b0e:	e73d      	b.n	198c <handleUSB+0x3c>

        case 'c': // calibrate DLL and VCRO
		 appStop();
    1b10:	4b9c      	ldr	r3, [pc, #624]	; (1d84 <handleUSB+0x434>)
    1b12:	4798      	blx	r3
          b = usbParseInt();
    1b14:	4b9a      	ldr	r3, [pc, #616]	; (1d80 <handleUSB+0x430>)
    1b16:	4798      	blx	r3
    1b18:	252e      	movs	r5, #46	; 0x2e
    1b1a:	ab02      	add	r3, sp, #8
    1b1c:	469c      	mov	ip, r3
    1b1e:	4465      	add	r5, ip
    1b20:	8028      	strh	r0, [r5, #0]
          w = sparkCalDLL(true);
    1b22:	2001      	movs	r0, #1
    1b24:	4e9b      	ldr	r6, [pc, #620]	; (1d94 <handleUSB+0x444>)
    1b26:	47b0      	blx	r6
    1b28:	0001      	movs	r1, r0
          usbPrintf("sparkCalDLL(RX) = %02hx\n", w);
    1b2a:	489b      	ldr	r0, [pc, #620]	; (1d98 <handleUSB+0x448>)
    1b2c:	4c6d      	ldr	r4, [pc, #436]	; (1ce4 <handleUSB+0x394>)
    1b2e:	47a0      	blx	r4
          w = sparkCalDLL(false);
    1b30:	2000      	movs	r0, #0
    1b32:	47b0      	blx	r6
    1b34:	0001      	movs	r1, r0
          usbPrintf("sparkCalDLL(TX) = %02hx\n", w);
    1b36:	4899      	ldr	r0, [pc, #612]	; (1d9c <handleUSB+0x44c>)
    1b38:	47a0      	blx	r4
          w = sparkCalVCRO(b);
    1b3a:	8828      	ldrh	r0, [r5, #0]
    1b3c:	4b98      	ldr	r3, [pc, #608]	; (1da0 <handleUSB+0x450>)
    1b3e:	4798      	blx	r3
    1b40:	0002      	movs	r2, r0
          usbPrintf("sparkCalVCRO(%d) = %02hx\n", b,w);
    1b42:	8829      	ldrh	r1, [r5, #0]
    1b44:	4897      	ldr	r0, [pc, #604]	; (1da4 <handleUSB+0x454>)
    1b46:	47a0      	blx	r4
          break;
    1b48:	e720      	b.n	198c <handleUSB+0x3c>
      
      case '+':
        // Start the cycle
        usbPrintf("Start radio \n");
    1b4a:	4897      	ldr	r0, [pc, #604]	; (1da8 <handleUSB+0x458>)
    1b4c:	4b65      	ldr	r3, [pc, #404]	; (1ce4 <handleUSB+0x394>)
    1b4e:	4798      	blx	r3
        appStart();
    1b50:	4b8e      	ldr	r3, [pc, #568]	; (1d8c <handleUSB+0x43c>)
    1b52:	4798      	blx	r3
        break; 
    1b54:	e71a      	b.n	198c <handleUSB+0x3c>

      case '-':
        // Stop the cycle
        usbPrintf("Stop radio \n");
    1b56:	4895      	ldr	r0, [pc, #596]	; (1dac <handleUSB+0x45c>)
    1b58:	4b62      	ldr	r3, [pc, #392]	; (1ce4 <handleUSB+0x394>)
    1b5a:	4798      	blx	r3
        appStop();
    1b5c:	4b89      	ldr	r3, [pc, #548]	; (1d84 <handleUSB+0x434>)
    1b5e:	4798      	blx	r3
        break;
    1b60:	e714      	b.n	198c <handleUSB+0x3c>
		
		case 'a':
			appStop();
    1b62:	4b88      	ldr	r3, [pc, #544]	; (1d84 <handleUSB+0x434>)
    1b64:	4798      	blx	r3
			while(!usbIsAvailable());
    1b66:	4b59      	ldr	r3, [pc, #356]	; (1ccc <handleUSB+0x37c>)
    1b68:	4798      	blx	r3
    1b6a:	2800      	cmp	r0, #0
    1b6c:	d0fb      	beq.n	1b66 <handleUSB+0x216>
			std_buf[0] = usbGet();
    1b6e:	4b5a      	ldr	r3, [pc, #360]	; (1cd8 <handleUSB+0x388>)
    1b70:	4798      	blx	r3
    1b72:	4a8f      	ldr	r2, [pc, #572]	; (1db0 <handleUSB+0x460>)
    1b74:	7010      	strb	r0, [r2, #0]
			switch(std_buf[0])
    1b76:	2830      	cmp	r0, #48	; 0x30
    1b78:	d008      	beq.n	1b8c <handleUSB+0x23c>
    1b7a:	2831      	cmp	r0, #49	; 0x31
    1b7c:	d00a      	beq.n	1b94 <handleUSB+0x244>
					break;
				case '1':
					linkAudio = true;
					break;
			}
			if(linkAudio)
    1b7e:	4b71      	ldr	r3, [pc, #452]	; (1d44 <handleUSB+0x3f4>)
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d10a      	bne.n	1b9c <handleUSB+0x24c>
				audioConfigure();
			appStart();
    1b86:	4b81      	ldr	r3, [pc, #516]	; (1d8c <handleUSB+0x43c>)
    1b88:	4798      	blx	r3
			break;
    1b8a:	e6ff      	b.n	198c <handleUSB+0x3c>
					linkAudio = false;
    1b8c:	2200      	movs	r2, #0
    1b8e:	4b6d      	ldr	r3, [pc, #436]	; (1d44 <handleUSB+0x3f4>)
    1b90:	701a      	strb	r2, [r3, #0]
					break;
    1b92:	e7f4      	b.n	1b7e <handleUSB+0x22e>
					linkAudio = true;
    1b94:	2201      	movs	r2, #1
    1b96:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <handleUSB+0x3f4>)
    1b98:	701a      	strb	r2, [r3, #0]
					break;
    1b9a:	e7f0      	b.n	1b7e <handleUSB+0x22e>
				audioConfigure();
    1b9c:	4b85      	ldr	r3, [pc, #532]	; (1db4 <handleUSB+0x464>)
    1b9e:	4798      	blx	r3
    1ba0:	e7f1      	b.n	1b86 <handleUSB+0x236>
      
      case 'p':
        appStop();
    1ba2:	4b78      	ldr	r3, [pc, #480]	; (1d84 <handleUSB+0x434>)
    1ba4:	4798      	blx	r3
        while(!usbIsAvailable());
    1ba6:	4b49      	ldr	r3, [pc, #292]	; (1ccc <handleUSB+0x37c>)
    1ba8:	4798      	blx	r3
    1baa:	2800      	cmp	r0, #0
    1bac:	d0fb      	beq.n	1ba6 <handleUSB+0x256>
        std_buf[0] = usbGet();
    1bae:	4b4a      	ldr	r3, [pc, #296]	; (1cd8 <handleUSB+0x388>)
    1bb0:	4798      	blx	r3
    1bb2:	4a7f      	ldr	r2, [pc, #508]	; (1db0 <handleUSB+0x460>)
    1bb4:	7010      	strb	r0, [r2, #0]
        switch(std_buf[0])
    1bb6:	2831      	cmp	r0, #49	; 0x31
    1bb8:	d01a      	beq.n	1bf0 <handleUSB+0x2a0>
    1bba:	d90c      	bls.n	1bd6 <handleUSB+0x286>
    1bbc:	2832      	cmp	r0, #50	; 0x32
    1bbe:	d020      	beq.n	1c02 <handleUSB+0x2b2>
    1bc0:	2833      	cmp	r0, #51	; 0x33
    1bc2:	d112      	bne.n	1bea <handleUSB+0x29a>
          usbPrintf("SLEEP_SHALLOW\n");
          linkSleepMode = SPARK_SLEEP_SHALLOW;
          configureLink();
          break;
          case '3':
          usbPrintf("SLEEP_DEEP\n");
    1bc4:	487c      	ldr	r0, [pc, #496]	; (1db8 <handleUSB+0x468>)
    1bc6:	4b47      	ldr	r3, [pc, #284]	; (1ce4 <handleUSB+0x394>)
    1bc8:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_DEEP;
    1bca:	2203      	movs	r2, #3
    1bcc:	4b4b      	ldr	r3, [pc, #300]	; (1cfc <handleUSB+0x3ac>)
    1bce:	701a      	strb	r2, [r3, #0]
          configureLink();
    1bd0:	4b6d      	ldr	r3, [pc, #436]	; (1d88 <handleUSB+0x438>)
    1bd2:	4798      	blx	r3
          break;
    1bd4:	e009      	b.n	1bea <handleUSB+0x29a>
        switch(std_buf[0])
    1bd6:	2830      	cmp	r0, #48	; 0x30
    1bd8:	d107      	bne.n	1bea <handleUSB+0x29a>
          usbPrintf("SLEEP_NONE\n");
    1bda:	4878      	ldr	r0, [pc, #480]	; (1dbc <handleUSB+0x46c>)
    1bdc:	4b41      	ldr	r3, [pc, #260]	; (1ce4 <handleUSB+0x394>)
    1bde:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_NONE;
    1be0:	2200      	movs	r2, #0
    1be2:	4b46      	ldr	r3, [pc, #280]	; (1cfc <handleUSB+0x3ac>)
    1be4:	701a      	strb	r2, [r3, #0]
          configureLink();
    1be6:	4b68      	ldr	r3, [pc, #416]	; (1d88 <handleUSB+0x438>)
    1be8:	4798      	blx	r3
        }
        appStart();
    1bea:	4b68      	ldr	r3, [pc, #416]	; (1d8c <handleUSB+0x43c>)
    1bec:	4798      	blx	r3
        break;
    1bee:	e6cd      	b.n	198c <handleUSB+0x3c>
          usbPrintf("SLEEP_IDLE\n");
    1bf0:	4873      	ldr	r0, [pc, #460]	; (1dc0 <handleUSB+0x470>)
    1bf2:	4b3c      	ldr	r3, [pc, #240]	; (1ce4 <handleUSB+0x394>)
    1bf4:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_IDLE;
    1bf6:	2201      	movs	r2, #1
    1bf8:	4b40      	ldr	r3, [pc, #256]	; (1cfc <handleUSB+0x3ac>)
    1bfa:	701a      	strb	r2, [r3, #0]
          configureLink();
    1bfc:	4b62      	ldr	r3, [pc, #392]	; (1d88 <handleUSB+0x438>)
    1bfe:	4798      	blx	r3
          break;
    1c00:	e7f3      	b.n	1bea <handleUSB+0x29a>
          usbPrintf("SLEEP_SHALLOW\n");
    1c02:	4870      	ldr	r0, [pc, #448]	; (1dc4 <handleUSB+0x474>)
    1c04:	4b37      	ldr	r3, [pc, #220]	; (1ce4 <handleUSB+0x394>)
    1c06:	4798      	blx	r3
          linkSleepMode = SPARK_SLEEP_SHALLOW;
    1c08:	2202      	movs	r2, #2
    1c0a:	4b3c      	ldr	r3, [pc, #240]	; (1cfc <handleUSB+0x3ac>)
    1c0c:	701a      	strb	r2, [r3, #0]
          configureLink();
    1c0e:	4b5e      	ldr	r3, [pc, #376]	; (1d88 <handleUSB+0x438>)
    1c10:	4798      	blx	r3
          break;
    1c12:	e7ea      	b.n	1bea <handleUSB+0x29a>

      case 'r':
        usbPrintf("Resetting statistics\n");
    1c14:	486c      	ldr	r0, [pc, #432]	; (1dc8 <handleUSB+0x478>)
    1c16:	4b33      	ldr	r3, [pc, #204]	; (1ce4 <handleUSB+0x394>)
    1c18:	4798      	blx	r3
        resetStatistics();
    1c1a:	4b6c      	ldr	r3, [pc, #432]	; (1dcc <handleUSB+0x47c>)
    1c1c:	4798      	blx	r3
        break;
    1c1e:	e6b5      	b.n	198c <handleUSB+0x3c>

      case 'x':
        appStop();
    1c20:	4b58      	ldr	r3, [pc, #352]	; (1d84 <handleUSB+0x434>)
    1c22:	4798      	blx	r3
        linkRandom = !linkRandom;
    1c24:	4c45      	ldr	r4, [pc, #276]	; (1d3c <handleUSB+0x3ec>)
    1c26:	7823      	ldrb	r3, [r4, #0]
    1c28:	2201      	movs	r2, #1
    1c2a:	4053      	eors	r3, r2
    1c2c:	7023      	strb	r3, [r4, #0]
        configureLink();
    1c2e:	4b56      	ldr	r3, [pc, #344]	; (1d88 <handleUSB+0x438>)
    1c30:	4798      	blx	r3
        usbPrintf("Random = %d\n", linkRandom);
    1c32:	7821      	ldrb	r1, [r4, #0]
    1c34:	4866      	ldr	r0, [pc, #408]	; (1dd0 <handleUSB+0x480>)
    1c36:	4b2b      	ldr	r3, [pc, #172]	; (1ce4 <handleUSB+0x394>)
    1c38:	4798      	blx	r3
        break;
    1c3a:	e6a7      	b.n	198c <handleUSB+0x3c>
		
	 case 'S': // Change syncword
		appStop();
    1c3c:	4b51      	ldr	r3, [pc, #324]	; (1d84 <handleUSB+0x434>)
    1c3e:	4798      	blx	r3
		std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1c40:	4e25      	ldr	r6, [pc, #148]	; (1cd8 <handleUSB+0x388>)
    1c42:	47b0      	blx	r6
    1c44:	4c5a      	ldr	r4, [pc, #360]	; (1db0 <handleUSB+0x460>)
    1c46:	7020      	strb	r0, [r4, #0]
    1c48:	47b0      	blx	r6
    1c4a:	7060      	strb	r0, [r4, #1]
		sscanf((char*) &std_buf[0], "%2hx", &b);
    1c4c:	252e      	movs	r5, #46	; 0x2e
    1c4e:	ab02      	add	r3, sp, #8
    1c50:	469c      	mov	ip, r3
    1c52:	4465      	add	r5, ip
    1c54:	002a      	movs	r2, r5
    1c56:	495f      	ldr	r1, [pc, #380]	; (1dd4 <handleUSB+0x484>)
    1c58:	0020      	movs	r0, r4
    1c5a:	4b5f      	ldr	r3, [pc, #380]	; (1dd8 <handleUSB+0x488>)
    1c5c:	4699      	mov	r9, r3
    1c5e:	4798      	blx	r3
		linkSyncWord = b << 8;
    1c60:	882b      	ldrh	r3, [r5, #0]
    1c62:	021b      	lsls	r3, r3, #8
    1c64:	4f27      	ldr	r7, [pc, #156]	; (1d04 <handleUSB+0x3b4>)
    1c66:	803b      	strh	r3, [r7, #0]
		std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1c68:	47b0      	blx	r6
    1c6a:	7020      	strb	r0, [r4, #0]
    1c6c:	47b0      	blx	r6
    1c6e:	7060      	strb	r0, [r4, #1]
		sscanf((char*) &std_buf[0], "%2hx", &b);
    1c70:	002a      	movs	r2, r5
    1c72:	4958      	ldr	r1, [pc, #352]	; (1dd4 <handleUSB+0x484>)
    1c74:	0020      	movs	r0, r4
    1c76:	47c8      	blx	r9
		linkSyncWord |= b;
    1c78:	883b      	ldrh	r3, [r7, #0]
    1c7a:	882a      	ldrh	r2, [r5, #0]
    1c7c:	4313      	orrs	r3, r2
    1c7e:	803b      	strh	r3, [r7, #0]
		configureLink();
    1c80:	4b41      	ldr	r3, [pc, #260]	; (1d88 <handleUSB+0x438>)
    1c82:	4798      	blx	r3
		appStart();
    1c84:	4b41      	ldr	r3, [pc, #260]	; (1d8c <handleUSB+0x43c>)
    1c86:	4798      	blx	r3
		break;
    1c88:	e680      	b.n	198c <handleUSB+0x3c>
		
	 case 'P': // Change preamble size
	 appStop();
    1c8a:	4b3e      	ldr	r3, [pc, #248]	; (1d84 <handleUSB+0x434>)
    1c8c:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1c8e:	4d12      	ldr	r5, [pc, #72]	; (1cd8 <handleUSB+0x388>)
    1c90:	47a8      	blx	r5
    1c92:	4c47      	ldr	r4, [pc, #284]	; (1db0 <handleUSB+0x460>)
    1c94:	7020      	strb	r0, [r4, #0]
    1c96:	47a8      	blx	r5
    1c98:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1c9a:	252e      	movs	r5, #46	; 0x2e
    1c9c:	ab02      	add	r3, sp, #8
    1c9e:	469c      	mov	ip, r3
    1ca0:	4465      	add	r5, ip
    1ca2:	002a      	movs	r2, r5
    1ca4:	494b      	ldr	r1, [pc, #300]	; (1dd4 <handleUSB+0x484>)
    1ca6:	0020      	movs	r0, r4
    1ca8:	4b4b      	ldr	r3, [pc, #300]	; (1dd8 <handleUSB+0x488>)
    1caa:	4798      	blx	r3
	 linkPreambleSize = b ;
    1cac:	882a      	ldrh	r2, [r5, #0]
    1cae:	4b17      	ldr	r3, [pc, #92]	; (1d0c <handleUSB+0x3bc>)
    1cb0:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1cb2:	4b35      	ldr	r3, [pc, #212]	; (1d88 <handleUSB+0x438>)
    1cb4:	4798      	blx	r3
	 appStart();
    1cb6:	4b35      	ldr	r3, [pc, #212]	; (1d8c <handleUSB+0x43c>)
    1cb8:	4798      	blx	r3
	 break;		
    1cba:	e667      	b.n	198c <handleUSB+0x3c>
    1cbc:	2000048d 	.word	0x2000048d
    1cc0:	42003000 	.word	0x42003000
    1cc4:	00004b09 	.word	0x00004b09
    1cc8:	20000370 	.word	0x20000370
    1ccc:	00003431 	.word	0x00003431
    1cd0:	20000000 	.word	0x20000000
    1cd4:	00001879 	.word	0x00001879
    1cd8:	00003451 	.word	0x00003451
    1cdc:	00006968 	.word	0x00006968
    1ce0:	00006f50 	.word	0x00006f50
    1ce4:	0000346d 	.word	0x0000346d
    1ce8:	20000300 	.word	0x20000300
    1cec:	20000498 	.word	0x20000498
    1cf0:	00006f70 	.word	0x00006f70
    1cf4:	200005b6 	.word	0x200005b6
    1cf8:	00006f88 	.word	0x00006f88
    1cfc:	200002e9 	.word	0x200002e9
    1d00:	00006fa0 	.word	0x00006fa0
    1d04:	2000031c 	.word	0x2000031c
    1d08:	00006fb8 	.word	0x00006fb8
    1d0c:	200005b4 	.word	0x200005b4
    1d10:	00006fd0 	.word	0x00006fd0
    1d14:	200005b0 	.word	0x200005b0
    1d18:	00006fec 	.word	0x00006fec
    1d1c:	200002d0 	.word	0x200002d0
    1d20:	00007008 	.word	0x00007008
    1d24:	2000048a 	.word	0x2000048a
    1d28:	00007024 	.word	0x00007024
    1d2c:	200005b2 	.word	0x200005b2
    1d30:	00007040 	.word	0x00007040
    1d34:	20000488 	.word	0x20000488
    1d38:	00007058 	.word	0x00007058
    1d3c:	20000301 	.word	0x20000301
    1d40:	0000706c 	.word	0x0000706c
    1d44:	200002e8 	.word	0x200002e8
    1d48:	00007080 	.word	0x00007080
    1d4c:	00007090 	.word	0x00007090
    1d50:	200002d2 	.word	0x200002d2
    1d54:	000070a4 	.word	0x000070a4
    1d58:	20000364 	.word	0x20000364
    1d5c:	000070b8 	.word	0x000070b8
    1d60:	200005c0 	.word	0x200005c0
    1d64:	00007104 	.word	0x00007104
    1d68:	00006f60 	.word	0x00006f60
    1d6c:	00002eb9 	.word	0x00002eb9
    1d70:	00007118 	.word	0x00007118
    1d74:	000037dd 	.word	0x000037dd
    1d78:	00007128 	.word	0x00007128
    1d7c:	00000839 	.word	0x00000839
    1d80:	000034a9 	.word	0x000034a9
    1d84:	00001521 	.word	0x00001521
    1d88:	00000381 	.word	0x00000381
    1d8c:	000014ed 	.word	0x000014ed
    1d90:	00002ec5 	.word	0x00002ec5
    1d94:	00003a1d 	.word	0x00003a1d
    1d98:	00007130 	.word	0x00007130
    1d9c:	0000714c 	.word	0x0000714c
    1da0:	00003ac9 	.word	0x00003ac9
    1da4:	00007168 	.word	0x00007168
    1da8:	00007184 	.word	0x00007184
    1dac:	00007194 	.word	0x00007194
    1db0:	200006bc 	.word	0x200006bc
    1db4:	000023b9 	.word	0x000023b9
    1db8:	000071cc 	.word	0x000071cc
    1dbc:	000071a4 	.word	0x000071a4
    1dc0:	000071b0 	.word	0x000071b0
    1dc4:	000071bc 	.word	0x000071bc
    1dc8:	000071d8 	.word	0x000071d8
    1dcc:	00000419 	.word	0x00000419
    1dd0:	00007070 	.word	0x00007070
    1dd4:	000071f0 	.word	0x000071f0
    1dd8:	0000581d 	.word	0x0000581d
	 
	 case 'X': // Change min noise level
	 appStop();
    1ddc:	4bd8      	ldr	r3, [pc, #864]	; (2140 <STACK_SIZE+0x140>)
    1dde:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1de0:	4dd8      	ldr	r5, [pc, #864]	; (2144 <STACK_SIZE+0x144>)
    1de2:	47a8      	blx	r5
    1de4:	4cd8      	ldr	r4, [pc, #864]	; (2148 <STACK_SIZE+0x148>)
    1de6:	7020      	strb	r0, [r4, #0]
    1de8:	47a8      	blx	r5
    1dea:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1dec:	252e      	movs	r5, #46	; 0x2e
    1dee:	ab02      	add	r3, sp, #8
    1df0:	469c      	mov	ip, r3
    1df2:	4465      	add	r5, ip
    1df4:	002a      	movs	r2, r5
    1df6:	49d5      	ldr	r1, [pc, #852]	; (214c <STACK_SIZE+0x14c>)
    1df8:	0020      	movs	r0, r4
    1dfa:	4bd5      	ldr	r3, [pc, #852]	; (2150 <STACK_SIZE+0x150>)
    1dfc:	4798      	blx	r3
	 linkMinNoiLvl = b ;
    1dfe:	882a      	ldrh	r2, [r5, #0]
    1e00:	4bd4      	ldr	r3, [pc, #848]	; (2154 <STACK_SIZE+0x154>)
    1e02:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1e04:	4bd4      	ldr	r3, [pc, #848]	; (2158 <STACK_SIZE+0x158>)
    1e06:	4798      	blx	r3
	 appStart();
    1e08:	4bd4      	ldr	r3, [pc, #848]	; (215c <STACK_SIZE+0x15c>)
    1e0a:	4798      	blx	r3
	 break;
    1e0c:	e5be      	b.n	198c <handleUSB+0x3c>

	 case 'Y': // Change min pulse zoom
	 appStop();
    1e0e:	4bcc      	ldr	r3, [pc, #816]	; (2140 <STACK_SIZE+0x140>)
    1e10:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1e12:	4dcc      	ldr	r5, [pc, #816]	; (2144 <STACK_SIZE+0x144>)
    1e14:	47a8      	blx	r5
    1e16:	4ccc      	ldr	r4, [pc, #816]	; (2148 <STACK_SIZE+0x148>)
    1e18:	7020      	strb	r0, [r4, #0]
    1e1a:	47a8      	blx	r5
    1e1c:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1e1e:	252e      	movs	r5, #46	; 0x2e
    1e20:	ab02      	add	r3, sp, #8
    1e22:	469c      	mov	ip, r3
    1e24:	4465      	add	r5, ip
    1e26:	002a      	movs	r2, r5
    1e28:	49c8      	ldr	r1, [pc, #800]	; (214c <STACK_SIZE+0x14c>)
    1e2a:	0020      	movs	r0, r4
    1e2c:	4bc8      	ldr	r3, [pc, #800]	; (2150 <STACK_SIZE+0x150>)
    1e2e:	4798      	blx	r3
	 linkMinPulAmp = b ;
    1e30:	882a      	ldrh	r2, [r5, #0]
    1e32:	4bcb      	ldr	r3, [pc, #812]	; (2160 <STACK_SIZE+0x160>)
    1e34:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1e36:	4bc8      	ldr	r3, [pc, #800]	; (2158 <STACK_SIZE+0x158>)
    1e38:	4798      	blx	r3
	 appStart();
    1e3a:	4bc8      	ldr	r3, [pc, #800]	; (215c <STACK_SIZE+0x15c>)
    1e3c:	4798      	blx	r3
	 break;
    1e3e:	e5a5      	b.n	198c <handleUSB+0x3c>
	 
	 case 'Z': // Change min signal threshold
	 appStop();
    1e40:	4bbf      	ldr	r3, [pc, #764]	; (2140 <STACK_SIZE+0x140>)
    1e42:	4798      	blx	r3
	 std_buf[0] = usbGet(); std_buf[1] = usbGet();
    1e44:	4dbf      	ldr	r5, [pc, #764]	; (2144 <STACK_SIZE+0x144>)
    1e46:	47a8      	blx	r5
    1e48:	4cbf      	ldr	r4, [pc, #764]	; (2148 <STACK_SIZE+0x148>)
    1e4a:	7020      	strb	r0, [r4, #0]
    1e4c:	47a8      	blx	r5
    1e4e:	7060      	strb	r0, [r4, #1]
	 sscanf((char*) &std_buf[0], "%2hx", &b);
    1e50:	252e      	movs	r5, #46	; 0x2e
    1e52:	ab02      	add	r3, sp, #8
    1e54:	469c      	mov	ip, r3
    1e56:	4465      	add	r5, ip
    1e58:	002a      	movs	r2, r5
    1e5a:	49bc      	ldr	r1, [pc, #752]	; (214c <STACK_SIZE+0x14c>)
    1e5c:	0020      	movs	r0, r4
    1e5e:	4bbc      	ldr	r3, [pc, #752]	; (2150 <STACK_SIZE+0x150>)
    1e60:	4798      	blx	r3
	 linkMinSigStr = b ;
    1e62:	882a      	ldrh	r2, [r5, #0]
    1e64:	4bbf      	ldr	r3, [pc, #764]	; (2164 <STACK_SIZE+0x164>)
    1e66:	801a      	strh	r2, [r3, #0]
	 configureLink();
    1e68:	4bbb      	ldr	r3, [pc, #748]	; (2158 <STACK_SIZE+0x158>)
    1e6a:	4798      	blx	r3
	 appStart();
    1e6c:	4bbb      	ldr	r3, [pc, #748]	; (215c <STACK_SIZE+0x15c>)
    1e6e:	4798      	blx	r3
	 break;
    1e70:	e58c      	b.n	198c <handleUSB+0x3c>

      case 'B': // Change link to bidirectional
        usbPrintf("Bidirectional mode\n");
    1e72:	48bd      	ldr	r0, [pc, #756]	; (2168 <STACK_SIZE+0x168>)
    1e74:	4bbd      	ldr	r3, [pc, #756]	; (216c <STACK_SIZE+0x16c>)
    1e76:	4798      	blx	r3
        appStop();
    1e78:	4bb1      	ldr	r3, [pc, #708]	; (2140 <STACK_SIZE+0x140>)
    1e7a:	4798      	blx	r3
		linkBidirectional = true;
    1e7c:	2201      	movs	r2, #1
    1e7e:	4bbc      	ldr	r3, [pc, #752]	; (2170 <STACK_SIZE+0x170>)
    1e80:	701a      	strb	r2, [r3, #0]
        std_buf[0] = usbGet();
    1e82:	4bb0      	ldr	r3, [pc, #704]	; (2144 <STACK_SIZE+0x144>)
    1e84:	4798      	blx	r3
    1e86:	4bb0      	ldr	r3, [pc, #704]	; (2148 <STACK_SIZE+0x148>)
    1e88:	7018      	strb	r0, [r3, #0]
        if(std_buf[0] == '0')
    1e8a:	2830      	cmp	r0, #48	; 0x30
    1e8c:	d007      	beq.n	1e9e <handleUSB+0x54e>
          linkMaster = false;
        else
          linkMaster = true;
    1e8e:	2201      	movs	r2, #1
    1e90:	4bb8      	ldr	r3, [pc, #736]	; (2174 <STACK_SIZE+0x174>)
    1e92:	701a      	strb	r2, [r3, #0]
		configureLink();
    1e94:	4bb0      	ldr	r3, [pc, #704]	; (2158 <STACK_SIZE+0x158>)
    1e96:	4798      	blx	r3
        appStart();
    1e98:	4bb0      	ldr	r3, [pc, #704]	; (215c <STACK_SIZE+0x15c>)
    1e9a:	4798      	blx	r3
        break;
    1e9c:	e576      	b.n	198c <handleUSB+0x3c>
          linkMaster = false;
    1e9e:	2200      	movs	r2, #0
    1ea0:	4bb4      	ldr	r3, [pc, #720]	; (2174 <STACK_SIZE+0x174>)
    1ea2:	701a      	strb	r2, [r3, #0]
    1ea4:	e7f6      	b.n	1e94 <handleUSB+0x544>

      case 's':
        usbPrintf("Statistics:\n");
    1ea6:	48b4      	ldr	r0, [pc, #720]	; (2178 <STACK_SIZE+0x178>)
    1ea8:	4bb0      	ldr	r3, [pc, #704]	; (216c <STACK_SIZE+0x16c>)
    1eaa:	4798      	blx	r3
        printStatistics();
    1eac:	4bb3      	ldr	r3, [pc, #716]	; (217c <STACK_SIZE+0x17c>)
    1eae:	4798      	blx	r3
        break;
    1eb0:	e56c      	b.n	198c <handleUSB+0x3c>
      
      case 'm': // Spectral mask, 12 bytes
        appStop();
    1eb2:	4ba3      	ldr	r3, [pc, #652]	; (2140 <STACK_SIZE+0x140>)
    1eb4:	4798      	blx	r3
		usb_get(std_buf, 24);
    1eb6:	2118      	movs	r1, #24
    1eb8:	48a3      	ldr	r0, [pc, #652]	; (2148 <STACK_SIZE+0x148>)
    1eba:	4bb1      	ldr	r3, [pc, #708]	; (2180 <STACK_SIZE+0x180>)
    1ebc:	4798      	blx	r3
		for(uint8_t i=0;i<12;i++)
    1ebe:	2400      	movs	r4, #0
    1ec0:	e00f      	b.n	1ee2 <handleUSB+0x592>
		{
			sscanf((char*) &std_buf[i*2], "%2hx", &b);
    1ec2:	0060      	lsls	r0, r4, #1
    1ec4:	4ba0      	ldr	r3, [pc, #640]	; (2148 <STACK_SIZE+0x148>)
    1ec6:	18c0      	adds	r0, r0, r3
    1ec8:	252e      	movs	r5, #46	; 0x2e
    1eca:	ab02      	add	r3, sp, #8
    1ecc:	469c      	mov	ip, r3
    1ece:	4465      	add	r5, ip
    1ed0:	002a      	movs	r2, r5
    1ed2:	499e      	ldr	r1, [pc, #632]	; (214c <STACK_SIZE+0x14c>)
    1ed4:	4b9e      	ldr	r3, [pc, #632]	; (2150 <STACK_SIZE+0x150>)
    1ed6:	4798      	blx	r3
			linkTXMask[i] = b;
    1ed8:	882a      	ldrh	r2, [r5, #0]
    1eda:	4baa      	ldr	r3, [pc, #680]	; (2184 <STACK_SIZE+0x184>)
    1edc:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=0;i<12;i++)
    1ede:	3401      	adds	r4, #1
    1ee0:	b2e4      	uxtb	r4, r4
    1ee2:	2c0b      	cmp	r4, #11
    1ee4:	d9ed      	bls.n	1ec2 <handleUSB+0x572>
		for(uint8_t i=0;i<12;i++)
		{
			w =  usbGet();	
				
		}*/
		configureLink();
    1ee6:	4b9c      	ldr	r3, [pc, #624]	; (2158 <STACK_SIZE+0x158>)
    1ee8:	4798      	blx	r3
		appStart();
    1eea:	4b9c      	ldr	r3, [pc, #624]	; (215c <STACK_SIZE+0x15c>)
    1eec:	4798      	blx	r3
        break;
    1eee:	e54d      	b.n	198c <handleUSB+0x3c>
		
	  case '>':
		usbPrintf("Writing Flash\n");
    1ef0:	48a5      	ldr	r0, [pc, #660]	; (2188 <STACK_SIZE+0x188>)
    1ef2:	4b9e      	ldr	r3, [pc, #632]	; (216c <STACK_SIZE+0x16c>)
    1ef4:	4798      	blx	r3
		flashWrite();
    1ef6:	4ba5      	ldr	r3, [pc, #660]	; (218c <STACK_SIZE+0x18c>)
    1ef8:	4798      	blx	r3
		break;
    1efa:	e547      	b.n	198c <handleUSB+0x3c>
	
	  case '<':
		usbPrintf("Reading Flash\n");
    1efc:	48a4      	ldr	r0, [pc, #656]	; (2190 <STACK_SIZE+0x190>)
    1efe:	4b9b      	ldr	r3, [pc, #620]	; (216c <STACK_SIZE+0x16c>)
    1f00:	4798      	blx	r3
		appStop();
    1f02:	4b8f      	ldr	r3, [pc, #572]	; (2140 <STACK_SIZE+0x140>)
    1f04:	4798      	blx	r3
		flashRead();
    1f06:	4ba3      	ldr	r3, [pc, #652]	; (2194 <STACK_SIZE+0x194>)
    1f08:	4798      	blx	r3
		configureLink();
    1f0a:	4b93      	ldr	r3, [pc, #588]	; (2158 <STACK_SIZE+0x158>)
    1f0c:	4798      	blx	r3
		appStart();
    1f0e:	4b93      	ldr	r3, [pc, #588]	; (215c <STACK_SIZE+0x15c>)
    1f10:	4798      	blx	r3
		break;
    1f12:	e53b      	b.n	198c <handleUSB+0x3c>

      case 'v':
        usbPrintf("Voltage set: ");
    1f14:	48a0      	ldr	r0, [pc, #640]	; (2198 <STACK_SIZE+0x198>)
    1f16:	4b95      	ldr	r3, [pc, #596]	; (216c <STACK_SIZE+0x16c>)
    1f18:	4798      	blx	r3
        std_buf[0] = usbGet();
    1f1a:	4b8a      	ldr	r3, [pc, #552]	; (2144 <STACK_SIZE+0x144>)
    1f1c:	4798      	blx	r3
    1f1e:	4c8a      	ldr	r4, [pc, #552]	; (2148 <STACK_SIZE+0x148>)
    1f20:	7020      	strb	r0, [r4, #0]
        startSPI();
    1f22:	4b9e      	ldr	r3, [pc, #632]	; (219c <STACK_SIZE+0x19c>)
    1f24:	4798      	blx	r3
        switch(std_buf[0])
    1f26:	7823      	ldrb	r3, [r4, #0]
    1f28:	2b31      	cmp	r3, #49	; 0x31
    1f2a:	d01a      	beq.n	1f62 <handleUSB+0x612>
    1f2c:	d90c      	bls.n	1f48 <handleUSB+0x5f8>
    1f2e:	2b32      	cmp	r3, #50	; 0x32
    1f30:	d020      	beq.n	1f74 <handleUSB+0x624>
    1f32:	2b33      	cmp	r3, #51	; 0x33
    1f34:	d112      	bne.n	1f5c <handleUSB+0x60c>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0a);
            usbPrintf("1.04V\n");
            break;
            
          case '3':
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0b);
    1f36:	204d      	movs	r0, #77	; 0x4d
    1f38:	4c99      	ldr	r4, [pc, #612]	; (21a0 <STACK_SIZE+0x1a0>)
    1f3a:	47a0      	blx	r4
    1f3c:	200b      	movs	r0, #11
    1f3e:	47a0      	blx	r4
            usbPrintf("0.97V\n");
    1f40:	4898      	ldr	r0, [pc, #608]	; (21a4 <STACK_SIZE+0x1a4>)
    1f42:	4b8a      	ldr	r3, [pc, #552]	; (216c <STACK_SIZE+0x16c>)
    1f44:	4798      	blx	r3
            break;
    1f46:	e009      	b.n	1f5c <handleUSB+0x60c>
        switch(std_buf[0])
    1f48:	2b30      	cmp	r3, #48	; 0x30
    1f4a:	d107      	bne.n	1f5c <handleUSB+0x60c>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x08);
    1f4c:	204d      	movs	r0, #77	; 0x4d
    1f4e:	4c94      	ldr	r4, [pc, #592]	; (21a0 <STACK_SIZE+0x1a0>)
    1f50:	47a0      	blx	r4
    1f52:	2008      	movs	r0, #8
    1f54:	47a0      	blx	r4
            usbPrintf("1.08V\n");
    1f56:	4894      	ldr	r0, [pc, #592]	; (21a8 <STACK_SIZE+0x1a8>)
    1f58:	4b84      	ldr	r3, [pc, #528]	; (216c <STACK_SIZE+0x16c>)
    1f5a:	4798      	blx	r3
        }
        stopSPI();
    1f5c:	4b93      	ldr	r3, [pc, #588]	; (21ac <STACK_SIZE+0x1ac>)
    1f5e:	4798      	blx	r3
        break;
    1f60:	e514      	b.n	198c <handleUSB+0x3c>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x09);
    1f62:	204d      	movs	r0, #77	; 0x4d
    1f64:	4c8e      	ldr	r4, [pc, #568]	; (21a0 <STACK_SIZE+0x1a0>)
    1f66:	47a0      	blx	r4
    1f68:	2009      	movs	r0, #9
    1f6a:	47a0      	blx	r4
            usbPrintf("1.03V\n");
    1f6c:	4890      	ldr	r0, [pc, #576]	; (21b0 <STACK_SIZE+0x1b0>)
    1f6e:	4b7f      	ldr	r3, [pc, #508]	; (216c <STACK_SIZE+0x16c>)
    1f70:	4798      	blx	r3
            break;
    1f72:	e7f3      	b.n	1f5c <handleUSB+0x60c>
            sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x0a);
    1f74:	204d      	movs	r0, #77	; 0x4d
    1f76:	4c8a      	ldr	r4, [pc, #552]	; (21a0 <STACK_SIZE+0x1a0>)
    1f78:	47a0      	blx	r4
    1f7a:	200a      	movs	r0, #10
    1f7c:	47a0      	blx	r4
            usbPrintf("1.04V\n");
    1f7e:	488d      	ldr	r0, [pc, #564]	; (21b4 <STACK_SIZE+0x1b4>)
    1f80:	4b7a      	ldr	r3, [pc, #488]	; (216c <STACK_SIZE+0x16c>)
    1f82:	4798      	blx	r3
            break;
    1f84:	e7ea      	b.n	1f5c <handleUSB+0x60c>

      case 'R':
		appStop();
    1f86:	4b6e      	ldr	r3, [pc, #440]	; (2140 <STACK_SIZE+0x140>)
    1f88:	4798      	blx	r3
        usbPrintf("RX mode\n");
    1f8a:	488b      	ldr	r0, [pc, #556]	; (21b8 <STACK_SIZE+0x1b8>)
    1f8c:	4b77      	ldr	r3, [pc, #476]	; (216c <STACK_SIZE+0x16c>)
    1f8e:	4798      	blx	r3
        linkBidirectional = false;
    1f90:	2300      	movs	r3, #0
    1f92:	4a77      	ldr	r2, [pc, #476]	; (2170 <STACK_SIZE+0x170>)
    1f94:	7013      	strb	r3, [r2, #0]
		linkMaster = false;
    1f96:	4a77      	ldr	r2, [pc, #476]	; (2174 <STACK_SIZE+0x174>)
    1f98:	7013      	strb	r3, [r2, #0]
		configureLink();
    1f9a:	4b6f      	ldr	r3, [pc, #444]	; (2158 <STACK_SIZE+0x158>)
    1f9c:	4798      	blx	r3
        //sparkChangeMode(SPARK_MODE_RX);
        resetStatistics();
    1f9e:	4b87      	ldr	r3, [pc, #540]	; (21bc <STACK_SIZE+0x1bc>)
    1fa0:	4798      	blx	r3
		appStart();
    1fa2:	4b6e      	ldr	r3, [pc, #440]	; (215c <STACK_SIZE+0x15c>)
    1fa4:	4798      	blx	r3
        break;
    1fa6:	e4f1      	b.n	198c <handleUSB+0x3c>

      case 'T':
        appStop();
    1fa8:	4b65      	ldr	r3, [pc, #404]	; (2140 <STACK_SIZE+0x140>)
    1faa:	4798      	blx	r3
        usbPrintf("TX mode\n");
    1fac:	4884      	ldr	r0, [pc, #528]	; (21c0 <STACK_SIZE+0x1c0>)
    1fae:	4b6f      	ldr	r3, [pc, #444]	; (216c <STACK_SIZE+0x16c>)
    1fb0:	4798      	blx	r3
        linkBidirectional = false;
    1fb2:	2200      	movs	r2, #0
    1fb4:	4b6e      	ldr	r3, [pc, #440]	; (2170 <STACK_SIZE+0x170>)
    1fb6:	701a      	strb	r2, [r3, #0]
        linkMaster = true;
    1fb8:	3201      	adds	r2, #1
    1fba:	4b6e      	ldr	r3, [pc, #440]	; (2174 <STACK_SIZE+0x174>)
    1fbc:	701a      	strb	r2, [r3, #0]
		configureLink();
    1fbe:	4b66      	ldr	r3, [pc, #408]	; (2158 <STACK_SIZE+0x158>)
    1fc0:	4798      	blx	r3
        //sparkChangeMode(SPARK_MODE_TX);
        resetStatistics();
    1fc2:	4b7e      	ldr	r3, [pc, #504]	; (21bc <STACK_SIZE+0x1bc>)
    1fc4:	4798      	blx	r3
        appStart();
    1fc6:	4b65      	ldr	r3, [pc, #404]	; (215c <STACK_SIZE+0x15c>)
    1fc8:	4798      	blx	r3
        break;
    1fca:	e4df      	b.n	198c <handleUSB+0x3c>
      
      case '[': // SPI command mode
        std_buf[0] = std_buf[1] = std_buf[2];
    1fcc:	4b5e      	ldr	r3, [pc, #376]	; (2148 <STACK_SIZE+0x148>)
    1fce:	789a      	ldrb	r2, [r3, #2]
    1fd0:	705a      	strb	r2, [r3, #1]
    1fd2:	701a      	strb	r2, [r3, #0]
        startSPI();
    1fd4:	4b71      	ldr	r3, [pc, #452]	; (219c <STACK_SIZE+0x19c>)
    1fd6:	4798      	blx	r3
        while(std_buf[0] != ']' && std_buf[1] != ']')
    1fd8:	4b5b      	ldr	r3, [pc, #364]	; (2148 <STACK_SIZE+0x148>)
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	2b5d      	cmp	r3, #93	; 0x5d
    1fde:	d03e      	beq.n	205e <STACK_SIZE+0x5e>
    1fe0:	4b59      	ldr	r3, [pc, #356]	; (2148 <STACK_SIZE+0x148>)
    1fe2:	785b      	ldrb	r3, [r3, #1]
    1fe4:	2b5d      	cmp	r3, #93	; 0x5d
    1fe6:	d03a      	beq.n	205e <STACK_SIZE+0x5e>
        {
          while(!usbIsAvailable());
    1fe8:	4b76      	ldr	r3, [pc, #472]	; (21c4 <STACK_SIZE+0x1c4>)
    1fea:	4798      	blx	r3
    1fec:	2800      	cmp	r0, #0
    1fee:	d0fb      	beq.n	1fe8 <handleUSB+0x698>
          std_buf[0] = usbGet();
    1ff0:	4b54      	ldr	r3, [pc, #336]	; (2144 <STACK_SIZE+0x144>)
    1ff2:	4798      	blx	r3
    1ff4:	4b54      	ldr	r3, [pc, #336]	; (2148 <STACK_SIZE+0x148>)
    1ff6:	7018      	strb	r0, [r3, #0]
          if(std_buf[0] != ']')
    1ff8:	285d      	cmp	r0, #93	; 0x5d
    1ffa:	d0ed      	beq.n	1fd8 <handleUSB+0x688>
          {
            while(!usbIsAvailable());
    1ffc:	4b71      	ldr	r3, [pc, #452]	; (21c4 <STACK_SIZE+0x1c4>)
    1ffe:	4798      	blx	r3
    2000:	2800      	cmp	r0, #0
    2002:	d0fb      	beq.n	1ffc <handleUSB+0x6ac>
            std_buf[1] = usbGet();
    2004:	4b4f      	ldr	r3, [pc, #316]	; (2144 <STACK_SIZE+0x144>)
    2006:	4798      	blx	r3
    2008:	4b4f      	ldr	r3, [pc, #316]	; (2148 <STACK_SIZE+0x148>)
    200a:	7058      	strb	r0, [r3, #1]
            sscanf((char *)std_buf, "%2hx", &b);
    200c:	272e      	movs	r7, #46	; 0x2e
    200e:	aa02      	add	r2, sp, #8
    2010:	4694      	mov	ip, r2
    2012:	4467      	add	r7, ip
    2014:	003a      	movs	r2, r7
    2016:	494d      	ldr	r1, [pc, #308]	; (214c <STACK_SIZE+0x14c>)
    2018:	0018      	movs	r0, r3
    201a:	4b4d      	ldr	r3, [pc, #308]	; (2150 <STACK_SIZE+0x150>)
    201c:	4798      	blx	r3
          
            r = sendSPI(b);
    201e:	7838      	ldrb	r0, [r7, #0]
    2020:	4b5f      	ldr	r3, [pc, #380]	; (21a0 <STACK_SIZE+0x1a0>)
    2022:	4798      	blx	r3
    2024:	0006      	movs	r6, r0
    2026:	b285      	uxth	r5, r0
            usbPrintf("%s%s %02hx \t %s%s %02hx\n",bit_rep[b >> 4], bit_rep[b & 0x0F], b, bit_rep[r >> 4], bit_rep[r & 0x0F], r);
    2028:	883b      	ldrh	r3, [r7, #0]
    202a:	0919      	lsrs	r1, r3, #4
    202c:	220f      	movs	r2, #15
    202e:	401a      	ands	r2, r3
    2030:	092d      	lsrs	r5, r5, #4
    2032:	200f      	movs	r0, #15
    2034:	4030      	ands	r0, r6
    2036:	4c64      	ldr	r4, [pc, #400]	; (21c8 <STACK_SIZE+0x1c8>)
    2038:	0092      	lsls	r2, r2, #2
    203a:	18a2      	adds	r2, r4, r2
    203c:	6852      	ldr	r2, [r2, #4]
    203e:	0089      	lsls	r1, r1, #2
    2040:	1861      	adds	r1, r4, r1
    2042:	6849      	ldr	r1, [r1, #4]
    2044:	9602      	str	r6, [sp, #8]
    2046:	0080      	lsls	r0, r0, #2
    2048:	1820      	adds	r0, r4, r0
    204a:	6840      	ldr	r0, [r0, #4]
    204c:	9001      	str	r0, [sp, #4]
    204e:	00ad      	lsls	r5, r5, #2
    2050:	1964      	adds	r4, r4, r5
    2052:	6860      	ldr	r0, [r4, #4]
    2054:	9000      	str	r0, [sp, #0]
    2056:	485d      	ldr	r0, [pc, #372]	; (21cc <STACK_SIZE+0x1cc>)
    2058:	4c44      	ldr	r4, [pc, #272]	; (216c <STACK_SIZE+0x16c>)
    205a:	47a0      	blx	r4
    205c:	e7bc      	b.n	1fd8 <handleUSB+0x688>
          }
        }
        stopSPI();
    205e:	4b53      	ldr	r3, [pc, #332]	; (21ac <STACK_SIZE+0x1ac>)
    2060:	4798      	blx	r3
        break;
    2062:	e493      	b.n	198c <handleUSB+0x3c>

      case '\n':
          break;

	  case 'o':
		OPT3001_data = OPT3001_read();	
    2064:	4b5a      	ldr	r3, [pc, #360]	; (21d0 <STACK_SIZE+0x1d0>)
    2066:	4798      	blx	r3
    2068:	4b5a      	ldr	r3, [pc, #360]	; (21d4 <STACK_SIZE+0x1d4>)
    206a:	6018      	str	r0, [r3, #0]
		usbPrintf("OPT3001_data = %d\n", *OPT3001_data);
    206c:	7801      	ldrb	r1, [r0, #0]
    206e:	485a      	ldr	r0, [pc, #360]	; (21d8 <STACK_SIZE+0x1d8>)
    2070:	4b3e      	ldr	r3, [pc, #248]	; (216c <STACK_SIZE+0x16c>)
    2072:	4798      	blx	r3
		break;
    2074:	e48a      	b.n	198c <handleUSB+0x3c>
	  case 't':
		Si7021_command(SI7021_MEAS_T_HMH);
    2076:	20e3      	movs	r0, #227	; 0xe3
    2078:	4b58      	ldr	r3, [pc, #352]	; (21dc <STACK_SIZE+0x1dc>)
    207a:	4798      	blx	r3
{
	uint16_t cnt;
	
	//NVIC_DisableIRQ(USB_IRQn);
	
	TC3->COUNT16.COUNT.reg = 0; cnt = 0;
    207c:	2200      	movs	r2, #0
    207e:	4b58      	ldr	r3, [pc, #352]	; (21e0 <STACK_SIZE+0x1e0>)
    2080:	821a      	strh	r2, [r3, #16]
    2082:	e008      	b.n	2096 <STACK_SIZE+0x96>
	
	while(cnt!=ms) // Count the ms till target
	{
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    2084:	2110      	movs	r1, #16
    2086:	4b56      	ldr	r3, [pc, #344]	; (21e0 <STACK_SIZE+0x1e0>)
    2088:	7399      	strb	r1, [r3, #14]
		while (0 == TC3->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    208a:	4b55      	ldr	r3, [pc, #340]	; (21e0 <STACK_SIZE+0x1e0>)
    208c:	7b9b      	ldrb	r3, [r3, #14]
    208e:	06db      	lsls	r3, r3, #27
    2090:	d5fb      	bpl.n	208a <STACK_SIZE+0x8a>
		cnt++;
    2092:	3201      	adds	r2, #1
    2094:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    2096:	2a0a      	cmp	r2, #10
    2098:	d1f4      	bne.n	2084 <STACK_SIZE+0x84>
		sensor_timer_Delay(10);
		Si7021_data = Si7021_read();
    209a:	4b52      	ldr	r3, [pc, #328]	; (21e4 <STACK_SIZE+0x1e4>)
    209c:	4798      	blx	r3
    209e:	4b52      	ldr	r3, [pc, #328]	; (21e8 <STACK_SIZE+0x1e8>)
    20a0:	6018      	str	r0, [r3, #0]
		usbPrintf("Si7021_data = %d\n", *Si7021_data);
    20a2:	7801      	ldrb	r1, [r0, #0]
    20a4:	4851      	ldr	r0, [pc, #324]	; (21ec <STACK_SIZE+0x1ec>)
    20a6:	4b31      	ldr	r3, [pc, #196]	; (216c <STACK_SIZE+0x16c>)
    20a8:	4798      	blx	r3
		break;   
    20aa:	e46f      	b.n	198c <handleUSB+0x3c>
	  case 'h':
	  Si7021_command(SI7021_MEAS_RH_HMH);
    20ac:	20e5      	movs	r0, #229	; 0xe5
    20ae:	4b4b      	ldr	r3, [pc, #300]	; (21dc <STACK_SIZE+0x1dc>)
    20b0:	4798      	blx	r3
	TC3->COUNT16.COUNT.reg = 0; cnt = 0;
    20b2:	2200      	movs	r2, #0
    20b4:	4b4a      	ldr	r3, [pc, #296]	; (21e0 <STACK_SIZE+0x1e0>)
    20b6:	821a      	strh	r2, [r3, #16]
    20b8:	e008      	b.n	20cc <STACK_SIZE+0xcc>
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    20ba:	2110      	movs	r1, #16
    20bc:	4b48      	ldr	r3, [pc, #288]	; (21e0 <STACK_SIZE+0x1e0>)
    20be:	7399      	strb	r1, [r3, #14]
		while (0 == TC3->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    20c0:	4b47      	ldr	r3, [pc, #284]	; (21e0 <STACK_SIZE+0x1e0>)
    20c2:	7b9b      	ldrb	r3, [r3, #14]
    20c4:	06db      	lsls	r3, r3, #27
    20c6:	d5fb      	bpl.n	20c0 <STACK_SIZE+0xc0>
		cnt++;
    20c8:	3201      	adds	r2, #1
    20ca:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    20cc:	2a0a      	cmp	r2, #10
    20ce:	d1f4      	bne.n	20ba <STACK_SIZE+0xba>
	  sensor_timer_Delay(10);
	  Si7021_data = Si7021_read();
    20d0:	4b44      	ldr	r3, [pc, #272]	; (21e4 <STACK_SIZE+0x1e4>)
    20d2:	4798      	blx	r3
    20d4:	4b44      	ldr	r3, [pc, #272]	; (21e8 <STACK_SIZE+0x1e8>)
    20d6:	6018      	str	r0, [r3, #0]
	  usbPrintf("Si7021_data = %d\n", *Si7021_data);
    20d8:	7801      	ldrb	r1, [r0, #0]
    20da:	4844      	ldr	r0, [pc, #272]	; (21ec <STACK_SIZE+0x1ec>)
    20dc:	4b23      	ldr	r3, [pc, #140]	; (216c <STACK_SIZE+0x16c>)
    20de:	4798      	blx	r3
	  break;
    20e0:	e454      	b.n	198c <handleUSB+0x3c>
	  case 'A':
		MMA8491Q_enable();
    20e2:	4b43      	ldr	r3, [pc, #268]	; (21f0 <STACK_SIZE+0x1f0>)
    20e4:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    20e6:	2200      	movs	r2, #0
    20e8:	4b42      	ldr	r3, [pc, #264]	; (21f4 <STACK_SIZE+0x1f4>)
    20ea:	821a      	strh	r2, [r3, #16]
	while(cnt!=ms) // Count the ms till target
    20ec:	2a01      	cmp	r2, #1
    20ee:	d113      	bne.n	2118 <STACK_SIZE+0x118>
		timerDelay(1);
		MMA8491Q_command(MMA8491Q_OUT_Y_LSB);
    20f0:	2004      	movs	r0, #4
    20f2:	4b41      	ldr	r3, [pc, #260]	; (21f8 <STACK_SIZE+0x1f8>)
    20f4:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    20f6:	2200      	movs	r2, #0
    20f8:	4b3e      	ldr	r3, [pc, #248]	; (21f4 <STACK_SIZE+0x1f4>)
    20fa:	821a      	strh	r2, [r3, #16]
	while(cnt!=ms) // Count the ms till target
    20fc:	2a01      	cmp	r2, #1
    20fe:	d115      	bne.n	212c <STACK_SIZE+0x12c>
		timerDelay(1);
		MMA8491Q_data = MMA8491Q_read();
    2100:	4b3e      	ldr	r3, [pc, #248]	; (21fc <STACK_SIZE+0x1fc>)
    2102:	4798      	blx	r3
    2104:	4c3e      	ldr	r4, [pc, #248]	; (2200 <STACK_SIZE+0x200>)
    2106:	6020      	str	r0, [r4, #0]
		MMA8491Q_disable();
    2108:	4b3e      	ldr	r3, [pc, #248]	; (2204 <STACK_SIZE+0x204>)
    210a:	4798      	blx	r3
	  usbPrintf("MMA8491Q_data = %d\n", *MMA8491Q_data);
    210c:	6823      	ldr	r3, [r4, #0]
    210e:	7819      	ldrb	r1, [r3, #0]
    2110:	483d      	ldr	r0, [pc, #244]	; (2208 <STACK_SIZE+0x208>)
    2112:	4b16      	ldr	r3, [pc, #88]	; (216c <STACK_SIZE+0x16c>)
    2114:	4798      	blx	r3
	  break;    
    2116:	e439      	b.n	198c <handleUSB+0x3c>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    2118:	2110      	movs	r1, #16
    211a:	4b36      	ldr	r3, [pc, #216]	; (21f4 <STACK_SIZE+0x1f4>)
    211c:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    211e:	4b35      	ldr	r3, [pc, #212]	; (21f4 <STACK_SIZE+0x1f4>)
    2120:	7b9b      	ldrb	r3, [r3, #14]
    2122:	06db      	lsls	r3, r3, #27
    2124:	d5fb      	bpl.n	211e <STACK_SIZE+0x11e>
		cnt++;
    2126:	3201      	adds	r2, #1
    2128:	b292      	uxth	r2, r2
    212a:	e7df      	b.n	20ec <STACK_SIZE+0xec>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    212c:	2110      	movs	r1, #16
    212e:	4b31      	ldr	r3, [pc, #196]	; (21f4 <STACK_SIZE+0x1f4>)
    2130:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    2132:	4b30      	ldr	r3, [pc, #192]	; (21f4 <STACK_SIZE+0x1f4>)
    2134:	7b9b      	ldrb	r3, [r3, #14]
    2136:	06db      	lsls	r3, r3, #27
    2138:	d5fb      	bpl.n	2132 <STACK_SIZE+0x132>
		cnt++;
    213a:	3201      	adds	r2, #1
    213c:	b292      	uxth	r2, r2
    213e:	e7dd      	b.n	20fc <STACK_SIZE+0xfc>
    2140:	00001521 	.word	0x00001521
    2144:	00003451 	.word	0x00003451
    2148:	200006bc 	.word	0x200006bc
    214c:	000071f0 	.word	0x000071f0
    2150:	0000581d 	.word	0x0000581d
    2154:	200005b0 	.word	0x200005b0
    2158:	00000381 	.word	0x00000381
    215c:	000014ed 	.word	0x000014ed
    2160:	200002d0 	.word	0x200002d0
    2164:	2000048a 	.word	0x2000048a
    2168:	000071f8 	.word	0x000071f8
    216c:	0000346d 	.word	0x0000346d
    2170:	200005b2 	.word	0x200005b2
    2174:	20000488 	.word	0x20000488
    2178:	0000720c 	.word	0x0000720c
    217c:	00000481 	.word	0x00000481
    2180:	00004eb9 	.word	0x00004eb9
    2184:	20000364 	.word	0x20000364
    2188:	0000721c 	.word	0x0000721c
    218c:	00000115 	.word	0x00000115
    2190:	0000722c 	.word	0x0000722c
    2194:	000001e5 	.word	0x000001e5
    2198:	0000723c 	.word	0x0000723c
    219c:	00002ed9 	.word	0x00002ed9
    21a0:	00002ef5 	.word	0x00002ef5
    21a4:	00007264 	.word	0x00007264
    21a8:	0000724c 	.word	0x0000724c
    21ac:	00002f99 	.word	0x00002f99
    21b0:	00007254 	.word	0x00007254
    21b4:	0000725c 	.word	0x0000725c
    21b8:	0000726c 	.word	0x0000726c
    21bc:	00000419 	.word	0x00000419
    21c0:	00007278 	.word	0x00007278
    21c4:	00003431 	.word	0x00003431
    21c8:	20000000 	.word	0x20000000
    21cc:	00007284 	.word	0x00007284
    21d0:	000036bd 	.word	0x000036bd
    21d4:	20000318 	.word	0x20000318
    21d8:	000072a0 	.word	0x000072a0
    21dc:	00004c41 	.word	0x00004c41
    21e0:	42002c00 	.word	0x42002c00
    21e4:	00004bb5 	.word	0x00004bb5
    21e8:	2000037c 	.word	0x2000037c
    21ec:	000072b4 	.word	0x000072b4
    21f0:	00003585 	.word	0x00003585
    21f4:	42003000 	.word	0x42003000
    21f8:	00003649 	.word	0x00003649
    21fc:	000035bd 	.word	0x000035bd
    2200:	20000490 	.word	0x20000490
    2204:	00003595 	.word	0x00003595
    2208:	000072c8 	.word	0x000072c8
      default:
        usbPrintf("??\n");
    220c:	4805      	ldr	r0, [pc, #20]	; (2224 <STACK_SIZE+0x224>)
    220e:	4b06      	ldr	r3, [pc, #24]	; (2228 <STACK_SIZE+0x228>)
    2210:	4798      	blx	r3
        break;
    2212:	f7ff fbbb 	bl	198c <handleUSB+0x3c>
    }
    
  }
}
    2216:	b00f      	add	sp, #60	; 0x3c
    2218:	bc3c      	pop	{r2, r3, r4, r5}
    221a:	4690      	mov	r8, r2
    221c:	4699      	mov	r9, r3
    221e:	46a2      	mov	sl, r4
    2220:	46ab      	mov	fp, r5
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2224:	000072dc 	.word	0x000072dc
    2228:	0000346d 	.word	0x0000346d

0000222c <audioResetStatistics>:
	lastHisEXP[30] = b;
}

void audioResetStatistics(void)
{
	audioRXmissing = 0;
    222c:	2300      	movs	r3, #0
    222e:	4a0b      	ldr	r2, [pc, #44]	; (225c <audioResetStatistics+0x30>)
    2230:	6013      	str	r3, [r2, #0]
	audioRXreceived = 0; 
    2232:	4a0b      	ldr	r2, [pc, #44]	; (2260 <audioResetStatistics+0x34>)
    2234:	6013      	str	r3, [r2, #0]
	audioRXduplicate = 0;
    2236:	4a0b      	ldr	r2, [pc, #44]	; (2264 <audioResetStatistics+0x38>)
    2238:	6013      	str	r3, [r2, #0]
	audioRXrejected = 0;
    223a:	4a0b      	ldr	r2, [pc, #44]	; (2268 <audioResetStatistics+0x3c>)
    223c:	6013      	str	r3, [r2, #0]
	audioTXsent = 0;
    223e:	4a0b      	ldr	r2, [pc, #44]	; (226c <audioResetStatistics+0x40>)
    2240:	6013      	str	r3, [r2, #0]
	audioTXresent = 0;
    2242:	4a0b      	ldr	r2, [pc, #44]	; (2270 <audioResetStatistics+0x44>)
    2244:	6013      	str	r3, [r2, #0]
	audioTXisempty = 0;
    2246:	4a0b      	ldr	r2, [pc, #44]	; (2274 <audioResetStatistics+0x48>)
    2248:	6013      	str	r3, [r2, #0]
	
	lastMySEQ[ 31] = 0;
    224a:	4a0b      	ldr	r2, [pc, #44]	; (2278 <audioResetStatistics+0x4c>)
    224c:	77d3      	strb	r3, [r2, #31]
	lastMyEXP[31] = 0;
    224e:	4a0b      	ldr	r2, [pc, #44]	; (227c <audioResetStatistics+0x50>)
    2250:	77d3      	strb	r3, [r2, #31]
	lastHisSEQ[31] = 0;
    2252:	4a0b      	ldr	r2, [pc, #44]	; (2280 <audioResetStatistics+0x54>)
    2254:	77d3      	strb	r3, [r2, #31]
	lastHisEXP[31] = 0;
    2256:	4a0b      	ldr	r2, [pc, #44]	; (2284 <audioResetStatistics+0x58>)
    2258:	77d3      	strb	r3, [r2, #31]
}
    225a:	4770      	bx	lr
    225c:	200005b8 	.word	0x200005b8
    2260:	200005bc 	.word	0x200005bc
    2264:	20000684 	.word	0x20000684
    2268:	20000614 	.word	0x20000614
    226c:	200005c8 	.word	0x200005c8
    2270:	200005c4 	.word	0x200005c4
    2274:	200005d4 	.word	0x200005d4
    2278:	20000660 	.word	0x20000660
    227c:	200005dc 	.word	0x200005dc
    2280:	20000638 	.word	0x20000638
    2284:	20000618 	.word	0x20000618

00002288 <audioPrintStatistics>:

void audioPrintStatistics(void)
{
    2288:	b510      	push	{r4, lr}
    228a:	b082      	sub	sp, #8
	usbPrintf("Audio TX sent / resent / isempty  = %d / %d / %d \n", audioTXsent, audioTXresent, audioTXisempty);
    228c:	4b24      	ldr	r3, [pc, #144]	; (2320 <audioPrintStatistics+0x98>)
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	4a24      	ldr	r2, [pc, #144]	; (2324 <audioPrintStatistics+0x9c>)
    2292:	6812      	ldr	r2, [r2, #0]
    2294:	4924      	ldr	r1, [pc, #144]	; (2328 <audioPrintStatistics+0xa0>)
    2296:	6809      	ldr	r1, [r1, #0]
    2298:	4824      	ldr	r0, [pc, #144]	; (232c <audioPrintStatistics+0xa4>)
    229a:	4c25      	ldr	r4, [pc, #148]	; (2330 <audioPrintStatistics+0xa8>)
    229c:	47a0      	blx	r4
	usbPrintf("Audio RX  received / duplicate / missing / rejected = %d / %d / %d / %d\n", audioRXreceived, audioRXduplicate, audioRXmissing, audioRXrejected);
    229e:	4b25      	ldr	r3, [pc, #148]	; (2334 <audioPrintStatistics+0xac>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	4a25      	ldr	r2, [pc, #148]	; (2338 <audioPrintStatistics+0xb0>)
    22a4:	6812      	ldr	r2, [r2, #0]
    22a6:	4925      	ldr	r1, [pc, #148]	; (233c <audioPrintStatistics+0xb4>)
    22a8:	6809      	ldr	r1, [r1, #0]
    22aa:	4825      	ldr	r0, [pc, #148]	; (2340 <audioPrintStatistics+0xb8>)
    22ac:	6800      	ldr	r0, [r0, #0]
    22ae:	9000      	str	r0, [sp, #0]
    22b0:	4824      	ldr	r0, [pc, #144]	; (2344 <audioPrintStatistics+0xbc>)
    22b2:	47a0      	blx	r4
	/*
	usbPrintf("Audio mySEQ:  %s\n", lastMySEQ);
	usbPrintf("Audio myEXP:  %s\n", lastMyEXP);
	usbPrintf("Audio HisSEQ: %s\n", lastHisSEQ);
	usbPrintf("Audio HisEXP: %s\n", lastHisEXP);*/
	usbPrintf("RX buf %d, TX buf %d\n", elements(RXbuf), elements(TXbuf));
    22b4:	4b24      	ldr	r3, [pc, #144]	; (2348 <audioPrintStatistics+0xc0>)
    22b6:	6819      	ldr	r1, [r3, #0]
/**
 * @brief Returns the number of elements in the FIFO
 */
inline size_t elements(fifo_t* fifo)
{
	if (fifo->head == fifo->tail)
    22b8:	684b      	ldr	r3, [r1, #4]
    22ba:	688a      	ldr	r2, [r1, #8]
    22bc:	4293      	cmp	r3, r2
    22be:	d010      	beq.n	22e2 <audioPrintStatistics+0x5a>
	return 0;
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    22c0:	68c9      	ldr	r1, [r1, #12]
    22c2:	1e48      	subs	r0, r1, #1
    22c4:	4283      	cmp	r3, r0
    22c6:	d007      	beq.n	22d8 <audioPrintStatistics+0x50>
    22c8:	1e50      	subs	r0, r2, #1
    22ca:	4283      	cmp	r3, r0
    22cc:	d00a      	beq.n	22e4 <audioPrintStatistics+0x5c>
	return fifo->size;
	else if (fifo->head < fifo->tail)
    22ce:	4293      	cmp	r3, r2
    22d0:	d205      	bcs.n	22de <audioPrintStatistics+0x56>
	return (fifo->head) + (fifo->size - fifo->tail);
    22d2:	1a89      	subs	r1, r1, r2
    22d4:	1859      	adds	r1, r3, r1
    22d6:	e005      	b.n	22e4 <audioPrintStatistics+0x5c>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    22d8:	2a00      	cmp	r2, #0
    22da:	d003      	beq.n	22e4 <audioPrintStatistics+0x5c>
    22dc:	e7f4      	b.n	22c8 <audioPrintStatistics+0x40>
	else
	return fifo->head - fifo->tail;
    22de:	1a99      	subs	r1, r3, r2
    22e0:	e000      	b.n	22e4 <audioPrintStatistics+0x5c>
	return 0;
    22e2:	2100      	movs	r1, #0
    22e4:	4b19      	ldr	r3, [pc, #100]	; (234c <audioPrintStatistics+0xc4>)
    22e6:	681a      	ldr	r2, [r3, #0]
	if (fifo->head == fifo->tail)
    22e8:	6853      	ldr	r3, [r2, #4]
    22ea:	6890      	ldr	r0, [r2, #8]
    22ec:	4298      	cmp	r0, r3
    22ee:	d014      	beq.n	231a <audioPrintStatistics+0x92>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    22f0:	68d2      	ldr	r2, [r2, #12]
    22f2:	1e54      	subs	r4, r2, #1
    22f4:	42a3      	cmp	r3, r4
    22f6:	d00a      	beq.n	230e <audioPrintStatistics+0x86>
    22f8:	1e44      	subs	r4, r0, #1
    22fa:	42a3      	cmp	r3, r4
    22fc:	d002      	beq.n	2304 <audioPrintStatistics+0x7c>
	else if (fifo->head < fifo->tail)
    22fe:	4298      	cmp	r0, r3
    2300:	d808      	bhi.n	2314 <audioPrintStatistics+0x8c>
	return fifo->head - fifo->tail;
    2302:	1a1a      	subs	r2, r3, r0
    2304:	4812      	ldr	r0, [pc, #72]	; (2350 <audioPrintStatistics+0xc8>)
    2306:	4b0a      	ldr	r3, [pc, #40]	; (2330 <audioPrintStatistics+0xa8>)
    2308:	4798      	blx	r3
}
    230a:	b002      	add	sp, #8
    230c:	bd10      	pop	{r4, pc}
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    230e:	2800      	cmp	r0, #0
    2310:	d1f2      	bne.n	22f8 <audioPrintStatistics+0x70>
    2312:	e7f7      	b.n	2304 <audioPrintStatistics+0x7c>
	return (fifo->head) + (fifo->size - fifo->tail);
    2314:	1a12      	subs	r2, r2, r0
    2316:	189a      	adds	r2, r3, r2
    2318:	e7f4      	b.n	2304 <audioPrintStatistics+0x7c>
	return 0;
    231a:	2200      	movs	r2, #0
    231c:	e7f2      	b.n	2304 <audioPrintStatistics+0x7c>
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	200005d4 	.word	0x200005d4
    2324:	200005c4 	.word	0x200005c4
    2328:	200005c8 	.word	0x200005c8
    232c:	00007360 	.word	0x00007360
    2330:	0000346d 	.word	0x0000346d
    2334:	200005b8 	.word	0x200005b8
    2338:	20000684 	.word	0x20000684
    233c:	200005bc 	.word	0x200005bc
    2340:	20000614 	.word	0x20000614
    2344:	00007394 	.word	0x00007394
    2348:	200005cc 	.word	0x200005cc
    234c:	200005d8 	.word	0x200005d8
    2350:	000073e0 	.word	0x000073e0

00002354 <audioStart>:

void audioStart(void)
{
    2354:	b510      	push	{r4, lr}
	WM8731_Activate();
    2356:	4b03      	ldr	r3, [pc, #12]	; (2364 <audioStart+0x10>)
    2358:	4798      	blx	r3
	upkeepBytes = 0;
    235a:	2200      	movs	r2, #0
    235c:	4b02      	ldr	r3, [pc, #8]	; (2368 <audioStart+0x14>)
    235e:	701a      	strb	r2, [r3, #0]
}
    2360:	bd10      	pop	{r4, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	00005309 	.word	0x00005309
    2368:	200005fc 	.word	0x200005fc

0000236c <audioStop>:

void audioStop(void)
{
    236c:	b510      	push	{r4, lr}
	WM8731_Deactivate();
    236e:	4b01      	ldr	r3, [pc, #4]	; (2374 <audioStop+0x8>)
    2370:	4798      	blx	r3
}
    2372:	bd10      	pop	{r4, pc}
    2374:	00005319 	.word	0x00005319

00002378 <audioReset>:

void audioReset(void)
{
	// Empty FIFOs?
	
	mySEQ = true; // Push the first packet in
    2378:	2201      	movs	r2, #1
    237a:	4b08      	ldr	r3, [pc, #32]	; (239c <audioReset+0x24>)
    237c:	701a      	strb	r2, [r3, #0]
	myEXP = hisSEQ = hisEXP = false;
    237e:	2300      	movs	r3, #0
    2380:	4a07      	ldr	r2, [pc, #28]	; (23a0 <audioReset+0x28>)
    2382:	7013      	strb	r3, [r2, #0]
    2384:	4a07      	ldr	r2, [pc, #28]	; (23a4 <audioReset+0x2c>)
    2386:	7013      	strb	r3, [r2, #0]
    2388:	4a07      	ldr	r2, [pc, #28]	; (23a8 <audioReset+0x30>)
    238a:	7013      	strb	r3, [r2, #0]
	
	upkeepBytes = 0;
    238c:	4a07      	ldr	r2, [pc, #28]	; (23ac <audioReset+0x34>)
    238e:	7013      	strb	r3, [r2, #0]
	fill = false;
    2390:	4a07      	ldr	r2, [pc, #28]	; (23b0 <audioReset+0x38>)
    2392:	7013      	strb	r3, [r2, #0]
	newPacket = false;
    2394:	4a07      	ldr	r2, [pc, #28]	; (23b4 <audioReset+0x3c>)
    2396:	7013      	strb	r3, [r2, #0]
}
    2398:	4770      	bx	lr
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	20000610 	.word	0x20000610
    23a0:	200005fd 	.word	0x200005fd
    23a4:	20000688 	.word	0x20000688
    23a8:	20000680 	.word	0x20000680
    23ac:	200005fc 	.word	0x200005fc
    23b0:	200005d0 	.word	0x200005d0
    23b4:	20000658 	.word	0x20000658

000023b8 <audioConfigure>:

void audioConfigure(void)
{
    23b8:	b570      	push	{r4, r5, r6, lr}
	WM8731_Init();
    23ba:	4b1e      	ldr	r3, [pc, #120]	; (2434 <audioConfigure+0x7c>)
    23bc:	4798      	blx	r3
	uint16_t* buffer = (uint16_t*)malloc(size);
    23be:	2080      	movs	r0, #128	; 0x80
    23c0:	0180      	lsls	r0, r0, #6
    23c2:	4b1d      	ldr	r3, [pc, #116]	; (2438 <audioConfigure+0x80>)
    23c4:	4798      	blx	r3
    23c6:	1e05      	subs	r5, r0, #0
	if (buffer == NULL)
    23c8:	d02b      	beq.n	2422 <audioConfigure+0x6a>
	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    23ca:	2010      	movs	r0, #16
    23cc:	4b1a      	ldr	r3, [pc, #104]	; (2438 <audioConfigure+0x80>)
    23ce:	4798      	blx	r3
    23d0:	1e04      	subs	r4, r0, #0
	if (fifo == NULL)
    23d2:	d022      	beq.n	241a <audioConfigure+0x62>
	fifo->buffer = buffer;
    23d4:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    23d6:	2300      	movs	r3, #0
    23d8:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    23da:	6083      	str	r3, [r0, #8]
	fifo->size = size / 2;
    23dc:	2380      	movs	r3, #128	; 0x80
    23de:	015b      	lsls	r3, r3, #5
    23e0:	60c3      	str	r3, [r0, #12]
	
	TXbuf = createFifo(sizeof(uint16_t)*FIFO_SIZE);
    23e2:	4b16      	ldr	r3, [pc, #88]	; (243c <audioConfigure+0x84>)
    23e4:	601c      	str	r4, [r3, #0]
	uint16_t* buffer = (uint16_t*)malloc(size);
    23e6:	2080      	movs	r0, #128	; 0x80
    23e8:	0180      	lsls	r0, r0, #6
    23ea:	4b13      	ldr	r3, [pc, #76]	; (2438 <audioConfigure+0x80>)
    23ec:	4798      	blx	r3
    23ee:	1e05      	subs	r5, r0, #0
	if (buffer == NULL)
    23f0:	d01d      	beq.n	242e <audioConfigure+0x76>
	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    23f2:	2010      	movs	r0, #16
    23f4:	4b10      	ldr	r3, [pc, #64]	; (2438 <audioConfigure+0x80>)
    23f6:	4798      	blx	r3
    23f8:	1e04      	subs	r4, r0, #0
	if (fifo == NULL)
    23fa:	d014      	beq.n	2426 <audioConfigure+0x6e>
	fifo->buffer = buffer;
    23fc:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    23fe:	2300      	movs	r3, #0
    2400:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    2402:	6083      	str	r3, [r0, #8]
	fifo->size = size / 2;
    2404:	2380      	movs	r3, #128	; 0x80
    2406:	015b      	lsls	r3, r3, #5
    2408:	60c3      	str	r3, [r0, #12]
	RXbuf = createFifo(sizeof(uint16_t)*FIFO_SIZE);
    240a:	4b0d      	ldr	r3, [pc, #52]	; (2440 <audioConfigure+0x88>)
    240c:	601c      	str	r4, [r3, #0]
	toggle = false;
    240e:	2200      	movs	r2, #0
    2410:	4b0c      	ldr	r3, [pc, #48]	; (2444 <audioConfigure+0x8c>)
    2412:	701a      	strb	r2, [r3, #0]
	
	audioReset();
    2414:	4b0c      	ldr	r3, [pc, #48]	; (2448 <audioConfigure+0x90>)
    2416:	4798      	blx	r3
}
    2418:	bd70      	pop	{r4, r5, r6, pc}
		free(buffer);
    241a:	0028      	movs	r0, r5
    241c:	4b0b      	ldr	r3, [pc, #44]	; (244c <audioConfigure+0x94>)
    241e:	4798      	blx	r3
    2420:	e7df      	b.n	23e2 <audioConfigure+0x2a>
	return NULL;
    2422:	2400      	movs	r4, #0
    2424:	e7dd      	b.n	23e2 <audioConfigure+0x2a>
		free(buffer);
    2426:	0028      	movs	r0, r5
    2428:	4b08      	ldr	r3, [pc, #32]	; (244c <audioConfigure+0x94>)
    242a:	4798      	blx	r3
    242c:	e7ed      	b.n	240a <audioConfigure+0x52>
	return NULL;
    242e:	2400      	movs	r4, #0
    2430:	e7eb      	b.n	240a <audioConfigure+0x52>
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	0000527d 	.word	0x0000527d
    2438:	0000565d 	.word	0x0000565d
    243c:	200005d8 	.word	0x200005d8
    2440:	200005cc 	.word	0x200005cc
    2444:	2000065d 	.word	0x2000065d
    2448:	00002379 	.word	0x00002379
    244c:	00005671 	.word	0x00005671

00002450 <audioProcessPacket>:



bool audioProcessPacket(unsigned char numBytes)
{
    2450:	b510      	push	{r4, lr}
    2452:	0004      	movs	r4, r0
	uint16_t w;
	uint8_t MAC;
	newPacket = false;	
    2454:	2200      	movs	r2, #0
    2456:	4b2b      	ldr	r3, [pc, #172]	; (2504 <audioProcessPacket+0xb4>)
    2458:	701a      	strb	r2, [r3, #0]
	
	
	//updateSeqStats();
	
	// Is there a packet?
	if(numBytes < 1)
    245a:	2800      	cmp	r0, #0
    245c:	d108      	bne.n	2470 <audioProcessPacket+0x20>
	{
		audioRXmissing++;
    245e:	4a2a      	ldr	r2, [pc, #168]	; (2508 <audioProcessPacket+0xb8>)
    2460:	6813      	ldr	r3, [r2, #0]
    2462:	3301      	adds	r3, #1
    2464:	6013      	str	r3, [r2, #0]
		upkeepBytes = 0;	
    2466:	2200      	movs	r2, #0
    2468:	4b28      	ldr	r3, [pc, #160]	; (250c <audioProcessPacket+0xbc>)
    246a:	701a      	strb	r2, [r3, #0]
		newPacket = false;
		return false;
    246c:	2000      	movs	r0, #0
	
	audioRXreceived++;	
	
	
	return true;
}
    246e:	bd10      	pop	{r4, pc}
	sparkPullRX(0, 4);
    2470:	2104      	movs	r1, #4
    2472:	2000      	movs	r0, #0
    2474:	4b26      	ldr	r3, [pc, #152]	; (2510 <audioProcessPacket+0xc0>)
    2476:	4798      	blx	r3
	upkeepBytes = numBytes;
    2478:	4b24      	ldr	r3, [pc, #144]	; (250c <audioProcessPacket+0xbc>)
    247a:	701c      	strb	r4, [r3, #0]
	MAC = sparkRXbuffer[1];	
    247c:	4b25      	ldr	r3, [pc, #148]	; (2514 <audioProcessPacket+0xc4>)
    247e:	681b      	ldr	r3, [r3, #0]
    2480:	785a      	ldrb	r2, [r3, #1]
	hisSEQ = (MAC & 0x01) != 0x00;
    2482:	2301      	movs	r3, #1
    2484:	001c      	movs	r4, r3
    2486:	4014      	ands	r4, r2
    2488:	4923      	ldr	r1, [pc, #140]	; (2518 <audioProcessPacket+0xc8>)
    248a:	700c      	strb	r4, [r1, #0]
	hisEXP = (MAC & 0x02) != 0x00;
    248c:	0851      	lsrs	r1, r2, #1
    248e:	4019      	ands	r1, r3
    2490:	4822      	ldr	r0, [pc, #136]	; (251c <audioProcessPacket+0xcc>)
    2492:	7001      	strb	r1, [r0, #0]
	hisEMPTY = MAC & 0x10;
    2494:	0912      	lsrs	r2, r2, #4
    2496:	4013      	ands	r3, r2
    2498:	4a21      	ldr	r2, [pc, #132]	; (2520 <audioProcessPacket+0xd0>)
    249a:	7013      	strb	r3, [r2, #0]
	if(!hisEMPTY)
    249c:	d103      	bne.n	24a6 <audioProcessPacket+0x56>
		if(sparkCRCfail)
    249e:	4b21      	ldr	r3, [pc, #132]	; (2524 <audioProcessPacket+0xd4>)
    24a0:	7818      	ldrb	r0, [r3, #0]
    24a2:	2800      	cmp	r0, #0
    24a4:	d11d      	bne.n	24e2 <audioProcessPacket+0x92>
	if( (myEXP && hisSEQ) || (!myEXP && !hisSEQ))
    24a6:	4b20      	ldr	r3, [pc, #128]	; (2528 <audioProcessPacket+0xd8>)
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d001      	beq.n	24b2 <audioProcessPacket+0x62>
    24ae:	2c00      	cmp	r4, #0
    24b0:	d103      	bne.n	24ba <audioProcessPacket+0x6a>
    24b2:	2b00      	cmp	r3, #0
    24b4:	d108      	bne.n	24c8 <audioProcessPacket+0x78>
    24b6:	2c00      	cmp	r4, #0
    24b8:	d106      	bne.n	24c8 <audioProcessPacket+0x78>
		newPacket = true;
    24ba:	2101      	movs	r1, #1
    24bc:	4a11      	ldr	r2, [pc, #68]	; (2504 <audioProcessPacket+0xb4>)
    24be:	7011      	strb	r1, [r2, #0]
		myEXP = !myEXP;
    24c0:	2201      	movs	r2, #1
    24c2:	4053      	eors	r3, r2
    24c4:	4a18      	ldr	r2, [pc, #96]	; (2528 <audioProcessPacket+0xd8>)
    24c6:	7013      	strb	r3, [r2, #0]
	if(!RXbuf || !newPacket)
    24c8:	4b18      	ldr	r3, [pc, #96]	; (252c <audioProcessPacket+0xdc>)
    24ca:	681b      	ldr	r3, [r3, #0]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d010      	beq.n	24f2 <audioProcessPacket+0xa2>
    24d0:	4b0c      	ldr	r3, [pc, #48]	; (2504 <audioProcessPacket+0xb4>)
    24d2:	7818      	ldrb	r0, [r3, #0]
    24d4:	2800      	cmp	r0, #0
    24d6:	d00c      	beq.n	24f2 <audioProcessPacket+0xa2>
	audioRXreceived++;	
    24d8:	4a15      	ldr	r2, [pc, #84]	; (2530 <audioProcessPacket+0xe0>)
    24da:	6813      	ldr	r3, [r2, #0]
    24dc:	3301      	adds	r3, #1
    24de:	6013      	str	r3, [r2, #0]
	return true;
    24e0:	e7c5      	b.n	246e <audioProcessPacket+0x1e>
			audioRXrejected++;	
    24e2:	4a14      	ldr	r2, [pc, #80]	; (2534 <audioProcessPacket+0xe4>)
    24e4:	6813      	ldr	r3, [r2, #0]
    24e6:	3301      	adds	r3, #1
    24e8:	6013      	str	r3, [r2, #0]
			newPacket = false;		
    24ea:	2200      	movs	r2, #0
    24ec:	4b05      	ldr	r3, [pc, #20]	; (2504 <audioProcessPacket+0xb4>)
    24ee:	701a      	strb	r2, [r3, #0]
			return true;
    24f0:	e7bd      	b.n	246e <audioProcessPacket+0x1e>
		audioRXduplicate++;	
    24f2:	4a11      	ldr	r2, [pc, #68]	; (2538 <audioProcessPacket+0xe8>)
    24f4:	6813      	ldr	r3, [r2, #0]
    24f6:	3301      	adds	r3, #1
    24f8:	6013      	str	r3, [r2, #0]
		newPacket = false;		
    24fa:	2200      	movs	r2, #0
    24fc:	4b01      	ldr	r3, [pc, #4]	; (2504 <audioProcessPacket+0xb4>)
    24fe:	701a      	strb	r2, [r3, #0]
		return true;
    2500:	2001      	movs	r0, #1
    2502:	e7b4      	b.n	246e <audioProcessPacket+0x1e>
    2504:	20000658 	.word	0x20000658
    2508:	200005b8 	.word	0x200005b8
    250c:	200005fc 	.word	0x200005fc
    2510:	00003f05 	.word	0x00003f05
    2514:	20000c68 	.word	0x20000c68
    2518:	20000688 	.word	0x20000688
    251c:	200005fd 	.word	0x200005fd
    2520:	2000065e 	.word	0x2000065e
    2524:	20000c79 	.word	0x20000c79
    2528:	20000680 	.word	0x20000680
    252c:	200005cc 	.word	0x200005cc
    2530:	200005bc 	.word	0x200005bc
    2534:	20000614 	.word	0x20000614
    2538:	20000684 	.word	0x20000684

0000253c <audioUpkeepPacket>:

void audioUpkeepPacket(void)
{
    253c:	b5f0      	push	{r4, r5, r6, r7, lr}
    253e:	46c6      	mov	lr, r8
    2540:	b500      	push	{lr}
#ifdef DO_UPKEEP	
	unsigned char numBytes = upkeepBytes;
    2542:	4b47      	ldr	r3, [pc, #284]	; (2660 <audioUpkeepPacket+0x124>)
    2544:	781c      	ldrb	r4, [r3, #0]
	// Fish the remaining bytes out
	
	if(numBytes == 0)
    2546:	2c00      	cmp	r4, #0
    2548:	d102      	bne.n	2550 <audioUpkeepPacket+0x14>
		//push(RXbuf, w);
		//}
		REG_PORT_OUTSET1 = PORT_PB09;
	}
#endif	
}
    254a:	bc04      	pop	{r2}
    254c:	4690      	mov	r8, r2
    254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sparkPullRX(4, numBytes);
    2550:	0021      	movs	r1, r4
    2552:	2004      	movs	r0, #4
    2554:	4b43      	ldr	r3, [pc, #268]	; (2664 <audioUpkeepPacket+0x128>)
    2556:	4798      	blx	r3
	if(!hisEMPTY && newPacket)
    2558:	4b43      	ldr	r3, [pc, #268]	; (2668 <audioUpkeepPacket+0x12c>)
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	2b00      	cmp	r3, #0
    255e:	d1f4      	bne.n	254a <audioUpkeepPacket+0xe>
    2560:	4b42      	ldr	r3, [pc, #264]	; (266c <audioUpkeepPacket+0x130>)
    2562:	781b      	ldrb	r3, [r3, #0]
    2564:	2b00      	cmp	r3, #0
    2566:	d0f0      	beq.n	254a <audioUpkeepPacket+0xe>
		REG_PORT_OUTCLR1 = PORT_PB09;
    2568:	2280      	movs	r2, #128	; 0x80
    256a:	0092      	lsls	r2, r2, #2
    256c:	4b40      	ldr	r3, [pc, #256]	; (2670 <audioUpkeepPacket+0x134>)
    256e:	601a      	str	r2, [r3, #0]
		if(elements(RXbuf)>(FIFO_SIZE-200))
    2570:	4b40      	ldr	r3, [pc, #256]	; (2674 <audioUpkeepPacket+0x138>)
    2572:	6819      	ldr	r1, [r3, #0]
	if (fifo->head == fifo->tail)
    2574:	684b      	ldr	r3, [r1, #4]
    2576:	688a      	ldr	r2, [r1, #8]
    2578:	429a      	cmp	r2, r3
    257a:	d010      	beq.n	259e <audioUpkeepPacket+0x62>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    257c:	68c8      	ldr	r0, [r1, #12]
    257e:	1e45      	subs	r5, r0, #1
    2580:	42ab      	cmp	r3, r5
    2582:	d007      	beq.n	2594 <audioUpkeepPacket+0x58>
    2584:	1e55      	subs	r5, r2, #1
    2586:	42ab      	cmp	r3, r5
    2588:	d00a      	beq.n	25a0 <audioUpkeepPacket+0x64>
	else if (fifo->head < fifo->tail)
    258a:	429a      	cmp	r2, r3
    258c:	d905      	bls.n	259a <audioUpkeepPacket+0x5e>
	return (fifo->head) + (fifo->size - fifo->tail);
    258e:	1a80      	subs	r0, r0, r2
    2590:	1818      	adds	r0, r3, r0
    2592:	e005      	b.n	25a0 <audioUpkeepPacket+0x64>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    2594:	2a00      	cmp	r2, #0
    2596:	d003      	beq.n	25a0 <audioUpkeepPacket+0x64>
    2598:	e7f4      	b.n	2584 <audioUpkeepPacket+0x48>
	return fifo->head - fifo->tail;
    259a:	1a98      	subs	r0, r3, r2
    259c:	e000      	b.n	25a0 <audioUpkeepPacket+0x64>
	return 0;
    259e:	2000      	movs	r0, #0
    25a0:	4d35      	ldr	r5, [pc, #212]	; (2678 <audioUpkeepPacket+0x13c>)
    25a2:	42a8      	cmp	r0, r5
    25a4:	d902      	bls.n	25ac <audioUpkeepPacket+0x70>
		fill = false;
    25a6:	2500      	movs	r5, #0
    25a8:	4834      	ldr	r0, [pc, #208]	; (267c <audioUpkeepPacket+0x140>)
    25aa:	7005      	strb	r5, [r0, #0]
	if (fifo->head == fifo->tail)
    25ac:	429a      	cmp	r2, r3
    25ae:	d010      	beq.n	25d2 <audioUpkeepPacket+0x96>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    25b0:	68c8      	ldr	r0, [r1, #12]
    25b2:	1e45      	subs	r5, r0, #1
    25b4:	42ab      	cmp	r3, r5
    25b6:	d007      	beq.n	25c8 <audioUpkeepPacket+0x8c>
    25b8:	1e55      	subs	r5, r2, #1
    25ba:	42ab      	cmp	r3, r5
    25bc:	d00a      	beq.n	25d4 <audioUpkeepPacket+0x98>
	else if (fifo->head < fifo->tail)
    25be:	429a      	cmp	r2, r3
    25c0:	d905      	bls.n	25ce <audioUpkeepPacket+0x92>
	return (fifo->head) + (fifo->size - fifo->tail);
    25c2:	1a80      	subs	r0, r0, r2
    25c4:	1818      	adds	r0, r3, r0
    25c6:	e005      	b.n	25d4 <audioUpkeepPacket+0x98>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    25c8:	2a00      	cmp	r2, #0
    25ca:	d003      	beq.n	25d4 <audioUpkeepPacket+0x98>
    25cc:	e7f4      	b.n	25b8 <audioUpkeepPacket+0x7c>
	return fifo->head - fifo->tail;
    25ce:	1a98      	subs	r0, r3, r2
    25d0:	e000      	b.n	25d4 <audioUpkeepPacket+0x98>
	return 0;
    25d2:	2000      	movs	r0, #0
		if(elements(RXbuf)<(FIFO_SIZE/2))
    25d4:	4a2a      	ldr	r2, [pc, #168]	; (2680 <audioUpkeepPacket+0x144>)
    25d6:	4290      	cmp	r0, r2
    25d8:	d802      	bhi.n	25e0 <audioUpkeepPacket+0xa4>
		fill = true;
    25da:	2001      	movs	r0, #1
    25dc:	4a27      	ldr	r2, [pc, #156]	; (267c <audioUpkeepPacket+0x140>)
    25de:	7010      	strb	r0, [r2, #0]
		if(fill)
    25e0:	4a26      	ldr	r2, [pc, #152]	; (267c <audioUpkeepPacket+0x140>)
    25e2:	7812      	ldrb	r2, [r2, #0]
    25e4:	2a00      	cmp	r2, #0
    25e6:	d01e      	beq.n	2626 <audioUpkeepPacket+0xea>
			uint16_t remaining = (FIFO_SIZE-RXbuf->head);
    25e8:	b29a      	uxth	r2, r3
    25ea:	2680      	movs	r6, #128	; 0x80
    25ec:	0176      	lsls	r6, r6, #5
    25ee:	1ab6      	subs	r6, r6, r2
    25f0:	b2b6      	uxth	r6, r6
			uint16_t transfer = (numBytes-6) >> 1;
    25f2:	3c06      	subs	r4, #6
    25f4:	1065      	asrs	r5, r4, #1
    25f6:	b2aa      	uxth	r2, r5
			if(transfer <= remaining)
    25f8:	4296      	cmp	r6, r2
    25fa:	d319      	bcc.n	2630 <audioUpkeepPacket+0xf4>
				memcpy(&RXbuf->buffer[RXbuf->head], &sparkRXbuffer[4], transfer << 1);
    25fc:	6808      	ldr	r0, [r1, #0]
    25fe:	005b      	lsls	r3, r3, #1
    2600:	18c0      	adds	r0, r0, r3
    2602:	4b20      	ldr	r3, [pc, #128]	; (2684 <audioUpkeepPacket+0x148>)
    2604:	6819      	ldr	r1, [r3, #0]
    2606:	3104      	adds	r1, #4
    2608:	4a1f      	ldr	r2, [pc, #124]	; (2688 <audioUpkeepPacket+0x14c>)
    260a:	4022      	ands	r2, r4
    260c:	4b1f      	ldr	r3, [pc, #124]	; (268c <audioUpkeepPacket+0x150>)
    260e:	4798      	blx	r3
			RXbuf->head = (RXbuf->head+transfer)%RXbuf->size;
    2610:	4b18      	ldr	r3, [pc, #96]	; (2674 <audioUpkeepPacket+0x138>)
    2612:	681c      	ldr	r4, [r3, #0]
    2614:	0428      	lsls	r0, r5, #16
    2616:	0c00      	lsrs	r0, r0, #16
    2618:	6863      	ldr	r3, [r4, #4]
    261a:	469c      	mov	ip, r3
    261c:	4460      	add	r0, ip
    261e:	68e1      	ldr	r1, [r4, #12]
    2620:	4b1b      	ldr	r3, [pc, #108]	; (2690 <audioUpkeepPacket+0x154>)
    2622:	4798      	blx	r3
    2624:	6061      	str	r1, [r4, #4]
		REG_PORT_OUTSET1 = PORT_PB09;
    2626:	2280      	movs	r2, #128	; 0x80
    2628:	0092      	lsls	r2, r2, #2
    262a:	4b1a      	ldr	r3, [pc, #104]	; (2694 <audioUpkeepPacket+0x158>)
    262c:	601a      	str	r2, [r3, #0]
    262e:	e78c      	b.n	254a <audioUpkeepPacket+0xe>
				memcpy(&RXbuf->buffer[RXbuf->head], &sparkRXbuffer[4], remaining << 1);
    2630:	6808      	ldr	r0, [r1, #0]
    2632:	005b      	lsls	r3, r3, #1
    2634:	18c0      	adds	r0, r0, r3
    2636:	4b13      	ldr	r3, [pc, #76]	; (2684 <audioUpkeepPacket+0x148>)
    2638:	4698      	mov	r8, r3
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	1d19      	adds	r1, r3, #4
    263e:	0074      	lsls	r4, r6, #1
    2640:	0022      	movs	r2, r4
    2642:	4f12      	ldr	r7, [pc, #72]	; (268c <audioUpkeepPacket+0x150>)
    2644:	47b8      	blx	r7
				memcpy(&RXbuf->buffer[0], &sparkRXbuffer[4+(remaining << 1)], (transfer - remaining) << 1);
    2646:	4b0b      	ldr	r3, [pc, #44]	; (2674 <audioUpkeepPacket+0x138>)
    2648:	681b      	ldr	r3, [r3, #0]
    264a:	6818      	ldr	r0, [r3, #0]
    264c:	4643      	mov	r3, r8
    264e:	681b      	ldr	r3, [r3, #0]
    2650:	1d21      	adds	r1, r4, #4
    2652:	1859      	adds	r1, r3, r1
    2654:	042a      	lsls	r2, r5, #16
    2656:	0c12      	lsrs	r2, r2, #16
    2658:	1b92      	subs	r2, r2, r6
    265a:	0052      	lsls	r2, r2, #1
    265c:	47b8      	blx	r7
    265e:	e7d7      	b.n	2610 <audioUpkeepPacket+0xd4>
    2660:	200005fc 	.word	0x200005fc
    2664:	00003f05 	.word	0x00003f05
    2668:	2000065e 	.word	0x2000065e
    266c:	20000658 	.word	0x20000658
    2670:	41004494 	.word	0x41004494
    2674:	200005cc 	.word	0x200005cc
    2678:	00000f38 	.word	0x00000f38
    267c:	200005d0 	.word	0x200005d0
    2680:	000007ff 	.word	0x000007ff
    2684:	20000c68 	.word	0x20000c68
    2688:	0001fffe 	.word	0x0001fffe
    268c:	00005685 	.word	0x00005685
    2690:	00005435 	.word	0x00005435
    2694:	41004498 	.word	0x41004498

00002698 <audioFillPacket>:

void audioFillPacket(unsigned char numBytes)
{
    2698:	b5f0      	push	{r4, r5, r6, r7, lr}
    269a:	46d6      	mov	lr, sl
    269c:	464f      	mov	r7, r9
    269e:	4646      	mov	r6, r8
    26a0:	b5c0      	push	{r6, r7, lr}
    26a2:	0004      	movs	r4, r0
		myEMPTY = true;
	else
		myEMPTY = false;*/
		
	// Process header
	if( (hisEXP && !mySEQ) || (!hisEXP && mySEQ))
    26a4:	4b65      	ldr	r3, [pc, #404]	; (283c <audioFillPacket+0x1a4>)
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d003      	beq.n	26b4 <audioFillPacket+0x1c>
    26ac:	4a64      	ldr	r2, [pc, #400]	; (2840 <audioFillPacket+0x1a8>)
    26ae:	7812      	ldrb	r2, [r2, #0]
    26b0:	2a00      	cmp	r2, #0
    26b2:	d005      	beq.n	26c0 <audioFillPacket+0x28>
    26b4:	2b00      	cmp	r3, #0
    26b6:	d129      	bne.n	270c <audioFillPacket+0x74>
    26b8:	4b61      	ldr	r3, [pc, #388]	; (2840 <audioFillPacket+0x1a8>)
    26ba:	7819      	ldrb	r1, [r3, #0]
    26bc:	2900      	cmp	r1, #0
    26be:	d005      	beq.n	26cc <audioFillPacket+0x34>
	{
		//if(!myEMPTY)
		mySEQ = !mySEQ; // Next packet
    26c0:	4a5f      	ldr	r2, [pc, #380]	; (2840 <audioFillPacket+0x1a8>)
    26c2:	7813      	ldrb	r3, [r2, #0]
    26c4:	2101      	movs	r1, #1
    26c6:	404b      	eors	r3, r1
    26c8:	7013      	strb	r3, [r2, #0]
		newPacket = true;
    26ca:	2101      	movs	r1, #1
	}			
	if(mySEQ)
    26cc:	4b5c      	ldr	r3, [pc, #368]	; (2840 <audioFillPacket+0x1a8>)
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	2b00      	cmp	r3, #0
    26d2:	d11d      	bne.n	2710 <audioFillPacket+0x78>
	uint8_t MAC = 0x00;
    26d4:	2200      	movs	r2, #0
		MAC |= 0x01;
	if(myEXP)
    26d6:	4b5b      	ldr	r3, [pc, #364]	; (2844 <audioFillPacket+0x1ac>)
    26d8:	781b      	ldrb	r3, [r3, #0]
    26da:	2b00      	cmp	r3, #0
    26dc:	d002      	beq.n	26e4 <audioFillPacket+0x4c>
		MAC |= 0x02;	
    26de:	2302      	movs	r3, #2
    26e0:	431a      	orrs	r2, r3
    26e2:	b2d2      	uxtb	r2, r2
	if(newPacket)// && myEMPTY)
    26e4:	2900      	cmp	r1, #0
    26e6:	d020      	beq.n	272a <audioFillPacket+0x92>
	{
		// Can we fill?
		if(elements(TXbuf)<numBytes)
    26e8:	4b57      	ldr	r3, [pc, #348]	; (2848 <audioFillPacket+0x1b0>)
    26ea:	681d      	ldr	r5, [r3, #0]
	if (fifo->head == fifo->tail)
    26ec:	686b      	ldr	r3, [r5, #4]
    26ee:	68ae      	ldr	r6, [r5, #8]
    26f0:	42b3      	cmp	r3, r6
    26f2:	d014      	beq.n	271e <audioFillPacket+0x86>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    26f4:	68e8      	ldr	r0, [r5, #12]
    26f6:	1e45      	subs	r5, r0, #1
    26f8:	42ab      	cmp	r3, r5
    26fa:	d00b      	beq.n	2714 <audioFillPacket+0x7c>
    26fc:	1e75      	subs	r5, r6, #1
    26fe:	42ab      	cmp	r3, r5
    2700:	d00e      	beq.n	2720 <audioFillPacket+0x88>
	else if (fifo->head < fifo->tail)
    2702:	42b3      	cmp	r3, r6
    2704:	d209      	bcs.n	271a <audioFillPacket+0x82>
	return (fifo->head) + (fifo->size - fifo->tail);
    2706:	1b80      	subs	r0, r0, r6
    2708:	1818      	adds	r0, r3, r0
    270a:	e009      	b.n	2720 <audioFillPacket+0x88>
	bool newPacket = false;
    270c:	2100      	movs	r1, #0
    270e:	e7dd      	b.n	26cc <audioFillPacket+0x34>
		MAC |= 0x01;
    2710:	2201      	movs	r2, #1
    2712:	e7e0      	b.n	26d6 <audioFillPacket+0x3e>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    2714:	2e00      	cmp	r6, #0
    2716:	d003      	beq.n	2720 <audioFillPacket+0x88>
    2718:	e7f0      	b.n	26fc <audioFillPacket+0x64>
	return fifo->head - fifo->tail;
    271a:	1b98      	subs	r0, r3, r6
    271c:	e000      	b.n	2720 <audioFillPacket+0x88>
	return 0;
    271e:	2000      	movs	r0, #0
		if(elements(TXbuf)<numBytes)
    2720:	4284      	cmp	r4, r0
    2722:	d94f      	bls.n	27c4 <audioFillPacket+0x12c>
			myEMPTY = true;
    2724:	2001      	movs	r0, #1
    2726:	4b49      	ldr	r3, [pc, #292]	; (284c <audioFillPacket+0x1b4>)
    2728:	7018      	strb	r0, [r3, #0]
		else
			myEMPTY = false;				
	}
	if(myEMPTY)
    272a:	4b48      	ldr	r3, [pc, #288]	; (284c <audioFillPacket+0x1b4>)
    272c:	781b      	ldrb	r3, [r3, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d002      	beq.n	2738 <audioFillPacket+0xa0>
		MAC |= 0x10;
    2732:	2310      	movs	r3, #16
    2734:	431a      	orrs	r2, r3
    2736:	b2d2      	uxtb	r2, r2
	
	
	
	// Header
	sparkTXbuffer[0] = 0xFF; // Spacer
    2738:	4b45      	ldr	r3, [pc, #276]	; (2850 <audioFillPacket+0x1b8>)
    273a:	20ff      	movs	r0, #255	; 0xff
    273c:	681d      	ldr	r5, [r3, #0]
    273e:	7028      	strb	r0, [r5, #0]
	sparkTXbuffer[1] = MAC; // MAC	
    2740:	6818      	ldr	r0, [r3, #0]
    2742:	7042      	strb	r2, [r0, #1]
	CRC = calcCRC(MAC, CRC);
	
	sparkTXbuffer[2] = CRC >> 8; // MSB part of CRC
	sparkTXbuffer[3] = CRC & 0x00FF; // LSB part of CRC*/
	//sparkTXbuffer[2] = crc8_table[MAC]; // Header CRC
	sparkTXbuffer[3] = 0x00; // Unused for now
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	2200      	movs	r2, #0
    2748:	70da      	strb	r2, [r3, #3]
	
	// New Data
	if(!TXbuf || !newPacket)
    274a:	4b3f      	ldr	r3, [pc, #252]	; (2848 <audioFillPacket+0x1b0>)
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d03c      	beq.n	27cc <audioFillPacket+0x134>
    2752:	2900      	cmp	r1, #0
    2754:	d03a      	beq.n	27cc <audioFillPacket+0x134>
		audioTXresent++;
		
		sparkPushTX(0, numBytes);
		return;
	}	
	audioTXsent++;
    2756:	4a3f      	ldr	r2, [pc, #252]	; (2854 <audioFillPacket+0x1bc>)
    2758:	6813      	ldr	r3, [r2, #0]
    275a:	3301      	adds	r3, #1
    275c:	6013      	str	r3, [r2, #0]
	
	if(myEMPTY)
    275e:	4b3b      	ldr	r3, [pc, #236]	; (284c <audioFillPacket+0x1b4>)
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d150      	bne.n	2808 <audioFillPacket+0x170>
		sparkPushTX(0, numBytes);
		return;
	}
	else
	{	 
		REG_PORT_OUTCLR1 = PORT_PB09;
    2766:	2280      	movs	r2, #128	; 0x80
    2768:	0092      	lsls	r2, r2, #2
    276a:	4b3b      	ldr	r3, [pc, #236]	; (2858 <audioFillPacket+0x1c0>)
    276c:	601a      	str	r2, [r3, #0]
		
		
		// Check for size!	
		
		// Size of uint16_t transfer is (numBytes-4)/2
		uint16_t remaining = (FIFO_SIZE-TXbuf->tail);
    276e:	4b36      	ldr	r3, [pc, #216]	; (2848 <audioFillPacket+0x1b0>)
    2770:	681f      	ldr	r7, [r3, #0]
    2772:	68bb      	ldr	r3, [r7, #8]
    2774:	b29a      	uxth	r2, r3
    2776:	2680      	movs	r6, #128	; 0x80
    2778:	0176      	lsls	r6, r6, #5
    277a:	1ab6      	subs	r6, r6, r2
    277c:	b2b6      	uxth	r6, r6
		uint16_t transfer = (numBytes-6) >> 1;
    277e:	1fa2      	subs	r2, r4, #6
    2780:	1055      	asrs	r5, r2, #1
    2782:	b2a9      	uxth	r1, r5
		
		// Memcpy
		if(transfer <= remaining)
    2784:	428e      	cmp	r6, r1
    2786:	d341      	bcc.n	280c <audioFillPacket+0x174>
		{
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], transfer << 1);
    2788:	4931      	ldr	r1, [pc, #196]	; (2850 <audioFillPacket+0x1b8>)
    278a:	6808      	ldr	r0, [r1, #0]
    278c:	3004      	adds	r0, #4
    278e:	6839      	ldr	r1, [r7, #0]
    2790:	005b      	lsls	r3, r3, #1
    2792:	18c9      	adds	r1, r1, r3
    2794:	4b31      	ldr	r3, [pc, #196]	; (285c <audioFillPacket+0x1c4>)
    2796:	401a      	ands	r2, r3
    2798:	4b31      	ldr	r3, [pc, #196]	; (2860 <audioFillPacket+0x1c8>)
    279a:	4798      	blx	r3
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], remaining << 1);
			// From possible start of FIFO
			memcpy(&sparkTXbuffer[4+(remaining << 1)], &TXbuf->buffer[0], (transfer - remaining) << 1);
			//TXbuf->tail = TXbuf->tail+transfer-TXbuf->size;
		}
		TXbuf->tail = (TXbuf->tail+transfer)%TXbuf->size;
    279c:	4b2a      	ldr	r3, [pc, #168]	; (2848 <audioFillPacket+0x1b0>)
    279e:	681e      	ldr	r6, [r3, #0]
    27a0:	0428      	lsls	r0, r5, #16
    27a2:	0c00      	lsrs	r0, r0, #16
    27a4:	68b3      	ldr	r3, [r6, #8]
    27a6:	469c      	mov	ip, r3
    27a8:	4460      	add	r0, ip
    27aa:	68f1      	ldr	r1, [r6, #12]
    27ac:	4b2d      	ldr	r3, [pc, #180]	; (2864 <audioFillPacket+0x1cc>)
    27ae:	4798      	blx	r3
    27b0:	60b1      	str	r1, [r6, #8]
			
			//sparkTXbuffer[i+1] = 0xF0;
			//sparkTXbuffer[i] = 0x00;
		}*/
		
		REG_PORT_OUTSET1 = PORT_PB09;
    27b2:	2280      	movs	r2, #128	; 0x80
    27b4:	0092      	lsls	r2, r2, #2
    27b6:	4b2c      	ldr	r3, [pc, #176]	; (2868 <audioFillPacket+0x1d0>)
    27b8:	601a      	str	r2, [r3, #0]
		
	}
	
	sparkPushTX(0, numBytes);
    27ba:	0021      	movs	r1, r4
    27bc:	2000      	movs	r0, #0
    27be:	4b2b      	ldr	r3, [pc, #172]	; (286c <audioFillPacket+0x1d4>)
    27c0:	4798      	blx	r3
    27c2:	e00b      	b.n	27dc <audioFillPacket+0x144>
			myEMPTY = false;				
    27c4:	2000      	movs	r0, #0
    27c6:	4b21      	ldr	r3, [pc, #132]	; (284c <audioFillPacket+0x1b4>)
    27c8:	7018      	strb	r0, [r3, #0]
    27ca:	e7ae      	b.n	272a <audioFillPacket+0x92>
		audioTXresent++;
    27cc:	4a28      	ldr	r2, [pc, #160]	; (2870 <audioFillPacket+0x1d8>)
    27ce:	6813      	ldr	r3, [r2, #0]
    27d0:	3301      	adds	r3, #1
    27d2:	6013      	str	r3, [r2, #0]
		sparkPushTX(0, numBytes);
    27d4:	0021      	movs	r1, r4
    27d6:	2000      	movs	r0, #0
    27d8:	4b24      	ldr	r3, [pc, #144]	; (286c <audioFillPacket+0x1d4>)
    27da:	4798      	blx	r3
}
    27dc:	bc1c      	pop	{r2, r3, r4}
    27de:	4690      	mov	r8, r2
    27e0:	4699      	mov	r9, r3
    27e2:	46a2      	mov	sl, r4
    27e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sparkTXbuffer[i] = 0x7F;		
    27e6:	4a1a      	ldr	r2, [pc, #104]	; (2850 <audioFillPacket+0x1b8>)
    27e8:	6812      	ldr	r2, [r2, #0]
    27ea:	217f      	movs	r1, #127	; 0x7f
    27ec:	54d1      	strb	r1, [r2, r3]
		for(unsigned char i=4;i<numBytes;i++)
    27ee:	3301      	adds	r3, #1
    27f0:	b2db      	uxtb	r3, r3
    27f2:	42a3      	cmp	r3, r4
    27f4:	d3f7      	bcc.n	27e6 <audioFillPacket+0x14e>
		audioTXisempty++;
    27f6:	4a1f      	ldr	r2, [pc, #124]	; (2874 <audioFillPacket+0x1dc>)
    27f8:	6813      	ldr	r3, [r2, #0]
    27fa:	3301      	adds	r3, #1
    27fc:	6013      	str	r3, [r2, #0]
		sparkPushTX(0, numBytes);
    27fe:	0021      	movs	r1, r4
    2800:	2000      	movs	r0, #0
    2802:	4b1a      	ldr	r3, [pc, #104]	; (286c <audioFillPacket+0x1d4>)
    2804:	4798      	blx	r3
		return;
    2806:	e7e9      	b.n	27dc <audioFillPacket+0x144>
    2808:	2304      	movs	r3, #4
    280a:	e7f2      	b.n	27f2 <audioFillPacket+0x15a>
			memcpy(&sparkTXbuffer[4], &TXbuf->buffer[TXbuf->tail], remaining << 1);
    280c:	4a10      	ldr	r2, [pc, #64]	; (2850 <audioFillPacket+0x1b8>)
    280e:	6812      	ldr	r2, [r2, #0]
    2810:	4691      	mov	r9, r2
    2812:	1d10      	adds	r0, r2, #4
    2814:	005b      	lsls	r3, r3, #1
    2816:	683a      	ldr	r2, [r7, #0]
    2818:	18d1      	adds	r1, r2, r3
    281a:	0073      	lsls	r3, r6, #1
    281c:	469a      	mov	sl, r3
    281e:	001a      	movs	r2, r3
    2820:	4b0f      	ldr	r3, [pc, #60]	; (2860 <audioFillPacket+0x1c8>)
    2822:	4698      	mov	r8, r3
    2824:	4798      	blx	r3
			memcpy(&sparkTXbuffer[4+(remaining << 1)], &TXbuf->buffer[0], (transfer - remaining) << 1);
    2826:	4653      	mov	r3, sl
    2828:	1d18      	adds	r0, r3, #4
    282a:	4448      	add	r0, r9
    282c:	6839      	ldr	r1, [r7, #0]
    282e:	042a      	lsls	r2, r5, #16
    2830:	0c12      	lsrs	r2, r2, #16
    2832:	1b92      	subs	r2, r2, r6
    2834:	0052      	lsls	r2, r2, #1
    2836:	47c0      	blx	r8
    2838:	e7b0      	b.n	279c <audioFillPacket+0x104>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	200005fd 	.word	0x200005fd
    2840:	20000610 	.word	0x20000610
    2844:	20000680 	.word	0x20000680
    2848:	200005d8 	.word	0x200005d8
    284c:	2000065c 	.word	0x2000065c
    2850:	20000c70 	.word	0x20000c70
    2854:	200005c8 	.word	0x200005c8
    2858:	41004494 	.word	0x41004494
    285c:	0001fffe 	.word	0x0001fffe
    2860:	00005685 	.word	0x00005685
    2864:	00005435 	.word	0x00005435
    2868:	41004498 	.word	0x41004498
    286c:	00003ecd 	.word	0x00003ecd
    2870:	200005c4 	.word	0x200005c4
    2874:	200005d4 	.word	0x200005d4

00002878 <callbackAudioSample>:
bool playback;

//#define DECIMATE 6

uint32_t callbackAudioSample(uint32_t in_sample)
{
    2878:	b570      	push	{r4, r5, r6, lr}
    287a:	0005      	movs	r5, r0
	uint32_t out_sample;// = last_sample; // Loop through
	uint16_t b;
	
	count = (count+1) % audioDecimate;
    287c:	4c3f      	ldr	r4, [pc, #252]	; (297c <callbackAudioSample+0x104>)
    287e:	7820      	ldrb	r0, [r4, #0]
    2880:	3001      	adds	r0, #1
    2882:	4b3f      	ldr	r3, [pc, #252]	; (2980 <callbackAudioSample+0x108>)
    2884:	7819      	ldrb	r1, [r3, #0]
    2886:	4b3f      	ldr	r3, [pc, #252]	; (2984 <callbackAudioSample+0x10c>)
    2888:	4798      	blx	r3
    288a:	b2c9      	uxtb	r1, r1
    288c:	7021      	strb	r1, [r4, #0]
	
	filter[count] = (in_sample & 0x0000FFFF);
    288e:	004a      	lsls	r2, r1, #1
    2890:	4b3d      	ldr	r3, [pc, #244]	; (2988 <callbackAudioSample+0x110>)
    2892:	52d5      	strh	r5, [r2, r3]
	
	if(TXbuf && count == 0)
    2894:	4b3d      	ldr	r3, [pc, #244]	; (298c <callbackAudioSample+0x114>)
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	2b00      	cmp	r3, #0
    289a:	d018      	beq.n	28ce <callbackAudioSample+0x56>
    289c:	2900      	cmp	r1, #0
    289e:	d116      	bne.n	28ce <callbackAudioSample+0x56>
	{
		push(TXbuf, filter[0]); // Add average filtering to remove antialias
    28a0:	4a39      	ldr	r2, [pc, #228]	; (2988 <callbackAudioSample+0x110>)
    28a2:	8810      	ldrh	r0, [r2, #0]
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    28a4:	685a      	ldr	r2, [r3, #4]
    28a6:	68d9      	ldr	r1, [r3, #12]
    28a8:	3901      	subs	r1, #1
    28aa:	428a      	cmp	r2, r1
    28ac:	d032      	beq.n	2914 <callbackAudioSample+0x9c>
    28ae:	6899      	ldr	r1, [r3, #8]
    28b0:	3901      	subs	r1, #1
    28b2:	428a      	cmp	r2, r1
    28b4:	d033      	beq.n	291e <callbackAudioSample+0xa6>
	return false;
    28b6:	2100      	movs	r1, #0
	if (isFull(fifo) == true)
    28b8:	2900      	cmp	r1, #0
    28ba:	d108      	bne.n	28ce <callbackAudioSample+0x56>
	fifo->buffer[fifo->head] = byte;
    28bc:	0052      	lsls	r2, r2, #1
    28be:	6819      	ldr	r1, [r3, #0]
    28c0:	5288      	strh	r0, [r1, r2]
	fifo->head++;
    28c2:	685a      	ldr	r2, [r3, #4]
    28c4:	3201      	adds	r2, #1
    28c6:	605a      	str	r2, [r3, #4]
	if (fifo->head == fifo->size)
    28c8:	68d9      	ldr	r1, [r3, #12]
    28ca:	428a      	cmp	r2, r1
    28cc:	d029      	beq.n	2922 <callbackAudioSample+0xaa>
		//push(TXbuf, (((uint32_t)filter[0])+((uint32_t)filter[1])+((uint32_t)filter[2]))/3);
		//push(TXbuf, in_sample & 0x0000FFFF); // Take left channel
	}
	
	if(RXbuf && count == 0)
    28ce:	4b30      	ldr	r3, [pc, #192]	; (2990 <callbackAudioSample+0x118>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d04d      	beq.n	2972 <callbackAudioSample+0xfa>
    28d6:	4a29      	ldr	r2, [pc, #164]	; (297c <callbackAudioSample+0x104>)
    28d8:	7812      	ldrb	r2, [r2, #0]
    28da:	2a00      	cmp	r2, #0
    28dc:	d149      	bne.n	2972 <callbackAudioSample+0xfa>
	if (fifo->head == fifo->tail)
    28de:	6859      	ldr	r1, [r3, #4]
    28e0:	689a      	ldr	r2, [r3, #8]
    28e2:	4291      	cmp	r1, r2
    28e4:	d020      	beq.n	2928 <callbackAudioSample+0xb0>
	return false;
    28e6:	2000      	movs	r0, #0
	{
		if(isEmpty(RXbuf))
    28e8:	2800      	cmp	r0, #0
    28ea:	d01f      	beq.n	292c <callbackAudioSample+0xb4>
			playback = false;
    28ec:	2400      	movs	r4, #0
    28ee:	4929      	ldr	r1, [pc, #164]	; (2994 <callbackAudioSample+0x11c>)
    28f0:	700c      	strb	r4, [r1, #0]
		else if(elements(RXbuf)>(FIFO_SIZE/2))
			playback = true;		
			
		if(!playback)
    28f2:	4928      	ldr	r1, [pc, #160]	; (2994 <callbackAudioSample+0x11c>)
    28f4:	7809      	ldrb	r1, [r1, #0]
    28f6:	2900      	cmp	r1, #0
    28f8:	d034      	beq.n	2964 <callbackAudioSample+0xec>
	if (isEmpty(fifo) == true)
    28fa:	2800      	cmp	r0, #0
    28fc:	d136      	bne.n	296c <callbackAudioSample+0xf4>
	*byte = fifo->buffer[fifo->tail];
    28fe:	0051      	lsls	r1, r2, #1
    2900:	6818      	ldr	r0, [r3, #0]
    2902:	5a09      	ldrh	r1, [r1, r0]
	fifo->tail++;
    2904:	3201      	adds	r2, #1
    2906:	609a      	str	r2, [r3, #8]
	if (fifo->tail == fifo->size)
    2908:	68d8      	ldr	r0, [r3, #12]
    290a:	4282      	cmp	r2, r0
    290c:	d12f      	bne.n	296e <callbackAudioSample+0xf6>
	fifo->tail = 0;
    290e:	2200      	movs	r2, #0
    2910:	609a      	str	r2, [r3, #8]
    2912:	e02c      	b.n	296e <callbackAudioSample+0xf6>
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    2914:	6899      	ldr	r1, [r3, #8]
    2916:	2900      	cmp	r1, #0
    2918:	d1c9      	bne.n	28ae <callbackAudioSample+0x36>
	return true;
    291a:	2101      	movs	r1, #1
    291c:	e7cc      	b.n	28b8 <callbackAudioSample+0x40>
    291e:	2101      	movs	r1, #1
    2920:	e7ca      	b.n	28b8 <callbackAudioSample+0x40>
	fifo->head = 0;
    2922:	2200      	movs	r2, #0
    2924:	605a      	str	r2, [r3, #4]
    2926:	e7d2      	b.n	28ce <callbackAudioSample+0x56>
	return true;
    2928:	2001      	movs	r0, #1
    292a:	e7dd      	b.n	28e8 <callbackAudioSample+0x70>
	if (fifo->head == fifo->tail)
    292c:	4291      	cmp	r1, r2
    292e:	d010      	beq.n	2952 <callbackAudioSample+0xda>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    2930:	68dc      	ldr	r4, [r3, #12]
    2932:	1e65      	subs	r5, r4, #1
    2934:	42a9      	cmp	r1, r5
    2936:	d007      	beq.n	2948 <callbackAudioSample+0xd0>
    2938:	1e55      	subs	r5, r2, #1
    293a:	42a9      	cmp	r1, r5
    293c:	d00a      	beq.n	2954 <callbackAudioSample+0xdc>
	else if (fifo->head < fifo->tail)
    293e:	4291      	cmp	r1, r2
    2940:	d205      	bcs.n	294e <callbackAudioSample+0xd6>
	return (fifo->head) + (fifo->size - fifo->tail);
    2942:	1aa4      	subs	r4, r4, r2
    2944:	190c      	adds	r4, r1, r4
    2946:	e005      	b.n	2954 <callbackAudioSample+0xdc>
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    2948:	2a00      	cmp	r2, #0
    294a:	d003      	beq.n	2954 <callbackAudioSample+0xdc>
    294c:	e7f4      	b.n	2938 <callbackAudioSample+0xc0>
	return fifo->head - fifo->tail;
    294e:	1a8c      	subs	r4, r1, r2
    2950:	e000      	b.n	2954 <callbackAudioSample+0xdc>
	return 0;
    2952:	2400      	movs	r4, #0
		else if(elements(RXbuf)>(FIFO_SIZE/2))
    2954:	2180      	movs	r1, #128	; 0x80
    2956:	0109      	lsls	r1, r1, #4
    2958:	428c      	cmp	r4, r1
    295a:	d9ca      	bls.n	28f2 <callbackAudioSample+0x7a>
			playback = true;		
    295c:	2401      	movs	r4, #1
    295e:	490d      	ldr	r1, [pc, #52]	; (2994 <callbackAudioSample+0x11c>)
    2960:	700c      	strb	r4, [r1, #0]
    2962:	e7c6      	b.n	28f2 <callbackAudioSample+0x7a>
		{
			last_sample = 0x7F;
    2964:	227f      	movs	r2, #127	; 0x7f
    2966:	4b0c      	ldr	r3, [pc, #48]	; (2998 <callbackAudioSample+0x120>)
    2968:	801a      	strh	r2, [r3, #0]
    296a:	e002      	b.n	2972 <callbackAudioSample+0xfa>
		*byte = 0x7F; // We do hear plops in UPKEEP mode from here, why is isEmpty not triggered?
    296c:	217f      	movs	r1, #127	; 0x7f
		{
			pop(RXbuf, &b);
			//if(b == 0x00) // Forbidden value
				//b = 0x7F;
			//last_sample = 0x0F;
			last_sample = b;
    296e:	4b0a      	ldr	r3, [pc, #40]	; (2998 <callbackAudioSample+0x120>)
    2970:	8019      	strh	r1, [r3, #0]
				
		}		
	}	
	
	//last_sample = filter[0];
	out_sample = ((uint32_t) last_sample) << 16 | last_sample; // Duplicate channel		
    2972:	4b09      	ldr	r3, [pc, #36]	; (2998 <callbackAudioSample+0x120>)
    2974:	8818      	ldrh	r0, [r3, #0]
    2976:	0403      	lsls	r3, r0, #16
    2978:	4318      	orrs	r0, r3

	return out_sample;
}
    297a:	bd70      	pop	{r4, r5, r6, pc}
    297c:	200002c0 	.word	0x200002c0
    2980:	200005c0 	.word	0x200005c0
    2984:	00005609 	.word	0x00005609
    2988:	20000600 	.word	0x20000600
    298c:	200005d8 	.word	0x200005d8
    2990:	200005cc 	.word	0x200005cc
    2994:	200005d1 	.word	0x200005d1
    2998:	2000065a 	.word	0x2000065a

0000299c <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
  uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
    299c:	4b09      	ldr	r3, [pc, #36]	; (29c4 <dfll_nvm_val+0x28>)
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	0e9b      	lsrs	r3, r3, #26
      + (NVM_DFLL_COARSE_POS / 32))
    >> (NVM_DFLL_COARSE_POS % 32))
    & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
  if (coarse == 0x3f) {
    29a2:	2b3f      	cmp	r3, #63	; 0x3f
    29a4:	d009      	beq.n	29ba <dfll_nvm_val+0x1e>
    coarse = 0x1f;
  }
  uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
      + (NVM_DFLL_FINE_POS / 32))
    >> (NVM_DFLL_FINE_POS % 32))
    29a6:	4a08      	ldr	r2, [pc, #32]	; (29c8 <dfll_nvm_val+0x2c>)
    29a8:	6810      	ldr	r0, [r2, #0]
  uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
    29aa:	0580      	lsls	r0, r0, #22
    29ac:	0d80      	lsrs	r0, r0, #22
    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
  if (fine == 0x3ff) {
    29ae:	4a07      	ldr	r2, [pc, #28]	; (29cc <dfll_nvm_val+0x30>)
    29b0:	4290      	cmp	r0, r2
    29b2:	d004      	beq.n	29be <dfll_nvm_val+0x22>
    fine = 0x1ff;
  }

  return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    29b4:	029b      	lsls	r3, r3, #10
    29b6:	4318      	orrs	r0, r3
}
    29b8:	4770      	bx	lr
    coarse = 0x1f;
    29ba:	3b20      	subs	r3, #32
    29bc:	e7f3      	b.n	29a6 <dfll_nvm_val+0xa>
    fine = 0x1ff;
    29be:	4804      	ldr	r0, [pc, #16]	; (29d0 <dfll_nvm_val+0x34>)
    29c0:	e7f8      	b.n	29b4 <dfll_nvm_val+0x18>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00806024 	.word	0x00806024
    29c8:	00806028 	.word	0x00806028
    29cc:	000003ff 	.word	0x000003ff
    29d0:	000001ff 	.word	0x000001ff

000029d4 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
  while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    29d4:	4b02      	ldr	r3, [pc, #8]	; (29e0 <dfll_wait_for_sync+0xc>)
    29d6:	68db      	ldr	r3, [r3, #12]
    29d8:	06db      	lsls	r3, r3, #27
    29da:	d5fb      	bpl.n	29d4 <dfll_wait_for_sync>
}
    29dc:	4770      	bx	lr
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	40000800 	.word	0x40000800

000029e4 <gclk_enable>:

void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
  GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    29e4:	230f      	movs	r3, #15
    29e6:	4018      	ands	r0, r3
    29e8:	0212      	lsls	r2, r2, #8
    29ea:	4b07      	ldr	r3, [pc, #28]	; (2a08 <gclk_enable+0x24>)
    29ec:	401a      	ands	r2, r3
    29ee:	4302      	orrs	r2, r0
    29f0:	4b06      	ldr	r3, [pc, #24]	; (2a0c <gclk_enable+0x28>)
    29f2:	609a      	str	r2, [r3, #8]
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    29f4:	0209      	lsls	r1, r1, #8
    29f6:	22f8      	movs	r2, #248	; 0xf8
    29f8:	0152      	lsls	r2, r2, #5
    29fa:	4011      	ands	r1, r2
    29fc:	4308      	orrs	r0, r1
    29fe:	2180      	movs	r1, #128	; 0x80
    2a00:	0249      	lsls	r1, r1, #9
    2a02:	4308      	orrs	r0, r1
    2a04:	6058      	str	r0, [r3, #4]
}
    2a06:	4770      	bx	lr
    2a08:	00ffff00 	.word	0x00ffff00
    2a0c:	40000c00 	.word	0x40000c00

00002a10 <gclk_init>:

void gclk_init() {
  // Various bits in the INTFLAG register can be set to one at startup.
  SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2a10:	22c2      	movs	r2, #194	; 0xc2
    2a12:	00d2      	lsls	r2, r2, #3
    2a14:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <gclk_init+0x38>)
    2a16:	609a      	str	r2, [r3, #8]
      SYSCTRL_INTFLAG_DFLLRDY;

  NVMCTRL->CTRLB.bit.RWS = 2;
    2a18:	490c      	ldr	r1, [pc, #48]	; (2a4c <gclk_init+0x3c>)
    2a1a:	684a      	ldr	r2, [r1, #4]
    2a1c:	231e      	movs	r3, #30
    2a1e:	439a      	bics	r2, r3
    2a20:	3b1a      	subs	r3, #26
    2a22:	4313      	orrs	r3, r2
    2a24:	604b      	str	r3, [r1, #4]

  // Initialize GCLK
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    2a26:	4a0a      	ldr	r2, [pc, #40]	; (2a50 <gclk_init+0x40>)
    2a28:	6993      	ldr	r3, [r2, #24]
    2a2a:	2108      	movs	r1, #8
    2a2c:	430b      	orrs	r3, r1
    2a2e:	6193      	str	r3, [r2, #24]
  GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2a30:	2201      	movs	r2, #1
    2a32:	4b08      	ldr	r3, [pc, #32]	; (2a54 <gclk_init+0x44>)
    2a34:	701a      	strb	r2, [r3, #0]
  while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    2a36:	4b07      	ldr	r3, [pc, #28]	; (2a54 <gclk_init+0x44>)
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	07db      	lsls	r3, r3, #31
    2a3c:	d4fb      	bmi.n	2a36 <gclk_init+0x26>

  // SERCOM slow clock (Shared by all SERCOM)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2a3e:	4a06      	ldr	r2, [pc, #24]	; (2a58 <gclk_init+0x48>)
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <gclk_init+0x44>)
    2a42:	805a      	strh	r2, [r3, #2]
      GCLK_CLKCTRL_GEN(0) |
      GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_SLOW);
}
    2a44:	4770      	bx	lr
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	40000800 	.word	0x40000800
    2a4c:	41004000 	.word	0x41004000
    2a50:	40000400 	.word	0x40000400
    2a54:	40000c00 	.word	0x40000c00
    2a58:	00004013 	.word	0x00004013

00002a5c <clock_init_crystal>:

  gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
  while (GCLK->STATUS.bit.SYNCBUSY);
}

void clock_init_crystal(uint8_t clk_system, uint8_t clk_32k) {
    2a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a5e:	0006      	movs	r6, r0
    2a60:	000d      	movs	r5, r1
  gclk_init();
    2a62:	4b16      	ldr	r3, [pc, #88]	; (2abc <clock_init_crystal+0x60>)
    2a64:	4798      	blx	r3

  SYSCTRL->XOSC32K.reg
    = SYSCTRL_XOSC32K_ENABLE
    2a66:	4c16      	ldr	r4, [pc, #88]	; (2ac0 <clock_init_crystal+0x64>)
    2a68:	236e      	movs	r3, #110	; 0x6e
    2a6a:	82a3      	strh	r3, [r4, #20]
    | SYSCTRL_XOSC32K_XTALEN
    | SYSCTRL_XOSC32K_EN32K
    | SYSCTRL_XOSC32K_AAMPEN
    | SYSCTRL_XOSC32K_RUNSTDBY;

  gclk_enable(clk_32k, GCLK_SOURCE_XOSC32K, 1);
    2a6c:	2201      	movs	r2, #1
    2a6e:	2105      	movs	r1, #5
    2a70:	0028      	movs	r0, r5
    2a72:	4f14      	ldr	r7, [pc, #80]	; (2ac4 <clock_init_crystal+0x68>)
    2a74:	47b8      	blx	r7

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
      GCLK_CLKCTRL_GEN(clk_32k) |
    2a76:	022d      	lsls	r5, r5, #8
    2a78:	23f0      	movs	r3, #240	; 0xf0
    2a7a:	011b      	lsls	r3, r3, #4
    2a7c:	401d      	ands	r5, r3
    2a7e:	2380      	movs	r3, #128	; 0x80
    2a80:	01db      	lsls	r3, r3, #7
    2a82:	431d      	orrs	r5, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2a84:	4b10      	ldr	r3, [pc, #64]	; (2ac8 <clock_init_crystal+0x6c>)
    2a86:	805d      	strh	r5, [r3, #2]
      GCLK_CLKCTRL_ID(SYSCTRL_GCLK_ID_DFLL48);

  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2a88:	2302      	movs	r3, #2
    2a8a:	84a3      	strh	r3, [r4, #36]	; 0x24
  dfll_wait_for_sync();
    2a8c:	4d0f      	ldr	r5, [pc, #60]	; (2acc <clock_init_crystal+0x70>)
    2a8e:	47a8      	blx	r5
  SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    2a90:	4b0f      	ldr	r3, [pc, #60]	; (2ad0 <clock_init_crystal+0x74>)
    2a92:	4798      	blx	r3
    2a94:	62a0      	str	r0, [r4, #40]	; 0x28
  dfll_wait_for_sync();
    2a96:	47a8      	blx	r5
  SYSCTRL->DFLLMUL.reg
    = SYSCTRL_DFLLMUL_MUL(1465) // round(48000000 / 32768)
    2a98:	4b0e      	ldr	r3, [pc, #56]	; (2ad4 <clock_init_crystal+0x78>)
    2a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    | SYSCTRL_DFLLMUL_CSTEP((0x1f / 4))
    | SYSCTRL_DFLLMUL_FSTEP((0xff / 4));
  dfll_wait_for_sync();
    2a9c:	47a8      	blx	r5
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE | SYSCTRL_DFLLCTRL_MODE;
    2a9e:	2306      	movs	r3, #6
    2aa0:	84a3      	strh	r3, [r4, #36]	; 0x24
  dfll_wait_for_sync();
    2aa2:	47a8      	blx	r5
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE | SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_ONDEMAND;
    2aa4:	2386      	movs	r3, #134	; 0x86
    2aa6:	84a3      	strh	r3, [r4, #36]	; 0x24

  gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    2aa8:	2201      	movs	r2, #1
    2aaa:	2107      	movs	r1, #7
    2aac:	0030      	movs	r0, r6
    2aae:	47b8      	blx	r7
  while (GCLK->STATUS.bit.SYNCBUSY);
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <clock_init_crystal+0x6c>)
    2ab2:	785b      	ldrb	r3, [r3, #1]
    2ab4:	09db      	lsrs	r3, r3, #7
    2ab6:	d1fb      	bne.n	2ab0 <clock_init_crystal+0x54>
}
    2ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00002a11 	.word	0x00002a11
    2ac0:	40000800 	.word	0x40000800
    2ac4:	000029e5 	.word	0x000029e5
    2ac8:	40000c00 	.word	0x40000c00
    2acc:	000029d5 	.word	0x000029d5
    2ad0:	0000299d 	.word	0x0000299d
    2ad4:	1c3f05b9 	.word	0x1c3f05b9

00002ad8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ad8:	e7fe      	b.n	2ad8 <Dummy_Handler>
	...

00002adc <Reset_Handler>:
{
    2adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2ade:	4a23      	ldr	r2, [pc, #140]	; (2b6c <Reset_Handler+0x90>)
    2ae0:	4b23      	ldr	r3, [pc, #140]	; (2b70 <Reset_Handler+0x94>)
    2ae2:	429a      	cmp	r2, r3
    2ae4:	d009      	beq.n	2afa <Reset_Handler+0x1e>
    2ae6:	4b22      	ldr	r3, [pc, #136]	; (2b70 <Reset_Handler+0x94>)
    2ae8:	4a20      	ldr	r2, [pc, #128]	; (2b6c <Reset_Handler+0x90>)
    2aea:	e003      	b.n	2af4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    2aec:	6811      	ldr	r1, [r2, #0]
    2aee:	6019      	str	r1, [r3, #0]
    2af0:	3304      	adds	r3, #4
    2af2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2af4:	491f      	ldr	r1, [pc, #124]	; (2b74 <Reset_Handler+0x98>)
    2af6:	428b      	cmp	r3, r1
    2af8:	d3f8      	bcc.n	2aec <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    2afa:	4b1f      	ldr	r3, [pc, #124]	; (2b78 <Reset_Handler+0x9c>)
    2afc:	e002      	b.n	2b04 <Reset_Handler+0x28>
                *pDest++ = 0;
    2afe:	2200      	movs	r2, #0
    2b00:	601a      	str	r2, [r3, #0]
    2b02:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    2b04:	4a1d      	ldr	r2, [pc, #116]	; (2b7c <Reset_Handler+0xa0>)
    2b06:	4293      	cmp	r3, r2
    2b08:	d3f9      	bcc.n	2afe <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2b0a:	4a1d      	ldr	r2, [pc, #116]	; (2b80 <Reset_Handler+0xa4>)
    2b0c:	21ff      	movs	r1, #255	; 0xff
    2b0e:	4b1d      	ldr	r3, [pc, #116]	; (2b84 <Reset_Handler+0xa8>)
    2b10:	438b      	bics	r3, r1
    2b12:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2b14:	39fd      	subs	r1, #253	; 0xfd
    2b16:	2390      	movs	r3, #144	; 0x90
    2b18:	005b      	lsls	r3, r3, #1
    2b1a:	4a1b      	ldr	r2, [pc, #108]	; (2b88 <Reset_Handler+0xac>)
    2b1c:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2b1e:	4a1b      	ldr	r2, [pc, #108]	; (2b8c <Reset_Handler+0xb0>)
    2b20:	78d3      	ldrb	r3, [r2, #3]
    2b22:	2503      	movs	r5, #3
    2b24:	43ab      	bics	r3, r5
    2b26:	2402      	movs	r4, #2
    2b28:	4323      	orrs	r3, r4
    2b2a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2b2c:	78d3      	ldrb	r3, [r2, #3]
    2b2e:	270c      	movs	r7, #12
    2b30:	43bb      	bics	r3, r7
    2b32:	2608      	movs	r6, #8
    2b34:	4333      	orrs	r3, r6
    2b36:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2b38:	4b15      	ldr	r3, [pc, #84]	; (2b90 <Reset_Handler+0xb4>)
    2b3a:	7b98      	ldrb	r0, [r3, #14]
    2b3c:	2230      	movs	r2, #48	; 0x30
    2b3e:	4390      	bics	r0, r2
    2b40:	2220      	movs	r2, #32
    2b42:	4310      	orrs	r0, r2
    2b44:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2b46:	7b99      	ldrb	r1, [r3, #14]
    2b48:	43b9      	bics	r1, r7
    2b4a:	4331      	orrs	r1, r6
    2b4c:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2b4e:	7b9a      	ldrb	r2, [r3, #14]
    2b50:	43aa      	bics	r2, r5
    2b52:	4322      	orrs	r2, r4
    2b54:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2b56:	4a0f      	ldr	r2, [pc, #60]	; (2b94 <Reset_Handler+0xb8>)
    2b58:	6851      	ldr	r1, [r2, #4]
    2b5a:	2380      	movs	r3, #128	; 0x80
    2b5c:	430b      	orrs	r3, r1
    2b5e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2b60:	4b0d      	ldr	r3, [pc, #52]	; (2b98 <Reset_Handler+0xbc>)
    2b62:	4798      	blx	r3
        main();
    2b64:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <Reset_Handler+0xc0>)
    2b66:	4798      	blx	r3
    2b68:	e7fe      	b.n	2b68 <Reset_Handler+0x8c>
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	00007834 	.word	0x00007834
    2b70:	20000000 	.word	0x20000000
    2b74:	20000214 	.word	0x20000214
    2b78:	20000218 	.word	0x20000218
    2b7c:	20000f24 	.word	0x20000f24
    2b80:	e000ed00 	.word	0xe000ed00
    2b84:	00000000 	.word	0x00000000
    2b88:	41007000 	.word	0x41007000
    2b8c:	41005000 	.word	0x41005000
    2b90:	41004800 	.word	0x41004800
    2b94:	41004000 	.word	0x41004000
    2b98:	00005615 	.word	0x00005615
    2b9c:	00003509 	.word	0x00003509

00002ba0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2ba0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2ba2:	4a06      	ldr	r2, [pc, #24]	; (2bbc <_sbrk+0x1c>)
    2ba4:	6812      	ldr	r2, [r2, #0]
    2ba6:	2a00      	cmp	r2, #0
    2ba8:	d004      	beq.n	2bb4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2baa:	4a04      	ldr	r2, [pc, #16]	; (2bbc <_sbrk+0x1c>)
    2bac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2bae:	18c3      	adds	r3, r0, r3
    2bb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2bb2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2bb4:	4902      	ldr	r1, [pc, #8]	; (2bc0 <_sbrk+0x20>)
    2bb6:	4a01      	ldr	r2, [pc, #4]	; (2bbc <_sbrk+0x1c>)
    2bb8:	6011      	str	r1, [r2, #0]
    2bba:	e7f6      	b.n	2baa <_sbrk+0xa>
    2bbc:	2000028c 	.word	0x2000028c
    2bc0:	20002f28 	.word	0x20002f28

00002bc4 <configure_dma_resource>:
void setup_transfer_descriptor(DmacDescriptor *descriptor);
void add_descriptor(struct dma_resource *resource, DmacDescriptor* descriptor);
void start_transfer_job(struct dma_resource *resource, uint8_t* buffer_tx,int len);

void configure_dma_resource(struct dma_resource *resource)
{
    2bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc6:	46c6      	mov	lr, r8
    2bc8:	b500      	push	{lr}
	uint8_t new_channel;
	
	/* Initialize clocks for DMA */
	PM->APBCMASK.reg |= PM_AHBMASK_DMAC;
    2bca:	4b1b      	ldr	r3, [pc, #108]	; (2c38 <configure_dma_resource+0x74>)
    2bcc:	6a1a      	ldr	r2, [r3, #32]
    2bce:	2120      	movs	r1, #32
    2bd0:	430a      	orrs	r2, r1
    2bd2:	621a      	str	r2, [r3, #32]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    2bd4:	69da      	ldr	r2, [r3, #28]
    2bd6:	3910      	subs	r1, #16
    2bd8:	430a      	orrs	r2, r1
    2bda:	61da      	str	r2, [r3, #28]

	/* Perform a software reset before enable DMA controller */
	DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2bdc:	4b17      	ldr	r3, [pc, #92]	; (2c3c <configure_dma_resource+0x78>)
    2bde:	881a      	ldrh	r2, [r3, #0]
    2be0:	2502      	movs	r5, #2
    2be2:	43aa      	bics	r2, r5
    2be4:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    2be6:	390f      	subs	r1, #15
    2be8:	8019      	strh	r1, [r3, #0]

	/* Setup descriptor base address and write back section base
	* address */
	DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    2bea:	4a15      	ldr	r2, [pc, #84]	; (2c40 <configure_dma_resource+0x7c>)
    2bec:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    2bee:	4a15      	ldr	r2, [pc, #84]	; (2c44 <configure_dma_resource+0x80>)
    2bf0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Enable all priority level at the same time */
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    2bf2:	4a15      	ldr	r2, [pc, #84]	; (2c48 <configure_dma_resource+0x84>)
    2bf4:	801a      	strh	r2, [r3, #0]
	
	new_channel = NEW_CHANNEL;
	
	/* Set the channel */
	resource->channel_id = new_channel;
    2bf6:	2400      	movs	r4, #0
    2bf8:	7004      	strb	r4, [r0, #0]
	
	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2bfa:	263f      	movs	r6, #63	; 0x3f
    2bfc:	559c      	strb	r4, [r3, r6]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    2bfe:	2240      	movs	r2, #64	; 0x40
    2c00:	5c9f      	ldrb	r7, [r3, r2]
    2c02:	43af      	bics	r7, r5
    2c04:	549f      	strb	r7, [r3, r2]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    2c06:	2701      	movs	r7, #1
    2c08:	549f      	strb	r7, [r3, r2]
	
	uint32_t temp_CHCTRLB_reg;

	/** Select the DMA channel and clear software trigger */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2c0a:	7807      	ldrb	r7, [r0, #0]
    2c0c:	3a31      	subs	r2, #49	; 0x31
    2c0e:	4690      	mov	r8, r2
    2c10:	4017      	ands	r7, r2
    2c12:	559f      	strb	r7, [r3, r6]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 <<resource->channel_id));
    2c14:	691f      	ldr	r7, [r3, #16]
    2c16:	7802      	ldrb	r2, [r0, #0]
    2c18:	4091      	lsls	r1, r2
    2c1a:	438f      	bics	r7, r1
    2c1c:	611f      	str	r7, [r3, #16]
	DMAC_CHCTRLB_TRIGSRC(SERCOM1_DMAC_ID_TX) | //ready to transmit
	//DMAC_CHCTRLB_TRIGACT(DMAC_CHCTRLB_TRIGACT_TRANSACTION_Val);
	DMAC_CHCTRLB_TRIGACT(DMAC_CHCTRLB_TRIGACT_BEAT_Val);

	/* Write config to CTRLB register */
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    2c1e:	490b      	ldr	r1, [pc, #44]	; (2c4c <configure_dma_resource+0x88>)
    2c20:	6459      	str	r1, [r3, #68]	; 0x44
	NVIC_SetPriority(DMAC_IRQn, 2);
	NVIC_EnableIRQ(DMAC_IRQn);
#endif

	/* Set the interrupt flag */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2c22:	7801      	ldrb	r1, [r0, #0]
    2c24:	4642      	mov	r2, r8
    2c26:	400a      	ands	r2, r1
    2c28:	559a      	strb	r2, [r3, r6]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & (1UL << DMA_CALLBACK_TRANSFER_DONE));
    2c2a:	224d      	movs	r2, #77	; 0x4d
    2c2c:	549d      	strb	r5, [r3, r2]
	
	resource->descriptor = NULL;
    2c2e:	6184      	str	r4, [r0, #24]
	
	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

}
    2c30:	bc04      	pop	{r2}
    2c32:	4690      	mov	r8, r2
    2c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	40000400 	.word	0x40000400
    2c3c:	41004800 	.word	0x41004800
    2c40:	200002d8 	.word	0x200002d8
    2c44:	20000290 	.word	0x20000290
    2c48:	00000f02 	.word	0x00000f02
    2c4c:	00800400 	.word	0x00800400

00002c50 <setup_transfer_descriptor>:

void setup_transfer_descriptor(DmacDescriptor *descriptor)
{
	/* Set descriptor as valid */
	descriptor->BTCTRL.bit.VALID = true;
    2c50:	8803      	ldrh	r3, [r0, #0]
    2c52:	2201      	movs	r2, #1
    2c54:	4313      	orrs	r3, r2
    2c56:	8003      	strh	r3, [r0, #0]
	/* Disable event output */
	descriptor->BTCTRL.bit.EVOSEL = 0;
    2c58:	8803      	ldrh	r3, [r0, #0]
    2c5a:	2206      	movs	r2, #6
    2c5c:	4393      	bics	r3, r2
    2c5e:	8003      	strh	r3, [r0, #0]
	/* No block action */
	descriptor->BTCTRL.bit.BLOCKACT = 0;
    2c60:	8803      	ldrh	r3, [r0, #0]
    2c62:	3212      	adds	r2, #18
    2c64:	4393      	bics	r3, r2
    2c66:	8003      	strh	r3, [r0, #0]
	/* Set beat size to byte */
	descriptor->BTCTRL.bit.BEATSIZE = 0;
    2c68:	8803      	ldrh	r3, [r0, #0]
    2c6a:	4a0c      	ldr	r2, [pc, #48]	; (2c9c <setup_transfer_descriptor+0x4c>)
    2c6c:	4013      	ands	r3, r2
    2c6e:	8003      	strh	r3, [r0, #0]
	/* Enable source increment */
	descriptor->BTCTRL.bit.SRCINC = true;
    2c70:	8802      	ldrh	r2, [r0, #0]
    2c72:	2380      	movs	r3, #128	; 0x80
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4313      	orrs	r3, r2
    2c78:	8003      	strh	r3, [r0, #0]
	/* Disable destination increment */
	descriptor->BTCTRL.bit.DSTINC = false;
    2c7a:	8803      	ldrh	r3, [r0, #0]
    2c7c:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <setup_transfer_descriptor+0x50>)
    2c7e:	4013      	ands	r3, r2
    2c80:	8003      	strh	r3, [r0, #0]
	/* Step size is applied to the destination address */
	descriptor->BTCTRL.bit.STEPSEL = 0;
    2c82:	8803      	ldrh	r3, [r0, #0]
    2c84:	4a07      	ldr	r2, [pc, #28]	; (2ca4 <setup_transfer_descriptor+0x54>)
    2c86:	4013      	ands	r3, r2
    2c88:	8003      	strh	r3, [r0, #0]
	/* Address increment is beat size multiplied by 1*/
	descriptor->BTCTRL.bit.STEPSIZE = 0;
    2c8a:	8803      	ldrh	r3, [r0, #0]
    2c8c:	04db      	lsls	r3, r3, #19
    2c8e:	0cdb      	lsrs	r3, r3, #19
    2c90:	8003      	strh	r3, [r0, #0]
	/* Set transfer size */
	//descriptor->BTCNT.reg = len/sizeof(uint8_t);
	/* Source address*/
	//descriptor->SRCADDR.reg = (uint32_t)buffer_tx + len;
	/* Destination address*/
	descriptor->DSTADDR.reg = (uint32_t)(&SERCOM1->SPI.DATA.reg);
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <setup_transfer_descriptor+0x58>)
    2c94:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = 0;
    2c96:	2300      	movs	r3, #0
    2c98:	60c3      	str	r3, [r0, #12]
}
    2c9a:	4770      	bx	lr
    2c9c:	fffffcff 	.word	0xfffffcff
    2ca0:	fffff7ff 	.word	0xfffff7ff
    2ca4:	ffffefff 	.word	0xffffefff
    2ca8:	42000c28 	.word	0x42000c28

00002cac <add_descriptor>:

void add_descriptor(struct dma_resource *resource, DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;
    2cac:	6983      	ldr	r3, [r0, #24]

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d102      	bne.n	2cb8 <add_descriptor+0xc>
		resource->descriptor = descriptor;
    2cb2:	6181      	str	r1, [r0, #24]
    2cb4:	e004      	b.n	2cc0 <add_descriptor+0x14>
		} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    2cb6:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    2cb8:	68da      	ldr	r2, [r3, #12]
    2cba:	2a00      	cmp	r2, #0
    2cbc:	d1fb      	bne.n	2cb6 <add_descriptor+0xa>
		}
		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    2cbe:	60d9      	str	r1, [r3, #12]
	}

}
    2cc0:	4770      	bx	lr
	...

00002cc4 <start_transfer_job>:

void start_transfer_job(struct dma_resource *resource, uint8_t* buffer_tx,int len)
{		
    2cc4:	b510      	push	{r4, lr}
    2cc6:	0004      	movs	r4, r0
	/* Set transfer size */
	resource->descriptor->BTCNT.reg = len;
    2cc8:	b293      	uxth	r3, r2
    2cca:	6980      	ldr	r0, [r0, #24]
    2ccc:	8043      	strh	r3, [r0, #2]
	/* Source address*/
	resource->descriptor->SRCADDR.reg = (uint32_t)buffer_tx + len;
    2cce:	69a3      	ldr	r3, [r4, #24]
    2cd0:	1852      	adds	r2, r2, r1
    2cd2:	605a      	str	r2, [r3, #4]
	
	/* Set channel x descriptor 0 to the descriptor base address */
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    2cd4:	7823      	ldrb	r3, [r4, #0]
    2cd6:	011b      	lsls	r3, r3, #4
    2cd8:	4806      	ldr	r0, [pc, #24]	; (2cf4 <start_transfer_job+0x30>)
    2cda:	1818      	adds	r0, r3, r0
    2cdc:	69a1      	ldr	r1, [r4, #24]
    2cde:	2210      	movs	r2, #16
    2ce0:	4b05      	ldr	r3, [pc, #20]	; (2cf8 <start_transfer_job+0x34>)
    2ce2:	4798      	blx	r3
	sizeof(DmacDescriptor));

	/* Enable the transfer channel */
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2ce4:	4905      	ldr	r1, [pc, #20]	; (2cfc <start_transfer_job+0x38>)
    2ce6:	2240      	movs	r2, #64	; 0x40
    2ce8:	5c8b      	ldrb	r3, [r1, r2]
    2cea:	2002      	movs	r0, #2
    2cec:	4303      	orrs	r3, r0
    2cee:	b2db      	uxtb	r3, r3
    2cf0:	548b      	strb	r3, [r1, r2]
}
    2cf2:	bd10      	pop	{r4, pc}
    2cf4:	200002d8 	.word	0x200002d8
    2cf8:	00005685 	.word	0x00005685
    2cfc:	41004800 	.word	0x41004800

00002d00 <DMA_init>:

void DMA_init(void)
{
    2d00:	b570      	push	{r4, r5, r6, lr}
	/* Setup DMA resource */
	configure_dma_resource(&DMA_resource);
    2d02:	4c06      	ldr	r4, [pc, #24]	; (2d1c <DMA_init+0x1c>)
    2d04:	0020      	movs	r0, r4
    2d06:	4b06      	ldr	r3, [pc, #24]	; (2d20 <DMA_init+0x20>)
    2d08:	4798      	blx	r3
	
	/* Setup transfer description */
	setup_transfer_descriptor(&DMA_descriptor);
    2d0a:	4d06      	ldr	r5, [pc, #24]	; (2d24 <DMA_init+0x24>)
    2d0c:	0028      	movs	r0, r5
    2d0e:	4b06      	ldr	r3, [pc, #24]	; (2d28 <DMA_init+0x28>)
    2d10:	4798      	blx	r3
	
	/*Add DMA resource descriptor*/
	add_descriptor(&DMA_resource, &DMA_descriptor);
    2d12:	0029      	movs	r1, r5
    2d14:	0020      	movs	r0, r4
    2d16:	4b05      	ldr	r3, [pc, #20]	; (2d2c <DMA_init+0x2c>)
    2d18:	4798      	blx	r3
}
    2d1a:	bd70      	pop	{r4, r5, r6, pc}
    2d1c:	200006a0 	.word	0x200006a0
    2d20:	00002bc5 	.word	0x00002bc5
    2d24:	20000690 	.word	0x20000690
    2d28:	00002c51 	.word	0x00002c51
    2d2c:	00002cad 	.word	0x00002cad

00002d30 <DMA_start_transfer>:

void DMA_start_transfer(uint8_t* buffer_tx, int len){
    2d30:	b510      	push	{r4, lr}
    2d32:	000a      	movs	r2, r1
	
	start_transfer_job(&DMA_resource, buffer_tx, len);
    2d34:	0001      	movs	r1, r0
    2d36:	4802      	ldr	r0, [pc, #8]	; (2d40 <DMA_start_transfer+0x10>)
    2d38:	4b02      	ldr	r3, [pc, #8]	; (2d44 <DMA_start_transfer+0x14>)
    2d3a:	4798      	blx	r3
	
}
    2d3c:	bd10      	pop	{r4, pc}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	200006a0 	.word	0x200006a0
    2d44:	00002cc5 	.word	0x00002cc5

00002d48 <DMA_wait_complete>:

void DMA_wait_complete(void){
	while(DMAC->INTSTATUS.bit.CHINT0 == 0);
    2d48:	4b06      	ldr	r3, [pc, #24]	; (2d64 <DMA_wait_complete+0x1c>)
    2d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d4c:	07db      	lsls	r3, r3, #31
    2d4e:	d5fb      	bpl.n	2d48 <DMA_wait_complete>
	//while(DMAC->CHINTFLAG.bit.TCMPL == 0);
	
	DMAC->CHINTFLAG.bit.TCMPL = 1; // Reset interrupt flags
    2d50:	4b04      	ldr	r3, [pc, #16]	; (2d64 <DMA_wait_complete+0x1c>)
    2d52:	214e      	movs	r1, #78	; 0x4e
    2d54:	5c5a      	ldrb	r2, [r3, r1]
    2d56:	2002      	movs	r0, #2
    2d58:	4302      	orrs	r2, r0
    2d5a:	545a      	strb	r2, [r3, r1]
	
	DMAC->CHCTRLA.reg = 0; // Disable channel
    2d5c:	2100      	movs	r1, #0
    2d5e:	2240      	movs	r2, #64	; 0x40
    2d60:	5499      	strb	r1, [r3, r2]
}
    2d62:	4770      	bx	lr
    2d64:	41004800 	.word	0x41004800

00002d68 <flash_init>:



void flash_init(void)
{
	PM->APBBMASK.reg |= PM_APBBMASK_NVMCTRL;
    2d68:	4a0a      	ldr	r2, [pc, #40]	; (2d94 <flash_init+0x2c>)
    2d6a:	69d3      	ldr	r3, [r2, #28]
    2d6c:	2104      	movs	r1, #4
    2d6e:	430b      	orrs	r3, r1
    2d70:	61d3      	str	r3, [r2, #28]
	
	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d72:	2220      	movs	r2, #32
    2d74:	32ff      	adds	r2, #255	; 0xff
    2d76:	4b08      	ldr	r3, [pc, #32]	; (2d98 <flash_init+0x30>)
    2d78:	831a      	strh	r2, [r3, #24]
	
	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2d7a:	4b07      	ldr	r3, [pc, #28]	; (2d98 <flash_init+0x30>)
    2d7c:	7d1b      	ldrb	r3, [r3, #20]
    2d7e:	07db      	lsls	r3, r3, #31
    2d80:	d5fb      	bpl.n	2d7a <flash_init+0x12>
	
	/* Writing configuration to the CTRLB register */
	NVMCTRL->CTRLB.reg = NVMCTRL_CTRLB_RWS(NVMCTRL->CTRLB.bit.RWS) ;
    2d82:	4a05      	ldr	r2, [pc, #20]	; (2d98 <flash_init+0x30>)
    2d84:	6853      	ldr	r3, [r2, #4]
    2d86:	06db      	lsls	r3, r3, #27
    2d88:	0f1b      	lsrs	r3, r3, #28
    2d8a:	005b      	lsls	r3, r3, #1
    2d8c:	6053      	str	r3, [r2, #4]
	
	/* Initialize the internal device struct */

	flash_dev.page_size         = (8 << NVMCTRL->PARAM.bit.PSZ);
    2d8e:	6893      	ldr	r3, [r2, #8]

	flash_dev.number_of_pages   = NVMCTRL->PARAM.bit.NVMP;
    2d90:	6893      	ldr	r3, [r2, #8]

	flash_dev.manual_page_write = true;	
}
    2d92:	4770      	bx	lr
    2d94:	40000400 	.word	0x40000400
    2d98:	41004000 	.word	0x41004000

00002d9c <flash_read_buffer>:

uint8_t *const buffer,

uint16_t length)

{
    2d9c:	b530      	push	{r4, r5, lr}

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2d9e:	4b0e      	ldr	r3, [pc, #56]	; (2dd8 <flash_read_buffer+0x3c>)
    2da0:	7d1b      	ldrb	r3, [r3, #20]
    2da2:	07db      	lsls	r3, r3, #31
    2da4:	d5fb      	bpl.n	2d9e <flash_read_buffer+0x2>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2da6:	2420      	movs	r4, #32
    2da8:	34ff      	adds	r4, #255	; 0xff
    2daa:	4b0b      	ldr	r3, [pc, #44]	; (2dd8 <flash_read_buffer+0x3c>)
    2dac:	831c      	strh	r4, [r3, #24]



	uint32_t page_address = source_address / 2;
    2dae:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy

	 * to ensure alignment */

	for (uint16_t i = 0; i < length; i += 2) {
    2db0:	2300      	movs	r3, #0
    2db2:	e002      	b.n	2dba <flash_read_buffer+0x1e>
    2db4:	3302      	adds	r3, #2
    2db6:	b29b      	uxth	r3, r3

		/* Fetch next 16-bit chunk from the NVM memory space */

		uint16_t data = NVM_MEMORY[page_address++];
    2db8:	0020      	movs	r0, r4
	for (uint16_t i = 0; i < length; i += 2) {
    2dba:	4293      	cmp	r3, r2
    2dbc:	d20b      	bcs.n	2dd6 <flash_read_buffer+0x3a>
		uint16_t data = NVM_MEMORY[page_address++];
    2dbe:	1c44      	adds	r4, r0, #1
    2dc0:	0040      	lsls	r0, r0, #1
    2dc2:	8800      	ldrh	r0, [r0, #0]
    2dc4:	b280      	uxth	r0, r0



		/* Copy first byte of the 16-bit chunk to the destination buffer */

		buffer[i] = (data & 0xFF);
    2dc6:	54c8      	strb	r0, [r1, r3]

		/* If we are not at the end of a read request with an odd byte count,

		 * store the next byte of data as well */

		if (i < (length - 1)) {
    2dc8:	1e55      	subs	r5, r2, #1
    2dca:	42ab      	cmp	r3, r5
    2dcc:	daf2      	bge.n	2db4 <flash_read_buffer+0x18>

			buffer[i + 1] = (data >> 8);
    2dce:	1c5d      	adds	r5, r3, #1
    2dd0:	0a00      	lsrs	r0, r0, #8
    2dd2:	5548      	strb	r0, [r1, r5]
    2dd4:	e7ee      	b.n	2db4 <flash_read_buffer+0x18>

		}

	}	

}
    2dd6:	bd30      	pop	{r4, r5, pc}
    2dd8:	41004000 	.word	0x41004000

00002ddc <flash_erase_row>:

{

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2ddc:	4b06      	ldr	r3, [pc, #24]	; (2df8 <flash_erase_row+0x1c>)
    2dde:	7d1b      	ldrb	r3, [r3, #20]
    2de0:	07db      	lsls	r3, r3, #31
    2de2:	d5fb      	bpl.n	2ddc <flash_erase_row>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <flash_erase_row+0x1c>)
    2de6:	2220      	movs	r2, #32
    2de8:	32ff      	adds	r2, #255	; 0xff
    2dea:	831a      	strh	r2, [r3, #24]



	/* Set address and command */

	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2dec:	0880      	lsrs	r0, r0, #2
    2dee:	0040      	lsls	r0, r0, #1
    2df0:	61d8      	str	r0, [r3, #28]

	

	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    2df2:	4a02      	ldr	r2, [pc, #8]	; (2dfc <flash_erase_row+0x20>)
    2df4:	801a      	strh	r2, [r3, #0]

}
    2df6:	4770      	bx	lr
    2df8:	41004000 	.word	0x41004000
    2dfc:	ffffa502 	.word	0xffffa502

00002e00 <flash_write_buffer>:

const uint8_t *buffer,

uint16_t length)

{
    2e00:	b570      	push	{r4, r5, r6, lr}

	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2e02:	4b12      	ldr	r3, [pc, #72]	; (2e4c <flash_write_buffer+0x4c>)
    2e04:	7d1b      	ldrb	r3, [r3, #20]
    2e06:	07db      	lsls	r3, r3, #31
    2e08:	d5fb      	bpl.n	2e02 <flash_write_buffer+0x2>

		

	/* Erase the page buffer before buffering new data */

	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY;
    2e0a:	4c11      	ldr	r4, [pc, #68]	; (2e50 <flash_write_buffer+0x50>)
    2e0c:	4b0f      	ldr	r3, [pc, #60]	; (2e4c <flash_write_buffer+0x4c>)
    2e0e:	801c      	strh	r4, [r3, #0]



	/* wait until the module is ready */

	while(NVMCTRL->INTFLAG.bit.READY == 0);
    2e10:	4b0e      	ldr	r3, [pc, #56]	; (2e4c <flash_write_buffer+0x4c>)
    2e12:	7d1b      	ldrb	r3, [r3, #20]
    2e14:	07db      	lsls	r3, r3, #31
    2e16:	d5fb      	bpl.n	2e10 <flash_write_buffer+0x10>



	/* Clear error flags */

	NVMCTRL->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e18:	2420      	movs	r4, #32
    2e1a:	34ff      	adds	r4, #255	; 0xff
    2e1c:	4b0b      	ldr	r3, [pc, #44]	; (2e4c <flash_write_buffer+0x4c>)
    2e1e:	831c      	strh	r4, [r3, #24]



	uint32_t nvm_address = destination_address / 2;
    2e20:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy

	 * to ensure alignment */

	for (uint16_t i = 0; i < length; i += 2) {
    2e22:	2300      	movs	r3, #0
    2e24:	e004      	b.n	2e30 <flash_write_buffer+0x30>



		/* Store next 16-bit chunk to the NVM memory space */

		NVM_MEMORY[nvm_address++] = data;
    2e26:	0045      	lsls	r5, r0, #1
    2e28:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2e2a:	3302      	adds	r3, #2
    2e2c:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
    2e2e:	3001      	adds	r0, #1
	for (uint16_t i = 0; i < length; i += 2) {
    2e30:	4293      	cmp	r3, r2
    2e32:	d209      	bcs.n	2e48 <flash_write_buffer+0x48>
		data = buffer[i];
    2e34:	5ccd      	ldrb	r5, [r1, r3]
    2e36:	b2ac      	uxth	r4, r5
		if (i < (length - 1)) {
    2e38:	1e56      	subs	r6, r2, #1
    2e3a:	42b3      	cmp	r3, r6
    2e3c:	daf3      	bge.n	2e26 <flash_write_buffer+0x26>
			data |= (buffer[i + 1] << 8);
    2e3e:	18cc      	adds	r4, r1, r3
    2e40:	7864      	ldrb	r4, [r4, #1]
    2e42:	0224      	lsls	r4, r4, #8
    2e44:	432c      	orrs	r4, r5
    2e46:	e7ee      	b.n	2e26 <flash_write_buffer+0x26>

	}

}
    2e48:	bd70      	pop	{r4, r5, r6, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	41004000 	.word	0x41004000
    2e50:	ffffa544 	.word	0xffffa544

00002e54 <enableExtInt>:
uint32_t callbackAudioSample(uint32_t); // Define this callback in application.c
 
bool extIntEnable; 

void enableExtInt(void) {
	extIntEnable = true;
    2e54:	2201      	movs	r2, #1
    2e56:	4b04      	ldr	r3, [pc, #16]	; (2e68 <enableExtInt+0x14>)
    2e58:	701a      	strb	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2e5a:	4b04      	ldr	r3, [pc, #16]	; (2e6c <enableExtInt+0x18>)
    2e5c:	320f      	adds	r2, #15
    2e5e:	21c0      	movs	r1, #192	; 0xc0
    2e60:	0049      	lsls	r1, r1, #1
    2e62:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2e64:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);
	//EIC->CTRL.bit.ENABLE = 1; 
}
    2e66:	4770      	bx	lr
    2e68:	20000b54 	.word	0x20000b54
    2e6c:	e000e100 	.word	0xe000e100

00002e70 <disableExtInt>:

void disableExtInt(void){	
	extIntEnable = false;
    2e70:	2200      	movs	r2, #0
    2e72:	4b05      	ldr	r3, [pc, #20]	; (2e88 <disableExtInt+0x18>)
    2e74:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2e76:	4b05      	ldr	r3, [pc, #20]	; (2e8c <disableExtInt+0x1c>)
    2e78:	3210      	adds	r2, #16
    2e7a:	21c0      	movs	r1, #192	; 0xc0
    2e7c:	0049      	lsls	r1, r1, #1
    2e7e:	505a      	str	r2, [r3, r1]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2e80:	3901      	subs	r1, #1
    2e82:	39ff      	subs	r1, #255	; 0xff
    2e84:	505a      	str	r2, [r3, r1]
	//EIC->CTRL.bit.ENABLE = 0; 
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_DisableIRQ(EIC_IRQn);
	//EIC->INTFLAG.bit.EXTINT5 = 1;
}
    2e86:	4770      	bx	lr
    2e88:	20000b54 	.word	0x20000b54
    2e8c:	e000e100 	.word	0xe000e100

00002e90 <enableClockGate>:
		.bit.OE = 1,
		//.bit.OE = 0,
		.bit.DIVSEL = 0,
		.bit.RUNSTDBY = 1
	};
	GCLK->GENCTRL = gentrcl;
    2e90:	4b02      	ldr	r3, [pc, #8]	; (2e9c <enableClockGate+0xc>)
    2e92:	681a      	ldr	r2, [r3, #0]
    2e94:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <enableClockGate+0x10>)
    2e96:	605a      	str	r2, [r3, #4]

void enableClockGate(void)
{
	clockEnable();
}
    2e98:	4770      	bx	lr
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	000073f8 	.word	0x000073f8
    2ea0:	40000c00 	.word	0x40000c00

00002ea4 <getMCUint>:
{
	bool value;
	
#ifdef PCB_V2	
	// On PA03
	value = REG_PORT_IN0 & (0x0001 << 3);
    2ea4:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <getMCUint+0x10>)
    2ea6:	681b      	ldr	r3, [r3, #0]
    2ea8:	2008      	movs	r0, #8
    2eaa:	4018      	ands	r0, r3
    2eac:	1e43      	subs	r3, r0, #1
    2eae:	4198      	sbcs	r0, r3
    2eb0:	b2c0      	uxtb	r0, r0
	// On PA05
	value = REG_PORT_IN0 & (0x0001 << 5);
#endif

	return value;
}
    2eb2:	4770      	bx	lr
    2eb4:	41004420 	.word	0x41004420

00002eb8 <toggleLED>:

void toggleLED(void)
{
#ifdef PCB_V2
	REG_PORT_OUTTGL1 = PORT_PB03;
    2eb8:	2208      	movs	r2, #8
    2eba:	4b01      	ldr	r3, [pc, #4]	; (2ec0 <toggleLED+0x8>)
    2ebc:	601a      	str	r2, [r3, #0]
#endif
}
    2ebe:	4770      	bx	lr
    2ec0:	4100449c 	.word	0x4100449c

00002ec4 <disableClockGate>:
		.bit.OOV = 0,
		.bit.OE = 0,
		.bit.DIVSEL = 0,
		.bit.RUNSTDBY = 1
	};
	GCLK->GENCTRL = gentrcl;
    2ec4:	4b02      	ldr	r3, [pc, #8]	; (2ed0 <disableClockGate+0xc>)
    2ec6:	685a      	ldr	r2, [r3, #4]
    2ec8:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <disableClockGate+0x10>)
    2eca:	605a      	str	r2, [r3, #4]


void disableClockGate(void)
{
	clockDisable();
}
    2ecc:	4770      	bx	lr
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	000073f8 	.word	0x000073f8
    2ed4:	40000c00 	.word	0x40000c00

00002ed8 <startSPI>:
    2ed8:	2110      	movs	r1, #16
    2eda:	2380      	movs	r3, #128	; 0x80
    2edc:	4a03      	ldr	r2, [pc, #12]	; (2eec <startSPI+0x14>)
    2ede:	50d1      	str	r1, [r2, r3]
	REG_PORT_OUTSET1 = PORT_PB08;
}

inline void spiStart1()
{
	REG_PORT_OUTCLR1 = PORT_PB08;
    2ee0:	2280      	movs	r2, #128	; 0x80
    2ee2:	0052      	lsls	r2, r2, #1
    2ee4:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <startSPI+0x18>)
    2ee6:	601a      	str	r2, [r3, #0]
#ifdef PCB_V2	
	spiStart1();
#else
	spiStart0();
#endif
}
    2ee8:	4770      	bx	lr
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	e000e100 	.word	0xe000e100
    2ef0:	41004494 	.word	0x41004494

00002ef4 <sendSPI>:
}

inline uint8_t spiSend1(uint8_t data)
{
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    2ef4:	4b06      	ldr	r3, [pc, #24]	; (2f10 <sendSPI+0x1c>)
    2ef6:	7e1b      	ldrb	r3, [r3, #24]
    2ef8:	07db      	lsls	r3, r3, #31
    2efa:	d5fb      	bpl.n	2ef4 <sendSPI>
	SERCOM1->SPI.DATA.reg = data;
    2efc:	4b04      	ldr	r3, [pc, #16]	; (2f10 <sendSPI+0x1c>)
    2efe:	6298      	str	r0, [r3, #40]	; 0x28
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    2f00:	4b03      	ldr	r3, [pc, #12]	; (2f10 <sendSPI+0x1c>)
    2f02:	7e1b      	ldrb	r3, [r3, #24]
    2f04:	075b      	lsls	r3, r3, #29
    2f06:	d5fb      	bpl.n	2f00 <sendSPI+0xc>
	return SERCOM1->SPI.DATA.reg;
    2f08:	4b01      	ldr	r3, [pc, #4]	; (2f10 <sendSPI+0x1c>)
    2f0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2f0c:	b2c0      	uxtb	r0, r0
#ifdef PCB_V2
	return spiSend1(cmd);
#else
	return spiSend0(cmd);
#endif
}
    2f0e:	4770      	bx	lr
    2f10:	42000c00 	.word	0x42000c00

00002f14 <pushSPI>:

void pushSPI(unsigned char *data, unsigned char numdata){
    2f14:	b510      	push	{r4, lr}
}

inline void spiPushMulti1(uint8_t *data, uint8_t numdata)
{
#ifdef USE_DMA
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);	
    2f16:	4b0c      	ldr	r3, [pc, #48]	; (2f48 <pushSPI+0x34>)
    2f18:	7e1b      	ldrb	r3, [r3, #24]
    2f1a:	07db      	lsls	r3, r3, #31
    2f1c:	d5fb      	bpl.n	2f16 <pushSPI+0x2>
	DMA_start_transfer(data, numdata );
    2f1e:	4b0b      	ldr	r3, [pc, #44]	; (2f4c <pushSPI+0x38>)
    2f20:	4798      	blx	r3
	DMA_wait_complete();	
    2f22:	4b0b      	ldr	r3, [pc, #44]	; (2f50 <pushSPI+0x3c>)
    2f24:	4798      	blx	r3
		
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);	
    2f26:	4b08      	ldr	r3, [pc, #32]	; (2f48 <pushSPI+0x34>)
    2f28:	7e1b      	ldrb	r3, [r3, #24]
    2f2a:	07db      	lsls	r3, r3, #31
    2f2c:	d5fb      	bpl.n	2f26 <pushSPI+0x12>
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    2f2e:	4b06      	ldr	r3, [pc, #24]	; (2f48 <pushSPI+0x34>)
    2f30:	7e1b      	ldrb	r3, [r3, #24]
    2f32:	075b      	lsls	r3, r3, #29
    2f34:	d5fb      	bpl.n	2f2e <pushSPI+0x1a>
	SERCOM1->SPI.DATA.reg;		
    2f36:	4b04      	ldr	r3, [pc, #16]	; (2f48 <pushSPI+0x34>)
    2f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SERCOM1->SPI.STATUS.bit.BUFOVF = 1; // Reset buffer overflow	
    2f3a:	8b5a      	ldrh	r2, [r3, #26]
    2f3c:	2104      	movs	r1, #4
    2f3e:	430a      	orrs	r2, r1
    2f40:	835a      	strh	r2, [r3, #26]
	SERCOM1->SPI.DATA.reg;
    2f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SERCOM1->SPI.DATA.reg;
    2f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	spiPushMulti1(data, numdata);
#else
	spiPushMulti0(data, numdata);
#endif
	
}
    2f46:	bd10      	pop	{r4, pc}
    2f48:	42000c00 	.word	0x42000c00
    2f4c:	00002d31 	.word	0x00002d31
    2f50:	00002d49 	.word	0x00002d49

00002f54 <pullSPI>:

void pullSPI(unsigned char *data, unsigned char numdata){
    2f54:	b510      	push	{r4, lr}
	return SERCOM1->SPI.DATA.reg;
}

inline void spiPullMulti1(uint8_t *data, uint8_t numdata)
{
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
    2f56:	4b0f      	ldr	r3, [pc, #60]	; (2f94 <pullSPI+0x40>)
    2f58:	7e1b      	ldrb	r3, [r3, #24]
    2f5a:	07db      	lsls	r3, r3, #31
    2f5c:	d5fb      	bpl.n	2f56 <pullSPI+0x2>
	SERCOM1->SPI.DATA.reg = 0x00;
    2f5e:	2200      	movs	r2, #0
    2f60:	4b0c      	ldr	r3, [pc, #48]	; (2f94 <pullSPI+0x40>)
    2f62:	629a      	str	r2, [r3, #40]	; 0x28
    2f64:	e00b      	b.n	2f7e <pullSPI+0x2a>
	for(uint8_t i=0;i<numdata-1;i++)
	{		
		while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    2f66:	4b0b      	ldr	r3, [pc, #44]	; (2f94 <pullSPI+0x40>)
    2f68:	7e1b      	ldrb	r3, [r3, #24]
    2f6a:	075b      	lsls	r3, r3, #29
    2f6c:	d5fb      	bpl.n	2f66 <pullSPI+0x12>
		SERCOM1->SPI.DATA.reg = 0x00;
    2f6e:	4b09      	ldr	r3, [pc, #36]	; (2f94 <pullSPI+0x40>)
    2f70:	2400      	movs	r4, #0
    2f72:	629c      	str	r4, [r3, #40]	; 0x28
		*data = SERCOM1->SPI.DATA.reg; data++;
    2f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f76:	7003      	strb	r3, [r0, #0]
    2f78:	3001      	adds	r0, #1
	for(uint8_t i=0;i<numdata-1;i++)
    2f7a:	3201      	adds	r2, #1
    2f7c:	b2d2      	uxtb	r2, r2
    2f7e:	1e4b      	subs	r3, r1, #1
    2f80:	429a      	cmp	r2, r3
    2f82:	dbf0      	blt.n	2f66 <pullSPI+0x12>
	}
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
    2f84:	4b03      	ldr	r3, [pc, #12]	; (2f94 <pullSPI+0x40>)
    2f86:	7e1b      	ldrb	r3, [r3, #24]
    2f88:	075b      	lsls	r3, r3, #29
    2f8a:	d5fb      	bpl.n	2f84 <pullSPI+0x30>
	*data = SERCOM1->SPI.DATA.reg;
    2f8c:	4b01      	ldr	r3, [pc, #4]	; (2f94 <pullSPI+0x40>)
    2f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f90:	7003      	strb	r3, [r0, #0]
#ifdef PCB_V2
	spiPullMulti1(data, numdata);
#else
	spiPullMulti0(data, numdata);
#endif
}
    2f92:	bd10      	pop	{r4, pc}
    2f94:	42000c00 	.word	0x42000c00

00002f98 <stopSPI>:
}

inline void spiStop1()
{
	REG_PORT_OUTSET1 = PORT_PB08;
    2f98:	2280      	movs	r2, #128	; 0x80
    2f9a:	0052      	lsls	r2, r2, #1
    2f9c:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <stopSPI+0x18>)
    2f9e:	601a      	str	r2, [r3, #0]
#else
	spiStop0();
#endif

	//__enable_irq();
	if(extIntEnable)
    2fa0:	4b04      	ldr	r3, [pc, #16]	; (2fb4 <stopSPI+0x1c>)
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d002      	beq.n	2fae <stopSPI+0x16>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2fa8:	3af0      	subs	r2, #240	; 0xf0
    2faa:	4b03      	ldr	r3, [pc, #12]	; (2fb8 <stopSPI+0x20>)
    2fac:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(EIC_IRQn);
	//NVIC->ISER[0] = interrupts;
}
    2fae:	4770      	bx	lr
    2fb0:	41004498 	.word	0x41004498
    2fb4:	20000b54 	.word	0x20000b54
    2fb8:	e000e100 	.word	0xe000e100

00002fbc <resetRadio>:

void resetRadio(void)
{
	// Pull SPARK_RST low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB02;
    2fbc:	2304      	movs	r3, #4
    2fbe:	4a0b      	ldr	r2, [pc, #44]	; (2fec <resetRadio+0x30>)
    2fc0:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR1 = PORT_PB02;
    2fc2:	4a0b      	ldr	r2, [pc, #44]	; (2ff0 <resetRadio+0x34>)
    2fc4:	6013      	str	r3, [r2, #0]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    2fc6:	2200      	movs	r2, #0
    2fc8:	4b0a      	ldr	r3, [pc, #40]	; (2ff4 <resetRadio+0x38>)
    2fca:	821a      	strh	r2, [r3, #16]
    2fcc:	e008      	b.n	2fe0 <resetRadio+0x24>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    2fce:	2110      	movs	r1, #16
    2fd0:	4b08      	ldr	r3, [pc, #32]	; (2ff4 <resetRadio+0x38>)
    2fd2:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    2fd4:	4b07      	ldr	r3, [pc, #28]	; (2ff4 <resetRadio+0x38>)
    2fd6:	7b9b      	ldrb	r3, [r3, #14]
    2fd8:	06db      	lsls	r3, r3, #27
    2fda:	d5fb      	bpl.n	2fd4 <resetRadio+0x18>
		cnt++;
    2fdc:	3201      	adds	r2, #1
    2fde:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    2fe0:	2a0a      	cmp	r2, #10
    2fe2:	d1f4      	bne.n	2fce <resetRadio+0x12>
	timerDelay(10);
	REG_PORT_OUTSET1 = PORT_PB02;
    2fe4:	3a06      	subs	r2, #6
    2fe6:	4b04      	ldr	r3, [pc, #16]	; (2ff8 <resetRadio+0x3c>)
    2fe8:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET0 = PORT_PA21;
	REG_PORT_OUTCLR0 = PORT_PA21;
	timerDelay(10);
	REG_PORT_OUTSET0 = PORT_PA21;
#endif
}
    2fea:	4770      	bx	lr
    2fec:	41004488 	.word	0x41004488
    2ff0:	41004494 	.word	0x41004494
    2ff4:	42003000 	.word	0x42003000
    2ff8:	41004498 	.word	0x41004498

00002ffc <boardSetup>:

void boardSetup(void)
{
    2ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ffe:	46ce      	mov	lr, r9
    3000:	4647      	mov	r7, r8
    3002:	b580      	push	{r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3004:	b672      	cpsid	i
	PM->APBCMASK.bit.SERCOM1_ = 1;
    3006:	4ac8      	ldr	r2, [pc, #800]	; (3328 <boardSetup+0x32c>)
    3008:	6a11      	ldr	r1, [r2, #32]
    300a:	2308      	movs	r3, #8
    300c:	430b      	orrs	r3, r1
    300e:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    3010:	4ac6      	ldr	r2, [pc, #792]	; (332c <boardSetup+0x330>)
    3012:	4bc7      	ldr	r3, [pc, #796]	; (3330 <boardSetup+0x334>)
    3014:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY);
    3016:	4bc6      	ldr	r3, [pc, #792]	; (3330 <boardSetup+0x334>)
    3018:	785b      	ldrb	r3, [r3, #1]
    301a:	09db      	lsrs	r3, r3, #7
    301c:	d1fb      	bne.n	3016 <boardSetup+0x1a>
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
    301e:	4ac5      	ldr	r2, [pc, #788]	; (3334 <boardSetup+0x338>)
    3020:	4bc5      	ldr	r3, [pc, #788]	; (3338 <boardSetup+0x33c>)
    3022:	6891      	ldr	r1, [r2, #8]
    3024:	6019      	str	r1, [r3, #0]
	const SERCOM_SPI_CTRLB_Type ctrlb = {
    3026:	2180      	movs	r1, #128	; 0x80
    3028:	0289      	lsls	r1, r1, #10
	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
    302a:	6059      	str	r1, [r3, #4]
	SERCOM1->SPI.BAUD.reg = 1; // Rate = 48 MHz / 2(BAUD+1), maximum speed
    302c:	2101      	movs	r1, #1
    302e:	7319      	strb	r1, [r3, #12]
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    3030:	68d1      	ldr	r1, [r2, #12]
    3032:	4ac2      	ldr	r2, [pc, #776]	; (333c <boardSetup+0x340>)
    3034:	6291      	str	r1, [r2, #40]	; 0x28
	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
    3036:	6819      	ldr	r1, [r3, #0]
    3038:	2202      	movs	r2, #2
    303a:	430a      	orrs	r2, r1
    303c:	601a      	str	r2, [r3, #0]
	while(SERCOM1->SPI.SYNCBUSY.bit.ENABLE);
    303e:	4bbe      	ldr	r3, [pc, #760]	; (3338 <boardSetup+0x33c>)
    3040:	69db      	ldr	r3, [r3, #28]
    3042:	079b      	lsls	r3, r3, #30
    3044:	d4fb      	bmi.n	303e <boardSetup+0x42>
	DMA_init();
    3046:	4bbe      	ldr	r3, [pc, #760]	; (3340 <boardSetup+0x344>)
    3048:	4798      	blx	r3
	REG_PORT_DIRSET1 = PORT_PB08;
    304a:	4dbe      	ldr	r5, [pc, #760]	; (3344 <boardSetup+0x348>)
    304c:	2380      	movs	r3, #128	; 0x80
    304e:	005b      	lsls	r3, r3, #1
    3050:	602b      	str	r3, [r5, #0]
	REG_PORT_OUTSET1 = PORT_PB08;
    3052:	4abd      	ldr	r2, [pc, #756]	; (3348 <boardSetup+0x34c>)
    3054:	6013      	str	r3, [r2, #0]
	PM->APBAMASK.bit.SYSCTRL_ = 1;
    3056:	49b4      	ldr	r1, [pc, #720]	; (3328 <boardSetup+0x32c>)
    3058:	698a      	ldr	r2, [r1, #24]
    305a:	2404      	movs	r4, #4
    305c:	0013      	movs	r3, r2
    305e:	4323      	orrs	r3, r4
    3060:	618b      	str	r3, [r1, #24]
	SYSCTRL->XOSC32K = xosc32k;
    3062:	4aba      	ldr	r2, [pc, #744]	; (334c <boardSetup+0x350>)
    3064:	4bb3      	ldr	r3, [pc, #716]	; (3334 <boardSetup+0x338>)
    3066:	8a18      	ldrh	r0, [r3, #16]
    3068:	8290      	strh	r0, [r2, #20]
	SYSCTRL->DPLLCTRLA = dpllctrla;
    306a:	7d1e      	ldrb	r6, [r3, #20]
    306c:	2044      	movs	r0, #68	; 0x44
    306e:	5416      	strb	r6, [r2, r0]
	const SYSCTRL_DPLLCTRLB_Type dpllctrlb = {
    3070:	2080      	movs	r0, #128	; 0x80
    3072:	0140      	lsls	r0, r0, #5
	SYSCTRL->DPLLCTRLB = dpllctrlb;
    3074:	64d0      	str	r0, [r2, #76]	; 0x4c
	const SYSCTRL_DPLLRATIO_Type dpllratio = {
    3076:	2600      	movs	r6, #0
    3078:	4fb5      	ldr	r7, [pc, #724]	; (3350 <boardSetup+0x354>)
	SYSCTRL->DPLLRATIO = dpllratio;
    307a:	6497      	str	r7, [r2, #72]	; 0x48
	GCLK->GENDIV = gendiv;
    307c:	4aac      	ldr	r2, [pc, #688]	; (3330 <boardSetup+0x334>)
    307e:	699f      	ldr	r7, [r3, #24]
    3080:	6097      	str	r7, [r2, #8]
	GCLK->GENCTRL = gentrcl;
    3082:	69df      	ldr	r7, [r3, #28]
    3084:	6057      	str	r7, [r2, #4]
	const GCLK_GENDIV_Type gendiv2 = {
    3086:	2702      	movs	r7, #2
	GCLK->GENDIV = gendiv2;
    3088:	6097      	str	r7, [r2, #8]
	GCLK->GENCTRL = gentrcl2;
    308a:	6a1f      	ldr	r7, [r3, #32]
    308c:	6057      	str	r7, [r2, #4]
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    308e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3090:	4baa      	ldr	r3, [pc, #680]	; (333c <boardSetup+0x340>)
    3092:	629f      	str	r7, [r3, #40]	; 0x28
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    3094:	6a0b      	ldr	r3, [r1, #32]
    3096:	4318      	orrs	r0, r3
    3098:	6208      	str	r0, [r1, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    309a:	4bae      	ldr	r3, [pc, #696]	; (3354 <boardSetup+0x358>)
    309c:	8053      	strh	r3, [r2, #2]
	TC4->COUNT16.CTRLA.reg =
    309e:	4bae      	ldr	r3, [pc, #696]	; (3358 <boardSetup+0x35c>)
    30a0:	22a9      	movs	r2, #169	; 0xa9
    30a2:	0152      	lsls	r2, r2, #5
    30a4:	801a      	strh	r2, [r3, #0]
	TC4->COUNT16.COUNT.reg = 0;
    30a6:	821e      	strh	r6, [r3, #16]
	TC4->COUNT16.CC[0].reg = 320u; // Count to 320 to get 1ms
    30a8:	22a0      	movs	r2, #160	; 0xa0
    30aa:	0052      	lsls	r2, r2, #1
    30ac:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    30ae:	881a      	ldrh	r2, [r3, #0]
    30b0:	2102      	movs	r1, #2
    30b2:	430a      	orrs	r2, r1
    30b4:	b292      	uxth	r2, r2
    30b6:	801a      	strh	r2, [r3, #0]
	// Init timer for delay
	timerInit();
	
	// Pull IO_EN high
#ifdef PCB_V2
	REG_PORT_DIRSET0 = PORT_PA20;
    30b8:	48a8      	ldr	r0, [pc, #672]	; (335c <boardSetup+0x360>)
    30ba:	2180      	movs	r1, #128	; 0x80
    30bc:	0349      	lsls	r1, r1, #13
    30be:	6001      	str	r1, [r0, #0]
	REG_PORT_OUTSET0 = PORT_PA20;
    30c0:	4aa7      	ldr	r2, [pc, #668]	; (3360 <boardSetup+0x364>)
    30c2:	6011      	str	r1, [r2, #0]
	//REG_PORT_OUTCLR0 = PORT_PA06;
#endif
	
	// Pull PLL_SEL high
#ifdef PCB_V2
	REG_PORT_DIRSET0 = PORT_PA27;
    30c4:	2180      	movs	r1, #128	; 0x80
    30c6:	0509      	lsls	r1, r1, #20
    30c8:	6001      	str	r1, [r0, #0]
	REG_PORT_OUTSET0 = PORT_PA27;
    30ca:	6011      	str	r1, [r2, #0]
	//REG_PORT_OUTCLR0 = PORT_PA03;
#endif

	// Pull XTAL_SEL low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB23;
    30cc:	2180      	movs	r1, #128	; 0x80
    30ce:	0409      	lsls	r1, r1, #16
    30d0:	6029      	str	r1, [r5, #0]
	//REG_PORT_OUTSET1 = PORT_PB23;
	REG_PORT_OUTCLR1 = PORT_PB23;
    30d2:	4aa4      	ldr	r2, [pc, #656]	; (3364 <boardSetup+0x368>)
    30d4:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = PORT_PA27;
#endif
	
	// Pull SPARK_RST low
#ifdef PCB_V2
	REG_PORT_DIRSET1 = PORT_PB02;
    30d6:	602c      	str	r4, [r5, #0]
	REG_PORT_OUTCLR1 = PORT_PB02;
    30d8:	6014      	str	r4, [r2, #0]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    30da:	821e      	strh	r6, [r3, #16]
    30dc:	2200      	movs	r2, #0
    30de:	e008      	b.n	30f2 <boardSetup+0xf6>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    30e0:	2110      	movs	r1, #16
    30e2:	4b9d      	ldr	r3, [pc, #628]	; (3358 <boardSetup+0x35c>)
    30e4:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    30e6:	4b9c      	ldr	r3, [pc, #624]	; (3358 <boardSetup+0x35c>)
    30e8:	7b9b      	ldrb	r3, [r3, #14]
    30ea:	06db      	lsls	r3, r3, #27
    30ec:	d5fb      	bpl.n	30e6 <boardSetup+0xea>
		cnt++;
    30ee:	3201      	adds	r2, #1
    30f0:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    30f2:	4b9d      	ldr	r3, [pc, #628]	; (3368 <boardSetup+0x36c>)
    30f4:	429a      	cmp	r2, r3
    30f6:	d1f3      	bne.n	30e0 <boardSetup+0xe4>
	timerDelay(1500);
	REG_PORT_OUTSET1 = PORT_PB02;
    30f8:	2204      	movs	r2, #4
    30fa:	4b93      	ldr	r3, [pc, #588]	; (3348 <boardSetup+0x34c>)
    30fc:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET0 = PORT_PA21;
#endif

#ifdef PCB_V2
	// Enable debug port
	REG_PORT_DIRSET1 = PORT_PB09;
    30fe:	4991      	ldr	r1, [pc, #580]	; (3344 <boardSetup+0x348>)
    3100:	2380      	movs	r3, #128	; 0x80
    3102:	009b      	lsls	r3, r3, #2
    3104:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB09;
    3106:	4a97      	ldr	r2, [pc, #604]	; (3364 <boardSetup+0x368>)
    3108:	6013      	str	r3, [r2, #0]
	REG_PORT_DIRSET1 = PORT_PB11;
    310a:	2380      	movs	r3, #128	; 0x80
    310c:	011b      	lsls	r3, r3, #4
    310e:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB11;
    3110:	6013      	str	r3, [r2, #0]
	
	// Enable LED port
	REG_PORT_DIRSET1 = PORT_PB03;
    3112:	2308      	movs	r3, #8
    3114:	600b      	str	r3, [r1, #0]
	REG_PORT_OUTCLR1 = PORT_PB03;
    3116:	6013      	str	r3, [r2, #0]
#endif
	
	// External interrupt 5 for MCU_INT
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_EIC;
    3118:	4e85      	ldr	r6, [pc, #532]	; (3330 <boardSetup+0x334>)
    311a:	4a94      	ldr	r2, [pc, #592]	; (336c <boardSetup+0x370>)
    311c:	8072      	strh	r2, [r6, #2]
	PM->APBAMASK.bit.EIC_ = 1;
    311e:	4d82      	ldr	r5, [pc, #520]	; (3328 <boardSetup+0x32c>)
    3120:	69a9      	ldr	r1, [r5, #24]
    3122:	2240      	movs	r2, #64	; 0x40
    3124:	430a      	orrs	r2, r1
    3126:	61aa      	str	r2, [r5, #24]
	
#ifdef PCB_V2
	EIC->EVCTRL.bit.EXTINTEO3 = 1;
    3128:	4a91      	ldr	r2, [pc, #580]	; (3370 <boardSetup+0x374>)
    312a:	6850      	ldr	r0, [r2, #4]
    312c:	0001      	movs	r1, r0
    312e:	4319      	orrs	r1, r3
    3130:	6051      	str	r1, [r2, #4]
	EIC->INTENSET.bit.EXTINT3 = 1;
    3132:	68d1      	ldr	r1, [r2, #12]
    3134:	430b      	orrs	r3, r1
    3136:	60d3      	str	r3, [r2, #12]
	EIC->CONFIG->bit.SENSE3 = 0x5; // Low level detection
    3138:	488e      	ldr	r0, [pc, #568]	; (3374 <boardSetup+0x378>)
    313a:	6801      	ldr	r1, [r0, #0]
    313c:	4b8e      	ldr	r3, [pc, #568]	; (3378 <boardSetup+0x37c>)
    313e:	4019      	ands	r1, r3
    3140:	23a0      	movs	r3, #160	; 0xa0
    3142:	01db      	lsls	r3, r3, #7
    3144:	430b      	orrs	r3, r1
    3146:	6003      	str	r3, [r0, #0]
	EIC->CTRL.bit.ENABLE = 1; // Enable external interrupts
    3148:	7813      	ldrb	r3, [r2, #0]
    314a:	2702      	movs	r7, #2
    314c:	433b      	orrs	r3, r7
    314e:	7013      	strb	r3, [r2, #0]
		.bit.PMUX = MUX_PA03A_EIC_EXTINT3,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 0,
		.bit.PINMASK = (uint16_t)((PORT_PA03))
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
    3150:	4b78      	ldr	r3, [pc, #480]	; (3334 <boardSetup+0x338>)
    3152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3154:	4c79      	ldr	r4, [pc, #484]	; (333c <boardSetup+0x340>)
    3156:	62a3      	str	r3, [r4, #40]	; 0x28
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
#endif
	
	//NVIC_EnableIRQ(EIC_IRQn);
	
	disableExtInt();
    3158:	4b88      	ldr	r3, [pc, #544]	; (337c <boardSetup+0x380>)
    315a:	4798      	blx	r3
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    315c:	4b88      	ldr	r3, [pc, #544]	; (3380 <boardSetup+0x384>)
    315e:	20c6      	movs	r0, #198	; 0xc6
    3160:	0080      	lsls	r0, r0, #2
    3162:	581a      	ldr	r2, [r3, r0]
    3164:	0212      	lsls	r2, r2, #8
    3166:	0a12      	lsrs	r2, r2, #8
    3168:	2180      	movs	r1, #128	; 0x80
    316a:	05c9      	lsls	r1, r1, #23
    316c:	430a      	orrs	r2, r1
    316e:	501a      	str	r2, [r3, r0]
    3170:	21c1      	movs	r1, #193	; 0xc1
    3172:	0089      	lsls	r1, r1, #2
    3174:	585a      	ldr	r2, [r3, r1]
    3176:	0212      	lsls	r2, r2, #8
    3178:	0a12      	lsrs	r2, r2, #8
    317a:	20c0      	movs	r0, #192	; 0xc0
    317c:	0600      	lsls	r0, r0, #24
    317e:	4302      	orrs	r2, r0
    3180:	505a      	str	r2, [r3, r1]
    3182:	22c5      	movs	r2, #197	; 0xc5
    3184:	0092      	lsls	r2, r2, #2
    3186:	4694      	mov	ip, r2
    3188:	589a      	ldr	r2, [r3, r2]
    318a:	20ff      	movs	r0, #255	; 0xff
    318c:	4681      	mov	r9, r0
    318e:	4382      	bics	r2, r0
    3190:	383f      	subs	r0, #63	; 0x3f
    3192:	4302      	orrs	r2, r0
    3194:	4660      	mov	r0, ip
    3196:	501a      	str	r2, [r3, r0]
    3198:	585a      	ldr	r2, [r3, r1]
    319a:	4648      	mov	r0, r9
    319c:	4382      	bics	r2, r0
    319e:	387f      	subs	r0, #127	; 0x7f
    31a0:	4302      	orrs	r2, r0
    31a2:	505a      	str	r2, [r3, r1]
  __ASM volatile ("cpsie i" : : : "memory");
    31a4:	b662      	cpsie	i
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    31a6:	224c      	movs	r2, #76	; 0x4c
    31a8:	5ca3      	ldrb	r3, [r4, r2]
    31aa:	2001      	movs	r0, #1
    31ac:	4303      	orrs	r3, r0
    31ae:	54a3      	strb	r3, [r4, r2]
   
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    31b0:	2336      	movs	r3, #54	; 0x36
    31b2:	5ce1      	ldrb	r1, [r4, r3]
    31b4:	3a3d      	subs	r2, #61	; 0x3d
    31b6:	4391      	bics	r1, r2
    31b8:	54e1      	strb	r1, [r4, r3]
                    //          
    // set new values
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    31ba:	5ce2      	ldrb	r2, [r4, r3]
    31bc:	433a      	orrs	r2, r7
    31be:	b2d2      	uxtb	r2, r2
    31c0:	54e2      	strb	r2, [r4, r3]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    31c2:	214d      	movs	r1, #77	; 0x4d
    31c4:	5c62      	ldrb	r2, [r4, r1]
    31c6:	4302      	orrs	r2, r0
    31c8:	5462      	strb	r2, [r4, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    31ca:	5ce2      	ldrb	r2, [r4, r3]
    31cc:	393e      	subs	r1, #62	; 0x3e
    31ce:	400a      	ands	r2, r1
    31d0:	54e2      	strb	r2, [r4, r3]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    31d2:	5ce2      	ldrb	r2, [r4, r3]
    31d4:	2120      	movs	r1, #32
    31d6:	430a      	orrs	r2, r1
    31d8:	b2d2      	uxtb	r2, r2
    31da:	54e2      	strb	r2, [r4, r3]
inline void i2c_init(void)
{
	pin_set_peripheral_function(PINMUX_PAD0);
	pin_set_peripheral_function(PINMUX_PAD1);  

	PM->APBCMASK.reg |= I2C_SERCOM_APBCMASK;
    31dc:	6a2b      	ldr	r3, [r5, #32]
    31de:	2210      	movs	r2, #16
    31e0:	4313      	orrs	r3, r2
    31e2:	622b      	str	r3, [r5, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(I2C_SERCOM_GCLK_ID) |
    31e4:	4b67      	ldr	r3, [pc, #412]	; (3384 <boardSetup+0x388>)
    31e6:	8073      	strh	r3, [r6, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(I2C_SERCOM_CLK_GEN);

	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    31e8:	32f0      	adds	r2, #240	; 0xf0
    31ea:	4b67      	ldr	r3, [pc, #412]	; (3388 <boardSetup+0x38c>)
    31ec:	605a      	str	r2, [r3, #4]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    31ee:	4b66      	ldr	r3, [pc, #408]	; (3388 <boardSetup+0x38c>)
    31f0:	69db      	ldr	r3, [r3, #28]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d1fb      	bne.n	31ee <boardSetup+0x1f2>

	SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(34);
    31f6:	2222      	movs	r2, #34	; 0x22
    31f8:	4b63      	ldr	r3, [pc, #396]	; (3388 <boardSetup+0x38c>)
    31fa:	60da      	str	r2, [r3, #12]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    31fc:	4b62      	ldr	r3, [pc, #392]	; (3388 <boardSetup+0x38c>)
    31fe:	69db      	ldr	r3, [r3, #28]
    3200:	2b00      	cmp	r3, #0
    3202:	d1fb      	bne.n	31fc <boardSetup+0x200>

	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
    3204:	4a61      	ldr	r2, [pc, #388]	; (338c <boardSetup+0x390>)
    3206:	4b60      	ldr	r3, [pc, #384]	; (3388 <boardSetup+0x38c>)
    3208:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |
	SERCOM_I2CM_CTRLA_SDAHOLD(3);
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    320a:	4b5f      	ldr	r3, [pc, #380]	; (3388 <boardSetup+0x38c>)
    320c:	69db      	ldr	r3, [r3, #28]
    320e:	2b00      	cmp	r3, #0
    3210:	d1fb      	bne.n	320a <boardSetup+0x20e>

	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    3212:	4a5d      	ldr	r2, [pc, #372]	; (3388 <boardSetup+0x38c>)
    3214:	8b53      	ldrh	r3, [r2, #26]
    3216:	2110      	movs	r1, #16
    3218:	430b      	orrs	r3, r1
    321a:	b29b      	uxth	r3, r3
    321c:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);	
    321e:	4b5a      	ldr	r3, [pc, #360]	; (3388 <boardSetup+0x38c>)
    3220:	69db      	ldr	r3, [r3, #28]
    3222:	2b00      	cmp	r3, #0
    3224:	d1fb      	bne.n	321e <boardSetup+0x222>
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    3226:	4b45      	ldr	r3, [pc, #276]	; (333c <boardSetup+0x340>)
    3228:	2147      	movs	r1, #71	; 0x47
    322a:	5c5a      	ldrb	r2, [r3, r1]
    322c:	2401      	movs	r4, #1
    322e:	4322      	orrs	r2, r4
    3230:	545a      	strb	r2, [r3, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    3232:	2033      	movs	r0, #51	; 0x33
    3234:	5c1a      	ldrb	r2, [r3, r0]
    3236:	270f      	movs	r7, #15
    3238:	3938      	subs	r1, #56	; 0x38
    323a:	400a      	ands	r2, r1
    323c:	541a      	strb	r2, [r3, r0]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    323e:	5c1a      	ldrb	r2, [r3, r0]
    3240:	2560      	movs	r5, #96	; 0x60
    3242:	432a      	orrs	r2, r5
    3244:	b2d2      	uxtb	r2, r2
    3246:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    3248:	3015      	adds	r0, #21
    324a:	5c1a      	ldrb	r2, [r3, r0]
    324c:	4322      	orrs	r2, r4
    324e:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    3250:	2634      	movs	r6, #52	; 0x34
    3252:	5d9a      	ldrb	r2, [r3, r6]
    3254:	43ba      	bics	r2, r7
    3256:	559a      	strb	r2, [r3, r6]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    3258:	5d9a      	ldrb	r2, [r3, r6]
    325a:	2006      	movs	r0, #6
    325c:	4684      	mov	ip, r0
    325e:	4660      	mov	r0, ip
    3260:	4302      	orrs	r2, r0
    3262:	b2d2      	uxtb	r2, r2
    3264:	559a      	strb	r2, [r3, r6]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    3266:	204a      	movs	r0, #74	; 0x4a
    3268:	5c1a      	ldrb	r2, [r3, r0]
    326a:	4322      	orrs	r2, r4
    326c:	541a      	strb	r2, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    326e:	2235      	movs	r2, #53	; 0x35
    3270:	5c9e      	ldrb	r6, [r3, r2]
    3272:	43be      	bics	r6, r7
    3274:	549e      	strb	r6, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    3276:	5c98      	ldrb	r0, [r3, r2]
    3278:	4666      	mov	r6, ip
    327a:	4330      	orrs	r0, r6
    327c:	b2c0      	uxtb	r0, r0
    327e:	5498      	strb	r0, [r3, r2]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    3280:	264b      	movs	r6, #75	; 0x4b
    3282:	5d98      	ldrb	r0, [r3, r6]
    3284:	4304      	orrs	r4, r0
    3286:	559c      	strb	r4, [r3, r6]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    3288:	5c98      	ldrb	r0, [r3, r2]
    328a:	4001      	ands	r1, r0
    328c:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    328e:	5c99      	ldrb	r1, [r3, r2]
    3290:	4329      	orrs	r1, r5
    3292:	b2c9      	uxtb	r1, r1
    3294:	5499      	strb	r1, [r3, r2]
	pin_set_peripheral_function(PINMUX_PA08G_I2S_SD1);
	//pin_set_peripheral_function(PINMUX_PA09G_I2S_MCK0);
	pin_set_peripheral_function(PINMUX_PA10G_I2S_SCK0);
	pin_set_peripheral_function(PINMUX_PA11G_I2S_FS0);
	
	PM->APBCMASK.reg |= I2S_APBCMASK;
    3296:	4c24      	ldr	r4, [pc, #144]	; (3328 <boardSetup+0x32c>)
    3298:	6a22      	ldr	r2, [r4, #32]
    329a:	2380      	movs	r3, #128	; 0x80
    329c:	035b      	lsls	r3, r3, #13
    329e:	4313      	orrs	r3, r2
    32a0:	6223      	str	r3, [r4, #32]
	I2S_CLKCTRL_NBSLOTS(0x01) |  // 2 slots (1 for each channel)
	I2S_CLKCTRL_BITDELAY |		 // 1 bit delay (i2s mode)
	I2S_CLKCTRL_FSWIDTH(0x01) |  // HALF frame
	I2S_CLKCTRL_MCKDIV(0x07);  //Sclk = Fs*nbslot*nbbits = 48khz*2*32768hz = 3.072 MHz = 24.576Mhz/8 = 24.576Mhz/(MCKDIC+1)
	*/
	I2S->CLKCTRL[0].reg = I2S_CLKCTRL_SLOTSIZE(0x03) | // 32 bits slot size 
    32a2:	4b3b      	ldr	r3, [pc, #236]	; (3390 <boardSetup+0x394>)
    32a4:	4a3b      	ldr	r2, [pc, #236]	; (3394 <boardSetup+0x398>)
    32a6:	605a      	str	r2, [r3, #4]
	I2S_CLKCTRL_FSSEL_FSPIN | 
	I2S_CLKCTRL_FSWIDTH(0x01) |  // HALF frame
	I2S_CLKCTRL_SCKSEL_SCKPIN;
	
	//I2S->SERCTRL[0].reg = I2S_SERCTRL_DATASIZE(0x00) | // data size configured at 32-bit (using 16 MSBs only)
	I2S->SERCTRL[0].reg = I2S_SERCTRL_DATASIZE(0x05) | // data size configured at 16-bit
    32a8:	4a3b      	ldr	r2, [pc, #236]	; (3398 <boardSetup+0x39c>)
    32aa:	621a      	str	r2, [r3, #32]
	I2S_SERCTRL_SLOTADJ_LEFT | // Left adjusted
	I2S_SERCTRL_WORDADJ_RIGHT | // Left adjusted
	I2S_SERCTRL_SERMODE(0x01);	 // transmit mode
	
	//I2S->SERCTRL[1].reg = I2S_SERCTRL_DATASIZE(0x00) | // data size configured at 32-bit (using 16 MSBs only)
	I2S->SERCTRL[1].reg = I2S_SERCTRL_DATASIZE(0x05) | // data size configured at 16-bit
    32ac:	3a01      	subs	r2, #1
    32ae:	625a      	str	r2, [r3, #36]	; 0x24
	//I2S_SERCTRL_SLOTDIS1 | I2S_SERCTRL_SLOTDIS2 | I2S_SERCTRL_SLOTDIS4 | I2S_SERCTRL_SLOTDIS5 |
	I2S_SERCTRL_SLOTADJ_LEFT | // Left adjusted
	I2S_SERCTRL_WORDADJ_RIGHT | // Left adjusted
	I2S_SERCTRL_SERMODE(0x00);	 // receive mode	
	
	I2S->INTENSET.bit.TXRDY0 = 1; //enable tx ready interrupt
    32b0:	8a19      	ldrh	r1, [r3, #16]
    32b2:	2280      	movs	r2, #128	; 0x80
    32b4:	0052      	lsls	r2, r2, #1
    32b6:	430a      	orrs	r2, r1
    32b8:	821a      	strh	r2, [r3, #16]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    32ba:	4a31      	ldr	r2, [pc, #196]	; (3380 <boardSetup+0x384>)
    32bc:	2180      	movs	r1, #128	; 0x80
    32be:	0509      	lsls	r1, r1, #20
    32c0:	2080      	movs	r0, #128	; 0x80
    32c2:	5011      	str	r1, [r2, r0]
	//I2S->INTENSET.bit.RXRDY1 = 1; //enable rx ready interrupt

	NVIC_DisableIRQ(I2S_IRQn);
	
	I2S->CTRLA.reg = I2S_CTRLA_SEREN0 |
    32c4:	384a      	subs	r0, #74	; 0x4a
    32c6:	7018      	strb	r0, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    32c8:	23c0      	movs	r3, #192	; 0xc0
    32ca:	005b      	lsls	r3, r3, #1
    32cc:	50d1      	str	r1, [r2, r3]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    32ce:	6011      	str	r1, [r2, #0]
	// Setup audio
	i2c_init();			
	i2s_init();	

	//setup sensors
	OPT3001_init();	
    32d0:	4b32      	ldr	r3, [pc, #200]	; (339c <boardSetup+0x3a0>)
    32d2:	4798      	blx	r3
	Si7021_init();
    32d4:	4b32      	ldr	r3, [pc, #200]	; (33a0 <boardSetup+0x3a4>)
    32d6:	4798      	blx	r3
	MMA8491Q_init();
    32d8:	4b32      	ldr	r3, [pc, #200]	; (33a4 <boardSetup+0x3a8>)
    32da:	4798      	blx	r3
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
    32dc:	6a22      	ldr	r2, [r4, #32]
    32de:	2380      	movs	r3, #128	; 0x80
    32e0:	011b      	lsls	r3, r3, #4
    32e2:	4313      	orrs	r3, r2
    32e4:	6223      	str	r3, [r4, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC3_GCLK_ID) |
    32e6:	4a30      	ldr	r2, [pc, #192]	; (33a8 <boardSetup+0x3ac>)
    32e8:	4b11      	ldr	r3, [pc, #68]	; (3330 <boardSetup+0x334>)
    32ea:	805a      	strh	r2, [r3, #2]
	TC3->COUNT16.CTRLA.reg =
    32ec:	4b2f      	ldr	r3, [pc, #188]	; (33ac <boardSetup+0x3b0>)
    32ee:	22a9      	movs	r2, #169	; 0xa9
    32f0:	0152      	lsls	r2, r2, #5
    32f2:	801a      	strh	r2, [r3, #0]
	TC3->COUNT16.COUNT.reg = 0;
    32f4:	2200      	movs	r2, #0
    32f6:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = 32u; // Count to 8 to get 100us
    32f8:	2120      	movs	r1, #32
    32fa:	8319      	strh	r1, [r3, #24]
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    32fc:	881a      	ldrh	r2, [r3, #0]
    32fe:	2002      	movs	r0, #2
    3300:	4302      	orrs	r2, r0
    3302:	b292      	uxth	r2, r2
    3304:	801a      	strh	r2, [r3, #0]
	sensor_timer_Init();
	

	REG_PORT_DIRSET0 = PORT_PA05;
    3306:	4815      	ldr	r0, [pc, #84]	; (335c <boardSetup+0x360>)
    3308:	6001      	str	r1, [r0, #0]
	REG_PORT_OUTCLR0 = PORT_PA05;
    330a:	4b29      	ldr	r3, [pc, #164]	; (33b0 <boardSetup+0x3b4>)
    330c:	6019      	str	r1, [r3, #0]
	//REG_PORT_OUTSET0 = PORT_PA05;
	REG_PORT_DIRSET0 = PORT_PA04;
    330e:	2210      	movs	r2, #16
    3310:	6002      	str	r2, [r0, #0]
	REG_PORT_OUTCLR0 = PORT_PA04;
    3312:	601a      	str	r2, [r3, #0]
	//REG_PORT_OUTSET0 = PORT_PA04;
	REG_PORT_DIRSET1 = PORT_PB09;
    3314:	2380      	movs	r3, #128	; 0x80
    3316:	009b      	lsls	r3, r3, #2
    3318:	4a0a      	ldr	r2, [pc, #40]	; (3344 <boardSetup+0x348>)
    331a:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR1 = PORT_PB09;
    331c:	4a11      	ldr	r2, [pc, #68]	; (3364 <boardSetup+0x368>)
    331e:	6013      	str	r3, [r2, #0]
	//REG_PORT_OUTSET1 = PORT_PB09;

	// Start USB stack to authorize VBus monitoring
	//udc_start();		
}
    3320:	bc0c      	pop	{r2, r3}
    3322:	4690      	mov	r8, r2
    3324:	4699      	mov	r9, r3
    3326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3328:	40000400 	.word	0x40000400
    332c:	00004015 	.word	0x00004015
    3330:	40000c00 	.word	0x40000c00
    3334:	000073f8 	.word	0x000073f8
    3338:	42000c00 	.word	0x42000c00
    333c:	41004400 	.word	0x41004400
    3340:	00002d01 	.word	0x00002d01
    3344:	41004488 	.word	0x41004488
    3348:	41004498 	.word	0x41004498
    334c:	40000800 	.word	0x40000800
    3350:	000004e1 	.word	0x000004e1
    3354:	0000461c 	.word	0x0000461c
    3358:	42003000 	.word	0x42003000
    335c:	41004408 	.word	0x41004408
    3360:	41004418 	.word	0x41004418
    3364:	41004494 	.word	0x41004494
    3368:	000005dc 	.word	0x000005dc
    336c:	00004005 	.word	0x00004005
    3370:	40001800 	.word	0x40001800
    3374:	40001818 	.word	0x40001818
    3378:	ffff8fff 	.word	0xffff8fff
    337c:	00002e71 	.word	0x00002e71
    3380:	e000e100 	.word	0xe000e100
    3384:	00004216 	.word	0x00004216
    3388:	42001000 	.word	0x42001000
    338c:	00300016 	.word	0x00300016
    3390:	42005000 	.word	0x42005000
    3394:	000011a7 	.word	0x000011a7
    3398:	00000581 	.word	0x00000581
    339c:	000037c1 	.word	0x000037c1
    33a0:	00004bb1 	.word	0x00004bb1
    33a4:	000035a5 	.word	0x000035a5
    33a8:	0000461b 	.word	0x0000461b
    33ac:	42002c00 	.word	0x42002c00
    33b0:	41004414 	.word	0x41004414

000033b4 <EIC_Handler>:

void EIC_Handler(void)
{
    33b4:	b510      	push	{r4, lr}
	// Check if right interrupt?
#ifdef PCB_V2
	REG_PORT_OUTSET1 = PORT_PB09;
    33b6:	2480      	movs	r4, #128	; 0x80
    33b8:	00a4      	lsls	r4, r4, #2
    33ba:	4b06      	ldr	r3, [pc, #24]	; (33d4 <EIC_Handler+0x20>)
    33bc:	601c      	str	r4, [r3, #0]
#endif
	
	// Call radio callback
	callbackExtInterrupt();
    33be:	4b06      	ldr	r3, [pc, #24]	; (33d8 <EIC_Handler+0x24>)
    33c0:	4798      	blx	r3
	
		
#ifdef PCB_V2
	REG_PORT_OUTCLR1 = PORT_PB09;
    33c2:	4b06      	ldr	r3, [pc, #24]	; (33dc <EIC_Handler+0x28>)
    33c4:	601c      	str	r4, [r3, #0]

#endif
	
	// Handle interrupt
	EIC->INTFLAG.bit.EXTINT5 = 1;
    33c6:	4a06      	ldr	r2, [pc, #24]	; (33e0 <EIC_Handler+0x2c>)
    33c8:	6911      	ldr	r1, [r2, #16]
    33ca:	2320      	movs	r3, #32
    33cc:	430b      	orrs	r3, r1
    33ce:	6113      	str	r3, [r2, #16]
}
    33d0:	bd10      	pop	{r4, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	41004498 	.word	0x41004498
    33d8:	000040fd 	.word	0x000040fd
    33dc:	41004494 	.word	0x41004494
    33e0:	40001800 	.word	0x40001800

000033e4 <I2S_Handler>:

// Audio
uint32_t i2s_value;

//i2s handler: triggers every 1/(48000*2) seconds. When ready to tx or rx 1 channel
void I2S_Handler(void){
    33e4:	b510      	push	{r4, lr}
	
#ifdef PCB_V2
	REG_PORT_OUTSET1 = PORT_PB11;
    33e6:	2280      	movs	r2, #128	; 0x80
    33e8:	0112      	lsls	r2, r2, #4
    33ea:	4b0c      	ldr	r3, [pc, #48]	; (341c <I2S_Handler+0x38>)
    33ec:	601a      	str	r2, [r3, #0]
}

inline uint32_t i2s_read(void)
{
	uint32_t sample;
	while(I2S->INTFLAG.bit.RXRDY1 == 0);
    33ee:	4b0c      	ldr	r3, [pc, #48]	; (3420 <I2S_Handler+0x3c>)
    33f0:	8a9b      	ldrh	r3, [r3, #20]
    33f2:	079b      	lsls	r3, r3, #30
    33f4:	d5fb      	bpl.n	33ee <I2S_Handler+0xa>
	sample = I2S->DATA[1].reg;
    33f6:	4b0a      	ldr	r3, [pc, #40]	; (3420 <I2S_Handler+0x3c>)
    33f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
	//NVIC_DisableIRQ(USB_IRQn);
	
	//if(I2S->INTFLAG.bit.RXRDY1 == 1 || I2S->INTFLAG.bit.TXRDY0 == 1)
	{
			
		i2s_value = i2s_read();//read value from CODEC
    33fa:	4b0a      	ldr	r3, [pc, #40]	; (3424 <I2S_Handler+0x40>)
    33fc:	6018      	str	r0, [r3, #0]
	//}
	
	//if(I2S->INTFLAG.bit.TXRDY0 == 1){
	//{
			
		i2s_write(callbackAudioSample(i2s_value)); //write sample to Codec
    33fe:	4b0a      	ldr	r3, [pc, #40]	; (3428 <I2S_Handler+0x44>)
    3400:	4798      	blx	r3
	while(I2S->INTFLAG.bit.TXRDY0 == 0);
    3402:	4b07      	ldr	r3, [pc, #28]	; (3420 <I2S_Handler+0x3c>)
    3404:	8a9b      	ldrh	r3, [r3, #20]
    3406:	05db      	lsls	r3, r3, #23
    3408:	d5fb      	bpl.n	3402 <I2S_Handler+0x1e>
	I2S->DATA[0].reg = sample;
    340a:	4b05      	ldr	r3, [pc, #20]	; (3420 <I2S_Handler+0x3c>)
    340c:	6318      	str	r0, [r3, #48]	; 0x30
		write_buf = (((hirx<<24)) | lorx<<16);//create i2s buffer [31:24 = hirx] [23:16 = lorx] [15:0 = 0]
		i2s_write(write_buf);//write sample to Codec*/
	}
	
	//NVIC_EnableIRQ(USB_IRQn);
	I2S->INTFLAG.bit.RXRDY1;
    340e:	8a9a      	ldrh	r2, [r3, #20]
	I2S->INTFLAG.bit.TXRDY0;
    3410:	8a9b      	ldrh	r3, [r3, #20]
		REG_PORT_OUTSET0 = PORT_PA05;
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0;
	}
#ifdef PCB_V2
	REG_PORT_OUTCLR1 = PORT_PB11;
    3412:	2280      	movs	r2, #128	; 0x80
    3414:	0112      	lsls	r2, r2, #4
    3416:	4b05      	ldr	r3, [pc, #20]	; (342c <I2S_Handler+0x48>)
    3418:	601a      	str	r2, [r3, #0]
#endif
}
    341a:	bd10      	pop	{r4, pc}
    341c:	41004498 	.word	0x41004498
    3420:	42005000 	.word	0x42005000
    3424:	20000b50 	.word	0x20000b50
    3428:	00002879 	.word	0x00002879
    342c:	41004494 	.word	0x41004494

00003430 <usbIsAvailable>:

// USB stdio
char std_buf[128];

bool usbIsAvailable(void)
{
    3430:	b510      	push	{r4, lr}
	//return udi_cdc_is_rx_ready();
	return usb_bytes_available() > 0;
    3432:	4b03      	ldr	r3, [pc, #12]	; (3440 <usbIsAvailable+0x10>)
    3434:	4798      	blx	r3
    3436:	1e43      	subs	r3, r0, #1
    3438:	4198      	sbcs	r0, r3
    343a:	b2c0      	uxtb	r0, r0
	//return 0;
}
    343c:	bd10      	pop	{r4, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	00004e81 	.word	0x00004e81

00003444 <usbBytesAvailable>:

uint16_t usbBytesAvailable(void)
{
    3444:	b510      	push	{r4, lr}
	//return udi_cdc_is_rx_ready();
	return usb_bytes_available();
    3446:	4b01      	ldr	r3, [pc, #4]	; (344c <usbBytesAvailable+0x8>)
    3448:	4798      	blx	r3
	//return 0;
}
    344a:	bd10      	pop	{r4, pc}
    344c:	00004e81 	.word	0x00004e81

00003450 <usbGet>:

uint8_t usbGet(void)
{
    3450:	b510      	push	{r4, lr}
    3452:	b082      	sub	sp, #8
	uint8_t c;
	//return udi_cdc_getc();
	usb_get(&c, 1);
    3454:	466b      	mov	r3, sp
    3456:	1ddc      	adds	r4, r3, #7
    3458:	2101      	movs	r1, #1
    345a:	0020      	movs	r0, r4
    345c:	4b02      	ldr	r3, [pc, #8]	; (3468 <usbGet+0x18>)
    345e:	4798      	blx	r3
	return c;
    3460:	7820      	ldrb	r0, [r4, #0]
	//return 0;
}
    3462:	b002      	add	sp, #8
    3464:	bd10      	pop	{r4, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	00004eb9 	.word	0x00004eb9

0000346c <usbPrintf>:
	//udi_cdc_putc(c);
	usb_put(&c, 1);
}

void usbPrintf(const char *fmt, ...)
{
    346c:	b40f      	push	{r0, r1, r2, r3}
    346e:	b510      	push	{r4, lr}
    3470:	b082      	sub	sp, #8
    3472:	aa04      	add	r2, sp, #16
    3474:	ca02      	ldmia	r2!, {r1}
	char *i = std_buf;
	
	va_list va;
	va_start(va, fmt);
    3476:	9201      	str	r2, [sp, #4]
	
	vsprintf(std_buf, fmt, va);
    3478:	4c07      	ldr	r4, [pc, #28]	; (3498 <usbPrintf+0x2c>)
    347a:	0020      	movs	r0, r4
    347c:	4b07      	ldr	r3, [pc, #28]	; (349c <usbPrintf+0x30>)
    347e:	4798      	blx	r3
	
	usb_put(std_buf, strlen(std_buf));
    3480:	0020      	movs	r0, r4
    3482:	4b07      	ldr	r3, [pc, #28]	; (34a0 <usbPrintf+0x34>)
    3484:	4798      	blx	r3
    3486:	b281      	uxth	r1, r0
    3488:	0020      	movs	r0, r4
    348a:	4b06      	ldr	r3, [pc, #24]	; (34a4 <usbPrintf+0x38>)
    348c:	4798      	blx	r3
		usb_put(i, 1);
		i++;
	}*/
	
	va_end(va);
}
    348e:	b002      	add	sp, #8
    3490:	bc10      	pop	{r4}
    3492:	bc08      	pop	{r3}
    3494:	b004      	add	sp, #16
    3496:	4718      	bx	r3
    3498:	200006bc 	.word	0x200006bc
    349c:	000058b1 	.word	0x000058b1
    34a0:	00005871 	.word	0x00005871
    34a4:	00004f05 	.word	0x00004f05

000034a8 <usbParseInt>:

uint32_t usbParseInt()
{ 
    34a8:	b510      	push	{r4, lr}
    34aa:	b082      	sub	sp, #8
	unsigned char c=0;
    34ac:	466b      	mov	r3, sp
    34ae:	1dd8      	adds	r0, r3, #7
    34b0:	2300      	movs	r3, #0
    34b2:	7003      	strb	r3, [r0, #0]
	unsigned char *p;
	int number;
	
	p = std_buf;
	//c = udi_cdc_getc();
	usb_get(&c, 1);
    34b4:	2101      	movs	r1, #1
    34b6:	4b0e      	ldr	r3, [pc, #56]	; (34f0 <usbParseInt+0x48>)
    34b8:	4798      	blx	r3
	p = std_buf;
    34ba:	4c0e      	ldr	r4, [pc, #56]	; (34f4 <usbParseInt+0x4c>)
	while(c>47 && c<58) // Only accept numbers
    34bc:	e006      	b.n	34cc <usbParseInt+0x24>
	{
		*p = c; p++;
    34be:	7022      	strb	r2, [r4, #0]
    34c0:	3401      	adds	r4, #1
		//c = udi_cdc_getc();
		usb_get(&c, 1);
    34c2:	2101      	movs	r1, #1
    34c4:	466b      	mov	r3, sp
    34c6:	1dd8      	adds	r0, r3, #7
    34c8:	4b09      	ldr	r3, [pc, #36]	; (34f0 <usbParseInt+0x48>)
    34ca:	4798      	blx	r3
	while(c>47 && c<58) // Only accept numbers
    34cc:	466b      	mov	r3, sp
    34ce:	79da      	ldrb	r2, [r3, #7]
    34d0:	0013      	movs	r3, r2
    34d2:	3b30      	subs	r3, #48	; 0x30
    34d4:	b2db      	uxtb	r3, r3
    34d6:	2b09      	cmp	r3, #9
    34d8:	d9f1      	bls.n	34be <usbParseInt+0x16>
	}
	*p = 0;
    34da:	2300      	movs	r3, #0
    34dc:	7023      	strb	r3, [r4, #0]
	sscanf(std_buf, "%d", &number);
    34de:	466a      	mov	r2, sp
    34e0:	4905      	ldr	r1, [pc, #20]	; (34f8 <usbParseInt+0x50>)
    34e2:	4804      	ldr	r0, [pc, #16]	; (34f4 <usbParseInt+0x4c>)
    34e4:	4b05      	ldr	r3, [pc, #20]	; (34fc <usbParseInt+0x54>)
    34e6:	4798      	blx	r3
	
	return number;
}
    34e8:	9800      	ldr	r0, [sp, #0]
    34ea:	b002      	add	sp, #8
    34ec:	bd10      	pop	{r4, pc}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	00004eb9 	.word	0x00004eb9
    34f4:	200006bc 	.word	0x200006bc
    34f8:	00007424 	.word	0x00007424
    34fc:	0000581d 	.word	0x0000581d

00003500 <wdSetup>:
	TC5->COUNT16.CC[0].reg = ticks;
	
	TC5->COUNT16.INTENSET.reg = TC_INTENSET_MC0; // Enable interrupt
	NVIC_EnableIRQ(TC5_IRQn); 
#endif	
}
    3500:	4770      	bx	lr

00003502 <wdReset>:
void wdReset()
{
#ifdef WD_ENABLE	
	TC5->COUNT16.COUNT.reg = 0;
#endif
}
    3502:	4770      	bx	lr

00003504 <wdEnable>:
void wdEnable()
{
#ifdef WD_ENABLE
	TC5->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
#endif
}
    3504:	4770      	bx	lr

00003506 <wdDisable>:
void wdDisable()
{
#ifdef WD_ENABLE	
	TC5->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
#endif
}
    3506:	4770      	bx	lr

00003508 <main>:
		usb_put(std_buffer, size);
	}	
}*/

int main(void)
{
    3508:	b510      	push	{r4, lr}
	// Setup clocks
    clock_init_crystal(GCLK_SYSTEM, GCLK_32K);
    350a:	2105      	movs	r1, #5
    350c:	2000      	movs	r0, #0
    350e:	4b12      	ldr	r3, [pc, #72]	; (3558 <main+0x50>)
    3510:	4798      	blx	r3
	
	// Setup board
	boardSetup();	
    3512:	4b12      	ldr	r3, [pc, #72]	; (355c <main+0x54>)
    3514:	4798      	blx	r3
	
	// Enable USB pins
	PORT->Group[0].PINCFG[24].bit.PMUXEN = 1;
    3516:	4b12      	ldr	r3, [pc, #72]	; (3560 <main+0x58>)
    3518:	2258      	movs	r2, #88	; 0x58
    351a:	5c99      	ldrb	r1, [r3, r2]
    351c:	2001      	movs	r0, #1
    351e:	4301      	orrs	r1, r0
    3520:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[25].bit.PMUXEN = 1;
    3522:	2159      	movs	r1, #89	; 0x59
    3524:	5c5a      	ldrb	r2, [r3, r1]
    3526:	4302      	orrs	r2, r0
    3528:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[12].reg = 0x66;
    352a:	310d      	adds	r1, #13
    352c:	223c      	movs	r2, #60	; 0x3c
    352e:	5499      	strb	r1, [r3, r2]
	
	REG_PORT_DIRSET1 = PORT_PB30;
    3530:	2380      	movs	r3, #128	; 0x80
    3532:	05db      	lsls	r3, r3, #23
    3534:	4a0b      	ldr	r2, [pc, #44]	; (3564 <main+0x5c>)
    3536:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR1 = PORT_PB30;
    3538:	4a0b      	ldr	r2, [pc, #44]	; (3568 <main+0x60>)
    353a:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB30;
    353c:	4a0b      	ldr	r2, [pc, #44]	; (356c <main+0x64>)
    353e:	6013      	str	r3, [r2, #0]

	usb_init();
    3540:	4b0b      	ldr	r3, [pc, #44]	; (3570 <main+0x68>)
    3542:	4798      	blx	r3
	usb_setup_fifos();
    3544:	4b0b      	ldr	r3, [pc, #44]	; (3574 <main+0x6c>)
    3546:	4798      	blx	r3
	usb_attach();	
    3548:	4b0b      	ldr	r3, [pc, #44]	; (3578 <main+0x70>)
    354a:	4798      	blx	r3
	
	// Startup radio
	appInit();	
    354c:	4b0b      	ldr	r3, [pc, #44]	; (357c <main+0x74>)
    354e:	4798      	blx	r3

	while (true)
		handleUSB();
    3550:	4b0b      	ldr	r3, [pc, #44]	; (3580 <main+0x78>)
    3552:	4798      	blx	r3
    3554:	e7fc      	b.n	3550 <main+0x48>
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	00002a5d 	.word	0x00002a5d
    355c:	00002ffd 	.word	0x00002ffd
    3560:	41004400 	.word	0x41004400
    3564:	41004488 	.word	0x41004488
    3568:	41004494 	.word	0x41004494
    356c:	41004498 	.word	0x41004498
    3570:	0000463d 	.word	0x0000463d
    3574:	00004e3d 	.word	0x00004e3d
    3578:	00004905 	.word	0x00004905
    357c:	00001545 	.word	0x00001545
    3580:	00001951 	.word	0x00001951

00003584 <MMA8491Q_enable>:

static uint8_t MMA8491Q_write_buffer[MMA8491Q_DATA_LENGTH] ;
static uint8_t MMA8491Q_read_buffer[MMA8491Q_DATA_LENGTH];

void MMA8491Q_enable(){
	REG_PORT_OUTSET1 = PORT_PB11;
    3584:	2280      	movs	r2, #128	; 0x80
    3586:	0112      	lsls	r2, r2, #4
    3588:	4b01      	ldr	r3, [pc, #4]	; (3590 <MMA8491Q_enable+0xc>)
    358a:	601a      	str	r2, [r3, #0]
}
    358c:	4770      	bx	lr
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	41004498 	.word	0x41004498

00003594 <MMA8491Q_disable>:

void MMA8491Q_disable(){
	REG_PORT_OUTCLR1 = PORT_PB11;
    3594:	2280      	movs	r2, #128	; 0x80
    3596:	0112      	lsls	r2, r2, #4
    3598:	4b01      	ldr	r3, [pc, #4]	; (35a0 <MMA8491Q_disable+0xc>)
    359a:	601a      	str	r2, [r3, #0]
}
    359c:	4770      	bx	lr
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	41004494 	.word	0x41004494

000035a4 <MMA8491Q_init>:

void MMA8491Q_init(){
	REG_PORT_DIRSET1 = PORT_PB11;
    35a4:	2380      	movs	r3, #128	; 0x80
    35a6:	011b      	lsls	r3, r3, #4
    35a8:	4a02      	ldr	r2, [pc, #8]	; (35b4 <MMA8491Q_init+0x10>)
    35aa:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTCLR1 = PORT_PB11;	
    35ac:	4a02      	ldr	r2, [pc, #8]	; (35b8 <MMA8491Q_init+0x14>)
    35ae:	6013      	str	r3, [r2, #0]
}
    35b0:	4770      	bx	lr
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	41004488 	.word	0x41004488
    35b8:	41004494 	.word	0x41004494

000035bc <MMA8491Q_read>:
}

//-----------------------------------------------------------------------------
inline bool i2c_read(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    35bc:	22ab      	movs	r2, #171	; 0xab
    35be:	4b1f      	ldr	r3, [pc, #124]	; (363c <MMA8491Q_read+0x80>)
    35c0:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    35c2:	4b1e      	ldr	r3, [pc, #120]	; (363c <MMA8491Q_read+0x80>)
    35c4:	7e1b      	ldrb	r3, [r3, #24]
    35c6:	079b      	lsls	r3, r3, #30
    35c8:	d5fb      	bpl.n	35c2 <MMA8491Q_read+0x6>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    35ca:	4b1c      	ldr	r3, [pc, #112]	; (363c <MMA8491Q_read+0x80>)
    35cc:	8b5b      	ldrh	r3, [r3, #26]
    35ce:	075b      	lsls	r3, r3, #29
    35d0:	d507      	bpl.n	35e2 <MMA8491Q_read+0x26>
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    35d2:	4a1a      	ldr	r2, [pc, #104]	; (363c <MMA8491Q_read+0x80>)
    35d4:	6851      	ldr	r1, [r2, #4]
    35d6:	23c0      	movs	r3, #192	; 0xc0
    35d8:	029b      	lsls	r3, r3, #10
    35da:	430b      	orrs	r3, r1
    35dc:	6053      	str	r3, [r2, #4]

uint8_t* MMA8491Q_read(){
	
	i2c_read(MMA8491Q_read_buffer,2,MMA8491Q_SLAVE_ADDR);
	return MMA8491Q_read_buffer;
}
    35de:	4818      	ldr	r0, [pc, #96]	; (3640 <MMA8491Q_read+0x84>)
    35e0:	4770      	bx	lr
		//dbg_log("I2C: RXNACK during read (address)\r\n");
		return false;
	}

	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    35e2:	4a16      	ldr	r2, [pc, #88]	; (363c <MMA8491Q_read+0x80>)
    35e4:	6853      	ldr	r3, [r2, #4]
    35e6:	4917      	ldr	r1, [pc, #92]	; (3644 <MMA8491Q_read+0x88>)
    35e8:	400b      	ands	r3, r1
    35ea:	6053      	str	r3, [r2, #4]

	for (int i = 0; i < size-1; i++)
    35ec:	2200      	movs	r2, #0
    35ee:	2a00      	cmp	r2, #0
    35f0:	dd18      	ble.n	3624 <MMA8491Q_read+0x68>
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
	}

	if (size)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    35f2:	4b12      	ldr	r3, [pc, #72]	; (363c <MMA8491Q_read+0x80>)
    35f4:	6859      	ldr	r1, [r3, #4]
    35f6:	2280      	movs	r2, #128	; 0x80
    35f8:	02d2      	lsls	r2, r2, #11
    35fa:	430a      	orrs	r2, r1
    35fc:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    35fe:	6859      	ldr	r1, [r3, #4]
    3600:	22c0      	movs	r2, #192	; 0xc0
    3602:	0292      	lsls	r2, r2, #10
    3604:	430a      	orrs	r2, r1
    3606:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    3608:	2228      	movs	r2, #40	; 0x28
    360a:	5c99      	ldrb	r1, [r3, r2]
    360c:	4a0c      	ldr	r2, [pc, #48]	; (3640 <MMA8491Q_read+0x84>)
    360e:	7051      	strb	r1, [r2, #1]
	}
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    3610:	8b5a      	ldrh	r2, [r3, #26]
    3612:	2110      	movs	r1, #16
    3614:	430a      	orrs	r2, r1
    3616:	b292      	uxth	r2, r2
    3618:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    361a:	4b08      	ldr	r3, [pc, #32]	; (363c <MMA8491Q_read+0x80>)
    361c:	69db      	ldr	r3, [r3, #28]
    361e:	2b00      	cmp	r3, #0
    3620:	d1fb      	bne.n	361a <MMA8491Q_read+0x5e>
    3622:	e7dc      	b.n	35de <MMA8491Q_read+0x22>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    3624:	2328      	movs	r3, #40	; 0x28
    3626:	4905      	ldr	r1, [pc, #20]	; (363c <MMA8491Q_read+0x80>)
    3628:	5cc9      	ldrb	r1, [r1, r3]
    362a:	4b05      	ldr	r3, [pc, #20]	; (3640 <MMA8491Q_read+0x84>)
    362c:	5499      	strb	r1, [r3, r2]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    362e:	4b03      	ldr	r3, [pc, #12]	; (363c <MMA8491Q_read+0x80>)
    3630:	7e1b      	ldrb	r3, [r3, #24]
    3632:	079b      	lsls	r3, r3, #30
    3634:	d5fb      	bpl.n	362e <MMA8491Q_read+0x72>
	for (int i = 0; i < size-1; i++)
    3636:	3201      	adds	r2, #1
    3638:	e7d9      	b.n	35ee <MMA8491Q_read+0x32>
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	42001000 	.word	0x42001000
    3640:	200002a0 	.word	0x200002a0
    3644:	fffbffff 	.word	0xfffbffff

00003648 <MMA8491Q_command>:

}

void MMA8491Q_command(uint8_t command){
	
	MMA8491Q_write_buffer[0] = command;
    3648:	4b1a      	ldr	r3, [pc, #104]	; (36b4 <MMA8491Q_command+0x6c>)
    364a:	7118      	strb	r0, [r3, #4]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    364c:	22aa      	movs	r2, #170	; 0xaa
    364e:	4b1a      	ldr	r3, [pc, #104]	; (36b8 <MMA8491Q_command+0x70>)
    3650:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    3652:	4b19      	ldr	r3, [pc, #100]	; (36b8 <MMA8491Q_command+0x70>)
    3654:	7e1b      	ldrb	r3, [r3, #24]
    3656:	07db      	lsls	r3, r3, #31
    3658:	d5fb      	bpl.n	3652 <MMA8491Q_command+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    365a:	4b17      	ldr	r3, [pc, #92]	; (36b8 <MMA8491Q_command+0x70>)
    365c:	8b5b      	ldrh	r3, [r3, #26]
    365e:	075b      	lsls	r3, r3, #29
    3660:	d409      	bmi.n	3676 <MMA8491Q_command+0x2e>
    3662:	2200      	movs	r2, #0
	for (int i = 0; i < size; i++)
    3664:	2a00      	cmp	r2, #0
    3666:	dd0d      	ble.n	3684 <MMA8491Q_command+0x3c>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3668:	4a13      	ldr	r2, [pc, #76]	; (36b8 <MMA8491Q_command+0x70>)
    366a:	6851      	ldr	r1, [r2, #4]
    366c:	23c0      	movs	r3, #192	; 0xc0
    366e:	029b      	lsls	r3, r3, #10
    3670:	430b      	orrs	r3, r1
    3672:	6053      	str	r3, [r2, #4]
	i2c_write(MMA8491Q_write_buffer,1,MMA8491Q_SLAVE_ADDR);
}
    3674:	4770      	bx	lr
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3676:	4a10      	ldr	r2, [pc, #64]	; (36b8 <MMA8491Q_command+0x70>)
    3678:	6851      	ldr	r1, [r2, #4]
    367a:	23c0      	movs	r3, #192	; 0xc0
    367c:	029b      	lsls	r3, r3, #10
    367e:	430b      	orrs	r3, r1
    3680:	6053      	str	r3, [r2, #4]
    3682:	e7f7      	b.n	3674 <MMA8491Q_command+0x2c>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    3684:	4b0b      	ldr	r3, [pc, #44]	; (36b4 <MMA8491Q_command+0x6c>)
    3686:	189b      	adds	r3, r3, r2
    3688:	7918      	ldrb	r0, [r3, #4]
    368a:	2328      	movs	r3, #40	; 0x28
    368c:	490a      	ldr	r1, [pc, #40]	; (36b8 <MMA8491Q_command+0x70>)
    368e:	54c8      	strb	r0, [r1, r3]
 		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    3690:	4b09      	ldr	r3, [pc, #36]	; (36b8 <MMA8491Q_command+0x70>)
    3692:	7e1b      	ldrb	r3, [r3, #24]
    3694:	07db      	lsls	r3, r3, #31
    3696:	d5fb      	bpl.n	3690 <MMA8491Q_command+0x48>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3698:	4b07      	ldr	r3, [pc, #28]	; (36b8 <MMA8491Q_command+0x70>)
    369a:	8b5b      	ldrh	r3, [r3, #26]
    369c:	075b      	lsls	r3, r3, #29
    369e:	d401      	bmi.n	36a4 <MMA8491Q_command+0x5c>
	for (int i = 0; i < size; i++)
    36a0:	3201      	adds	r2, #1
    36a2:	e7df      	b.n	3664 <MMA8491Q_command+0x1c>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    36a4:	4a04      	ldr	r2, [pc, #16]	; (36b8 <MMA8491Q_command+0x70>)
    36a6:	6851      	ldr	r1, [r2, #4]
    36a8:	23c0      	movs	r3, #192	; 0xc0
    36aa:	029b      	lsls	r3, r3, #10
    36ac:	430b      	orrs	r3, r1
    36ae:	6053      	str	r3, [r2, #4]
    36b0:	e7e0      	b.n	3674 <MMA8491Q_command+0x2c>
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	200002a0 	.word	0x200002a0
    36b8:	42001000 	.word	0x42001000

000036bc <OPT3001_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    36bc:	2289      	movs	r2, #137	; 0x89
    36be:	4b1f      	ldr	r3, [pc, #124]	; (373c <OPT3001_read+0x80>)
    36c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    36c2:	4b1e      	ldr	r3, [pc, #120]	; (373c <OPT3001_read+0x80>)
    36c4:	7e1b      	ldrb	r3, [r3, #24]
    36c6:	079b      	lsls	r3, r3, #30
    36c8:	d5fb      	bpl.n	36c2 <OPT3001_read+0x6>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    36ca:	4b1c      	ldr	r3, [pc, #112]	; (373c <OPT3001_read+0x80>)
    36cc:	8b5b      	ldrh	r3, [r3, #26]
    36ce:	075b      	lsls	r3, r3, #29
    36d0:	d406      	bmi.n	36e0 <OPT3001_read+0x24>
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    36d2:	4a1a      	ldr	r2, [pc, #104]	; (373c <OPT3001_read+0x80>)
    36d4:	6853      	ldr	r3, [r2, #4]
    36d6:	491a      	ldr	r1, [pc, #104]	; (3740 <OPT3001_read+0x84>)
    36d8:	400b      	ands	r3, r1
    36da:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < size-1; i++)
    36dc:	2200      	movs	r2, #0
    36de:	e010      	b.n	3702 <OPT3001_read+0x46>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    36e0:	4a16      	ldr	r2, [pc, #88]	; (373c <OPT3001_read+0x80>)
    36e2:	6851      	ldr	r1, [r2, #4]
    36e4:	23c0      	movs	r3, #192	; 0xc0
    36e6:	029b      	lsls	r3, r3, #10
    36e8:	430b      	orrs	r3, r1
    36ea:	6053      	str	r3, [r2, #4]
    36ec:	e023      	b.n	3736 <OPT3001_read+0x7a>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    36ee:	2328      	movs	r3, #40	; 0x28
    36f0:	4912      	ldr	r1, [pc, #72]	; (373c <OPT3001_read+0x80>)
    36f2:	5cc9      	ldrb	r1, [r1, r3]
    36f4:	4b13      	ldr	r3, [pc, #76]	; (3744 <OPT3001_read+0x88>)
    36f6:	5499      	strb	r1, [r3, r2]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    36f8:	4b10      	ldr	r3, [pc, #64]	; (373c <OPT3001_read+0x80>)
    36fa:	7e1b      	ldrb	r3, [r3, #24]
    36fc:	079b      	lsls	r3, r3, #30
    36fe:	d5fb      	bpl.n	36f8 <OPT3001_read+0x3c>
	for (int i = 0; i < size-1; i++)
    3700:	3201      	adds	r2, #1
    3702:	2a01      	cmp	r2, #1
    3704:	ddf3      	ble.n	36ee <OPT3001_read+0x32>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3706:	4b0d      	ldr	r3, [pc, #52]	; (373c <OPT3001_read+0x80>)
    3708:	6859      	ldr	r1, [r3, #4]
    370a:	2280      	movs	r2, #128	; 0x80
    370c:	02d2      	lsls	r2, r2, #11
    370e:	430a      	orrs	r2, r1
    3710:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3712:	6859      	ldr	r1, [r3, #4]
    3714:	22c0      	movs	r2, #192	; 0xc0
    3716:	0292      	lsls	r2, r2, #10
    3718:	430a      	orrs	r2, r1
    371a:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    371c:	2228      	movs	r2, #40	; 0x28
    371e:	5c99      	ldrb	r1, [r3, r2]
    3720:	4a08      	ldr	r2, [pc, #32]	; (3744 <OPT3001_read+0x88>)
    3722:	7091      	strb	r1, [r2, #2]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    3724:	8b5a      	ldrh	r2, [r3, #26]
    3726:	2110      	movs	r1, #16
    3728:	430a      	orrs	r2, r1
    372a:	b292      	uxth	r2, r2
    372c:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    372e:	4b03      	ldr	r3, [pc, #12]	; (373c <OPT3001_read+0x80>)
    3730:	69db      	ldr	r3, [r3, #28]
    3732:	2b00      	cmp	r3, #0
    3734:	d1fb      	bne.n	372e <OPT3001_read+0x72>
//Reads the register that was last written to
uint8_t* OPT3001_read(){
	
	i2c_read(OPT3001_read_buffer, 3, OPT3001_SLAVE_ADDR);
	return OPT3001_read_buffer;
}
    3736:	4803      	ldr	r0, [pc, #12]	; (3744 <OPT3001_read+0x88>)
    3738:	4770      	bx	lr
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	42001000 	.word	0x42001000
    3740:	fffbffff 	.word	0xfffbffff
    3744:	200002a8 	.word	0x200002a8

00003748 <OPT3001_write>:

void OPT3001_write(uint8_t reg, uint8_t byte1, uint8_t byte2){
	
	OPT3001_write_buffer[0] = reg;
    3748:	4b1b      	ldr	r3, [pc, #108]	; (37b8 <OPT3001_write+0x70>)
    374a:	7118      	strb	r0, [r3, #4]
	OPT3001_write_buffer[1] = byte1;
    374c:	7159      	strb	r1, [r3, #5]
	OPT3001_write_buffer[2] = byte2;
    374e:	719a      	strb	r2, [r3, #6]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    3750:	2288      	movs	r2, #136	; 0x88
    3752:	4b1a      	ldr	r3, [pc, #104]	; (37bc <OPT3001_write+0x74>)
    3754:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    3756:	4b19      	ldr	r3, [pc, #100]	; (37bc <OPT3001_write+0x74>)
    3758:	7e1b      	ldrb	r3, [r3, #24]
    375a:	07db      	lsls	r3, r3, #31
    375c:	d5fb      	bpl.n	3756 <OPT3001_write+0xe>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    375e:	4b17      	ldr	r3, [pc, #92]	; (37bc <OPT3001_write+0x74>)
    3760:	8b5b      	ldrh	r3, [r3, #26]
    3762:	075b      	lsls	r3, r3, #29
    3764:	d412      	bmi.n	378c <OPT3001_write+0x44>
    3766:	2200      	movs	r2, #0
	for (int i = 0; i < size; i++)
    3768:	2a02      	cmp	r2, #2
    376a:	dc1d      	bgt.n	37a8 <OPT3001_write+0x60>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    376c:	4b12      	ldr	r3, [pc, #72]	; (37b8 <OPT3001_write+0x70>)
    376e:	189b      	adds	r3, r3, r2
    3770:	7918      	ldrb	r0, [r3, #4]
    3772:	2328      	movs	r3, #40	; 0x28
    3774:	4911      	ldr	r1, [pc, #68]	; (37bc <OPT3001_write+0x74>)
    3776:	54c8      	strb	r0, [r1, r3]
 		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    3778:	4b10      	ldr	r3, [pc, #64]	; (37bc <OPT3001_write+0x74>)
    377a:	7e1b      	ldrb	r3, [r3, #24]
    377c:	07db      	lsls	r3, r3, #31
    377e:	d5fb      	bpl.n	3778 <OPT3001_write+0x30>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3780:	4b0e      	ldr	r3, [pc, #56]	; (37bc <OPT3001_write+0x74>)
    3782:	8b5b      	ldrh	r3, [r3, #26]
    3784:	075b      	lsls	r3, r3, #29
    3786:	d408      	bmi.n	379a <OPT3001_write+0x52>
	for (int i = 0; i < size; i++)
    3788:	3201      	adds	r2, #1
    378a:	e7ed      	b.n	3768 <OPT3001_write+0x20>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    378c:	4a0b      	ldr	r2, [pc, #44]	; (37bc <OPT3001_write+0x74>)
    378e:	6851      	ldr	r1, [r2, #4]
    3790:	23c0      	movs	r3, #192	; 0xc0
    3792:	029b      	lsls	r3, r3, #10
    3794:	430b      	orrs	r3, r1
    3796:	6053      	str	r3, [r2, #4]
    3798:	e00c      	b.n	37b4 <OPT3001_write+0x6c>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    379a:	4a08      	ldr	r2, [pc, #32]	; (37bc <OPT3001_write+0x74>)
    379c:	6851      	ldr	r1, [r2, #4]
    379e:	23c0      	movs	r3, #192	; 0xc0
    37a0:	029b      	lsls	r3, r3, #10
    37a2:	430b      	orrs	r3, r1
    37a4:	6053      	str	r3, [r2, #4]
    37a6:	e005      	b.n	37b4 <OPT3001_write+0x6c>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    37a8:	4a04      	ldr	r2, [pc, #16]	; (37bc <OPT3001_write+0x74>)
    37aa:	6851      	ldr	r1, [r2, #4]
    37ac:	23c0      	movs	r3, #192	; 0xc0
    37ae:	029b      	lsls	r3, r3, #10
    37b0:	430b      	orrs	r3, r1
    37b2:	6053      	str	r3, [r2, #4]
	
	i2c_write(OPT3001_write_buffer, 3, OPT3001_SLAVE_ADDR);

    37b4:	4770      	bx	lr
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	200002a8 	.word	0x200002a8
    37bc:	42001000 	.word	0x42001000

000037c0 <OPT3001_init>:
void OPT3001_init(){
    37c0:	b510      	push	{r4, lr}
	OPT3001_write(OPT3001_CONFIG,0xc4,0x10);
    37c2:	2210      	movs	r2, #16
    37c4:	21c4      	movs	r1, #196	; 0xc4
    37c6:	2001      	movs	r0, #1
    37c8:	4c03      	ldr	r4, [pc, #12]	; (37d8 <OPT3001_init+0x18>)
    37ca:	47a0      	blx	r4
	OPT3001_write(OPT3001_RESULT,0x00,0x00);
    37cc:	2200      	movs	r2, #0
    37ce:	2100      	movs	r1, #0
    37d0:	2000      	movs	r0, #0
    37d2:	47a0      	blx	r4
}
    37d4:	bd10      	pop	{r4, pc}
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	00003749 	.word	0x00003749

000037dc <sparkBIST>:
unsigned char sleepCfg;

void applySleepOffset(short offset);

bool sparkBIST(bool verbose)
{
    37dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37de:	0004      	movs	r4, r0
  unsigned char b;
  bool fail;

  disableExtInt();
    37e0:	4b7e      	ldr	r3, [pc, #504]	; (39dc <sparkBIST+0x200>)
    37e2:	4798      	blx	r3
  resetRadio();
    37e4:	4b7e      	ldr	r3, [pc, #504]	; (39e0 <sparkBIST+0x204>)
    37e6:	4798      	blx	r3
  
  // Test SPI
  if(verbose)
    37e8:	2c00      	cmp	r4, #0
    37ea:	d117      	bne.n	381c <sparkBIST+0x40>
	usbPrintf("SPI..");
  startSPI();
    37ec:	4b7d      	ldr	r3, [pc, #500]	; (39e4 <sparkBIST+0x208>)
    37ee:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    37f0:	2040      	movs	r0, #64	; 0x40
    37f2:	4d7d      	ldr	r5, [pc, #500]	; (39e8 <sparkBIST+0x20c>)
    37f4:	47a8      	blx	r5
    37f6:	2000      	movs	r0, #0
    37f8:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    37fa:	2041      	movs	r0, #65	; 0x41
    37fc:	47a8      	blx	r5
    37fe:	2000      	movs	r0, #0
    3800:	47a8      	blx	r5
  sendSPI(REG_PREAMBLEN); b = sendSPI(0x00);
    3802:	2033      	movs	r0, #51	; 0x33
    3804:	47a8      	blx	r5
    3806:	2000      	movs	r0, #0
    3808:	47a8      	blx	r5
    380a:	0005      	movs	r5, r0
  stopSPI();
    380c:	4b77      	ldr	r3, [pc, #476]	; (39ec <sparkBIST+0x210>)
    380e:	4798      	blx	r3
  if(b != 0x09)
    3810:	2d09      	cmp	r5, #9
    3812:	d00c      	beq.n	382e <sparkBIST+0x52>
  {
	if(verbose)
    3814:	2c00      	cmp	r4, #0
    3816:	d105      	bne.n	3824 <sparkBIST+0x48>
	  if(verbose)
		usbPrintf("OK\n");
  }

  return true;
}
    3818:	0020      	movs	r0, r4
    381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	usbPrintf("SPI..");
    381c:	4874      	ldr	r0, [pc, #464]	; (39f0 <sparkBIST+0x214>)
    381e:	4b75      	ldr	r3, [pc, #468]	; (39f4 <sparkBIST+0x218>)
    3820:	4798      	blx	r3
    3822:	e7e3      	b.n	37ec <sparkBIST+0x10>
		usbPrintf("FAIL\n");
    3824:	4874      	ldr	r0, [pc, #464]	; (39f8 <sparkBIST+0x21c>)
    3826:	4b73      	ldr	r3, [pc, #460]	; (39f4 <sparkBIST+0x218>)
    3828:	4798      	blx	r3
    return false;
    382a:	2400      	movs	r4, #0
    382c:	e7f4      	b.n	3818 <sparkBIST+0x3c>
	  if(verbose)
    382e:	2c00      	cmp	r4, #0
    3830:	d110      	bne.n	3854 <sparkBIST+0x78>
  if(verbose)
    3832:	2c00      	cmp	r4, #0
    3834:	d112      	bne.n	385c <sparkBIST+0x80>
  startSPI();
    3836:	4b6b      	ldr	r3, [pc, #428]	; (39e4 <sparkBIST+0x208>)
    3838:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x80);
    383a:	2040      	movs	r0, #64	; 0x40
    383c:	4d6a      	ldr	r5, [pc, #424]	; (39e8 <sparkBIST+0x20c>)
    383e:	47a8      	blx	r5
    3840:	2080      	movs	r0, #128	; 0x80
    3842:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    3844:	2041      	movs	r0, #65	; 0x41
    3846:	47a8      	blx	r5
    3848:	2000      	movs	r0, #0
    384a:	47a8      	blx	r5
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    384c:	2200      	movs	r2, #0
    384e:	4b6b      	ldr	r3, [pc, #428]	; (39fc <sparkBIST+0x220>)
    3850:	821a      	strh	r2, [r3, #16]
    3852:	e010      	b.n	3876 <sparkBIST+0x9a>
		usbPrintf("OK\n");
    3854:	486a      	ldr	r0, [pc, #424]	; (3a00 <sparkBIST+0x224>)
    3856:	4b67      	ldr	r3, [pc, #412]	; (39f4 <sparkBIST+0x218>)
    3858:	4798      	blx	r3
    385a:	e7ea      	b.n	3832 <sparkBIST+0x56>
	usbPrintf("MCU_INT..");
    385c:	4869      	ldr	r0, [pc, #420]	; (3a04 <sparkBIST+0x228>)
    385e:	4b65      	ldr	r3, [pc, #404]	; (39f4 <sparkBIST+0x218>)
    3860:	4798      	blx	r3
    3862:	e7e8      	b.n	3836 <sparkBIST+0x5a>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    3864:	2110      	movs	r1, #16
    3866:	4b65      	ldr	r3, [pc, #404]	; (39fc <sparkBIST+0x220>)
    3868:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    386a:	4b64      	ldr	r3, [pc, #400]	; (39fc <sparkBIST+0x220>)
    386c:	7b9b      	ldrb	r3, [r3, #14]
    386e:	06db      	lsls	r3, r3, #27
    3870:	d5fb      	bpl.n	386a <sparkBIST+0x8e>
		cnt++;
    3872:	3201      	adds	r2, #1
    3874:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    3876:	2a0a      	cmp	r2, #10
    3878:	d1f4      	bne.n	3864 <sparkBIST+0x88>
  fail = fail |  (getMCUint()); // should be low
    387a:	4b63      	ldr	r3, [pc, #396]	; (3a08 <sparkBIST+0x22c>)
    387c:	4798      	blx	r3
    387e:	0005      	movs	r5, r0
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    3880:	2040      	movs	r0, #64	; 0x40
    3882:	4e59      	ldr	r6, [pc, #356]	; (39e8 <sparkBIST+0x20c>)
    3884:	47b0      	blx	r6
    3886:	2000      	movs	r0, #0
    3888:	47b0      	blx	r6
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    388a:	2200      	movs	r2, #0
    388c:	4b5b      	ldr	r3, [pc, #364]	; (39fc <sparkBIST+0x220>)
    388e:	821a      	strh	r2, [r3, #16]
    3890:	e008      	b.n	38a4 <sparkBIST+0xc8>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    3892:	2110      	movs	r1, #16
    3894:	4b59      	ldr	r3, [pc, #356]	; (39fc <sparkBIST+0x220>)
    3896:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    3898:	4b58      	ldr	r3, [pc, #352]	; (39fc <sparkBIST+0x220>)
    389a:	7b9b      	ldrb	r3, [r3, #14]
    389c:	06db      	lsls	r3, r3, #27
    389e:	d5fb      	bpl.n	3898 <sparkBIST+0xbc>
		cnt++;
    38a0:	3201      	adds	r2, #1
    38a2:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    38a4:	2a0a      	cmp	r2, #10
    38a6:	d1f4      	bne.n	3892 <sparkBIST+0xb6>
  fail = fail |  !(getMCUint()); // should be high
    38a8:	4b57      	ldr	r3, [pc, #348]	; (3a08 <sparkBIST+0x22c>)
    38aa:	4798      	blx	r3
    38ac:	0007      	movs	r7, r0
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    38ae:	2040      	movs	r0, #64	; 0x40
    38b0:	4e4d      	ldr	r6, [pc, #308]	; (39e8 <sparkBIST+0x20c>)
    38b2:	47b0      	blx	r6
    38b4:	2000      	movs	r0, #0
    38b6:	47b0      	blx	r6
  stopSPI();
    38b8:	4b4c      	ldr	r3, [pc, #304]	; (39ec <sparkBIST+0x210>)
    38ba:	4798      	blx	r3
  if(fail)
    38bc:	42bd      	cmp	r5, r7
    38be:	d306      	bcc.n	38ce <sparkBIST+0xf2>
	  if(verbose)
    38c0:	2c00      	cmp	r4, #0
    38c2:	d0a9      	beq.n	3818 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    38c4:	484c      	ldr	r0, [pc, #304]	; (39f8 <sparkBIST+0x21c>)
    38c6:	4b4b      	ldr	r3, [pc, #300]	; (39f4 <sparkBIST+0x218>)
    38c8:	4798      	blx	r3
    return false;
    38ca:	2400      	movs	r4, #0
    38cc:	e7a4      	b.n	3818 <sparkBIST+0x3c>
	  if(verbose)
    38ce:	2c00      	cmp	r4, #0
    38d0:	d112      	bne.n	38f8 <sparkBIST+0x11c>
  startSPI();
    38d2:	4b44      	ldr	r3, [pc, #272]	; (39e4 <sparkBIST+0x208>)
    38d4:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(0x00);
    38d6:	2044      	movs	r0, #68	; 0x44
    38d8:	4d43      	ldr	r5, [pc, #268]	; (39e8 <sparkBIST+0x20c>)
    38da:	47a8      	blx	r5
    38dc:	2000      	movs	r0, #0
    38de:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x00);
    38e0:	2045      	movs	r0, #69	; 0x45
    38e2:	47a8      	blx	r5
    38e4:	2000      	movs	r0, #0
    38e6:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(0x00); // Wakeup all voltage domains
    38e8:	205f      	movs	r0, #95	; 0x5f
    38ea:	47a8      	blx	r5
    38ec:	2000      	movs	r0, #0
    38ee:	47a8      	blx	r5
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    38f0:	2200      	movs	r2, #0
    38f2:	4b42      	ldr	r3, [pc, #264]	; (39fc <sparkBIST+0x220>)
    38f4:	821a      	strh	r2, [r3, #16]
    38f6:	e00c      	b.n	3912 <sparkBIST+0x136>
		usbPrintf("OK\n");
    38f8:	4841      	ldr	r0, [pc, #260]	; (3a00 <sparkBIST+0x224>)
    38fa:	4b3e      	ldr	r3, [pc, #248]	; (39f4 <sparkBIST+0x218>)
    38fc:	4798      	blx	r3
    38fe:	e7e8      	b.n	38d2 <sparkBIST+0xf6>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    3900:	2110      	movs	r1, #16
    3902:	4b3e      	ldr	r3, [pc, #248]	; (39fc <sparkBIST+0x220>)
    3904:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    3906:	4b3d      	ldr	r3, [pc, #244]	; (39fc <sparkBIST+0x220>)
    3908:	7b9b      	ldrb	r3, [r3, #14]
    390a:	06db      	lsls	r3, r3, #27
    390c:	d5fb      	bpl.n	3906 <sparkBIST+0x12a>
		cnt++;
    390e:	3201      	adds	r2, #1
    3910:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    3912:	2a0a      	cmp	r2, #10
    3914:	d1f4      	bne.n	3900 <sparkBIST+0x124>
  sendSPI(REG_COMMANDS); b = sendSPI(0x00);
    3916:	201f      	movs	r0, #31
    3918:	4d33      	ldr	r5, [pc, #204]	; (39e8 <sparkBIST+0x20c>)
    391a:	47a8      	blx	r5
    391c:	2000      	movs	r0, #0
    391e:	47a8      	blx	r5
    3920:	0005      	movs	r5, r0
  stopSPI();
    3922:	4b32      	ldr	r3, [pc, #200]	; (39ec <sparkBIST+0x210>)
    3924:	4798      	blx	r3
  if(verbose)
    3926:	2c00      	cmp	r4, #0
    3928:	d109      	bne.n	393e <sparkBIST+0x162>
  if(!(b & 0x01))
    392a:	07eb      	lsls	r3, r5, #31
    392c:	d40b      	bmi.n	3946 <sparkBIST+0x16a>
	  if(verbose)
    392e:	2c00      	cmp	r4, #0
    3930:	d100      	bne.n	3934 <sparkBIST+0x158>
    3932:	e771      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    3934:	4830      	ldr	r0, [pc, #192]	; (39f8 <sparkBIST+0x21c>)
    3936:	4b2f      	ldr	r3, [pc, #188]	; (39f4 <sparkBIST+0x218>)
    3938:	4798      	blx	r3
    return false;
    393a:	2400      	movs	r4, #0
    393c:	e76c      	b.n	3818 <sparkBIST+0x3c>
	usbPrintf("REF_PWRD..");
    393e:	4833      	ldr	r0, [pc, #204]	; (3a0c <sparkBIST+0x230>)
    3940:	4b2c      	ldr	r3, [pc, #176]	; (39f4 <sparkBIST+0x218>)
    3942:	4798      	blx	r3
    3944:	e7f1      	b.n	392a <sparkBIST+0x14e>
	  if(verbose)
    3946:	2c00      	cmp	r4, #0
    3948:	d10b      	bne.n	3962 <sparkBIST+0x186>
  if(verbose)
    394a:	2c00      	cmp	r4, #0
    394c:	d10d      	bne.n	396a <sparkBIST+0x18e>
  if(!(b & 0x02))
    394e:	07ab      	lsls	r3, r5, #30
    3950:	d40f      	bmi.n	3972 <sparkBIST+0x196>
	  if(verbose)
    3952:	2c00      	cmp	r4, #0
    3954:	d100      	bne.n	3958 <sparkBIST+0x17c>
    3956:	e75f      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    3958:	4827      	ldr	r0, [pc, #156]	; (39f8 <sparkBIST+0x21c>)
    395a:	4b26      	ldr	r3, [pc, #152]	; (39f4 <sparkBIST+0x218>)
    395c:	4798      	blx	r3
    return false;
    395e:	2400      	movs	r4, #0
    3960:	e75a      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    3962:	4827      	ldr	r0, [pc, #156]	; (3a00 <sparkBIST+0x224>)
    3964:	4b23      	ldr	r3, [pc, #140]	; (39f4 <sparkBIST+0x218>)
    3966:	4798      	blx	r3
    3968:	e7ef      	b.n	394a <sparkBIST+0x16e>
	usbPrintf("PLL_PWRD..");
    396a:	4829      	ldr	r0, [pc, #164]	; (3a10 <sparkBIST+0x234>)
    396c:	4b21      	ldr	r3, [pc, #132]	; (39f4 <sparkBIST+0x218>)
    396e:	4798      	blx	r3
    3970:	e7ed      	b.n	394e <sparkBIST+0x172>
	  if(verbose)
    3972:	2c00      	cmp	r4, #0
    3974:	d10b      	bne.n	398e <sparkBIST+0x1b2>
  if(verbose)
    3976:	2c00      	cmp	r4, #0
    3978:	d10d      	bne.n	3996 <sparkBIST+0x1ba>
  if(!(b & 0x04))
    397a:	076b      	lsls	r3, r5, #29
    397c:	d40f      	bmi.n	399e <sparkBIST+0x1c2>
	  if(verbose)
    397e:	2c00      	cmp	r4, #0
    3980:	d100      	bne.n	3984 <sparkBIST+0x1a8>
    3982:	e749      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    3984:	481c      	ldr	r0, [pc, #112]	; (39f8 <sparkBIST+0x21c>)
    3986:	4b1b      	ldr	r3, [pc, #108]	; (39f4 <sparkBIST+0x218>)
    3988:	4798      	blx	r3
    return false;
    398a:	2400      	movs	r4, #0
    398c:	e744      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    398e:	481c      	ldr	r0, [pc, #112]	; (3a00 <sparkBIST+0x224>)
    3990:	4b18      	ldr	r3, [pc, #96]	; (39f4 <sparkBIST+0x218>)
    3992:	4798      	blx	r3
    3994:	e7ef      	b.n	3976 <sparkBIST+0x19a>
	usbPrintf("DCDC_PWRD..");
    3996:	481f      	ldr	r0, [pc, #124]	; (3a14 <sparkBIST+0x238>)
    3998:	4b16      	ldr	r3, [pc, #88]	; (39f4 <sparkBIST+0x218>)
    399a:	4798      	blx	r3
    399c:	e7ed      	b.n	397a <sparkBIST+0x19e>
    if(verbose)
    399e:	2c00      	cmp	r4, #0
    39a0:	d10b      	bne.n	39ba <sparkBIST+0x1de>
  if(verbose)
    39a2:	2c00      	cmp	r4, #0
    39a4:	d10d      	bne.n	39c2 <sparkBIST+0x1e6>
  if(!(b & 0x08))
    39a6:	072b      	lsls	r3, r5, #28
    39a8:	d40f      	bmi.n	39ca <sparkBIST+0x1ee>
	  if(verbose)
    39aa:	2c00      	cmp	r4, #0
    39ac:	d100      	bne.n	39b0 <sparkBIST+0x1d4>
    39ae:	e733      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("FAIL\n");
    39b0:	4811      	ldr	r0, [pc, #68]	; (39f8 <sparkBIST+0x21c>)
    39b2:	4b10      	ldr	r3, [pc, #64]	; (39f4 <sparkBIST+0x218>)
    39b4:	4798      	blx	r3
    return false;
    39b6:	2400      	movs	r4, #0
    39b8:	e72e      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    39ba:	4811      	ldr	r0, [pc, #68]	; (3a00 <sparkBIST+0x224>)
    39bc:	4b0d      	ldr	r3, [pc, #52]	; (39f4 <sparkBIST+0x218>)
    39be:	4798      	blx	r3
    39c0:	e7ef      	b.n	39a2 <sparkBIST+0x1c6>
	usbPrintf("DLL_PWRD..");
    39c2:	4815      	ldr	r0, [pc, #84]	; (3a18 <sparkBIST+0x23c>)
    39c4:	4b0b      	ldr	r3, [pc, #44]	; (39f4 <sparkBIST+0x218>)
    39c6:	4798      	blx	r3
    39c8:	e7ed      	b.n	39a6 <sparkBIST+0x1ca>
	  if(verbose)
    39ca:	2c00      	cmp	r4, #0
    39cc:	d101      	bne.n	39d2 <sparkBIST+0x1f6>
  return true;
    39ce:	2401      	movs	r4, #1
    39d0:	e722      	b.n	3818 <sparkBIST+0x3c>
		usbPrintf("OK\n");
    39d2:	480b      	ldr	r0, [pc, #44]	; (3a00 <sparkBIST+0x224>)
    39d4:	4b07      	ldr	r3, [pc, #28]	; (39f4 <sparkBIST+0x218>)
    39d6:	4798      	blx	r3
    39d8:	e71e      	b.n	3818 <sparkBIST+0x3c>
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	00002e71 	.word	0x00002e71
    39e0:	00002fbd 	.word	0x00002fbd
    39e4:	00002ed9 	.word	0x00002ed9
    39e8:	00002ef5 	.word	0x00002ef5
    39ec:	00002f99 	.word	0x00002f99
    39f0:	00007438 	.word	0x00007438
    39f4:	0000346d 	.word	0x0000346d
    39f8:	00007440 	.word	0x00007440
    39fc:	42003000 	.word	0x42003000
    3a00:	00007448 	.word	0x00007448
    3a04:	0000744c 	.word	0x0000744c
    3a08:	00002ea5 	.word	0x00002ea5
    3a0c:	00007458 	.word	0x00007458
    3a10:	00007464 	.word	0x00007464
    3a14:	00007470 	.word	0x00007470
    3a18:	0000747c 	.word	0x0000747c

00003a1c <sparkCalDLL>:

unsigned char sparkCalDLL(bool RX)
{
    3a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a1e:	0004      	movs	r4, r0
  unsigned short w;
  unsigned char dllTune;
  unsigned char MSB;

  // Only works when we are in TX mode
  startSPI();
    3a20:	4b25      	ldr	r3, [pc, #148]	; (3ab8 <sparkCalDLL+0x9c>)
    3a22:	4798      	blx	r3
  if(RX)
    3a24:	2c00      	cmp	r4, #0
    3a26:	d015      	beq.n	3a54 <sparkCalDLL+0x38>
  {
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x20); // Switch to RX mode
    3a28:	205f      	movs	r0, #95	; 0x5f
    3a2a:	4c24      	ldr	r4, [pc, #144]	; (3abc <sparkCalDLL+0xa0>)
    3a2c:	47a0      	blx	r4
    3a2e:	2020      	movs	r0, #32
    3a30:	47a0      	blx	r4
  else
  {
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
  }
  
  sendSPI(REG_DLLTUNE); MSB = sendSPI(0x00) & 0xf0; // Get MSB
    3a32:	200e      	movs	r0, #14
    3a34:	4c21      	ldr	r4, [pc, #132]	; (3abc <sparkCalDLL+0xa0>)
    3a36:	47a0      	blx	r4
    3a38:	2000      	movs	r0, #0
    3a3a:	47a0      	blx	r4
    3a3c:	230f      	movs	r3, #15
    3a3e:	4398      	bics	r0, r3
    3a40:	b2c6      	uxtb	r6, r0
  
  while(1) // Wait until DLL is powered up
  {
    sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    3a42:	201f      	movs	r0, #31
    3a44:	4c1d      	ldr	r4, [pc, #116]	; (3abc <sparkCalDLL+0xa0>)
    3a46:	47a0      	blx	r4
    3a48:	2000      	movs	r0, #0
    3a4a:	47a0      	blx	r4
    if(w & BIT_DLLPWRD)
    3a4c:	0703      	lsls	r3, r0, #28
    3a4e:	d5f8      	bpl.n	3a42 <sparkCalDLL+0x26>
    3a50:	2400      	movs	r4, #0
    3a52:	e019      	b.n	3a88 <sparkCalDLL+0x6c>
    sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
    3a54:	205f      	movs	r0, #95	; 0x5f
    3a56:	4c19      	ldr	r4, [pc, #100]	; (3abc <sparkCalDLL+0xa0>)
    3a58:	47a0      	blx	r4
    3a5a:	2000      	movs	r0, #0
    3a5c:	47a0      	blx	r4
    3a5e:	e7e8      	b.n	3a32 <sparkCalDLL+0x16>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    3a60:	2110      	movs	r1, #16
    3a62:	4b17      	ldr	r3, [pc, #92]	; (3ac0 <sparkCalDLL+0xa4>)
    3a64:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    3a66:	4b16      	ldr	r3, [pc, #88]	; (3ac0 <sparkCalDLL+0xa4>)
    3a68:	7b9b      	ldrb	r3, [r3, #14]
    3a6a:	06db      	lsls	r3, r3, #27
    3a6c:	d5fb      	bpl.n	3a66 <sparkCalDLL+0x4a>
		cnt++;
    3a6e:	3201      	adds	r2, #1
    3a70:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    3a72:	2a0a      	cmp	r2, #10
    3a74:	d1f4      	bne.n	3a60 <sparkCalDLL+0x44>
     dllTune = MSB | ((unsigned char) i);
     sendSPI(SPI_WRITE | REG_DLLTUNE); sendSPI(dllTune); // Adjust DLL-TUNE
     
     delay(10);// Wait a bit to stabilize

     sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    3a76:	201f      	movs	r0, #31
    3a78:	4f10      	ldr	r7, [pc, #64]	; (3abc <sparkCalDLL+0xa0>)
    3a7a:	47b8      	blx	r7
    3a7c:	2000      	movs	r0, #0
    3a7e:	47b8      	blx	r7
     if(w & (1 << 7) )
    3a80:	0603      	lsls	r3, r0, #24
    3a82:	d40e      	bmi.n	3aa2 <sparkCalDLL+0x86>
  for(unsigned char i=0;i<16;i++)
    3a84:	3401      	adds	r4, #1
    3a86:	b2e4      	uxtb	r4, r4
    3a88:	2c0f      	cmp	r4, #15
    3a8a:	d80a      	bhi.n	3aa2 <sparkCalDLL+0x86>
     dllTune = MSB | ((unsigned char) i);
    3a8c:	0025      	movs	r5, r4
    3a8e:	4335      	orrs	r5, r6
     sendSPI(SPI_WRITE | REG_DLLTUNE); sendSPI(dllTune); // Adjust DLL-TUNE
    3a90:	204e      	movs	r0, #78	; 0x4e
    3a92:	4f0a      	ldr	r7, [pc, #40]	; (3abc <sparkCalDLL+0xa0>)
    3a94:	47b8      	blx	r7
    3a96:	0028      	movs	r0, r5
    3a98:	47b8      	blx	r7
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    3a9a:	2200      	movs	r2, #0
    3a9c:	4b08      	ldr	r3, [pc, #32]	; (3ac0 <sparkCalDLL+0xa4>)
    3a9e:	821a      	strh	r2, [r3, #16]
    3aa0:	e7e7      	b.n	3a72 <sparkCalDLL+0x56>
      break;
  }
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP); // Go to sleep
    3aa2:	205f      	movs	r0, #95	; 0x5f
    3aa4:	4c05      	ldr	r4, [pc, #20]	; (3abc <sparkCalDLL+0xa0>)
    3aa6:	47a0      	blx	r4
    3aa8:	2004      	movs	r0, #4
    3aaa:	47a0      	blx	r4
  stopSPI();
    3aac:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <sparkCalDLL+0xa8>)
    3aae:	4798      	blx	r3

  return dllTune & 0x0f;
    3ab0:	200f      	movs	r0, #15
    3ab2:	4028      	ands	r0, r5
}
    3ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	00002ed9 	.word	0x00002ed9
    3abc:	00002ef5 	.word	0x00002ef5
    3ac0:	42003000 	.word	0x42003000
    3ac4:	00002f99 	.word	0x00002f99

00003ac8 <sparkCalVCRO>:
   // Reverse the top and bottom nibble then swap them.
   return (rev_lookup[n&0b1111] << 4) | rev_lookup[n>>4];
}

unsigned char sparkCalVCRO(unsigned short MHz)
{
    3ac8:	b570      	push	{r4, r5, r6, lr}
  unsigned short w;
  unsigned char calParam;
  unsigned char ticks;

  ticks = ( ((unsigned long)MHz) * 1000) / (PLL_CYCLES /1000); // Number of VCRO cycles in one PLL cycle
    3aca:	23fa      	movs	r3, #250	; 0xfa
    3acc:	009b      	lsls	r3, r3, #2
    3ace:	4358      	muls	r0, r3
    3ad0:	21a0      	movs	r1, #160	; 0xa0
    3ad2:	01c9      	lsls	r1, r1, #7
    3ad4:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <sparkCalVCRO+0x80>)
    3ad6:	4798      	blx	r3
    3ad8:	b2c3      	uxtb	r3, r0

  calParam = reverse(~ticks); // Code into cal code
    3ada:	43db      	mvns	r3, r3
    3adc:	b2db      	uxtb	r3, r3
   return (rev_lookup[n&0b1111] << 4) | rev_lookup[n>>4];
    3ade:	220f      	movs	r2, #15
    3ae0:	401a      	ands	r2, r3
    3ae2:	491a      	ldr	r1, [pc, #104]	; (3b4c <sparkCalVCRO+0x84>)
    3ae4:	5c8a      	ldrb	r2, [r1, r2]
    3ae6:	0112      	lsls	r2, r2, #4
    3ae8:	091b      	lsrs	r3, r3, #4
    3aea:	56cd      	ldrsb	r5, [r1, r3]
    3aec:	4315      	orrs	r5, r2
    3aee:	b2ed      	uxtb	r5, r5

  //usbPrintf("%02hx %02hx %02hx\n", ticks, ~ticks, calParam);

  startSPI();
    3af0:	4b17      	ldr	r3, [pc, #92]	; (3b50 <sparkCalVCRO+0x88>)
    3af2:	4798      	blx	r3
  
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x00); // Switch to TX mode
    3af4:	205f      	movs	r0, #95	; 0x5f
    3af6:	4c17      	ldr	r4, [pc, #92]	; (3b54 <sparkCalVCRO+0x8c>)
    3af8:	47a0      	blx	r4
    3afa:	2000      	movs	r0, #0
    3afc:	47a0      	blx	r4

  while(1) // Wait until DLL is powered up
  {
    sendSPI(REG_COMMANDS); w = sendSPI(0x00);
    3afe:	201f      	movs	r0, #31
    3b00:	4c14      	ldr	r4, [pc, #80]	; (3b54 <sparkCalVCRO+0x8c>)
    3b02:	47a0      	blx	r4
    3b04:	2000      	movs	r0, #0
    3b06:	47a0      	blx	r4
    if(w & BIT_DLLPWRD)
    3b08:	0703      	lsls	r3, r0, #28
    3b0a:	d5f8      	bpl.n	3afe <sparkCalVCRO+0x36>
      break;
  }
  
  sendSPI(SPI_WRITE | REG_CALIBRSET); sendSPI(calParam); // Set calParam
    3b0c:	205e      	movs	r0, #94	; 0x5e
    3b0e:	4c11      	ldr	r4, [pc, #68]	; (3b54 <sparkCalVCRO+0x8c>)
    3b10:	47a0      	blx	r4
    3b12:	0028      	movs	r0, r5
    3b14:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_CALIBRAT); // Trigger calibration
    3b16:	205f      	movs	r0, #95	; 0x5f
    3b18:	47a0      	blx	r4
    3b1a:	2080      	movs	r0, #128	; 0x80
    3b1c:	47a0      	blx	r4

  while(1) // Wait until calibration is done
  {
    sendSPI(REG_INT2); w = sendSPI(0x00);
    3b1e:	2001      	movs	r0, #1
    3b20:	4c0c      	ldr	r4, [pc, #48]	; (3b54 <sparkCalVCRO+0x8c>)
    3b22:	47a0      	blx	r4
    3b24:	2000      	movs	r0, #0
    3b26:	47a0      	blx	r4
    if(w & BIT_CALIBRT)
    3b28:	0603      	lsls	r3, r0, #24
    3b2a:	d5f8      	bpl.n	3b1e <sparkCalVCRO+0x56>
      break;
  }

  sendSPI(REG_CALIBRSET); w = sendSPI(0x00); // Get calibration result
    3b2c:	201e      	movs	r0, #30
    3b2e:	4c09      	ldr	r4, [pc, #36]	; (3b54 <sparkCalVCRO+0x8c>)
    3b30:	47a0      	blx	r4
    3b32:	2000      	movs	r0, #0
    3b34:	47a0      	blx	r4
    3b36:	0005      	movs	r5, r0
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP); // Go to sleep
    3b38:	205f      	movs	r0, #95	; 0x5f
    3b3a:	47a0      	blx	r4
    3b3c:	2004      	movs	r0, #4
    3b3e:	47a0      	blx	r4
  stopSPI();
    3b40:	4b05      	ldr	r3, [pc, #20]	; (3b58 <sparkCalVCRO+0x90>)
    3b42:	4798      	blx	r3

  return w;
}
    3b44:	0028      	movs	r0, r5
    3b46:	bd70      	pop	{r4, r5, r6, pc}
    3b48:	00005329 	.word	0x00005329
    3b4c:	00007428 	.word	0x00007428
    3b50:	00002ed9 	.word	0x00002ed9
    3b54:	00002ef5 	.word	0x00002ef5
    3b58:	00002f99 	.word	0x00002f99

00003b5c <sparkRadioSetup>:

void sparkRadioSetup() // Setup the UWB
{
    3b5c:	b510      	push	{r4, lr}
  // Setup the UWB
  startSPI();
    3b5e:	4b36      	ldr	r3, [pc, #216]	; (3c38 <sparkRadioSetup+0xdc>)
    3b60:	4798      	blx	r3

  // Setup interrupts
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00);
    3b62:	2040      	movs	r0, #64	; 0x40
    3b64:	4c35      	ldr	r4, [pc, #212]	; (3c3c <sparkRadioSetup+0xe0>)
    3b66:	47a0      	blx	r4
    3b68:	2000      	movs	r0, #0
    3b6a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    3b6c:	2041      	movs	r0, #65	; 0x41
    3b6e:	47a0      	blx	r4
    3b70:	2000      	movs	r0, #0
    3b72:	47a0      	blx	r4
  
  // Setup PLL
  sendSPI(SPI_WRITE | REG_PLLRATIO); sendSPI(0x00);
    3b74:	204c      	movs	r0, #76	; 0x4c
    3b76:	47a0      	blx	r4
    3b78:	2000      	movs	r0, #0
    3b7a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_RESISTUNE); sendSPI(0x08);
    3b7c:	204d      	movs	r0, #77	; 0x4d
    3b7e:	47a0      	blx	r4
    3b80:	2008      	movs	r0, #8
    3b82:	47a0      	blx	r4

  // TX Spectrum
  sendSPI(SPI_WRITE | REG_TXPATTERN0); sendSPI(0x00);
    3b84:	2050      	movs	r0, #80	; 0x50
    3b86:	47a0      	blx	r4
    3b88:	2000      	movs	r0, #0
    3b8a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN1); sendSPI(0x00);
    3b8c:	2051      	movs	r0, #81	; 0x51
    3b8e:	47a0      	blx	r4
    3b90:	2000      	movs	r0, #0
    3b92:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN2); sendSPI(0xbd);
    3b94:	2052      	movs	r0, #82	; 0x52
    3b96:	47a0      	blx	r4
    3b98:	20bd      	movs	r0, #189	; 0xbd
    3b9a:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN3); sendSPI(0xbd);
    3b9c:	2053      	movs	r0, #83	; 0x53
    3b9e:	47a0      	blx	r4
    3ba0:	20bd      	movs	r0, #189	; 0xbd
    3ba2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN4); sendSPI(0xbc);
    3ba4:	2054      	movs	r0, #84	; 0x54
    3ba6:	47a0      	blx	r4
    3ba8:	20bc      	movs	r0, #188	; 0xbc
    3baa:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN5); sendSPI(0xbc);
    3bac:	2055      	movs	r0, #85	; 0x55
    3bae:	47a0      	blx	r4
    3bb0:	20bc      	movs	r0, #188	; 0xbc
    3bb2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN6); sendSPI(0xbb);
    3bb4:	2056      	movs	r0, #86	; 0x56
    3bb6:	47a0      	blx	r4
    3bb8:	20bb      	movs	r0, #187	; 0xbb
    3bba:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN7); sendSPI(0xbb);
    3bbc:	2057      	movs	r0, #87	; 0x57
    3bbe:	47a0      	blx	r4
    3bc0:	20bb      	movs	r0, #187	; 0xbb
    3bc2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN8); sendSPI(0xba);
    3bc4:	2058      	movs	r0, #88	; 0x58
    3bc6:	47a0      	blx	r4
    3bc8:	20ba      	movs	r0, #186	; 0xba
    3bca:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN9); sendSPI(0xba);
    3bcc:	2059      	movs	r0, #89	; 0x59
    3bce:	47a0      	blx	r4
    3bd0:	20ba      	movs	r0, #186	; 0xba
    3bd2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN10); sendSPI(0x00);
    3bd4:	205a      	movs	r0, #90	; 0x5a
    3bd6:	47a0      	blx	r4
    3bd8:	2000      	movs	r0, #0
    3bda:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXPATTERN11); sendSPI(0x00);
    3bdc:	205b      	movs	r0, #91	; 0x5b
    3bde:	47a0      	blx	r4
    3be0:	2000      	movs	r0, #0
    3be2:	47a0      	blx	r4

  // Temporary radio setup for optimized link
   sendSPI(0x4e); sendSPI(0xf6);
    3be4:	204e      	movs	r0, #78	; 0x4e
    3be6:	47a0      	blx	r4
    3be8:	20f6      	movs	r0, #246	; 0xf6
    3bea:	47a0      	blx	r4
  //sendSPI(0x4e); sendSPI(0x0F);
  sendSPI(0x5c); sendSPI(0x1b);
    3bec:	205c      	movs	r0, #92	; 0x5c
    3bee:	47a0      	blx	r4
    3bf0:	201b      	movs	r0, #27
    3bf2:	47a0      	blx	r4
  sendSPI(0x71); sendSPI(0x02);
    3bf4:	2071      	movs	r0, #113	; 0x71
    3bf6:	47a0      	blx	r4
    3bf8:	2002      	movs	r0, #2
    3bfa:	47a0      	blx	r4
  
  // Enable CRC
  sendSPI(SPI_WRITE | REG_CRCPOLYNO8); sendSPI(0x80);
    3bfc:	2076      	movs	r0, #118	; 0x76
    3bfe:	47a0      	blx	r4
    3c00:	2080      	movs	r0, #128	; 0x80
    3c02:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_CRCPOLYNO0); sendSPI(0x05);
    3c04:	2077      	movs	r0, #119	; 0x77
    3c06:	47a0      	blx	r4
    3c08:	2005      	movs	r0, #5
    3c0a:	47a0      	blx	r4

  stopSPI();
    3c0c:	4b0c      	ldr	r3, [pc, #48]	; (3c40 <sparkRadioSetup+0xe4>)
    3c0e:	4798      	blx	r3

  // Switch off
  //sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(0x04);
  
  // Variables and modes
  bidirectional = false;
    3c10:	2300      	movs	r3, #0
    3c12:	4a0c      	ldr	r2, [pc, #48]	; (3c44 <sparkRadioSetup+0xe8>)
    3c14:	7013      	strb	r3, [r2, #0]
  master = false;
    3c16:	4a0c      	ldr	r2, [pc, #48]	; (3c48 <sparkRadioSetup+0xec>)
    3c18:	7013      	strb	r3, [r2, #0]
  running = false;
    3c1a:	4a0c      	ldr	r2, [pc, #48]	; (3c4c <sparkRadioSetup+0xf0>)
    3c1c:	7013      	strb	r3, [r2, #0]
  mode = SPARK_MODE_TX;
    3c1e:	2101      	movs	r1, #1
    3c20:	4a0b      	ldr	r2, [pc, #44]	; (3c50 <sparkRadioSetup+0xf4>)
    3c22:	7011      	strb	r1, [r2, #0]
  sparkRXbuffer = rxData;
    3c24:	490b      	ldr	r1, [pc, #44]	; (3c54 <sparkRadioSetup+0xf8>)
    3c26:	4a0c      	ldr	r2, [pc, #48]	; (3c58 <sparkRadioSetup+0xfc>)
    3c28:	6011      	str	r1, [r2, #0]
  sparkTXbuffer = txData;
    3c2a:	490c      	ldr	r1, [pc, #48]	; (3c5c <sparkRadioSetup+0x100>)
    3c2c:	4a0c      	ldr	r2, [pc, #48]	; (3c60 <sparkRadioSetup+0x104>)
    3c2e:	6011      	str	r1, [r2, #0]
  sparkCRCfail = false;
    3c30:	4a0c      	ldr	r2, [pc, #48]	; (3c64 <sparkRadioSetup+0x108>)
    3c32:	7013      	strb	r3, [r2, #0]
}
    3c34:	bd10      	pop	{r4, pc}
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	00002ed9 	.word	0x00002ed9
    3c3c:	00002ef5 	.word	0x00002ef5
    3c40:	00002f99 	.word	0x00002f99
    3c44:	20000c74 	.word	0x20000c74
    3c48:	20000c7b 	.word	0x20000c7b
    3c4c:	20000c60 	.word	0x20000c60
    3c50:	20000c6d 	.word	0x20000c6d
    3c54:	20000b58 	.word	0x20000b58
    3c58:	20000c68 	.word	0x20000c68
    3c5c:	20000be0 	.word	0x20000be0
    3c60:	20000c70 	.word	0x20000c70
    3c64:	20000c79 	.word	0x20000c79

00003c68 <sparkSleepSetup>:
  // Reset watchdog
  wdReset();
}

void sparkSleepSetup(unsigned char sleepMode, unsigned short packetsPerSecond, unsigned short frameLengthMicro)
{
    3c68:	b570      	push	{r4, r5, r6, lr}
    3c6a:	000d      	movs	r5, r1
    3c6c:	0016      	movs	r6, r2
  unsigned char sleepBits;

  // Decode sleeping mode
  sleepingMode = sleepMode;
    3c6e:	4b3b      	ldr	r3, [pc, #236]	; (3d5c <sparkSleepSetup+0xf4>)
    3c70:	7018      	strb	r0, [r3, #0]
  switch(sleepMode)
    3c72:	2801      	cmp	r0, #1
    3c74:	d053      	beq.n	3d1e <sparkSleepSetup+0xb6>
    3c76:	2800      	cmp	r0, #0
    3c78:	d057      	beq.n	3d2a <sparkSleepSetup+0xc2>
    3c7a:	2802      	cmp	r0, #2
    3c7c:	d051      	beq.n	3d22 <sparkSleepSetup+0xba>
    3c7e:	2803      	cmp	r0, #3
    3c80:	d051      	beq.n	3d26 <sparkSleepSetup+0xbe>
      sleepBits = BIT_SLPDEPTH_DEEP;
      break;
  }
   
  // Number of XTAL clock cycles to sleep, excluding PLL startup in deep sleep
  if(sleepingMode == SPARK_SLEEP_DEEP)
    3c82:	2803      	cmp	r0, #3
    3c84:	d053      	beq.n	3d2e <sparkSleepSetup+0xc6>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond - PLL_STARTUP_CYCLES;
  else if(sleepingMode == SPARK_SLEEP_SHALLOW)
    3c86:	2802      	cmp	r0, #2
    3c88:	d05a      	beq.n	3d40 <sparkSleepSetup+0xd8>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond;
  else
    sleep_cycles = PLL_CYCLES / packetsPerSecond;
    3c8a:	0029      	movs	r1, r5
    3c8c:	4834      	ldr	r0, [pc, #208]	; (3d60 <sparkSleepSetup+0xf8>)
    3c8e:	4b35      	ldr	r3, [pc, #212]	; (3d64 <sparkSleepSetup+0xfc>)
    3c90:	4798      	blx	r3
    3c92:	4b35      	ldr	r3, [pc, #212]	; (3d68 <sparkSleepSetup+0x100>)
    3c94:	8018      	strh	r0, [r3, #0]

  // Number of PLL clock cycle for the frame, equal to RX timeout, not meaningful for TX (unless we want to center TX in the frame)
  frame_cycles = ( ((unsigned long)PLL_CYCLES) * ((unsigned long)frameLengthMicro)) / 1024 / 1024 / 8; // REG_RXPERIOD is in PLL cycles X8
    3c96:	4a32      	ldr	r2, [pc, #200]	; (3d60 <sparkSleepSetup+0xf8>)
    3c98:	4372      	muls	r2, r6
    3c9a:	0dd2      	lsrs	r2, r2, #23
    3c9c:	4b33      	ldr	r3, [pc, #204]	; (3d6c <sparkSleepSetup+0x104>)
    3c9e:	801a      	strh	r2, [r3, #0]
  
  // Power Cycling Setup
  startSPI();
    3ca0:	4b33      	ldr	r3, [pc, #204]	; (3d70 <sparkSleepSetup+0x108>)
    3ca2:	4798      	blx	r3
  if(sleepingMode == SPARK_SLEEP_NONE) 
    3ca4:	4b2d      	ldr	r3, [pc, #180]	; (3d5c <sparkSleepSetup+0xf4>)
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d151      	bne.n	3d50 <sparkSleepSetup+0xe8>
  {
    sleepCfg = sleepBits;
    3cac:	4b31      	ldr	r3, [pc, #196]	; (3d74 <sparkSleepSetup+0x10c>)
    3cae:	701c      	strb	r4, [r3, #0]
  }
  else
  {
    sleepCfg = sleepBits | BIT_AUSRXTO | BIT_AUSTXEND | BIT_AUSRXEND; // auto sleep on RX reception and timeout
  }
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(sleepCfg); 
    3cb0:	2044      	movs	r0, #68	; 0x44
    3cb2:	4c31      	ldr	r4, [pc, #196]	; (3d78 <sparkSleepSetup+0x110>)
    3cb4:	47a0      	blx	r4
    3cb6:	4b2f      	ldr	r3, [pc, #188]	; (3d74 <sparkSleepSetup+0x10c>)
    3cb8:	7818      	ldrb	r0, [r3, #0]
    3cba:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI(sleep_cycles % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI(sleep_cycles / 256); // Set sleep timer
    3cbc:	2047      	movs	r0, #71	; 0x47
    3cbe:	47a0      	blx	r4
    3cc0:	4e29      	ldr	r6, [pc, #164]	; (3d68 <sparkSleepSetup+0x100>)
    3cc2:	7830      	ldrb	r0, [r6, #0]
    3cc4:	47a0      	blx	r4
    3cc6:	2046      	movs	r0, #70	; 0x46
    3cc8:	47a0      	blx	r4
    3cca:	8830      	ldrh	r0, [r6, #0]
    3ccc:	0a00      	lsrs	r0, r0, #8
    3cce:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_PLLPWRUP); sendSPI(PLL_STARTUP_CYCLES); // 3ms PLL powerup
    3cd0:	204b      	movs	r0, #75	; 0x4b
    3cd2:	47a0      	blx	r4
    3cd4:	2020      	movs	r0, #32
    3cd6:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_RXPERIOD0); sendSPI(frame_cycles % 256); sendSPI(SPI_WRITE | REG_RXPERIOD8); sendSPI(frame_cycles / 256); // Set timer to approx 30 Hz
    3cd8:	206d      	movs	r0, #109	; 0x6d
    3cda:	47a0      	blx	r4
    3cdc:	4e23      	ldr	r6, [pc, #140]	; (3d6c <sparkSleepSetup+0x104>)
    3cde:	7830      	ldrb	r0, [r6, #0]
    3ce0:	47a0      	blx	r4
    3ce2:	206c      	movs	r0, #108	; 0x6c
    3ce4:	47a0      	blx	r4
    3ce6:	8830      	ldrh	r0, [r6, #0]
    3ce8:	0a00      	lsrs	r0, r0, #8
    3cea:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_TXDELAY); sendSPI(0xff); // Move TX frame as far back as we can
    3cec:	2049      	movs	r0, #73	; 0x49
    3cee:	47a0      	blx	r4
    3cf0:	20ff      	movs	r0, #255	; 0xff
    3cf2:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    3cf4:	2040      	movs	r0, #64	; 0x40
    3cf6:	47a0      	blx	r4
    3cf8:	2000      	movs	r0, #0
    3cfa:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00); 
    3cfc:	2041      	movs	r0, #65	; 0x41
    3cfe:	47a0      	blx	r4
    3d00:	2000      	movs	r0, #0
    3d02:	47a0      	blx	r4
  stopSPI();
    3d04:	4b1d      	ldr	r3, [pc, #116]	; (3d7c <sparkSleepSetup+0x114>)
    3d06:	4798      	blx	r3

  // Watchdog
  unsigned short wdTicks = 2*PLL_CYCLES / packetsPerSecond;
    3d08:	0029      	movs	r1, r5
    3d0a:	481d      	ldr	r0, [pc, #116]	; (3d80 <sparkSleepSetup+0x118>)
    3d0c:	4b15      	ldr	r3, [pc, #84]	; (3d64 <sparkSleepSetup+0xfc>)
    3d0e:	4798      	blx	r3
    3d10:	b280      	uxth	r0, r0
  if(wdTicks < 1)
    3d12:	2800      	cmp	r0, #0
    3d14:	d100      	bne.n	3d18 <sparkSleepSetup+0xb0>
    wdTicks = 1;
    3d16:	3001      	adds	r0, #1
  wdSetup(wdTicks);
    3d18:	4b1a      	ldr	r3, [pc, #104]	; (3d84 <sparkSleepSetup+0x11c>)
    3d1a:	4798      	blx	r3
}
    3d1c:	bd70      	pop	{r4, r5, r6, pc}
      sleepBits = BIT_SLPDEPTH_IDLE;
    3d1e:	2400      	movs	r4, #0
      break;
    3d20:	e7af      	b.n	3c82 <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_SHALLOW;
    3d22:	2440      	movs	r4, #64	; 0x40
      break;
    3d24:	e7ad      	b.n	3c82 <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_DEEP;
    3d26:	24c0      	movs	r4, #192	; 0xc0
      break;
    3d28:	e7ab      	b.n	3c82 <sparkSleepSetup+0x1a>
      sleepBits = BIT_SLPDEPTH_IDLE; // BUT DON'T GO TO SLEEP 
    3d2a:	0004      	movs	r4, r0
    3d2c:	e7a9      	b.n	3c82 <sparkSleepSetup+0x1a>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond - PLL_STARTUP_CYCLES;
    3d2e:	0029      	movs	r1, r5
    3d30:	2080      	movs	r0, #128	; 0x80
    3d32:	0200      	lsls	r0, r0, #8
    3d34:	4b0b      	ldr	r3, [pc, #44]	; (3d64 <sparkSleepSetup+0xfc>)
    3d36:	4798      	blx	r3
    3d38:	3820      	subs	r0, #32
    3d3a:	4b0b      	ldr	r3, [pc, #44]	; (3d68 <sparkSleepSetup+0x100>)
    3d3c:	8018      	strh	r0, [r3, #0]
    3d3e:	e7aa      	b.n	3c96 <sparkSleepSetup+0x2e>
    sleep_cycles = XTAL_CYCLES / packetsPerSecond;
    3d40:	0029      	movs	r1, r5
    3d42:	2080      	movs	r0, #128	; 0x80
    3d44:	0200      	lsls	r0, r0, #8
    3d46:	4b07      	ldr	r3, [pc, #28]	; (3d64 <sparkSleepSetup+0xfc>)
    3d48:	4798      	blx	r3
    3d4a:	4b07      	ldr	r3, [pc, #28]	; (3d68 <sparkSleepSetup+0x100>)
    3d4c:	8018      	strh	r0, [r3, #0]
    3d4e:	e7a2      	b.n	3c96 <sparkSleepSetup+0x2e>
    sleepCfg = sleepBits | BIT_AUSRXTO | BIT_AUSTXEND | BIT_AUSRXEND; // auto sleep on RX reception and timeout
    3d50:	2338      	movs	r3, #56	; 0x38
    3d52:	431c      	orrs	r4, r3
    3d54:	4b07      	ldr	r3, [pc, #28]	; (3d74 <sparkSleepSetup+0x10c>)
    3d56:	701c      	strb	r4, [r3, #0]
    3d58:	e7aa      	b.n	3cb0 <sparkSleepSetup+0x48>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	20000bdc 	.word	0x20000bdc
    3d60:	01388000 	.word	0x01388000
    3d64:	0000543d 	.word	0x0000543d
    3d68:	20000c7c 	.word	0x20000c7c
    3d6c:	20000bd8 	.word	0x20000bd8
    3d70:	00002ed9 	.word	0x00002ed9
    3d74:	20000c75 	.word	0x20000c75
    3d78:	00002ef5 	.word	0x00002ef5
    3d7c:	00002f99 	.word	0x00002f99
    3d80:	02710000 	.word	0x02710000
    3d84:	00003501 	.word	0x00003501

00003d88 <applySleepOffset>:

void applySleepOffset(short offset)
{
    3d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  short new_cycles;
  
  if(sleepingMode == SPARK_SLEEP_IDLE)
    3d8a:	4b13      	ldr	r3, [pc, #76]	; (3dd8 <applySleepOffset+0x50>)
    3d8c:	781b      	ldrb	r3, [r3, #0]
    3d8e:	2b01      	cmp	r3, #1
    3d90:	d01b      	beq.n	3dca <applySleepOffset+0x42>
    new_cycles = ((short) sleep_cycles) + offset*625;
  else
    new_cycles = ((short) sleep_cycles) + offset;
    3d92:	4b12      	ldr	r3, [pc, #72]	; (3ddc <applySleepOffset+0x54>)
    3d94:	881e      	ldrh	r6, [r3, #0]
    3d96:	1836      	adds	r6, r6, r0
    3d98:	b236      	sxth	r6, r6
    
  startSPI();
    3d9a:	4b11      	ldr	r3, [pc, #68]	; (3de0 <applySleepOffset+0x58>)
    3d9c:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI((new_cycles) % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI((new_cycles) / 256);
    3d9e:	2047      	movs	r0, #71	; 0x47
    3da0:	4d10      	ldr	r5, [pc, #64]	; (3de4 <applySleepOffset+0x5c>)
    3da2:	47a8      	blx	r5
    3da4:	17f7      	asrs	r7, r6, #31
    3da6:	0e3b      	lsrs	r3, r7, #24
    3da8:	18f0      	adds	r0, r6, r3
    3daa:	24ff      	movs	r4, #255	; 0xff
    3dac:	4020      	ands	r0, r4
    3dae:	1ac0      	subs	r0, r0, r3
    3db0:	b2c0      	uxtb	r0, r0
    3db2:	47a8      	blx	r5
    3db4:	2046      	movs	r0, #70	; 0x46
    3db6:	47a8      	blx	r5
    3db8:	0020      	movs	r0, r4
    3dba:	4038      	ands	r0, r7
    3dbc:	1980      	adds	r0, r0, r6
    3dbe:	1200      	asrs	r0, r0, #8
    3dc0:	b2c0      	uxtb	r0, r0
    3dc2:	47a8      	blx	r5
  //sendSPI(SPI_WRITE | REG_XTMRCNT0); sendSPI(sleep_cycles % 256); sendSPI(SPI_WRITE | REG_XTMRCNT8); sendSPI(sleep_cycles / 256); // Set timer to approx 30 Hz
  stopSPI();
    3dc4:	4b08      	ldr	r3, [pc, #32]	; (3de8 <applySleepOffset+0x60>)
    3dc6:	4798      	blx	r3
}
    3dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    new_cycles = ((short) sleep_cycles) + offset*625;
    3dca:	4b04      	ldr	r3, [pc, #16]	; (3ddc <applySleepOffset+0x54>)
    3dcc:	881e      	ldrh	r6, [r3, #0]
    3dce:	4c07      	ldr	r4, [pc, #28]	; (3dec <applySleepOffset+0x64>)
    3dd0:	4360      	muls	r0, r4
    3dd2:	1836      	adds	r6, r6, r0
    3dd4:	b236      	sxth	r6, r6
    3dd6:	e7e0      	b.n	3d9a <applySleepOffset+0x12>
    3dd8:	20000bdc 	.word	0x20000bdc
    3ddc:	20000c7c 	.word	0x20000c7c
    3de0:	00002ed9 	.word	0x00002ed9
    3de4:	00002ef5 	.word	0x00002ef5
    3de8:	00002f99 	.word	0x00002f99
    3dec:	00000271 	.word	0x00000271

00003df0 <sparkPacketSetup>:

void sparkPacketSetup(unsigned char minNoiLvl,unsigned char minPulAmp, unsigned char minSigStr, unsigned char preambleSize, unsigned char packetSize, unsigned short syncWord, bool randomData)
{
    3df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3df2:	b085      	sub	sp, #20
    3df4:	9000      	str	r0, [sp, #0]
    3df6:	9101      	str	r1, [sp, #4]
    3df8:	9202      	str	r2, [sp, #8]
    3dfa:	9303      	str	r3, [sp, #12]
    3dfc:	ab0a      	add	r3, sp, #40	; 0x28
    3dfe:	781f      	ldrb	r7, [r3, #0]
    3e00:	ab0b      	add	r3, sp, #44	; 0x2c
    3e02:	881e      	ldrh	r6, [r3, #0]
    3e04:	ab0c      	add	r3, sp, #48	; 0x30
    3e06:	781b      	ldrb	r3, [r3, #0]
  packetNumBytes = packetSize;
    3e08:	4a1e      	ldr	r2, [pc, #120]	; (3e84 <sparkPacketSetup+0x94>)
    3e0a:	7017      	strb	r7, [r2, #0]
  packetRandom = randomData;
    3e0c:	4c1e      	ldr	r4, [pc, #120]	; (3e88 <sparkPacketSetup+0x98>)
    3e0e:	7023      	strb	r3, [r4, #0]
  
  startSPI();
    3e10:	4b1e      	ldr	r3, [pc, #120]	; (3e8c <sparkPacketSetup+0x9c>)
    3e12:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_PREAMBLEN); sendSPI(preambleSize); // PREAMBLEN, maximum 64
    3e14:	2073      	movs	r0, #115	; 0x73
    3e16:	4d1e      	ldr	r5, [pc, #120]	; (3e90 <sparkPacketSetup+0xa0>)
    3e18:	47a8      	blx	r5
    3e1a:	9803      	ldr	r0, [sp, #12]
    3e1c:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_TXPKTSIZE ); sendSPI(packetSize); // TXPKTSIZE
    3e1e:	207c      	movs	r0, #124	; 0x7c
    3e20:	47a8      	blx	r5
    3e22:	0038      	movs	r0, r7
    3e24:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_RXPKTSIZE ); sendSPI(packetSize); // RXPKTSIZE
    3e26:	207d      	movs	r0, #125	; 0x7d
    3e28:	47a8      	blx	r5
    3e2a:	0038      	movs	r0, r7
    3e2c:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_SYNCWORD8); sendSPI(syncWord / 256); // SYNBYTE
    3e2e:	2074      	movs	r0, #116	; 0x74
    3e30:	47a8      	blx	r5
    3e32:	0a30      	lsrs	r0, r6, #8
    3e34:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_SYNCWORD0); sendSPI(syncWord % 256); // SYNBYTE
    3e36:	2075      	movs	r0, #117	; 0x75
    3e38:	47a8      	blx	r5
    3e3a:	b2f0      	uxtb	r0, r6
    3e3c:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINNOILVL); sendSPI(minNoiLvl); // 
    3e3e:	2069      	movs	r0, #105	; 0x69
    3e40:	47a8      	blx	r5
    3e42:	9800      	ldr	r0, [sp, #0]
    3e44:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINPULAMP); sendSPI(minPulAmp); // 
    3e46:	206a      	movs	r0, #106	; 0x6a
    3e48:	47a8      	blx	r5
    3e4a:	9801      	ldr	r0, [sp, #4]
    3e4c:	47a8      	blx	r5
  sendSPI(SPI_WRITE | REG_MINSIGSTR); sendSPI(minSigStr); // 
    3e4e:	206b      	movs	r0, #107	; 0x6b
    3e50:	47a8      	blx	r5
    3e52:	9802      	ldr	r0, [sp, #8]
    3e54:	47a8      	blx	r5
  //sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10 | 0x08); // Data src to random LFSR
  if(packetRandom)
    3e56:	7823      	ldrb	r3, [r4, #0]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d10d      	bne.n	3e78 <sparkPacketSetup+0x88>
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10); // Data src to random LFSR
  }
  else
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x00);
    3e5c:	2070      	movs	r0, #112	; 0x70
    3e5e:	4c0c      	ldr	r4, [pc, #48]	; (3e90 <sparkPacketSetup+0xa0>)
    3e60:	47a0      	blx	r4
    3e62:	2000      	movs	r0, #0
    3e64:	47a0      	blx	r4
  }
  sendSPI(SPI_WRITE | REG_PREFRAME); sendSPI(0x1a); // Preamble check and relaxed syncword check
    3e66:	2072      	movs	r0, #114	; 0x72
    3e68:	4c09      	ldr	r4, [pc, #36]	; (3e90 <sparkPacketSetup+0xa0>)
    3e6a:	47a0      	blx	r4
    3e6c:	201a      	movs	r0, #26
    3e6e:	47a0      	blx	r4
  //sendSPI(SPI_WRITE | REG_MAXNOILVL); sendSPI(0x1b); // Put noise down a little bit

  stopSPI();
    3e70:	4b08      	ldr	r3, [pc, #32]	; (3e94 <sparkPacketSetup+0xa4>)
    3e72:	4798      	blx	r3
}
    3e74:	b005      	add	sp, #20
    3e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(0x10); // Data src to random LFSR
    3e78:	2070      	movs	r0, #112	; 0x70
    3e7a:	4c05      	ldr	r4, [pc, #20]	; (3e90 <sparkPacketSetup+0xa0>)
    3e7c:	47a0      	blx	r4
    3e7e:	2010      	movs	r0, #16
    3e80:	47a0      	blx	r4
    3e82:	e7f0      	b.n	3e66 <sparkPacketSetup+0x76>
    3e84:	20000c78 	.word	0x20000c78
    3e88:	20000c6c 	.word	0x20000c6c
    3e8c:	00002ed9 	.word	0x00002ed9
    3e90:	00002ef5 	.word	0x00002ef5
    3e94:	00002f99 	.word	0x00002f99

00003e98 <sparkSpectralSetup>:

void sparkSpectralSetup(unsigned char *mask)
{
    3e98:	b570      	push	{r4, r5, r6, lr}
    3e9a:	0005      	movs	r5, r0
	startSPI();
    3e9c:	4b08      	ldr	r3, [pc, #32]	; (3ec0 <sparkSpectralSetup+0x28>)
    3e9e:	4798      	blx	r3
	sendSPI(SPI_WRITE | SPI_BURST | REG_TXPATTERN0);
    3ea0:	20d0      	movs	r0, #208	; 0xd0
    3ea2:	4b08      	ldr	r3, [pc, #32]	; (3ec4 <sparkSpectralSetup+0x2c>)
    3ea4:	4798      	blx	r3
	for(unsigned char i=0;i<12;i++)
    3ea6:	2400      	movs	r4, #0
    3ea8:	e004      	b.n	3eb4 <sparkSpectralSetup+0x1c>
		sendSPI(mask[i]);	
    3eaa:	5d28      	ldrb	r0, [r5, r4]
    3eac:	4b05      	ldr	r3, [pc, #20]	; (3ec4 <sparkSpectralSetup+0x2c>)
    3eae:	4798      	blx	r3
	for(unsigned char i=0;i<12;i++)
    3eb0:	3401      	adds	r4, #1
    3eb2:	b2e4      	uxtb	r4, r4
    3eb4:	2c0b      	cmp	r4, #11
    3eb6:	d9f8      	bls.n	3eaa <sparkSpectralSetup+0x12>
	stopSPI();
    3eb8:	4b03      	ldr	r3, [pc, #12]	; (3ec8 <sparkSpectralSetup+0x30>)
    3eba:	4798      	blx	r3
}
    3ebc:	bd70      	pop	{r4, r5, r6, pc}
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	00002ed9 	.word	0x00002ed9
    3ec4:	00002ef5 	.word	0x00002ef5
    3ec8:	00002f99 	.word	0x00002f99

00003ecc <sparkPushTX>:

void sparkPushTX(unsigned char start, unsigned char stop)
{
    3ecc:	b570      	push	{r4, r5, r6, lr}
    3ece:	0005      	movs	r5, r0
    3ed0:	000c      	movs	r4, r1
	startSPI();	
    3ed2:	4b07      	ldr	r3, [pc, #28]	; (3ef0 <sparkPushTX+0x24>)
    3ed4:	4798      	blx	r3
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
    3ed6:	20ff      	movs	r0, #255	; 0xff
    3ed8:	4b06      	ldr	r3, [pc, #24]	; (3ef4 <sparkPushTX+0x28>)
    3eda:	4798      	blx	r3
	pushSPI(&txData[start], stop-start);
    3edc:	1b61      	subs	r1, r4, r5
    3ede:	b2c9      	uxtb	r1, r1
    3ee0:	4805      	ldr	r0, [pc, #20]	; (3ef8 <sparkPushTX+0x2c>)
    3ee2:	1828      	adds	r0, r5, r0
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <sparkPushTX+0x30>)
    3ee6:	4798      	blx	r3
	stopSPI();
    3ee8:	4b05      	ldr	r3, [pc, #20]	; (3f00 <sparkPushTX+0x34>)
    3eea:	4798      	blx	r3
}
    3eec:	bd70      	pop	{r4, r5, r6, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	00002ed9 	.word	0x00002ed9
    3ef4:	00002ef5 	.word	0x00002ef5
    3ef8:	20000be0 	.word	0x20000be0
    3efc:	00002f15 	.word	0x00002f15
    3f00:	00002f99 	.word	0x00002f99

00003f04 <sparkPullRX>:

void sparkPullRX(unsigned char start, unsigned char stop)
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	0005      	movs	r5, r0
    3f08:	000c      	movs	r4, r1
	startSPI();
    3f0a:	4b07      	ldr	r3, [pc, #28]	; (3f28 <sparkPullRX+0x24>)
    3f0c:	4798      	blx	r3
    sendSPI(SPI_BURST | REG_FIFO); 
    3f0e:	20bf      	movs	r0, #191	; 0xbf
    3f10:	4b06      	ldr	r3, [pc, #24]	; (3f2c <sparkPullRX+0x28>)
    3f12:	4798      	blx	r3
	pullSPI(&rxData[start], stop-start);		
    3f14:	1b61      	subs	r1, r4, r5
    3f16:	b2c9      	uxtb	r1, r1
    3f18:	4805      	ldr	r0, [pc, #20]	; (3f30 <sparkPullRX+0x2c>)
    3f1a:	1828      	adds	r0, r5, r0
    3f1c:	4b05      	ldr	r3, [pc, #20]	; (3f34 <sparkPullRX+0x30>)
    3f1e:	4798      	blx	r3
    stopSPI();	
    3f20:	4b05      	ldr	r3, [pc, #20]	; (3f38 <sparkPullRX+0x34>)
    3f22:	4798      	blx	r3
}
    3f24:	bd70      	pop	{r4, r5, r6, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	00002ed9 	.word	0x00002ed9
    3f2c:	00002ef5 	.word	0x00002ef5
    3f30:	20000b58 	.word	0x20000b58
    3f34:	00002f55 	.word	0x00002f55
    3f38:	00002f99 	.word	0x00002f99

00003f3c <sparkStartRadio>:

void sparkStartRadio()
{
    3f3c:	b570      	push	{r4, r5, r6, lr}
  clockGated = true;
    3f3e:	2201      	movs	r2, #1
    3f40:	4b45      	ldr	r3, [pc, #276]	; (4058 <sparkStartRadio+0x11c>)
    3f42:	701a      	strb	r2, [r3, #0]
  wakeupWasLast = false;
    3f44:	2200      	movs	r2, #0
    3f46:	4b45      	ldr	r3, [pc, #276]	; (405c <sparkStartRadio+0x120>)
    3f48:	701a      	strb	r2, [r3, #0]
  enableClockGate();
    3f4a:	4b45      	ldr	r3, [pc, #276]	; (4060 <sparkStartRadio+0x124>)
    3f4c:	4798      	blx	r3
  
  // Start the cycle
  startSPI();
    3f4e:	4b45      	ldr	r3, [pc, #276]	; (4064 <sparkStartRadio+0x128>)
    3f50:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(sleepCfg);
    3f52:	2044      	movs	r0, #68	; 0x44
    3f54:	4c44      	ldr	r4, [pc, #272]	; (4068 <sparkStartRadio+0x12c>)
    3f56:	47a0      	blx	r4
    3f58:	4b44      	ldr	r3, [pc, #272]	; (406c <sparkStartRadio+0x130>)
    3f5a:	7818      	ldrb	r0, [r3, #0]
    3f5c:	47a0      	blx	r4
  stopSPI();
    3f5e:	4b44      	ldr	r3, [pc, #272]	; (4070 <sparkStartRadio+0x134>)
    3f60:	4798      	blx	r3
  
  if(sleepingMode == SPARK_SLEEP_NONE)
    3f62:	4b44      	ldr	r3, [pc, #272]	; (4074 <sparkStartRadio+0x138>)
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d12f      	bne.n	3fca <sparkStartRadio+0x8e>
  {
    switch(mode)
    3f6a:	4b43      	ldr	r3, [pc, #268]	; (4078 <sparkStartRadio+0x13c>)
    3f6c:	781b      	ldrb	r3, [r3, #0]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d013      	beq.n	3f9a <sparkStartRadio+0x5e>
    3f72:	2b01      	cmp	r3, #1
    3f74:	d01b      	beq.n	3fae <sparkStartRadio+0x72>
    else
      cycling = false;
  }

  // Flush TX if required
  startSPI();
    3f76:	4b3b      	ldr	r3, [pc, #236]	; (4064 <sparkStartRadio+0x128>)
    3f78:	4798      	blx	r3
  //sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_FLUSHTX | BIT_FLUSHRX);
  stopSPI();
    3f7a:	4b3d      	ldr	r3, [pc, #244]	; (4070 <sparkStartRadio+0x134>)
    3f7c:	4798      	blx	r3
  if(mode == SPARK_MODE_TX)
    3f7e:	4b3e      	ldr	r3, [pc, #248]	; (4078 <sparkStartRadio+0x13c>)
    3f80:	781b      	ldrb	r3, [r3, #0]
    3f82:	2b01      	cmp	r3, #1
    3f84:	d050      	beq.n	4028 <sparkStartRadio+0xec>
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
	pushSPI(txData, packetNumBytes);
	stopSPI();	
  }
	
  enableExtInt();
    3f86:	4b3d      	ldr	r3, [pc, #244]	; (407c <sparkStartRadio+0x140>)
    3f88:	4798      	blx	r3

  // Enable watchdog
  if(sleepingMode != SPARK_SLEEP_NONE)
    3f8a:	4b3a      	ldr	r3, [pc, #232]	; (4074 <sparkStartRadio+0x138>)
    3f8c:	781b      	ldrb	r3, [r3, #0]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d15e      	bne.n	4050 <sparkStartRadio+0x114>
	  wdEnable();
	  
  running = true;
    3f92:	2201      	movs	r2, #1
    3f94:	4b3a      	ldr	r3, [pc, #232]	; (4080 <sparkStartRadio+0x144>)
    3f96:	701a      	strb	r2, [r3, #0]
}
    3f98:	bd70      	pop	{r4, r5, r6, pc}
          startSPI();
    3f9a:	4b32      	ldr	r3, [pc, #200]	; (4064 <sparkStartRadio+0x128>)
    3f9c:	4798      	blx	r3
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_RXMODE);
    3f9e:	205f      	movs	r0, #95	; 0x5f
    3fa0:	4c31      	ldr	r4, [pc, #196]	; (4068 <sparkStartRadio+0x12c>)
    3fa2:	47a0      	blx	r4
    3fa4:	2020      	movs	r0, #32
    3fa6:	47a0      	blx	r4
          stopSPI();
    3fa8:	4b31      	ldr	r3, [pc, #196]	; (4070 <sparkStartRadio+0x134>)
    3faa:	4798      	blx	r3
          break;
    3fac:	e7e3      	b.n	3f76 <sparkStartRadio+0x3a>
          startSPI();
    3fae:	4b2d      	ldr	r3, [pc, #180]	; (4064 <sparkStartRadio+0x128>)
    3fb0:	4798      	blx	r3
          sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    3fb2:	2040      	movs	r0, #64	; 0x40
    3fb4:	4c2c      	ldr	r4, [pc, #176]	; (4068 <sparkStartRadio+0x12c>)
    3fb6:	47a0      	blx	r4
    3fb8:	2000      	movs	r0, #0
    3fba:	47a0      	blx	r4
          sendSPI(SPI_WRITE | REG_INT2); sendSPI(BIT_XOTIMER);
    3fbc:	2041      	movs	r0, #65	; 0x41
    3fbe:	47a0      	blx	r4
    3fc0:	2040      	movs	r0, #64	; 0x40
    3fc2:	47a0      	blx	r4
          stopSPI();
    3fc4:	4b2a      	ldr	r3, [pc, #168]	; (4070 <sparkStartRadio+0x134>)
    3fc6:	4798      	blx	r3
          break;
    3fc8:	e7d5      	b.n	3f76 <sparkStartRadio+0x3a>
    startSPI();
    3fca:	4b26      	ldr	r3, [pc, #152]	; (4064 <sparkStartRadio+0x128>)
    3fcc:	4798      	blx	r3
    sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x01); // Autowakeup
    3fce:	2045      	movs	r0, #69	; 0x45
    3fd0:	4c25      	ldr	r4, [pc, #148]	; (4068 <sparkStartRadio+0x12c>)
    3fd2:	47a0      	blx	r4
    3fd4:	2001      	movs	r0, #1
    3fd6:	47a0      	blx	r4
		sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    3fd8:	2040      	movs	r0, #64	; 0x40
    3fda:	47a0      	blx	r4
    3fdc:	2058      	movs	r0, #88	; 0x58
    3fde:	47a0      	blx	r4
    sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT);
    3fe0:	2041      	movs	r0, #65	; 0x41
    3fe2:	47a0      	blx	r4
    3fe4:	2020      	movs	r0, #32
    3fe6:	47a0      	blx	r4
    switch(mode)
    3fe8:	4b23      	ldr	r3, [pc, #140]	; (4078 <sparkStartRadio+0x13c>)
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d00b      	beq.n	4008 <sparkStartRadio+0xcc>
    3ff0:	2b01      	cmp	r3, #1
    3ff2:	d00f      	beq.n	4014 <sparkStartRadio+0xd8>
    stopSPI();
    3ff4:	4b1e      	ldr	r3, [pc, #120]	; (4070 <sparkStartRadio+0x134>)
    3ff6:	4798      	blx	r3
    if(!bidirectional)
    3ff8:	4b22      	ldr	r3, [pc, #136]	; (4084 <sparkStartRadio+0x148>)
    3ffa:	781b      	ldrb	r3, [r3, #0]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d10f      	bne.n	4020 <sparkStartRadio+0xe4>
      cycling = true;
    4000:	2201      	movs	r2, #1
    4002:	4b21      	ldr	r3, [pc, #132]	; (4088 <sparkStartRadio+0x14c>)
    4004:	701a      	strb	r2, [r3, #0]
    4006:	e7b6      	b.n	3f76 <sparkStartRadio+0x3a>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    4008:	205f      	movs	r0, #95	; 0x5f
    400a:	4c17      	ldr	r4, [pc, #92]	; (4068 <sparkStartRadio+0x12c>)
    400c:	47a0      	blx	r4
    400e:	2024      	movs	r0, #36	; 0x24
    4010:	47a0      	blx	r4
          break;
    4012:	e7ef      	b.n	3ff4 <sparkStartRadio+0xb8>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    4014:	205f      	movs	r0, #95	; 0x5f
    4016:	4c14      	ldr	r4, [pc, #80]	; (4068 <sparkStartRadio+0x12c>)
    4018:	47a0      	blx	r4
    401a:	2014      	movs	r0, #20
    401c:	47a0      	blx	r4
          break;
    401e:	e7e9      	b.n	3ff4 <sparkStartRadio+0xb8>
      cycling = false;
    4020:	2200      	movs	r2, #0
    4022:	4b19      	ldr	r3, [pc, #100]	; (4088 <sparkStartRadio+0x14c>)
    4024:	701a      	strb	r2, [r3, #0]
    4026:	e7a6      	b.n	3f76 <sparkStartRadio+0x3a>
	callbackPacketSend(packetNumBytes);
    4028:	4d18      	ldr	r5, [pc, #96]	; (408c <sparkStartRadio+0x150>)
    402a:	7828      	ldrb	r0, [r5, #0]
    402c:	4b18      	ldr	r3, [pc, #96]	; (4090 <sparkStartRadio+0x154>)
    402e:	4798      	blx	r3
	startSPI();
    4030:	4b0c      	ldr	r3, [pc, #48]	; (4064 <sparkStartRadio+0x128>)
    4032:	4798      	blx	r3
	sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    4034:	201f      	movs	r0, #31
    4036:	4c0c      	ldr	r4, [pc, #48]	; (4068 <sparkStartRadio+0x12c>)
    4038:	47a0      	blx	r4
    403a:	2001      	movs	r0, #1
    403c:	47a0      	blx	r4
	sendSPI(SPI_BURST | SPI_WRITE | REG_FIFO);
    403e:	20ff      	movs	r0, #255	; 0xff
    4040:	47a0      	blx	r4
	pushSPI(txData, packetNumBytes);
    4042:	7829      	ldrb	r1, [r5, #0]
    4044:	4813      	ldr	r0, [pc, #76]	; (4094 <sparkStartRadio+0x158>)
    4046:	4b14      	ldr	r3, [pc, #80]	; (4098 <sparkStartRadio+0x15c>)
    4048:	4798      	blx	r3
	stopSPI();	
    404a:	4b09      	ldr	r3, [pc, #36]	; (4070 <sparkStartRadio+0x134>)
    404c:	4798      	blx	r3
    404e:	e79a      	b.n	3f86 <sparkStartRadio+0x4a>
	  wdEnable();
    4050:	4b12      	ldr	r3, [pc, #72]	; (409c <sparkStartRadio+0x160>)
    4052:	4798      	blx	r3
    4054:	e79d      	b.n	3f92 <sparkStartRadio+0x56>
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	20000c6e 	.word	0x20000c6e
    405c:	20000bda 	.word	0x20000bda
    4060:	00002e91 	.word	0x00002e91
    4064:	00002ed9 	.word	0x00002ed9
    4068:	00002ef5 	.word	0x00002ef5
    406c:	20000c75 	.word	0x20000c75
    4070:	00002f99 	.word	0x00002f99
    4074:	20000bdc 	.word	0x20000bdc
    4078:	20000c6d 	.word	0x20000c6d
    407c:	00002e55 	.word	0x00002e55
    4080:	20000c60 	.word	0x20000c60
    4084:	20000c74 	.word	0x20000c74
    4088:	20000c61 	.word	0x20000c61
    408c:	20000c78 	.word	0x20000c78
    4090:	00000891 	.word	0x00000891
    4094:	20000be0 	.word	0x20000be0
    4098:	00002f15 	.word	0x00002f15
    409c:	00003505 	.word	0x00003505

000040a0 <sparkGetMode>:
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
}

unsigned char sparkGetMode()
{
  return mode;
    40a0:	4b01      	ldr	r3, [pc, #4]	; (40a8 <sparkGetMode+0x8>)
    40a2:	7818      	ldrb	r0, [r3, #0]
}
    40a4:	4770      	bx	lr
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	20000c6d 	.word	0x20000c6d

000040ac <sparkChangeMode>:

void sparkChangeMode(unsigned char newMode)
{
    40ac:	b570      	push	{r4, r5, r6, lr}
  unsigned char b;
  
  mode = newMode;
    40ae:	4d0f      	ldr	r5, [pc, #60]	; (40ec <sparkChangeMode+0x40>)
    40b0:	7028      	strb	r0, [r5, #0]
  startSPI();
    40b2:	4b0f      	ldr	r3, [pc, #60]	; (40f0 <sparkChangeMode+0x44>)
    40b4:	4798      	blx	r3
  sendSPI(REG_MAINCTRL); b = sendSPI(0x00);
    40b6:	2030      	movs	r0, #48	; 0x30
    40b8:	4c0e      	ldr	r4, [pc, #56]	; (40f4 <sparkChangeMode+0x48>)
    40ba:	47a0      	blx	r4
    40bc:	2000      	movs	r0, #0
    40be:	47a0      	blx	r4
    40c0:	0004      	movs	r4, r0
  if(mode == SPARK_MODE_RX)
    40c2:	782b      	ldrb	r3, [r5, #0]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d009      	beq.n	40dc <sparkChangeMode+0x30>
    //cycling = true;
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b | 0x08); // Data src to random LFSR
  }
  else
  {
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b & (~0x08));
    40c8:	2070      	movs	r0, #112	; 0x70
    40ca:	4d0a      	ldr	r5, [pc, #40]	; (40f4 <sparkChangeMode+0x48>)
    40cc:	47a8      	blx	r5
    40ce:	2308      	movs	r3, #8
    40d0:	439c      	bics	r4, r3
    40d2:	b2e0      	uxtb	r0, r4
    40d4:	47a8      	blx	r5
  }
  stopSPI();
    40d6:	4b08      	ldr	r3, [pc, #32]	; (40f8 <sparkChangeMode+0x4c>)
    40d8:	4798      	blx	r3
}
    40da:	bd70      	pop	{r4, r5, r6, pc}
    sendSPI(SPI_WRITE | REG_MAINCTRL); sendSPI(b | 0x08); // Data src to random LFSR
    40dc:	2070      	movs	r0, #112	; 0x70
    40de:	4d05      	ldr	r5, [pc, #20]	; (40f4 <sparkChangeMode+0x48>)
    40e0:	47a8      	blx	r5
    40e2:	2008      	movs	r0, #8
    40e4:	4320      	orrs	r0, r4
    40e6:	b2c0      	uxtb	r0, r0
    40e8:	47a8      	blx	r5
    40ea:	e7f4      	b.n	40d6 <sparkChangeMode+0x2a>
    40ec:	20000c6d 	.word	0x20000c6d
    40f0:	00002ed9 	.word	0x00002ed9
    40f4:	00002ef5 	.word	0x00002ef5
    40f8:	00002f99 	.word	0x00002f99

000040fc <callbackExtInterrupt>:
{
    40fc:	b570      	push	{r4, r5, r6, lr}
  startSPI();
    40fe:	4bc2      	ldr	r3, [pc, #776]	; (4408 <callbackExtInterrupt+0x30c>)
    4100:	4798      	blx	r3
  int1 = sendSPI(REG_INT2); int2 = sendSPI(0x00); // Clear interrupt
    4102:	2001      	movs	r0, #1
    4104:	4dc1      	ldr	r5, [pc, #772]	; (440c <callbackExtInterrupt+0x310>)
    4106:	47a8      	blx	r5
    4108:	0004      	movs	r4, r0
    410a:	2000      	movs	r0, #0
    410c:	47a8      	blx	r5
    410e:	0005      	movs	r5, r0
  stopSPI();
    4110:	4bbf      	ldr	r3, [pc, #764]	; (4410 <callbackExtInterrupt+0x314>)
    4112:	4798      	blx	r3
  if(int1 & 0x01)
    4114:	07e3      	lsls	r3, r4, #31
    4116:	d51d      	bpl.n	4154 <callbackExtInterrupt+0x58>
	sparkCRCfail = true;
    4118:	2201      	movs	r2, #1
    411a:	4bbe      	ldr	r3, [pc, #760]	; (4414 <callbackExtInterrupt+0x318>)
    411c:	701a      	strb	r2, [r3, #0]
  if(int1 & BIT_WAKEUP)
    411e:	0663      	lsls	r3, r4, #25
    4120:	d528      	bpl.n	4174 <callbackExtInterrupt+0x78>
	sparkLastInt = 1;
    4122:	2201      	movs	r2, #1
    4124:	4bbc      	ldr	r3, [pc, #752]	; (4418 <callbackExtInterrupt+0x31c>)
    4126:	701a      	strb	r2, [r3, #0]
    wakeupWasLast = !wakeupWasLast;
    4128:	4abc      	ldr	r2, [pc, #752]	; (441c <callbackExtInterrupt+0x320>)
    412a:	7813      	ldrb	r3, [r2, #0]
    412c:	2101      	movs	r1, #1
    412e:	404b      	eors	r3, r1
    4130:	7013      	strb	r3, [r2, #0]
    if(!clockGated) // We missed a XOTIMER event
    4132:	4bbb      	ldr	r3, [pc, #748]	; (4420 <callbackExtInterrupt+0x324>)
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d158      	bne.n	41ec <callbackExtInterrupt+0xf0>
	  enableClockGate();
    413a:	4bba      	ldr	r3, [pc, #744]	; (4424 <callbackExtInterrupt+0x328>)
    413c:	4798      	blx	r3
      startSPI();
    413e:	4bb2      	ldr	r3, [pc, #712]	; (4408 <callbackExtInterrupt+0x30c>)
    4140:	4798      	blx	r3
      switch(mode)
    4142:	4bb9      	ldr	r3, [pc, #740]	; (4428 <callbackExtInterrupt+0x32c>)
    4144:	781b      	ldrb	r3, [r3, #0]
    4146:	2b00      	cmp	r3, #0
    4148:	d008      	beq.n	415c <callbackExtInterrupt+0x60>
    414a:	2b01      	cmp	r3, #1
    414c:	d00c      	beq.n	4168 <callbackExtInterrupt+0x6c>
      stopSPI();
    414e:	4bb0      	ldr	r3, [pc, #704]	; (4410 <callbackExtInterrupt+0x314>)
    4150:	4798      	blx	r3
    4152:	e04b      	b.n	41ec <callbackExtInterrupt+0xf0>
	sparkCRCfail = false;
    4154:	2200      	movs	r2, #0
    4156:	4baf      	ldr	r3, [pc, #700]	; (4414 <callbackExtInterrupt+0x318>)
    4158:	701a      	strb	r2, [r3, #0]
    415a:	e7e0      	b.n	411e <callbackExtInterrupt+0x22>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    415c:	205f      	movs	r0, #95	; 0x5f
    415e:	4cab      	ldr	r4, [pc, #684]	; (440c <callbackExtInterrupt+0x310>)
    4160:	47a0      	blx	r4
    4162:	2024      	movs	r0, #36	; 0x24
    4164:	47a0      	blx	r4
          break;
    4166:	e7f2      	b.n	414e <callbackExtInterrupt+0x52>
          sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    4168:	205f      	movs	r0, #95	; 0x5f
    416a:	4ca8      	ldr	r4, [pc, #672]	; (440c <callbackExtInterrupt+0x310>)
    416c:	47a0      	blx	r4
    416e:	2014      	movs	r0, #20
    4170:	47a0      	blx	r4
          break;
    4172:	e7ec      	b.n	414e <callbackExtInterrupt+0x52>
  else if( (int1 & BIT_TXEND) || (int1 & BIT_NEWPKT) || (int2 & BIT_RXTOUT) )
    4174:	2318      	movs	r3, #24
    4176:	4223      	tst	r3, r4
    4178:	d102      	bne.n	4180 <callbackExtInterrupt+0x84>
    417a:	06ab      	lsls	r3, r5, #26
    417c:	d400      	bmi.n	4180 <callbackExtInterrupt+0x84>
    417e:	e17b      	b.n	4478 <callbackExtInterrupt+0x37c>
	  sparkLastInt = 2;
    4180:	2202      	movs	r2, #2
    4182:	4ba5      	ldr	r3, [pc, #660]	; (4418 <callbackExtInterrupt+0x31c>)
    4184:	701a      	strb	r2, [r3, #0]
    if(clockGated)
    4186:	4ba6      	ldr	r3, [pc, #664]	; (4420 <callbackExtInterrupt+0x324>)
    4188:	781b      	ldrb	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	d006      	beq.n	419c <callbackExtInterrupt+0xa0>
  switch(mode)
    418e:	4ba6      	ldr	r3, [pc, #664]	; (4428 <callbackExtInterrupt+0x32c>)
    4190:	781b      	ldrb	r3, [r3, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d036      	beq.n	4204 <callbackExtInterrupt+0x108>
    4196:	2b01      	cmp	r3, #1
    4198:	d100      	bne.n	419c <callbackExtInterrupt+0xa0>
    419a:	e0f3      	b.n	4384 <callbackExtInterrupt+0x288>
	if(bidirectional)
    419c:	4ba3      	ldr	r3, [pc, #652]	; (442c <callbackExtInterrupt+0x330>)
    419e:	781b      	ldrb	r3, [r3, #0]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d007      	beq.n	41b4 <callbackExtInterrupt+0xb8>
      if(mode == SPARK_MODE_RX)
    41a4:	4ba0      	ldr	r3, [pc, #640]	; (4428 <callbackExtInterrupt+0x32c>)
    41a6:	781b      	ldrb	r3, [r3, #0]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d000      	beq.n	41ae <callbackExtInterrupt+0xb2>
    41ac:	e102      	b.n	43b4 <callbackExtInterrupt+0x2b8>
        sparkChangeMode(SPARK_MODE_TX);
    41ae:	2001      	movs	r0, #1
    41b0:	4b9f      	ldr	r3, [pc, #636]	; (4430 <callbackExtInterrupt+0x334>)
    41b2:	4798      	blx	r3
    wakeupWasLast = false;
    41b4:	2200      	movs	r2, #0
    41b6:	4b99      	ldr	r3, [pc, #612]	; (441c <callbackExtInterrupt+0x320>)
    41b8:	701a      	strb	r2, [r3, #0]
    startSPI();
    41ba:	4b93      	ldr	r3, [pc, #588]	; (4408 <callbackExtInterrupt+0x30c>)
    41bc:	4798      	blx	r3
    switch(mode)
    41be:	4b9a      	ldr	r3, [pc, #616]	; (4428 <callbackExtInterrupt+0x32c>)
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d100      	bne.n	41c8 <callbackExtInterrupt+0xcc>
    41c6:	e0f9      	b.n	43bc <callbackExtInterrupt+0x2c0>
    41c8:	2b01      	cmp	r3, #1
    41ca:	d100      	bne.n	41ce <callbackExtInterrupt+0xd2>
    41cc:	e0fc      	b.n	43c8 <callbackExtInterrupt+0x2cc>
    if(sleepingMode == SPARK_SLEEP_DEEP)
    41ce:	4b99      	ldr	r3, [pc, #612]	; (4434 <callbackExtInterrupt+0x338>)
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	2b03      	cmp	r3, #3
    41d4:	d100      	bne.n	41d8 <callbackExtInterrupt+0xdc>
    41d6:	e0fd      	b.n	43d4 <callbackExtInterrupt+0x2d8>
    else if(sleepingMode != SPARK_SLEEP_NONE)
    41d8:	2b00      	cmp	r3, #0
    41da:	d000      	beq.n	41de <callbackExtInterrupt+0xe2>
    41dc:	e104      	b.n	43e8 <callbackExtInterrupt+0x2ec>
    stopSPI();
    41de:	4b8c      	ldr	r3, [pc, #560]	; (4410 <callbackExtInterrupt+0x314>)
    41e0:	4798      	blx	r3
    if(sleepingMode == SPARK_SLEEP_DEEP)
    41e2:	4b94      	ldr	r3, [pc, #592]	; (4434 <callbackExtInterrupt+0x338>)
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	2b03      	cmp	r3, #3
    41e8:	d100      	bne.n	41ec <callbackExtInterrupt+0xf0>
    41ea:	e107      	b.n	43fc <callbackExtInterrupt+0x300>
  startSPI();
    41ec:	4b86      	ldr	r3, [pc, #536]	; (4408 <callbackExtInterrupt+0x30c>)
    41ee:	4798      	blx	r3
  int1 = sendSPI(REG_INT2); int2 = sendSPI(0x00); // Clear interrupt
    41f0:	2001      	movs	r0, #1
    41f2:	4c86      	ldr	r4, [pc, #536]	; (440c <callbackExtInterrupt+0x310>)
    41f4:	47a0      	blx	r4
    41f6:	2000      	movs	r0, #0
    41f8:	47a0      	blx	r4
  stopSPI();
    41fa:	4b85      	ldr	r3, [pc, #532]	; (4410 <callbackExtInterrupt+0x314>)
    41fc:	4798      	blx	r3
  wdReset();
    41fe:	4b8e      	ldr	r3, [pc, #568]	; (4438 <callbackExtInterrupt+0x33c>)
    4200:	4798      	blx	r3
}
    4202:	bd70      	pop	{r4, r5, r6, pc}
        if(cycling)
    4204:	4b8d      	ldr	r3, [pc, #564]	; (443c <callbackExtInterrupt+0x340>)
    4206:	781b      	ldrb	r3, [r3, #0]
    4208:	2b00      	cmp	r3, #0
    420a:	d05b      	beq.n	42c4 <callbackExtInterrupt+0x1c8>
          applySleepOffset(-1); // Cycle next frame
    420c:	2001      	movs	r0, #1
    420e:	4240      	negs	r0, r0
    4210:	4b8b      	ldr	r3, [pc, #556]	; (4440 <callbackExtInterrupt+0x344>)
    4212:	4798      	blx	r3
        startSPI();
    4214:	4b7c      	ldr	r3, [pc, #496]	; (4408 <callbackExtInterrupt+0x30c>)
    4216:	4798      	blx	r3
        sendSPI(REG_RXBUF);  numBytes = sendSPI(0x00); 
    4218:	2003      	movs	r0, #3
    421a:	4c7c      	ldr	r4, [pc, #496]	; (440c <callbackExtInterrupt+0x310>)
    421c:	47a0      	blx	r4
    421e:	2000      	movs	r0, #0
    4220:	47a0      	blx	r4
    4222:	0004      	movs	r4, r0
		stopSPI();
    4224:	4b7a      	ldr	r3, [pc, #488]	; (4410 <callbackExtInterrupt+0x314>)
    4226:	4798      	blx	r3
        reception = callbackPacketReceived(numBytes); // See if packet is correct		
    4228:	0020      	movs	r0, r4
    422a:	4b86      	ldr	r3, [pc, #536]	; (4444 <callbackExtInterrupt+0x348>)
    422c:	4798      	blx	r3
    422e:	0005      	movs	r5, r0
        if(cycling)
    4230:	4b82      	ldr	r3, [pc, #520]	; (443c <callbackExtInterrupt+0x340>)
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2b00      	cmp	r3, #0
    4236:	d049      	beq.n	42cc <callbackExtInterrupt+0x1d0>
            lostPackets = 0;
    4238:	2200      	movs	r2, #0
    423a:	4b83      	ldr	r3, [pc, #524]	; (4448 <callbackExtInterrupt+0x34c>)
    423c:	701a      	strb	r2, [r3, #0]
        if(lostPackets > 100 && !(bidirectional && master)) // Link is lost, don't care if master and bidirectional
    423e:	4b82      	ldr	r3, [pc, #520]	; (4448 <callbackExtInterrupt+0x34c>)
    4240:	781b      	ldrb	r3, [r3, #0]
    4242:	2b64      	cmp	r3, #100	; 0x64
    4244:	d90f      	bls.n	4266 <callbackExtInterrupt+0x16a>
    4246:	4b79      	ldr	r3, [pc, #484]	; (442c <callbackExtInterrupt+0x330>)
    4248:	781b      	ldrb	r3, [r3, #0]
    424a:	2b00      	cmp	r3, #0
    424c:	d003      	beq.n	4256 <callbackExtInterrupt+0x15a>
    424e:	4b7f      	ldr	r3, [pc, #508]	; (444c <callbackExtInterrupt+0x350>)
    4250:	781b      	ldrb	r3, [r3, #0]
    4252:	2b00      	cmp	r3, #0
    4254:	d107      	bne.n	4266 <callbackExtInterrupt+0x16a>
          cycling = true;
    4256:	2201      	movs	r2, #1
    4258:	4b78      	ldr	r3, [pc, #480]	; (443c <callbackExtInterrupt+0x340>)
    425a:	701a      	strb	r2, [r3, #0]
          lostPackets = 0;
    425c:	2200      	movs	r2, #0
    425e:	4b7a      	ldr	r3, [pc, #488]	; (4448 <callbackExtInterrupt+0x34c>)
    4260:	701a      	strb	r2, [r3, #0]
          callbackLinkLost();
    4262:	4b7b      	ldr	r3, [pc, #492]	; (4450 <callbackExtInterrupt+0x354>)
    4264:	4798      	blx	r3
        startSPI();
    4266:	4b68      	ldr	r3, [pc, #416]	; (4408 <callbackExtInterrupt+0x30c>)
    4268:	4798      	blx	r3
        sendSPI(REG_RXWAITED8); rxWaited = sendSPI(0x00);
    426a:	2020      	movs	r0, #32
    426c:	4e67      	ldr	r6, [pc, #412]	; (440c <callbackExtInterrupt+0x310>)
    426e:	47b0      	blx	r6
    4270:	2000      	movs	r0, #0
    4272:	47b0      	blx	r6
    4274:	b280      	uxth	r0, r0
        rxWaited = rxWaited << 8;
    4276:	0200      	lsls	r0, r0, #8
    4278:	b284      	uxth	r4, r0
        sendSPI(REG_RXWAITED0); rxWaited |= sendSPI(0x00);
    427a:	2021      	movs	r0, #33	; 0x21
    427c:	47b0      	blx	r6
    427e:	2000      	movs	r0, #0
    4280:	47b0      	blx	r6
    4282:	b280      	uxth	r0, r0
    4284:	4304      	orrs	r4, r0
		rxWaited = rxWaited >> 1; // Offset to remove bit 0 (which is not used)
    4286:	0864      	lsrs	r4, r4, #1
		if(reception)
    4288:	2d00      	cmp	r5, #0
    428a:	d12a      	bne.n	42e2 <callbackExtInterrupt+0x1e6>
        stopSPI();
    428c:	4b60      	ldr	r3, [pc, #384]	; (4410 <callbackExtInterrupt+0x314>)
    428e:	4798      	blx	r3
        if(reception && !(bidirectional && master))
    4290:	2d00      	cmp	r5, #0
    4292:	d059      	beq.n	4348 <callbackExtInterrupt+0x24c>
    4294:	4b65      	ldr	r3, [pc, #404]	; (442c <callbackExtInterrupt+0x330>)
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	2b00      	cmp	r3, #0
    429a:	d003      	beq.n	42a4 <callbackExtInterrupt+0x1a8>
    429c:	4a6b      	ldr	r2, [pc, #428]	; (444c <callbackExtInterrupt+0x350>)
    429e:	7812      	ldrb	r2, [r2, #0]
    42a0:	2a00      	cmp	r2, #0
    42a2:	d151      	bne.n	4348 <callbackExtInterrupt+0x24c>
          if(cycling)
    42a4:	4a65      	ldr	r2, [pc, #404]	; (443c <callbackExtInterrupt+0x340>)
    42a6:	7812      	ldrb	r2, [r2, #0]
    42a8:	2a00      	cmp	r2, #0
    42aa:	d02a      	beq.n	4302 <callbackExtInterrupt+0x206>
            cycling = false; // We have locked on*/
    42ac:	2100      	movs	r1, #0
    42ae:	4a63      	ldr	r2, [pc, #396]	; (443c <callbackExtInterrupt+0x340>)
    42b0:	7011      	strb	r1, [r2, #0]
            if(!bidirectional)
    42b2:	2b00      	cmp	r3, #0
    42b4:	d14c      	bne.n	4350 <callbackExtInterrupt+0x254>
              adjusting = true;
    42b6:	2201      	movs	r2, #1
    42b8:	4b66      	ldr	r3, [pc, #408]	; (4454 <callbackExtInterrupt+0x358>)
    42ba:	701a      	strb	r2, [r3, #0]
              applySleepOffset(1); // Step back to good frame
    42bc:	2001      	movs	r0, #1
    42be:	4b60      	ldr	r3, [pc, #384]	; (4440 <callbackExtInterrupt+0x344>)
    42c0:	4798      	blx	r3
    42c2:	e045      	b.n	4350 <callbackExtInterrupt+0x254>
          applySleepOffset(0); // Cycle next frame
    42c4:	2000      	movs	r0, #0
    42c6:	4b5e      	ldr	r3, [pc, #376]	; (4440 <callbackExtInterrupt+0x344>)
    42c8:	4798      	blx	r3
    42ca:	e7a3      	b.n	4214 <callbackExtInterrupt+0x118>
        else if(reception)
    42cc:	2800      	cmp	r0, #0
    42ce:	d003      	beq.n	42d8 <callbackExtInterrupt+0x1dc>
          lostPackets = 0; 
    42d0:	2200      	movs	r2, #0
    42d2:	4b5d      	ldr	r3, [pc, #372]	; (4448 <callbackExtInterrupt+0x34c>)
    42d4:	701a      	strb	r2, [r3, #0]
    42d6:	e7b2      	b.n	423e <callbackExtInterrupt+0x142>
          lostPackets++;
    42d8:	4a5b      	ldr	r2, [pc, #364]	; (4448 <callbackExtInterrupt+0x34c>)
    42da:	7813      	ldrb	r3, [r2, #0]
    42dc:	3301      	adds	r3, #1
    42de:	7013      	strb	r3, [r2, #0]
    42e0:	e7ad      	b.n	423e <callbackExtInterrupt+0x142>
			 sendSPI(REG_RSSI); sparkPacketRSSI = sendSPI(0x00);
    42e2:	2022      	movs	r0, #34	; 0x22
    42e4:	4e49      	ldr	r6, [pc, #292]	; (440c <callbackExtInterrupt+0x310>)
    42e6:	47b0      	blx	r6
    42e8:	2000      	movs	r0, #0
    42ea:	47b0      	blx	r6
    42ec:	4b5a      	ldr	r3, [pc, #360]	; (4458 <callbackExtInterrupt+0x35c>)
    42ee:	7018      	strb	r0, [r3, #0]
			 sendSPI(REG_MAXNOILVL); sparkPacketNSSI = sendSPI(0x00);
    42f0:	2028      	movs	r0, #40	; 0x28
    42f2:	47b0      	blx	r6
    42f4:	2000      	movs	r0, #0
    42f6:	47b0      	blx	r6
    42f8:	4b58      	ldr	r3, [pc, #352]	; (445c <callbackExtInterrupt+0x360>)
    42fa:	7018      	strb	r0, [r3, #0]
			 sparkPacketRXWaited = rxWaited;
    42fc:	4b58      	ldr	r3, [pc, #352]	; (4460 <callbackExtInterrupt+0x364>)
    42fe:	801c      	strh	r4, [r3, #0]
    4300:	e7c4      	b.n	428c <callbackExtInterrupt+0x190>
          else if(!adjusting)
    4302:	4b54      	ldr	r3, [pc, #336]	; (4454 <callbackExtInterrupt+0x358>)
    4304:	781b      	ldrb	r3, [r3, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d117      	bne.n	433a <callbackExtInterrupt+0x23e>
            if(rxWaited > (725))
    430a:	4b56      	ldr	r3, [pc, #344]	; (4464 <callbackExtInterrupt+0x368>)
    430c:	429c      	cmp	r4, r3
    430e:	d809      	bhi.n	4324 <callbackExtInterrupt+0x228>
            else if(rxWaited < (100))
    4310:	2c63      	cmp	r4, #99	; 0x63
    4312:	d80e      	bhi.n	4332 <callbackExtInterrupt+0x236>
              applySleepOffset(-1);
    4314:	2001      	movs	r0, #1
    4316:	4240      	negs	r0, r0
    4318:	4b49      	ldr	r3, [pc, #292]	; (4440 <callbackExtInterrupt+0x344>)
    431a:	4798      	blx	r3
              adjusting = true;
    431c:	2201      	movs	r2, #1
    431e:	4b4d      	ldr	r3, [pc, #308]	; (4454 <callbackExtInterrupt+0x358>)
    4320:	701a      	strb	r2, [r3, #0]
    4322:	e015      	b.n	4350 <callbackExtInterrupt+0x254>
              applySleepOffset(1);
    4324:	2001      	movs	r0, #1
    4326:	4b46      	ldr	r3, [pc, #280]	; (4440 <callbackExtInterrupt+0x344>)
    4328:	4798      	blx	r3
              adjusting = true;
    432a:	2201      	movs	r2, #1
    432c:	4b49      	ldr	r3, [pc, #292]	; (4454 <callbackExtInterrupt+0x358>)
    432e:	701a      	strb	r2, [r3, #0]
    4330:	e00e      	b.n	4350 <callbackExtInterrupt+0x254>
              applySleepOffset(0);          
    4332:	2000      	movs	r0, #0
    4334:	4b42      	ldr	r3, [pc, #264]	; (4440 <callbackExtInterrupt+0x344>)
    4336:	4798      	blx	r3
    4338:	e00a      	b.n	4350 <callbackExtInterrupt+0x254>
            adjusting = false;
    433a:	2200      	movs	r2, #0
    433c:	4b45      	ldr	r3, [pc, #276]	; (4454 <callbackExtInterrupt+0x358>)
    433e:	701a      	strb	r2, [r3, #0]
            applySleepOffset(0);
    4340:	2000      	movs	r0, #0
    4342:	4b3f      	ldr	r3, [pc, #252]	; (4440 <callbackExtInterrupt+0x344>)
    4344:	4798      	blx	r3
    4346:	e003      	b.n	4350 <callbackExtInterrupt+0x254>
        else if(!cycling)
    4348:	4b3c      	ldr	r3, [pc, #240]	; (443c <callbackExtInterrupt+0x340>)
    434a:	781b      	ldrb	r3, [r3, #0]
    434c:	2b00      	cmp	r3, #0
    434e:	d012      	beq.n	4376 <callbackExtInterrupt+0x27a>
		if(bidirectional)
    4350:	4b36      	ldr	r3, [pc, #216]	; (442c <callbackExtInterrupt+0x330>)
    4352:	781b      	ldrb	r3, [r3, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	d100      	bne.n	435a <callbackExtInterrupt+0x25e>
    4358:	e720      	b.n	419c <callbackExtInterrupt+0xa0>
			startSPI();
    435a:	4b2b      	ldr	r3, [pc, #172]	; (4408 <callbackExtInterrupt+0x30c>)
    435c:	4798      	blx	r3
			sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    435e:	201f      	movs	r0, #31
    4360:	4c2a      	ldr	r4, [pc, #168]	; (440c <callbackExtInterrupt+0x310>)
    4362:	47a0      	blx	r4
    4364:	2001      	movs	r0, #1
    4366:	47a0      	blx	r4
			stopSPI();
    4368:	4b29      	ldr	r3, [pc, #164]	; (4410 <callbackExtInterrupt+0x314>)
    436a:	4798      	blx	r3
			callbackPacketSend(packetNumBytes);		
    436c:	4b3e      	ldr	r3, [pc, #248]	; (4468 <callbackExtInterrupt+0x36c>)
    436e:	7818      	ldrb	r0, [r3, #0]
    4370:	4b3e      	ldr	r3, [pc, #248]	; (446c <callbackExtInterrupt+0x370>)
    4372:	4798      	blx	r3
    4374:	e712      	b.n	419c <callbackExtInterrupt+0xa0>
          adjusting = false;
    4376:	2200      	movs	r2, #0
    4378:	4b36      	ldr	r3, [pc, #216]	; (4454 <callbackExtInterrupt+0x358>)
    437a:	701a      	strb	r2, [r3, #0]
          applySleepOffset(0);  
    437c:	2000      	movs	r0, #0
    437e:	4b30      	ldr	r3, [pc, #192]	; (4440 <callbackExtInterrupt+0x344>)
    4380:	4798      	blx	r3
    4382:	e7e5      	b.n	4350 <callbackExtInterrupt+0x254>
        applySleepOffset(0); // Cycle next frame
    4384:	2000      	movs	r0, #0
    4386:	4b2e      	ldr	r3, [pc, #184]	; (4440 <callbackExtInterrupt+0x344>)
    4388:	4798      	blx	r3
		if(!bidirectional)
    438a:	4b28      	ldr	r3, [pc, #160]	; (442c <callbackExtInterrupt+0x330>)
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	2b00      	cmp	r3, #0
    4390:	d10d      	bne.n	43ae <callbackExtInterrupt+0x2b2>
			startSPI();
    4392:	4b1d      	ldr	r3, [pc, #116]	; (4408 <callbackExtInterrupt+0x30c>)
    4394:	4798      	blx	r3
			sendSPI(REG_COMMANDS); sendSPI(BIT_FLUSHTX);
    4396:	201f      	movs	r0, #31
    4398:	4c1c      	ldr	r4, [pc, #112]	; (440c <callbackExtInterrupt+0x310>)
    439a:	47a0      	blx	r4
    439c:	2001      	movs	r0, #1
    439e:	47a0      	blx	r4
			stopSPI();
    43a0:	4b1b      	ldr	r3, [pc, #108]	; (4410 <callbackExtInterrupt+0x314>)
    43a2:	4798      	blx	r3
			callbackPacketSend(packetNumBytes);
    43a4:	4b30      	ldr	r3, [pc, #192]	; (4468 <callbackExtInterrupt+0x36c>)
    43a6:	7818      	ldrb	r0, [r3, #0]
    43a8:	4b30      	ldr	r3, [pc, #192]	; (446c <callbackExtInterrupt+0x370>)
    43aa:	4798      	blx	r3
    43ac:	e6f6      	b.n	419c <callbackExtInterrupt+0xa0>
			callBackPacketUpkeep(); // Push remaining RX data 
    43ae:	4b30      	ldr	r3, [pc, #192]	; (4470 <callbackExtInterrupt+0x374>)
    43b0:	4798      	blx	r3
    43b2:	e6f3      	b.n	419c <callbackExtInterrupt+0xa0>
        sparkChangeMode(SPARK_MODE_RX);
    43b4:	2000      	movs	r0, #0
    43b6:	4b1e      	ldr	r3, [pc, #120]	; (4430 <callbackExtInterrupt+0x334>)
    43b8:	4798      	blx	r3
    43ba:	e6fb      	b.n	41b4 <callbackExtInterrupt+0xb8>
        sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_RXMODE);
    43bc:	205f      	movs	r0, #95	; 0x5f
    43be:	4c13      	ldr	r4, [pc, #76]	; (440c <callbackExtInterrupt+0x310>)
    43c0:	47a0      	blx	r4
    43c2:	2024      	movs	r0, #36	; 0x24
    43c4:	47a0      	blx	r4
        break;
    43c6:	e702      	b.n	41ce <callbackExtInterrupt+0xd2>
        sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP | BIT_STARTTX);
    43c8:	205f      	movs	r0, #95	; 0x5f
    43ca:	4c10      	ldr	r4, [pc, #64]	; (440c <callbackExtInterrupt+0x310>)
    43cc:	47a0      	blx	r4
    43ce:	2014      	movs	r0, #20
    43d0:	47a0      	blx	r4
        break;
    43d2:	e6fc      	b.n	41ce <callbackExtInterrupt+0xd2>
      sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    43d4:	2040      	movs	r0, #64	; 0x40
    43d6:	4c0d      	ldr	r4, [pc, #52]	; (440c <callbackExtInterrupt+0x310>)
    43d8:	47a0      	blx	r4
    43da:	2058      	movs	r0, #88	; 0x58
    43dc:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(BIT_XOTIMER | BIT_RXTOUT);
    43de:	2041      	movs	r0, #65	; 0x41
    43e0:	47a0      	blx	r4
    43e2:	2060      	movs	r0, #96	; 0x60
    43e4:	47a0      	blx	r4
    43e6:	e6fa      	b.n	41de <callbackExtInterrupt+0xe2>
		  sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    43e8:	2040      	movs	r0, #64	; 0x40
    43ea:	4c08      	ldr	r4, [pc, #32]	; (440c <callbackExtInterrupt+0x310>)
    43ec:	47a0      	blx	r4
    43ee:	2058      	movs	r0, #88	; 0x58
    43f0:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT);
    43f2:	2041      	movs	r0, #65	; 0x41
    43f4:	47a0      	blx	r4
    43f6:	2020      	movs	r0, #32
    43f8:	47a0      	blx	r4
    43fa:	e6f0      	b.n	41de <callbackExtInterrupt+0xe2>
	  disableClockGate();
    43fc:	4b1d      	ldr	r3, [pc, #116]	; (4474 <callbackExtInterrupt+0x378>)
    43fe:	4798      	blx	r3
      clockGated = false;
    4400:	2200      	movs	r2, #0
    4402:	4b07      	ldr	r3, [pc, #28]	; (4420 <callbackExtInterrupt+0x324>)
    4404:	701a      	strb	r2, [r3, #0]
    4406:	e6f1      	b.n	41ec <callbackExtInterrupt+0xf0>
    4408:	00002ed9 	.word	0x00002ed9
    440c:	00002ef5 	.word	0x00002ef5
    4410:	00002f99 	.word	0x00002f99
    4414:	20000c79 	.word	0x20000c79
    4418:	20000c7a 	.word	0x20000c7a
    441c:	20000bda 	.word	0x20000bda
    4420:	20000c6e 	.word	0x20000c6e
    4424:	00002e91 	.word	0x00002e91
    4428:	20000c6d 	.word	0x20000c6d
    442c:	20000c74 	.word	0x20000c74
    4430:	000040ad 	.word	0x000040ad
    4434:	20000bdc 	.word	0x20000bdc
    4438:	00003503 	.word	0x00003503
    443c:	20000c61 	.word	0x20000c61
    4440:	00003d89 	.word	0x00003d89
    4444:	00000c11 	.word	0x00000c11
    4448:	20000c77 	.word	0x20000c77
    444c:	20000c7b 	.word	0x20000c7b
    4450:	000014dd 	.word	0x000014dd
    4454:	20000bdb 	.word	0x20000bdb
    4458:	20000c76 	.word	0x20000c76
    445c:	20000c64 	.word	0x20000c64
    4460:	20000c62 	.word	0x20000c62
    4464:	000002d5 	.word	0x000002d5
    4468:	20000c78 	.word	0x20000c78
    446c:	00000891 	.word	0x00000891
    4470:	000014c1 	.word	0x000014c1
    4474:	00002ec5 	.word	0x00002ec5
  else if( ((int2 & BIT_XOTIMER) && sleepingMode == SPARK_SLEEP_DEEP) || ((int2 & BIT_XOTIMER) && sleepingMode == SPARK_SLEEP_NONE)) // This interrupt is sometimes not generated!
    4478:	066b      	lsls	r3, r5, #25
    447a:	d400      	bmi.n	447e <callbackExtInterrupt+0x382>
    447c:	e6b6      	b.n	41ec <callbackExtInterrupt+0xf0>
    447e:	4b17      	ldr	r3, [pc, #92]	; (44dc <callbackExtInterrupt+0x3e0>)
    4480:	781b      	ldrb	r3, [r3, #0]
    4482:	2b03      	cmp	r3, #3
    4484:	d002      	beq.n	448c <callbackExtInterrupt+0x390>
    4486:	2b00      	cmp	r3, #0
    4488:	d000      	beq.n	448c <callbackExtInterrupt+0x390>
    448a:	e6af      	b.n	41ec <callbackExtInterrupt+0xf0>
	  sparkLastInt = 3;
    448c:	2103      	movs	r1, #3
    448e:	4a14      	ldr	r2, [pc, #80]	; (44e0 <callbackExtInterrupt+0x3e4>)
    4490:	7011      	strb	r1, [r2, #0]
    if(sleepingMode == SPARK_SLEEP_NONE)
    4492:	2b00      	cmp	r3, #0
    4494:	d10e      	bne.n	44b4 <callbackExtInterrupt+0x3b8>
      if(mode == SPARK_MODE_TX)
    4496:	4b13      	ldr	r3, [pc, #76]	; (44e4 <callbackExtInterrupt+0x3e8>)
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	2b01      	cmp	r3, #1
    449c:	d000      	beq.n	44a0 <callbackExtInterrupt+0x3a4>
    449e:	e6a5      	b.n	41ec <callbackExtInterrupt+0xf0>
        startSPI();
    44a0:	4b11      	ldr	r3, [pc, #68]	; (44e8 <callbackExtInterrupt+0x3ec>)
    44a2:	4798      	blx	r3
        sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_STARTTX);
    44a4:	205f      	movs	r0, #95	; 0x5f
    44a6:	4c11      	ldr	r4, [pc, #68]	; (44ec <callbackExtInterrupt+0x3f0>)
    44a8:	47a0      	blx	r4
    44aa:	2010      	movs	r0, #16
    44ac:	47a0      	blx	r4
        stopSPI();
    44ae:	4b10      	ldr	r3, [pc, #64]	; (44f0 <callbackExtInterrupt+0x3f4>)
    44b0:	4798      	blx	r3
    44b2:	e69b      	b.n	41ec <callbackExtInterrupt+0xf0>
	  enableClockGate();
    44b4:	4b0f      	ldr	r3, [pc, #60]	; (44f4 <callbackExtInterrupt+0x3f8>)
    44b6:	4798      	blx	r3
      clockGated = true;
    44b8:	2201      	movs	r2, #1
    44ba:	4b0f      	ldr	r3, [pc, #60]	; (44f8 <callbackExtInterrupt+0x3fc>)
    44bc:	701a      	strb	r2, [r3, #0]
      startSPI();
    44be:	4b0a      	ldr	r3, [pc, #40]	; (44e8 <callbackExtInterrupt+0x3ec>)
    44c0:	4798      	blx	r3
      sendSPI(SPI_WRITE | REG_INT1); sendSPI(BIT_WAKEUP | BIT_TXEND | BIT_NEWPKT); 
    44c2:	2040      	movs	r0, #64	; 0x40
    44c4:	4c09      	ldr	r4, [pc, #36]	; (44ec <callbackExtInterrupt+0x3f0>)
    44c6:	47a0      	blx	r4
    44c8:	2058      	movs	r0, #88	; 0x58
    44ca:	47a0      	blx	r4
      sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00 | BIT_RXTOUT); 
    44cc:	2041      	movs	r0, #65	; 0x41
    44ce:	47a0      	blx	r4
    44d0:	2020      	movs	r0, #32
    44d2:	47a0      	blx	r4
      stopSPI();
    44d4:	4b06      	ldr	r3, [pc, #24]	; (44f0 <callbackExtInterrupt+0x3f4>)
    44d6:	4798      	blx	r3
    44d8:	e688      	b.n	41ec <callbackExtInterrupt+0xf0>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	20000bdc 	.word	0x20000bdc
    44e0:	20000c7a 	.word	0x20000c7a
    44e4:	20000c6d 	.word	0x20000c6d
    44e8:	00002ed9 	.word	0x00002ed9
    44ec:	00002ef5 	.word	0x00002ef5
    44f0:	00002f99 	.word	0x00002f99
    44f4:	00002e91 	.word	0x00002e91
    44f8:	20000c6e 	.word	0x20000c6e

000044fc <sparkStopRadio>:
{
    44fc:	b510      	push	{r4, lr}
	running = false;
    44fe:	2200      	movs	r2, #0
    4500:	4b15      	ldr	r3, [pc, #84]	; (4558 <sparkStopRadio+0x5c>)
    4502:	701a      	strb	r2, [r3, #0]
  wdDisable();
    4504:	4b15      	ldr	r3, [pc, #84]	; (455c <sparkStopRadio+0x60>)
    4506:	4798      	blx	r3
  disableExtInt();
    4508:	4b15      	ldr	r3, [pc, #84]	; (4560 <sparkStopRadio+0x64>)
    450a:	4798      	blx	r3
  startSPI();
    450c:	4b15      	ldr	r3, [pc, #84]	; (4564 <sparkStopRadio+0x68>)
    450e:	4798      	blx	r3
  sendSPI(SPI_WRITE | REG_TIMERCFG); sendSPI(0x00); // Don't wakeup anymore
    4510:	2045      	movs	r0, #69	; 0x45
    4512:	4c15      	ldr	r4, [pc, #84]	; (4568 <sparkStopRadio+0x6c>)
    4514:	47a0      	blx	r4
    4516:	2000      	movs	r0, #0
    4518:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_SLEEPCFG); sendSPI(0x00); // Don't auto sleep anymore
    451a:	2044      	movs	r0, #68	; 0x44
    451c:	47a0      	blx	r4
    451e:	2000      	movs	r0, #0
    4520:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT1); sendSPI(0x00); 
    4522:	2040      	movs	r0, #64	; 0x40
    4524:	47a0      	blx	r4
    4526:	2000      	movs	r0, #0
    4528:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_INT2); sendSPI(0x00);
    452a:	2041      	movs	r0, #65	; 0x41
    452c:	47a0      	blx	r4
    452e:	2000      	movs	r0, #0
    4530:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS);  sendSPI(BIT_GOTOSLP);
    4532:	205f      	movs	r0, #95	; 0x5f
    4534:	47a0      	blx	r4
    4536:	2004      	movs	r0, #4
    4538:	47a0      	blx	r4
  sendSPI(SPI_WRITE | REG_COMMANDS); sendSPI(BIT_FLUSHTX | BIT_FLUSHRX);
    453a:	205f      	movs	r0, #95	; 0x5f
    453c:	47a0      	blx	r4
    453e:	2003      	movs	r0, #3
    4540:	47a0      	blx	r4
  stopSPI();
    4542:	4b0a      	ldr	r3, [pc, #40]	; (456c <sparkStopRadio+0x70>)
    4544:	4798      	blx	r3
  if(bidirectional)
    4546:	4b0a      	ldr	r3, [pc, #40]	; (4570 <sparkStopRadio+0x74>)
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d100      	bne.n	4550 <sparkStopRadio+0x54>
}
    454e:	bd10      	pop	{r4, pc}
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    4550:	2000      	movs	r0, #0
    4552:	4b08      	ldr	r3, [pc, #32]	; (4574 <sparkStopRadio+0x78>)
    4554:	4798      	blx	r3
}
    4556:	e7fa      	b.n	454e <sparkStopRadio+0x52>
    4558:	20000c60 	.word	0x20000c60
    455c:	00003507 	.word	0x00003507
    4560:	00002e71 	.word	0x00002e71
    4564:	00002ed9 	.word	0x00002ed9
    4568:	00002ef5 	.word	0x00002ef5
    456c:	00002f99 	.word	0x00002f99
    4570:	20000c74 	.word	0x20000c74
    4574:	000040ad 	.word	0x000040ad

00004578 <sparkIsScanning>:

bool sparkIsScanning()
{
  return cycling;
    4578:	4b01      	ldr	r3, [pc, #4]	; (4580 <sparkIsScanning+0x8>)
    457a:	7818      	ldrb	r0, [r3, #0]
}
    457c:	4770      	bx	lr
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	20000c61 	.word	0x20000c61

00004584 <sparkSetBidirectional>:

void sparkSetBidirectional(bool newBidirect, bool newMaster)
{
    4584:	b510      	push	{r4, lr}
  bidirectional = newBidirect;
    4586:	4b0b      	ldr	r3, [pc, #44]	; (45b4 <sparkSetBidirectional+0x30>)
    4588:	7018      	strb	r0, [r3, #0]
  master = newMaster; 
    458a:	4b0b      	ldr	r3, [pc, #44]	; (45b8 <sparkSetBidirectional+0x34>)
    458c:	7019      	strb	r1, [r3, #0]
  cycling = false;
    458e:	2200      	movs	r2, #0
    4590:	4b0a      	ldr	r3, [pc, #40]	; (45bc <sparkSetBidirectional+0x38>)
    4592:	701a      	strb	r2, [r3, #0]
  
  if(bidirectional)
    4594:	2800      	cmp	r0, #0
    4596:	d105      	bne.n	45a4 <sparkSetBidirectional+0x20>
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
  else if(master)
    4598:	2900      	cmp	r1, #0
    459a:	d107      	bne.n	45ac <sparkSetBidirectional+0x28>
	sparkChangeMode(SPARK_MODE_TX); // Unidirectional masters are TX
  else
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    459c:	2000      	movs	r0, #0
    459e:	4b08      	ldr	r3, [pc, #32]	; (45c0 <sparkSetBidirectional+0x3c>)
    45a0:	4798      	blx	r3
}
    45a2:	bd10      	pop	{r4, pc}
	sparkChangeMode(SPARK_MODE_RX); // Must start in RX
    45a4:	2000      	movs	r0, #0
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <sparkSetBidirectional+0x3c>)
    45a8:	4798      	blx	r3
    45aa:	e7fa      	b.n	45a2 <sparkSetBidirectional+0x1e>
	sparkChangeMode(SPARK_MODE_TX); // Unidirectional masters are TX
    45ac:	2001      	movs	r0, #1
    45ae:	4b04      	ldr	r3, [pc, #16]	; (45c0 <sparkSetBidirectional+0x3c>)
    45b0:	4798      	blx	r3
    45b2:	e7f6      	b.n	45a2 <sparkSetBidirectional+0x1e>
    45b4:	20000c74 	.word	0x20000c74
    45b8:	20000c7b 	.word	0x20000c7b
    45bc:	20000c61 	.word	0x20000c61
    45c0:	000040ad 	.word	0x000040ad

000045c4 <sparkIsBidirectional>:

bool sparkIsBidirectional()
{
  return bidirectional;
    45c4:	4b01      	ldr	r3, [pc, #4]	; (45cc <sparkIsBidirectional+0x8>)
    45c6:	7818      	ldrb	r0, [r3, #0]
}
    45c8:	4770      	bx	lr
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	20000c74 	.word	0x20000c74

000045d0 <sparkIsMaster>:

bool sparkIsMaster()
{
  return master;
    45d0:	4b01      	ldr	r3, [pc, #4]	; (45d8 <sparkIsMaster+0x8>)
    45d2:	7818      	ldrb	r0, [r3, #0]
}
    45d4:	4770      	bx	lr
    45d6:	46c0      	nop			; (mov r8, r8)
    45d8:	20000c7b 	.word	0x20000c7b

000045dc <sparkIsRunning>:

bool sparkIsRunning()
{
	return running;
    45dc:	4b01      	ldr	r3, [pc, #4]	; (45e4 <sparkIsRunning+0x8>)
    45de:	7818      	ldrb	r0, [r3, #0]
}
    45e0:	4770      	bx	lr
    45e2:	46c0      	nop			; (mov r8, r8)
    45e4:	20000c60 	.word	0x20000c60

000045e8 <usb_reset>:
	USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_EORST;

	usb_reset();
}

void usb_reset(){
    45e8:	b510      	push	{r4, lr}
	usb_endpoints[0].DeviceDescBank[0].ADDR.reg = (uint32_t) &ep0_buf_out;
    45ea:	4b0f      	ldr	r3, [pc, #60]	; (4628 <usb_reset+0x40>)
    45ec:	4a0f      	ldr	r2, [pc, #60]	; (462c <usb_reset+0x44>)
    45ee:	601a      	str	r2, [r3, #0]
	usb_endpoints[0].DeviceDescBank[0].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
    45f0:	6858      	ldr	r0, [r3, #4]
    45f2:	4c0f      	ldr	r4, [pc, #60]	; (4630 <usb_reset+0x48>)
    45f4:	4020      	ands	r0, r4
    45f6:	22c0      	movs	r2, #192	; 0xc0
    45f8:	0592      	lsls	r2, r2, #22
    45fa:	0001      	movs	r1, r0
    45fc:	4311      	orrs	r1, r2
    45fe:	6059      	str	r1, [r3, #4]
	usb_endpoints[0].DeviceDescBank[1].ADDR.reg = (uint32_t) &ep0_buf_in;
    4600:	490c      	ldr	r1, [pc, #48]	; (4634 <usb_reset+0x4c>)
    4602:	6119      	str	r1, [r3, #16]
	usb_endpoints[0].DeviceDescBank[1].PCKSIZE.bit.SIZE=USB_EP_size_to_gc(USB_EP0_SIZE);
    4604:	6959      	ldr	r1, [r3, #20]
    4606:	4021      	ands	r1, r4
    4608:	430a      	orrs	r2, r1
    460a:	615a      	str	r2, [r3, #20]
	usb_endpoints[0].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP=1;
    460c:	6959      	ldr	r1, [r3, #20]
    460e:	2280      	movs	r2, #128	; 0x80
    4610:	0612      	lsls	r2, r2, #24
    4612:	430a      	orrs	r2, r1
    4614:	615a      	str	r2, [r3, #20]
	USB->DEVICE.DeviceEndpoint[0].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4616:	4b08      	ldr	r3, [pc, #32]	; (4638 <usb_reset+0x50>)
    4618:	2110      	movs	r1, #16
    461a:	220a      	movs	r2, #10
    461c:	32ff      	adds	r2, #255	; 0xff
    461e:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[0].EPCFG.reg  = USB_DEVICE_EPCFG_EPTYPE0(USB_EPTYPE_CONTROL)
    4620:	3101      	adds	r1, #1
    4622:	3a09      	subs	r2, #9
    4624:	5499      	strb	r1, [r3, r2]
	                                         | USB_DEVICE_EPCFG_EPTYPE1(USB_EPTYPE_CONTROL);
}
    4626:	bd10      	pop	{r4, pc}
    4628:	20000cdc 	.word	0x20000cdc
    462c:	20000950 	.word	0x20000950
    4630:	8fffffff 	.word	0x8fffffff
    4634:	2000073c 	.word	0x2000073c
    4638:	41005000 	.word	0x41005000

0000463c <usb_init>:
void usb_init(){
    463c:	b570      	push	{r4, r5, r6, lr}
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    463e:	4a20      	ldr	r2, [pc, #128]	; (46c0 <usb_init+0x84>)
    4640:	69d3      	ldr	r3, [r2, #28]
    4642:	2120      	movs	r1, #32
    4644:	430b      	orrs	r3, r1
    4646:	61d3      	str	r3, [r2, #28]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    4648:	4a1e      	ldr	r2, [pc, #120]	; (46c4 <usb_init+0x88>)
    464a:	4b1f      	ldr	r3, [pc, #124]	; (46c8 <usb_init+0x8c>)
    464c:	805a      	strh	r2, [r3, #2]
	USB->DEVICE.CTRLA.reg = USB_CTRLA_SWRST;
    464e:	2201      	movs	r2, #1
    4650:	4b1e      	ldr	r3, [pc, #120]	; (46cc <usb_init+0x90>)
    4652:	701a      	strb	r2, [r3, #0]
	while (USB->DEVICE.SYNCBUSY.bit.SWRST);
    4654:	4b1d      	ldr	r3, [pc, #116]	; (46cc <usb_init+0x90>)
    4656:	789b      	ldrb	r3, [r3, #2]
    4658:	07db      	lsls	r3, r3, #31
    465a:	d4fb      	bmi.n	4654 <usb_init+0x18>
	USB->DEVICE.CTRLA.reg = USB_CTRLA_ENABLE | USB_CTRLA_MODE_DEVICE;
    465c:	2202      	movs	r2, #2
    465e:	4b1b      	ldr	r3, [pc, #108]	; (46cc <usb_init+0x90>)
    4660:	701a      	strb	r2, [r3, #0]
	while (USB->DEVICE.SYNCBUSY.bit.ENABLE);
    4662:	4b1a      	ldr	r3, [pc, #104]	; (46cc <usb_init+0x90>)
    4664:	789b      	ldrb	r3, [r3, #2]
    4666:	079b      	lsls	r3, r3, #30
    4668:	d4fb      	bmi.n	4662 <usb_init+0x26>
	pad_transn = ( *((uint32_t *)(NVMCTRL_OTP4)
    466a:	4b19      	ldr	r3, [pc, #100]	; (46d0 <usb_init+0x94>)
    466c:	681a      	ldr	r2, [r3, #0]
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    466e:	0b51      	lsrs	r1, r2, #13
	pad_transn = ( *((uint32_t *)(NVMCTRL_OTP4)
    4670:	231f      	movs	r3, #31
    4672:	400b      	ands	r3, r1
	if (pad_transn == 0x1F) {
    4674:	2b1f      	cmp	r3, #31
    4676:	d01d      	beq.n	46b4 <usb_init+0x78>
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4678:	0c91      	lsrs	r1, r2, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    467a:	201f      	movs	r0, #31
    467c:	4008      	ands	r0, r1
	if (pad_transp == 0x1F) {
    467e:	281f      	cmp	r0, #31
    4680:	d01a      	beq.n	46b8 <usb_init+0x7c>
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4682:	0dd1      	lsrs	r1, r2, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4684:	2207      	movs	r2, #7
    4686:	400a      	ands	r2, r1
	if (pad_trim == 0x7) {
    4688:	2a07      	cmp	r2, #7
    468a:	d017      	beq.n	46bc <usb_init+0x80>
	USB->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    468c:	019b      	lsls	r3, r3, #6
    468e:	4303      	orrs	r3, r0
    4690:	0312      	lsls	r2, r2, #12
    4692:	4313      	orrs	r3, r2
    4694:	4c0d      	ldr	r4, [pc, #52]	; (46cc <usb_init+0x90>)
    4696:	8523      	strh	r3, [r4, #40]	; 0x28
	memset(usb_endpoints, 0, usb_num_endpoints*sizeof(UsbDeviceDescriptor));
    4698:	4b0e      	ldr	r3, [pc, #56]	; (46d4 <usb_init+0x98>)
    469a:	781a      	ldrb	r2, [r3, #0]
    469c:	0152      	lsls	r2, r2, #5
    469e:	4d0e      	ldr	r5, [pc, #56]	; (46d8 <usb_init+0x9c>)
    46a0:	2100      	movs	r1, #0
    46a2:	0028      	movs	r0, r5
    46a4:	4b0d      	ldr	r3, [pc, #52]	; (46dc <usb_init+0xa0>)
    46a6:	4798      	blx	r3
	USB->DEVICE.DESCADD.reg = (uint32_t)(&usb_endpoints[0]);
    46a8:	6265      	str	r5, [r4, #36]	; 0x24
	USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_EORST;
    46aa:	2308      	movs	r3, #8
    46ac:	8323      	strh	r3, [r4, #24]
	usb_reset();
    46ae:	4b0c      	ldr	r3, [pc, #48]	; (46e0 <usb_init+0xa4>)
    46b0:	4798      	blx	r3
}
    46b2:	bd70      	pop	{r4, r5, r6, pc}
		pad_transn = 5;
    46b4:	3b1a      	subs	r3, #26
    46b6:	e7df      	b.n	4678 <usb_init+0x3c>
		pad_transp = 29;
    46b8:	3802      	subs	r0, #2
    46ba:	e7e2      	b.n	4682 <usb_init+0x46>
		pad_trim = 3;
    46bc:	3a04      	subs	r2, #4
    46be:	e7e5      	b.n	468c <usb_init+0x50>
    46c0:	40000400 	.word	0x40000400
    46c4:	00004006 	.word	0x00004006
    46c8:	40000c00 	.word	0x40000c00
    46cc:	41005000 	.word	0x41005000
    46d0:	00806024 	.word	0x00806024
    46d4:	000075b0 	.word	0x000075b0
    46d8:	20000cdc 	.word	0x20000cdc
    46dc:	00005697 	.word	0x00005697
    46e0:	000045e9 	.word	0x000045e9

000046e4 <usb_set_address>:

void usb_set_address(uint8_t addr) {
	USB->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | addr;
    46e4:	2380      	movs	r3, #128	; 0x80
    46e6:	425b      	negs	r3, r3
    46e8:	4318      	orrs	r0, r3
    46ea:	b2c0      	uxtb	r0, r0
    46ec:	4b01      	ldr	r3, [pc, #4]	; (46f4 <usb_set_address+0x10>)
    46ee:	7298      	strb	r0, [r3, #10]
}
    46f0:	4770      	bx	lr
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	41005000 	.word	0x41005000

000046f8 <usb_enable_ep>:

inline UsbDeviceDescBank* ep_ram(uint8_t epaddr) {
	return &usb_endpoints[epaddr&0x3F].DeviceDescBank[!!(epaddr&0x80)];
}

inline void usb_enable_ep(uint8_t ep, uint8_t type, usb_size bufsize) {
    46f8:	b530      	push	{r4, r5, lr}
	if (ep & 0x80) {
    46fa:	b243      	sxtb	r3, r0
    46fc:	2b00      	cmp	r3, #0
    46fe:	db15      	blt.n	472c <usb_enable_ep+0x34>
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = type + 1;
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY
		                                                      | USB_DEVICE_EPSTATUS_STALLRQ(0x2)
		                                                      | USB_DEVICE_EPSTATUS_DTGLIN;
	} else {
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    4700:	233f      	movs	r3, #63	; 0x3f
    4702:	4018      	ands	r0, r3
    4704:	2a08      	cmp	r2, #8
    4706:	d94e      	bls.n	47a6 <usb_enable_ep+0xae>
    4708:	2a10      	cmp	r2, #16
    470a:	d967      	bls.n	47dc <usb_enable_ep+0xe4>
    470c:	2a20      	cmp	r2, #32
    470e:	d967      	bls.n	47e0 <usb_enable_ep+0xe8>
    4710:	2a40      	cmp	r2, #64	; 0x40
    4712:	d967      	bls.n	47e4 <usb_enable_ep+0xec>
    4714:	2a80      	cmp	r2, #128	; 0x80
    4716:	d967      	bls.n	47e8 <usb_enable_ep+0xf0>
    4718:	33c1      	adds	r3, #193	; 0xc1
    471a:	429a      	cmp	r2, r3
    471c:	d966      	bls.n	47ec <usb_enable_ep+0xf4>
    471e:	3301      	adds	r3, #1
    4720:	33ff      	adds	r3, #255	; 0xff
    4722:	429a      	cmp	r2, r3
    4724:	d864      	bhi.n	47f0 <usb_enable_ep+0xf8>
    4726:	3bfb      	subs	r3, #251	; 0xfb
    4728:	3bff      	subs	r3, #255	; 0xff
    472a:	e03d      	b.n	47a8 <usb_enable_ep+0xb0>
		usb_endpoints[ep & 0x3f].DeviceDescBank[1].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    472c:	233f      	movs	r3, #63	; 0x3f
    472e:	4018      	ands	r0, r3
    4730:	2a08      	cmp	r2, #8
    4732:	d912      	bls.n	475a <usb_enable_ep+0x62>
    4734:	2a10      	cmp	r2, #16
    4736:	d92c      	bls.n	4792 <usb_enable_ep+0x9a>
    4738:	2a20      	cmp	r2, #32
    473a:	d92c      	bls.n	4796 <usb_enable_ep+0x9e>
    473c:	2a40      	cmp	r2, #64	; 0x40
    473e:	d92c      	bls.n	479a <usb_enable_ep+0xa2>
    4740:	2a80      	cmp	r2, #128	; 0x80
    4742:	d92c      	bls.n	479e <usb_enable_ep+0xa6>
    4744:	33c1      	adds	r3, #193	; 0xc1
    4746:	429a      	cmp	r2, r3
    4748:	d92b      	bls.n	47a2 <usb_enable_ep+0xaa>
    474a:	3301      	adds	r3, #1
    474c:	33ff      	adds	r3, #255	; 0xff
    474e:	429a      	cmp	r2, r3
    4750:	d901      	bls.n	4756 <usb_enable_ep+0x5e>
    4752:	2207      	movs	r2, #7
    4754:	e002      	b.n	475c <usb_enable_ep+0x64>
    4756:	2206      	movs	r2, #6
    4758:	e000      	b.n	475c <usb_enable_ep+0x64>
    475a:	2200      	movs	r2, #0
    475c:	0144      	lsls	r4, r0, #5
    475e:	4b25      	ldr	r3, [pc, #148]	; (47f4 <usb_enable_ep+0xfc>)
    4760:	191b      	adds	r3, r3, r4
    4762:	695c      	ldr	r4, [r3, #20]
    4764:	0712      	lsls	r2, r2, #28
    4766:	4d24      	ldr	r5, [pc, #144]	; (47f8 <usb_enable_ep+0x100>)
    4768:	402c      	ands	r4, r5
    476a:	4322      	orrs	r2, r4
    476c:	615a      	str	r2, [r3, #20]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = type + 1;
    476e:	3101      	adds	r1, #1
    4770:	4c22      	ldr	r4, [pc, #136]	; (47fc <usb_enable_ep+0x104>)
    4772:	3008      	adds	r0, #8
    4774:	0140      	lsls	r0, r0, #5
    4776:	5d03      	ldrb	r3, [r0, r4]
    4778:	2207      	movs	r2, #7
    477a:	400a      	ands	r2, r1
    477c:	0112      	lsls	r2, r2, #4
    477e:	2170      	movs	r1, #112	; 0x70
    4780:	438b      	bics	r3, r1
    4782:	0019      	movs	r1, r3
    4784:	4311      	orrs	r1, r2
    4786:	5501      	strb	r1, [r0, r4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY
    4788:	46a4      	mov	ip, r4
    478a:	4460      	add	r0, ip
    478c:	23a2      	movs	r3, #162	; 0xa2
    478e:	7103      	strb	r3, [r0, #4]
    4790:	e023      	b.n	47da <usb_enable_ep+0xe2>
		usb_endpoints[ep & 0x3f].DeviceDescBank[1].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    4792:	2201      	movs	r2, #1
    4794:	e7e2      	b.n	475c <usb_enable_ep+0x64>
    4796:	2202      	movs	r2, #2
    4798:	e7e0      	b.n	475c <usb_enable_ep+0x64>
    479a:	2203      	movs	r2, #3
    479c:	e7de      	b.n	475c <usb_enable_ep+0x64>
    479e:	2204      	movs	r2, #4
    47a0:	e7dc      	b.n	475c <usb_enable_ep+0x64>
    47a2:	2205      	movs	r2, #5
    47a4:	e7da      	b.n	475c <usb_enable_ep+0x64>
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    47a6:	2300      	movs	r3, #0
    47a8:	0144      	lsls	r4, r0, #5
    47aa:	4a12      	ldr	r2, [pc, #72]	; (47f4 <usb_enable_ep+0xfc>)
    47ac:	1912      	adds	r2, r2, r4
    47ae:	6854      	ldr	r4, [r2, #4]
    47b0:	071b      	lsls	r3, r3, #28
    47b2:	4d11      	ldr	r5, [pc, #68]	; (47f8 <usb_enable_ep+0x100>)
    47b4:	402c      	ands	r4, r5
    47b6:	4323      	orrs	r3, r4
    47b8:	6053      	str	r3, [r2, #4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE0 = type + 1;
    47ba:	3101      	adds	r1, #1
    47bc:	4a0f      	ldr	r2, [pc, #60]	; (47fc <usb_enable_ep+0x104>)
    47be:	3008      	adds	r0, #8
    47c0:	0140      	lsls	r0, r0, #5
    47c2:	5c83      	ldrb	r3, [r0, r2]
    47c4:	2407      	movs	r4, #7
    47c6:	4021      	ands	r1, r4
    47c8:	43a3      	bics	r3, r4
    47ca:	4319      	orrs	r1, r3
    47cc:	5481      	strb	r1, [r0, r2]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    47ce:	4694      	mov	ip, r2
    47d0:	4460      	add	r0, ip
    47d2:	2340      	movs	r3, #64	; 0x40
    47d4:	7143      	strb	r3, [r0, #5]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_STALLRQ(0x1)
    47d6:	3b2f      	subs	r3, #47	; 0x2f
    47d8:	7103      	strb	r3, [r0, #4]
		                                                      | USB_DEVICE_EPSTATUS_DTGLOUT;
	}
}
    47da:	bd30      	pop	{r4, r5, pc}
		usb_endpoints[ep & 0x3f].DeviceDescBank[0].PCKSIZE.bit.SIZE = USB_EP_size_to_gc(bufsize);
    47dc:	2301      	movs	r3, #1
    47de:	e7e3      	b.n	47a8 <usb_enable_ep+0xb0>
    47e0:	2302      	movs	r3, #2
    47e2:	e7e1      	b.n	47a8 <usb_enable_ep+0xb0>
    47e4:	2303      	movs	r3, #3
    47e6:	e7df      	b.n	47a8 <usb_enable_ep+0xb0>
    47e8:	2304      	movs	r3, #4
    47ea:	e7dd      	b.n	47a8 <usb_enable_ep+0xb0>
    47ec:	2305      	movs	r3, #5
    47ee:	e7db      	b.n	47a8 <usb_enable_ep+0xb0>
    47f0:	2307      	movs	r3, #7
    47f2:	e7d9      	b.n	47a8 <usb_enable_ep+0xb0>
    47f4:	20000cdc 	.word	0x20000cdc
    47f8:	8fffffff 	.word	0x8fffffff
    47fc:	41005000 	.word	0x41005000

00004800 <usb_disable_ep>:

inline void usb_disable_ep(uint8_t ep) {
    4800:	0003      	movs	r3, r0
	if (ep & 0x80) {
    4802:	b242      	sxtb	r2, r0
    4804:	2a00      	cmp	r2, #0
    4806:	db0c      	blt.n	4822 <usb_disable_ep+0x22>
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = USB_EPTYPE_DISABLED;
	} else {
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    4808:	203f      	movs	r0, #63	; 0x3f
    480a:	4018      	ands	r0, r3
    480c:	4a0b      	ldr	r2, [pc, #44]	; (483c <usb_disable_ep+0x3c>)
    480e:	3008      	adds	r0, #8
    4810:	0140      	lsls	r0, r0, #5
    4812:	1883      	adds	r3, r0, r2
    4814:	2140      	movs	r1, #64	; 0x40
    4816:	7159      	strb	r1, [r3, #5]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE0 = USB_EPTYPE_DISABLED;
    4818:	5c83      	ldrb	r3, [r0, r2]
    481a:	3939      	subs	r1, #57	; 0x39
    481c:	438b      	bics	r3, r1
    481e:	5483      	strb	r3, [r0, r2]
	}
}
    4820:	4770      	bx	lr
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    4822:	203f      	movs	r0, #63	; 0x3f
    4824:	4018      	ands	r0, r3
    4826:	4a05      	ldr	r2, [pc, #20]	; (483c <usb_disable_ep+0x3c>)
    4828:	3008      	adds	r0, #8
    482a:	0140      	lsls	r0, r0, #5
    482c:	1883      	adds	r3, r0, r2
    482e:	2180      	movs	r1, #128	; 0x80
    4830:	7119      	strb	r1, [r3, #4]
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPCFG.bit.EPTYPE1 = USB_EPTYPE_DISABLED;
    4832:	5c83      	ldrb	r3, [r0, r2]
    4834:	3910      	subs	r1, #16
    4836:	438b      	bics	r3, r1
    4838:	5483      	strb	r3, [r0, r2]
    483a:	e7f1      	b.n	4820 <usb_disable_ep+0x20>
    483c:	41005000 	.word	0x41005000

00004840 <usb_ep_start_out>:
	} else {
		USB->DEVICE.DeviceEndpoint[ep & 0x3f].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK0RDY;
	}
}

inline usb_bank usb_ep_start_out(uint8_t ep, uint8_t* data, usb_size len) {
    4840:	b5f0      	push	{r4, r5, r6, r7, lr}
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
    4842:	4e0f      	ldr	r6, [pc, #60]	; (4880 <usb_ep_start_out+0x40>)
    4844:	0143      	lsls	r3, r0, #5
    4846:	18f4      	adds	r4, r6, r3
    4848:	6865      	ldr	r5, [r4, #4]
    484a:	0492      	lsls	r2, r2, #18
    484c:	0912      	lsrs	r2, r2, #4
    484e:	4f0d      	ldr	r7, [pc, #52]	; (4884 <usb_ep_start_out+0x44>)
    4850:	403d      	ands	r5, r7
    4852:	432a      	orrs	r2, r5
    4854:	6062      	str	r2, [r4, #4]
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4856:	6862      	ldr	r2, [r4, #4]
    4858:	0b92      	lsrs	r2, r2, #14
    485a:	0395      	lsls	r5, r2, #14
    485c:	6065      	str	r5, [r4, #4]
	usb_endpoints[ep].DeviceDescBank[0].ADDR.reg = (uint32_t) data;
    485e:	5199      	str	r1, [r3, r6]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_TRFAIL0;
    4860:	3008      	adds	r0, #8
    4862:	0140      	lsls	r0, r0, #5
    4864:	4a08      	ldr	r2, [pc, #32]	; (4888 <usb_ep_start_out+0x48>)
    4866:	4694      	mov	ip, r2
    4868:	4460      	add	r0, ip
    486a:	2205      	movs	r2, #5
    486c:	71c2      	strb	r2, [r0, #7]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    486e:	4a07      	ldr	r2, [pc, #28]	; (488c <usb_ep_start_out+0x4c>)
    4870:	4694      	mov	ip, r2
    4872:	4463      	add	r3, ip
    4874:	2201      	movs	r2, #1
    4876:	701a      	strb	r2, [r3, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    4878:	2340      	movs	r3, #64	; 0x40
    487a:	7103      	strb	r3, [r0, #4]
	return 0;
}
    487c:	2000      	movs	r0, #0
    487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4880:	20000cdc 	.word	0x20000cdc
    4884:	f0003fff 	.word	0xf0003fff
    4888:	41005000 	.word	0x41005000
    488c:	41005109 	.word	0x41005109

00004890 <usb_ep_start_in>:

inline usb_bank usb_ep_start_in(uint8_t ep, const uint8_t* data, usb_size size, bool zlp) {
    4890:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep &= 0x3f;
    4892:	243f      	movs	r4, #63	; 0x3f
    4894:	4020      	ands	r0, r4
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = zlp;
    4896:	0145      	lsls	r5, r0, #5
    4898:	4e11      	ldr	r6, [pc, #68]	; (48e0 <usb_ep_start_in+0x50>)
    489a:	1976      	adds	r6, r6, r5
    489c:	6977      	ldr	r7, [r6, #20]
    489e:	07db      	lsls	r3, r3, #31
    48a0:	007f      	lsls	r7, r7, #1
    48a2:	087f      	lsrs	r7, r7, #1
    48a4:	433b      	orrs	r3, r7
    48a6:	6173      	str	r3, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    48a8:	6977      	ldr	r7, [r6, #20]
    48aa:	4b0e      	ldr	r3, [pc, #56]	; (48e4 <usb_ep_start_in+0x54>)
    48ac:	403b      	ands	r3, r7
    48ae:	6173      	str	r3, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = size;
    48b0:	6973      	ldr	r3, [r6, #20]
    48b2:	0492      	lsls	r2, r2, #18
    48b4:	0c92      	lsrs	r2, r2, #18
    48b6:	0b9b      	lsrs	r3, r3, #14
    48b8:	039b      	lsls	r3, r3, #14
    48ba:	431a      	orrs	r2, r3
    48bc:	6172      	str	r2, [r6, #20]
	usb_endpoints[ep].DeviceDescBank[1].ADDR.reg = (uint32_t) data;
    48be:	6131      	str	r1, [r6, #16]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRFAIL1;
    48c0:	3008      	adds	r0, #8
    48c2:	0140      	lsls	r0, r0, #5
    48c4:	4b08      	ldr	r3, [pc, #32]	; (48e8 <usb_ep_start_in+0x58>)
    48c6:	469c      	mov	ip, r3
    48c8:	4460      	add	r0, ip
    48ca:	230a      	movs	r3, #10
    48cc:	71c3      	strb	r3, [r0, #7]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    48ce:	4b07      	ldr	r3, [pc, #28]	; (48ec <usb_ep_start_in+0x5c>)
    48d0:	469c      	mov	ip, r3
    48d2:	4465      	add	r5, ip
    48d4:	2302      	movs	r3, #2
    48d6:	702b      	strb	r3, [r5, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    48d8:	337e      	adds	r3, #126	; 0x7e
    48da:	7143      	strb	r3, [r0, #5]
	return 0;
}
    48dc:	2000      	movs	r0, #0
    48de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e0:	20000cdc 	.word	0x20000cdc
    48e4:	f0003fff 	.word	0xf0003fff
    48e8:	41005000 	.word	0x41005000
    48ec:	41005109 	.word	0x41005109

000048f0 <usb_ep_out_length>:
		USB->DEVICE.DeviceEndpoint[ep & 0x3F].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}

inline usb_size usb_ep_out_length(uint8_t ep){
	return usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48f0:	0143      	lsls	r3, r0, #5
    48f2:	4803      	ldr	r0, [pc, #12]	; (4900 <usb_ep_out_length+0x10>)
    48f4:	18c0      	adds	r0, r0, r3
    48f6:	6840      	ldr	r0, [r0, #4]
    48f8:	0480      	lsls	r0, r0, #18
    48fa:	0c80      	lsrs	r0, r0, #18
}
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	20000cdc 	.word	0x20000cdc

00004904 <usb_attach>:
    4904:	2280      	movs	r2, #128	; 0x80
    4906:	4b04      	ldr	r3, [pc, #16]	; (4918 <usb_attach+0x14>)
    4908:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(USB_IRQn);
}

inline void usb_attach(void) {
	NVIC_EnableIRQ(USB_IRQn);
	USB->DEVICE.CTRLB.bit.DETACH = 0;
    490a:	4a04      	ldr	r2, [pc, #16]	; (491c <usb_attach+0x18>)
    490c:	8913      	ldrh	r3, [r2, #8]
    490e:	2101      	movs	r1, #1
    4910:	438b      	bics	r3, r1
    4912:	8113      	strh	r3, [r2, #8]
}
    4914:	4770      	bx	lr
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	e000e100 	.word	0xe000e100
    491c:	41005000 	.word	0x41005000

00004920 <usb_ep0_out>:
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = len;
    4920:	4b0d      	ldr	r3, [pc, #52]	; (4958 <usb_ep0_out+0x38>)
    4922:	6859      	ldr	r1, [r3, #4]
    4924:	4a0d      	ldr	r2, [pc, #52]	; (495c <usb_ep0_out+0x3c>)
    4926:	4011      	ands	r1, r2
    4928:	2280      	movs	r2, #128	; 0x80
    492a:	0352      	lsls	r2, r2, #13
    492c:	430a      	orrs	r2, r1
    492e:	605a      	str	r2, [r3, #4]
	usb_endpoints[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4930:	685a      	ldr	r2, [r3, #4]
    4932:	0b92      	lsrs	r2, r2, #14
    4934:	0391      	lsls	r1, r2, #14
    4936:	6059      	str	r1, [r3, #4]
	usb_endpoints[ep].DeviceDescBank[0].ADDR.reg = (uint32_t) data;
    4938:	4a09      	ldr	r2, [pc, #36]	; (4960 <usb_ep0_out+0x40>)
    493a:	601a      	str	r2, [r3, #0]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_TRFAIL0;
    493c:	4b09      	ldr	r3, [pc, #36]	; (4964 <usb_ep0_out+0x44>)
    493e:	2105      	movs	r1, #5
    4940:	2208      	movs	r2, #8
    4942:	32ff      	adds	r2, #255	; 0xff
    4944:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4946:	3904      	subs	r1, #4
    4948:	220a      	movs	r2, #10
    494a:	32ff      	adds	r2, #255	; 0xff
    494c:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK0RDY;
    494e:	313f      	adds	r1, #63	; 0x3f
    4950:	3a05      	subs	r2, #5
    4952:	5499      	strb	r1, [r3, r2]

inline void usb_ep0_out(void) {
	usb_ep_start_out(0x00, ep0_buf_out, USB_EP0_SIZE);
}
    4954:	4770      	bx	lr
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	20000cdc 	.word	0x20000cdc
    495c:	f0003fff 	.word	0xf0003fff
    4960:	20000950 	.word	0x20000950
    4964:	41005000 	.word	0x41005000

00004968 <usb_ep0_in>:
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = zlp;
    4968:	4b0f      	ldr	r3, [pc, #60]	; (49a8 <usb_ep0_in+0x40>)
    496a:	6959      	ldr	r1, [r3, #20]
    496c:	2280      	movs	r2, #128	; 0x80
    496e:	0612      	lsls	r2, r2, #24
    4970:	430a      	orrs	r2, r1
    4972:	615a      	str	r2, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4974:	6959      	ldr	r1, [r3, #20]
    4976:	4a0d      	ldr	r2, [pc, #52]	; (49ac <usb_ep0_in+0x44>)
    4978:	400a      	ands	r2, r1
    497a:	615a      	str	r2, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = size;
    497c:	695a      	ldr	r2, [r3, #20]
    497e:	0b92      	lsrs	r2, r2, #14
    4980:	0392      	lsls	r2, r2, #14
    4982:	4310      	orrs	r0, r2
    4984:	6158      	str	r0, [r3, #20]
	usb_endpoints[ep].DeviceDescBank[1].ADDR.reg = (uint32_t) data;
    4986:	4a0a      	ldr	r2, [pc, #40]	; (49b0 <usb_ep0_in+0x48>)
    4988:	611a      	str	r2, [r3, #16]
	USB->DEVICE.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRFAIL1;
    498a:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <usb_ep0_in+0x4c>)
    498c:	210a      	movs	r1, #10
    498e:	2208      	movs	r2, #8
    4990:	32ff      	adds	r2, #255	; 0xff
    4992:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4994:	3908      	subs	r1, #8
    4996:	220a      	movs	r2, #10
    4998:	32ff      	adds	r2, #255	; 0xff
    499a:	5499      	strb	r1, [r3, r2]
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_BK1RDY;
    499c:	317e      	adds	r1, #126	; 0x7e
    499e:	2206      	movs	r2, #6
    49a0:	32ff      	adds	r2, #255	; 0xff
    49a2:	5499      	strb	r1, [r3, r2]

inline void usb_ep0_in(uint8_t size){
	usb_ep_start_in(0x80, ep0_buf_in, size, true);
}
    49a4:	4770      	bx	lr
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	20000cdc 	.word	0x20000cdc
    49ac:	f0003fff 	.word	0xf0003fff
    49b0:	2000073c 	.word	0x2000073c
    49b4:	41005000 	.word	0x41005000

000049b8 <usb_ep0_stall>:

inline void usb_ep0_stall(void) {
	USB->DEVICE.DeviceEndpoint[0].EPSTATUSSET.reg = USB_DEVICE_EPSTATUS_STALLRQ(0x3);
    49b8:	2130      	movs	r1, #48	; 0x30
    49ba:	2306      	movs	r3, #6
    49bc:	33ff      	adds	r3, #255	; 0xff
    49be:	4a01      	ldr	r2, [pc, #4]	; (49c4 <usb_ep0_stall+0xc>)
    49c0:	54d1      	strb	r1, [r2, r3]
}
    49c2:	4770      	bx	lr
    49c4:	41005000 	.word	0x41005000

000049c8 <USB_Handler>:
	} else {
		return USB_SPEED_FULL;
	}
}

void USB_Handler() {
    49c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t summary = USB->DEVICE.EPINTSMRY.reg;
    49ca:	4a29      	ldr	r2, [pc, #164]	; (4a70 <USB_Handler+0xa8>)
    49cc:	8c13      	ldrh	r3, [r2, #32]
    49ce:	b29b      	uxth	r3, r3
    49d0:	001e      	movs	r6, r3
	uint32_t status = USB->DEVICE.INTFLAG.reg;
    49d2:	8b92      	ldrh	r2, [r2, #28]
	uint32_t flags;

	if (status & USB_DEVICE_INTFLAG_EORST) {
    49d4:	0712      	lsls	r2, r2, #28
    49d6:	d410      	bmi.n	49fa <USB_Handler+0x32>
		usb_reset();
		usb_cb_reset();
		return;
	}

	if (summary & (1<<0)) {
    49d8:	07db      	lsls	r3, r3, #31
    49da:	d50c      	bpl.n	49f6 <USB_Handler+0x2e>
		uint32_t flags = USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg;
    49dc:	4a24      	ldr	r2, [pc, #144]	; (4a70 <USB_Handler+0xa8>)
    49de:	2308      	movs	r3, #8
    49e0:	33ff      	adds	r3, #255	; 0xff
    49e2:	5cd4      	ldrb	r4, [r2, r3]
    49e4:	b2e4      	uxtb	r4, r4
		USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1 | USB_DEVICE_EPINTFLAG_TRCPT0 | USB_DEVICE_EPINTFLAG_RXSTP;
    49e6:	2113      	movs	r1, #19
    49e8:	54d1      	strb	r1, [r2, r3]
		if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    49ea:	06e3      	lsls	r3, r4, #27
    49ec:	d40d      	bmi.n	4a0a <USB_Handler+0x42>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
			usb_handle_setup();
		}
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT0)
    49ee:	07e3      	lsls	r3, r4, #31
    49f0:	d412      	bmi.n	4a18 <USB_Handler+0x50>
			usb_handle_control_out_complete();
		if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
    49f2:	07a3      	lsls	r3, r4, #30
    49f4:	d413      	bmi.n	4a1e <USB_Handler+0x56>
void USB_Handler() {
    49f6:	2401      	movs	r4, #1
    49f8:	e019      	b.n	4a2e <USB_Handler+0x66>
		USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    49fa:	2208      	movs	r2, #8
    49fc:	4b1c      	ldr	r3, [pc, #112]	; (4a70 <USB_Handler+0xa8>)
    49fe:	839a      	strh	r2, [r3, #28]
		usb_reset();
    4a00:	4b1c      	ldr	r3, [pc, #112]	; (4a74 <USB_Handler+0xac>)
    4a02:	4798      	blx	r3
		usb_cb_reset();
    4a04:	4b1c      	ldr	r3, [pc, #112]	; (4a78 <USB_Handler+0xb0>)
    4a06:	4798      	blx	r3
		return;
    4a08:	e030      	b.n	4a6c <USB_Handler+0xa4>
			memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
    4a0a:	4a1c      	ldr	r2, [pc, #112]	; (4a7c <USB_Handler+0xb4>)
    4a0c:	4b1c      	ldr	r3, [pc, #112]	; (4a80 <USB_Handler+0xb8>)
    4a0e:	cb03      	ldmia	r3!, {r0, r1}
    4a10:	c203      	stmia	r2!, {r0, r1}
			usb_handle_setup();
    4a12:	4b1c      	ldr	r3, [pc, #112]	; (4a84 <USB_Handler+0xbc>)
    4a14:	4798      	blx	r3
    4a16:	e7ea      	b.n	49ee <USB_Handler+0x26>
			usb_handle_control_out_complete();
    4a18:	4b1b      	ldr	r3, [pc, #108]	; (4a88 <USB_Handler+0xc0>)
    4a1a:	4798      	blx	r3
    4a1c:	e7e9      	b.n	49f2 <USB_Handler+0x2a>
			usb_handle_control_in_complete();
    4a1e:	4b1b      	ldr	r3, [pc, #108]	; (4a8c <USB_Handler+0xc4>)
    4a20:	4798      	blx	r3
    4a22:	e7e8      	b.n	49f6 <USB_Handler+0x2e>
	for (int i=1; i<usb_num_endpoints; i++) {
		if (summary & 1<<i) {
			flags = USB->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
			USB->DEVICE.DeviceEndpoint[i].EPINTENCLR.reg = flags;
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
				usb_cb_handle_ep_in(i);
    4a24:	b2e0      	uxtb	r0, r4
    4a26:	4b1a      	ldr	r3, [pc, #104]	; (4a90 <USB_Handler+0xc8>)
    4a28:	4798      	blx	r3
    4a2a:	e017      	b.n	4a5c <USB_Handler+0x94>
	for (int i=1; i<usb_num_endpoints; i++) {
    4a2c:	3401      	adds	r4, #1
    4a2e:	4b19      	ldr	r3, [pc, #100]	; (4a94 <USB_Handler+0xcc>)
    4a30:	781b      	ldrb	r3, [r3, #0]
    4a32:	429c      	cmp	r4, r3
    4a34:	da18      	bge.n	4a68 <USB_Handler+0xa0>
		if (summary & 1<<i) {
    4a36:	2301      	movs	r3, #1
    4a38:	40a3      	lsls	r3, r4
    4a3a:	4233      	tst	r3, r6
    4a3c:	d0f6      	beq.n	4a2c <USB_Handler+0x64>
			flags = USB->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4a3e:	0023      	movs	r3, r4
    4a40:	3308      	adds	r3, #8
    4a42:	015b      	lsls	r3, r3, #5
    4a44:	4a0a      	ldr	r2, [pc, #40]	; (4a70 <USB_Handler+0xa8>)
    4a46:	4694      	mov	ip, r2
    4a48:	4463      	add	r3, ip
    4a4a:	79dd      	ldrb	r5, [r3, #7]
    4a4c:	b2ed      	uxtb	r5, r5
			USB->DEVICE.DeviceEndpoint[i].EPINTENCLR.reg = flags;
    4a4e:	0163      	lsls	r3, r4, #5
    4a50:	4a11      	ldr	r2, [pc, #68]	; (4a98 <USB_Handler+0xd0>)
    4a52:	4694      	mov	ip, r2
    4a54:	4463      	add	r3, ip
    4a56:	701d      	strb	r5, [r3, #0]
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT1)
    4a58:	07ab      	lsls	r3, r5, #30
    4a5a:	d4e3      	bmi.n	4a24 <USB_Handler+0x5c>
			if (flags & USB_DEVICE_EPINTFLAG_TRCPT0)
    4a5c:	07eb      	lsls	r3, r5, #31
    4a5e:	d5e5      	bpl.n	4a2c <USB_Handler+0x64>
				usb_cb_handle_ep_out(i);
    4a60:	b2e0      	uxtb	r0, r4
    4a62:	4b0e      	ldr	r3, [pc, #56]	; (4a9c <USB_Handler+0xd4>)
    4a64:	4798      	blx	r3
    4a66:	e7e1      	b.n	4a2c <USB_Handler+0x64>
		}
	}

	usb_cb_completion();
    4a68:	4b0d      	ldr	r3, [pc, #52]	; (4aa0 <USB_Handler+0xd8>)
    4a6a:	4798      	blx	r3
}
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	41005000 	.word	0x41005000
    4a74:	000045e9 	.word	0x000045e9
    4a78:	00004cb5 	.word	0x00004cb5
    4a7c:	20000948 	.word	0x20000948
    4a80:	20000950 	.word	0x20000950
    4a84:	00005021 	.word	0x00005021
    4a88:	00005161 	.word	0x00005161
    4a8c:	0000517d 	.word	0x0000517d
    4a90:	00004fa9 	.word	0x00004fa9
    4a94:	000075b0 	.word	0x000075b0
    4a98:	41005108 	.word	0x41005108
    4a9c:	00004f2d 	.word	0x00004f2d
    4aa0:	00004d2d 	.word	0x00004d2d

00004aa4 <samd_serial_number_string_descriptor>:

void* samd_serial_number_string_descriptor() {
    4aa4:	b530      	push	{r4, r5, lr}
    4aa6:	b089      	sub	sp, #36	; 0x24
	char buf[27];

	const unsigned char* id = (unsigned char*) 0x0080A00C;
	for (int i=0; i<26; i++) {
    4aa8:	2400      	movs	r4, #0
    4aaa:	e01c      	b.n	4ae6 <samd_serial_number_string_descriptor+0x42>
		unsigned idx = (i*5)/8;
    4aac:	00a1      	lsls	r1, r4, #2
    4aae:	1909      	adds	r1, r1, r4
    4ab0:	17cd      	asrs	r5, r1, #31
    4ab2:	2207      	movs	r2, #7
    4ab4:	0010      	movs	r0, r2
    4ab6:	4028      	ands	r0, r5
    4ab8:	1840      	adds	r0, r0, r1
    4aba:	10c0      	asrs	r0, r0, #3
		unsigned pos = (i*5)%8;
    4abc:	0f6d      	lsrs	r5, r5, #29
    4abe:	194b      	adds	r3, r1, r5
    4ac0:	4013      	ands	r3, r2
    4ac2:	1b5b      	subs	r3, r3, r5
		unsigned val = ((id[idx] >> pos) | (id[idx+1] << (8-pos))) & ((1<<5)-1);
    4ac4:	4a0c      	ldr	r2, [pc, #48]	; (4af8 <samd_serial_number_string_descriptor+0x54>)
    4ac6:	5c82      	ldrb	r2, [r0, r2]
    4ac8:	411a      	asrs	r2, r3
    4aca:	490c      	ldr	r1, [pc, #48]	; (4afc <samd_serial_number_string_descriptor+0x58>)
    4acc:	5c41      	ldrb	r1, [r0, r1]
    4ace:	2008      	movs	r0, #8
    4ad0:	1ac3      	subs	r3, r0, r3
    4ad2:	4099      	lsls	r1, r3
    4ad4:	000b      	movs	r3, r1
    4ad6:	4313      	orrs	r3, r2
    4ad8:	221f      	movs	r2, #31
    4ada:	4013      	ands	r3, r2
		buf[i] = "0123456789ABCDFGHJKLMNPQRSTVWXYZ"[val];
    4adc:	4a08      	ldr	r2, [pc, #32]	; (4b00 <samd_serial_number_string_descriptor+0x5c>)
    4ade:	5cd2      	ldrb	r2, [r2, r3]
    4ae0:	ab01      	add	r3, sp, #4
    4ae2:	551a      	strb	r2, [r3, r4]
	for (int i=0; i<26; i++) {
    4ae4:	3401      	adds	r4, #1
    4ae6:	2c19      	cmp	r4, #25
    4ae8:	dde0      	ble.n	4aac <samd_serial_number_string_descriptor+0x8>
	}
	buf[26] = 0;
    4aea:	a801      	add	r0, sp, #4
    4aec:	2300      	movs	r3, #0
    4aee:	7683      	strb	r3, [r0, #26]
	return usb_string_to_descriptor(buf);
    4af0:	4b04      	ldr	r3, [pc, #16]	; (4b04 <samd_serial_number_string_descriptor+0x60>)
    4af2:	4798      	blx	r3
}
    4af4:	b009      	add	sp, #36	; 0x24
    4af6:	bd30      	pop	{r4, r5, pc}
    4af8:	0080a00c 	.word	0x0080a00c
    4afc:	0080a00d 	.word	0x0080a00d
    4b00:	00007488 	.word	0x00007488
    4b04:	000051c1 	.word	0x000051c1

00004b08 <Sensors_get>:
 uint8_t* light_data;
 uint8_t* temp_data;
 uint8_t* RH_data;

uint8_t* Sensors_get(void)
{
    4b08:	b510      	push	{r4, lr}

	//light sensor data
	light_data = OPT3001_read();
    4b0a:	4b21      	ldr	r3, [pc, #132]	; (4b90 <Sensors_get+0x88>)
    4b0c:	4798      	blx	r3
    4b0e:	4b21      	ldr	r3, [pc, #132]	; (4b94 <Sensors_get+0x8c>)
    4b10:	6018      	str	r0, [r3, #0]
	sensor_data[2] = *light_data;
    4b12:	7802      	ldrb	r2, [r0, #0]
    4b14:	4b20      	ldr	r3, [pc, #128]	; (4b98 <Sensors_get+0x90>)
    4b16:	709a      	strb	r2, [r3, #2]
	sensor_data[3] = *(light_data+1);
    4b18:	7842      	ldrb	r2, [r0, #1]
    4b1a:	70da      	strb	r2, [r3, #3]

	//Measure temperature
	Si7021_command(SI7021_MEAS_T_HMH);
    4b1c:	20e3      	movs	r0, #227	; 0xe3
    4b1e:	4b1f      	ldr	r3, [pc, #124]	; (4b9c <Sensors_get+0x94>)
    4b20:	4798      	blx	r3
	TC3->COUNT16.COUNT.reg = 0; cnt = 0;
    4b22:	2200      	movs	r2, #0
    4b24:	4b1e      	ldr	r3, [pc, #120]	; (4ba0 <Sensors_get+0x98>)
    4b26:	821a      	strh	r2, [r3, #16]
    4b28:	e008      	b.n	4b3c <Sensors_get+0x34>
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4b2a:	2110      	movs	r1, #16
    4b2c:	4b1c      	ldr	r3, [pc, #112]	; (4ba0 <Sensors_get+0x98>)
    4b2e:	7399      	strb	r1, [r3, #14]
		while (0 == TC3->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4b30:	4b1b      	ldr	r3, [pc, #108]	; (4ba0 <Sensors_get+0x98>)
    4b32:	7b9b      	ldrb	r3, [r3, #14]
    4b34:	06db      	lsls	r3, r3, #27
    4b36:	d5fb      	bpl.n	4b30 <Sensors_get+0x28>
		cnt++;
    4b38:	3201      	adds	r2, #1
    4b3a:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    4b3c:	2a14      	cmp	r2, #20
    4b3e:	d1f4      	bne.n	4b2a <Sensors_get+0x22>
	sensor_timer_Delay(20);
	temp_data = Si7021_read();
    4b40:	4b18      	ldr	r3, [pc, #96]	; (4ba4 <Sensors_get+0x9c>)
    4b42:	4798      	blx	r3
    4b44:	4b18      	ldr	r3, [pc, #96]	; (4ba8 <Sensors_get+0xa0>)
    4b46:	6018      	str	r0, [r3, #0]
	sensor_data[0] = *temp_data;
    4b48:	7802      	ldrb	r2, [r0, #0]
    4b4a:	4b13      	ldr	r3, [pc, #76]	; (4b98 <Sensors_get+0x90>)
    4b4c:	701a      	strb	r2, [r3, #0]
	sensor_data[1] = *(temp_data+1);
    4b4e:	7842      	ldrb	r2, [r0, #1]
    4b50:	705a      	strb	r2, [r3, #1]

	//Measure Relative humidity
	Si7021_command(SI7021_MEAS_RH_HMH);
    4b52:	20e5      	movs	r0, #229	; 0xe5
    4b54:	4b11      	ldr	r3, [pc, #68]	; (4b9c <Sensors_get+0x94>)
    4b56:	4798      	blx	r3
	TC3->COUNT16.COUNT.reg = 0; cnt = 0;
    4b58:	2200      	movs	r2, #0
    4b5a:	4b11      	ldr	r3, [pc, #68]	; (4ba0 <Sensors_get+0x98>)
    4b5c:	821a      	strh	r2, [r3, #16]
    4b5e:	e008      	b.n	4b72 <Sensors_get+0x6a>
		TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4b60:	2110      	movs	r1, #16
    4b62:	4b0f      	ldr	r3, [pc, #60]	; (4ba0 <Sensors_get+0x98>)
    4b64:	7399      	strb	r1, [r3, #14]
		while (0 == TC3->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4b66:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <Sensors_get+0x98>)
    4b68:	7b9b      	ldrb	r3, [r3, #14]
    4b6a:	06db      	lsls	r3, r3, #27
    4b6c:	d5fb      	bpl.n	4b66 <Sensors_get+0x5e>
		cnt++;
    4b6e:	3201      	adds	r2, #1
    4b70:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    4b72:	2a14      	cmp	r2, #20
    4b74:	d1f4      	bne.n	4b60 <Sensors_get+0x58>
	sensor_timer_Delay(20);
	RH_data = Si7021_read();
    4b76:	4b0b      	ldr	r3, [pc, #44]	; (4ba4 <Sensors_get+0x9c>)
    4b78:	4798      	blx	r3
    4b7a:	4b0c      	ldr	r3, [pc, #48]	; (4bac <Sensors_get+0xa4>)
    4b7c:	6018      	str	r0, [r3, #0]
	sensor_data[4] = *RH_data;
    4b7e:	7802      	ldrb	r2, [r0, #0]
    4b80:	4b05      	ldr	r3, [pc, #20]	; (4b98 <Sensors_get+0x90>)
    4b82:	711a      	strb	r2, [r3, #4]
	sensor_data[5] = *(RH_data+1);
    4b84:	7842      	ldrb	r2, [r0, #1]
    4b86:	715a      	strb	r2, [r3, #5]
	sensor_data[6] = 0xc3;
    4b88:	22c3      	movs	r2, #195	; 0xc3
    4b8a:	719a      	strb	r2, [r3, #6]

	return &sensor_data;

    4b8c:	0018      	movs	r0, r3
    4b8e:	bd10      	pop	{r4, pc}
    4b90:	000036bd 	.word	0x000036bd
    4b94:	20000c90 	.word	0x20000c90
    4b98:	20000c80 	.word	0x20000c80
    4b9c:	00004c41 	.word	0x00004c41
    4ba0:	42002c00 	.word	0x42002c00
    4ba4:	00004bb5 	.word	0x00004bb5
    4ba8:	20000c8c 	.word	0x20000c8c
    4bac:	20000c88 	.word	0x20000c88

00004bb0 <Si7021_init>:
static uint8_t Si7021_read_buffer[SI7021_DATA_LENGTH];

void Si7021_init(){
	
	
}
    4bb0:	4770      	bx	lr
	...

00004bb4 <Si7021_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    4bb4:	2281      	movs	r2, #129	; 0x81
    4bb6:	4b1f      	ldr	r3, [pc, #124]	; (4c34 <Si7021_read+0x80>)
    4bb8:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4bba:	4b1e      	ldr	r3, [pc, #120]	; (4c34 <Si7021_read+0x80>)
    4bbc:	7e1b      	ldrb	r3, [r3, #24]
    4bbe:	079b      	lsls	r3, r3, #30
    4bc0:	d5fb      	bpl.n	4bba <Si7021_read+0x6>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4bc2:	4b1c      	ldr	r3, [pc, #112]	; (4c34 <Si7021_read+0x80>)
    4bc4:	8b5b      	ldrh	r3, [r3, #26]
    4bc6:	075b      	lsls	r3, r3, #29
    4bc8:	d507      	bpl.n	4bda <Si7021_read+0x26>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4bca:	4a1a      	ldr	r2, [pc, #104]	; (4c34 <Si7021_read+0x80>)
    4bcc:	6851      	ldr	r1, [r2, #4]
    4bce:	23c0      	movs	r3, #192	; 0xc0
    4bd0:	029b      	lsls	r3, r3, #10
    4bd2:	430b      	orrs	r3, r1
    4bd4:	6053      	str	r3, [r2, #4]

uint8_t* Si7021_read(){
	
	i2c_read(Si7021_read_buffer,2,SI7021_SLAVE_ADDR);
	return Si7021_read_buffer;
}
    4bd6:	4818      	ldr	r0, [pc, #96]	; (4c38 <Si7021_read+0x84>)
    4bd8:	4770      	bx	lr
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4bda:	4a16      	ldr	r2, [pc, #88]	; (4c34 <Si7021_read+0x80>)
    4bdc:	6853      	ldr	r3, [r2, #4]
    4bde:	4917      	ldr	r1, [pc, #92]	; (4c3c <Si7021_read+0x88>)
    4be0:	400b      	ands	r3, r1
    4be2:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < size-1; i++)
    4be4:	2200      	movs	r2, #0
    4be6:	2a00      	cmp	r2, #0
    4be8:	dd18      	ble.n	4c1c <Si7021_read+0x68>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4bea:	4b12      	ldr	r3, [pc, #72]	; (4c34 <Si7021_read+0x80>)
    4bec:	6859      	ldr	r1, [r3, #4]
    4bee:	2280      	movs	r2, #128	; 0x80
    4bf0:	02d2      	lsls	r2, r2, #11
    4bf2:	430a      	orrs	r2, r1
    4bf4:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4bf6:	6859      	ldr	r1, [r3, #4]
    4bf8:	22c0      	movs	r2, #192	; 0xc0
    4bfa:	0292      	lsls	r2, r2, #10
    4bfc:	430a      	orrs	r2, r1
    4bfe:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    4c00:	2228      	movs	r2, #40	; 0x28
    4c02:	5c99      	ldrb	r1, [r3, r2]
    4c04:	4a0c      	ldr	r2, [pc, #48]	; (4c38 <Si7021_read+0x84>)
    4c06:	7051      	strb	r1, [r2, #1]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    4c08:	8b5a      	ldrh	r2, [r3, #26]
    4c0a:	2110      	movs	r1, #16
    4c0c:	430a      	orrs	r2, r1
    4c0e:	b292      	uxth	r2, r2
    4c10:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4c12:	4b08      	ldr	r3, [pc, #32]	; (4c34 <Si7021_read+0x80>)
    4c14:	69db      	ldr	r3, [r3, #28]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d1fb      	bne.n	4c12 <Si7021_read+0x5e>
    4c1a:	e7dc      	b.n	4bd6 <Si7021_read+0x22>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    4c1c:	2328      	movs	r3, #40	; 0x28
    4c1e:	4905      	ldr	r1, [pc, #20]	; (4c34 <Si7021_read+0x80>)
    4c20:	5cc9      	ldrb	r1, [r1, r3]
    4c22:	4b05      	ldr	r3, [pc, #20]	; (4c38 <Si7021_read+0x84>)
    4c24:	5499      	strb	r1, [r3, r2]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4c26:	4b03      	ldr	r3, [pc, #12]	; (4c34 <Si7021_read+0x80>)
    4c28:	7e1b      	ldrb	r3, [r3, #24]
    4c2a:	079b      	lsls	r3, r3, #30
    4c2c:	d5fb      	bpl.n	4c26 <Si7021_read+0x72>
	for (int i = 0; i < size-1; i++)
    4c2e:	3201      	adds	r2, #1
    4c30:	e7d9      	b.n	4be6 <Si7021_read+0x32>
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	42001000 	.word	0x42001000
    4c38:	200002b0 	.word	0x200002b0
    4c3c:	fffbffff 	.word	0xfffbffff

00004c40 <Si7021_command>:
	
}

void Si7021_command(uint8_t command){
	
	Si7021_write_buffer[0] = command;	
    4c40:	4b1a      	ldr	r3, [pc, #104]	; (4cac <Si7021_command+0x6c>)
    4c42:	7118      	strb	r0, [r3, #4]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    4c44:	2280      	movs	r2, #128	; 0x80
    4c46:	4b1a      	ldr	r3, [pc, #104]	; (4cb0 <Si7021_command+0x70>)
    4c48:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4c4a:	4b19      	ldr	r3, [pc, #100]	; (4cb0 <Si7021_command+0x70>)
    4c4c:	7e1b      	ldrb	r3, [r3, #24]
    4c4e:	07db      	lsls	r3, r3, #31
    4c50:	d5fb      	bpl.n	4c4a <Si7021_command+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4c52:	4b17      	ldr	r3, [pc, #92]	; (4cb0 <Si7021_command+0x70>)
    4c54:	8b5b      	ldrh	r3, [r3, #26]
    4c56:	075b      	lsls	r3, r3, #29
    4c58:	d409      	bmi.n	4c6e <Si7021_command+0x2e>
    4c5a:	2200      	movs	r2, #0
	for (int i = 0; i < size; i++)
    4c5c:	2a00      	cmp	r2, #0
    4c5e:	dd0d      	ble.n	4c7c <Si7021_command+0x3c>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4c60:	4a13      	ldr	r2, [pc, #76]	; (4cb0 <Si7021_command+0x70>)
    4c62:	6851      	ldr	r1, [r2, #4]
    4c64:	23c0      	movs	r3, #192	; 0xc0
    4c66:	029b      	lsls	r3, r3, #10
    4c68:	430b      	orrs	r3, r1
    4c6a:	6053      	str	r3, [r2, #4]
	i2c_write(Si7021_write_buffer,1,SI7021_SLAVE_ADDR);

}
    4c6c:	4770      	bx	lr
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4c6e:	4a10      	ldr	r2, [pc, #64]	; (4cb0 <Si7021_command+0x70>)
    4c70:	6851      	ldr	r1, [r2, #4]
    4c72:	23c0      	movs	r3, #192	; 0xc0
    4c74:	029b      	lsls	r3, r3, #10
    4c76:	430b      	orrs	r3, r1
    4c78:	6053      	str	r3, [r2, #4]
    4c7a:	e7f7      	b.n	4c6c <Si7021_command+0x2c>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4c7c:	4b0b      	ldr	r3, [pc, #44]	; (4cac <Si7021_command+0x6c>)
    4c7e:	189b      	adds	r3, r3, r2
    4c80:	7918      	ldrb	r0, [r3, #4]
    4c82:	2328      	movs	r3, #40	; 0x28
    4c84:	490a      	ldr	r1, [pc, #40]	; (4cb0 <Si7021_command+0x70>)
    4c86:	54c8      	strb	r0, [r1, r3]
 		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4c88:	4b09      	ldr	r3, [pc, #36]	; (4cb0 <Si7021_command+0x70>)
    4c8a:	7e1b      	ldrb	r3, [r3, #24]
    4c8c:	07db      	lsls	r3, r3, #31
    4c8e:	d5fb      	bpl.n	4c88 <Si7021_command+0x48>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4c90:	4b07      	ldr	r3, [pc, #28]	; (4cb0 <Si7021_command+0x70>)
    4c92:	8b5b      	ldrh	r3, [r3, #26]
    4c94:	075b      	lsls	r3, r3, #29
    4c96:	d401      	bmi.n	4c9c <Si7021_command+0x5c>
	for (int i = 0; i < size; i++)
    4c98:	3201      	adds	r2, #1
    4c9a:	e7df      	b.n	4c5c <Si7021_command+0x1c>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4c9c:	4a04      	ldr	r2, [pc, #16]	; (4cb0 <Si7021_command+0x70>)
    4c9e:	6851      	ldr	r1, [r2, #4]
    4ca0:	23c0      	movs	r3, #192	; 0xc0
    4ca2:	029b      	lsls	r3, r3, #10
    4ca4:	430b      	orrs	r3, r1
    4ca6:	6053      	str	r3, [r2, #4]
    4ca8:	e7e0      	b.n	4c6c <Si7021_command+0x2c>
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	200002b0 	.word	0x200002b0
    4cb0:	42001000 	.word	0x42001000

00004cb4 <usb_cb_reset>:

//bool echoing = true;

void usb_cb_reset(void) {
	// nothing so far
}
    4cb4:	4770      	bx	lr
	...

00004cb8 <usb_cb_control_setup>:

void usb_cb_control_setup(void) {
    4cb8:	b510      	push	{r4, lr}
	uint16_t len = usb_setup.wLength;
    4cba:	4b14      	ldr	r3, [pc, #80]	; (4d0c <usb_cb_control_setup+0x54>)
    4cbc:	88dc      	ldrh	r4, [r3, #6]
	if (usb_setup.bRequest == USB_REQ_GetMSDescriptor) {
    4cbe:	785b      	ldrb	r3, [r3, #1]
    4cc0:	2b2e      	cmp	r3, #46	; 0x2e
    4cc2:	d002      	beq.n	4cca <usb_cb_control_setup+0x12>
		}
		usb_ep0_in(len);
		usb_ep0_out();
	}
	else
		usb_ep0_stall();
    4cc4:	4b12      	ldr	r3, [pc, #72]	; (4d10 <usb_cb_control_setup+0x58>)
    4cc6:	4798      	blx	r3
}
    4cc8:	bd10      	pop	{r4, pc}
		switch (usb_setup.wIndex) {
    4cca:	4b10      	ldr	r3, [pc, #64]	; (4d0c <usb_cb_control_setup+0x54>)
    4ccc:	889b      	ldrh	r3, [r3, #4]
    4cce:	2b04      	cmp	r3, #4
    4cd0:	d004      	beq.n	4cdc <usb_cb_control_setup+0x24>
    4cd2:	2b05      	cmp	r3, #5
    4cd4:	d010      	beq.n	4cf8 <usb_cb_control_setup+0x40>
			return usb_ep0_stall();
    4cd6:	4b0e      	ldr	r3, [pc, #56]	; (4d10 <usb_cb_control_setup+0x58>)
    4cd8:	4798      	blx	r3
    4cda:	e7f5      	b.n	4cc8 <usb_cb_control_setup+0x10>
			if (len > msft_compatible.dwLength)
    4cdc:	2c28      	cmp	r4, #40	; 0x28
    4cde:	d900      	bls.n	4ce2 <usb_cb_control_setup+0x2a>
				len = msft_compatible.dwLength;
    4ce0:	2428      	movs	r4, #40	; 0x28
			memcpy(ep0_buf_in, &msft_compatible, len);
    4ce2:	0022      	movs	r2, r4
    4ce4:	490b      	ldr	r1, [pc, #44]	; (4d14 <usb_cb_control_setup+0x5c>)
    4ce6:	480c      	ldr	r0, [pc, #48]	; (4d18 <usb_cb_control_setup+0x60>)
    4ce8:	4b0c      	ldr	r3, [pc, #48]	; (4d1c <usb_cb_control_setup+0x64>)
    4cea:	4798      	blx	r3
		usb_ep0_in(len);
    4cec:	b2e0      	uxtb	r0, r4
    4cee:	4b0c      	ldr	r3, [pc, #48]	; (4d20 <usb_cb_control_setup+0x68>)
    4cf0:	4798      	blx	r3
		usb_ep0_out();
    4cf2:	4b0c      	ldr	r3, [pc, #48]	; (4d24 <usb_cb_control_setup+0x6c>)
    4cf4:	4798      	blx	r3
    4cf6:	e7e7      	b.n	4cc8 <usb_cb_control_setup+0x10>
			if (len > msft_extended.dwLength)
    4cf8:	2c8e      	cmp	r4, #142	; 0x8e
    4cfa:	d900      	bls.n	4cfe <usb_cb_control_setup+0x46>
				len = msft_extended.dwLength;
    4cfc:	248e      	movs	r4, #142	; 0x8e
			memcpy(ep0_buf_in, &msft_extended, len);
    4cfe:	0022      	movs	r2, r4
    4d00:	4904      	ldr	r1, [pc, #16]	; (4d14 <usb_cb_control_setup+0x5c>)
    4d02:	3128      	adds	r1, #40	; 0x28
    4d04:	4804      	ldr	r0, [pc, #16]	; (4d18 <usb_cb_control_setup+0x60>)
    4d06:	4b05      	ldr	r3, [pc, #20]	; (4d1c <usb_cb_control_setup+0x64>)
    4d08:	4798      	blx	r3
			break;
    4d0a:	e7ef      	b.n	4cec <usb_cb_control_setup+0x34>
    4d0c:	20000948 	.word	0x20000948
    4d10:	000049b9 	.word	0x000049b9
    4d14:	000074ac 	.word	0x000074ac
    4d18:	2000073c 	.word	0x2000073c
    4d1c:	00005685 	.word	0x00005685
    4d20:	00004969 	.word	0x00004969
    4d24:	00004921 	.word	0x00004921

00004d28 <usb_cb_control_in_completion>:

void usb_cb_control_in_completion(void) {

}
    4d28:	4770      	bx	lr

00004d2a <usb_cb_control_out_completion>:

void usb_cb_control_out_completion(void) {

}
    4d2a:	4770      	bx	lr

00004d2c <usb_cb_completion>:

void usb_cb_completion(void) {
	// no int flag remaining
}
    4d2c:	4770      	bx	lr
	...

00004d30 <usb_cb_set_configuration>:

bool usb_cb_set_configuration(uint8_t config) {
    4d30:	b510      	push	{r4, lr}
	switch (config) {
    4d32:	2800      	cmp	r0, #0
    4d34:	d003      	beq.n	4d3e <usb_cb_set_configuration+0xe>
    4d36:	2801      	cmp	r0, #1
    4d38:	d008      	beq.n	4d4c <usb_cb_set_configuration+0x1c>
		usb_enable_ep(confDesc.endpOUT.bEndpointAddress, confDesc.endpOUT.bmAttributes, confDesc.endpOUT.wMaxPacketSize);
		usb_enable_ep(confDesc.endpIN.bEndpointAddress, confDesc.endpIN.bmAttributes, confDesc.endpIN.wMaxPacketSize);
		usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
		return true;
	  default:
		return false;
    4d3a:	2000      	movs	r0, #0
    4d3c:	e005      	b.n	4d4a <usb_cb_set_configuration+0x1a>
		usb_disable_ep(confDesc.endpOUT.bEndpointAddress);
    4d3e:	2001      	movs	r0, #1
    4d40:	4c0a      	ldr	r4, [pc, #40]	; (4d6c <usb_cb_set_configuration+0x3c>)
    4d42:	47a0      	blx	r4
		usb_disable_ep(confDesc.endpIN.bEndpointAddress);
    4d44:	2081      	movs	r0, #129	; 0x81
    4d46:	47a0      	blx	r4
		return true;
    4d48:	2001      	movs	r0, #1
	}
	return true;
}
    4d4a:	bd10      	pop	{r4, pc}
		usb_enable_ep(confDesc.endpOUT.bEndpointAddress, confDesc.endpOUT.bmAttributes, confDesc.endpOUT.wMaxPacketSize);
    4d4c:	2240      	movs	r2, #64	; 0x40
    4d4e:	2103      	movs	r1, #3
    4d50:	2001      	movs	r0, #1
    4d52:	4c07      	ldr	r4, [pc, #28]	; (4d70 <usb_cb_set_configuration+0x40>)
    4d54:	47a0      	blx	r4
		usb_enable_ep(confDesc.endpIN.bEndpointAddress, confDesc.endpIN.bmAttributes, confDesc.endpIN.wMaxPacketSize);
    4d56:	2240      	movs	r2, #64	; 0x40
    4d58:	2103      	movs	r1, #3
    4d5a:	2081      	movs	r0, #129	; 0x81
    4d5c:	47a0      	blx	r4
		usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
    4d5e:	2240      	movs	r2, #64	; 0x40
    4d60:	4904      	ldr	r1, [pc, #16]	; (4d74 <usb_cb_set_configuration+0x44>)
    4d62:	2001      	movs	r0, #1
    4d64:	4b04      	ldr	r3, [pc, #16]	; (4d78 <usb_cb_set_configuration+0x48>)
    4d66:	4798      	blx	r3
		return true;
    4d68:	2001      	movs	r0, #1
    4d6a:	e7ee      	b.n	4d4a <usb_cb_set_configuration+0x1a>
    4d6c:	00004801 	.word	0x00004801
    4d70:	000046f9 	.word	0x000046f9
    4d74:	20000c94 	.word	0x20000c94
    4d78:	00004841 	.word	0x00004841

00004d7c <usb_cb_set_interface>:

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	return !(interface || altsetting);
    4d7c:	4308      	orrs	r0, r1
    4d7e:	4241      	negs	r1, r0
    4d80:	4148      	adcs	r0, r1
    4d82:	b2c0      	uxtb	r0, r0
}
    4d84:	4770      	bx	lr
	...

00004d88 <usb_cb_get_descriptor>:

uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** descriptor_ptr) {
    4d88:	b510      	push	{r4, lr}
    4d8a:	0014      	movs	r4, r2
	switch (type) {
    4d8c:	2802      	cmp	r0, #2
    4d8e:	d00c      	beq.n	4daa <usb_cb_get_descriptor+0x22>
    4d90:	2803      	cmp	r0, #3
    4d92:	d011      	beq.n	4db8 <usb_cb_get_descriptor+0x30>
    4d94:	2801      	cmp	r0, #1
    4d96:	d001      	beq.n	4d9c <usb_cb_get_descriptor+0x14>
			return 0;
		}
		return ((USB_StringDescriptor *)*descriptor_ptr)->bLength;
	  case USB_DTYPE_DeviceCapabilities:
	  default: // There is an unrecognized descriptor type request !
		return 0;
    4d98:	2000      	movs	r0, #0
	}
}
    4d9a:	bd10      	pop	{r4, pc}
		*descriptor_ptr = (uint8_t *)&devDesc;
    4d9c:	4b20      	ldr	r3, [pc, #128]	; (4e20 <usb_cb_get_descriptor+0x98>)
    4d9e:	3338      	adds	r3, #56	; 0x38
    4da0:	6013      	str	r3, [r2, #0]
		return ( index ? 0 : devDesc.bLength );
    4da2:	2900      	cmp	r1, #0
    4da4:	d135      	bne.n	4e12 <usb_cb_get_descriptor+0x8a>
    4da6:	3011      	adds	r0, #17
    4da8:	e7f7      	b.n	4d9a <usb_cb_get_descriptor+0x12>
		*descriptor_ptr = (uint8_t *)&confDesc;
    4daa:	4b1d      	ldr	r3, [pc, #116]	; (4e20 <usb_cb_get_descriptor+0x98>)
    4dac:	334c      	adds	r3, #76	; 0x4c
    4dae:	6013      	str	r3, [r2, #0]
		return ( index ? 0 : confDesc.conf.wTotalLength );
    4db0:	2900      	cmp	r1, #0
    4db2:	d130      	bne.n	4e16 <usb_cb_get_descriptor+0x8e>
    4db4:	2020      	movs	r0, #32
    4db6:	e7f0      	b.n	4d9a <usb_cb_get_descriptor+0x12>
		switch (index) {
    4db8:	2903      	cmp	r1, #3
    4dba:	d01c      	beq.n	4df6 <usb_cb_get_descriptor+0x6e>
    4dbc:	d808      	bhi.n	4dd0 <usb_cb_get_descriptor+0x48>
    4dbe:	2901      	cmp	r1, #1
    4dc0:	d00f      	beq.n	4de2 <usb_cb_get_descriptor+0x5a>
    4dc2:	d813      	bhi.n	4dec <usb_cb_get_descriptor+0x64>
			*descriptor_ptr = (uint8_t *)&langDesc;
    4dc4:	4b16      	ldr	r3, [pc, #88]	; (4e20 <usb_cb_get_descriptor+0x98>)
    4dc6:	336c      	adds	r3, #108	; 0x6c
    4dc8:	6013      	str	r3, [r2, #0]
		return ((USB_StringDescriptor *)*descriptor_ptr)->bLength;
    4dca:	6823      	ldr	r3, [r4, #0]
    4dcc:	7818      	ldrb	r0, [r3, #0]
    4dce:	e7e4      	b.n	4d9a <usb_cb_get_descriptor+0x12>
		switch (index) {
    4dd0:	2905      	cmp	r1, #5
    4dd2:	d019      	beq.n	4e08 <usb_cb_get_descriptor+0x80>
    4dd4:	d313      	bcc.n	4dfe <usb_cb_get_descriptor+0x76>
    4dd6:	29ee      	cmp	r1, #238	; 0xee
    4dd8:	d11f      	bne.n	4e1a <usb_cb_get_descriptor+0x92>
			*descriptor_ptr = (uint8_t *)&msft_os;
    4dda:	4b11      	ldr	r3, [pc, #68]	; (4e20 <usb_cb_get_descriptor+0x98>)
    4ddc:	3370      	adds	r3, #112	; 0x70
    4dde:	6013      	str	r3, [r2, #0]
			break;
    4de0:	e7f3      	b.n	4dca <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("ATMEL [Spark firmware]");
    4de2:	4810      	ldr	r0, [pc, #64]	; (4e24 <usb_cb_get_descriptor+0x9c>)
    4de4:	4b10      	ldr	r3, [pc, #64]	; (4e28 <usb_cb_get_descriptor+0xa0>)
    4de6:	4798      	blx	r3
    4de8:	6020      	str	r0, [r4, #0]
			break;
    4dea:	e7ee      	b.n	4dca <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("WinUSB test device");
    4dec:	480f      	ldr	r0, [pc, #60]	; (4e2c <usb_cb_get_descriptor+0xa4>)
    4dee:	4b0e      	ldr	r3, [pc, #56]	; (4e28 <usb_cb_get_descriptor+0xa0>)
    4df0:	4798      	blx	r3
    4df2:	6020      	str	r0, [r4, #0]
			break;
    4df4:	e7e9      	b.n	4dca <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = samd_serial_number_string_descriptor();
    4df6:	4b0e      	ldr	r3, [pc, #56]	; (4e30 <usb_cb_get_descriptor+0xa8>)
    4df8:	4798      	blx	r3
    4dfa:	6020      	str	r0, [r4, #0]
			break;
    4dfc:	e7e5      	b.n	4dca <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("Configuration string descriptor");
    4dfe:	480d      	ldr	r0, [pc, #52]	; (4e34 <usb_cb_get_descriptor+0xac>)
    4e00:	4b09      	ldr	r3, [pc, #36]	; (4e28 <usb_cb_get_descriptor+0xa0>)
    4e02:	4798      	blx	r3
    4e04:	6020      	str	r0, [r4, #0]
			break;
    4e06:	e7e0      	b.n	4dca <usb_cb_get_descriptor+0x42>
			*descriptor_ptr = usb_string_to_descriptor("Interface string descriptor");
    4e08:	480b      	ldr	r0, [pc, #44]	; (4e38 <usb_cb_get_descriptor+0xb0>)
    4e0a:	4b07      	ldr	r3, [pc, #28]	; (4e28 <usb_cb_get_descriptor+0xa0>)
    4e0c:	4798      	blx	r3
    4e0e:	6020      	str	r0, [r4, #0]
			break;
    4e10:	e7db      	b.n	4dca <usb_cb_get_descriptor+0x42>
		return ( index ? 0 : devDesc.bLength );
    4e12:	2000      	movs	r0, #0
    4e14:	e7c1      	b.n	4d9a <usb_cb_get_descriptor+0x12>
		return ( index ? 0 : confDesc.conf.wTotalLength );
    4e16:	2000      	movs	r0, #0
    4e18:	e7bf      	b.n	4d9a <usb_cb_get_descriptor+0x12>
			return 0;
    4e1a:	2000      	movs	r0, #0
    4e1c:	e7bd      	b.n	4d9a <usb_cb_get_descriptor+0x12>
    4e1e:	46c0      	nop			; (mov r8, r8)
    4e20:	0000752c 	.word	0x0000752c
    4e24:	000075b4 	.word	0x000075b4
    4e28:	000051c1 	.word	0x000051c1
    4e2c:	000075cc 	.word	0x000075cc
    4e30:	00004aa5 	.word	0x00004aa5
    4e34:	000075e0 	.word	0x000075e0
    4e38:	00007600 	.word	0x00007600

00004e3c <usb_setup_fifos>:
//================================
fifo_t *buffer; // For storing incoming packets
volatile bool sending_data;

void usb_setup_fifos(void)
{
    4e3c:	b570      	push	{r4, r5, r6, lr}
 * This function is used to create a buffer, it allocates memory for a buffer of
 * the requested size
 */
inline fifo_t* createFifo(size_t size)
{
	uint8_t* buffer = (uint8_t*)malloc(size);
    4e3e:	2080      	movs	r0, #128	; 0x80
    4e40:	00c0      	lsls	r0, r0, #3
    4e42:	4b0c      	ldr	r3, [pc, #48]	; (4e74 <usb_setup_fifos+0x38>)
    4e44:	4798      	blx	r3
    4e46:	1e05      	subs	r5, r0, #0

	if (buffer == NULL)
    4e48:	d012      	beq.n	4e70 <usb_setup_fifos+0x34>
	return NULL;

	fifo_t* fifo = (fifo_t*)malloc(sizeof(fifo_t));
    4e4a:	2010      	movs	r0, #16
    4e4c:	4b09      	ldr	r3, [pc, #36]	; (4e74 <usb_setup_fifos+0x38>)
    4e4e:	4798      	blx	r3
    4e50:	1e04      	subs	r4, r0, #0

	if (fifo == NULL)
    4e52:	d009      	beq.n	4e68 <usb_setup_fifos+0x2c>
	{
		free(buffer);
		return NULL;
	}

	fifo->buffer = buffer;
    4e54:	6005      	str	r5, [r0, #0]
	fifo->head = 0;
    4e56:	2300      	movs	r3, #0
    4e58:	6043      	str	r3, [r0, #4]
	fifo->tail = 0;
    4e5a:	6083      	str	r3, [r0, #8]
	fifo->size = size;
    4e5c:	2380      	movs	r3, #128	; 0x80
    4e5e:	00db      	lsls	r3, r3, #3
    4e60:	60c3      	str	r3, [r0, #12]
	buffer = createFifo(1024);
    4e62:	4b05      	ldr	r3, [pc, #20]	; (4e78 <usb_setup_fifos+0x3c>)
    4e64:	601c      	str	r4, [r3, #0]
}
    4e66:	bd70      	pop	{r4, r5, r6, pc}
		free(buffer);
    4e68:	0028      	movs	r0, r5
    4e6a:	4b04      	ldr	r3, [pc, #16]	; (4e7c <usb_setup_fifos+0x40>)
    4e6c:	4798      	blx	r3
    4e6e:	e7f8      	b.n	4e62 <usb_setup_fifos+0x26>
	return NULL;
    4e70:	2400      	movs	r4, #0
    4e72:	e7f6      	b.n	4e62 <usb_setup_fifos+0x26>
    4e74:	0000565d 	.word	0x0000565d
    4e78:	20000cd8 	.word	0x20000cd8
    4e7c:	00005671 	.word	0x00005671

00004e80 <usb_bytes_available>:

uint16_t usb_bytes_available(void)
{
	return elements(buffer);
    4e80:	4b0c      	ldr	r3, [pc, #48]	; (4eb4 <usb_bytes_available+0x34>)
    4e82:	6819      	ldr	r1, [r3, #0]
/**
 * @brief Returns the number of elements in the FIFO
 */
inline size_t elements(fifo_t* fifo)
{
	if (fifo->head == fifo->tail)
    4e84:	684b      	ldr	r3, [r1, #4]
    4e86:	688a      	ldr	r2, [r1, #8]
    4e88:	4293      	cmp	r3, r2
    4e8a:	d011      	beq.n	4eb0 <usb_bytes_available+0x30>
	return 0;
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    4e8c:	68c8      	ldr	r0, [r1, #12]
    4e8e:	1e41      	subs	r1, r0, #1
    4e90:	428b      	cmp	r3, r1
    4e92:	d007      	beq.n	4ea4 <usb_bytes_available+0x24>
    4e94:	1e51      	subs	r1, r2, #1
    4e96:	428b      	cmp	r3, r1
    4e98:	d002      	beq.n	4ea0 <usb_bytes_available+0x20>
	return fifo->size;
	else if (fifo->head < fifo->tail)
    4e9a:	4293      	cmp	r3, r2
    4e9c:	d305      	bcc.n	4eaa <usb_bytes_available+0x2a>
	return (fifo->head) + (fifo->size - fifo->tail);
	else
	return fifo->head - fifo->tail;
    4e9e:	1a98      	subs	r0, r3, r2
    4ea0:	b280      	uxth	r0, r0
}
    4ea2:	4770      	bx	lr
	else if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    4ea4:	2a00      	cmp	r2, #0
    4ea6:	d1f5      	bne.n	4e94 <usb_bytes_available+0x14>
    4ea8:	e7fa      	b.n	4ea0 <usb_bytes_available+0x20>
	return (fifo->head) + (fifo->size - fifo->tail);
    4eaa:	1a80      	subs	r0, r0, r2
    4eac:	1818      	adds	r0, r3, r0
    4eae:	e7f7      	b.n	4ea0 <usb_bytes_available+0x20>
	return 0;
    4eb0:	2000      	movs	r0, #0
    4eb2:	e7f5      	b.n	4ea0 <usb_bytes_available+0x20>
    4eb4:	20000cd8 	.word	0x20000cd8

00004eb8 <usb_get>:

void usb_get(char *point, uint16_t num_char)
{
    4eb8:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i=0;i<num_char;i++)
    4eba:	2300      	movs	r3, #0
    4ebc:	e00c      	b.n	4ed8 <usb_get+0x20>
	return true;
    4ebe:	2601      	movs	r6, #1
    4ec0:	e014      	b.n	4eec <usb_get+0x34>
	*byte = fifo->buffer[fifo->tail];
    4ec2:	6816      	ldr	r6, [r2, #0]
    4ec4:	5d34      	ldrb	r4, [r6, r4]
    4ec6:	702c      	strb	r4, [r5, #0]
	fifo->tail++;
    4ec8:	6894      	ldr	r4, [r2, #8]
    4eca:	3401      	adds	r4, #1
    4ecc:	6094      	str	r4, [r2, #8]
	if (fifo->tail == fifo->size)
    4ece:	68d5      	ldr	r5, [r2, #12]
    4ed0:	42ac      	cmp	r4, r5
    4ed2:	d010      	beq.n	4ef6 <usb_get+0x3e>
    4ed4:	3301      	adds	r3, #1
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	428b      	cmp	r3, r1
    4eda:	d20f      	bcs.n	4efc <usb_get+0x44>
		pop(buffer, &point[i]);
    4edc:	4a08      	ldr	r2, [pc, #32]	; (4f00 <usb_get+0x48>)
    4ede:	6812      	ldr	r2, [r2, #0]
    4ee0:	18c5      	adds	r5, r0, r3
	if (fifo->head == fifo->tail)
    4ee2:	6894      	ldr	r4, [r2, #8]
    4ee4:	6856      	ldr	r6, [r2, #4]
    4ee6:	42a6      	cmp	r6, r4
    4ee8:	d0e9      	beq.n	4ebe <usb_get+0x6>
	return false;
    4eea:	2600      	movs	r6, #0
	if (isEmpty(fifo) == true)
    4eec:	2e00      	cmp	r6, #0
    4eee:	d0e8      	beq.n	4ec2 <usb_get+0xa>
		*byte = 0x7F; // We do hear plops in UPKEEP mode from here, why is isEmpty not triggered?
    4ef0:	227f      	movs	r2, #127	; 0x7f
    4ef2:	702a      	strb	r2, [r5, #0]
    4ef4:	e7ee      	b.n	4ed4 <usb_get+0x1c>
	fifo->tail = 0;
    4ef6:	2400      	movs	r4, #0
    4ef8:	6094      	str	r4, [r2, #8]
    4efa:	e7eb      	b.n	4ed4 <usb_get+0x1c>
}
    4efc:	bd70      	pop	{r4, r5, r6, pc}
    4efe:	46c0      	nop			; (mov r8, r8)
    4f00:	20000cd8 	.word	0x20000cd8

00004f04 <usb_put>:

void usb_put(char *point, uint16_t num_char)
{
    4f04:	b510      	push	{r4, lr}
    4f06:	000a      	movs	r2, r1
	sending_data = true;
    4f08:	2101      	movs	r1, #1
    4f0a:	4b06      	ldr	r3, [pc, #24]	; (4f24 <usb_put+0x20>)
    4f0c:	7019      	strb	r1, [r3, #0]
	usb_ep_start_in(confDesc.endpIN.bEndpointAddress, point, num_char, true);
    4f0e:	2301      	movs	r3, #1
    4f10:	0001      	movs	r1, r0
    4f12:	2081      	movs	r0, #129	; 0x81
    4f14:	4c04      	ldr	r4, [pc, #16]	; (4f28 <usb_put+0x24>)
    4f16:	47a0      	blx	r4
	//usb_ep_wait_for_ready(confDesc.endpIN.bEndpointAddress);
	while(sending_data == true);
    4f18:	4b02      	ldr	r3, [pc, #8]	; (4f24 <usb_put+0x20>)
    4f1a:	781b      	ldrb	r3, [r3, #0]
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d1fb      	bne.n	4f18 <usb_put+0x14>
}
    4f20:	bd10      	pop	{r4, pc}
    4f22:	46c0      	nop			; (mov r8, r8)
    4f24:	20000cd4 	.word	0x20000cd4
    4f28:	00004891 	.word	0x00004891

00004f2c <usb_cb_handle_ep_out>:

// Handle incoming data
void usb_cb_handle_ep_out(uint8_t ep) {
    4f2c:	b570      	push	{r4, r5, r6, lr}
    4f2e:	0005      	movs	r5, r0
	uint32_t size = usb_ep_out_length(ep);
    4f30:	4b19      	ldr	r3, [pc, #100]	; (4f98 <usb_cb_handle_ep_out+0x6c>)
    4f32:	4798      	blx	r3
    4f34:	0004      	movs	r4, r0
	
	switch (ep) {		
    4f36:	2d01      	cmp	r5, #1
    4f38:	d000      	beq.n	4f3c <usb_cb_handle_ep_out+0x10>
			return;
		
		default:
			return;
	}
}
    4f3a:	bd70      	pop	{r4, r5, r6, pc}
			usb_ep_start_out(confDesc.endpOUT.bEndpointAddress, ep1_buf_out, confDesc.endpOUT.wMaxPacketSize);
    4f3c:	2240      	movs	r2, #64	; 0x40
    4f3e:	4917      	ldr	r1, [pc, #92]	; (4f9c <usb_cb_handle_ep_out+0x70>)
    4f40:	2001      	movs	r0, #1
    4f42:	4b17      	ldr	r3, [pc, #92]	; (4fa0 <usb_cb_handle_ep_out+0x74>)
    4f44:	4798      	blx	r3
			for(uint8_t i=0;i<size;i++)
    4f46:	2200      	movs	r2, #0
    4f48:	e008      	b.n	4f5c <usb_cb_handle_ep_out+0x30>
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    4f4a:	6899      	ldr	r1, [r3, #8]
    4f4c:	2900      	cmp	r1, #0
    4f4e:	d110      	bne.n	4f72 <usb_cb_handle_ep_out+0x46>
	return true;
    4f50:	2101      	movs	r1, #1
    4f52:	e013      	b.n	4f7c <usb_cb_handle_ep_out+0x50>
    4f54:	2101      	movs	r1, #1
    4f56:	e011      	b.n	4f7c <usb_cb_handle_ep_out+0x50>
    4f58:	3201      	adds	r2, #1
    4f5a:	b2d2      	uxtb	r2, r2
    4f5c:	4294      	cmp	r4, r2
    4f5e:	d9ec      	bls.n	4f3a <usb_cb_handle_ep_out+0xe>
				push(buffer, ep1_buf_out[i]);
    4f60:	4b10      	ldr	r3, [pc, #64]	; (4fa4 <usb_cb_handle_ep_out+0x78>)
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	490d      	ldr	r1, [pc, #52]	; (4f9c <usb_cb_handle_ep_out+0x70>)
    4f66:	5c8d      	ldrb	r5, [r1, r2]
	if ((fifo->head == (fifo->size - 1) && fifo->tail == 0) || (fifo->head == (fifo->tail - 1)))
    4f68:	6858      	ldr	r0, [r3, #4]
    4f6a:	68d9      	ldr	r1, [r3, #12]
    4f6c:	3901      	subs	r1, #1
    4f6e:	4288      	cmp	r0, r1
    4f70:	d0eb      	beq.n	4f4a <usb_cb_handle_ep_out+0x1e>
    4f72:	6899      	ldr	r1, [r3, #8]
    4f74:	3901      	subs	r1, #1
    4f76:	4288      	cmp	r0, r1
    4f78:	d0ec      	beq.n	4f54 <usb_cb_handle_ep_out+0x28>
	return false;
    4f7a:	2100      	movs	r1, #0
	if (isFull(fifo) == true)
    4f7c:	2900      	cmp	r1, #0
    4f7e:	d1eb      	bne.n	4f58 <usb_cb_handle_ep_out+0x2c>
	fifo->buffer[fifo->head] = byte;
    4f80:	6819      	ldr	r1, [r3, #0]
    4f82:	540d      	strb	r5, [r1, r0]
	fifo->head++;
    4f84:	6859      	ldr	r1, [r3, #4]
    4f86:	3101      	adds	r1, #1
    4f88:	6059      	str	r1, [r3, #4]
	if (fifo->head == fifo->size)
    4f8a:	68d8      	ldr	r0, [r3, #12]
    4f8c:	4281      	cmp	r1, r0
    4f8e:	d1e3      	bne.n	4f58 <usb_cb_handle_ep_out+0x2c>
	fifo->head = 0;
    4f90:	2100      	movs	r1, #0
    4f92:	6059      	str	r1, [r3, #4]
    4f94:	e7e0      	b.n	4f58 <usb_cb_handle_ep_out+0x2c>
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	000048f1 	.word	0x000048f1
    4f9c:	20000c94 	.word	0x20000c94
    4fa0:	00004841 	.word	0x00004841
    4fa4:	20000cd8 	.word	0x20000cd8

00004fa8 <usb_cb_handle_ep_in>:

// Typically don't do anything extra when we send data out
void usb_cb_handle_ep_in(uint8_t ep) {
	switch (ep) {
    4fa8:	2801      	cmp	r0, #1
    4faa:	d104      	bne.n	4fb6 <usb_cb_handle_ep_in+0xe>
		case 0x01:
			byteQueueToUSB = 0;
    4fac:	2300      	movs	r3, #0
    4fae:	4a02      	ldr	r2, [pc, #8]	; (4fb8 <usb_cb_handle_ep_in+0x10>)
    4fb0:	7013      	strb	r3, [r2, #0]
			sending_data = false;
    4fb2:	4a02      	ldr	r2, [pc, #8]	; (4fbc <usb_cb_handle_ep_in+0x14>)
    4fb4:	7013      	strb	r3, [r2, #0]
			return;
		
		default:
			return;
	}
    4fb6:	4770      	bx	lr
    4fb8:	200002b6 	.word	0x200002b6
    4fbc:	20000cd4 	.word	0x20000cd4

00004fc0 <usb_ep0_in_multi>:
#include "usb.h"

volatile uint8_t usb_configuration;

void usb_ep0_in_multi(void) {
    4fc0:	b570      	push	{r4, r5, r6, lr}
	uint16_t tsize = usb_ep0_in_size;
    4fc2:	4b11      	ldr	r3, [pc, #68]	; (5008 <usb_ep0_in_multi+0x48>)
    4fc4:	881c      	ldrh	r4, [r3, #0]

	if (tsize > USB_EP0_SIZE) {
    4fc6:	2c40      	cmp	r4, #64	; 0x40
    4fc8:	d900      	bls.n	4fcc <usb_ep0_in_multi+0xc>
		tsize = USB_EP0_SIZE;
    4fca:	2440      	movs	r4, #64	; 0x40
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
    4fcc:	0026      	movs	r6, r4
    4fce:	4d0f      	ldr	r5, [pc, #60]	; (500c <usb_ep0_in_multi+0x4c>)
    4fd0:	4b0f      	ldr	r3, [pc, #60]	; (5010 <usb_ep0_in_multi+0x50>)
    4fd2:	6819      	ldr	r1, [r3, #0]
    4fd4:	0022      	movs	r2, r4
    4fd6:	0028      	movs	r0, r5
    4fd8:	4b0e      	ldr	r3, [pc, #56]	; (5014 <usb_ep0_in_multi+0x54>)
    4fda:	4798      	blx	r3
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
    4fdc:	2300      	movs	r3, #0
    4fde:	0022      	movs	r2, r4
    4fe0:	0029      	movs	r1, r5
    4fe2:	2080      	movs	r0, #128	; 0x80
    4fe4:	4d0c      	ldr	r5, [pc, #48]	; (5018 <usb_ep0_in_multi+0x58>)
    4fe6:	47a8      	blx	r5

	if (tsize == 0) {
    4fe8:	2c00      	cmp	r4, #0
    4fea:	d009      	beq.n	5000 <usb_ep0_in_multi+0x40>
		usb_ep0_out();
	}

	usb_ep0_in_size -= tsize;
    4fec:	4a06      	ldr	r2, [pc, #24]	; (5008 <usb_ep0_in_multi+0x48>)
    4fee:	8813      	ldrh	r3, [r2, #0]
    4ff0:	1b1c      	subs	r4, r3, r4
    4ff2:	8014      	strh	r4, [r2, #0]
	usb_ep0_in_ptr += tsize;
    4ff4:	4a06      	ldr	r2, [pc, #24]	; (5010 <usb_ep0_in_multi+0x50>)
    4ff6:	6813      	ldr	r3, [r2, #0]
    4ff8:	469c      	mov	ip, r3
    4ffa:	4466      	add	r6, ip
    4ffc:	6016      	str	r6, [r2, #0]
}
    4ffe:	bd70      	pop	{r4, r5, r6, pc}
		usb_ep0_out();
    5000:	4b06      	ldr	r3, [pc, #24]	; (501c <usb_ep0_in_multi+0x5c>)
    5002:	4798      	blx	r3
    5004:	e7f2      	b.n	4fec <usb_ep0_in_multi+0x2c>
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	20000942 	.word	0x20000942
    500c:	2000073c 	.word	0x2000073c
    5010:	20000944 	.word	0x20000944
    5014:	00005685 	.word	0x00005685
    5018:	00004891 	.word	0x00004891
    501c:	00004921 	.word	0x00004921

00005020 <usb_handle_setup>:

void usb_handle_setup(void){
    5020:	b510      	push	{r4, lr}
    5022:	b082      	sub	sp, #8
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
    5024:	4b3f      	ldr	r3, [pc, #252]	; (5124 <usb_handle_setup+0x104>)
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	2260      	movs	r2, #96	; 0x60
    502a:	421a      	tst	r2, r3
    502c:	d176      	bne.n	511c <usb_handle_setup+0xfc>
		switch (usb_setup.bRequest){
    502e:	4b3d      	ldr	r3, [pc, #244]	; (5124 <usb_handle_setup+0x104>)
    5030:	785b      	ldrb	r3, [r3, #1]
    5032:	2b0b      	cmp	r3, #11
    5034:	d86f      	bhi.n	5116 <usb_handle_setup+0xf6>
    5036:	009b      	lsls	r3, r3, #2
    5038:	4a3b      	ldr	r2, [pc, #236]	; (5128 <usb_handle_setup+0x108>)
    503a:	58d3      	ldr	r3, [r2, r3]
    503c:	469f      	mov	pc, r3
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
    503e:	4b3b      	ldr	r3, [pc, #236]	; (512c <usb_handle_setup+0x10c>)
    5040:	2200      	movs	r2, #0
    5042:	701a      	strb	r2, [r3, #0]
				ep0_buf_in[1] = 0;
    5044:	705a      	strb	r2, [r3, #1]
				usb_ep0_in(2);
    5046:	2002      	movs	r0, #2
    5048:	4b39      	ldr	r3, [pc, #228]	; (5130 <usb_handle_setup+0x110>)
    504a:	4798      	blx	r3
				return usb_ep0_out();
    504c:	4b39      	ldr	r3, [pc, #228]	; (5134 <usb_handle_setup+0x114>)
    504e:	4798      	blx	r3
    5050:	e066      	b.n	5120 <usb_handle_setup+0x100>

			case USB_REQ_ClearFeature:
			case USB_REQ_SetFeature:
				usb_ep0_in(0);
    5052:	2000      	movs	r0, #0
    5054:	4b36      	ldr	r3, [pc, #216]	; (5130 <usb_handle_setup+0x110>)
    5056:	4798      	blx	r3
				return usb_ep0_out();
    5058:	4b36      	ldr	r3, [pc, #216]	; (5134 <usb_handle_setup+0x114>)
    505a:	4798      	blx	r3
    505c:	e060      	b.n	5120 <usb_handle_setup+0x100>

			case USB_REQ_SetAddress:
				usb_ep0_in(0);
    505e:	2000      	movs	r0, #0
    5060:	4b33      	ldr	r3, [pc, #204]	; (5130 <usb_handle_setup+0x110>)
    5062:	4798      	blx	r3
				return usb_ep0_out();
    5064:	4b33      	ldr	r3, [pc, #204]	; (5134 <usb_handle_setup+0x114>)
    5066:	4798      	blx	r3
    5068:	e05a      	b.n	5120 <usb_handle_setup+0x100>

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
    506a:	4b2e      	ldr	r3, [pc, #184]	; (5124 <usb_handle_setup+0x104>)
    506c:	8859      	ldrh	r1, [r3, #2]
    506e:	0a08      	lsrs	r0, r1, #8
				uint8_t index = (usb_setup.wValue & 0xFF);
    5070:	b2c9      	uxtb	r1, r1
				const uint8_t* descriptor = 0;
    5072:	2300      	movs	r3, #0
    5074:	9301      	str	r3, [sp, #4]
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    5076:	aa01      	add	r2, sp, #4
    5078:	4b2f      	ldr	r3, [pc, #188]	; (5138 <usb_handle_setup+0x118>)
    507a:	4798      	blx	r3

				if (size && descriptor){
    507c:	2800      	cmp	r0, #0
    507e:	d01a      	beq.n	50b6 <usb_handle_setup+0x96>
    5080:	9901      	ldr	r1, [sp, #4]
    5082:	2900      	cmp	r1, #0
    5084:	d017      	beq.n	50b6 <usb_handle_setup+0x96>
					if (size > usb_setup.wLength) {
    5086:	4a27      	ldr	r2, [pc, #156]	; (5124 <usb_handle_setup+0x104>)
    5088:	88d2      	ldrh	r2, [r2, #6]
    508a:	4290      	cmp	r0, r2
    508c:	d800      	bhi.n	5090 <usb_handle_setup+0x70>
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
    508e:	0002      	movs	r2, r0
						size = usb_setup.wLength;
					}
					if (descriptor == ep0_buf_in) {
    5090:	4b26      	ldr	r3, [pc, #152]	; (512c <usb_handle_setup+0x10c>)
    5092:	4299      	cmp	r1, r3
    5094:	d006      	beq.n	50a4 <usb_handle_setup+0x84>
						usb_ep0_in_size = 0;
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
					} else {
						usb_ep0_in_size = size;
    5096:	4b29      	ldr	r3, [pc, #164]	; (513c <usb_handle_setup+0x11c>)
    5098:	801a      	strh	r2, [r3, #0]
						usb_ep0_in_ptr = descriptor;
    509a:	4b29      	ldr	r3, [pc, #164]	; (5140 <usb_handle_setup+0x120>)
    509c:	6019      	str	r1, [r3, #0]
						usb_ep0_in_multi();
    509e:	4b29      	ldr	r3, [pc, #164]	; (5144 <usb_handle_setup+0x124>)
    50a0:	4798      	blx	r3
    50a2:	e03d      	b.n	5120 <usb_handle_setup+0x100>
						usb_ep0_in_size = 0;
    50a4:	2100      	movs	r1, #0
    50a6:	4b25      	ldr	r3, [pc, #148]	; (513c <usb_handle_setup+0x11c>)
    50a8:	8019      	strh	r1, [r3, #0]
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
    50aa:	2301      	movs	r3, #1
    50ac:	491f      	ldr	r1, [pc, #124]	; (512c <usb_handle_setup+0x10c>)
    50ae:	2080      	movs	r0, #128	; 0x80
    50b0:	4c25      	ldr	r4, [pc, #148]	; (5148 <usb_handle_setup+0x128>)
    50b2:	47a0      	blx	r4
    50b4:	e034      	b.n	5120 <usb_handle_setup+0x100>
					}
					return;
				} else {
					return usb_ep0_stall();
    50b6:	4b25      	ldr	r3, [pc, #148]	; (514c <usb_handle_setup+0x12c>)
    50b8:	4798      	blx	r3
    50ba:	e031      	b.n	5120 <usb_handle_setup+0x100>
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
    50bc:	4b24      	ldr	r3, [pc, #144]	; (5150 <usb_handle_setup+0x130>)
    50be:	781a      	ldrb	r2, [r3, #0]
    50c0:	4b1a      	ldr	r3, [pc, #104]	; (512c <usb_handle_setup+0x10c>)
    50c2:	701a      	strb	r2, [r3, #0]
				usb_ep0_in(1);
    50c4:	2001      	movs	r0, #1
    50c6:	4b1a      	ldr	r3, [pc, #104]	; (5130 <usb_handle_setup+0x110>)
    50c8:	4798      	blx	r3
				return usb_ep0_out();
    50ca:	4b1a      	ldr	r3, [pc, #104]	; (5134 <usb_handle_setup+0x114>)
    50cc:	4798      	blx	r3
    50ce:	e027      	b.n	5120 <usb_handle_setup+0x100>

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
    50d0:	4b14      	ldr	r3, [pc, #80]	; (5124 <usb_handle_setup+0x104>)
    50d2:	7898      	ldrb	r0, [r3, #2]
    50d4:	4b1f      	ldr	r3, [pc, #124]	; (5154 <usb_handle_setup+0x134>)
    50d6:	4798      	blx	r3
    50d8:	2800      	cmp	r0, #0
    50da:	d009      	beq.n	50f0 <usb_handle_setup+0xd0>
					usb_ep0_in(0);
    50dc:	2000      	movs	r0, #0
    50de:	4b14      	ldr	r3, [pc, #80]	; (5130 <usb_handle_setup+0x110>)
    50e0:	4798      	blx	r3
					usb_configuration = (uint8_t)(usb_setup.wValue);
    50e2:	4b10      	ldr	r3, [pc, #64]	; (5124 <usb_handle_setup+0x104>)
    50e4:	789a      	ldrb	r2, [r3, #2]
    50e6:	4b1a      	ldr	r3, [pc, #104]	; (5150 <usb_handle_setup+0x130>)
    50e8:	701a      	strb	r2, [r3, #0]
					return usb_ep0_out();
    50ea:	4b12      	ldr	r3, [pc, #72]	; (5134 <usb_handle_setup+0x114>)
    50ec:	4798      	blx	r3
    50ee:	e017      	b.n	5120 <usb_handle_setup+0x100>
				} else {
					return usb_ep0_stall();
    50f0:	4b16      	ldr	r3, [pc, #88]	; (514c <usb_handle_setup+0x12c>)
    50f2:	4798      	blx	r3
    50f4:	e014      	b.n	5120 <usb_handle_setup+0x100>
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
    50f6:	4b0b      	ldr	r3, [pc, #44]	; (5124 <usb_handle_setup+0x104>)
    50f8:	8859      	ldrh	r1, [r3, #2]
    50fa:	8898      	ldrh	r0, [r3, #4]
    50fc:	4b16      	ldr	r3, [pc, #88]	; (5158 <usb_handle_setup+0x138>)
    50fe:	4798      	blx	r3
    5100:	2800      	cmp	r0, #0
    5102:	d005      	beq.n	5110 <usb_handle_setup+0xf0>
					usb_ep0_in(0);
    5104:	2000      	movs	r0, #0
    5106:	4b0a      	ldr	r3, [pc, #40]	; (5130 <usb_handle_setup+0x110>)
    5108:	4798      	blx	r3
					return usb_ep0_out();
    510a:	4b0a      	ldr	r3, [pc, #40]	; (5134 <usb_handle_setup+0x114>)
    510c:	4798      	blx	r3
    510e:	e007      	b.n	5120 <usb_handle_setup+0x100>
				} else {
					return usb_ep0_stall();
    5110:	4b0e      	ldr	r3, [pc, #56]	; (514c <usb_handle_setup+0x12c>)
    5112:	4798      	blx	r3
    5114:	e004      	b.n	5120 <usb_handle_setup+0x100>
				}

			default:
				return usb_ep0_stall();
    5116:	4b0d      	ldr	r3, [pc, #52]	; (514c <usb_handle_setup+0x12c>)
    5118:	4798      	blx	r3
    511a:	e001      	b.n	5120 <usb_handle_setup+0x100>
		}
	}

	usb_cb_control_setup();
    511c:	4b0f      	ldr	r3, [pc, #60]	; (515c <usb_handle_setup+0x13c>)
    511e:	4798      	blx	r3
}
    5120:	b002      	add	sp, #8
    5122:	bd10      	pop	{r4, pc}
    5124:	20000948 	.word	0x20000948
    5128:	0000761c 	.word	0x0000761c
    512c:	2000073c 	.word	0x2000073c
    5130:	00004969 	.word	0x00004969
    5134:	00004921 	.word	0x00004921
    5138:	00004d89 	.word	0x00004d89
    513c:	20000942 	.word	0x20000942
    5140:	20000944 	.word	0x20000944
    5144:	00004fc1 	.word	0x00004fc1
    5148:	00004891 	.word	0x00004891
    514c:	000049b9 	.word	0x000049b9
    5150:	20000f1c 	.word	0x20000f1c
    5154:	00004d31 	.word	0x00004d31
    5158:	00004d7d 	.word	0x00004d7d
    515c:	00004cb9 	.word	0x00004cb9

00005160 <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
    5160:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    5162:	4b04      	ldr	r3, [pc, #16]	; (5174 <usb_handle_control_out_complete+0x14>)
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	2260      	movs	r2, #96	; 0x60
    5168:	421a      	tst	r2, r3
    516a:	d100      	bne.n	516e <usb_handle_control_out_complete+0xe>
		// Let the status stage proceed
	} else
		usb_cb_control_out_completion();
}
    516c:	bd10      	pop	{r4, pc}
		usb_cb_control_out_completion();
    516e:	4b02      	ldr	r3, [pc, #8]	; (5178 <usb_handle_control_out_complete+0x18>)
    5170:	4798      	blx	r3
}
    5172:	e7fb      	b.n	516c <usb_handle_control_out_complete+0xc>
    5174:	20000948 	.word	0x20000948
    5178:	00004d2b 	.word	0x00004d2b

0000517c <usb_handle_control_in_complete>:

void usb_handle_control_in_complete(void) {
    517c:	b510      	push	{r4, lr}
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
    517e:	4b0c      	ldr	r3, [pc, #48]	; (51b0 <usb_handle_control_in_complete+0x34>)
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	2260      	movs	r2, #96	; 0x60
    5184:	421a      	tst	r2, r3
    5186:	d10f      	bne.n	51a8 <usb_handle_control_in_complete+0x2c>
		switch (usb_setup.bRequest){
    5188:	4b09      	ldr	r3, [pc, #36]	; (51b0 <usb_handle_control_in_complete+0x34>)
    518a:	785b      	ldrb	r3, [r3, #1]
    518c:	2b05      	cmp	r3, #5
    518e:	d004      	beq.n	519a <usb_handle_control_in_complete+0x1e>
    5190:	2b06      	cmp	r3, #6
    5192:	d10b      	bne.n	51ac <usb_handle_control_in_complete+0x30>
			case USB_REQ_SetAddress:
				usb_set_address(usb_setup.wValue & 0x7F);
				return;
			case USB_REQ_GetDescriptor:
				usb_ep0_in_multi();
    5194:	4b07      	ldr	r3, [pc, #28]	; (51b4 <usb_handle_control_in_complete+0x38>)
    5196:	4798      	blx	r3
				return;
    5198:	e008      	b.n	51ac <usb_handle_control_in_complete+0x30>
				usb_set_address(usb_setup.wValue & 0x7F);
    519a:	4b05      	ldr	r3, [pc, #20]	; (51b0 <usb_handle_control_in_complete+0x34>)
    519c:	885b      	ldrh	r3, [r3, #2]
    519e:	207f      	movs	r0, #127	; 0x7f
    51a0:	4018      	ands	r0, r3
    51a2:	4b05      	ldr	r3, [pc, #20]	; (51b8 <usb_handle_control_in_complete+0x3c>)
    51a4:	4798      	blx	r3
				return;
    51a6:	e001      	b.n	51ac <usb_handle_control_in_complete+0x30>
		}
	} else
		usb_cb_control_in_completion();
    51a8:	4b04      	ldr	r3, [pc, #16]	; (51bc <usb_handle_control_in_complete+0x40>)
    51aa:	4798      	blx	r3
}
    51ac:	bd10      	pop	{r4, pc}
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	20000948 	.word	0x20000948
    51b4:	00004fc1 	.word	0x00004fc1
    51b8:	000046e5 	.word	0x000046e5
    51bc:	00004d29 	.word	0x00004d29

000051c0 <usb_string_to_descriptor>:

void* usb_string_to_descriptor(char* str) {
    51c0:	b570      	push	{r4, r5, r6, lr}
    51c2:	0005      	movs	r5, r0
	USB_StringDescriptor* desc = (((USB_StringDescriptor*)ep0_buf_in));
	uint16_t len = strlen(str);
    51c4:	4b0b      	ldr	r3, [pc, #44]	; (51f4 <usb_string_to_descriptor+0x34>)
    51c6:	4798      	blx	r3
    51c8:	b280      	uxth	r0, r0
	const uint16_t maxlen = (USB_EP0_SIZE * 8 - 2)/2;
	if (len > maxlen) len = maxlen;
    51ca:	28ff      	cmp	r0, #255	; 0xff
    51cc:	d900      	bls.n	51d0 <usb_string_to_descriptor+0x10>
    51ce:	20ff      	movs	r0, #255	; 0xff
	desc->bLength = USB_STRING_LEN(len);
    51d0:	4a09      	ldr	r2, [pc, #36]	; (51f8 <usb_string_to_descriptor+0x38>)
    51d2:	1c43      	adds	r3, r0, #1
    51d4:	005b      	lsls	r3, r3, #1
    51d6:	7013      	strb	r3, [r2, #0]
	desc->bDescriptorType = USB_DTYPE_String;
    51d8:	2303      	movs	r3, #3
    51da:	7053      	strb	r3, [r2, #1]
	for (int i=0; i<len; i++) {
    51dc:	2300      	movs	r3, #0
    51de:	e005      	b.n	51ec <usb_string_to_descriptor+0x2c>
		desc->bString[i] = str[i];
    51e0:	5ce9      	ldrb	r1, [r5, r3]
    51e2:	005c      	lsls	r4, r3, #1
    51e4:	4a04      	ldr	r2, [pc, #16]	; (51f8 <usb_string_to_descriptor+0x38>)
    51e6:	1912      	adds	r2, r2, r4
    51e8:	8051      	strh	r1, [r2, #2]
	for (int i=0; i<len; i++) {
    51ea:	3301      	adds	r3, #1
    51ec:	4283      	cmp	r3, r0
    51ee:	dbf7      	blt.n	51e0 <usb_string_to_descriptor+0x20>
	}
	return desc;
}
    51f0:	4801      	ldr	r0, [pc, #4]	; (51f8 <usb_string_to_descriptor+0x38>)
    51f2:	bd70      	pop	{r4, r5, r6, pc}
    51f4:	00005871 	.word	0x00005871
    51f8:	2000073c 	.word	0x2000073c

000051fc <WM8731_CMD>:
**************************************************************************************************/
void WM8731_CMD(char address, unsigned int cmd){
char addr;
  // B[15:9] Are Control Address Bits
  // B[8:0]  Are Control Data Bits
  addr = address << 1;                 // Shift left for one position
    51fc:	0040      	lsls	r0, r0, #1
    51fe:	b2c3      	uxtb	r3, r0
  uint8_t hicmd = (cmd >> 8);
    5200:	0a0a      	lsrs	r2, r1, #8
  uint8_t locmd = cmd & 0xff;
  addr = addr | (hicmd & 1);
    5202:	2001      	movs	r0, #1
    5204:	4010      	ands	r0, r2
    5206:	4318      	orrs	r0, r3
  WM8731_write_buffer[0] = addr ;
    5208:	4b1a      	ldr	r3, [pc, #104]	; (5274 <WM8731_CMD+0x78>)
    520a:	7018      	strb	r0, [r3, #0]
  WM8731_write_buffer[1] = locmd;
    520c:	7059      	strb	r1, [r3, #1]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    520e:	2234      	movs	r2, #52	; 0x34
    5210:	4b19      	ldr	r3, [pc, #100]	; (5278 <WM8731_CMD+0x7c>)
    5212:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    5214:	4b18      	ldr	r3, [pc, #96]	; (5278 <WM8731_CMD+0x7c>)
    5216:	7e1b      	ldrb	r3, [r3, #24]
    5218:	07db      	lsls	r3, r3, #31
    521a:	d5fb      	bpl.n	5214 <WM8731_CMD+0x18>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    521c:	4b16      	ldr	r3, [pc, #88]	; (5278 <WM8731_CMD+0x7c>)
    521e:	8b5b      	ldrh	r3, [r3, #26]
    5220:	075b      	lsls	r3, r3, #29
    5222:	d411      	bmi.n	5248 <WM8731_CMD+0x4c>
    5224:	2200      	movs	r2, #0
	for (int i = 0; i < size; i++)
    5226:	2a01      	cmp	r2, #1
    5228:	dc1c      	bgt.n	5264 <WM8731_CMD+0x68>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    522a:	4b12      	ldr	r3, [pc, #72]	; (5274 <WM8731_CMD+0x78>)
    522c:	5c98      	ldrb	r0, [r3, r2]
    522e:	2328      	movs	r3, #40	; 0x28
    5230:	4911      	ldr	r1, [pc, #68]	; (5278 <WM8731_CMD+0x7c>)
    5232:	54c8      	strb	r0, [r1, r3]
 		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    5234:	4b10      	ldr	r3, [pc, #64]	; (5278 <WM8731_CMD+0x7c>)
    5236:	7e1b      	ldrb	r3, [r3, #24]
    5238:	07db      	lsls	r3, r3, #31
    523a:	d5fb      	bpl.n	5234 <WM8731_CMD+0x38>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    523c:	4b0e      	ldr	r3, [pc, #56]	; (5278 <WM8731_CMD+0x7c>)
    523e:	8b5b      	ldrh	r3, [r3, #26]
    5240:	075b      	lsls	r3, r3, #29
    5242:	d408      	bmi.n	5256 <WM8731_CMD+0x5a>
	for (int i = 0; i < size; i++)
    5244:	3201      	adds	r2, #1
    5246:	e7ee      	b.n	5226 <WM8731_CMD+0x2a>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5248:	4a0b      	ldr	r2, [pc, #44]	; (5278 <WM8731_CMD+0x7c>)
    524a:	6851      	ldr	r1, [r2, #4]
    524c:	23c0      	movs	r3, #192	; 0xc0
    524e:	029b      	lsls	r3, r3, #10
    5250:	430b      	orrs	r3, r1
    5252:	6053      	str	r3, [r2, #4]
    5254:	e00c      	b.n	5270 <WM8731_CMD+0x74>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5256:	4a08      	ldr	r2, [pc, #32]	; (5278 <WM8731_CMD+0x7c>)
    5258:	6851      	ldr	r1, [r2, #4]
    525a:	23c0      	movs	r3, #192	; 0xc0
    525c:	029b      	lsls	r3, r3, #10
    525e:	430b      	orrs	r3, r1
    5260:	6053      	str	r3, [r2, #4]
    5262:	e005      	b.n	5270 <WM8731_CMD+0x74>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5264:	4a04      	ldr	r2, [pc, #16]	; (5278 <WM8731_CMD+0x7c>)
    5266:	6851      	ldr	r1, [r2, #4]
    5268:	23c0      	movs	r3, #192	; 0xc0
    526a:	029b      	lsls	r3, r3, #10
    526c:	430b      	orrs	r3, r1
    526e:	6053      	str	r3, [r2, #4]

  i2c_write(WM8731_write_buffer, 2, WM8731_SLAVE_ADDR);
}
    5270:	4770      	bx	lr
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	200002bc 	.word	0x200002bc
    5278:	42001000 	.word	0x42001000

0000527c <WM8731_Init>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Initializes WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Init(){
    527c:	b570      	push	{r4, r5, r6, lr}
    527e:	2200      	movs	r2, #0
    5280:	4b1f      	ldr	r3, [pc, #124]	; (5300 <WM8731_Init+0x84>)
    5282:	821a      	strh	r2, [r3, #16]
    5284:	e008      	b.n	5298 <WM8731_Init+0x1c>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    5286:	2110      	movs	r1, #16
    5288:	4b1d      	ldr	r3, [pc, #116]	; (5300 <WM8731_Init+0x84>)
    528a:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    528c:	4b1c      	ldr	r3, [pc, #112]	; (5300 <WM8731_Init+0x84>)
    528e:	7b9b      	ldrb	r3, [r3, #14]
    5290:	06db      	lsls	r3, r3, #27
    5292:	d5fb      	bpl.n	528c <WM8731_Init+0x10>
		cnt++;
    5294:	3201      	adds	r2, #1
    5296:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    5298:	2a64      	cmp	r2, #100	; 0x64
    529a:	d1f4      	bne.n	5286 <WM8731_Init+0xa>
	
  timerDelay(100);

  // Write to WM8731 registers appropriate values
  WM8731_CMD(WM8731_REG_RESET, _WM8731_Reset);               // Reset module
    529c:	2100      	movs	r1, #0
    529e:	200f      	movs	r0, #15
    52a0:	4c18      	ldr	r4, [pc, #96]	; (5304 <WM8731_Init+0x88>)
    52a2:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_LLINE_IN, _WM8731_left_lineIn);      // Left line in settings
    52a4:	2518      	movs	r5, #24
    52a6:	35ff      	adds	r5, #255	; 0xff
    52a8:	0029      	movs	r1, r5
    52aa:	2000      	movs	r0, #0
    52ac:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_RLINE_IN, _WM8731_Right_lineIn);     // Right line in settings
    52ae:	0029      	movs	r1, r5
    52b0:	2001      	movs	r0, #1
    52b2:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_LHPHONE_OUT, _WM8731_Left_hp);       // Left headphone out settings
    52b4:	35d9      	adds	r5, #217	; 0xd9
    52b6:	0029      	movs	r1, r5
    52b8:	2002      	movs	r0, #2
    52ba:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_RHPHONE_OUT, _WM8731_Right_hp);      // Right headphone out settings
    52bc:	0029      	movs	r1, r5
    52be:	2003      	movs	r0, #3
    52c0:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_ANALOG_PATH, _WM8731_AnalogAudio);   // Analog paths
    52c2:	2114      	movs	r1, #20
    52c4:	2004      	movs	r0, #4
    52c6:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_DIGITAL_PATH, _WM8731_DigitalAudio); // Digital paths
    52c8:	2106      	movs	r1, #6
    52ca:	2005      	movs	r0, #5
    52cc:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_PDOWN_CTRL, _WM8731_power);          // Power down control
    52ce:	2102      	movs	r1, #2
    52d0:	2006      	movs	r0, #6
    52d2:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_DIGITAL_IF, _WM8731_DAIF);           // Digital interface
    52d4:	2142      	movs	r1, #66	; 0x42
    52d6:	2007      	movs	r0, #7
    52d8:	47a0      	blx	r4
  WM8731_CMD(WM8731_REG_SAMPLING_CTRL, _WM8731_Sampling);    // Sampling control
    52da:	2100      	movs	r1, #0
    52dc:	2008      	movs	r0, #8
    52de:	47a0      	blx	r4
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    52e0:	2200      	movs	r2, #0
    52e2:	4b07      	ldr	r3, [pc, #28]	; (5300 <WM8731_Init+0x84>)
    52e4:	821a      	strh	r2, [r3, #16]
    52e6:	e008      	b.n	52fa <WM8731_Init+0x7e>
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    52e8:	2110      	movs	r1, #16
    52ea:	4b05      	ldr	r3, [pc, #20]	; (5300 <WM8731_Init+0x84>)
    52ec:	7399      	strb	r1, [r3, #14]
 		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    52ee:	4b04      	ldr	r3, [pc, #16]	; (5300 <WM8731_Init+0x84>)
    52f0:	7b9b      	ldrb	r3, [r3, #14]
    52f2:	06db      	lsls	r3, r3, #27
    52f4:	d5fb      	bpl.n	52ee <WM8731_Init+0x72>
		cnt++;
    52f6:	3201      	adds	r2, #1
    52f8:	b292      	uxth	r2, r2
	while(cnt!=ms) // Count the ms till target
    52fa:	2a0a      	cmp	r2, #10
    52fc:	d1f4      	bne.n	52e8 <WM8731_Init+0x6c>
  //WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Activate);		 // Activate module

	timerDelay(10);
}
    52fe:	bd70      	pop	{r4, r5, r6, pc}
    5300:	42003000 	.word	0x42003000
    5304:	000051fd 	.word	0x000051fd

00005308 <WM8731_Activate>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Activates WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Activate(){
    5308:	b510      	push	{r4, lr}
  WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Activate);
    530a:	2101      	movs	r1, #1
    530c:	2009      	movs	r0, #9
    530e:	4b01      	ldr	r3, [pc, #4]	; (5314 <WM8731_Activate+0xc>)
    5310:	4798      	blx	r3
}
    5312:	bd10      	pop	{r4, pc}
    5314:	000051fd 	.word	0x000051fd

00005318 <WM8731_Deactivate>:
* -------------------------------------------------------------------------------------------------
* Overview: Function Deactivates WM8731
* Input: Nothing
* Output: Nothing
**************************************************************************************************/
void WM8731_Deactivate(){
    5318:	b510      	push	{r4, lr}
  WM8731_CMD(WM8731_REG_ACTIVE_CTRL, _WM8731_Deactivate);
    531a:	2100      	movs	r1, #0
    531c:	2009      	movs	r0, #9
    531e:	4b01      	ldr	r3, [pc, #4]	; (5324 <WM8731_Deactivate+0xc>)
    5320:	4798      	blx	r3
}
    5322:	bd10      	pop	{r4, pc}
    5324:	000051fd 	.word	0x000051fd

00005328 <__udivsi3>:
    5328:	2200      	movs	r2, #0
    532a:	0843      	lsrs	r3, r0, #1
    532c:	428b      	cmp	r3, r1
    532e:	d374      	bcc.n	541a <__udivsi3+0xf2>
    5330:	0903      	lsrs	r3, r0, #4
    5332:	428b      	cmp	r3, r1
    5334:	d35f      	bcc.n	53f6 <__udivsi3+0xce>
    5336:	0a03      	lsrs	r3, r0, #8
    5338:	428b      	cmp	r3, r1
    533a:	d344      	bcc.n	53c6 <__udivsi3+0x9e>
    533c:	0b03      	lsrs	r3, r0, #12
    533e:	428b      	cmp	r3, r1
    5340:	d328      	bcc.n	5394 <__udivsi3+0x6c>
    5342:	0c03      	lsrs	r3, r0, #16
    5344:	428b      	cmp	r3, r1
    5346:	d30d      	bcc.n	5364 <__udivsi3+0x3c>
    5348:	22ff      	movs	r2, #255	; 0xff
    534a:	0209      	lsls	r1, r1, #8
    534c:	ba12      	rev	r2, r2
    534e:	0c03      	lsrs	r3, r0, #16
    5350:	428b      	cmp	r3, r1
    5352:	d302      	bcc.n	535a <__udivsi3+0x32>
    5354:	1212      	asrs	r2, r2, #8
    5356:	0209      	lsls	r1, r1, #8
    5358:	d065      	beq.n	5426 <__udivsi3+0xfe>
    535a:	0b03      	lsrs	r3, r0, #12
    535c:	428b      	cmp	r3, r1
    535e:	d319      	bcc.n	5394 <__udivsi3+0x6c>
    5360:	e000      	b.n	5364 <__udivsi3+0x3c>
    5362:	0a09      	lsrs	r1, r1, #8
    5364:	0bc3      	lsrs	r3, r0, #15
    5366:	428b      	cmp	r3, r1
    5368:	d301      	bcc.n	536e <__udivsi3+0x46>
    536a:	03cb      	lsls	r3, r1, #15
    536c:	1ac0      	subs	r0, r0, r3
    536e:	4152      	adcs	r2, r2
    5370:	0b83      	lsrs	r3, r0, #14
    5372:	428b      	cmp	r3, r1
    5374:	d301      	bcc.n	537a <__udivsi3+0x52>
    5376:	038b      	lsls	r3, r1, #14
    5378:	1ac0      	subs	r0, r0, r3
    537a:	4152      	adcs	r2, r2
    537c:	0b43      	lsrs	r3, r0, #13
    537e:	428b      	cmp	r3, r1
    5380:	d301      	bcc.n	5386 <__udivsi3+0x5e>
    5382:	034b      	lsls	r3, r1, #13
    5384:	1ac0      	subs	r0, r0, r3
    5386:	4152      	adcs	r2, r2
    5388:	0b03      	lsrs	r3, r0, #12
    538a:	428b      	cmp	r3, r1
    538c:	d301      	bcc.n	5392 <__udivsi3+0x6a>
    538e:	030b      	lsls	r3, r1, #12
    5390:	1ac0      	subs	r0, r0, r3
    5392:	4152      	adcs	r2, r2
    5394:	0ac3      	lsrs	r3, r0, #11
    5396:	428b      	cmp	r3, r1
    5398:	d301      	bcc.n	539e <__udivsi3+0x76>
    539a:	02cb      	lsls	r3, r1, #11
    539c:	1ac0      	subs	r0, r0, r3
    539e:	4152      	adcs	r2, r2
    53a0:	0a83      	lsrs	r3, r0, #10
    53a2:	428b      	cmp	r3, r1
    53a4:	d301      	bcc.n	53aa <__udivsi3+0x82>
    53a6:	028b      	lsls	r3, r1, #10
    53a8:	1ac0      	subs	r0, r0, r3
    53aa:	4152      	adcs	r2, r2
    53ac:	0a43      	lsrs	r3, r0, #9
    53ae:	428b      	cmp	r3, r1
    53b0:	d301      	bcc.n	53b6 <__udivsi3+0x8e>
    53b2:	024b      	lsls	r3, r1, #9
    53b4:	1ac0      	subs	r0, r0, r3
    53b6:	4152      	adcs	r2, r2
    53b8:	0a03      	lsrs	r3, r0, #8
    53ba:	428b      	cmp	r3, r1
    53bc:	d301      	bcc.n	53c2 <__udivsi3+0x9a>
    53be:	020b      	lsls	r3, r1, #8
    53c0:	1ac0      	subs	r0, r0, r3
    53c2:	4152      	adcs	r2, r2
    53c4:	d2cd      	bcs.n	5362 <__udivsi3+0x3a>
    53c6:	09c3      	lsrs	r3, r0, #7
    53c8:	428b      	cmp	r3, r1
    53ca:	d301      	bcc.n	53d0 <__udivsi3+0xa8>
    53cc:	01cb      	lsls	r3, r1, #7
    53ce:	1ac0      	subs	r0, r0, r3
    53d0:	4152      	adcs	r2, r2
    53d2:	0983      	lsrs	r3, r0, #6
    53d4:	428b      	cmp	r3, r1
    53d6:	d301      	bcc.n	53dc <__udivsi3+0xb4>
    53d8:	018b      	lsls	r3, r1, #6
    53da:	1ac0      	subs	r0, r0, r3
    53dc:	4152      	adcs	r2, r2
    53de:	0943      	lsrs	r3, r0, #5
    53e0:	428b      	cmp	r3, r1
    53e2:	d301      	bcc.n	53e8 <__udivsi3+0xc0>
    53e4:	014b      	lsls	r3, r1, #5
    53e6:	1ac0      	subs	r0, r0, r3
    53e8:	4152      	adcs	r2, r2
    53ea:	0903      	lsrs	r3, r0, #4
    53ec:	428b      	cmp	r3, r1
    53ee:	d301      	bcc.n	53f4 <__udivsi3+0xcc>
    53f0:	010b      	lsls	r3, r1, #4
    53f2:	1ac0      	subs	r0, r0, r3
    53f4:	4152      	adcs	r2, r2
    53f6:	08c3      	lsrs	r3, r0, #3
    53f8:	428b      	cmp	r3, r1
    53fa:	d301      	bcc.n	5400 <__udivsi3+0xd8>
    53fc:	00cb      	lsls	r3, r1, #3
    53fe:	1ac0      	subs	r0, r0, r3
    5400:	4152      	adcs	r2, r2
    5402:	0883      	lsrs	r3, r0, #2
    5404:	428b      	cmp	r3, r1
    5406:	d301      	bcc.n	540c <__udivsi3+0xe4>
    5408:	008b      	lsls	r3, r1, #2
    540a:	1ac0      	subs	r0, r0, r3
    540c:	4152      	adcs	r2, r2
    540e:	0843      	lsrs	r3, r0, #1
    5410:	428b      	cmp	r3, r1
    5412:	d301      	bcc.n	5418 <__udivsi3+0xf0>
    5414:	004b      	lsls	r3, r1, #1
    5416:	1ac0      	subs	r0, r0, r3
    5418:	4152      	adcs	r2, r2
    541a:	1a41      	subs	r1, r0, r1
    541c:	d200      	bcs.n	5420 <__udivsi3+0xf8>
    541e:	4601      	mov	r1, r0
    5420:	4152      	adcs	r2, r2
    5422:	4610      	mov	r0, r2
    5424:	4770      	bx	lr
    5426:	e7ff      	b.n	5428 <__udivsi3+0x100>
    5428:	b501      	push	{r0, lr}
    542a:	2000      	movs	r0, #0
    542c:	f000 f8f0 	bl	5610 <__aeabi_idiv0>
    5430:	bd02      	pop	{r1, pc}
    5432:	46c0      	nop			; (mov r8, r8)

00005434 <__aeabi_uidivmod>:
    5434:	2900      	cmp	r1, #0
    5436:	d0f7      	beq.n	5428 <__udivsi3+0x100>
    5438:	e776      	b.n	5328 <__udivsi3>
    543a:	4770      	bx	lr

0000543c <__divsi3>:
    543c:	4603      	mov	r3, r0
    543e:	430b      	orrs	r3, r1
    5440:	d47f      	bmi.n	5542 <__divsi3+0x106>
    5442:	2200      	movs	r2, #0
    5444:	0843      	lsrs	r3, r0, #1
    5446:	428b      	cmp	r3, r1
    5448:	d374      	bcc.n	5534 <__divsi3+0xf8>
    544a:	0903      	lsrs	r3, r0, #4
    544c:	428b      	cmp	r3, r1
    544e:	d35f      	bcc.n	5510 <__divsi3+0xd4>
    5450:	0a03      	lsrs	r3, r0, #8
    5452:	428b      	cmp	r3, r1
    5454:	d344      	bcc.n	54e0 <__divsi3+0xa4>
    5456:	0b03      	lsrs	r3, r0, #12
    5458:	428b      	cmp	r3, r1
    545a:	d328      	bcc.n	54ae <__divsi3+0x72>
    545c:	0c03      	lsrs	r3, r0, #16
    545e:	428b      	cmp	r3, r1
    5460:	d30d      	bcc.n	547e <__divsi3+0x42>
    5462:	22ff      	movs	r2, #255	; 0xff
    5464:	0209      	lsls	r1, r1, #8
    5466:	ba12      	rev	r2, r2
    5468:	0c03      	lsrs	r3, r0, #16
    546a:	428b      	cmp	r3, r1
    546c:	d302      	bcc.n	5474 <__divsi3+0x38>
    546e:	1212      	asrs	r2, r2, #8
    5470:	0209      	lsls	r1, r1, #8
    5472:	d065      	beq.n	5540 <__divsi3+0x104>
    5474:	0b03      	lsrs	r3, r0, #12
    5476:	428b      	cmp	r3, r1
    5478:	d319      	bcc.n	54ae <__divsi3+0x72>
    547a:	e000      	b.n	547e <__divsi3+0x42>
    547c:	0a09      	lsrs	r1, r1, #8
    547e:	0bc3      	lsrs	r3, r0, #15
    5480:	428b      	cmp	r3, r1
    5482:	d301      	bcc.n	5488 <__divsi3+0x4c>
    5484:	03cb      	lsls	r3, r1, #15
    5486:	1ac0      	subs	r0, r0, r3
    5488:	4152      	adcs	r2, r2
    548a:	0b83      	lsrs	r3, r0, #14
    548c:	428b      	cmp	r3, r1
    548e:	d301      	bcc.n	5494 <__divsi3+0x58>
    5490:	038b      	lsls	r3, r1, #14
    5492:	1ac0      	subs	r0, r0, r3
    5494:	4152      	adcs	r2, r2
    5496:	0b43      	lsrs	r3, r0, #13
    5498:	428b      	cmp	r3, r1
    549a:	d301      	bcc.n	54a0 <__divsi3+0x64>
    549c:	034b      	lsls	r3, r1, #13
    549e:	1ac0      	subs	r0, r0, r3
    54a0:	4152      	adcs	r2, r2
    54a2:	0b03      	lsrs	r3, r0, #12
    54a4:	428b      	cmp	r3, r1
    54a6:	d301      	bcc.n	54ac <__divsi3+0x70>
    54a8:	030b      	lsls	r3, r1, #12
    54aa:	1ac0      	subs	r0, r0, r3
    54ac:	4152      	adcs	r2, r2
    54ae:	0ac3      	lsrs	r3, r0, #11
    54b0:	428b      	cmp	r3, r1
    54b2:	d301      	bcc.n	54b8 <__divsi3+0x7c>
    54b4:	02cb      	lsls	r3, r1, #11
    54b6:	1ac0      	subs	r0, r0, r3
    54b8:	4152      	adcs	r2, r2
    54ba:	0a83      	lsrs	r3, r0, #10
    54bc:	428b      	cmp	r3, r1
    54be:	d301      	bcc.n	54c4 <__divsi3+0x88>
    54c0:	028b      	lsls	r3, r1, #10
    54c2:	1ac0      	subs	r0, r0, r3
    54c4:	4152      	adcs	r2, r2
    54c6:	0a43      	lsrs	r3, r0, #9
    54c8:	428b      	cmp	r3, r1
    54ca:	d301      	bcc.n	54d0 <__divsi3+0x94>
    54cc:	024b      	lsls	r3, r1, #9
    54ce:	1ac0      	subs	r0, r0, r3
    54d0:	4152      	adcs	r2, r2
    54d2:	0a03      	lsrs	r3, r0, #8
    54d4:	428b      	cmp	r3, r1
    54d6:	d301      	bcc.n	54dc <__divsi3+0xa0>
    54d8:	020b      	lsls	r3, r1, #8
    54da:	1ac0      	subs	r0, r0, r3
    54dc:	4152      	adcs	r2, r2
    54de:	d2cd      	bcs.n	547c <__divsi3+0x40>
    54e0:	09c3      	lsrs	r3, r0, #7
    54e2:	428b      	cmp	r3, r1
    54e4:	d301      	bcc.n	54ea <__divsi3+0xae>
    54e6:	01cb      	lsls	r3, r1, #7
    54e8:	1ac0      	subs	r0, r0, r3
    54ea:	4152      	adcs	r2, r2
    54ec:	0983      	lsrs	r3, r0, #6
    54ee:	428b      	cmp	r3, r1
    54f0:	d301      	bcc.n	54f6 <__divsi3+0xba>
    54f2:	018b      	lsls	r3, r1, #6
    54f4:	1ac0      	subs	r0, r0, r3
    54f6:	4152      	adcs	r2, r2
    54f8:	0943      	lsrs	r3, r0, #5
    54fa:	428b      	cmp	r3, r1
    54fc:	d301      	bcc.n	5502 <__divsi3+0xc6>
    54fe:	014b      	lsls	r3, r1, #5
    5500:	1ac0      	subs	r0, r0, r3
    5502:	4152      	adcs	r2, r2
    5504:	0903      	lsrs	r3, r0, #4
    5506:	428b      	cmp	r3, r1
    5508:	d301      	bcc.n	550e <__divsi3+0xd2>
    550a:	010b      	lsls	r3, r1, #4
    550c:	1ac0      	subs	r0, r0, r3
    550e:	4152      	adcs	r2, r2
    5510:	08c3      	lsrs	r3, r0, #3
    5512:	428b      	cmp	r3, r1
    5514:	d301      	bcc.n	551a <__divsi3+0xde>
    5516:	00cb      	lsls	r3, r1, #3
    5518:	1ac0      	subs	r0, r0, r3
    551a:	4152      	adcs	r2, r2
    551c:	0883      	lsrs	r3, r0, #2
    551e:	428b      	cmp	r3, r1
    5520:	d301      	bcc.n	5526 <__divsi3+0xea>
    5522:	008b      	lsls	r3, r1, #2
    5524:	1ac0      	subs	r0, r0, r3
    5526:	4152      	adcs	r2, r2
    5528:	0843      	lsrs	r3, r0, #1
    552a:	428b      	cmp	r3, r1
    552c:	d301      	bcc.n	5532 <__divsi3+0xf6>
    552e:	004b      	lsls	r3, r1, #1
    5530:	1ac0      	subs	r0, r0, r3
    5532:	4152      	adcs	r2, r2
    5534:	1a41      	subs	r1, r0, r1
    5536:	d200      	bcs.n	553a <__divsi3+0xfe>
    5538:	4601      	mov	r1, r0
    553a:	4152      	adcs	r2, r2
    553c:	4610      	mov	r0, r2
    553e:	4770      	bx	lr
    5540:	e05d      	b.n	55fe <__divsi3+0x1c2>
    5542:	0fca      	lsrs	r2, r1, #31
    5544:	d000      	beq.n	5548 <__divsi3+0x10c>
    5546:	4249      	negs	r1, r1
    5548:	1003      	asrs	r3, r0, #32
    554a:	d300      	bcc.n	554e <__divsi3+0x112>
    554c:	4240      	negs	r0, r0
    554e:	4053      	eors	r3, r2
    5550:	2200      	movs	r2, #0
    5552:	469c      	mov	ip, r3
    5554:	0903      	lsrs	r3, r0, #4
    5556:	428b      	cmp	r3, r1
    5558:	d32d      	bcc.n	55b6 <__divsi3+0x17a>
    555a:	0a03      	lsrs	r3, r0, #8
    555c:	428b      	cmp	r3, r1
    555e:	d312      	bcc.n	5586 <__divsi3+0x14a>
    5560:	22fc      	movs	r2, #252	; 0xfc
    5562:	0189      	lsls	r1, r1, #6
    5564:	ba12      	rev	r2, r2
    5566:	0a03      	lsrs	r3, r0, #8
    5568:	428b      	cmp	r3, r1
    556a:	d30c      	bcc.n	5586 <__divsi3+0x14a>
    556c:	0189      	lsls	r1, r1, #6
    556e:	1192      	asrs	r2, r2, #6
    5570:	428b      	cmp	r3, r1
    5572:	d308      	bcc.n	5586 <__divsi3+0x14a>
    5574:	0189      	lsls	r1, r1, #6
    5576:	1192      	asrs	r2, r2, #6
    5578:	428b      	cmp	r3, r1
    557a:	d304      	bcc.n	5586 <__divsi3+0x14a>
    557c:	0189      	lsls	r1, r1, #6
    557e:	d03a      	beq.n	55f6 <__divsi3+0x1ba>
    5580:	1192      	asrs	r2, r2, #6
    5582:	e000      	b.n	5586 <__divsi3+0x14a>
    5584:	0989      	lsrs	r1, r1, #6
    5586:	09c3      	lsrs	r3, r0, #7
    5588:	428b      	cmp	r3, r1
    558a:	d301      	bcc.n	5590 <__divsi3+0x154>
    558c:	01cb      	lsls	r3, r1, #7
    558e:	1ac0      	subs	r0, r0, r3
    5590:	4152      	adcs	r2, r2
    5592:	0983      	lsrs	r3, r0, #6
    5594:	428b      	cmp	r3, r1
    5596:	d301      	bcc.n	559c <__divsi3+0x160>
    5598:	018b      	lsls	r3, r1, #6
    559a:	1ac0      	subs	r0, r0, r3
    559c:	4152      	adcs	r2, r2
    559e:	0943      	lsrs	r3, r0, #5
    55a0:	428b      	cmp	r3, r1
    55a2:	d301      	bcc.n	55a8 <__divsi3+0x16c>
    55a4:	014b      	lsls	r3, r1, #5
    55a6:	1ac0      	subs	r0, r0, r3
    55a8:	4152      	adcs	r2, r2
    55aa:	0903      	lsrs	r3, r0, #4
    55ac:	428b      	cmp	r3, r1
    55ae:	d301      	bcc.n	55b4 <__divsi3+0x178>
    55b0:	010b      	lsls	r3, r1, #4
    55b2:	1ac0      	subs	r0, r0, r3
    55b4:	4152      	adcs	r2, r2
    55b6:	08c3      	lsrs	r3, r0, #3
    55b8:	428b      	cmp	r3, r1
    55ba:	d301      	bcc.n	55c0 <__divsi3+0x184>
    55bc:	00cb      	lsls	r3, r1, #3
    55be:	1ac0      	subs	r0, r0, r3
    55c0:	4152      	adcs	r2, r2
    55c2:	0883      	lsrs	r3, r0, #2
    55c4:	428b      	cmp	r3, r1
    55c6:	d301      	bcc.n	55cc <__divsi3+0x190>
    55c8:	008b      	lsls	r3, r1, #2
    55ca:	1ac0      	subs	r0, r0, r3
    55cc:	4152      	adcs	r2, r2
    55ce:	d2d9      	bcs.n	5584 <__divsi3+0x148>
    55d0:	0843      	lsrs	r3, r0, #1
    55d2:	428b      	cmp	r3, r1
    55d4:	d301      	bcc.n	55da <__divsi3+0x19e>
    55d6:	004b      	lsls	r3, r1, #1
    55d8:	1ac0      	subs	r0, r0, r3
    55da:	4152      	adcs	r2, r2
    55dc:	1a41      	subs	r1, r0, r1
    55de:	d200      	bcs.n	55e2 <__divsi3+0x1a6>
    55e0:	4601      	mov	r1, r0
    55e2:	4663      	mov	r3, ip
    55e4:	4152      	adcs	r2, r2
    55e6:	105b      	asrs	r3, r3, #1
    55e8:	4610      	mov	r0, r2
    55ea:	d301      	bcc.n	55f0 <__divsi3+0x1b4>
    55ec:	4240      	negs	r0, r0
    55ee:	2b00      	cmp	r3, #0
    55f0:	d500      	bpl.n	55f4 <__divsi3+0x1b8>
    55f2:	4249      	negs	r1, r1
    55f4:	4770      	bx	lr
    55f6:	4663      	mov	r3, ip
    55f8:	105b      	asrs	r3, r3, #1
    55fa:	d300      	bcc.n	55fe <__divsi3+0x1c2>
    55fc:	4240      	negs	r0, r0
    55fe:	b501      	push	{r0, lr}
    5600:	2000      	movs	r0, #0
    5602:	f000 f805 	bl	5610 <__aeabi_idiv0>
    5606:	bd02      	pop	{r1, pc}

00005608 <__aeabi_idivmod>:
    5608:	2900      	cmp	r1, #0
    560a:	d0f8      	beq.n	55fe <__divsi3+0x1c2>
    560c:	e716      	b.n	543c <__divsi3>
    560e:	4770      	bx	lr

00005610 <__aeabi_idiv0>:
    5610:	4770      	bx	lr
    5612:	46c0      	nop			; (mov r8, r8)

00005614 <__libc_init_array>:
    5614:	b570      	push	{r4, r5, r6, lr}
    5616:	2600      	movs	r6, #0
    5618:	4d0c      	ldr	r5, [pc, #48]	; (564c <__libc_init_array+0x38>)
    561a:	4c0d      	ldr	r4, [pc, #52]	; (5650 <__libc_init_array+0x3c>)
    561c:	1b64      	subs	r4, r4, r5
    561e:	10a4      	asrs	r4, r4, #2
    5620:	42a6      	cmp	r6, r4
    5622:	d109      	bne.n	5638 <__libc_init_array+0x24>
    5624:	2600      	movs	r6, #0
    5626:	f002 f8f5 	bl	7814 <_init>
    562a:	4d0a      	ldr	r5, [pc, #40]	; (5654 <__libc_init_array+0x40>)
    562c:	4c0a      	ldr	r4, [pc, #40]	; (5658 <__libc_init_array+0x44>)
    562e:	1b64      	subs	r4, r4, r5
    5630:	10a4      	asrs	r4, r4, #2
    5632:	42a6      	cmp	r6, r4
    5634:	d105      	bne.n	5642 <__libc_init_array+0x2e>
    5636:	bd70      	pop	{r4, r5, r6, pc}
    5638:	00b3      	lsls	r3, r6, #2
    563a:	58eb      	ldr	r3, [r5, r3]
    563c:	4798      	blx	r3
    563e:	3601      	adds	r6, #1
    5640:	e7ee      	b.n	5620 <__libc_init_array+0xc>
    5642:	00b3      	lsls	r3, r6, #2
    5644:	58eb      	ldr	r3, [r5, r3]
    5646:	4798      	blx	r3
    5648:	3601      	adds	r6, #1
    564a:	e7f2      	b.n	5632 <__libc_init_array+0x1e>
    564c:	00007820 	.word	0x00007820
    5650:	00007820 	.word	0x00007820
    5654:	00007820 	.word	0x00007820
    5658:	00007824 	.word	0x00007824

0000565c <malloc>:
    565c:	b510      	push	{r4, lr}
    565e:	4b03      	ldr	r3, [pc, #12]	; (566c <malloc+0x10>)
    5660:	0001      	movs	r1, r0
    5662:	6818      	ldr	r0, [r3, #0]
    5664:	f000 f86a 	bl	573c <_malloc_r>
    5668:	bd10      	pop	{r4, pc}
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	20000044 	.word	0x20000044

00005670 <free>:
    5670:	b510      	push	{r4, lr}
    5672:	4b03      	ldr	r3, [pc, #12]	; (5680 <free+0x10>)
    5674:	0001      	movs	r1, r0
    5676:	6818      	ldr	r0, [r3, #0]
    5678:	f000 f816 	bl	56a8 <_free_r>
    567c:	bd10      	pop	{r4, pc}
    567e:	46c0      	nop			; (mov r8, r8)
    5680:	20000044 	.word	0x20000044

00005684 <memcpy>:
    5684:	2300      	movs	r3, #0
    5686:	b510      	push	{r4, lr}
    5688:	429a      	cmp	r2, r3
    568a:	d100      	bne.n	568e <memcpy+0xa>
    568c:	bd10      	pop	{r4, pc}
    568e:	5ccc      	ldrb	r4, [r1, r3]
    5690:	54c4      	strb	r4, [r0, r3]
    5692:	3301      	adds	r3, #1
    5694:	e7f8      	b.n	5688 <memcpy+0x4>

00005696 <memset>:
    5696:	0003      	movs	r3, r0
    5698:	1882      	adds	r2, r0, r2
    569a:	4293      	cmp	r3, r2
    569c:	d100      	bne.n	56a0 <memset+0xa>
    569e:	4770      	bx	lr
    56a0:	7019      	strb	r1, [r3, #0]
    56a2:	3301      	adds	r3, #1
    56a4:	e7f9      	b.n	569a <memset+0x4>
	...

000056a8 <_free_r>:
    56a8:	b570      	push	{r4, r5, r6, lr}
    56aa:	0005      	movs	r5, r0
    56ac:	2900      	cmp	r1, #0
    56ae:	d010      	beq.n	56d2 <_free_r+0x2a>
    56b0:	1f0c      	subs	r4, r1, #4
    56b2:	6823      	ldr	r3, [r4, #0]
    56b4:	2b00      	cmp	r3, #0
    56b6:	da00      	bge.n	56ba <_free_r+0x12>
    56b8:	18e4      	adds	r4, r4, r3
    56ba:	0028      	movs	r0, r5
    56bc:	f000 f904 	bl	58c8 <__malloc_lock>
    56c0:	4a1d      	ldr	r2, [pc, #116]	; (5738 <_free_r+0x90>)
    56c2:	6813      	ldr	r3, [r2, #0]
    56c4:	2b00      	cmp	r3, #0
    56c6:	d105      	bne.n	56d4 <_free_r+0x2c>
    56c8:	6063      	str	r3, [r4, #4]
    56ca:	6014      	str	r4, [r2, #0]
    56cc:	0028      	movs	r0, r5
    56ce:	f000 f8fc 	bl	58ca <__malloc_unlock>
    56d2:	bd70      	pop	{r4, r5, r6, pc}
    56d4:	42a3      	cmp	r3, r4
    56d6:	d909      	bls.n	56ec <_free_r+0x44>
    56d8:	6821      	ldr	r1, [r4, #0]
    56da:	1860      	adds	r0, r4, r1
    56dc:	4283      	cmp	r3, r0
    56de:	d1f3      	bne.n	56c8 <_free_r+0x20>
    56e0:	6818      	ldr	r0, [r3, #0]
    56e2:	685b      	ldr	r3, [r3, #4]
    56e4:	1841      	adds	r1, r0, r1
    56e6:	6021      	str	r1, [r4, #0]
    56e8:	e7ee      	b.n	56c8 <_free_r+0x20>
    56ea:	0013      	movs	r3, r2
    56ec:	685a      	ldr	r2, [r3, #4]
    56ee:	2a00      	cmp	r2, #0
    56f0:	d001      	beq.n	56f6 <_free_r+0x4e>
    56f2:	42a2      	cmp	r2, r4
    56f4:	d9f9      	bls.n	56ea <_free_r+0x42>
    56f6:	6819      	ldr	r1, [r3, #0]
    56f8:	1858      	adds	r0, r3, r1
    56fa:	42a0      	cmp	r0, r4
    56fc:	d10b      	bne.n	5716 <_free_r+0x6e>
    56fe:	6820      	ldr	r0, [r4, #0]
    5700:	1809      	adds	r1, r1, r0
    5702:	1858      	adds	r0, r3, r1
    5704:	6019      	str	r1, [r3, #0]
    5706:	4282      	cmp	r2, r0
    5708:	d1e0      	bne.n	56cc <_free_r+0x24>
    570a:	6810      	ldr	r0, [r2, #0]
    570c:	6852      	ldr	r2, [r2, #4]
    570e:	1841      	adds	r1, r0, r1
    5710:	6019      	str	r1, [r3, #0]
    5712:	605a      	str	r2, [r3, #4]
    5714:	e7da      	b.n	56cc <_free_r+0x24>
    5716:	42a0      	cmp	r0, r4
    5718:	d902      	bls.n	5720 <_free_r+0x78>
    571a:	230c      	movs	r3, #12
    571c:	602b      	str	r3, [r5, #0]
    571e:	e7d5      	b.n	56cc <_free_r+0x24>
    5720:	6821      	ldr	r1, [r4, #0]
    5722:	1860      	adds	r0, r4, r1
    5724:	4282      	cmp	r2, r0
    5726:	d103      	bne.n	5730 <_free_r+0x88>
    5728:	6810      	ldr	r0, [r2, #0]
    572a:	6852      	ldr	r2, [r2, #4]
    572c:	1841      	adds	r1, r0, r1
    572e:	6021      	str	r1, [r4, #0]
    5730:	6062      	str	r2, [r4, #4]
    5732:	605c      	str	r4, [r3, #4]
    5734:	e7ca      	b.n	56cc <_free_r+0x24>
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	200002c4 	.word	0x200002c4

0000573c <_malloc_r>:
    573c:	2303      	movs	r3, #3
    573e:	b570      	push	{r4, r5, r6, lr}
    5740:	1ccd      	adds	r5, r1, #3
    5742:	439d      	bics	r5, r3
    5744:	3508      	adds	r5, #8
    5746:	0006      	movs	r6, r0
    5748:	2d0c      	cmp	r5, #12
    574a:	d21e      	bcs.n	578a <_malloc_r+0x4e>
    574c:	250c      	movs	r5, #12
    574e:	42a9      	cmp	r1, r5
    5750:	d81d      	bhi.n	578e <_malloc_r+0x52>
    5752:	0030      	movs	r0, r6
    5754:	f000 f8b8 	bl	58c8 <__malloc_lock>
    5758:	4a25      	ldr	r2, [pc, #148]	; (57f0 <_malloc_r+0xb4>)
    575a:	6814      	ldr	r4, [r2, #0]
    575c:	0021      	movs	r1, r4
    575e:	2900      	cmp	r1, #0
    5760:	d119      	bne.n	5796 <_malloc_r+0x5a>
    5762:	4c24      	ldr	r4, [pc, #144]	; (57f4 <_malloc_r+0xb8>)
    5764:	6823      	ldr	r3, [r4, #0]
    5766:	2b00      	cmp	r3, #0
    5768:	d103      	bne.n	5772 <_malloc_r+0x36>
    576a:	0030      	movs	r0, r6
    576c:	f000 f844 	bl	57f8 <_sbrk_r>
    5770:	6020      	str	r0, [r4, #0]
    5772:	0029      	movs	r1, r5
    5774:	0030      	movs	r0, r6
    5776:	f000 f83f 	bl	57f8 <_sbrk_r>
    577a:	1c43      	adds	r3, r0, #1
    577c:	d12c      	bne.n	57d8 <_malloc_r+0x9c>
    577e:	230c      	movs	r3, #12
    5780:	0030      	movs	r0, r6
    5782:	6033      	str	r3, [r6, #0]
    5784:	f000 f8a1 	bl	58ca <__malloc_unlock>
    5788:	e003      	b.n	5792 <_malloc_r+0x56>
    578a:	2d00      	cmp	r5, #0
    578c:	dadf      	bge.n	574e <_malloc_r+0x12>
    578e:	230c      	movs	r3, #12
    5790:	6033      	str	r3, [r6, #0]
    5792:	2000      	movs	r0, #0
    5794:	bd70      	pop	{r4, r5, r6, pc}
    5796:	680b      	ldr	r3, [r1, #0]
    5798:	1b5b      	subs	r3, r3, r5
    579a:	d41a      	bmi.n	57d2 <_malloc_r+0x96>
    579c:	2b0b      	cmp	r3, #11
    579e:	d903      	bls.n	57a8 <_malloc_r+0x6c>
    57a0:	600b      	str	r3, [r1, #0]
    57a2:	18cc      	adds	r4, r1, r3
    57a4:	6025      	str	r5, [r4, #0]
    57a6:	e003      	b.n	57b0 <_malloc_r+0x74>
    57a8:	428c      	cmp	r4, r1
    57aa:	d10e      	bne.n	57ca <_malloc_r+0x8e>
    57ac:	6863      	ldr	r3, [r4, #4]
    57ae:	6013      	str	r3, [r2, #0]
    57b0:	0030      	movs	r0, r6
    57b2:	f000 f88a 	bl	58ca <__malloc_unlock>
    57b6:	0020      	movs	r0, r4
    57b8:	2207      	movs	r2, #7
    57ba:	300b      	adds	r0, #11
    57bc:	1d23      	adds	r3, r4, #4
    57be:	4390      	bics	r0, r2
    57c0:	1ac3      	subs	r3, r0, r3
    57c2:	d0e7      	beq.n	5794 <_malloc_r+0x58>
    57c4:	425a      	negs	r2, r3
    57c6:	50e2      	str	r2, [r4, r3]
    57c8:	e7e4      	b.n	5794 <_malloc_r+0x58>
    57ca:	684b      	ldr	r3, [r1, #4]
    57cc:	6063      	str	r3, [r4, #4]
    57ce:	000c      	movs	r4, r1
    57d0:	e7ee      	b.n	57b0 <_malloc_r+0x74>
    57d2:	000c      	movs	r4, r1
    57d4:	6849      	ldr	r1, [r1, #4]
    57d6:	e7c2      	b.n	575e <_malloc_r+0x22>
    57d8:	2303      	movs	r3, #3
    57da:	1cc4      	adds	r4, r0, #3
    57dc:	439c      	bics	r4, r3
    57de:	42a0      	cmp	r0, r4
    57e0:	d0e0      	beq.n	57a4 <_malloc_r+0x68>
    57e2:	1a21      	subs	r1, r4, r0
    57e4:	0030      	movs	r0, r6
    57e6:	f000 f807 	bl	57f8 <_sbrk_r>
    57ea:	1c43      	adds	r3, r0, #1
    57ec:	d1da      	bne.n	57a4 <_malloc_r+0x68>
    57ee:	e7c6      	b.n	577e <_malloc_r+0x42>
    57f0:	200002c4 	.word	0x200002c4
    57f4:	200002c8 	.word	0x200002c8

000057f8 <_sbrk_r>:
    57f8:	2300      	movs	r3, #0
    57fa:	b570      	push	{r4, r5, r6, lr}
    57fc:	4c06      	ldr	r4, [pc, #24]	; (5818 <_sbrk_r+0x20>)
    57fe:	0005      	movs	r5, r0
    5800:	0008      	movs	r0, r1
    5802:	6023      	str	r3, [r4, #0]
    5804:	f7fd f9cc 	bl	2ba0 <_sbrk>
    5808:	1c43      	adds	r3, r0, #1
    580a:	d103      	bne.n	5814 <_sbrk_r+0x1c>
    580c:	6823      	ldr	r3, [r4, #0]
    580e:	2b00      	cmp	r3, #0
    5810:	d000      	beq.n	5814 <_sbrk_r+0x1c>
    5812:	602b      	str	r3, [r5, #0]
    5814:	bd70      	pop	{r4, r5, r6, pc}
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	20000f20 	.word	0x20000f20

0000581c <siscanf>:
    581c:	b40e      	push	{r1, r2, r3}
    581e:	2381      	movs	r3, #129	; 0x81
    5820:	b570      	push	{r4, r5, r6, lr}
    5822:	b09d      	sub	sp, #116	; 0x74
    5824:	ac02      	add	r4, sp, #8
    5826:	ad21      	add	r5, sp, #132	; 0x84
    5828:	009b      	lsls	r3, r3, #2
    582a:	cd40      	ldmia	r5!, {r6}
    582c:	81a3      	strh	r3, [r4, #12]
    582e:	9002      	str	r0, [sp, #8]
    5830:	9006      	str	r0, [sp, #24]
    5832:	f000 f81d 	bl	5870 <strlen>
    5836:	4b0b      	ldr	r3, [pc, #44]	; (5864 <siscanf+0x48>)
    5838:	6060      	str	r0, [r4, #4]
    583a:	6263      	str	r3, [r4, #36]	; 0x24
    583c:	2300      	movs	r3, #0
    583e:	6160      	str	r0, [r4, #20]
    5840:	4809      	ldr	r0, [pc, #36]	; (5868 <siscanf+0x4c>)
    5842:	6363      	str	r3, [r4, #52]	; 0x34
    5844:	64a3      	str	r3, [r4, #72]	; 0x48
    5846:	3b01      	subs	r3, #1
    5848:	81e3      	strh	r3, [r4, #14]
    584a:	0032      	movs	r2, r6
    584c:	002b      	movs	r3, r5
    584e:	0021      	movs	r1, r4
    5850:	6800      	ldr	r0, [r0, #0]
    5852:	9501      	str	r5, [sp, #4]
    5854:	f000 f9fc 	bl	5c50 <__ssvfiscanf_r>
    5858:	b01d      	add	sp, #116	; 0x74
    585a:	bc70      	pop	{r4, r5, r6}
    585c:	bc08      	pop	{r3}
    585e:	b003      	add	sp, #12
    5860:	4718      	bx	r3
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	0000586d 	.word	0x0000586d
    5868:	20000044 	.word	0x20000044

0000586c <__seofread>:
    586c:	2000      	movs	r0, #0
    586e:	4770      	bx	lr

00005870 <strlen>:
    5870:	2300      	movs	r3, #0
    5872:	5cc2      	ldrb	r2, [r0, r3]
    5874:	3301      	adds	r3, #1
    5876:	2a00      	cmp	r2, #0
    5878:	d1fb      	bne.n	5872 <strlen+0x2>
    587a:	1e58      	subs	r0, r3, #1
    587c:	4770      	bx	lr
	...

00005880 <_vsiprintf_r>:
    5880:	b530      	push	{r4, r5, lr}
    5882:	b09b      	sub	sp, #108	; 0x6c
    5884:	9100      	str	r1, [sp, #0]
    5886:	9104      	str	r1, [sp, #16]
    5888:	4908      	ldr	r1, [pc, #32]	; (58ac <_vsiprintf_r+0x2c>)
    588a:	466d      	mov	r5, sp
    588c:	9102      	str	r1, [sp, #8]
    588e:	9105      	str	r1, [sp, #20]
    5890:	2101      	movs	r1, #1
    5892:	2482      	movs	r4, #130	; 0x82
    5894:	4249      	negs	r1, r1
    5896:	81e9      	strh	r1, [r5, #14]
    5898:	00a4      	lsls	r4, r4, #2
    589a:	4669      	mov	r1, sp
    589c:	81ac      	strh	r4, [r5, #12]
    589e:	f000 f877 	bl	5990 <_svfiprintf_r>
    58a2:	2300      	movs	r3, #0
    58a4:	9a00      	ldr	r2, [sp, #0]
    58a6:	7013      	strb	r3, [r2, #0]
    58a8:	b01b      	add	sp, #108	; 0x6c
    58aa:	bd30      	pop	{r4, r5, pc}
    58ac:	7fffffff 	.word	0x7fffffff

000058b0 <vsiprintf>:
    58b0:	b510      	push	{r4, lr}
    58b2:	0013      	movs	r3, r2
    58b4:	000a      	movs	r2, r1
    58b6:	0001      	movs	r1, r0
    58b8:	4802      	ldr	r0, [pc, #8]	; (58c4 <vsiprintf+0x14>)
    58ba:	6800      	ldr	r0, [r0, #0]
    58bc:	f7ff ffe0 	bl	5880 <_vsiprintf_r>
    58c0:	bd10      	pop	{r4, pc}
    58c2:	46c0      	nop			; (mov r8, r8)
    58c4:	20000044 	.word	0x20000044

000058c8 <__malloc_lock>:
    58c8:	4770      	bx	lr

000058ca <__malloc_unlock>:
    58ca:	4770      	bx	lr

000058cc <__ssputs_r>:
    58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ce:	688e      	ldr	r6, [r1, #8]
    58d0:	b085      	sub	sp, #20
    58d2:	0007      	movs	r7, r0
    58d4:	000c      	movs	r4, r1
    58d6:	9203      	str	r2, [sp, #12]
    58d8:	9301      	str	r3, [sp, #4]
    58da:	429e      	cmp	r6, r3
    58dc:	d839      	bhi.n	5952 <__ssputs_r+0x86>
    58de:	2390      	movs	r3, #144	; 0x90
    58e0:	898a      	ldrh	r2, [r1, #12]
    58e2:	00db      	lsls	r3, r3, #3
    58e4:	421a      	tst	r2, r3
    58e6:	d034      	beq.n	5952 <__ssputs_r+0x86>
    58e8:	2503      	movs	r5, #3
    58ea:	6909      	ldr	r1, [r1, #16]
    58ec:	6823      	ldr	r3, [r4, #0]
    58ee:	1a5b      	subs	r3, r3, r1
    58f0:	9302      	str	r3, [sp, #8]
    58f2:	6963      	ldr	r3, [r4, #20]
    58f4:	9802      	ldr	r0, [sp, #8]
    58f6:	435d      	muls	r5, r3
    58f8:	0feb      	lsrs	r3, r5, #31
    58fa:	195d      	adds	r5, r3, r5
    58fc:	9b01      	ldr	r3, [sp, #4]
    58fe:	106d      	asrs	r5, r5, #1
    5900:	3301      	adds	r3, #1
    5902:	181b      	adds	r3, r3, r0
    5904:	42ab      	cmp	r3, r5
    5906:	d900      	bls.n	590a <__ssputs_r+0x3e>
    5908:	001d      	movs	r5, r3
    590a:	0553      	lsls	r3, r2, #21
    590c:	d532      	bpl.n	5974 <__ssputs_r+0xa8>
    590e:	0029      	movs	r1, r5
    5910:	0038      	movs	r0, r7
    5912:	f7ff ff13 	bl	573c <_malloc_r>
    5916:	1e06      	subs	r6, r0, #0
    5918:	d109      	bne.n	592e <__ssputs_r+0x62>
    591a:	230c      	movs	r3, #12
    591c:	603b      	str	r3, [r7, #0]
    591e:	2340      	movs	r3, #64	; 0x40
    5920:	2001      	movs	r0, #1
    5922:	89a2      	ldrh	r2, [r4, #12]
    5924:	4240      	negs	r0, r0
    5926:	4313      	orrs	r3, r2
    5928:	81a3      	strh	r3, [r4, #12]
    592a:	b005      	add	sp, #20
    592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    592e:	9a02      	ldr	r2, [sp, #8]
    5930:	6921      	ldr	r1, [r4, #16]
    5932:	f7ff fea7 	bl	5684 <memcpy>
    5936:	89a3      	ldrh	r3, [r4, #12]
    5938:	4a14      	ldr	r2, [pc, #80]	; (598c <__ssputs_r+0xc0>)
    593a:	401a      	ands	r2, r3
    593c:	2380      	movs	r3, #128	; 0x80
    593e:	4313      	orrs	r3, r2
    5940:	81a3      	strh	r3, [r4, #12]
    5942:	9b02      	ldr	r3, [sp, #8]
    5944:	6126      	str	r6, [r4, #16]
    5946:	18f6      	adds	r6, r6, r3
    5948:	6026      	str	r6, [r4, #0]
    594a:	6165      	str	r5, [r4, #20]
    594c:	9e01      	ldr	r6, [sp, #4]
    594e:	1aed      	subs	r5, r5, r3
    5950:	60a5      	str	r5, [r4, #8]
    5952:	9b01      	ldr	r3, [sp, #4]
    5954:	42b3      	cmp	r3, r6
    5956:	d200      	bcs.n	595a <__ssputs_r+0x8e>
    5958:	001e      	movs	r6, r3
    595a:	0032      	movs	r2, r6
    595c:	9903      	ldr	r1, [sp, #12]
    595e:	6820      	ldr	r0, [r4, #0]
    5960:	f000 ffb5 	bl	68ce <memmove>
    5964:	68a3      	ldr	r3, [r4, #8]
    5966:	2000      	movs	r0, #0
    5968:	1b9b      	subs	r3, r3, r6
    596a:	60a3      	str	r3, [r4, #8]
    596c:	6823      	ldr	r3, [r4, #0]
    596e:	199e      	adds	r6, r3, r6
    5970:	6026      	str	r6, [r4, #0]
    5972:	e7da      	b.n	592a <__ssputs_r+0x5e>
    5974:	002a      	movs	r2, r5
    5976:	0038      	movs	r0, r7
    5978:	f000 ffbb 	bl	68f2 <_realloc_r>
    597c:	1e06      	subs	r6, r0, #0
    597e:	d1e0      	bne.n	5942 <__ssputs_r+0x76>
    5980:	6921      	ldr	r1, [r4, #16]
    5982:	0038      	movs	r0, r7
    5984:	f7ff fe90 	bl	56a8 <_free_r>
    5988:	e7c7      	b.n	591a <__ssputs_r+0x4e>
    598a:	46c0      	nop			; (mov r8, r8)
    598c:	fffffb7f 	.word	0xfffffb7f

00005990 <_svfiprintf_r>:
    5990:	b5f0      	push	{r4, r5, r6, r7, lr}
    5992:	b09f      	sub	sp, #124	; 0x7c
    5994:	9002      	str	r0, [sp, #8]
    5996:	9305      	str	r3, [sp, #20]
    5998:	898b      	ldrh	r3, [r1, #12]
    599a:	000f      	movs	r7, r1
    599c:	0016      	movs	r6, r2
    599e:	061b      	lsls	r3, r3, #24
    59a0:	d511      	bpl.n	59c6 <_svfiprintf_r+0x36>
    59a2:	690b      	ldr	r3, [r1, #16]
    59a4:	2b00      	cmp	r3, #0
    59a6:	d10e      	bne.n	59c6 <_svfiprintf_r+0x36>
    59a8:	2140      	movs	r1, #64	; 0x40
    59aa:	f7ff fec7 	bl	573c <_malloc_r>
    59ae:	6038      	str	r0, [r7, #0]
    59b0:	6138      	str	r0, [r7, #16]
    59b2:	2800      	cmp	r0, #0
    59b4:	d105      	bne.n	59c2 <_svfiprintf_r+0x32>
    59b6:	230c      	movs	r3, #12
    59b8:	9a02      	ldr	r2, [sp, #8]
    59ba:	3801      	subs	r0, #1
    59bc:	6013      	str	r3, [r2, #0]
    59be:	b01f      	add	sp, #124	; 0x7c
    59c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59c2:	2340      	movs	r3, #64	; 0x40
    59c4:	617b      	str	r3, [r7, #20]
    59c6:	2300      	movs	r3, #0
    59c8:	ad06      	add	r5, sp, #24
    59ca:	616b      	str	r3, [r5, #20]
    59cc:	3320      	adds	r3, #32
    59ce:	766b      	strb	r3, [r5, #25]
    59d0:	3310      	adds	r3, #16
    59d2:	76ab      	strb	r3, [r5, #26]
    59d4:	0034      	movs	r4, r6
    59d6:	7823      	ldrb	r3, [r4, #0]
    59d8:	2b00      	cmp	r3, #0
    59da:	d147      	bne.n	5a6c <_svfiprintf_r+0xdc>
    59dc:	1ba3      	subs	r3, r4, r6
    59de:	9304      	str	r3, [sp, #16]
    59e0:	d00d      	beq.n	59fe <_svfiprintf_r+0x6e>
    59e2:	1ba3      	subs	r3, r4, r6
    59e4:	0032      	movs	r2, r6
    59e6:	0039      	movs	r1, r7
    59e8:	9802      	ldr	r0, [sp, #8]
    59ea:	f7ff ff6f 	bl	58cc <__ssputs_r>
    59ee:	1c43      	adds	r3, r0, #1
    59f0:	d100      	bne.n	59f4 <_svfiprintf_r+0x64>
    59f2:	e0b5      	b.n	5b60 <_svfiprintf_r+0x1d0>
    59f4:	696a      	ldr	r2, [r5, #20]
    59f6:	9b04      	ldr	r3, [sp, #16]
    59f8:	4694      	mov	ip, r2
    59fa:	4463      	add	r3, ip
    59fc:	616b      	str	r3, [r5, #20]
    59fe:	7823      	ldrb	r3, [r4, #0]
    5a00:	2b00      	cmp	r3, #0
    5a02:	d100      	bne.n	5a06 <_svfiprintf_r+0x76>
    5a04:	e0ac      	b.n	5b60 <_svfiprintf_r+0x1d0>
    5a06:	2201      	movs	r2, #1
    5a08:	2300      	movs	r3, #0
    5a0a:	4252      	negs	r2, r2
    5a0c:	606a      	str	r2, [r5, #4]
    5a0e:	a902      	add	r1, sp, #8
    5a10:	3254      	adds	r2, #84	; 0x54
    5a12:	1852      	adds	r2, r2, r1
    5a14:	3401      	adds	r4, #1
    5a16:	602b      	str	r3, [r5, #0]
    5a18:	60eb      	str	r3, [r5, #12]
    5a1a:	60ab      	str	r3, [r5, #8]
    5a1c:	7013      	strb	r3, [r2, #0]
    5a1e:	65ab      	str	r3, [r5, #88]	; 0x58
    5a20:	4e58      	ldr	r6, [pc, #352]	; (5b84 <_svfiprintf_r+0x1f4>)
    5a22:	2205      	movs	r2, #5
    5a24:	7821      	ldrb	r1, [r4, #0]
    5a26:	0030      	movs	r0, r6
    5a28:	f000 ff46 	bl	68b8 <memchr>
    5a2c:	1c62      	adds	r2, r4, #1
    5a2e:	2800      	cmp	r0, #0
    5a30:	d120      	bne.n	5a74 <_svfiprintf_r+0xe4>
    5a32:	6829      	ldr	r1, [r5, #0]
    5a34:	06cb      	lsls	r3, r1, #27
    5a36:	d504      	bpl.n	5a42 <_svfiprintf_r+0xb2>
    5a38:	2353      	movs	r3, #83	; 0x53
    5a3a:	ae02      	add	r6, sp, #8
    5a3c:	3020      	adds	r0, #32
    5a3e:	199b      	adds	r3, r3, r6
    5a40:	7018      	strb	r0, [r3, #0]
    5a42:	070b      	lsls	r3, r1, #28
    5a44:	d504      	bpl.n	5a50 <_svfiprintf_r+0xc0>
    5a46:	2353      	movs	r3, #83	; 0x53
    5a48:	202b      	movs	r0, #43	; 0x2b
    5a4a:	ae02      	add	r6, sp, #8
    5a4c:	199b      	adds	r3, r3, r6
    5a4e:	7018      	strb	r0, [r3, #0]
    5a50:	7823      	ldrb	r3, [r4, #0]
    5a52:	2b2a      	cmp	r3, #42	; 0x2a
    5a54:	d016      	beq.n	5a84 <_svfiprintf_r+0xf4>
    5a56:	2000      	movs	r0, #0
    5a58:	210a      	movs	r1, #10
    5a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a5c:	7822      	ldrb	r2, [r4, #0]
    5a5e:	3a30      	subs	r2, #48	; 0x30
    5a60:	2a09      	cmp	r2, #9
    5a62:	d955      	bls.n	5b10 <_svfiprintf_r+0x180>
    5a64:	2800      	cmp	r0, #0
    5a66:	d015      	beq.n	5a94 <_svfiprintf_r+0x104>
    5a68:	9309      	str	r3, [sp, #36]	; 0x24
    5a6a:	e013      	b.n	5a94 <_svfiprintf_r+0x104>
    5a6c:	2b25      	cmp	r3, #37	; 0x25
    5a6e:	d0b5      	beq.n	59dc <_svfiprintf_r+0x4c>
    5a70:	3401      	adds	r4, #1
    5a72:	e7b0      	b.n	59d6 <_svfiprintf_r+0x46>
    5a74:	2301      	movs	r3, #1
    5a76:	1b80      	subs	r0, r0, r6
    5a78:	4083      	lsls	r3, r0
    5a7a:	6829      	ldr	r1, [r5, #0]
    5a7c:	0014      	movs	r4, r2
    5a7e:	430b      	orrs	r3, r1
    5a80:	602b      	str	r3, [r5, #0]
    5a82:	e7cd      	b.n	5a20 <_svfiprintf_r+0x90>
    5a84:	9b05      	ldr	r3, [sp, #20]
    5a86:	1d18      	adds	r0, r3, #4
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	9005      	str	r0, [sp, #20]
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	db39      	blt.n	5b04 <_svfiprintf_r+0x174>
    5a90:	9309      	str	r3, [sp, #36]	; 0x24
    5a92:	0014      	movs	r4, r2
    5a94:	7823      	ldrb	r3, [r4, #0]
    5a96:	2b2e      	cmp	r3, #46	; 0x2e
    5a98:	d10b      	bne.n	5ab2 <_svfiprintf_r+0x122>
    5a9a:	7863      	ldrb	r3, [r4, #1]
    5a9c:	1c62      	adds	r2, r4, #1
    5a9e:	2b2a      	cmp	r3, #42	; 0x2a
    5aa0:	d13e      	bne.n	5b20 <_svfiprintf_r+0x190>
    5aa2:	9b05      	ldr	r3, [sp, #20]
    5aa4:	3402      	adds	r4, #2
    5aa6:	1d1a      	adds	r2, r3, #4
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	9205      	str	r2, [sp, #20]
    5aac:	2b00      	cmp	r3, #0
    5aae:	db34      	blt.n	5b1a <_svfiprintf_r+0x18a>
    5ab0:	9307      	str	r3, [sp, #28]
    5ab2:	4e35      	ldr	r6, [pc, #212]	; (5b88 <_svfiprintf_r+0x1f8>)
    5ab4:	7821      	ldrb	r1, [r4, #0]
    5ab6:	2203      	movs	r2, #3
    5ab8:	0030      	movs	r0, r6
    5aba:	f000 fefd 	bl	68b8 <memchr>
    5abe:	2800      	cmp	r0, #0
    5ac0:	d006      	beq.n	5ad0 <_svfiprintf_r+0x140>
    5ac2:	2340      	movs	r3, #64	; 0x40
    5ac4:	1b80      	subs	r0, r0, r6
    5ac6:	4083      	lsls	r3, r0
    5ac8:	682a      	ldr	r2, [r5, #0]
    5aca:	3401      	adds	r4, #1
    5acc:	4313      	orrs	r3, r2
    5ace:	602b      	str	r3, [r5, #0]
    5ad0:	7821      	ldrb	r1, [r4, #0]
    5ad2:	2206      	movs	r2, #6
    5ad4:	482d      	ldr	r0, [pc, #180]	; (5b8c <_svfiprintf_r+0x1fc>)
    5ad6:	1c66      	adds	r6, r4, #1
    5ad8:	7629      	strb	r1, [r5, #24]
    5ada:	f000 feed 	bl	68b8 <memchr>
    5ade:	2800      	cmp	r0, #0
    5ae0:	d046      	beq.n	5b70 <_svfiprintf_r+0x1e0>
    5ae2:	4b2b      	ldr	r3, [pc, #172]	; (5b90 <_svfiprintf_r+0x200>)
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d12f      	bne.n	5b48 <_svfiprintf_r+0x1b8>
    5ae8:	6829      	ldr	r1, [r5, #0]
    5aea:	9b05      	ldr	r3, [sp, #20]
    5aec:	2207      	movs	r2, #7
    5aee:	05c9      	lsls	r1, r1, #23
    5af0:	d528      	bpl.n	5b44 <_svfiprintf_r+0x1b4>
    5af2:	189b      	adds	r3, r3, r2
    5af4:	4393      	bics	r3, r2
    5af6:	3308      	adds	r3, #8
    5af8:	9305      	str	r3, [sp, #20]
    5afa:	696b      	ldr	r3, [r5, #20]
    5afc:	9a03      	ldr	r2, [sp, #12]
    5afe:	189b      	adds	r3, r3, r2
    5b00:	616b      	str	r3, [r5, #20]
    5b02:	e767      	b.n	59d4 <_svfiprintf_r+0x44>
    5b04:	425b      	negs	r3, r3
    5b06:	60eb      	str	r3, [r5, #12]
    5b08:	2302      	movs	r3, #2
    5b0a:	430b      	orrs	r3, r1
    5b0c:	602b      	str	r3, [r5, #0]
    5b0e:	e7c0      	b.n	5a92 <_svfiprintf_r+0x102>
    5b10:	434b      	muls	r3, r1
    5b12:	3401      	adds	r4, #1
    5b14:	189b      	adds	r3, r3, r2
    5b16:	2001      	movs	r0, #1
    5b18:	e7a0      	b.n	5a5c <_svfiprintf_r+0xcc>
    5b1a:	2301      	movs	r3, #1
    5b1c:	425b      	negs	r3, r3
    5b1e:	e7c7      	b.n	5ab0 <_svfiprintf_r+0x120>
    5b20:	2300      	movs	r3, #0
    5b22:	0014      	movs	r4, r2
    5b24:	200a      	movs	r0, #10
    5b26:	001a      	movs	r2, r3
    5b28:	606b      	str	r3, [r5, #4]
    5b2a:	7821      	ldrb	r1, [r4, #0]
    5b2c:	3930      	subs	r1, #48	; 0x30
    5b2e:	2909      	cmp	r1, #9
    5b30:	d903      	bls.n	5b3a <_svfiprintf_r+0x1aa>
    5b32:	2b00      	cmp	r3, #0
    5b34:	d0bd      	beq.n	5ab2 <_svfiprintf_r+0x122>
    5b36:	9207      	str	r2, [sp, #28]
    5b38:	e7bb      	b.n	5ab2 <_svfiprintf_r+0x122>
    5b3a:	4342      	muls	r2, r0
    5b3c:	3401      	adds	r4, #1
    5b3e:	1852      	adds	r2, r2, r1
    5b40:	2301      	movs	r3, #1
    5b42:	e7f2      	b.n	5b2a <_svfiprintf_r+0x19a>
    5b44:	3307      	adds	r3, #7
    5b46:	e7d5      	b.n	5af4 <_svfiprintf_r+0x164>
    5b48:	ab05      	add	r3, sp, #20
    5b4a:	9300      	str	r3, [sp, #0]
    5b4c:	003a      	movs	r2, r7
    5b4e:	4b11      	ldr	r3, [pc, #68]	; (5b94 <_svfiprintf_r+0x204>)
    5b50:	0029      	movs	r1, r5
    5b52:	9802      	ldr	r0, [sp, #8]
    5b54:	e000      	b.n	5b58 <_svfiprintf_r+0x1c8>
    5b56:	bf00      	nop
    5b58:	9003      	str	r0, [sp, #12]
    5b5a:	9b03      	ldr	r3, [sp, #12]
    5b5c:	3301      	adds	r3, #1
    5b5e:	d1cc      	bne.n	5afa <_svfiprintf_r+0x16a>
    5b60:	89bb      	ldrh	r3, [r7, #12]
    5b62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5b64:	065b      	lsls	r3, r3, #25
    5b66:	d400      	bmi.n	5b6a <_svfiprintf_r+0x1da>
    5b68:	e729      	b.n	59be <_svfiprintf_r+0x2e>
    5b6a:	2001      	movs	r0, #1
    5b6c:	4240      	negs	r0, r0
    5b6e:	e726      	b.n	59be <_svfiprintf_r+0x2e>
    5b70:	ab05      	add	r3, sp, #20
    5b72:	9300      	str	r3, [sp, #0]
    5b74:	003a      	movs	r2, r7
    5b76:	4b07      	ldr	r3, [pc, #28]	; (5b94 <_svfiprintf_r+0x204>)
    5b78:	0029      	movs	r1, r5
    5b7a:	9802      	ldr	r0, [sp, #8]
    5b7c:	f000 fa5c 	bl	6038 <_printf_i>
    5b80:	e7ea      	b.n	5b58 <_svfiprintf_r+0x1c8>
    5b82:	46c0      	nop			; (mov r8, r8)
    5b84:	0000764c 	.word	0x0000764c
    5b88:	00007652 	.word	0x00007652
    5b8c:	00007656 	.word	0x00007656
    5b90:	00000000 	.word	0x00000000
    5b94:	000058cd 	.word	0x000058cd

00005b98 <_sungetc_r>:
    5b98:	b570      	push	{r4, r5, r6, lr}
    5b9a:	0014      	movs	r4, r2
    5b9c:	1c4b      	adds	r3, r1, #1
    5b9e:	d103      	bne.n	5ba8 <_sungetc_r+0x10>
    5ba0:	2501      	movs	r5, #1
    5ba2:	426d      	negs	r5, r5
    5ba4:	0028      	movs	r0, r5
    5ba6:	bd70      	pop	{r4, r5, r6, pc}
    5ba8:	8993      	ldrh	r3, [r2, #12]
    5baa:	2220      	movs	r2, #32
    5bac:	4393      	bics	r3, r2
    5bae:	6b62      	ldr	r2, [r4, #52]	; 0x34
    5bb0:	81a3      	strh	r3, [r4, #12]
    5bb2:	b2ce      	uxtb	r6, r1
    5bb4:	b2cd      	uxtb	r5, r1
    5bb6:	6863      	ldr	r3, [r4, #4]
    5bb8:	2a00      	cmp	r2, #0
    5bba:	d010      	beq.n	5bde <_sungetc_r+0x46>
    5bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5bbe:	4293      	cmp	r3, r2
    5bc0:	da07      	bge.n	5bd2 <_sungetc_r+0x3a>
    5bc2:	6823      	ldr	r3, [r4, #0]
    5bc4:	3b01      	subs	r3, #1
    5bc6:	6023      	str	r3, [r4, #0]
    5bc8:	701e      	strb	r6, [r3, #0]
    5bca:	6863      	ldr	r3, [r4, #4]
    5bcc:	3301      	adds	r3, #1
    5bce:	6063      	str	r3, [r4, #4]
    5bd0:	e7e8      	b.n	5ba4 <_sungetc_r+0xc>
    5bd2:	0021      	movs	r1, r4
    5bd4:	f000 fe0e 	bl	67f4 <__submore>
    5bd8:	2800      	cmp	r0, #0
    5bda:	d0f2      	beq.n	5bc2 <_sungetc_r+0x2a>
    5bdc:	e7e0      	b.n	5ba0 <_sungetc_r+0x8>
    5bde:	6921      	ldr	r1, [r4, #16]
    5be0:	6822      	ldr	r2, [r4, #0]
    5be2:	2900      	cmp	r1, #0
    5be4:	d007      	beq.n	5bf6 <_sungetc_r+0x5e>
    5be6:	4291      	cmp	r1, r2
    5be8:	d205      	bcs.n	5bf6 <_sungetc_r+0x5e>
    5bea:	1e51      	subs	r1, r2, #1
    5bec:	7808      	ldrb	r0, [r1, #0]
    5bee:	4285      	cmp	r5, r0
    5bf0:	d101      	bne.n	5bf6 <_sungetc_r+0x5e>
    5bf2:	6021      	str	r1, [r4, #0]
    5bf4:	e7ea      	b.n	5bcc <_sungetc_r+0x34>
    5bf6:	6423      	str	r3, [r4, #64]	; 0x40
    5bf8:	0023      	movs	r3, r4
    5bfa:	3344      	adds	r3, #68	; 0x44
    5bfc:	6363      	str	r3, [r4, #52]	; 0x34
    5bfe:	2303      	movs	r3, #3
    5c00:	63a3      	str	r3, [r4, #56]	; 0x38
    5c02:	0023      	movs	r3, r4
    5c04:	3346      	adds	r3, #70	; 0x46
    5c06:	63e2      	str	r2, [r4, #60]	; 0x3c
    5c08:	701e      	strb	r6, [r3, #0]
    5c0a:	6023      	str	r3, [r4, #0]
    5c0c:	2301      	movs	r3, #1
    5c0e:	e7de      	b.n	5bce <_sungetc_r+0x36>

00005c10 <__ssrefill_r>:
    5c10:	b510      	push	{r4, lr}
    5c12:	000c      	movs	r4, r1
    5c14:	6b49      	ldr	r1, [r1, #52]	; 0x34
    5c16:	2900      	cmp	r1, #0
    5c18:	d00e      	beq.n	5c38 <__ssrefill_r+0x28>
    5c1a:	0023      	movs	r3, r4
    5c1c:	3344      	adds	r3, #68	; 0x44
    5c1e:	4299      	cmp	r1, r3
    5c20:	d001      	beq.n	5c26 <__ssrefill_r+0x16>
    5c22:	f7ff fd41 	bl	56a8 <_free_r>
    5c26:	2000      	movs	r0, #0
    5c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5c2a:	6360      	str	r0, [r4, #52]	; 0x34
    5c2c:	6063      	str	r3, [r4, #4]
    5c2e:	4283      	cmp	r3, r0
    5c30:	d002      	beq.n	5c38 <__ssrefill_r+0x28>
    5c32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c34:	6023      	str	r3, [r4, #0]
    5c36:	bd10      	pop	{r4, pc}
    5c38:	6923      	ldr	r3, [r4, #16]
    5c3a:	2001      	movs	r0, #1
    5c3c:	6023      	str	r3, [r4, #0]
    5c3e:	2300      	movs	r3, #0
    5c40:	89a2      	ldrh	r2, [r4, #12]
    5c42:	6063      	str	r3, [r4, #4]
    5c44:	3320      	adds	r3, #32
    5c46:	4313      	orrs	r3, r2
    5c48:	81a3      	strh	r3, [r4, #12]
    5c4a:	4240      	negs	r0, r0
    5c4c:	e7f3      	b.n	5c36 <__ssrefill_r+0x26>
	...

00005c50 <__ssvfiscanf_r>:
    5c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c52:	4cbd      	ldr	r4, [pc, #756]	; (5f48 <__ssvfiscanf_r+0x2f8>)
    5c54:	2586      	movs	r5, #134	; 0x86
    5c56:	44a5      	add	sp, r4
    5c58:	9303      	str	r3, [sp, #12]
    5c5a:	2300      	movs	r3, #0
    5c5c:	9348      	str	r3, [sp, #288]	; 0x120
    5c5e:	9349      	str	r3, [sp, #292]	; 0x124
    5c60:	ab05      	add	r3, sp, #20
    5c62:	934a      	str	r3, [sp, #296]	; 0x128
    5c64:	23be      	movs	r3, #190	; 0xbe
    5c66:	006d      	lsls	r5, r5, #1
    5c68:	9000      	str	r0, [sp, #0]
    5c6a:	000c      	movs	r4, r1
    5c6c:	a802      	add	r0, sp, #8
    5c6e:	49b7      	ldr	r1, [pc, #732]	; (5f4c <__ssvfiscanf_r+0x2fc>)
    5c70:	005b      	lsls	r3, r3, #1
    5c72:	1940      	adds	r0, r0, r5
    5c74:	27c0      	movs	r7, #192	; 0xc0
    5c76:	50c1      	str	r1, [r0, r3]
    5c78:	ab02      	add	r3, sp, #8
    5c7a:	195b      	adds	r3, r3, r5
    5c7c:	0015      	movs	r5, r2
    5c7e:	49b4      	ldr	r1, [pc, #720]	; (5f50 <__ssvfiscanf_r+0x300>)
    5c80:	007f      	lsls	r7, r7, #1
    5c82:	51d9      	str	r1, [r3, r7]
    5c84:	782b      	ldrb	r3, [r5, #0]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d100      	bne.n	5c8c <__ssvfiscanf_r+0x3c>
    5c8a:	e15b      	b.n	5f44 <__ssvfiscanf_r+0x2f4>
    5c8c:	f000 fdf4 	bl	6878 <__locale_ctype_ptr>
    5c90:	2208      	movs	r2, #8
    5c92:	782b      	ldrb	r3, [r5, #0]
    5c94:	18c0      	adds	r0, r0, r3
    5c96:	9301      	str	r3, [sp, #4]
    5c98:	7843      	ldrb	r3, [r0, #1]
    5c9a:	4013      	ands	r3, r2
    5c9c:	d141      	bne.n	5d22 <__ssvfiscanf_r+0xd2>
    5c9e:	9a01      	ldr	r2, [sp, #4]
    5ca0:	1c6e      	adds	r6, r5, #1
    5ca2:	2a25      	cmp	r2, #37	; 0x25
    5ca4:	d000      	beq.n	5ca8 <__ssvfiscanf_r+0x58>
    5ca6:	e0a8      	b.n	5dfa <__ssvfiscanf_r+0x1aa>
    5ca8:	9347      	str	r3, [sp, #284]	; 0x11c
    5caa:	9345      	str	r3, [sp, #276]	; 0x114
    5cac:	786b      	ldrb	r3, [r5, #1]
    5cae:	2b2a      	cmp	r3, #42	; 0x2a
    5cb0:	d102      	bne.n	5cb8 <__ssvfiscanf_r+0x68>
    5cb2:	3b1a      	subs	r3, #26
    5cb4:	9345      	str	r3, [sp, #276]	; 0x114
    5cb6:	1cae      	adds	r6, r5, #2
    5cb8:	0035      	movs	r5, r6
    5cba:	220a      	movs	r2, #10
    5cbc:	7829      	ldrb	r1, [r5, #0]
    5cbe:	000b      	movs	r3, r1
    5cc0:	3b30      	subs	r3, #48	; 0x30
    5cc2:	2b09      	cmp	r3, #9
    5cc4:	d948      	bls.n	5d58 <__ssvfiscanf_r+0x108>
    5cc6:	4ea3      	ldr	r6, [pc, #652]	; (5f54 <__ssvfiscanf_r+0x304>)
    5cc8:	2203      	movs	r2, #3
    5cca:	0030      	movs	r0, r6
    5ccc:	f000 fdf4 	bl	68b8 <memchr>
    5cd0:	2800      	cmp	r0, #0
    5cd2:	d007      	beq.n	5ce4 <__ssvfiscanf_r+0x94>
    5cd4:	2301      	movs	r3, #1
    5cd6:	1b80      	subs	r0, r0, r6
    5cd8:	4083      	lsls	r3, r0
    5cda:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5cdc:	3501      	adds	r5, #1
    5cde:	4313      	orrs	r3, r2
    5ce0:	9202      	str	r2, [sp, #8]
    5ce2:	9345      	str	r3, [sp, #276]	; 0x114
    5ce4:	782b      	ldrb	r3, [r5, #0]
    5ce6:	1c6e      	adds	r6, r5, #1
    5ce8:	2b67      	cmp	r3, #103	; 0x67
    5cea:	d858      	bhi.n	5d9e <__ssvfiscanf_r+0x14e>
    5cec:	2b65      	cmp	r3, #101	; 0x65
    5cee:	d300      	bcc.n	5cf2 <__ssvfiscanf_r+0xa2>
    5cf0:	e0dd      	b.n	5eae <__ssvfiscanf_r+0x25e>
    5cf2:	2b47      	cmp	r3, #71	; 0x47
    5cf4:	d838      	bhi.n	5d68 <__ssvfiscanf_r+0x118>
    5cf6:	2b45      	cmp	r3, #69	; 0x45
    5cf8:	d300      	bcc.n	5cfc <__ssvfiscanf_r+0xac>
    5cfa:	e0d8      	b.n	5eae <__ssvfiscanf_r+0x25e>
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d100      	bne.n	5d02 <__ssvfiscanf_r+0xb2>
    5d00:	e11d      	b.n	5f3e <__ssvfiscanf_r+0x2ee>
    5d02:	2b25      	cmp	r3, #37	; 0x25
    5d04:	d079      	beq.n	5dfa <__ssvfiscanf_r+0x1aa>
    5d06:	2303      	movs	r3, #3
    5d08:	934b      	str	r3, [sp, #300]	; 0x12c
    5d0a:	3307      	adds	r3, #7
    5d0c:	9346      	str	r3, [sp, #280]	; 0x118
    5d0e:	e053      	b.n	5db8 <__ssvfiscanf_r+0x168>
    5d10:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5d12:	3301      	adds	r3, #1
    5d14:	9201      	str	r2, [sp, #4]
    5d16:	3201      	adds	r2, #1
    5d18:	9249      	str	r2, [sp, #292]	; 0x124
    5d1a:	6862      	ldr	r2, [r4, #4]
    5d1c:	6023      	str	r3, [r4, #0]
    5d1e:	3a01      	subs	r2, #1
    5d20:	6062      	str	r2, [r4, #4]
    5d22:	6863      	ldr	r3, [r4, #4]
    5d24:	2b00      	cmp	r3, #0
    5d26:	dd0b      	ble.n	5d40 <__ssvfiscanf_r+0xf0>
    5d28:	f000 fda6 	bl	6878 <__locale_ctype_ptr>
    5d2c:	2108      	movs	r1, #8
    5d2e:	6823      	ldr	r3, [r4, #0]
    5d30:	781a      	ldrb	r2, [r3, #0]
    5d32:	1880      	adds	r0, r0, r2
    5d34:	7842      	ldrb	r2, [r0, #1]
    5d36:	420a      	tst	r2, r1
    5d38:	d1ea      	bne.n	5d10 <__ssvfiscanf_r+0xc0>
    5d3a:	1c6e      	adds	r6, r5, #1
    5d3c:	0035      	movs	r5, r6
    5d3e:	e7a1      	b.n	5c84 <__ssvfiscanf_r+0x34>
    5d40:	2286      	movs	r2, #134	; 0x86
    5d42:	ab02      	add	r3, sp, #8
    5d44:	0052      	lsls	r2, r2, #1
    5d46:	189b      	adds	r3, r3, r2
    5d48:	59db      	ldr	r3, [r3, r7]
    5d4a:	0021      	movs	r1, r4
    5d4c:	9800      	ldr	r0, [sp, #0]
    5d4e:	9301      	str	r3, [sp, #4]
    5d50:	4798      	blx	r3
    5d52:	2800      	cmp	r0, #0
    5d54:	d0e8      	beq.n	5d28 <__ssvfiscanf_r+0xd8>
    5d56:	e7f0      	b.n	5d3a <__ssvfiscanf_r+0xea>
    5d58:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    5d5a:	3501      	adds	r5, #1
    5d5c:	9302      	str	r3, [sp, #8]
    5d5e:	4353      	muls	r3, r2
    5d60:	3b30      	subs	r3, #48	; 0x30
    5d62:	1859      	adds	r1, r3, r1
    5d64:	9147      	str	r1, [sp, #284]	; 0x11c
    5d66:	e7a9      	b.n	5cbc <__ssvfiscanf_r+0x6c>
    5d68:	2b5b      	cmp	r3, #91	; 0x5b
    5d6a:	d100      	bne.n	5d6e <__ssvfiscanf_r+0x11e>
    5d6c:	e077      	b.n	5e5e <__ssvfiscanf_r+0x20e>
    5d6e:	d80f      	bhi.n	5d90 <__ssvfiscanf_r+0x140>
    5d70:	2b58      	cmp	r3, #88	; 0x58
    5d72:	d1c8      	bne.n	5d06 <__ssvfiscanf_r+0xb6>
    5d74:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5d76:	9201      	str	r2, [sp, #4]
    5d78:	2280      	movs	r2, #128	; 0x80
    5d7a:	9901      	ldr	r1, [sp, #4]
    5d7c:	0092      	lsls	r2, r2, #2
    5d7e:	430a      	orrs	r2, r1
    5d80:	9245      	str	r2, [sp, #276]	; 0x114
    5d82:	2210      	movs	r2, #16
    5d84:	9246      	str	r2, [sp, #280]	; 0x118
    5d86:	2203      	movs	r2, #3
    5d88:	2b6e      	cmp	r3, #110	; 0x6e
    5d8a:	dd14      	ble.n	5db6 <__ssvfiscanf_r+0x166>
    5d8c:	3201      	adds	r2, #1
    5d8e:	e012      	b.n	5db6 <__ssvfiscanf_r+0x166>
    5d90:	2b63      	cmp	r3, #99	; 0x63
    5d92:	d100      	bne.n	5d96 <__ssvfiscanf_r+0x146>
    5d94:	e071      	b.n	5e7a <__ssvfiscanf_r+0x22a>
    5d96:	2b64      	cmp	r3, #100	; 0x64
    5d98:	d1b5      	bne.n	5d06 <__ssvfiscanf_r+0xb6>
    5d9a:	220a      	movs	r2, #10
    5d9c:	e7f2      	b.n	5d84 <__ssvfiscanf_r+0x134>
    5d9e:	2b70      	cmp	r3, #112	; 0x70
    5da0:	d052      	beq.n	5e48 <__ssvfiscanf_r+0x1f8>
    5da2:	d822      	bhi.n	5dea <__ssvfiscanf_r+0x19a>
    5da4:	2b6e      	cmp	r3, #110	; 0x6e
    5da6:	d100      	bne.n	5daa <__ssvfiscanf_r+0x15a>
    5da8:	e06f      	b.n	5e8a <__ssvfiscanf_r+0x23a>
    5daa:	d854      	bhi.n	5e56 <__ssvfiscanf_r+0x206>
    5dac:	2b69      	cmp	r3, #105	; 0x69
    5dae:	d1aa      	bne.n	5d06 <__ssvfiscanf_r+0xb6>
    5db0:	2300      	movs	r3, #0
    5db2:	2203      	movs	r2, #3
    5db4:	9346      	str	r3, [sp, #280]	; 0x118
    5db6:	924b      	str	r2, [sp, #300]	; 0x12c
    5db8:	6863      	ldr	r3, [r4, #4]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	dc00      	bgt.n	5dc0 <__ssvfiscanf_r+0x170>
    5dbe:	e078      	b.n	5eb2 <__ssvfiscanf_r+0x262>
    5dc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5dc2:	9301      	str	r3, [sp, #4]
    5dc4:	065b      	lsls	r3, r3, #25
    5dc6:	d400      	bmi.n	5dca <__ssvfiscanf_r+0x17a>
    5dc8:	e08b      	b.n	5ee2 <__ssvfiscanf_r+0x292>
    5dca:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5dcc:	2b02      	cmp	r3, #2
    5dce:	dd00      	ble.n	5dd2 <__ssvfiscanf_r+0x182>
    5dd0:	e09d      	b.n	5f0e <__ssvfiscanf_r+0x2be>
    5dd2:	ab03      	add	r3, sp, #12
    5dd4:	0022      	movs	r2, r4
    5dd6:	a945      	add	r1, sp, #276	; 0x114
    5dd8:	9800      	ldr	r0, [sp, #0]
    5dda:	f000 fa47 	bl	626c <_scanf_chars>
    5dde:	2801      	cmp	r0, #1
    5de0:	d100      	bne.n	5de4 <__ssvfiscanf_r+0x194>
    5de2:	e0af      	b.n	5f44 <__ssvfiscanf_r+0x2f4>
    5de4:	2802      	cmp	r0, #2
    5de6:	d1a9      	bne.n	5d3c <__ssvfiscanf_r+0xec>
    5de8:	e025      	b.n	5e36 <__ssvfiscanf_r+0x1e6>
    5dea:	2b75      	cmp	r3, #117	; 0x75
    5dec:	d0d5      	beq.n	5d9a <__ssvfiscanf_r+0x14a>
    5dee:	2b78      	cmp	r3, #120	; 0x78
    5df0:	d0c0      	beq.n	5d74 <__ssvfiscanf_r+0x124>
    5df2:	2b73      	cmp	r3, #115	; 0x73
    5df4:	d187      	bne.n	5d06 <__ssvfiscanf_r+0xb6>
    5df6:	2302      	movs	r3, #2
    5df8:	e03d      	b.n	5e76 <__ssvfiscanf_r+0x226>
    5dfa:	6863      	ldr	r3, [r4, #4]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	dd0f      	ble.n	5e20 <__ssvfiscanf_r+0x1d0>
    5e00:	6823      	ldr	r3, [r4, #0]
    5e02:	9901      	ldr	r1, [sp, #4]
    5e04:	781a      	ldrb	r2, [r3, #0]
    5e06:	4291      	cmp	r1, r2
    5e08:	d000      	beq.n	5e0c <__ssvfiscanf_r+0x1bc>
    5e0a:	e09b      	b.n	5f44 <__ssvfiscanf_r+0x2f4>
    5e0c:	3301      	adds	r3, #1
    5e0e:	6862      	ldr	r2, [r4, #4]
    5e10:	6023      	str	r3, [r4, #0]
    5e12:	9b49      	ldr	r3, [sp, #292]	; 0x124
    5e14:	3a01      	subs	r2, #1
    5e16:	9301      	str	r3, [sp, #4]
    5e18:	3301      	adds	r3, #1
    5e1a:	6062      	str	r2, [r4, #4]
    5e1c:	9349      	str	r3, [sp, #292]	; 0x124
    5e1e:	e78d      	b.n	5d3c <__ssvfiscanf_r+0xec>
    5e20:	2286      	movs	r2, #134	; 0x86
    5e22:	ab02      	add	r3, sp, #8
    5e24:	0052      	lsls	r2, r2, #1
    5e26:	189b      	adds	r3, r3, r2
    5e28:	59db      	ldr	r3, [r3, r7]
    5e2a:	0021      	movs	r1, r4
    5e2c:	9800      	ldr	r0, [sp, #0]
    5e2e:	9302      	str	r3, [sp, #8]
    5e30:	4798      	blx	r3
    5e32:	2800      	cmp	r0, #0
    5e34:	d0e4      	beq.n	5e00 <__ssvfiscanf_r+0x1b0>
    5e36:	9848      	ldr	r0, [sp, #288]	; 0x120
    5e38:	2800      	cmp	r0, #0
    5e3a:	d000      	beq.n	5e3e <__ssvfiscanf_r+0x1ee>
    5e3c:	e07b      	b.n	5f36 <__ssvfiscanf_r+0x2e6>
    5e3e:	3801      	subs	r0, #1
    5e40:	23a7      	movs	r3, #167	; 0xa7
    5e42:	009b      	lsls	r3, r3, #2
    5e44:	449d      	add	sp, r3
    5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e48:	9a45      	ldr	r2, [sp, #276]	; 0x114
    5e4a:	9201      	str	r2, [sp, #4]
    5e4c:	2220      	movs	r2, #32
    5e4e:	9901      	ldr	r1, [sp, #4]
    5e50:	430a      	orrs	r2, r1
    5e52:	9245      	str	r2, [sp, #276]	; 0x114
    5e54:	e78e      	b.n	5d74 <__ssvfiscanf_r+0x124>
    5e56:	2308      	movs	r3, #8
    5e58:	2204      	movs	r2, #4
    5e5a:	9346      	str	r3, [sp, #280]	; 0x118
    5e5c:	e7ab      	b.n	5db6 <__ssvfiscanf_r+0x166>
    5e5e:	0031      	movs	r1, r6
    5e60:	a805      	add	r0, sp, #20
    5e62:	f000 fb67 	bl	6534 <__sccl>
    5e66:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5e68:	0006      	movs	r6, r0
    5e6a:	9301      	str	r3, [sp, #4]
    5e6c:	2340      	movs	r3, #64	; 0x40
    5e6e:	9a01      	ldr	r2, [sp, #4]
    5e70:	4313      	orrs	r3, r2
    5e72:	9345      	str	r3, [sp, #276]	; 0x114
    5e74:	2301      	movs	r3, #1
    5e76:	934b      	str	r3, [sp, #300]	; 0x12c
    5e78:	e79e      	b.n	5db8 <__ssvfiscanf_r+0x168>
    5e7a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    5e7c:	9301      	str	r3, [sp, #4]
    5e7e:	2340      	movs	r3, #64	; 0x40
    5e80:	9a01      	ldr	r2, [sp, #4]
    5e82:	4313      	orrs	r3, r2
    5e84:	9345      	str	r3, [sp, #276]	; 0x114
    5e86:	2300      	movs	r3, #0
    5e88:	e7f5      	b.n	5e76 <__ssvfiscanf_r+0x226>
    5e8a:	9945      	ldr	r1, [sp, #276]	; 0x114
    5e8c:	06cb      	lsls	r3, r1, #27
    5e8e:	d500      	bpl.n	5e92 <__ssvfiscanf_r+0x242>
    5e90:	e754      	b.n	5d3c <__ssvfiscanf_r+0xec>
    5e92:	9b03      	ldr	r3, [sp, #12]
    5e94:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5e96:	07c8      	lsls	r0, r1, #31
    5e98:	d504      	bpl.n	5ea4 <__ssvfiscanf_r+0x254>
    5e9a:	1d19      	adds	r1, r3, #4
    5e9c:	9103      	str	r1, [sp, #12]
    5e9e:	681b      	ldr	r3, [r3, #0]
    5ea0:	801a      	strh	r2, [r3, #0]
    5ea2:	e74b      	b.n	5d3c <__ssvfiscanf_r+0xec>
    5ea4:	1d19      	adds	r1, r3, #4
    5ea6:	9103      	str	r1, [sp, #12]
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	601a      	str	r2, [r3, #0]
    5eac:	e746      	b.n	5d3c <__ssvfiscanf_r+0xec>
    5eae:	2305      	movs	r3, #5
    5eb0:	e7e1      	b.n	5e76 <__ssvfiscanf_r+0x226>
    5eb2:	2286      	movs	r2, #134	; 0x86
    5eb4:	ab02      	add	r3, sp, #8
    5eb6:	0052      	lsls	r2, r2, #1
    5eb8:	189b      	adds	r3, r3, r2
    5eba:	59db      	ldr	r3, [r3, r7]
    5ebc:	0021      	movs	r1, r4
    5ebe:	9800      	ldr	r0, [sp, #0]
    5ec0:	9301      	str	r3, [sp, #4]
    5ec2:	4798      	blx	r3
    5ec4:	2800      	cmp	r0, #0
    5ec6:	d100      	bne.n	5eca <__ssvfiscanf_r+0x27a>
    5ec8:	e77a      	b.n	5dc0 <__ssvfiscanf_r+0x170>
    5eca:	e7b4      	b.n	5e36 <__ssvfiscanf_r+0x1e6>
    5ecc:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5ece:	9201      	str	r2, [sp, #4]
    5ed0:	3201      	adds	r2, #1
    5ed2:	9249      	str	r2, [sp, #292]	; 0x124
    5ed4:	6862      	ldr	r2, [r4, #4]
    5ed6:	3a01      	subs	r2, #1
    5ed8:	6062      	str	r2, [r4, #4]
    5eda:	2a00      	cmp	r2, #0
    5edc:	dd0b      	ble.n	5ef6 <__ssvfiscanf_r+0x2a6>
    5ede:	3301      	adds	r3, #1
    5ee0:	6023      	str	r3, [r4, #0]
    5ee2:	f000 fcc9 	bl	6878 <__locale_ctype_ptr>
    5ee6:	2108      	movs	r1, #8
    5ee8:	6823      	ldr	r3, [r4, #0]
    5eea:	781a      	ldrb	r2, [r3, #0]
    5eec:	1880      	adds	r0, r0, r2
    5eee:	7842      	ldrb	r2, [r0, #1]
    5ef0:	420a      	tst	r2, r1
    5ef2:	d1eb      	bne.n	5ecc <__ssvfiscanf_r+0x27c>
    5ef4:	e769      	b.n	5dca <__ssvfiscanf_r+0x17a>
    5ef6:	2286      	movs	r2, #134	; 0x86
    5ef8:	ab02      	add	r3, sp, #8
    5efa:	0052      	lsls	r2, r2, #1
    5efc:	189b      	adds	r3, r3, r2
    5efe:	59db      	ldr	r3, [r3, r7]
    5f00:	0021      	movs	r1, r4
    5f02:	9800      	ldr	r0, [sp, #0]
    5f04:	9301      	str	r3, [sp, #4]
    5f06:	4798      	blx	r3
    5f08:	2800      	cmp	r0, #0
    5f0a:	d0ea      	beq.n	5ee2 <__ssvfiscanf_r+0x292>
    5f0c:	e793      	b.n	5e36 <__ssvfiscanf_r+0x1e6>
    5f0e:	2b04      	cmp	r3, #4
    5f10:	dc06      	bgt.n	5f20 <__ssvfiscanf_r+0x2d0>
    5f12:	ab03      	add	r3, sp, #12
    5f14:	0022      	movs	r2, r4
    5f16:	a945      	add	r1, sp, #276	; 0x114
    5f18:	9800      	ldr	r0, [sp, #0]
    5f1a:	f000 fa0b 	bl	6334 <_scanf_i>
    5f1e:	e75e      	b.n	5dde <__ssvfiscanf_r+0x18e>
    5f20:	4b0d      	ldr	r3, [pc, #52]	; (5f58 <__ssvfiscanf_r+0x308>)
    5f22:	2b00      	cmp	r3, #0
    5f24:	d100      	bne.n	5f28 <__ssvfiscanf_r+0x2d8>
    5f26:	e709      	b.n	5d3c <__ssvfiscanf_r+0xec>
    5f28:	ab03      	add	r3, sp, #12
    5f2a:	0022      	movs	r2, r4
    5f2c:	a945      	add	r1, sp, #276	; 0x114
    5f2e:	9800      	ldr	r0, [sp, #0]
    5f30:	e000      	b.n	5f34 <__ssvfiscanf_r+0x2e4>
    5f32:	bf00      	nop
    5f34:	e753      	b.n	5dde <__ssvfiscanf_r+0x18e>
    5f36:	89a3      	ldrh	r3, [r4, #12]
    5f38:	065b      	lsls	r3, r3, #25
    5f3a:	d400      	bmi.n	5f3e <__ssvfiscanf_r+0x2ee>
    5f3c:	e780      	b.n	5e40 <__ssvfiscanf_r+0x1f0>
    5f3e:	2001      	movs	r0, #1
    5f40:	4240      	negs	r0, r0
    5f42:	e77d      	b.n	5e40 <__ssvfiscanf_r+0x1f0>
    5f44:	9848      	ldr	r0, [sp, #288]	; 0x120
    5f46:	e77b      	b.n	5e40 <__ssvfiscanf_r+0x1f0>
    5f48:	fffffd64 	.word	0xfffffd64
    5f4c:	00005b99 	.word	0x00005b99
    5f50:	00005c11 	.word	0x00005c11
    5f54:	00007652 	.word	0x00007652
    5f58:	00000000 	.word	0x00000000

00005f5c <_printf_common>:
    5f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f5e:	0015      	movs	r5, r2
    5f60:	9301      	str	r3, [sp, #4]
    5f62:	688a      	ldr	r2, [r1, #8]
    5f64:	690b      	ldr	r3, [r1, #16]
    5f66:	9000      	str	r0, [sp, #0]
    5f68:	000c      	movs	r4, r1
    5f6a:	4293      	cmp	r3, r2
    5f6c:	da00      	bge.n	5f70 <_printf_common+0x14>
    5f6e:	0013      	movs	r3, r2
    5f70:	0022      	movs	r2, r4
    5f72:	602b      	str	r3, [r5, #0]
    5f74:	3243      	adds	r2, #67	; 0x43
    5f76:	7812      	ldrb	r2, [r2, #0]
    5f78:	2a00      	cmp	r2, #0
    5f7a:	d001      	beq.n	5f80 <_printf_common+0x24>
    5f7c:	3301      	adds	r3, #1
    5f7e:	602b      	str	r3, [r5, #0]
    5f80:	6823      	ldr	r3, [r4, #0]
    5f82:	069b      	lsls	r3, r3, #26
    5f84:	d502      	bpl.n	5f8c <_printf_common+0x30>
    5f86:	682b      	ldr	r3, [r5, #0]
    5f88:	3302      	adds	r3, #2
    5f8a:	602b      	str	r3, [r5, #0]
    5f8c:	2706      	movs	r7, #6
    5f8e:	6823      	ldr	r3, [r4, #0]
    5f90:	401f      	ands	r7, r3
    5f92:	d027      	beq.n	5fe4 <_printf_common+0x88>
    5f94:	0023      	movs	r3, r4
    5f96:	3343      	adds	r3, #67	; 0x43
    5f98:	781b      	ldrb	r3, [r3, #0]
    5f9a:	1e5a      	subs	r2, r3, #1
    5f9c:	4193      	sbcs	r3, r2
    5f9e:	6822      	ldr	r2, [r4, #0]
    5fa0:	0692      	lsls	r2, r2, #26
    5fa2:	d430      	bmi.n	6006 <_printf_common+0xaa>
    5fa4:	0022      	movs	r2, r4
    5fa6:	9901      	ldr	r1, [sp, #4]
    5fa8:	3243      	adds	r2, #67	; 0x43
    5faa:	9800      	ldr	r0, [sp, #0]
    5fac:	9e08      	ldr	r6, [sp, #32]
    5fae:	47b0      	blx	r6
    5fb0:	1c43      	adds	r3, r0, #1
    5fb2:	d025      	beq.n	6000 <_printf_common+0xa4>
    5fb4:	2306      	movs	r3, #6
    5fb6:	6820      	ldr	r0, [r4, #0]
    5fb8:	682a      	ldr	r2, [r5, #0]
    5fba:	68e1      	ldr	r1, [r4, #12]
    5fbc:	4003      	ands	r3, r0
    5fbe:	2500      	movs	r5, #0
    5fc0:	2b04      	cmp	r3, #4
    5fc2:	d103      	bne.n	5fcc <_printf_common+0x70>
    5fc4:	1a8d      	subs	r5, r1, r2
    5fc6:	43eb      	mvns	r3, r5
    5fc8:	17db      	asrs	r3, r3, #31
    5fca:	401d      	ands	r5, r3
    5fcc:	68a3      	ldr	r3, [r4, #8]
    5fce:	6922      	ldr	r2, [r4, #16]
    5fd0:	4293      	cmp	r3, r2
    5fd2:	dd01      	ble.n	5fd8 <_printf_common+0x7c>
    5fd4:	1a9b      	subs	r3, r3, r2
    5fd6:	18ed      	adds	r5, r5, r3
    5fd8:	2700      	movs	r7, #0
    5fda:	42bd      	cmp	r5, r7
    5fdc:	d120      	bne.n	6020 <_printf_common+0xc4>
    5fde:	2000      	movs	r0, #0
    5fe0:	e010      	b.n	6004 <_printf_common+0xa8>
    5fe2:	3701      	adds	r7, #1
    5fe4:	68e3      	ldr	r3, [r4, #12]
    5fe6:	682a      	ldr	r2, [r5, #0]
    5fe8:	1a9b      	subs	r3, r3, r2
    5fea:	429f      	cmp	r7, r3
    5fec:	dad2      	bge.n	5f94 <_printf_common+0x38>
    5fee:	0022      	movs	r2, r4
    5ff0:	2301      	movs	r3, #1
    5ff2:	3219      	adds	r2, #25
    5ff4:	9901      	ldr	r1, [sp, #4]
    5ff6:	9800      	ldr	r0, [sp, #0]
    5ff8:	9e08      	ldr	r6, [sp, #32]
    5ffa:	47b0      	blx	r6
    5ffc:	1c43      	adds	r3, r0, #1
    5ffe:	d1f0      	bne.n	5fe2 <_printf_common+0x86>
    6000:	2001      	movs	r0, #1
    6002:	4240      	negs	r0, r0
    6004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6006:	2030      	movs	r0, #48	; 0x30
    6008:	18e1      	adds	r1, r4, r3
    600a:	3143      	adds	r1, #67	; 0x43
    600c:	7008      	strb	r0, [r1, #0]
    600e:	0021      	movs	r1, r4
    6010:	1c5a      	adds	r2, r3, #1
    6012:	3145      	adds	r1, #69	; 0x45
    6014:	7809      	ldrb	r1, [r1, #0]
    6016:	18a2      	adds	r2, r4, r2
    6018:	3243      	adds	r2, #67	; 0x43
    601a:	3302      	adds	r3, #2
    601c:	7011      	strb	r1, [r2, #0]
    601e:	e7c1      	b.n	5fa4 <_printf_common+0x48>
    6020:	0022      	movs	r2, r4
    6022:	2301      	movs	r3, #1
    6024:	321a      	adds	r2, #26
    6026:	9901      	ldr	r1, [sp, #4]
    6028:	9800      	ldr	r0, [sp, #0]
    602a:	9e08      	ldr	r6, [sp, #32]
    602c:	47b0      	blx	r6
    602e:	1c43      	adds	r3, r0, #1
    6030:	d0e6      	beq.n	6000 <_printf_common+0xa4>
    6032:	3701      	adds	r7, #1
    6034:	e7d1      	b.n	5fda <_printf_common+0x7e>
	...

00006038 <_printf_i>:
    6038:	b5f0      	push	{r4, r5, r6, r7, lr}
    603a:	b08b      	sub	sp, #44	; 0x2c
    603c:	9206      	str	r2, [sp, #24]
    603e:	000a      	movs	r2, r1
    6040:	3243      	adds	r2, #67	; 0x43
    6042:	9307      	str	r3, [sp, #28]
    6044:	9005      	str	r0, [sp, #20]
    6046:	9204      	str	r2, [sp, #16]
    6048:	7e0a      	ldrb	r2, [r1, #24]
    604a:	000c      	movs	r4, r1
    604c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    604e:	2a6e      	cmp	r2, #110	; 0x6e
    6050:	d100      	bne.n	6054 <_printf_i+0x1c>
    6052:	e08f      	b.n	6174 <_printf_i+0x13c>
    6054:	d817      	bhi.n	6086 <_printf_i+0x4e>
    6056:	2a63      	cmp	r2, #99	; 0x63
    6058:	d02c      	beq.n	60b4 <_printf_i+0x7c>
    605a:	d808      	bhi.n	606e <_printf_i+0x36>
    605c:	2a00      	cmp	r2, #0
    605e:	d100      	bne.n	6062 <_printf_i+0x2a>
    6060:	e099      	b.n	6196 <_printf_i+0x15e>
    6062:	2a58      	cmp	r2, #88	; 0x58
    6064:	d054      	beq.n	6110 <_printf_i+0xd8>
    6066:	0026      	movs	r6, r4
    6068:	3642      	adds	r6, #66	; 0x42
    606a:	7032      	strb	r2, [r6, #0]
    606c:	e029      	b.n	60c2 <_printf_i+0x8a>
    606e:	2a64      	cmp	r2, #100	; 0x64
    6070:	d001      	beq.n	6076 <_printf_i+0x3e>
    6072:	2a69      	cmp	r2, #105	; 0x69
    6074:	d1f7      	bne.n	6066 <_printf_i+0x2e>
    6076:	6821      	ldr	r1, [r4, #0]
    6078:	681a      	ldr	r2, [r3, #0]
    607a:	0608      	lsls	r0, r1, #24
    607c:	d523      	bpl.n	60c6 <_printf_i+0x8e>
    607e:	1d11      	adds	r1, r2, #4
    6080:	6019      	str	r1, [r3, #0]
    6082:	6815      	ldr	r5, [r2, #0]
    6084:	e025      	b.n	60d2 <_printf_i+0x9a>
    6086:	2a73      	cmp	r2, #115	; 0x73
    6088:	d100      	bne.n	608c <_printf_i+0x54>
    608a:	e088      	b.n	619e <_printf_i+0x166>
    608c:	d808      	bhi.n	60a0 <_printf_i+0x68>
    608e:	2a6f      	cmp	r2, #111	; 0x6f
    6090:	d029      	beq.n	60e6 <_printf_i+0xae>
    6092:	2a70      	cmp	r2, #112	; 0x70
    6094:	d1e7      	bne.n	6066 <_printf_i+0x2e>
    6096:	2220      	movs	r2, #32
    6098:	6809      	ldr	r1, [r1, #0]
    609a:	430a      	orrs	r2, r1
    609c:	6022      	str	r2, [r4, #0]
    609e:	e003      	b.n	60a8 <_printf_i+0x70>
    60a0:	2a75      	cmp	r2, #117	; 0x75
    60a2:	d020      	beq.n	60e6 <_printf_i+0xae>
    60a4:	2a78      	cmp	r2, #120	; 0x78
    60a6:	d1de      	bne.n	6066 <_printf_i+0x2e>
    60a8:	0022      	movs	r2, r4
    60aa:	2178      	movs	r1, #120	; 0x78
    60ac:	3245      	adds	r2, #69	; 0x45
    60ae:	7011      	strb	r1, [r2, #0]
    60b0:	4a6c      	ldr	r2, [pc, #432]	; (6264 <_printf_i+0x22c>)
    60b2:	e030      	b.n	6116 <_printf_i+0xde>
    60b4:	000e      	movs	r6, r1
    60b6:	681a      	ldr	r2, [r3, #0]
    60b8:	3642      	adds	r6, #66	; 0x42
    60ba:	1d11      	adds	r1, r2, #4
    60bc:	6019      	str	r1, [r3, #0]
    60be:	6813      	ldr	r3, [r2, #0]
    60c0:	7033      	strb	r3, [r6, #0]
    60c2:	2301      	movs	r3, #1
    60c4:	e079      	b.n	61ba <_printf_i+0x182>
    60c6:	0649      	lsls	r1, r1, #25
    60c8:	d5d9      	bpl.n	607e <_printf_i+0x46>
    60ca:	1d11      	adds	r1, r2, #4
    60cc:	6019      	str	r1, [r3, #0]
    60ce:	2300      	movs	r3, #0
    60d0:	5ed5      	ldrsh	r5, [r2, r3]
    60d2:	2d00      	cmp	r5, #0
    60d4:	da03      	bge.n	60de <_printf_i+0xa6>
    60d6:	232d      	movs	r3, #45	; 0x2d
    60d8:	9a04      	ldr	r2, [sp, #16]
    60da:	426d      	negs	r5, r5
    60dc:	7013      	strb	r3, [r2, #0]
    60de:	4b62      	ldr	r3, [pc, #392]	; (6268 <_printf_i+0x230>)
    60e0:	270a      	movs	r7, #10
    60e2:	9303      	str	r3, [sp, #12]
    60e4:	e02f      	b.n	6146 <_printf_i+0x10e>
    60e6:	6820      	ldr	r0, [r4, #0]
    60e8:	6819      	ldr	r1, [r3, #0]
    60ea:	0605      	lsls	r5, r0, #24
    60ec:	d503      	bpl.n	60f6 <_printf_i+0xbe>
    60ee:	1d08      	adds	r0, r1, #4
    60f0:	6018      	str	r0, [r3, #0]
    60f2:	680d      	ldr	r5, [r1, #0]
    60f4:	e005      	b.n	6102 <_printf_i+0xca>
    60f6:	0640      	lsls	r0, r0, #25
    60f8:	d5f9      	bpl.n	60ee <_printf_i+0xb6>
    60fa:	680d      	ldr	r5, [r1, #0]
    60fc:	1d08      	adds	r0, r1, #4
    60fe:	6018      	str	r0, [r3, #0]
    6100:	b2ad      	uxth	r5, r5
    6102:	4b59      	ldr	r3, [pc, #356]	; (6268 <_printf_i+0x230>)
    6104:	2708      	movs	r7, #8
    6106:	9303      	str	r3, [sp, #12]
    6108:	2a6f      	cmp	r2, #111	; 0x6f
    610a:	d018      	beq.n	613e <_printf_i+0x106>
    610c:	270a      	movs	r7, #10
    610e:	e016      	b.n	613e <_printf_i+0x106>
    6110:	3145      	adds	r1, #69	; 0x45
    6112:	700a      	strb	r2, [r1, #0]
    6114:	4a54      	ldr	r2, [pc, #336]	; (6268 <_printf_i+0x230>)
    6116:	9203      	str	r2, [sp, #12]
    6118:	681a      	ldr	r2, [r3, #0]
    611a:	6821      	ldr	r1, [r4, #0]
    611c:	1d10      	adds	r0, r2, #4
    611e:	6018      	str	r0, [r3, #0]
    6120:	6815      	ldr	r5, [r2, #0]
    6122:	0608      	lsls	r0, r1, #24
    6124:	d522      	bpl.n	616c <_printf_i+0x134>
    6126:	07cb      	lsls	r3, r1, #31
    6128:	d502      	bpl.n	6130 <_printf_i+0xf8>
    612a:	2320      	movs	r3, #32
    612c:	4319      	orrs	r1, r3
    612e:	6021      	str	r1, [r4, #0]
    6130:	2710      	movs	r7, #16
    6132:	2d00      	cmp	r5, #0
    6134:	d103      	bne.n	613e <_printf_i+0x106>
    6136:	2320      	movs	r3, #32
    6138:	6822      	ldr	r2, [r4, #0]
    613a:	439a      	bics	r2, r3
    613c:	6022      	str	r2, [r4, #0]
    613e:	0023      	movs	r3, r4
    6140:	2200      	movs	r2, #0
    6142:	3343      	adds	r3, #67	; 0x43
    6144:	701a      	strb	r2, [r3, #0]
    6146:	6863      	ldr	r3, [r4, #4]
    6148:	60a3      	str	r3, [r4, #8]
    614a:	2b00      	cmp	r3, #0
    614c:	db5c      	blt.n	6208 <_printf_i+0x1d0>
    614e:	2204      	movs	r2, #4
    6150:	6821      	ldr	r1, [r4, #0]
    6152:	4391      	bics	r1, r2
    6154:	6021      	str	r1, [r4, #0]
    6156:	2d00      	cmp	r5, #0
    6158:	d158      	bne.n	620c <_printf_i+0x1d4>
    615a:	9e04      	ldr	r6, [sp, #16]
    615c:	2b00      	cmp	r3, #0
    615e:	d064      	beq.n	622a <_printf_i+0x1f2>
    6160:	0026      	movs	r6, r4
    6162:	9b03      	ldr	r3, [sp, #12]
    6164:	3642      	adds	r6, #66	; 0x42
    6166:	781b      	ldrb	r3, [r3, #0]
    6168:	7033      	strb	r3, [r6, #0]
    616a:	e05e      	b.n	622a <_printf_i+0x1f2>
    616c:	0648      	lsls	r0, r1, #25
    616e:	d5da      	bpl.n	6126 <_printf_i+0xee>
    6170:	b2ad      	uxth	r5, r5
    6172:	e7d8      	b.n	6126 <_printf_i+0xee>
    6174:	6809      	ldr	r1, [r1, #0]
    6176:	681a      	ldr	r2, [r3, #0]
    6178:	0608      	lsls	r0, r1, #24
    617a:	d505      	bpl.n	6188 <_printf_i+0x150>
    617c:	1d11      	adds	r1, r2, #4
    617e:	6019      	str	r1, [r3, #0]
    6180:	6813      	ldr	r3, [r2, #0]
    6182:	6962      	ldr	r2, [r4, #20]
    6184:	601a      	str	r2, [r3, #0]
    6186:	e006      	b.n	6196 <_printf_i+0x15e>
    6188:	0649      	lsls	r1, r1, #25
    618a:	d5f7      	bpl.n	617c <_printf_i+0x144>
    618c:	1d11      	adds	r1, r2, #4
    618e:	6019      	str	r1, [r3, #0]
    6190:	6813      	ldr	r3, [r2, #0]
    6192:	8aa2      	ldrh	r2, [r4, #20]
    6194:	801a      	strh	r2, [r3, #0]
    6196:	2300      	movs	r3, #0
    6198:	9e04      	ldr	r6, [sp, #16]
    619a:	6123      	str	r3, [r4, #16]
    619c:	e054      	b.n	6248 <_printf_i+0x210>
    619e:	681a      	ldr	r2, [r3, #0]
    61a0:	1d11      	adds	r1, r2, #4
    61a2:	6019      	str	r1, [r3, #0]
    61a4:	6816      	ldr	r6, [r2, #0]
    61a6:	2100      	movs	r1, #0
    61a8:	6862      	ldr	r2, [r4, #4]
    61aa:	0030      	movs	r0, r6
    61ac:	f000 fb84 	bl	68b8 <memchr>
    61b0:	2800      	cmp	r0, #0
    61b2:	d001      	beq.n	61b8 <_printf_i+0x180>
    61b4:	1b80      	subs	r0, r0, r6
    61b6:	6060      	str	r0, [r4, #4]
    61b8:	6863      	ldr	r3, [r4, #4]
    61ba:	6123      	str	r3, [r4, #16]
    61bc:	2300      	movs	r3, #0
    61be:	9a04      	ldr	r2, [sp, #16]
    61c0:	7013      	strb	r3, [r2, #0]
    61c2:	e041      	b.n	6248 <_printf_i+0x210>
    61c4:	6923      	ldr	r3, [r4, #16]
    61c6:	0032      	movs	r2, r6
    61c8:	9906      	ldr	r1, [sp, #24]
    61ca:	9805      	ldr	r0, [sp, #20]
    61cc:	9d07      	ldr	r5, [sp, #28]
    61ce:	47a8      	blx	r5
    61d0:	1c43      	adds	r3, r0, #1
    61d2:	d043      	beq.n	625c <_printf_i+0x224>
    61d4:	6823      	ldr	r3, [r4, #0]
    61d6:	2500      	movs	r5, #0
    61d8:	079b      	lsls	r3, r3, #30
    61da:	d40f      	bmi.n	61fc <_printf_i+0x1c4>
    61dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61de:	68e0      	ldr	r0, [r4, #12]
    61e0:	4298      	cmp	r0, r3
    61e2:	da3d      	bge.n	6260 <_printf_i+0x228>
    61e4:	0018      	movs	r0, r3
    61e6:	e03b      	b.n	6260 <_printf_i+0x228>
    61e8:	0022      	movs	r2, r4
    61ea:	2301      	movs	r3, #1
    61ec:	3219      	adds	r2, #25
    61ee:	9906      	ldr	r1, [sp, #24]
    61f0:	9805      	ldr	r0, [sp, #20]
    61f2:	9e07      	ldr	r6, [sp, #28]
    61f4:	47b0      	blx	r6
    61f6:	1c43      	adds	r3, r0, #1
    61f8:	d030      	beq.n	625c <_printf_i+0x224>
    61fa:	3501      	adds	r5, #1
    61fc:	68e3      	ldr	r3, [r4, #12]
    61fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6200:	1a9b      	subs	r3, r3, r2
    6202:	429d      	cmp	r5, r3
    6204:	dbf0      	blt.n	61e8 <_printf_i+0x1b0>
    6206:	e7e9      	b.n	61dc <_printf_i+0x1a4>
    6208:	2d00      	cmp	r5, #0
    620a:	d0a9      	beq.n	6160 <_printf_i+0x128>
    620c:	9e04      	ldr	r6, [sp, #16]
    620e:	0028      	movs	r0, r5
    6210:	0039      	movs	r1, r7
    6212:	f7ff f90f 	bl	5434 <__aeabi_uidivmod>
    6216:	9b03      	ldr	r3, [sp, #12]
    6218:	3e01      	subs	r6, #1
    621a:	5c5b      	ldrb	r3, [r3, r1]
    621c:	0028      	movs	r0, r5
    621e:	7033      	strb	r3, [r6, #0]
    6220:	0039      	movs	r1, r7
    6222:	f7ff f881 	bl	5328 <__udivsi3>
    6226:	1e05      	subs	r5, r0, #0
    6228:	d1f1      	bne.n	620e <_printf_i+0x1d6>
    622a:	2f08      	cmp	r7, #8
    622c:	d109      	bne.n	6242 <_printf_i+0x20a>
    622e:	6823      	ldr	r3, [r4, #0]
    6230:	07db      	lsls	r3, r3, #31
    6232:	d506      	bpl.n	6242 <_printf_i+0x20a>
    6234:	6863      	ldr	r3, [r4, #4]
    6236:	6922      	ldr	r2, [r4, #16]
    6238:	4293      	cmp	r3, r2
    623a:	dc02      	bgt.n	6242 <_printf_i+0x20a>
    623c:	2330      	movs	r3, #48	; 0x30
    623e:	3e01      	subs	r6, #1
    6240:	7033      	strb	r3, [r6, #0]
    6242:	9b04      	ldr	r3, [sp, #16]
    6244:	1b9b      	subs	r3, r3, r6
    6246:	6123      	str	r3, [r4, #16]
    6248:	9b07      	ldr	r3, [sp, #28]
    624a:	aa09      	add	r2, sp, #36	; 0x24
    624c:	9300      	str	r3, [sp, #0]
    624e:	0021      	movs	r1, r4
    6250:	9b06      	ldr	r3, [sp, #24]
    6252:	9805      	ldr	r0, [sp, #20]
    6254:	f7ff fe82 	bl	5f5c <_printf_common>
    6258:	1c43      	adds	r3, r0, #1
    625a:	d1b3      	bne.n	61c4 <_printf_i+0x18c>
    625c:	2001      	movs	r0, #1
    625e:	4240      	negs	r0, r0
    6260:	b00b      	add	sp, #44	; 0x2c
    6262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6264:	0000766e 	.word	0x0000766e
    6268:	0000765d 	.word	0x0000765d

0000626c <_scanf_chars>:
    626c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    626e:	0015      	movs	r5, r2
    6270:	688a      	ldr	r2, [r1, #8]
    6272:	9001      	str	r0, [sp, #4]
    6274:	000c      	movs	r4, r1
    6276:	2a00      	cmp	r2, #0
    6278:	d106      	bne.n	6288 <_scanf_chars+0x1c>
    627a:	698a      	ldr	r2, [r1, #24]
    627c:	1e51      	subs	r1, r2, #1
    627e:	418a      	sbcs	r2, r1
    6280:	2101      	movs	r1, #1
    6282:	4252      	negs	r2, r2
    6284:	430a      	orrs	r2, r1
    6286:	60a2      	str	r2, [r4, #8]
    6288:	6822      	ldr	r2, [r4, #0]
    628a:	06d2      	lsls	r2, r2, #27
    628c:	d403      	bmi.n	6296 <_scanf_chars+0x2a>
    628e:	681a      	ldr	r2, [r3, #0]
    6290:	1d11      	adds	r1, r2, #4
    6292:	6019      	str	r1, [r3, #0]
    6294:	6817      	ldr	r7, [r2, #0]
    6296:	2600      	movs	r6, #0
    6298:	69a3      	ldr	r3, [r4, #24]
    629a:	2b00      	cmp	r3, #0
    629c:	d01c      	beq.n	62d8 <_scanf_chars+0x6c>
    629e:	2b01      	cmp	r3, #1
    62a0:	d108      	bne.n	62b4 <_scanf_chars+0x48>
    62a2:	682b      	ldr	r3, [r5, #0]
    62a4:	6962      	ldr	r2, [r4, #20]
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	5cd3      	ldrb	r3, [r2, r3]
    62aa:	2b00      	cmp	r3, #0
    62ac:	d114      	bne.n	62d8 <_scanf_chars+0x6c>
    62ae:	2e00      	cmp	r6, #0
    62b0:	d130      	bne.n	6314 <_scanf_chars+0xa8>
    62b2:	e006      	b.n	62c2 <_scanf_chars+0x56>
    62b4:	2b02      	cmp	r3, #2
    62b6:	d006      	beq.n	62c6 <_scanf_chars+0x5a>
    62b8:	2e00      	cmp	r6, #0
    62ba:	d12b      	bne.n	6314 <_scanf_chars+0xa8>
    62bc:	69a3      	ldr	r3, [r4, #24]
    62be:	2b01      	cmp	r3, #1
    62c0:	d128      	bne.n	6314 <_scanf_chars+0xa8>
    62c2:	2001      	movs	r0, #1
    62c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    62c6:	f000 fad7 	bl	6878 <__locale_ctype_ptr>
    62ca:	2208      	movs	r2, #8
    62cc:	682b      	ldr	r3, [r5, #0]
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	18c0      	adds	r0, r0, r3
    62d2:	7843      	ldrb	r3, [r0, #1]
    62d4:	4213      	tst	r3, r2
    62d6:	d1ef      	bne.n	62b8 <_scanf_chars+0x4c>
    62d8:	2210      	movs	r2, #16
    62da:	6823      	ldr	r3, [r4, #0]
    62dc:	3601      	adds	r6, #1
    62de:	4213      	tst	r3, r2
    62e0:	d103      	bne.n	62ea <_scanf_chars+0x7e>
    62e2:	682b      	ldr	r3, [r5, #0]
    62e4:	781b      	ldrb	r3, [r3, #0]
    62e6:	703b      	strb	r3, [r7, #0]
    62e8:	3701      	adds	r7, #1
    62ea:	682a      	ldr	r2, [r5, #0]
    62ec:	686b      	ldr	r3, [r5, #4]
    62ee:	3201      	adds	r2, #1
    62f0:	602a      	str	r2, [r5, #0]
    62f2:	68a2      	ldr	r2, [r4, #8]
    62f4:	3b01      	subs	r3, #1
    62f6:	3a01      	subs	r2, #1
    62f8:	606b      	str	r3, [r5, #4]
    62fa:	60a2      	str	r2, [r4, #8]
    62fc:	2a00      	cmp	r2, #0
    62fe:	d009      	beq.n	6314 <_scanf_chars+0xa8>
    6300:	2b00      	cmp	r3, #0
    6302:	dcc9      	bgt.n	6298 <_scanf_chars+0x2c>
    6304:	23c0      	movs	r3, #192	; 0xc0
    6306:	005b      	lsls	r3, r3, #1
    6308:	58e3      	ldr	r3, [r4, r3]
    630a:	0029      	movs	r1, r5
    630c:	9801      	ldr	r0, [sp, #4]
    630e:	4798      	blx	r3
    6310:	2800      	cmp	r0, #0
    6312:	d0c1      	beq.n	6298 <_scanf_chars+0x2c>
    6314:	2310      	movs	r3, #16
    6316:	6822      	ldr	r2, [r4, #0]
    6318:	4013      	ands	r3, r2
    631a:	d106      	bne.n	632a <_scanf_chars+0xbe>
    631c:	68e2      	ldr	r2, [r4, #12]
    631e:	3201      	adds	r2, #1
    6320:	60e2      	str	r2, [r4, #12]
    6322:	69a2      	ldr	r2, [r4, #24]
    6324:	2a00      	cmp	r2, #0
    6326:	d000      	beq.n	632a <_scanf_chars+0xbe>
    6328:	703b      	strb	r3, [r7, #0]
    632a:	6923      	ldr	r3, [r4, #16]
    632c:	2000      	movs	r0, #0
    632e:	199e      	adds	r6, r3, r6
    6330:	6126      	str	r6, [r4, #16]
    6332:	e7c7      	b.n	62c4 <_scanf_chars+0x58>

00006334 <_scanf_i>:
    6334:	b5f0      	push	{r4, r5, r6, r7, lr}
    6336:	000c      	movs	r4, r1
    6338:	b08d      	sub	sp, #52	; 0x34
    633a:	9302      	str	r3, [sp, #8]
    633c:	4b77      	ldr	r3, [pc, #476]	; (651c <_scanf_i+0x1e8>)
    633e:	9005      	str	r0, [sp, #20]
    6340:	0016      	movs	r6, r2
    6342:	aa09      	add	r2, sp, #36	; 0x24
    6344:	cb23      	ldmia	r3!, {r0, r1, r5}
    6346:	c223      	stmia	r2!, {r0, r1, r5}
    6348:	4b75      	ldr	r3, [pc, #468]	; (6520 <_scanf_i+0x1ec>)
    634a:	9306      	str	r3, [sp, #24]
    634c:	69a3      	ldr	r3, [r4, #24]
    634e:	2b03      	cmp	r3, #3
    6350:	d001      	beq.n	6356 <_scanf_i+0x22>
    6352:	4b74      	ldr	r3, [pc, #464]	; (6524 <_scanf_i+0x1f0>)
    6354:	9306      	str	r3, [sp, #24]
    6356:	22ae      	movs	r2, #174	; 0xae
    6358:	2000      	movs	r0, #0
    635a:	68a3      	ldr	r3, [r4, #8]
    635c:	0052      	lsls	r2, r2, #1
    635e:	1e59      	subs	r1, r3, #1
    6360:	9004      	str	r0, [sp, #16]
    6362:	4291      	cmp	r1, r2
    6364:	d905      	bls.n	6372 <_scanf_i+0x3e>
    6366:	3b5e      	subs	r3, #94	; 0x5e
    6368:	3bff      	subs	r3, #255	; 0xff
    636a:	9304      	str	r3, [sp, #16]
    636c:	235e      	movs	r3, #94	; 0x5e
    636e:	33ff      	adds	r3, #255	; 0xff
    6370:	60a3      	str	r3, [r4, #8]
    6372:	0023      	movs	r3, r4
    6374:	331c      	adds	r3, #28
    6376:	9301      	str	r3, [sp, #4]
    6378:	23d0      	movs	r3, #208	; 0xd0
    637a:	2700      	movs	r7, #0
    637c:	6822      	ldr	r2, [r4, #0]
    637e:	011b      	lsls	r3, r3, #4
    6380:	4313      	orrs	r3, r2
    6382:	6023      	str	r3, [r4, #0]
    6384:	9b01      	ldr	r3, [sp, #4]
    6386:	9303      	str	r3, [sp, #12]
    6388:	6833      	ldr	r3, [r6, #0]
    638a:	a809      	add	r0, sp, #36	; 0x24
    638c:	7819      	ldrb	r1, [r3, #0]
    638e:	00bb      	lsls	r3, r7, #2
    6390:	2202      	movs	r2, #2
    6392:	5818      	ldr	r0, [r3, r0]
    6394:	f000 fa90 	bl	68b8 <memchr>
    6398:	2800      	cmp	r0, #0
    639a:	d02b      	beq.n	63f4 <_scanf_i+0xc0>
    639c:	2f01      	cmp	r7, #1
    639e:	d15f      	bne.n	6460 <_scanf_i+0x12c>
    63a0:	6863      	ldr	r3, [r4, #4]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d106      	bne.n	63b4 <_scanf_i+0x80>
    63a6:	3308      	adds	r3, #8
    63a8:	6822      	ldr	r2, [r4, #0]
    63aa:	6063      	str	r3, [r4, #4]
    63ac:	33f9      	adds	r3, #249	; 0xf9
    63ae:	33ff      	adds	r3, #255	; 0xff
    63b0:	4313      	orrs	r3, r2
    63b2:	6023      	str	r3, [r4, #0]
    63b4:	4b5c      	ldr	r3, [pc, #368]	; (6528 <_scanf_i+0x1f4>)
    63b6:	6822      	ldr	r2, [r4, #0]
    63b8:	4013      	ands	r3, r2
    63ba:	6023      	str	r3, [r4, #0]
    63bc:	68a3      	ldr	r3, [r4, #8]
    63be:	1e5a      	subs	r2, r3, #1
    63c0:	60a2      	str	r2, [r4, #8]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d016      	beq.n	63f4 <_scanf_i+0xc0>
    63c6:	9b03      	ldr	r3, [sp, #12]
    63c8:	1c5d      	adds	r5, r3, #1
    63ca:	6833      	ldr	r3, [r6, #0]
    63cc:	1c5a      	adds	r2, r3, #1
    63ce:	6032      	str	r2, [r6, #0]
    63d0:	781b      	ldrb	r3, [r3, #0]
    63d2:	9a03      	ldr	r2, [sp, #12]
    63d4:	9503      	str	r5, [sp, #12]
    63d6:	7013      	strb	r3, [r2, #0]
    63d8:	6873      	ldr	r3, [r6, #4]
    63da:	3b01      	subs	r3, #1
    63dc:	6073      	str	r3, [r6, #4]
    63de:	2b00      	cmp	r3, #0
    63e0:	dc08      	bgt.n	63f4 <_scanf_i+0xc0>
    63e2:	23c0      	movs	r3, #192	; 0xc0
    63e4:	005b      	lsls	r3, r3, #1
    63e6:	58e3      	ldr	r3, [r4, r3]
    63e8:	0031      	movs	r1, r6
    63ea:	9805      	ldr	r0, [sp, #20]
    63ec:	9307      	str	r3, [sp, #28]
    63ee:	4798      	blx	r3
    63f0:	2800      	cmp	r0, #0
    63f2:	d17d      	bne.n	64f0 <_scanf_i+0x1bc>
    63f4:	3701      	adds	r7, #1
    63f6:	2f03      	cmp	r7, #3
    63f8:	d1c6      	bne.n	6388 <_scanf_i+0x54>
    63fa:	6863      	ldr	r3, [r4, #4]
    63fc:	2b00      	cmp	r3, #0
    63fe:	d101      	bne.n	6404 <_scanf_i+0xd0>
    6400:	330a      	adds	r3, #10
    6402:	6063      	str	r3, [r4, #4]
    6404:	2110      	movs	r1, #16
    6406:	2700      	movs	r7, #0
    6408:	6863      	ldr	r3, [r4, #4]
    640a:	6960      	ldr	r0, [r4, #20]
    640c:	1ac9      	subs	r1, r1, r3
    640e:	4b47      	ldr	r3, [pc, #284]	; (652c <_scanf_i+0x1f8>)
    6410:	18c9      	adds	r1, r1, r3
    6412:	f000 f88f 	bl	6534 <__sccl>
    6416:	9d03      	ldr	r5, [sp, #12]
    6418:	68a3      	ldr	r3, [r4, #8]
    641a:	2b00      	cmp	r3, #0
    641c:	d041      	beq.n	64a2 <_scanf_i+0x16e>
    641e:	6832      	ldr	r2, [r6, #0]
    6420:	6960      	ldr	r0, [r4, #20]
    6422:	7811      	ldrb	r1, [r2, #0]
    6424:	5c40      	ldrb	r0, [r0, r1]
    6426:	2800      	cmp	r0, #0
    6428:	d03b      	beq.n	64a2 <_scanf_i+0x16e>
    642a:	2930      	cmp	r1, #48	; 0x30
    642c:	d128      	bne.n	6480 <_scanf_i+0x14c>
    642e:	2080      	movs	r0, #128	; 0x80
    6430:	6821      	ldr	r1, [r4, #0]
    6432:	0100      	lsls	r0, r0, #4
    6434:	4201      	tst	r1, r0
    6436:	d023      	beq.n	6480 <_scanf_i+0x14c>
    6438:	9a04      	ldr	r2, [sp, #16]
    643a:	3701      	adds	r7, #1
    643c:	2a00      	cmp	r2, #0
    643e:	d003      	beq.n	6448 <_scanf_i+0x114>
    6440:	3a01      	subs	r2, #1
    6442:	3301      	adds	r3, #1
    6444:	9204      	str	r2, [sp, #16]
    6446:	60a3      	str	r3, [r4, #8]
    6448:	6873      	ldr	r3, [r6, #4]
    644a:	3b01      	subs	r3, #1
    644c:	6073      	str	r3, [r6, #4]
    644e:	2b00      	cmp	r3, #0
    6450:	dd1e      	ble.n	6490 <_scanf_i+0x15c>
    6452:	6833      	ldr	r3, [r6, #0]
    6454:	3301      	adds	r3, #1
    6456:	6033      	str	r3, [r6, #0]
    6458:	68a3      	ldr	r3, [r4, #8]
    645a:	3b01      	subs	r3, #1
    645c:	60a3      	str	r3, [r4, #8]
    645e:	e7db      	b.n	6418 <_scanf_i+0xe4>
    6460:	2f02      	cmp	r7, #2
    6462:	d1ab      	bne.n	63bc <_scanf_i+0x88>
    6464:	21c0      	movs	r1, #192	; 0xc0
    6466:	2380      	movs	r3, #128	; 0x80
    6468:	6822      	ldr	r2, [r4, #0]
    646a:	00c9      	lsls	r1, r1, #3
    646c:	4011      	ands	r1, r2
    646e:	009b      	lsls	r3, r3, #2
    6470:	4299      	cmp	r1, r3
    6472:	d1c2      	bne.n	63fa <_scanf_i+0xc6>
    6474:	3bf1      	subs	r3, #241	; 0xf1
    6476:	3bff      	subs	r3, #255	; 0xff
    6478:	6063      	str	r3, [r4, #4]
    647a:	33f0      	adds	r3, #240	; 0xf0
    647c:	4313      	orrs	r3, r2
    647e:	e79c      	b.n	63ba <_scanf_i+0x86>
    6480:	6821      	ldr	r1, [r4, #0]
    6482:	4b2b      	ldr	r3, [pc, #172]	; (6530 <_scanf_i+0x1fc>)
    6484:	400b      	ands	r3, r1
    6486:	6023      	str	r3, [r4, #0]
    6488:	7813      	ldrb	r3, [r2, #0]
    648a:	702b      	strb	r3, [r5, #0]
    648c:	3501      	adds	r5, #1
    648e:	e7db      	b.n	6448 <_scanf_i+0x114>
    6490:	23c0      	movs	r3, #192	; 0xc0
    6492:	005b      	lsls	r3, r3, #1
    6494:	58e3      	ldr	r3, [r4, r3]
    6496:	0031      	movs	r1, r6
    6498:	9805      	ldr	r0, [sp, #20]
    649a:	9303      	str	r3, [sp, #12]
    649c:	4798      	blx	r3
    649e:	2800      	cmp	r0, #0
    64a0:	d0da      	beq.n	6458 <_scanf_i+0x124>
    64a2:	6823      	ldr	r3, [r4, #0]
    64a4:	05db      	lsls	r3, r3, #23
    64a6:	d50e      	bpl.n	64c6 <_scanf_i+0x192>
    64a8:	9b01      	ldr	r3, [sp, #4]
    64aa:	429d      	cmp	r5, r3
    64ac:	d907      	bls.n	64be <_scanf_i+0x18a>
    64ae:	23be      	movs	r3, #190	; 0xbe
    64b0:	3d01      	subs	r5, #1
    64b2:	005b      	lsls	r3, r3, #1
    64b4:	7829      	ldrb	r1, [r5, #0]
    64b6:	58e3      	ldr	r3, [r4, r3]
    64b8:	0032      	movs	r2, r6
    64ba:	9805      	ldr	r0, [sp, #20]
    64bc:	4798      	blx	r3
    64be:	9b01      	ldr	r3, [sp, #4]
    64c0:	2001      	movs	r0, #1
    64c2:	429d      	cmp	r5, r3
    64c4:	d027      	beq.n	6516 <_scanf_i+0x1e2>
    64c6:	2210      	movs	r2, #16
    64c8:	6823      	ldr	r3, [r4, #0]
    64ca:	401a      	ands	r2, r3
    64cc:	d11c      	bne.n	6508 <_scanf_i+0x1d4>
    64ce:	702a      	strb	r2, [r5, #0]
    64d0:	6863      	ldr	r3, [r4, #4]
    64d2:	9901      	ldr	r1, [sp, #4]
    64d4:	9805      	ldr	r0, [sp, #20]
    64d6:	9e06      	ldr	r6, [sp, #24]
    64d8:	47b0      	blx	r6
    64da:	9b02      	ldr	r3, [sp, #8]
    64dc:	6822      	ldr	r2, [r4, #0]
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	0691      	lsls	r1, r2, #26
    64e2:	d507      	bpl.n	64f4 <_scanf_i+0x1c0>
    64e4:	9902      	ldr	r1, [sp, #8]
    64e6:	1d1a      	adds	r2, r3, #4
    64e8:	600a      	str	r2, [r1, #0]
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	6018      	str	r0, [r3, #0]
    64ee:	e008      	b.n	6502 <_scanf_i+0x1ce>
    64f0:	2700      	movs	r7, #0
    64f2:	e7d6      	b.n	64a2 <_scanf_i+0x16e>
    64f4:	07d1      	lsls	r1, r2, #31
    64f6:	d5f5      	bpl.n	64e4 <_scanf_i+0x1b0>
    64f8:	9902      	ldr	r1, [sp, #8]
    64fa:	1d1a      	adds	r2, r3, #4
    64fc:	600a      	str	r2, [r1, #0]
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	8018      	strh	r0, [r3, #0]
    6502:	68e3      	ldr	r3, [r4, #12]
    6504:	3301      	adds	r3, #1
    6506:	60e3      	str	r3, [r4, #12]
    6508:	2000      	movs	r0, #0
    650a:	9b01      	ldr	r3, [sp, #4]
    650c:	1aed      	subs	r5, r5, r3
    650e:	6923      	ldr	r3, [r4, #16]
    6510:	19ef      	adds	r7, r5, r7
    6512:	19df      	adds	r7, r3, r7
    6514:	6127      	str	r7, [r4, #16]
    6516:	b00d      	add	sp, #52	; 0x34
    6518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    651a:	46c0      	nop			; (mov r8, r8)
    651c:	00007680 	.word	0x00007680
    6520:	000066a5 	.word	0x000066a5
    6524:	000067d5 	.word	0x000067d5
    6528:	fffffaff 	.word	0xfffffaff
    652c:	0000768c 	.word	0x0000768c
    6530:	fffff6ff 	.word	0xfffff6ff

00006534 <__sccl>:
    6534:	b570      	push	{r4, r5, r6, lr}
    6536:	780b      	ldrb	r3, [r1, #0]
    6538:	2b5e      	cmp	r3, #94	; 0x5e
    653a:	d00d      	beq.n	6558 <__sccl+0x24>
    653c:	1c4a      	adds	r2, r1, #1
    653e:	2100      	movs	r1, #0
    6540:	0004      	movs	r4, r0
    6542:	1c45      	adds	r5, r0, #1
    6544:	35ff      	adds	r5, #255	; 0xff
    6546:	7021      	strb	r1, [r4, #0]
    6548:	3401      	adds	r4, #1
    654a:	42a5      	cmp	r5, r4
    654c:	d1fb      	bne.n	6546 <__sccl+0x12>
    654e:	2b00      	cmp	r3, #0
    6550:	d106      	bne.n	6560 <__sccl+0x2c>
    6552:	3a01      	subs	r2, #1
    6554:	0010      	movs	r0, r2
    6556:	bd70      	pop	{r4, r5, r6, pc}
    6558:	1c8a      	adds	r2, r1, #2
    655a:	784b      	ldrb	r3, [r1, #1]
    655c:	2101      	movs	r1, #1
    655e:	e7ef      	b.n	6540 <__sccl+0xc>
    6560:	2401      	movs	r4, #1
    6562:	404c      	eors	r4, r1
    6564:	0011      	movs	r1, r2
    6566:	54c4      	strb	r4, [r0, r3]
    6568:	780d      	ldrb	r5, [r1, #0]
    656a:	1c4a      	adds	r2, r1, #1
    656c:	2d2d      	cmp	r5, #45	; 0x2d
    656e:	d007      	beq.n	6580 <__sccl+0x4c>
    6570:	2d5d      	cmp	r5, #93	; 0x5d
    6572:	d0ef      	beq.n	6554 <__sccl+0x20>
    6574:	2d00      	cmp	r5, #0
    6576:	d101      	bne.n	657c <__sccl+0x48>
    6578:	000a      	movs	r2, r1
    657a:	e7eb      	b.n	6554 <__sccl+0x20>
    657c:	002b      	movs	r3, r5
    657e:	e7f1      	b.n	6564 <__sccl+0x30>
    6580:	784e      	ldrb	r6, [r1, #1]
    6582:	2e5d      	cmp	r6, #93	; 0x5d
    6584:	d0fa      	beq.n	657c <__sccl+0x48>
    6586:	42b3      	cmp	r3, r6
    6588:	dcf8      	bgt.n	657c <__sccl+0x48>
    658a:	3102      	adds	r1, #2
    658c:	3301      	adds	r3, #1
    658e:	54c4      	strb	r4, [r0, r3]
    6590:	429e      	cmp	r6, r3
    6592:	dcfb      	bgt.n	658c <__sccl+0x58>
    6594:	e7e8      	b.n	6568 <__sccl+0x34>
	...

00006598 <_strtol_l.isra.0>:
    6598:	b5f0      	push	{r4, r5, r6, r7, lr}
    659a:	001f      	movs	r7, r3
    659c:	000e      	movs	r6, r1
    659e:	b087      	sub	sp, #28
    65a0:	9005      	str	r0, [sp, #20]
    65a2:	9103      	str	r1, [sp, #12]
    65a4:	9202      	str	r2, [sp, #8]
    65a6:	980c      	ldr	r0, [sp, #48]	; 0x30
    65a8:	7834      	ldrb	r4, [r6, #0]
    65aa:	f000 f961 	bl	6870 <__locale_ctype_ptr_l>
    65ae:	2208      	movs	r2, #8
    65b0:	1900      	adds	r0, r0, r4
    65b2:	7843      	ldrb	r3, [r0, #1]
    65b4:	1c75      	adds	r5, r6, #1
    65b6:	4013      	ands	r3, r2
    65b8:	d10c      	bne.n	65d4 <_strtol_l.isra.0+0x3c>
    65ba:	2c2d      	cmp	r4, #45	; 0x2d
    65bc:	d10c      	bne.n	65d8 <_strtol_l.isra.0+0x40>
    65be:	3301      	adds	r3, #1
    65c0:	782c      	ldrb	r4, [r5, #0]
    65c2:	9301      	str	r3, [sp, #4]
    65c4:	1cb5      	adds	r5, r6, #2
    65c6:	2f00      	cmp	r7, #0
    65c8:	d00c      	beq.n	65e4 <_strtol_l.isra.0+0x4c>
    65ca:	2f10      	cmp	r7, #16
    65cc:	d114      	bne.n	65f8 <_strtol_l.isra.0+0x60>
    65ce:	2c30      	cmp	r4, #48	; 0x30
    65d0:	d00a      	beq.n	65e8 <_strtol_l.isra.0+0x50>
    65d2:	e011      	b.n	65f8 <_strtol_l.isra.0+0x60>
    65d4:	002e      	movs	r6, r5
    65d6:	e7e6      	b.n	65a6 <_strtol_l.isra.0+0xe>
    65d8:	9301      	str	r3, [sp, #4]
    65da:	2c2b      	cmp	r4, #43	; 0x2b
    65dc:	d1f3      	bne.n	65c6 <_strtol_l.isra.0+0x2e>
    65de:	782c      	ldrb	r4, [r5, #0]
    65e0:	1cb5      	adds	r5, r6, #2
    65e2:	e7f0      	b.n	65c6 <_strtol_l.isra.0+0x2e>
    65e4:	2c30      	cmp	r4, #48	; 0x30
    65e6:	d12f      	bne.n	6648 <_strtol_l.isra.0+0xb0>
    65e8:	2220      	movs	r2, #32
    65ea:	782b      	ldrb	r3, [r5, #0]
    65ec:	4393      	bics	r3, r2
    65ee:	2b58      	cmp	r3, #88	; 0x58
    65f0:	d151      	bne.n	6696 <_strtol_l.isra.0+0xfe>
    65f2:	2710      	movs	r7, #16
    65f4:	786c      	ldrb	r4, [r5, #1]
    65f6:	3502      	adds	r5, #2
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	4a29      	ldr	r2, [pc, #164]	; (66a0 <_strtol_l.isra.0+0x108>)
    65fc:	0039      	movs	r1, r7
    65fe:	189e      	adds	r6, r3, r2
    6600:	0030      	movs	r0, r6
    6602:	f7fe ff17 	bl	5434 <__aeabi_uidivmod>
    6606:	0030      	movs	r0, r6
    6608:	9104      	str	r1, [sp, #16]
    660a:	0039      	movs	r1, r7
    660c:	f7fe fe8c 	bl	5328 <__udivsi3>
    6610:	2101      	movs	r1, #1
    6612:	2300      	movs	r3, #0
    6614:	4249      	negs	r1, r1
    6616:	0002      	movs	r2, r0
    6618:	468c      	mov	ip, r1
    661a:	0018      	movs	r0, r3
    661c:	0021      	movs	r1, r4
    661e:	3930      	subs	r1, #48	; 0x30
    6620:	2909      	cmp	r1, #9
    6622:	d813      	bhi.n	664c <_strtol_l.isra.0+0xb4>
    6624:	000c      	movs	r4, r1
    6626:	42a7      	cmp	r7, r4
    6628:	dd1c      	ble.n	6664 <_strtol_l.isra.0+0xcc>
    662a:	1c59      	adds	r1, r3, #1
    662c:	d009      	beq.n	6642 <_strtol_l.isra.0+0xaa>
    662e:	4663      	mov	r3, ip
    6630:	4282      	cmp	r2, r0
    6632:	d306      	bcc.n	6642 <_strtol_l.isra.0+0xaa>
    6634:	d102      	bne.n	663c <_strtol_l.isra.0+0xa4>
    6636:	9904      	ldr	r1, [sp, #16]
    6638:	42a1      	cmp	r1, r4
    663a:	db02      	blt.n	6642 <_strtol_l.isra.0+0xaa>
    663c:	2301      	movs	r3, #1
    663e:	4378      	muls	r0, r7
    6640:	1820      	adds	r0, r4, r0
    6642:	782c      	ldrb	r4, [r5, #0]
    6644:	3501      	adds	r5, #1
    6646:	e7e9      	b.n	661c <_strtol_l.isra.0+0x84>
    6648:	270a      	movs	r7, #10
    664a:	e7d5      	b.n	65f8 <_strtol_l.isra.0+0x60>
    664c:	0021      	movs	r1, r4
    664e:	3941      	subs	r1, #65	; 0x41
    6650:	2919      	cmp	r1, #25
    6652:	d801      	bhi.n	6658 <_strtol_l.isra.0+0xc0>
    6654:	3c37      	subs	r4, #55	; 0x37
    6656:	e7e6      	b.n	6626 <_strtol_l.isra.0+0x8e>
    6658:	0021      	movs	r1, r4
    665a:	3961      	subs	r1, #97	; 0x61
    665c:	2919      	cmp	r1, #25
    665e:	d801      	bhi.n	6664 <_strtol_l.isra.0+0xcc>
    6660:	3c57      	subs	r4, #87	; 0x57
    6662:	e7e0      	b.n	6626 <_strtol_l.isra.0+0x8e>
    6664:	1c5a      	adds	r2, r3, #1
    6666:	d108      	bne.n	667a <_strtol_l.isra.0+0xe2>
    6668:	9a05      	ldr	r2, [sp, #20]
    666a:	3323      	adds	r3, #35	; 0x23
    666c:	6013      	str	r3, [r2, #0]
    666e:	9b02      	ldr	r3, [sp, #8]
    6670:	0030      	movs	r0, r6
    6672:	2b00      	cmp	r3, #0
    6674:	d10b      	bne.n	668e <_strtol_l.isra.0+0xf6>
    6676:	b007      	add	sp, #28
    6678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    667a:	9a01      	ldr	r2, [sp, #4]
    667c:	2a00      	cmp	r2, #0
    667e:	d000      	beq.n	6682 <_strtol_l.isra.0+0xea>
    6680:	4240      	negs	r0, r0
    6682:	9a02      	ldr	r2, [sp, #8]
    6684:	2a00      	cmp	r2, #0
    6686:	d0f6      	beq.n	6676 <_strtol_l.isra.0+0xde>
    6688:	9a03      	ldr	r2, [sp, #12]
    668a:	2b00      	cmp	r3, #0
    668c:	d000      	beq.n	6690 <_strtol_l.isra.0+0xf8>
    668e:	1e6a      	subs	r2, r5, #1
    6690:	9b02      	ldr	r3, [sp, #8]
    6692:	601a      	str	r2, [r3, #0]
    6694:	e7ef      	b.n	6676 <_strtol_l.isra.0+0xde>
    6696:	2430      	movs	r4, #48	; 0x30
    6698:	2f00      	cmp	r7, #0
    669a:	d1ad      	bne.n	65f8 <_strtol_l.isra.0+0x60>
    669c:	3708      	adds	r7, #8
    669e:	e7ab      	b.n	65f8 <_strtol_l.isra.0+0x60>
    66a0:	7fffffff 	.word	0x7fffffff

000066a4 <_strtol_r>:
    66a4:	b513      	push	{r0, r1, r4, lr}
    66a6:	4c05      	ldr	r4, [pc, #20]	; (66bc <_strtol_r+0x18>)
    66a8:	6824      	ldr	r4, [r4, #0]
    66aa:	6a24      	ldr	r4, [r4, #32]
    66ac:	2c00      	cmp	r4, #0
    66ae:	d100      	bne.n	66b2 <_strtol_r+0xe>
    66b0:	4c03      	ldr	r4, [pc, #12]	; (66c0 <_strtol_r+0x1c>)
    66b2:	9400      	str	r4, [sp, #0]
    66b4:	f7ff ff70 	bl	6598 <_strtol_l.isra.0>
    66b8:	bd16      	pop	{r1, r2, r4, pc}
    66ba:	46c0      	nop			; (mov r8, r8)
    66bc:	20000044 	.word	0x20000044
    66c0:	200000a8 	.word	0x200000a8

000066c4 <_strtoul_l.isra.0>:
    66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c6:	001f      	movs	r7, r3
    66c8:	000e      	movs	r6, r1
    66ca:	b087      	sub	sp, #28
    66cc:	9005      	str	r0, [sp, #20]
    66ce:	9103      	str	r1, [sp, #12]
    66d0:	9201      	str	r2, [sp, #4]
    66d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    66d4:	7834      	ldrb	r4, [r6, #0]
    66d6:	f000 f8cb 	bl	6870 <__locale_ctype_ptr_l>
    66da:	2208      	movs	r2, #8
    66dc:	1900      	adds	r0, r0, r4
    66de:	7843      	ldrb	r3, [r0, #1]
    66e0:	1c75      	adds	r5, r6, #1
    66e2:	4013      	ands	r3, r2
    66e4:	d10c      	bne.n	6700 <_strtoul_l.isra.0+0x3c>
    66e6:	2c2d      	cmp	r4, #45	; 0x2d
    66e8:	d10c      	bne.n	6704 <_strtoul_l.isra.0+0x40>
    66ea:	3301      	adds	r3, #1
    66ec:	782c      	ldrb	r4, [r5, #0]
    66ee:	9302      	str	r3, [sp, #8]
    66f0:	1cb5      	adds	r5, r6, #2
    66f2:	2f00      	cmp	r7, #0
    66f4:	d00c      	beq.n	6710 <_strtoul_l.isra.0+0x4c>
    66f6:	2f10      	cmp	r7, #16
    66f8:	d114      	bne.n	6724 <_strtoul_l.isra.0+0x60>
    66fa:	2c30      	cmp	r4, #48	; 0x30
    66fc:	d00a      	beq.n	6714 <_strtoul_l.isra.0+0x50>
    66fe:	e011      	b.n	6724 <_strtoul_l.isra.0+0x60>
    6700:	002e      	movs	r6, r5
    6702:	e7e6      	b.n	66d2 <_strtoul_l.isra.0+0xe>
    6704:	9302      	str	r3, [sp, #8]
    6706:	2c2b      	cmp	r4, #43	; 0x2b
    6708:	d1f3      	bne.n	66f2 <_strtoul_l.isra.0+0x2e>
    670a:	782c      	ldrb	r4, [r5, #0]
    670c:	1cb5      	adds	r5, r6, #2
    670e:	e7f0      	b.n	66f2 <_strtoul_l.isra.0+0x2e>
    6710:	2c30      	cmp	r4, #48	; 0x30
    6712:	d12f      	bne.n	6774 <_strtoul_l.isra.0+0xb0>
    6714:	2220      	movs	r2, #32
    6716:	782b      	ldrb	r3, [r5, #0]
    6718:	4393      	bics	r3, r2
    671a:	2b58      	cmp	r3, #88	; 0x58
    671c:	d154      	bne.n	67c8 <_strtoul_l.isra.0+0x104>
    671e:	2710      	movs	r7, #16
    6720:	786c      	ldrb	r4, [r5, #1]
    6722:	3502      	adds	r5, #2
    6724:	2001      	movs	r0, #1
    6726:	0039      	movs	r1, r7
    6728:	4240      	negs	r0, r0
    672a:	f7fe fdfd 	bl	5328 <__udivsi3>
    672e:	0006      	movs	r6, r0
    6730:	2001      	movs	r0, #1
    6732:	0039      	movs	r1, r7
    6734:	4240      	negs	r0, r0
    6736:	f7fe fe7d 	bl	5434 <__aeabi_uidivmod>
    673a:	2300      	movs	r3, #0
    673c:	9104      	str	r1, [sp, #16]
    673e:	2101      	movs	r1, #1
    6740:	2201      	movs	r2, #1
    6742:	0018      	movs	r0, r3
    6744:	468c      	mov	ip, r1
    6746:	4252      	negs	r2, r2
    6748:	0021      	movs	r1, r4
    674a:	3930      	subs	r1, #48	; 0x30
    674c:	2909      	cmp	r1, #9
    674e:	d813      	bhi.n	6778 <_strtoul_l.isra.0+0xb4>
    6750:	000c      	movs	r4, r1
    6752:	42a7      	cmp	r7, r4
    6754:	dd1e      	ble.n	6794 <_strtoul_l.isra.0+0xd0>
    6756:	2b00      	cmp	r3, #0
    6758:	db1a      	blt.n	6790 <_strtoul_l.isra.0+0xcc>
    675a:	0013      	movs	r3, r2
    675c:	4286      	cmp	r6, r0
    675e:	d306      	bcc.n	676e <_strtoul_l.isra.0+0xaa>
    6760:	d102      	bne.n	6768 <_strtoul_l.isra.0+0xa4>
    6762:	9904      	ldr	r1, [sp, #16]
    6764:	42a1      	cmp	r1, r4
    6766:	db02      	blt.n	676e <_strtoul_l.isra.0+0xaa>
    6768:	4663      	mov	r3, ip
    676a:	4378      	muls	r0, r7
    676c:	1820      	adds	r0, r4, r0
    676e:	782c      	ldrb	r4, [r5, #0]
    6770:	3501      	adds	r5, #1
    6772:	e7e9      	b.n	6748 <_strtoul_l.isra.0+0x84>
    6774:	270a      	movs	r7, #10
    6776:	e7d5      	b.n	6724 <_strtoul_l.isra.0+0x60>
    6778:	0021      	movs	r1, r4
    677a:	3941      	subs	r1, #65	; 0x41
    677c:	2919      	cmp	r1, #25
    677e:	d801      	bhi.n	6784 <_strtoul_l.isra.0+0xc0>
    6780:	3c37      	subs	r4, #55	; 0x37
    6782:	e7e6      	b.n	6752 <_strtoul_l.isra.0+0x8e>
    6784:	0021      	movs	r1, r4
    6786:	3961      	subs	r1, #97	; 0x61
    6788:	2919      	cmp	r1, #25
    678a:	d803      	bhi.n	6794 <_strtoul_l.isra.0+0xd0>
    678c:	3c57      	subs	r4, #87	; 0x57
    678e:	e7e0      	b.n	6752 <_strtoul_l.isra.0+0x8e>
    6790:	0013      	movs	r3, r2
    6792:	e7ec      	b.n	676e <_strtoul_l.isra.0+0xaa>
    6794:	2b00      	cmp	r3, #0
    6796:	da09      	bge.n	67ac <_strtoul_l.isra.0+0xe8>
    6798:	2322      	movs	r3, #34	; 0x22
    679a:	2001      	movs	r0, #1
    679c:	9a05      	ldr	r2, [sp, #20]
    679e:	4240      	negs	r0, r0
    67a0:	6013      	str	r3, [r2, #0]
    67a2:	9b01      	ldr	r3, [sp, #4]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d10b      	bne.n	67c0 <_strtoul_l.isra.0+0xfc>
    67a8:	b007      	add	sp, #28
    67aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67ac:	9a02      	ldr	r2, [sp, #8]
    67ae:	2a00      	cmp	r2, #0
    67b0:	d000      	beq.n	67b4 <_strtoul_l.isra.0+0xf0>
    67b2:	4240      	negs	r0, r0
    67b4:	9a01      	ldr	r2, [sp, #4]
    67b6:	2a00      	cmp	r2, #0
    67b8:	d0f6      	beq.n	67a8 <_strtoul_l.isra.0+0xe4>
    67ba:	9a03      	ldr	r2, [sp, #12]
    67bc:	2b00      	cmp	r3, #0
    67be:	d000      	beq.n	67c2 <_strtoul_l.isra.0+0xfe>
    67c0:	1e6a      	subs	r2, r5, #1
    67c2:	9b01      	ldr	r3, [sp, #4]
    67c4:	601a      	str	r2, [r3, #0]
    67c6:	e7ef      	b.n	67a8 <_strtoul_l.isra.0+0xe4>
    67c8:	2430      	movs	r4, #48	; 0x30
    67ca:	2f00      	cmp	r7, #0
    67cc:	d1aa      	bne.n	6724 <_strtoul_l.isra.0+0x60>
    67ce:	3708      	adds	r7, #8
    67d0:	e7a8      	b.n	6724 <_strtoul_l.isra.0+0x60>
	...

000067d4 <_strtoul_r>:
    67d4:	b513      	push	{r0, r1, r4, lr}
    67d6:	4c05      	ldr	r4, [pc, #20]	; (67ec <_strtoul_r+0x18>)
    67d8:	6824      	ldr	r4, [r4, #0]
    67da:	6a24      	ldr	r4, [r4, #32]
    67dc:	2c00      	cmp	r4, #0
    67de:	d100      	bne.n	67e2 <_strtoul_r+0xe>
    67e0:	4c03      	ldr	r4, [pc, #12]	; (67f0 <_strtoul_r+0x1c>)
    67e2:	9400      	str	r4, [sp, #0]
    67e4:	f7ff ff6e 	bl	66c4 <_strtoul_l.isra.0>
    67e8:	bd16      	pop	{r1, r2, r4, pc}
    67ea:	46c0      	nop			; (mov r8, r8)
    67ec:	20000044 	.word	0x20000044
    67f0:	200000a8 	.word	0x200000a8

000067f4 <__submore>:
    67f4:	000b      	movs	r3, r1
    67f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67f8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    67fa:	3344      	adds	r3, #68	; 0x44
    67fc:	000c      	movs	r4, r1
    67fe:	429d      	cmp	r5, r3
    6800:	d11c      	bne.n	683c <__submore+0x48>
    6802:	2680      	movs	r6, #128	; 0x80
    6804:	00f6      	lsls	r6, r6, #3
    6806:	0031      	movs	r1, r6
    6808:	f7fe ff98 	bl	573c <_malloc_r>
    680c:	2800      	cmp	r0, #0
    680e:	d102      	bne.n	6816 <__submore+0x22>
    6810:	2001      	movs	r0, #1
    6812:	4240      	negs	r0, r0
    6814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6816:	0023      	movs	r3, r4
    6818:	6360      	str	r0, [r4, #52]	; 0x34
    681a:	63a6      	str	r6, [r4, #56]	; 0x38
    681c:	3346      	adds	r3, #70	; 0x46
    681e:	781a      	ldrb	r2, [r3, #0]
    6820:	4b10      	ldr	r3, [pc, #64]	; (6864 <__submore+0x70>)
    6822:	54c2      	strb	r2, [r0, r3]
    6824:	0023      	movs	r3, r4
    6826:	3345      	adds	r3, #69	; 0x45
    6828:	781a      	ldrb	r2, [r3, #0]
    682a:	4b0f      	ldr	r3, [pc, #60]	; (6868 <__submore+0x74>)
    682c:	54c2      	strb	r2, [r0, r3]
    682e:	782a      	ldrb	r2, [r5, #0]
    6830:	4b0e      	ldr	r3, [pc, #56]	; (686c <__submore+0x78>)
    6832:	54c2      	strb	r2, [r0, r3]
    6834:	18c0      	adds	r0, r0, r3
    6836:	6020      	str	r0, [r4, #0]
    6838:	2000      	movs	r0, #0
    683a:	e7eb      	b.n	6814 <__submore+0x20>
    683c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    683e:	0029      	movs	r1, r5
    6840:	0073      	lsls	r3, r6, #1
    6842:	001a      	movs	r2, r3
    6844:	9301      	str	r3, [sp, #4]
    6846:	f000 f854 	bl	68f2 <_realloc_r>
    684a:	1e05      	subs	r5, r0, #0
    684c:	d0e0      	beq.n	6810 <__submore+0x1c>
    684e:	1987      	adds	r7, r0, r6
    6850:	0001      	movs	r1, r0
    6852:	0032      	movs	r2, r6
    6854:	0038      	movs	r0, r7
    6856:	f7fe ff15 	bl	5684 <memcpy>
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	6027      	str	r7, [r4, #0]
    685e:	6365      	str	r5, [r4, #52]	; 0x34
    6860:	63a3      	str	r3, [r4, #56]	; 0x38
    6862:	e7e9      	b.n	6838 <__submore+0x44>
    6864:	000003ff 	.word	0x000003ff
    6868:	000003fe 	.word	0x000003fe
    686c:	000003fd 	.word	0x000003fd

00006870 <__locale_ctype_ptr_l>:
    6870:	30ec      	adds	r0, #236	; 0xec
    6872:	6800      	ldr	r0, [r0, #0]
    6874:	4770      	bx	lr
	...

00006878 <__locale_ctype_ptr>:
    6878:	4b04      	ldr	r3, [pc, #16]	; (688c <__locale_ctype_ptr+0x14>)
    687a:	681b      	ldr	r3, [r3, #0]
    687c:	6a1b      	ldr	r3, [r3, #32]
    687e:	2b00      	cmp	r3, #0
    6880:	d100      	bne.n	6884 <__locale_ctype_ptr+0xc>
    6882:	4b03      	ldr	r3, [pc, #12]	; (6890 <__locale_ctype_ptr+0x18>)
    6884:	33ec      	adds	r3, #236	; 0xec
    6886:	6818      	ldr	r0, [r3, #0]
    6888:	4770      	bx	lr
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	20000044 	.word	0x20000044
    6890:	200000a8 	.word	0x200000a8

00006894 <__ascii_mbtowc>:
    6894:	b082      	sub	sp, #8
    6896:	2900      	cmp	r1, #0
    6898:	d100      	bne.n	689c <__ascii_mbtowc+0x8>
    689a:	a901      	add	r1, sp, #4
    689c:	1e10      	subs	r0, r2, #0
    689e:	d006      	beq.n	68ae <__ascii_mbtowc+0x1a>
    68a0:	2b00      	cmp	r3, #0
    68a2:	d006      	beq.n	68b2 <__ascii_mbtowc+0x1e>
    68a4:	7813      	ldrb	r3, [r2, #0]
    68a6:	600b      	str	r3, [r1, #0]
    68a8:	7810      	ldrb	r0, [r2, #0]
    68aa:	1e43      	subs	r3, r0, #1
    68ac:	4198      	sbcs	r0, r3
    68ae:	b002      	add	sp, #8
    68b0:	4770      	bx	lr
    68b2:	2002      	movs	r0, #2
    68b4:	4240      	negs	r0, r0
    68b6:	e7fa      	b.n	68ae <__ascii_mbtowc+0x1a>

000068b8 <memchr>:
    68b8:	b2c9      	uxtb	r1, r1
    68ba:	1882      	adds	r2, r0, r2
    68bc:	4290      	cmp	r0, r2
    68be:	d101      	bne.n	68c4 <memchr+0xc>
    68c0:	2000      	movs	r0, #0
    68c2:	4770      	bx	lr
    68c4:	7803      	ldrb	r3, [r0, #0]
    68c6:	428b      	cmp	r3, r1
    68c8:	d0fb      	beq.n	68c2 <memchr+0xa>
    68ca:	3001      	adds	r0, #1
    68cc:	e7f6      	b.n	68bc <memchr+0x4>

000068ce <memmove>:
    68ce:	b510      	push	{r4, lr}
    68d0:	4288      	cmp	r0, r1
    68d2:	d902      	bls.n	68da <memmove+0xc>
    68d4:	188b      	adds	r3, r1, r2
    68d6:	4298      	cmp	r0, r3
    68d8:	d308      	bcc.n	68ec <memmove+0x1e>
    68da:	2300      	movs	r3, #0
    68dc:	429a      	cmp	r2, r3
    68de:	d007      	beq.n	68f0 <memmove+0x22>
    68e0:	5ccc      	ldrb	r4, [r1, r3]
    68e2:	54c4      	strb	r4, [r0, r3]
    68e4:	3301      	adds	r3, #1
    68e6:	e7f9      	b.n	68dc <memmove+0xe>
    68e8:	5c8b      	ldrb	r3, [r1, r2]
    68ea:	5483      	strb	r3, [r0, r2]
    68ec:	3a01      	subs	r2, #1
    68ee:	d2fb      	bcs.n	68e8 <memmove+0x1a>
    68f0:	bd10      	pop	{r4, pc}

000068f2 <_realloc_r>:
    68f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68f4:	0007      	movs	r7, r0
    68f6:	000d      	movs	r5, r1
    68f8:	0016      	movs	r6, r2
    68fa:	2900      	cmp	r1, #0
    68fc:	d105      	bne.n	690a <_realloc_r+0x18>
    68fe:	0011      	movs	r1, r2
    6900:	f7fe ff1c 	bl	573c <_malloc_r>
    6904:	0004      	movs	r4, r0
    6906:	0020      	movs	r0, r4
    6908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    690a:	2a00      	cmp	r2, #0
    690c:	d103      	bne.n	6916 <_realloc_r+0x24>
    690e:	f7fe fecb 	bl	56a8 <_free_r>
    6912:	0034      	movs	r4, r6
    6914:	e7f7      	b.n	6906 <_realloc_r+0x14>
    6916:	f000 f81e 	bl	6956 <_malloc_usable_size_r>
    691a:	002c      	movs	r4, r5
    691c:	4286      	cmp	r6, r0
    691e:	d9f2      	bls.n	6906 <_realloc_r+0x14>
    6920:	0031      	movs	r1, r6
    6922:	0038      	movs	r0, r7
    6924:	f7fe ff0a 	bl	573c <_malloc_r>
    6928:	1e04      	subs	r4, r0, #0
    692a:	d0ec      	beq.n	6906 <_realloc_r+0x14>
    692c:	0029      	movs	r1, r5
    692e:	0032      	movs	r2, r6
    6930:	f7fe fea8 	bl	5684 <memcpy>
    6934:	0029      	movs	r1, r5
    6936:	0038      	movs	r0, r7
    6938:	f7fe feb6 	bl	56a8 <_free_r>
    693c:	e7e3      	b.n	6906 <_realloc_r+0x14>

0000693e <__ascii_wctomb>:
    693e:	1e0b      	subs	r3, r1, #0
    6940:	d004      	beq.n	694c <__ascii_wctomb+0xe>
    6942:	2aff      	cmp	r2, #255	; 0xff
    6944:	d904      	bls.n	6950 <__ascii_wctomb+0x12>
    6946:	238a      	movs	r3, #138	; 0x8a
    6948:	6003      	str	r3, [r0, #0]
    694a:	3b8b      	subs	r3, #139	; 0x8b
    694c:	0018      	movs	r0, r3
    694e:	4770      	bx	lr
    6950:	700a      	strb	r2, [r1, #0]
    6952:	2301      	movs	r3, #1
    6954:	e7fa      	b.n	694c <__ascii_wctomb+0xe>

00006956 <_malloc_usable_size_r>:
    6956:	1f0b      	subs	r3, r1, #4
    6958:	681b      	ldr	r3, [r3, #0]
    695a:	1f18      	subs	r0, r3, #4
    695c:	2b00      	cmp	r3, #0
    695e:	da01      	bge.n	6964 <_malloc_usable_size_r+0xe>
    6960:	580b      	ldr	r3, [r1, r0]
    6962:	18c0      	adds	r0, r0, r3
    6964:	4770      	bx	lr
    6966:	0000      	movs	r0, r0
    6968:	0000198c 	.word	0x0000198c
    696c:	0000220c 	.word	0x0000220c
    6970:	0000220c 	.word	0x0000220c
    6974:	0000220c 	.word	0x0000220c
    6978:	0000220c 	.word	0x0000220c
    697c:	0000220c 	.word	0x0000220c
    6980:	0000220c 	.word	0x0000220c
    6984:	0000220c 	.word	0x0000220c
    6988:	0000220c 	.word	0x0000220c
    698c:	0000220c 	.word	0x0000220c
    6990:	0000220c 	.word	0x0000220c
    6994:	0000220c 	.word	0x0000220c
    6998:	0000220c 	.word	0x0000220c
    699c:	0000220c 	.word	0x0000220c
    69a0:	0000220c 	.word	0x0000220c
    69a4:	0000220c 	.word	0x0000220c
    69a8:	0000220c 	.word	0x0000220c
    69ac:	0000220c 	.word	0x0000220c
    69b0:	0000220c 	.word	0x0000220c
    69b4:	0000220c 	.word	0x0000220c
    69b8:	0000220c 	.word	0x0000220c
    69bc:	0000220c 	.word	0x0000220c
    69c0:	0000220c 	.word	0x0000220c
    69c4:	0000220c 	.word	0x0000220c
    69c8:	0000220c 	.word	0x0000220c
    69cc:	0000220c 	.word	0x0000220c
    69d0:	0000220c 	.word	0x0000220c
    69d4:	0000220c 	.word	0x0000220c
    69d8:	0000220c 	.word	0x0000220c
    69dc:	0000220c 	.word	0x0000220c
    69e0:	0000220c 	.word	0x0000220c
    69e4:	0000220c 	.word	0x0000220c
    69e8:	0000220c 	.word	0x0000220c
    69ec:	00001b4a 	.word	0x00001b4a
    69f0:	0000220c 	.word	0x0000220c
    69f4:	00001b56 	.word	0x00001b56
    69f8:	0000220c 	.word	0x0000220c
    69fc:	0000220c 	.word	0x0000220c
    6a00:	0000220c 	.word	0x0000220c
    6a04:	0000220c 	.word	0x0000220c
    6a08:	0000220c 	.word	0x0000220c
    6a0c:	0000220c 	.word	0x0000220c
    6a10:	0000220c 	.word	0x0000220c
    6a14:	0000220c 	.word	0x0000220c
    6a18:	0000220c 	.word	0x0000220c
    6a1c:	0000220c 	.word	0x0000220c
    6a20:	0000220c 	.word	0x0000220c
    6a24:	0000220c 	.word	0x0000220c
    6a28:	0000220c 	.word	0x0000220c
    6a2c:	0000220c 	.word	0x0000220c
    6a30:	00001efc 	.word	0x00001efc
    6a34:	0000220c 	.word	0x0000220c
    6a38:	00001ef0 	.word	0x00001ef0
    6a3c:	00001aa2 	.word	0x00001aa2
    6a40:	0000220c 	.word	0x0000220c
    6a44:	000020e2 	.word	0x000020e2
    6a48:	00001e72 	.word	0x00001e72
    6a4c:	0000220c 	.word	0x0000220c
    6a50:	00001ae2 	.word	0x00001ae2
    6a54:	0000220c 	.word	0x0000220c
    6a58:	0000220c 	.word	0x0000220c
    6a5c:	000019be 	.word	0x000019be
    6a60:	0000220c 	.word	0x0000220c
    6a64:	0000220c 	.word	0x0000220c
    6a68:	00001adc 	.word	0x00001adc
    6a6c:	0000220c 	.word	0x0000220c
    6a70:	00001a9c 	.word	0x00001a9c
    6a74:	0000220c 	.word	0x0000220c
    6a78:	0000220c 	.word	0x0000220c
    6a7c:	0000220c 	.word	0x0000220c
    6a80:	00001c8a 	.word	0x00001c8a
    6a84:	0000220c 	.word	0x0000220c
    6a88:	00001f86 	.word	0x00001f86
    6a8c:	00001c3c 	.word	0x00001c3c
    6a90:	00001fa8 	.word	0x00001fa8
    6a94:	0000220c 	.word	0x0000220c
    6a98:	0000220c 	.word	0x0000220c
    6a9c:	0000220c 	.word	0x0000220c
    6aa0:	00001ddc 	.word	0x00001ddc
    6aa4:	00001e0e 	.word	0x00001e0e
    6aa8:	00001e40 	.word	0x00001e40
    6aac:	00001fcc 	.word	0x00001fcc
    6ab0:	0000220c 	.word	0x0000220c
    6ab4:	0000220c 	.word	0x0000220c
    6ab8:	0000220c 	.word	0x0000220c
    6abc:	0000220c 	.word	0x0000220c
    6ac0:	0000220c 	.word	0x0000220c
    6ac4:	00001b62 	.word	0x00001b62
    6ac8:	0000220c 	.word	0x0000220c
    6acc:	00001b10 	.word	0x00001b10
    6ad0:	0000220c 	.word	0x0000220c
    6ad4:	0000220c 	.word	0x0000220c
    6ad8:	0000220c 	.word	0x0000220c
    6adc:	0000220c 	.word	0x0000220c
    6ae0:	000020ac 	.word	0x000020ac
    6ae4:	000019c6 	.word	0x000019c6
    6ae8:	0000220c 	.word	0x0000220c
    6aec:	0000220c 	.word	0x0000220c
    6af0:	00001abe 	.word	0x00001abe
    6af4:	00001eb2 	.word	0x00001eb2
    6af8:	0000220c 	.word	0x0000220c
    6afc:	00002064 	.word	0x00002064
    6b00:	00001ba2 	.word	0x00001ba2
    6b04:	0000220c 	.word	0x0000220c
    6b08:	00001c14 	.word	0x00001c14
    6b0c:	00001ea6 	.word	0x00001ea6
    6b10:	00002076 	.word	0x00002076
    6b14:	0000220c 	.word	0x0000220c
    6b18:	00001f14 	.word	0x00001f14
    6b1c:	00001aec 	.word	0x00001aec
    6b20:	00001c20 	.word	0x00001c20
    6b24:	0000220c 	.word	0x0000220c
    6b28:	0000220c 	.word	0x0000220c
    6b2c:	0000220c 	.word	0x0000220c
    6b30:	0000220c 	.word	0x0000220c
    6b34:	0000220c 	.word	0x0000220c
    6b38:	00001ab8 	.word	0x00001ab8

00006b3c <flash_addr>:
    6b3c:	00030600                                ....

00006b40 <crc8_table>:
    6b40:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
    6b50:	797e7770 65626b6c 41464f48 5d5a5354     pw~ylkbeHOFATSZ]
    6b60:	e9eee7e0 f5f2fbfc d1d6dfd8 cdcac3c4     ................
    6b70:	999e9790 85828b8c a1a6afa8 bdbab3b4     ................
    6b80:	cec9c0c7 d2d5dcdb f6f1f8ff eaede4e3     ................
    6b90:	beb9b0b7 a2a5acab 8681888f 9a9d9493     ................
    6ba0:	2e292027 32353c3b 1611181f 0a0d0403     ' ).;<52........
    6bb0:	5e595057 42454c4b 6661686f 7a7d7473     WPY^KLEBohafst}z
    6bc0:	80878e89 9c9b9295 b8bfb6b1 a4a3aaad     ................
    6bd0:	f0f7fef9 ecebe2e5 c8cfc6c1 d4d3dadd     ................
    6be0:	60676e69 7c7b7275 585f5651 44434a4d     ing`ur{|QV_XMJCD
    6bf0:	10171e19 0c0b0205 282f2621 34333a3d     ........!&/(=:34
    6c00:	4740494e 5b5c5552 7f787176 63646d6a     NI@GRU\[vqx.jmdc
    6c10:	3730393e 2b2c2522 0f080106 13141d1a     >907"%,+........
    6c20:	a7a0a9ae bbbcb5b2 9f989196 83848d8a     ................
    6c30:	d7d0d9de cbccc5c2 efe8e1e6 f3f4fdfa     ................

00006c40 <nibble_hex>:
    6c40:	33323130 37363534 62613938 66656463     0123456789abcdef
    6c50:	00030000 00020001 00000003 00010002     ................
    6c60:	00000003 00010002 00030000 00020001     ................

00006c70 <aTrellisTransitionInput>:
    6c70:	01000100 01000100                       ........

00006c78 <aTrellisSourceStateLut>:
    6c78:	04000400 05010501 06020602 07030703     ................

00006c88 <aTrellisTransitionOutput>:
    6c88:	00030300 01020201 03000003 02010102     ................
    6c98:	69646942 74636572 616e6f69 614d206c     Bidirectional Ma
    6ca8:	72657473 0000000a 69646942 74636572     ster....Bidirect
    6cb8:	616e6f69 6c53206c 3a657661 61635320     ional Slave: Sca
    6cc8:	6e696e6e 00000a67 69646942 74636572     nning...Bidirect
    6cd8:	616e6f69 6c53206c 3a657661 636f4c20     ional Slave: Loc
    6ce8:	0a64656b 00000000 4d205852 3a65646f     ked.....RX Mode:
    6cf8:	61637320 6e696e6e 00000a67 4d205852      scanning...RX M
    6d08:	3a65646f 636f6c20 0a64656b 00000000     ode: locked.....
    6d18:	4d205854 0a65646f 00000000 74617473     TX Mode.....stat
    6d28:	65637845 6f697470 203d206e 000a6425     Exception = %d..
    6d38:	72617073 73614c6b 746e4974 25203d20     sparkLastInt = %
    6d48:	00000a64 74617473 6b6e694c 74736f4c     d...statLinkLost
    6d58:	25203d20 00000a64 74617473 646e6553      = %d...statSend
    6d68:	6b636150 20737465 6425203d 0000000a     Packets = %d....
    6d78:	74617473 65636552 64657669 6b636150     statReceivedPack
    6d88:	20737465 6425203d 0000000a 74617473     ets = %d....stat
    6d98:	7373694d 50676e69 656b6361 3d207374     MissingPackets =
    6da8:	0a642520 00000000 74617473 456d754e      %d.....statNumE
    6db8:	726f7272 203d2073 000a6425 50203e3d     rrors = %d..=> P
    6dc8:	3d205245 69203120 6425206e 0000000a     ER = 1 in %d....
    6dd8:	42203e3d 3d205245 69203120 6425206e     => BER = 1 in %d
    6de8:	0000000a 72652030 73726f72 6425203a     ....0 errors: %d
    6df8:	63617020 7374656b 64252820 0a292525      packets (%d%%).
    6e08:	00000000 72652032 73726f72 6425203a     ....2 errors: %d
    6e18:	63617020 7374656b 64252820 0a292525      packets (%d%%).
    6e28:	00000000 20342d33 6f727265 203a7372     ....3-4 errors: 
    6e38:	70206425 656b6361 28207374 25256425     %d packets (%d%%
    6e48:	00000a29 20382d35 6f727265 203a7372     )...5-8 errors: 
    6e58:	70206425 656b6361 28207374 25256425     %d packets (%d%%
    6e68:	00000a29 35312d39 72726520 3a73726f     )...9-15 errors:
    6e78:	20642520 6b636170 20737465 25642528      %d packets (%d%
    6e88:	000a2925 332d3631 72652031 73726f72     %)..16-31 errors
    6e98:	6425203a 63617020 7374656b 64252820     : %d packets (%d
    6ea8:	0a292525 00000000 32333d3e 72726520     %%).....>=32 err
    6eb8:	3a73726f 20642520 6b636170 20737465     ors: %d packets 
    6ec8:	25642528 000a2925 74617473 7473614c     (%d%%)..statLast
    6ed8:	49535352 6425203a 0000000a 74617473     RSSI: %d....stat
    6ee8:	7473614c 4953534e 6425203a 0000000a     LastNSSI: %d....
    6ef8:	74617473 7473614c 61575852 64657469     statLastRXWaited
    6f08:	6425203a 0000000a 7473616c 6b6e694c     : %d....lastLink
    6f18:	6772614d 203a6e69 64206425 00000a42     Margin: %d dB...
    6f28:	25206425 64252064 20642520 25206425     %d %d %d %d %d %
    6f38:	64252064 0000000a 62726556 2065736f     d %d....Verbose 
    6f48:	65646f6d 0000000a 76453d3d 4b206c61     mode....==Eval K
    6f58:	3d3d7469 0000000a 54534942 69616620     it==....BIST fai
    6f68:	0a64656c 00000000 6b6e696c 6b636150     led.....linkPack
    6f78:	69537465 3d20657a 0a642520 00000000     etSize = %d.....
    6f88:	6b6e696c 6b636150 61527465 3d206574     linkPacketRate =
    6f98:	0a642520 00000000 6b6e696c 65656c53      %d.....linkSlee
    6fa8:	646f4d70 203d2065 0a642570 00000000     pMode = p%d.....
    6fb8:	6b6e696c 636e7953 64726f57 30203d20     linkSyncWord = 0
    6fc8:	34302578 000a7868 6b6e696c 61657250     x%04hx..linkPrea
    6fd8:	656c626d 657a6953 30203d20 32302578     mbleSize = 0x%02
    6fe8:	000a7868 6b6e696c 4e6e694d 764c696f     hx..linkMinNoiLv
    6ff8:	203d206c 30257830 0a786832 00000000     l = 0x%02hx.....
    7008:	6b6e696c 506e694d 6d416c75 203d2070     linkMinPulAmp = 
    7018:	30257830 0a786832 00000000 6b6e696c     0x%02hx.....link
    7028:	536e694d 74536769 203d2072 30257830     MinSigStr = 0x%0
    7038:	0a786832 00000000 6b6e696c 69646942     2hx.....linkBidi
    7048:	74636572 616e6f69 203d206c 000a6425     rectional = %d..
    7058:	6b6e696c 7473614d 3d207265 0a642520     linkMaster = %d.
    7068:	00000000 6b6e696c 646e6152 3d206d6f     ....linkRandom =
    7078:	0a642520 00000000 6b6e696c 69647541      %d.....linkAudi
    7088:	203d206f 000a6425 6b6e696c 736e6553     o = %d..linkSens
    7098:	3d20726f 0a642520 00000000 626f7270     or = %d.....prob
    70a8:	203d2065 30257830 0a786832 00000000     e = 0x%02hx.....
    70b8:	6b6e696c 6b73614d 25203d20 78683230     linkMask = %02hx
    70c8:	68323025 32302578 30257868 25786832     %02hx%02hx%02hx%
    70d8:	78683230 68323025 32302578 30257868     02hx%02hx%02hx%0
    70e8:	25786832 78683230 68323025 32302578     2hx%02hx%02hx%02
    70f8:	30257868 0a786832 00000000 69647561     hx%02hx.....audi
    7108:	6365446f 74616d69 203d2065 000a6425     oDecimate = %d..
    7118:	6e6e7552 20676e69 54534942 000a2e2e     Running BIST....
    7128:	656e6f64 0000000a 72617073 6c61436b     done....sparkCal
    7138:	284c4c44 20295852 3025203d 0a786832     DLL(RX) = %02hx.
    7148:	00000000 72617073 6c61436b 284c4c44     ....sparkCalDLL(
    7158:	20295854 3025203d 0a786832 00000000     TX) = %02hx.....
    7168:	72617073 6c61436b 4f524356 29642528     sparkCalVCRO(%d)
    7178:	25203d20 78683230 0000000a 72617453      = %02hx....Star
    7188:	61722074 206f6964 0000000a 706f7453     t radio ....Stop
    7198:	64617220 0a206f69 00000000 45454c53      radio .....SLEE
    71a8:	4f4e5f50 000a454e 45454c53 44495f50     P_NONE..SLEEP_ID
    71b8:	000a454c 45454c53 48535f50 4f4c4c41     LE..SLEEP_SHALLO
    71c8:	00000a57 45454c53 45445f50 000a5045     W...SLEEP_DEEP..
    71d8:	65736552 6e697474 74732067 73697461     Resetting statis
    71e8:	73636974 0000000a 78683225 00000000     tics....%2hx....
    71f8:	69646942 74636572 616e6f69 6f6d206c     Bidirectional mo
    7208:	000a6564 74617453 69747369 0a3a7363     de..Statistics:.
    7218:	00000000 74697257 20676e69 73616c46     ....Writing Flas
    7228:	00000a68 64616552 20676e69 73616c46     h...Reading Flas
    7238:	00000a68 746c6f56 20656761 3a746573     h...Voltage set:
    7248:	00000020 38302e31 00000a56 33302e31      ...1.08V...1.03
    7258:	00000a56 34302e31 00000a56 37392e30     V...1.04V...0.97
    7268:	00000a56 6d205852 0a65646f 00000000     V...RX mode.....
    7278:	6d205854 0a65646f 00000000 73257325     TX mode.....%s%s
    7288:	32302520 09207868 25732520 30252073      %02hx . %s%s %0
    7298:	0a786832 00000000 3354504f 5f313030     2hx.....OPT3001_
    72a8:	61746164 25203d20 00000a64 30376953     data = %d...Si70
    72b8:	645f3132 20617461 6425203d 0000000a     21_data = %d....
    72c8:	38414d4d 51313934 7461645f 203d2061     MMA8491Q_data = 
    72d8:	000a6425 000a3f3f 30303030 00000000     %d..??..0000....
    72e8:	31303030 00000000 30313030 00000000     0001....0010....
    72f8:	31313030 00000000 30303130 00000000     0011....0100....
    7308:	31303130 00000000 30313130 00000000     0101....0110....
    7318:	31313130 00000000 30303031 00000000     0111....1000....
    7328:	31303031 00000000 30313031 00000000     1001....1010....
    7338:	31313031 00000000 30303131 00000000     1011....1100....
    7348:	31303131 00000000 30313131 00000000     1101....1110....
    7358:	31313131 00000000 69647541 5854206f     1111....Audio TX
    7368:	6e657320 202f2074 65736572 2f20746e      sent / resent /
    7378:	65736920 7974706d 203d2020 2f206425      isempty  = %d /
    7388:	20642520 6425202f 00000a20 69647541      %d / %d ...Audi
    7398:	5852206f 65722020 76696563 2f206465     o RX  received /
    73a8:	70756420 6163696c 2f206574 73696d20      duplicate / mis
    73b8:	676e6973 72202f20 63656a65 20646574     sing / rejected 
    73c8:	6425203d 25202f20 202f2064 2f206425     = %d / %d / %d /
    73d8:	0a642520 00000000 62205852 25206675      %d.....RX buf %
    73e8:	54202c64 75622058 64252066 0000000a     d, TX buf %d....

000073f8 <gentrcl.11368>:
    73f8:	00290806                                ..).

000073fc <gentrcl.11372>:
    73fc:	00210806                                ..!.

00007400 <ctrla.11279>:
    7400:	0013000c                                ....

00007404 <wrconfig.11281>:
    7404:	d201000b                                ....

00007408 <xosc32k.11356>:
    7408:	0000004e                                N...

0000740c <dpllctrla.11357>:
    740c:	00000042                                B...

00007410 <gendiv.11360>:
    7410:	00000206                                ....

00007414 <gentrcl.11361>:
    7414:	00290806                                ..).

00007418 <gentrcl2.11363>:
    7418:	00290802                                ..).

0000741c <wrconfig.11364>:
    741c:	d7010040                                @...

00007420 <wrconfig.11829>:
    7420:	50010008 00006425                       ...P%d..

00007428 <rev_lookup>:
    7428:	0c040800 0e060a02 0d050901 0f070b03     ................
    7438:	2e495053 0000002e 4c494146 0000000a     SPI.....FAIL....
    7448:	000a4b4f 5f55434d 2e544e49 0000002e     OK..MCU_INT.....
    7458:	5f464552 44525750 00002e2e 5f4c4c50     REF_PWRD....PLL_
    7468:	44525750 00002e2e 43444344 5257505f     PWRD....DCDC_PWR
    7478:	002e2e44 5f4c4c44 44525750 00002e2e     D...DLL_PWRD....
    7488:	33323130 37363534 42413938 47464443     0123456789ABCDFG
    7498:	4c4b4a48 51504e4d 56545352 5a595857     HJKLMNPQRSTVWXYZ
    74a8:	00000000                                ....

000074ac <msft_compatible>:
    74ac:	00000028 00040100 00000001 00000000     (...............
    74bc:	69570100 4253556e 00000000 00000000     ..WinUSB........
	...

000074d4 <msft_extended>:
    74d4:	0000008e 00050100 00840001 00010000     ................
    74e4:	00280000 00650044 00690076 00650063     ..(.D.e.v.i.c.e.
    74f4:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
    7504:	00470065 00490055 00000044 0000004e     e.G.U.I.D...N...
    7514:	0033007b 00330063 00620033 00660062     {.3.c.3.3.b.b.f.
    7524:	002d0064 00310037 00390066 0034002d     d.-.7.1.f.9.-.4.
    7534:	00310038 002d0035 00620038 00660038     8.1.5.-.8.b.8.f.
    7544:	0037002d 00640063 00650031 00390066     -.7.c.d.1.e.f.9.
    7554:	00380032 00330062 007d0064 00000000     2.8.b.3.d.}.....

00007564 <devDesc>:
    7564:	02000112 40000000 204003eb 02010100     .......@..@ ....
    7574:	00000103                                ....

00007578 <confDesc>:
    7578:	00200209 80040101 00040932 00000200     .. .....2.......
    7588:	05070500 00400301 81050714 14004003     ......@......@..

00007598 <langDesc>:
    7598:	04090304                                ....

0000759c <msft_os>:
    759c:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
    75ac:	0000002e                                ....

000075b0 <usb_num_endpoints>:
    75b0:	00000008 454d5441 535b204c 6b726170     ....ATMEL [Spark
    75c0:	72696620 7261776d 00005d65 556e6957      firmware]..WinU
    75d0:	74204253 20747365 69766564 00006563     SB test device..
    75e0:	666e6f43 72756769 6f697461 7473206e     Configuration st
    75f0:	676e6972 73656420 70697263 00726f74     ring descriptor.
    7600:	65746e49 63616672 74732065 676e6972     Interface string
    7610:	73656420 70697263 00726f74 0000503e      descriptor.>P..
    7620:	00005052 00005116 00005052 00005116     RP...Q..RP...Q..
    7630:	0000505e 0000506a 00005116 000050bc     ^P..jP...Q...P..
    7640:	000050d0 00005116 000050f6 2b302d23     .P...Q...P..#-0+
    7650:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    7660:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    7670:	35343332 39383736 64636261 00006665     23456789abcdef..
    7680:	0000769e 000076a1 000076a4 61462d41     .v...v...v..A-Fa
    7690:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
    76a0:	00303000 00005878                       .00.xX..

000076a8 <__sf_fake_stderr>:
	...

000076c8 <__sf_fake_stdin>:
	...

000076e8 <__sf_fake_stdout>:
	...
    7708:	4f500043 00584953 2000002e                       C.POSIX...

00007712 <_ctype_>:
    7712:	20202000 20202020 28282020 20282828     .         ((((( 
    7722:	20202020 20202020 20202020 20202020                     
    7732:	10108820 10101010 10101010 10101010      ...............
    7742:	04040410 04040404 10040404 10101010     ................
    7752:	41411010 41414141 01010101 01010101     ..AAAAAA........
    7762:	01010101 01010101 01010101 10101010     ................
    7772:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7782:	02020202 02020202 02020202 10101010     ................
    7792:	00000020 00000000 00000000 00000000      ...............
	...

00007814 <_init>:
    7814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	bcf8      	pop	{r3, r4, r5, r6, r7}
    781a:	bc08      	pop	{r3}
    781c:	469e      	mov	lr, r3
    781e:	4770      	bx	lr

00007820 <__init_array_start>:
    7820:	000000dd 	.word	0x000000dd

00007824 <_fini>:
    7824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7826:	46c0      	nop			; (mov r8, r8)
    7828:	bcf8      	pop	{r3, r4, r5, r6, r7}
    782a:	bc08      	pop	{r3}
    782c:	469e      	mov	lr, r3
    782e:	4770      	bx	lr

00007830 <__fini_array_start>:
    7830:	000000b5 	.word	0x000000b5
