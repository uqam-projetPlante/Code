
DEVICE_EXAMPLE3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d44  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000174  20000000  00006d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007c4  20000174  00006eb8  00020174  2**2
                  ALLOC
  3 .stack        00002000  20000938  0000767c  00020174  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00049df0  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000633e  00000000  00000000  00069fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009a83  00000000  00000000  00070323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b48  00000000  00000000  00079da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f80  00000000  00000000  0007a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020c9b  00000000  00000000  0007b86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000172ad  00000000  00000000  0009c509  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000955e5  00000000  00000000  000b37b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f9c  00000000  00000000  00148d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 29 00 20 21 45 00 00 1d 45 00 00 1d 45 00 00     8). !E...E...E..
	...
      2c:	1d 45 00 00 00 00 00 00 00 00 00 00 1d 45 00 00     .E...........E..
      3c:	1d 45 00 00 1d 45 00 00 1d 45 00 00 1d 45 00 00     .E...E...E...E..
      4c:	e5 03 00 00 91 1d 00 00 1d 45 00 00 1d 45 00 00     .........E...E..
      5c:	45 3d 00 00 1d 45 00 00 1d 45 00 00 1d 45 00 00     E=...E...E...E..
      6c:	1d 45 00 00 1d 45 00 00 1d 45 00 00 1d 45 00 00     .E...E...E...E..
      7c:	1d 45 00 00 1d 45 00 00 1d 45 00 00 f5 02 00 00     .E...E...E......
      8c:	1d 45 00 00 1d 45 00 00 1d 45 00 00 1d 45 00 00     .E...E...E...E..
      9c:	1d 45 00 00 1d 45 00 00 1d 45 00 00 1d 45 00 00     .E...E...E...E..
      ac:	1d 45 00 00 00 00 00 00                             .E......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	00006d44 	.word	0x00006d44

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000178 	.word	0x20000178
     108:	00006d44 	.word	0x00006d44
     10c:	00006d44 	.word	0x00006d44
     110:	00000000 	.word	0x00000000

00000114 <TurnLightOn>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     114:	2280      	movs	r2, #128	; 0x80
     116:	05d2      	lsls	r2, r2, #23
     118:	4b01      	ldr	r3, [pc, #4]	; (120 <TurnLightOn+0xc>)
     11a:	615a      	str	r2, [r3, #20]
}

static void TurnLightOn(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	41004480 	.word	0x41004480

00000124 <TurnLightOff>:
		port_base->OUTSET.reg = pin_mask;
     124:	2280      	movs	r2, #128	; 0x80
     126:	05d2      	lsls	r2, r2, #23
     128:	4b01      	ldr	r3, [pc, #4]	; (130 <TurnLightOff+0xc>)
     12a:	619a      	str	r2, [r3, #24]

static void TurnLightOff(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)
     130:	41004480 	.word	0x41004480

00000134 <TurnLightOn1>:
		port_base->OUTCLR.reg = pin_mask;
     134:	2280      	movs	r2, #128	; 0x80
     136:	05d2      	lsls	r2, r2, #23
     138:	4b01      	ldr	r3, [pc, #4]	; (140 <TurnLightOn1+0xc>)
     13a:	615a      	str	r2, [r3, #20]

static void TurnLightOn1(const struct schedule_cb *evt)
{
	LED_On(LED_0_PIN);
}
     13c:	4770      	bx	lr
     13e:	46c0      	nop			; (mov r8, r8)
     140:	41004480 	.word	0x41004480

00000144 <TurnLightOff1>:
		port_base->OUTSET.reg = pin_mask;
     144:	2280      	movs	r2, #128	; 0x80
     146:	05d2      	lsls	r2, r2, #23
     148:	4b01      	ldr	r3, [pc, #4]	; (150 <TurnLightOff1+0xc>)
     14a:	619a      	str	r2, [r3, #24]

static void TurnLightOff1(const struct schedule_cb *evt)
{
	LED_Off(LED_0_PIN);
}
     14c:	4770      	bx	lr
     14e:	46c0      	nop			; (mov r8, r8)
     150:	41004480 	.word	0x41004480

00000154 <char2num>:

uint8_t char2num(char in){
	switch(in)
     154:	3830      	subs	r0, #48	; 0x30
     156:	b2c3      	uxtb	r3, r0
     158:	2b09      	cmp	r3, #9
     15a:	d816      	bhi.n	18a <char2num+0x36>
     15c:	0098      	lsls	r0, r3, #2
     15e:	4b0b      	ldr	r3, [pc, #44]	; (18c <char2num+0x38>)
     160:	581b      	ldr	r3, [r3, r0]
     162:	469f      	mov	pc, r3
	{
		case '1' :
			return 1;
		break;
		case '2' :
			return 2;
     164:	2002      	movs	r0, #2
     166:	e010      	b.n	18a <char2num+0x36>
		break;
		case '3' :
			return 3;
		break;
		case '4' :
			return 4;
     168:	2004      	movs	r0, #4
     16a:	e00e      	b.n	18a <char2num+0x36>
		break;
		case '5' :
			return 5;
     16c:	2005      	movs	r0, #5
     16e:	e00c      	b.n	18a <char2num+0x36>
		break;
		case '6' :
			return 6;
     170:	2006      	movs	r0, #6
     172:	e00a      	b.n	18a <char2num+0x36>
		break;
		case '7' :
			return 7;
     174:	2007      	movs	r0, #7
     176:	e008      	b.n	18a <char2num+0x36>
		break;
		case '8' :
			return 8;
     178:	2008      	movs	r0, #8
     17a:	e006      	b.n	18a <char2num+0x36>
		break;
		case '9' :
			return 9;
     17c:	2009      	movs	r0, #9
     17e:	e004      	b.n	18a <char2num+0x36>
		break;
		case '0' :
			return 0;
     180:	2000      	movs	r0, #0
     182:	e002      	b.n	18a <char2num+0x36>
			return 1;
     184:	2001      	movs	r0, #1
     186:	e000      	b.n	18a <char2num+0x36>
			return 3;
     188:	2003      	movs	r0, #3
		break;			
	}
}
     18a:	4770      	bx	lr
     18c:	00006a18 	.word	0x00006a18

00000190 <Get_time>:


void Get_time(){
     190:	b570      	push	{r4, r5, r6, lr}
	uint8_t d1;
	uint8_t d2;
	uint8_t u1;
	uint8_t u2;
	i2cLcdTime();
     192:	4b4f      	ldr	r3, [pc, #316]	; (2d0 <Get_time+0x140>)
     194:	4798      	blx	r3
	key = 'H';
     196:	4c4f      	ldr	r4, [pc, #316]	; (2d4 <Get_time+0x144>)
     198:	2348      	movs	r3, #72	; 0x48
     19a:	7023      	strb	r3, [r4, #0]
	i2cLcdPrint(0,27,&key);
     19c:	0022      	movs	r2, r4
     19e:	211b      	movs	r1, #27
     1a0:	2000      	movs	r0, #0
     1a2:	4d4d      	ldr	r5, [pc, #308]	; (2d8 <Get_time+0x148>)
     1a4:	47a8      	blx	r5
	i2cLcdPrint(0,28,&key);
     1a6:	0022      	movs	r2, r4
     1a8:	211c      	movs	r1, #28
     1aa:	2000      	movs	r0, #0
     1ac:	47a8      	blx	r5
	key = 'M';
     1ae:	234d      	movs	r3, #77	; 0x4d
     1b0:	7023      	strb	r3, [r4, #0]
	i2cLcdPrint(0,30,&key);
     1b2:	0022      	movs	r2, r4
     1b4:	211e      	movs	r1, #30
     1b6:	2000      	movs	r0, #0
     1b8:	47a8      	blx	r5
	i2cLcdPrint(0,31,&key);
     1ba:	0022      	movs	r2, r4
     1bc:	211f      	movs	r1, #31
     1be:	2000      	movs	r0, #0
     1c0:	47a8      	blx	r5
	
	while(keypadScan() == 0xFF){}
     1c2:	4c46      	ldr	r4, [pc, #280]	; (2dc <Get_time+0x14c>)
     1c4:	47a0      	blx	r4
     1c6:	28ff      	cmp	r0, #255	; 0xff
     1c8:	d0fc      	beq.n	1c4 <Get_time+0x34>
	key = keypadScan();
     1ca:	4b44      	ldr	r3, [pc, #272]	; (2dc <Get_time+0x14c>)
     1cc:	4798      	blx	r3
     1ce:	4d41      	ldr	r5, [pc, #260]	; (2d4 <Get_time+0x144>)
     1d0:	7028      	strb	r0, [r5, #0]
	d1 = char2num(key);
     1d2:	4b43      	ldr	r3, [pc, #268]	; (2e0 <Get_time+0x150>)
     1d4:	4798      	blx	r3
     1d6:	0004      	movs	r4, r0
	i2cLcdPrint(0,27,&key);
     1d8:	002a      	movs	r2, r5
     1da:	211b      	movs	r1, #27
     1dc:	2000      	movs	r0, #0
     1de:	4b3e      	ldr	r3, [pc, #248]	; (2d8 <Get_time+0x148>)
     1e0:	4798      	blx	r3

inline void timerDelay(uint16_t ms)
{
	uint16_t cnt;
	
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     1e2:	2200      	movs	r2, #0
     1e4:	4b3f      	ldr	r3, [pc, #252]	; (2e4 <Get_time+0x154>)
     1e6:	821a      	strh	r2, [r3, #16]
     1e8:	21c8      	movs	r1, #200	; 0xc8
	
	while(cnt!=ms) // Count the ms till target
	{
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     1ea:	001a      	movs	r2, r3
     1ec:	2010      	movs	r0, #16
     1ee:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     1f0:	7b93      	ldrb	r3, [r2, #14]
     1f2:	06db      	lsls	r3, r3, #27
     1f4:	d5fc      	bpl.n	1f0 <Get_time+0x60>
     1f6:	3901      	subs	r1, #1
     1f8:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     1fa:	2900      	cmp	r1, #0
     1fc:	d1f7      	bne.n	1ee <Get_time+0x5e>
	timerDelay(200);	
	while(keypadScan() == 0xFF){}
     1fe:	4d37      	ldr	r5, [pc, #220]	; (2dc <Get_time+0x14c>)
     200:	47a8      	blx	r5
     202:	28ff      	cmp	r0, #255	; 0xff
     204:	d0fc      	beq.n	200 <Get_time+0x70>
	key = keypadScan();
     206:	4b35      	ldr	r3, [pc, #212]	; (2dc <Get_time+0x14c>)
     208:	4798      	blx	r3
     20a:	4e32      	ldr	r6, [pc, #200]	; (2d4 <Get_time+0x144>)
     20c:	7030      	strb	r0, [r6, #0]
	u1 = char2num(key);
     20e:	4b34      	ldr	r3, [pc, #208]	; (2e0 <Get_time+0x150>)
     210:	4798      	blx	r3
     212:	0005      	movs	r5, r0
	i2cLcdPrint(0,28,&key);
     214:	0032      	movs	r2, r6
     216:	211c      	movs	r1, #28
     218:	2000      	movs	r0, #0
     21a:	4b2f      	ldr	r3, [pc, #188]	; (2d8 <Get_time+0x148>)
     21c:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     21e:	2200      	movs	r2, #0
     220:	4b30      	ldr	r3, [pc, #192]	; (2e4 <Get_time+0x154>)
     222:	821a      	strh	r2, [r3, #16]
     224:	21c8      	movs	r1, #200	; 0xc8
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     226:	001a      	movs	r2, r3
     228:	2010      	movs	r0, #16
     22a:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     22c:	7b93      	ldrb	r3, [r2, #14]
     22e:	06db      	lsls	r3, r3, #27
     230:	d5fc      	bpl.n	22c <Get_time+0x9c>
     232:	3901      	subs	r1, #1
     234:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     236:	2900      	cmp	r1, #0
     238:	d1f7      	bne.n	22a <Get_time+0x9a>
	timerDelay(200);
	hour = (10*d1)+u1;
     23a:	00a3      	lsls	r3, r4, #2
     23c:	18e4      	adds	r4, r4, r3
     23e:	0064      	lsls	r4, r4, #1
     240:	192c      	adds	r4, r5, r4
     242:	4b29      	ldr	r3, [pc, #164]	; (2e8 <Get_time+0x158>)
     244:	701c      	strb	r4, [r3, #0]
	while(keypadScan() == 0xFF){}
     246:	4c25      	ldr	r4, [pc, #148]	; (2dc <Get_time+0x14c>)
     248:	47a0      	blx	r4
     24a:	28ff      	cmp	r0, #255	; 0xff
     24c:	d0fc      	beq.n	248 <Get_time+0xb8>
	key = keypadScan();
     24e:	4b23      	ldr	r3, [pc, #140]	; (2dc <Get_time+0x14c>)
     250:	4798      	blx	r3
     252:	4d20      	ldr	r5, [pc, #128]	; (2d4 <Get_time+0x144>)
     254:	7028      	strb	r0, [r5, #0]
	d2 = char2num(key);
     256:	4b22      	ldr	r3, [pc, #136]	; (2e0 <Get_time+0x150>)
     258:	4798      	blx	r3
     25a:	0004      	movs	r4, r0
	i2cLcdPrint(0,30,&key);
     25c:	002a      	movs	r2, r5
     25e:	211e      	movs	r1, #30
     260:	2000      	movs	r0, #0
     262:	4b1d      	ldr	r3, [pc, #116]	; (2d8 <Get_time+0x148>)
     264:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     266:	2200      	movs	r2, #0
     268:	4b1e      	ldr	r3, [pc, #120]	; (2e4 <Get_time+0x154>)
     26a:	821a      	strh	r2, [r3, #16]
     26c:	21c8      	movs	r1, #200	; 0xc8
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     26e:	001a      	movs	r2, r3
     270:	2010      	movs	r0, #16
     272:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     274:	7b93      	ldrb	r3, [r2, #14]
     276:	06db      	lsls	r3, r3, #27
     278:	d5fc      	bpl.n	274 <Get_time+0xe4>
     27a:	3901      	subs	r1, #1
     27c:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     27e:	2900      	cmp	r1, #0
     280:	d1f7      	bne.n	272 <Get_time+0xe2>
	timerDelay(200);
	while(keypadScan() == 0xFF){}
     282:	4d16      	ldr	r5, [pc, #88]	; (2dc <Get_time+0x14c>)
     284:	47a8      	blx	r5
     286:	28ff      	cmp	r0, #255	; 0xff
     288:	d0fc      	beq.n	284 <Get_time+0xf4>
	key = keypadScan();
     28a:	4b14      	ldr	r3, [pc, #80]	; (2dc <Get_time+0x14c>)
     28c:	4798      	blx	r3
     28e:	4e11      	ldr	r6, [pc, #68]	; (2d4 <Get_time+0x144>)
     290:	7030      	strb	r0, [r6, #0]
	u2 = char2num(key);
     292:	4b13      	ldr	r3, [pc, #76]	; (2e0 <Get_time+0x150>)
     294:	4798      	blx	r3
     296:	0005      	movs	r5, r0
	i2cLcdPrint(0,31,&key);
     298:	0032      	movs	r2, r6
     29a:	211f      	movs	r1, #31
     29c:	2000      	movs	r0, #0
     29e:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <Get_time+0x148>)
     2a0:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     2a2:	2200      	movs	r2, #0
     2a4:	4b0f      	ldr	r3, [pc, #60]	; (2e4 <Get_time+0x154>)
     2a6:	821a      	strh	r2, [r3, #16]
     2a8:	21c8      	movs	r1, #200	; 0xc8
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     2aa:	001a      	movs	r2, r3
     2ac:	2010      	movs	r0, #16
     2ae:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     2b0:	7b93      	ldrb	r3, [r2, #14]
     2b2:	06db      	lsls	r3, r3, #27
     2b4:	d5fc      	bpl.n	2b0 <Get_time+0x120>
     2b6:	3901      	subs	r1, #1
     2b8:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     2ba:	2900      	cmp	r1, #0
     2bc:	d1f7      	bne.n	2ae <Get_time+0x11e>
	timerDelay(200);
	minute = (10*d2)+u2;
     2be:	00a3      	lsls	r3, r4, #2
     2c0:	18e4      	adds	r4, r4, r3
     2c2:	0064      	lsls	r4, r4, #1
     2c4:	192c      	adds	r4, r5, r4
     2c6:	4b09      	ldr	r3, [pc, #36]	; (2ec <Get_time+0x15c>)
     2c8:	701c      	strb	r4, [r3, #0]
	
	i2cLcdClear();
     2ca:	4b09      	ldr	r3, [pc, #36]	; (2f0 <Get_time+0x160>)
     2cc:	4798      	blx	r3
}
     2ce:	bd70      	pop	{r4, r5, r6, pc}
     2d0:	00001051 	.word	0x00001051
     2d4:	20000451 	.word	0x20000451
     2d8:	00000f91 	.word	0x00000f91
     2dc:	00000e09 	.word	0x00000e09
     2e0:	00000155 	.word	0x00000155
     2e4:	42003000 	.word	0x42003000
     2e8:	20000450 	.word	0x20000450
     2ec:	2000041a 	.word	0x2000041a
     2f0:	00000ef5 	.word	0x00000ef5

000002f4 <TC3_Handler>:

void TC3_Handler(void)
{
     2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Print Data to LCD screen
	if(TC3->COUNT16.INTFLAG.bit.MC0)
     2f6:	4b2a      	ldr	r3, [pc, #168]	; (3a0 <TC3_Handler+0xac>)
     2f8:	7b9b      	ldrb	r3, [r3, #14]
     2fa:	06db      	lsls	r3, r3, #27
     2fc:	d404      	bmi.n	308 <TC3_Handler+0x14>
		i2cLcdprintNum(myTime.hour,0,7);
		i2cLcdprintNum(myTime.minute,0,10);
	}
	
	// Chek for bluetooth commands
	if(TC3->COUNT16.INTFLAG.bit.OVF)
     2fe:	4b28      	ldr	r3, [pc, #160]	; (3a0 <TC3_Handler+0xac>)
     300:	7b9b      	ldrb	r3, [r3, #14]
     302:	07db      	lsls	r3, r3, #31
     304:	d418      	bmi.n	338 <TC3_Handler+0x44>
				break;
			}			
		}
	}
	
}
     306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i2cLcdprintNum(temp1,0,26);
     308:	4b26      	ldr	r3, [pc, #152]	; (3a4 <TC3_Handler+0xb0>)
     30a:	7818      	ldrb	r0, [r3, #0]
     30c:	221a      	movs	r2, #26
     30e:	2100      	movs	r1, #0
     310:	4c25      	ldr	r4, [pc, #148]	; (3a8 <TC3_Handler+0xb4>)
     312:	47a0      	blx	r4
		i2cLcdprintNum(RH1,0,36);
     314:	4b25      	ldr	r3, [pc, #148]	; (3ac <TC3_Handler+0xb8>)
     316:	7818      	ldrb	r0, [r3, #0]
     318:	2224      	movs	r2, #36	; 0x24
     31a:	2100      	movs	r1, #0
     31c:	47a0      	blx	r4
		rtc_calendar_get_time(&myTime);
     31e:	4d24      	ldr	r5, [pc, #144]	; (3b0 <TC3_Handler+0xbc>)
     320:	0028      	movs	r0, r5
     322:	4b24      	ldr	r3, [pc, #144]	; (3b4 <TC3_Handler+0xc0>)
     324:	4798      	blx	r3
		i2cLcdprintNum(myTime.hour,0,7);
     326:	78a8      	ldrb	r0, [r5, #2]
     328:	2207      	movs	r2, #7
     32a:	2100      	movs	r1, #0
     32c:	47a0      	blx	r4
		i2cLcdprintNum(myTime.minute,0,10);
     32e:	7868      	ldrb	r0, [r5, #1]
     330:	220a      	movs	r2, #10
     332:	2100      	movs	r1, #0
     334:	47a0      	blx	r4
     336:	e7e2      	b.n	2fe <TC3_Handler+0xa>
		uart_data_rx = uart_read();
     338:	4b1f      	ldr	r3, [pc, #124]	; (3b8 <TC3_Handler+0xc4>)
     33a:	4798      	blx	r3
     33c:	4b1f      	ldr	r3, [pc, #124]	; (3bc <TC3_Handler+0xc8>)
     33e:	7018      	strb	r0, [r3, #0]
		if(uart_data_rx == 'f')
     340:	2866      	cmp	r0, #102	; 0x66
     342:	d1e0      	bne.n	306 <TC3_Handler+0x12>
			uart_data_rx = uart_read();
     344:	4b1c      	ldr	r3, [pc, #112]	; (3b8 <TC3_Handler+0xc4>)
     346:	4798      	blx	r3
     348:	4a1c      	ldr	r2, [pc, #112]	; (3bc <TC3_Handler+0xc8>)
     34a:	7010      	strb	r0, [r2, #0]
			switch(uart_data_rx){
     34c:	2831      	cmp	r0, #49	; 0x31
     34e:	d022      	beq.n	396 <TC3_Handler+0xa2>
     350:	2832      	cmp	r0, #50	; 0x32
     352:	d1d8      	bne.n	306 <TC3_Handler+0x12>
					uart_sendBuffer("Temp: ", 6);
     354:	2106      	movs	r1, #6
     356:	481a      	ldr	r0, [pc, #104]	; (3c0 <TC3_Handler+0xcc>)
     358:	4c1a      	ldr	r4, [pc, #104]	; (3c4 <TC3_Handler+0xd0>)
     35a:	47a0      	blx	r4
					sprintf(str1, "%d", temp1);
     35c:	4b11      	ldr	r3, [pc, #68]	; (3a4 <TC3_Handler+0xb0>)
     35e:	681a      	ldr	r2, [r3, #0]
     360:	4f19      	ldr	r7, [pc, #100]	; (3c8 <TC3_Handler+0xd4>)
     362:	4d1a      	ldr	r5, [pc, #104]	; (3cc <TC3_Handler+0xd8>)
     364:	0039      	movs	r1, r7
     366:	0028      	movs	r0, r5
     368:	4e19      	ldr	r6, [pc, #100]	; (3d0 <TC3_Handler+0xdc>)
     36a:	47b0      	blx	r6
					uart_sendBuffer(str1, 2);
     36c:	2102      	movs	r1, #2
     36e:	0028      	movs	r0, r5
     370:	47a0      	blx	r4
					uart_sendBuffer(" C\n", 3);
     372:	2103      	movs	r1, #3
     374:	4817      	ldr	r0, [pc, #92]	; (3d4 <TC3_Handler+0xe0>)
     376:	47a0      	blx	r4
					uart_sendBuffer("RH: ", 4);
     378:	2104      	movs	r1, #4
     37a:	4817      	ldr	r0, [pc, #92]	; (3d8 <TC3_Handler+0xe4>)
     37c:	47a0      	blx	r4
					sprintf(str1, "%d", RH1);
     37e:	4b0b      	ldr	r3, [pc, #44]	; (3ac <TC3_Handler+0xb8>)
     380:	681a      	ldr	r2, [r3, #0]
     382:	0039      	movs	r1, r7
     384:	0028      	movs	r0, r5
     386:	47b0      	blx	r6
					uart_sendBuffer(str1, 2);
     388:	2102      	movs	r1, #2
     38a:	0028      	movs	r0, r5
     38c:	47a0      	blx	r4
					uart_sendBuffer(" %\n", 3);
     38e:	2103      	movs	r1, #3
     390:	4812      	ldr	r0, [pc, #72]	; (3dc <TC3_Handler+0xe8>)
     392:	47a0      	blx	r4
}
     394:	e7b7      	b.n	306 <TC3_Handler+0x12>
					uart_sendBuffer("Growbox V1.0\n", 14);
     396:	210e      	movs	r1, #14
     398:	4811      	ldr	r0, [pc, #68]	; (3e0 <TC3_Handler+0xec>)
     39a:	4b0a      	ldr	r3, [pc, #40]	; (3c4 <TC3_Handler+0xd0>)
     39c:	4798      	blx	r3
				break;
     39e:	e7b2      	b.n	306 <TC3_Handler+0x12>
     3a0:	42002c00 	.word	0x42002c00
     3a4:	2000044c 	.word	0x2000044c
     3a8:	000010f5 	.word	0x000010f5
     3ac:	20000458 	.word	0x20000458
     3b0:	2000040c 	.word	0x2000040c
     3b4:	000011e9 	.word	0x000011e9
     3b8:	000014fd 	.word	0x000014fd
     3bc:	20000418 	.word	0x20000418
     3c0:	00006a50 	.word	0x00006a50
     3c4:	0000151d 	.word	0x0000151d
     3c8:	00006a58 	.word	0x00006a58
     3cc:	200004ac 	.word	0x200004ac
     3d0:	000061e9 	.word	0x000061e9
     3d4:	00006a5c 	.word	0x00006a5c
     3d8:	00006a60 	.word	0x00006a60
     3dc:	00006a68 	.word	0x00006a68
     3e0:	00006a40 	.word	0x00006a40

000003e4 <RTC_Handler>:

void RTC_Handler(void)
{
     3e4:	b510      	push	{r4, lr}
	//Execute task
	myTask1[currentTask].cb(&myTask1[currentTask]);
     3e6:	4c10      	ldr	r4, [pc, #64]	; (428 <RTC_Handler+0x44>)
     3e8:	7823      	ldrb	r3, [r4, #0]
     3ea:	4a10      	ldr	r2, [pc, #64]	; (42c <RTC_Handler+0x48>)
     3ec:	009b      	lsls	r3, r3, #2
     3ee:	18d0      	adds	r0, r2, r3
     3f0:	589b      	ldr	r3, [r3, r2]
     3f2:	4798      	blx	r3
	
	//Set next alarm for task
	currentTask++;
     3f4:	7820      	ldrb	r0, [r4, #0]
     3f6:	3001      	adds	r0, #1
     3f8:	b2c3      	uxtb	r3, r0
     3fa:	7023      	strb	r3, [r4, #0]
	rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     3fc:	0058      	lsls	r0, r3, #1
     3fe:	18c0      	adds	r0, r0, r3
     400:	0080      	lsls	r0, r0, #2
     402:	4b0b      	ldr	r3, [pc, #44]	; (430 <RTC_Handler+0x4c>)
     404:	18c0      	adds	r0, r0, r3
     406:	4b0b      	ldr	r3, [pc, #44]	; (434 <RTC_Handler+0x50>)
     408:	4798      	blx	r3
	
	//if all task completed: go back to first task
	if (currentTask == NUM_SCHEDULED_TASKS)
     40a:	7823      	ldrb	r3, [r4, #0]
     40c:	2b04      	cmp	r3, #4
     40e:	d003      	beq.n	418 <RTC_Handler+0x34>
		currentTask = 0;	
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
	}
	
	//clear interupt alarm0 flag
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM0;
     410:	2201      	movs	r2, #1
     412:	4b09      	ldr	r3, [pc, #36]	; (438 <RTC_Handler+0x54>)
     414:	721a      	strb	r2, [r3, #8]
}
     416:	bd10      	pop	{r4, pc}
		currentTask = 0;	
     418:	2200      	movs	r2, #0
     41a:	4b03      	ldr	r3, [pc, #12]	; (428 <RTC_Handler+0x44>)
     41c:	701a      	strb	r2, [r3, #0]
		rtc_calendar_set_alarm(&(mySchedule[currentTask]));
     41e:	4804      	ldr	r0, [pc, #16]	; (430 <RTC_Handler+0x4c>)
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <RTC_Handler+0x50>)
     422:	4798      	blx	r3
     424:	e7f4      	b.n	410 <RTC_Handler+0x2c>
     426:	46c0      	nop			; (mov r8, r8)
     428:	20000419 	.word	0x20000419
     42c:	20000190 	.word	0x20000190
     430:	2000041c 	.word	0x2000041c
     434:	00001259 	.word	0x00001259
     438:	40001400 	.word	0x40001400

0000043c <Schedule_config>:

void Schedule_config(){
     43c:	b510      	push	{r4, lr}
	//Configure your schedule here, Use as many tasks as 
	mySchedule[0].hour = 8;
     43e:	4b0d      	ldr	r3, [pc, #52]	; (474 <Schedule_config+0x38>)
     440:	2208      	movs	r2, #8
     442:	709a      	strb	r2, [r3, #2]
	mySchedule[0].minute = 0;
     444:	2100      	movs	r1, #0
     446:	7059      	strb	r1, [r3, #1]
	myTask1[index].cb = cb;
     448:	4a0b      	ldr	r2, [pc, #44]	; (478 <Schedule_config+0x3c>)
     44a:	480c      	ldr	r0, [pc, #48]	; (47c <Schedule_config+0x40>)
     44c:	6010      	str	r0, [r2, #0]
	event_cb_register(TurnLightOn,0);

	mySchedule[1].hour = 10;
     44e:	200a      	movs	r0, #10
     450:	7398      	strb	r0, [r3, #14]
	mySchedule[1].minute = 0;
     452:	7359      	strb	r1, [r3, #13]
	myTask1[index].cb = cb;
     454:	480a      	ldr	r0, [pc, #40]	; (480 <Schedule_config+0x44>)
     456:	6050      	str	r0, [r2, #4]
	event_cb_register(TurnLightOff,1);
	
	mySchedule[2].hour = 13;
     458:	200d      	movs	r0, #13
     45a:	7698      	strb	r0, [r3, #26]
	mySchedule[2].minute = 0;
     45c:	7659      	strb	r1, [r3, #25]
	myTask1[index].cb = cb;
     45e:	4809      	ldr	r0, [pc, #36]	; (484 <Schedule_config+0x48>)
     460:	6090      	str	r0, [r2, #8]
	event_cb_register(TurnLightOn1,2);

	mySchedule[3].hour = 16;
     462:	2410      	movs	r4, #16
     464:	2026      	movs	r0, #38	; 0x26
     466:	541c      	strb	r4, [r3, r0]
	mySchedule[3].minute = 0;
     468:	3801      	subs	r0, #1
     46a:	5419      	strb	r1, [r3, r0]
	myTask1[index].cb = cb;
     46c:	4b06      	ldr	r3, [pc, #24]	; (488 <Schedule_config+0x4c>)
     46e:	60d3      	str	r3, [r2, #12]
	event_cb_register(TurnLightOff1,3);
}
     470:	bd10      	pop	{r4, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	2000041c 	.word	0x2000041c
     478:	20000190 	.word	0x20000190
     47c:	00000115 	.word	0x00000115
     480:	00000125 	.word	0x00000125
     484:	00000135 	.word	0x00000135
     488:	00000145 	.word	0x00000145

0000048c <configApp>:

void configApp(){
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
     48e:	46d6      	mov	lr, sl
     490:	464f      	mov	r7, r9
     492:	4646      	mov	r6, r8
     494:	b5c0      	push	{r6, r7, lr}
	// initialize keypad
	keypadInit();
     496:	4b59      	ldr	r3, [pc, #356]	; (5fc <configApp+0x170>)
     498:	4798      	blx	r3
	//get current time
	Get_time();
     49a:	4b59      	ldr	r3, [pc, #356]	; (600 <configApp+0x174>)
     49c:	4798      	blx	r3
	//initialize real time counter
	RTC_init();
     49e:	4b59      	ldr	r3, [pc, #356]	; (604 <configApp+0x178>)
     4a0:	4798      	blx	r3
	//set time
	myTime.hour      = hour;
     4a2:	4c59      	ldr	r4, [pc, #356]	; (608 <configApp+0x17c>)
     4a4:	4b59      	ldr	r3, [pc, #356]	; (60c <configApp+0x180>)
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	70a3      	strb	r3, [r4, #2]
	myTime.minute    = minute;
     4aa:	4b59      	ldr	r3, [pc, #356]	; (610 <configApp+0x184>)
     4ac:	781b      	ldrb	r3, [r3, #0]
     4ae:	7063      	strb	r3, [r4, #1]
	rtc_calendar_set_time(&myTime);	
     4b0:	0020      	movs	r0, r4
     4b2:	4b58      	ldr	r3, [pc, #352]	; (614 <configApp+0x188>)
     4b4:	4798      	blx	r3
	
	//configure Schedule
	Schedule_config();
     4b6:	4b58      	ldr	r3, [pc, #352]	; (618 <configApp+0x18c>)
     4b8:	4798      	blx	r3
		
	//Find the first task to execute (next scheduled task scheduled within 1 hour of current time)
	currentTask = 255;
     4ba:	22ff      	movs	r2, #255	; 0xff
     4bc:	4b57      	ldr	r3, [pc, #348]	; (61c <configApp+0x190>)
     4be:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = (myTime.hour + 1); i <= 24; i++)
     4c0:	78a0      	ldrb	r0, [r4, #2]
     4c2:	1c43      	adds	r3, r0, #1
     4c4:	b2db      	uxtb	r3, r3
     4c6:	2b18      	cmp	r3, #24
     4c8:	d829      	bhi.n	51e <configApp+0x92>
	{
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
		{	
			if(mySchedule[j].hour == i)
     4ca:	4a55      	ldr	r2, [pc, #340]	; (620 <configApp+0x194>)
     4cc:	7895      	ldrb	r5, [r2, #2]
     4ce:	7b97      	ldrb	r7, [r2, #14]
     4d0:	7e96      	ldrb	r6, [r2, #26]
     4d2:	2126      	movs	r1, #38	; 0x26
     4d4:	5c51      	ldrb	r1, [r2, r1]
     4d6:	2200      	movs	r2, #0
     4d8:	4694      	mov	ip, r2
     4da:	32ff      	adds	r2, #255	; 0xff
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     4dc:	2402      	movs	r4, #2
     4de:	46a2      	mov	sl, r4
     4e0:	3401      	adds	r4, #1
     4e2:	46a1      	mov	r9, r4
			if(mySchedule[j].hour == i)
     4e4:	2400      	movs	r4, #0
     4e6:	46a0      	mov	r8, r4
     4e8:	e00a      	b.n	500 <configApp+0x74>
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     4ea:	2201      	movs	r2, #1
     4ec:	e002      	b.n	4f4 <configApp+0x68>
     4ee:	4652      	mov	r2, sl
     4f0:	e000      	b.n	4f4 <configApp+0x68>
			if(mySchedule[j].hour == i)
     4f2:	4642      	mov	r2, r8
			{
				currentTask = j;
				break;
     4f4:	2401      	movs	r4, #1
     4f6:	46a4      	mov	ip, r4
	for(uint8_t i = (myTime.hour + 1); i <= 24; i++)
     4f8:	3301      	adds	r3, #1
     4fa:	b2db      	uxtb	r3, r3
     4fc:	2b19      	cmp	r3, #25
     4fe:	d00b      	beq.n	518 <configApp+0x8c>
			if(mySchedule[j].hour == i)
     500:	429d      	cmp	r5, r3
     502:	d0f6      	beq.n	4f2 <configApp+0x66>
			}
			if(currentTask!=255)
     504:	2aff      	cmp	r2, #255	; 0xff
     506:	d1f7      	bne.n	4f8 <configApp+0x6c>
			if(mySchedule[j].hour == i)
     508:	42bb      	cmp	r3, r7
     50a:	d0ee      	beq.n	4ea <configApp+0x5e>
     50c:	42b3      	cmp	r3, r6
     50e:	d0ee      	beq.n	4ee <configApp+0x62>
     510:	4299      	cmp	r1, r3
     512:	d1f1      	bne.n	4f8 <configApp+0x6c>
		for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     514:	464a      	mov	r2, r9
     516:	e7ed      	b.n	4f4 <configApp+0x68>
     518:	4663      	mov	r3, ip
     51a:	2b00      	cmp	r3, #0
     51c:	d110      	bne.n	540 <configApp+0xb4>
	{
		for(uint8_t i = 0; i <= myTime.hour; i++)
		{
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
			{
				if(mySchedule[j].hour == i)
     51e:	4b40      	ldr	r3, [pc, #256]	; (620 <configApp+0x194>)
     520:	789a      	ldrb	r2, [r3, #2]
     522:	493e      	ldr	r1, [pc, #248]	; (61c <configApp+0x190>)
     524:	7809      	ldrb	r1, [r1, #0]
     526:	7b9c      	ldrb	r4, [r3, #14]
     528:	7e9d      	ldrb	r5, [r3, #26]
     52a:	2626      	movs	r6, #38	; 0x26
     52c:	5d9f      	ldrb	r7, [r3, r6]
     52e:	2300      	movs	r3, #0
     530:	469c      	mov	ip, r3
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     532:	3e24      	subs	r6, #36	; 0x24
     534:	46b2      	mov	sl, r6
     536:	3601      	adds	r6, #1
     538:	46b1      	mov	r9, r6
				if(mySchedule[j].hour == i)
     53a:	2600      	movs	r6, #0
     53c:	46b0      	mov	r8, r6
     53e:	e00f      	b.n	560 <configApp+0xd4>
     540:	4b36      	ldr	r3, [pc, #216]	; (61c <configApp+0x190>)
     542:	701a      	strb	r2, [r3, #0]
	if(currentTask == 255)
     544:	2aff      	cmp	r2, #255	; 0xff
     546:	d11a      	bne.n	57e <configApp+0xf2>
     548:	e7e9      	b.n	51e <configApp+0x92>
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     54a:	2101      	movs	r1, #1
     54c:	e002      	b.n	554 <configApp+0xc8>
     54e:	4651      	mov	r1, sl
     550:	e000      	b.n	554 <configApp+0xc8>
				if(mySchedule[j].hour == i)
     552:	4641      	mov	r1, r8
				{
					currentTask = j;
					break;
     554:	2601      	movs	r6, #1
     556:	46b4      	mov	ip, r6
		for(uint8_t i = 0; i <= myTime.hour; i++)
     558:	3301      	adds	r3, #1
     55a:	b2db      	uxtb	r3, r3
     55c:	4298      	cmp	r0, r3
     55e:	d30b      	bcc.n	578 <configApp+0xec>
				if(mySchedule[j].hour == i)
     560:	429a      	cmp	r2, r3
     562:	d0f6      	beq.n	552 <configApp+0xc6>
				}
				if(currentTask!=255)
     564:	29ff      	cmp	r1, #255	; 0xff
     566:	d1f7      	bne.n	558 <configApp+0xcc>
				if(mySchedule[j].hour == i)
     568:	429c      	cmp	r4, r3
     56a:	d0ee      	beq.n	54a <configApp+0xbe>
     56c:	42ab      	cmp	r3, r5
     56e:	d0ee      	beq.n	54e <configApp+0xc2>
     570:	429f      	cmp	r7, r3
     572:	d1f1      	bne.n	558 <configApp+0xcc>
			for(uint8_t j = 0; j <=(NUM_SCHEDULED_TASKS-1); j++)
     574:	4649      	mov	r1, r9
     576:	e7ed      	b.n	554 <configApp+0xc8>
     578:	4663      	mov	r3, ip
     57a:	2b00      	cmp	r3, #0
     57c:	d13b      	bne.n	5f6 <configApp+0x16a>
			}
	}
		
	}	
	//set first task to execute
	rtc_calendar_set_alarm(&(mySchedule[currentTask]));	
     57e:	4b27      	ldr	r3, [pc, #156]	; (61c <configApp+0x190>)
     580:	781b      	ldrb	r3, [r3, #0]
     582:	0058      	lsls	r0, r3, #1
     584:	18c0      	adds	r0, r0, r3
     586:	0080      	lsls	r0, r0, #2
     588:	4b25      	ldr	r3, [pc, #148]	; (620 <configApp+0x194>)
     58a:	18c0      	adds	r0, r0, r3
     58c:	4b25      	ldr	r3, [pc, #148]	; (624 <configApp+0x198>)
     58e:	4798      	blx	r3

#undef ENABLE

static inline void timerInit1(void)
{
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
     590:	4a25      	ldr	r2, [pc, #148]	; (628 <configApp+0x19c>)
     592:	6a11      	ldr	r1, [r2, #32]
     594:	2380      	movs	r3, #128	; 0x80
     596:	011b      	lsls	r3, r3, #4
     598:	430b      	orrs	r3, r1
     59a:	6213      	str	r3, [r2, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC3_GCLK_ID) |
     59c:	4a23      	ldr	r2, [pc, #140]	; (62c <configApp+0x1a0>)
     59e:	4b24      	ldr	r3, [pc, #144]	; (630 <configApp+0x1a4>)
     5a0:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(2); // Take from clock generator 2 (8 MHz)

	TC3->COUNT16.CTRLA.reg =
     5a2:	4b24      	ldr	r3, [pc, #144]	; (634 <configApp+0x1a8>)
     5a4:	22a9      	movs	r2, #169	; 0xa9
     5a6:	0152      	lsls	r2, r2, #5
     5a8:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_MODE(TC_CTRLA_MODE_COUNT16_Val) |
	TC_CTRLA_WAVEGEN(TC_CTRLA_WAVEGEN_MFRQ_Val) |
	TC_CTRLA_PRESCALER(TC_CTRLA_PRESCALER_DIV64_Val) |// Divide clock by 64
	TC_CTRLA_PRESCSYNC(TC_CTRLA_PRESCSYNC_PRESC_Val);
	TC3->COUNT16.COUNT.reg = 0;
     5aa:	2200      	movs	r2, #0
     5ac:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = 2125u; // about 60 times per second
     5ae:	4a22      	ldr	r2, [pc, #136]	; (638 <configApp+0x1ac>)
     5b0:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.INTENSET.bit.MC0 = 1;
     5b2:	7b5a      	ldrb	r2, [r3, #13]
     5b4:	2110      	movs	r1, #16
     5b6:	430a      	orrs	r2, r1
     5b8:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.INTENSET.bit.OVF = 1;
     5ba:	7b5a      	ldrb	r2, [r3, #13]
     5bc:	2101      	movs	r1, #1
     5be:	430a      	orrs	r2, r1
     5c0:	735a      	strb	r2, [r3, #13]
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     5c2:	881a      	ldrh	r2, [r3, #0]
     5c4:	2102      	movs	r1, #2
     5c6:	430a      	orrs	r2, r1
     5c8:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     5ca:	4b1c      	ldr	r3, [pc, #112]	; (63c <configApp+0x1b0>)
     5cc:	2180      	movs	r1, #128	; 0x80
     5ce:	02c9      	lsls	r1, r1, #11
     5d0:	22c0      	movs	r2, #192	; 0xc0
     5d2:	0052      	lsls	r2, r2, #1
     5d4:	5099      	str	r1, [r3, r2]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5d6:	20c4      	movs	r0, #196	; 0xc4
     5d8:	0080      	lsls	r0, r0, #2
     5da:	581a      	ldr	r2, [r3, r0]
     5dc:	4c18      	ldr	r4, [pc, #96]	; (640 <configApp+0x1b4>)
     5de:	4022      	ands	r2, r4
     5e0:	501a      	str	r2, [r3, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5e2:	6019      	str	r1, [r3, #0]
	
	//initialize timer
	timerInit1();
	//Display temp:-- RH:--
	i2cLcdTemp();
     5e4:	4b17      	ldr	r3, [pc, #92]	; (644 <configApp+0x1b8>)
     5e6:	4798      	blx	r3
	i2cLcdRH();	
     5e8:	4b17      	ldr	r3, [pc, #92]	; (648 <configApp+0x1bc>)
     5ea:	4798      	blx	r3
     5ec:	bc1c      	pop	{r2, r3, r4}
     5ee:	4690      	mov	r8, r2
     5f0:	4699      	mov	r9, r3
     5f2:	46a2      	mov	sl, r4
     5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <configApp+0x190>)
     5f8:	7019      	strb	r1, [r3, #0]
     5fa:	e7c0      	b.n	57e <configApp+0xf2>
     5fc:	00000d79 	.word	0x00000d79
     600:	00000191 	.word	0x00000191
     604:	00001139 	.word	0x00001139
     608:	2000040c 	.word	0x2000040c
     60c:	20000450 	.word	0x20000450
     610:	2000041a 	.word	0x2000041a
     614:	00001239 	.word	0x00001239
     618:	0000043d 	.word	0x0000043d
     61c:	20000419 	.word	0x20000419
     620:	2000041c 	.word	0x2000041c
     624:	00001259 	.word	0x00001259
     628:	40000400 	.word	0x40000400
     62c:	0000421b 	.word	0x0000421b
     630:	40000c00 	.word	0x40000c00
     634:	42002c00 	.word	0x42002c00
     638:	0000084d 	.word	0x0000084d
     63c:	e000e100 	.word	0xe000e100
     640:	ff00ffff 	.word	0xff00ffff
     644:	0000108d 	.word	0x0000108d
     648:	000010c5 	.word	0x000010c5

0000064c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     64c:	4a02      	ldr	r2, [pc, #8]	; (658 <udi_cdc_comm_disable+0xc>)
     64e:	7813      	ldrb	r3, [r2, #0]
     650:	3b01      	subs	r3, #1
     652:	b2db      	uxtb	r3, r3
     654:	7013      	strb	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	200001ab 	.word	0x200001ab

0000065c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     65c:	2000      	movs	r0, #0
     65e:	4770      	bx	lr

00000660 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     660:	2000      	movs	r0, #0
     662:	4770      	bx	lr

00000664 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
     664:	4770      	bx	lr
	...

00000668 <udi_cdc_comm_enable>:
{
     668:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     66a:	2200      	movs	r2, #0
     66c:	4b10      	ldr	r3, [pc, #64]	; (6b0 <udi_cdc_comm_enable+0x48>)
     66e:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     670:	2100      	movs	r1, #0
     672:	4b10      	ldr	r3, [pc, #64]	; (6b4 <udi_cdc_comm_enable+0x4c>)
     674:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     676:	4b10      	ldr	r3, [pc, #64]	; (6b8 <udi_cdc_comm_enable+0x50>)
     678:	20a1      	movs	r0, #161	; 0xa1
     67a:	7018      	strb	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     67c:	3881      	subs	r0, #129	; 0x81
     67e:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     680:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     682:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     684:	381e      	subs	r0, #30
     686:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     688:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     68a:	4b0c      	ldr	r3, [pc, #48]	; (6bc <udi_cdc_comm_enable+0x54>)
     68c:	22e1      	movs	r2, #225	; 0xe1
     68e:	0252      	lsls	r2, r2, #9
     690:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     692:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     694:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     696:	2208      	movs	r2, #8
     698:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
     69a:	2000      	movs	r0, #0
     69c:	4b08      	ldr	r3, [pc, #32]	; (6c0 <udi_cdc_comm_enable+0x58>)
     69e:	4798      	blx	r3
     6a0:	2800      	cmp	r0, #0
     6a2:	d004      	beq.n	6ae <udi_cdc_comm_enable+0x46>
	udi_cdc_nb_comm_enabled++;
     6a4:	4a02      	ldr	r2, [pc, #8]	; (6b0 <udi_cdc_comm_enable+0x48>)
     6a6:	7813      	ldrb	r3, [r2, #0]
     6a8:	3301      	adds	r3, #1
     6aa:	b2db      	uxtb	r3, r3
     6ac:	7013      	strb	r3, [r2, #0]
}
     6ae:	bd10      	pop	{r4, pc}
     6b0:	200001ab 	.word	0x200001ab
     6b4:	20000240 	.word	0x20000240
     6b8:	200002d8 	.word	0x200002d8
     6bc:	200001a4 	.word	0x200001a4
     6c0:	000047f1 	.word	0x000047f1

000006c4 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     6c8:	4b46      	ldr	r3, [pc, #280]	; (7e4 <udi_cdc_tx_send+0x120>)
     6ca:	781b      	ldrb	r3, [r3, #0]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d001      	beq.n	6d4 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     6d0:	b004      	add	sp, #16
     6d2:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     6d4:	4b44      	ldr	r3, [pc, #272]	; (7e8 <udi_cdc_tx_send+0x124>)
     6d6:	4798      	blx	r3
     6d8:	2800      	cmp	r0, #0
     6da:	d043      	beq.n	764 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     6dc:	4b43      	ldr	r3, [pc, #268]	; (7ec <udi_cdc_tx_send+0x128>)
     6de:	881c      	ldrh	r4, [r3, #0]
     6e0:	4b43      	ldr	r3, [pc, #268]	; (7f0 <udi_cdc_tx_send+0x12c>)
     6e2:	4798      	blx	r3
     6e4:	4284      	cmp	r4, r0
     6e6:	d0f3      	beq.n	6d0 <udi_cdc_tx_send+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6e8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     6ec:	425a      	negs	r2, r3
     6ee:	4153      	adcs	r3, r2
     6f0:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     6f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     6f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     6f8:	2200      	movs	r2, #0
     6fa:	4b3e      	ldr	r3, [pc, #248]	; (7f4 <udi_cdc_tx_send+0x130>)
     6fc:	701a      	strb	r2, [r3, #0]
	return flags;
     6fe:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     700:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <udi_cdc_tx_send+0x134>)
     702:	781c      	ldrb	r4, [r3, #0]
     704:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     706:	0062      	lsls	r2, r4, #1
     708:	4b3c      	ldr	r3, [pc, #240]	; (7fc <udi_cdc_tx_send+0x138>)
     70a:	5ad3      	ldrh	r3, [r2, r3]
     70c:	2b00      	cmp	r3, #0
     70e:	d030      	beq.n	772 <udi_cdc_tx_send+0xae>
	sof_zlp_counter = 0;
     710:	2200      	movs	r2, #0
     712:	4b3b      	ldr	r3, [pc, #236]	; (800 <udi_cdc_tx_send+0x13c>)
     714:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     716:	4b3b      	ldr	r3, [pc, #236]	; (804 <udi_cdc_tx_send+0x140>)
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	2b00      	cmp	r3, #0
     71c:	d148      	bne.n	7b0 <udi_cdc_tx_send+0xec>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     71e:	4263      	negs	r3, r4
     720:	4163      	adcs	r3, r4
     722:	b2db      	uxtb	r3, r3
     724:	4a34      	ldr	r2, [pc, #208]	; (7f8 <udi_cdc_tx_send+0x134>)
     726:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     728:	2201      	movs	r2, #1
     72a:	4b2e      	ldr	r3, [pc, #184]	; (7e4 <udi_cdc_tx_send+0x120>)
     72c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     72e:	2d00      	cmp	r5, #0
     730:	d004      	beq.n	73c <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     732:	4b30      	ldr	r3, [pc, #192]	; (7f4 <udi_cdc_tx_send+0x130>)
     734:	701a      	strb	r2, [r3, #0]
     736:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     73a:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     73c:	0026      	movs	r6, r4
     73e:	0063      	lsls	r3, r4, #1
     740:	4a2e      	ldr	r2, [pc, #184]	; (7fc <udi_cdc_tx_send+0x138>)
     742:	5a9b      	ldrh	r3, [r3, r2]
     744:	001d      	movs	r5, r3
     746:	3d40      	subs	r5, #64	; 0x40
     748:	1e6a      	subs	r2, r5, #1
     74a:	4195      	sbcs	r5, r2
     74c:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     74e:	2b40      	cmp	r3, #64	; 0x40
     750:	d037      	beq.n	7c2 <udi_cdc_tx_send+0xfe>
		if (udd_is_high_speed()) {
     752:	4b25      	ldr	r3, [pc, #148]	; (7e8 <udi_cdc_tx_send+0x124>)
     754:	4798      	blx	r3
     756:	2800      	cmp	r0, #0
     758:	d02e      	beq.n	7b8 <udi_cdc_tx_send+0xf4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     75a:	4b25      	ldr	r3, [pc, #148]	; (7f0 <udi_cdc_tx_send+0x12c>)
     75c:	4798      	blx	r3
     75e:	4b23      	ldr	r3, [pc, #140]	; (7ec <udi_cdc_tx_send+0x128>)
     760:	8018      	strh	r0, [r3, #0]
     762:	e031      	b.n	7c8 <udi_cdc_tx_send+0x104>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     764:	4b21      	ldr	r3, [pc, #132]	; (7ec <udi_cdc_tx_send+0x128>)
     766:	881c      	ldrh	r4, [r3, #0]
     768:	4b27      	ldr	r3, [pc, #156]	; (808 <udi_cdc_tx_send+0x144>)
     76a:	4798      	blx	r3
     76c:	4284      	cmp	r4, r0
     76e:	d1bb      	bne.n	6e8 <udi_cdc_tx_send+0x24>
     770:	e7ae      	b.n	6d0 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     772:	4a23      	ldr	r2, [pc, #140]	; (800 <udi_cdc_tx_send+0x13c>)
     774:	8813      	ldrh	r3, [r2, #0]
     776:	3301      	adds	r3, #1
     778:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     77a:	4b1b      	ldr	r3, [pc, #108]	; (7e8 <udi_cdc_tx_send+0x124>)
     77c:	4798      	blx	r3
     77e:	2800      	cmp	r0, #0
     780:	d103      	bne.n	78a <udi_cdc_tx_send+0xc6>
     782:	4b1f      	ldr	r3, [pc, #124]	; (800 <udi_cdc_tx_send+0x13c>)
     784:	881b      	ldrh	r3, [r3, #0]
     786:	2b63      	cmp	r3, #99	; 0x63
     788:	d908      	bls.n	79c <udi_cdc_tx_send+0xd8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     78a:	4b17      	ldr	r3, [pc, #92]	; (7e8 <udi_cdc_tx_send+0x124>)
     78c:	4798      	blx	r3
     78e:	2800      	cmp	r0, #0
     790:	d0be      	beq.n	710 <udi_cdc_tx_send+0x4c>
     792:	4b1e      	ldr	r3, [pc, #120]	; (80c <udi_cdc_tx_send+0x148>)
     794:	4a1a      	ldr	r2, [pc, #104]	; (800 <udi_cdc_tx_send+0x13c>)
     796:	8812      	ldrh	r2, [r2, #0]
     798:	429a      	cmp	r2, r3
     79a:	d8b9      	bhi.n	710 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     79c:	2d00      	cmp	r5, #0
     79e:	d100      	bne.n	7a2 <udi_cdc_tx_send+0xde>
     7a0:	e796      	b.n	6d0 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     7a2:	2201      	movs	r2, #1
     7a4:	4b13      	ldr	r3, [pc, #76]	; (7f4 <udi_cdc_tx_send+0x130>)
     7a6:	701a      	strb	r2, [r3, #0]
     7a8:	f3bf 8f5f 	dmb	sy
     7ac:	b662      	cpsie	i
     7ae:	e78f      	b.n	6d0 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     7b0:	4262      	negs	r2, r4
     7b2:	4154      	adcs	r4, r2
     7b4:	b2e4      	uxtb	r4, r4
     7b6:	e7b7      	b.n	728 <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     7b8:	4b13      	ldr	r3, [pc, #76]	; (808 <udi_cdc_tx_send+0x144>)
     7ba:	4798      	blx	r3
     7bc:	4b0b      	ldr	r3, [pc, #44]	; (7ec <udi_cdc_tx_send+0x128>)
     7be:	8018      	strh	r0, [r3, #0]
     7c0:	e002      	b.n	7c8 <udi_cdc_tx_send+0x104>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     7c2:	2200      	movs	r2, #0
     7c4:	4b09      	ldr	r3, [pc, #36]	; (7ec <udi_cdc_tx_send+0x128>)
     7c6:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     7c8:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     7ca:	4b0c      	ldr	r3, [pc, #48]	; (7fc <udi_cdc_tx_send+0x138>)
     7cc:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     7ce:	01a4      	lsls	r4, r4, #6
     7d0:	4a0f      	ldr	r2, [pc, #60]	; (810 <udi_cdc_tx_send+0x14c>)
     7d2:	1914      	adds	r4, r2, r4
	udd_ep_run( ep,
     7d4:	4a0f      	ldr	r2, [pc, #60]	; (814 <udi_cdc_tx_send+0x150>)
     7d6:	9200      	str	r2, [sp, #0]
     7d8:	0022      	movs	r2, r4
     7da:	0029      	movs	r1, r5
     7dc:	2081      	movs	r0, #129	; 0x81
     7de:	4c0e      	ldr	r4, [pc, #56]	; (818 <udi_cdc_tx_send+0x154>)
     7e0:	47a0      	blx	r4
     7e2:	e775      	b.n	6d0 <udi_cdc_tx_send+0xc>
     7e4:	200002d4 	.word	0x200002d4
     7e8:	00002fc5 	.word	0x00002fc5
     7ec:	200002d0 	.word	0x200002d0
     7f0:	00002fd9 	.word	0x00002fd9
     7f4:	2000010c 	.word	0x2000010c
     7f8:	200002cc 	.word	0x200002cc
     7fc:	200002c8 	.word	0x200002c8
     800:	200001a0 	.word	0x200001a0
     804:	20000244 	.word	0x20000244
     808:	00002fc9 	.word	0x00002fc9
     80c:	0000031f 	.word	0x0000031f
     810:	20000248 	.word	0x20000248
     814:	0000081d 	.word	0x0000081d
     818:	000032d1 	.word	0x000032d1

0000081c <udi_cdc_data_sent>:
{
     81c:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     81e:	2800      	cmp	r0, #0
     820:	d000      	beq.n	824 <udi_cdc_data_sent+0x8>
}
     822:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     824:	4b07      	ldr	r3, [pc, #28]	; (844 <udi_cdc_data_sent+0x28>)
     826:	781b      	ldrb	r3, [r3, #0]
     828:	425a      	negs	r2, r3
     82a:	4153      	adcs	r3, r2
     82c:	005b      	lsls	r3, r3, #1
     82e:	2200      	movs	r2, #0
     830:	4905      	ldr	r1, [pc, #20]	; (848 <udi_cdc_data_sent+0x2c>)
     832:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     834:	4b05      	ldr	r3, [pc, #20]	; (84c <udi_cdc_data_sent+0x30>)
     836:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     838:	4b05      	ldr	r3, [pc, #20]	; (850 <udi_cdc_data_sent+0x34>)
     83a:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     83c:	4b05      	ldr	r3, [pc, #20]	; (854 <udi_cdc_data_sent+0x38>)
     83e:	4798      	blx	r3
     840:	e7ef      	b.n	822 <udi_cdc_data_sent+0x6>
     842:	46c0      	nop			; (mov r8, r8)
     844:	200002cc 	.word	0x200002cc
     848:	200002c8 	.word	0x200002c8
     84c:	20000244 	.word	0x20000244
     850:	200002d4 	.word	0x200002d4
     854:	000006c5 	.word	0x000006c5

00000858 <udi_cdc_data_sof_notify>:
{
     858:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     85a:	2000      	movs	r0, #0
     85c:	4b01      	ldr	r3, [pc, #4]	; (864 <udi_cdc_data_sof_notify+0xc>)
     85e:	4798      	blx	r3
}
     860:	bd10      	pop	{r4, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	000006c5 	.word	0x000006c5

00000868 <udi_cdc_data_disable>:
{
     868:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     86a:	4a06      	ldr	r2, [pc, #24]	; (884 <udi_cdc_data_disable+0x1c>)
     86c:	7813      	ldrb	r3, [r2, #0]
     86e:	3b01      	subs	r3, #1
     870:	b2db      	uxtb	r3, r3
     872:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     874:	7810      	ldrb	r0, [r2, #0]
     876:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     878:	4b03      	ldr	r3, [pc, #12]	; (888 <udi_cdc_data_disable+0x20>)
     87a:	4798      	blx	r3
	udi_cdc_data_running = false;
     87c:	2200      	movs	r2, #0
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <udi_cdc_data_disable+0x24>)
     880:	701a      	strb	r2, [r3, #0]
}
     882:	bd10      	pop	{r4, pc}
     884:	200001ac 	.word	0x200001ac
     888:	00004801 	.word	0x00004801
     88c:	200001a2 	.word	0x200001a2

00000890 <udi_cdc_comm_setup>:
{
     890:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     892:	4b20      	ldr	r3, [pc, #128]	; (914 <udi_cdc_comm_setup+0x84>)
     894:	781a      	ldrb	r2, [r3, #0]
     896:	b253      	sxtb	r3, r2
     898:	2b00      	cmp	r3, #0
     89a:	db05      	blt.n	8a8 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     89c:	2360      	movs	r3, #96	; 0x60
     89e:	4013      	ands	r3, r2
	return false;  // request Not supported
     8a0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     8a2:	2b20      	cmp	r3, #32
     8a4:	d014      	beq.n	8d0 <udi_cdc_comm_setup+0x40>
}
     8a6:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     8a8:	2360      	movs	r3, #96	; 0x60
     8aa:	4013      	ands	r3, r2
	return false;  // request Not supported
     8ac:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     8ae:	2b20      	cmp	r3, #32
     8b0:	d1f9      	bne.n	8a6 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     8b2:	4b18      	ldr	r3, [pc, #96]	; (914 <udi_cdc_comm_setup+0x84>)
     8b4:	785b      	ldrb	r3, [r3, #1]
     8b6:	2b21      	cmp	r3, #33	; 0x21
     8b8:	d129      	bne.n	90e <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     8ba:	4b16      	ldr	r3, [pc, #88]	; (914 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     8bc:	88db      	ldrh	r3, [r3, #6]
     8be:	2b07      	cmp	r3, #7
     8c0:	d1f1      	bne.n	8a6 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     8c2:	4b14      	ldr	r3, [pc, #80]	; (914 <udi_cdc_comm_setup+0x84>)
     8c4:	4a14      	ldr	r2, [pc, #80]	; (918 <udi_cdc_comm_setup+0x88>)
     8c6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     8c8:	2207      	movs	r2, #7
     8ca:	819a      	strh	r2, [r3, #12]
				return true;
     8cc:	3001      	adds	r0, #1
     8ce:	e7ea      	b.n	8a6 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     8d0:	4b10      	ldr	r3, [pc, #64]	; (914 <udi_cdc_comm_setup+0x84>)
     8d2:	785b      	ldrb	r3, [r3, #1]
     8d4:	2b20      	cmp	r3, #32
     8d6:	d003      	beq.n	8e0 <udi_cdc_comm_setup+0x50>
     8d8:	2b22      	cmp	r3, #34	; 0x22
     8da:	d00f      	beq.n	8fc <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     8dc:	2000      	movs	r0, #0
     8de:	e7e2      	b.n	8a6 <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     8e0:	4b0c      	ldr	r3, [pc, #48]	; (914 <udi_cdc_comm_setup+0x84>)
				if (sizeof(usb_cdc_line_coding_t) !=
     8e2:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     8e4:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     8e6:	2b07      	cmp	r3, #7
     8e8:	d1dd      	bne.n	8a6 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     8ea:	4b0a      	ldr	r3, [pc, #40]	; (914 <udi_cdc_comm_setup+0x84>)
     8ec:	4a0b      	ldr	r2, [pc, #44]	; (91c <udi_cdc_comm_setup+0x8c>)
     8ee:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     8f0:	4a09      	ldr	r2, [pc, #36]	; (918 <udi_cdc_comm_setup+0x88>)
     8f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     8f4:	2207      	movs	r2, #7
     8f6:	819a      	strh	r2, [r3, #12]
				return true;
     8f8:	3001      	adds	r0, #1
     8fa:	e7d4      	b.n	8a6 <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     8fc:	4b05      	ldr	r3, [pc, #20]	; (914 <udi_cdc_comm_setup+0x84>)
     8fe:	885b      	ldrh	r3, [r3, #2]
     900:	2101      	movs	r1, #1
     902:	4019      	ands	r1, r3
     904:	2000      	movs	r0, #0
     906:	4b06      	ldr	r3, [pc, #24]	; (920 <udi_cdc_comm_setup+0x90>)
     908:	4798      	blx	r3
				return true;
     90a:	2001      	movs	r0, #1
     90c:	e7cb      	b.n	8a6 <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     90e:	2000      	movs	r0, #0
     910:	e7c9      	b.n	8a6 <udi_cdc_comm_setup+0x16>
     912:	46c0      	nop			; (mov r8, r8)
     914:	200007d8 	.word	0x200007d8
     918:	200001a4 	.word	0x200001a4
     91c:	00000665 	.word	0x00000665
     920:	0000480d 	.word	0x0000480d

00000924 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     924:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     926:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     92a:	425a      	negs	r2, r3
     92c:	4153      	adcs	r3, r2
     92e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     930:	b672      	cpsid	i
     932:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     936:	2200      	movs	r2, #0
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <udi_cdc_multi_get_nb_received_data+0x40>)
     93a:	701a      	strb	r2, [r3, #0]
	return flags;
     93c:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     93e:	4b0a      	ldr	r3, [pc, #40]	; (968 <udi_cdc_multi_get_nb_received_data+0x44>)
     940:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     942:	4b0a      	ldr	r3, [pc, #40]	; (96c <udi_cdc_multi_get_nb_received_data+0x48>)
     944:	781b      	ldrb	r3, [r3, #0]
     946:	005b      	lsls	r3, r3, #1
     948:	4809      	ldr	r0, [pc, #36]	; (970 <udi_cdc_multi_get_nb_received_data+0x4c>)
     94a:	5a18      	ldrh	r0, [r3, r0]
     94c:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     94e:	2a00      	cmp	r2, #0
     950:	d005      	beq.n	95e <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     952:	2201      	movs	r2, #1
     954:	4b03      	ldr	r3, [pc, #12]	; (964 <udi_cdc_multi_get_nb_received_data+0x40>)
     956:	701a      	strb	r2, [r3, #0]
     958:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     95c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     95e:	b002      	add	sp, #8
     960:	4770      	bx	lr
     962:	46c0      	nop			; (mov r8, r8)
     964:	2000010c 	.word	0x2000010c
     968:	20000238 	.word	0x20000238
     96c:	20000234 	.word	0x20000234
     970:	20000230 	.word	0x20000230

00000974 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     974:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     976:	4b03      	ldr	r3, [pc, #12]	; (984 <udi_cdc_multi_is_rx_ready+0x10>)
     978:	4798      	blx	r3
     97a:	1e43      	subs	r3, r0, #1
     97c:	4198      	sbcs	r0, r3
     97e:	b2c0      	uxtb	r0, r0
}
     980:	bd10      	pop	{r4, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	00000925 	.word	0x00000925

00000988 <udi_cdc_rx_start>:
{
     988:	b510      	push	{r4, lr}
     98a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     98c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     990:	425a      	negs	r2, r3
     992:	4153      	adcs	r3, r2
     994:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     996:	b672      	cpsid	i
     998:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     99c:	2200      	movs	r2, #0
     99e:	4b1f      	ldr	r3, [pc, #124]	; (a1c <udi_cdc_rx_start+0x94>)
     9a0:	701a      	strb	r2, [r3, #0]
	return flags;
     9a2:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     9a4:	4a1e      	ldr	r2, [pc, #120]	; (a20 <udi_cdc_rx_start+0x98>)
     9a6:	7814      	ldrb	r4, [r2, #0]
     9a8:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     9aa:	4a1e      	ldr	r2, [pc, #120]	; (a24 <udi_cdc_rx_start+0x9c>)
     9ac:	7812      	ldrb	r2, [r2, #0]
     9ae:	2a00      	cmp	r2, #0
     9b0:	d107      	bne.n	9c2 <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     9b2:	4a1d      	ldr	r2, [pc, #116]	; (a28 <udi_cdc_rx_start+0xa0>)
     9b4:	8812      	ldrh	r2, [r2, #0]
     9b6:	0061      	lsls	r1, r4, #1
     9b8:	481c      	ldr	r0, [pc, #112]	; (a2c <udi_cdc_rx_start+0xa4>)
     9ba:	5a09      	ldrh	r1, [r1, r0]
     9bc:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     9be:	428a      	cmp	r2, r1
     9c0:	d20a      	bcs.n	9d8 <udi_cdc_rx_start+0x50>
		return false;
     9c2:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     9c4:	2b00      	cmp	r3, #0
     9c6:	d005      	beq.n	9d4 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     9c8:	2201      	movs	r2, #1
     9ca:	4b14      	ldr	r3, [pc, #80]	; (a1c <udi_cdc_rx_start+0x94>)
     9cc:	701a      	strb	r2, [r3, #0]
     9ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9d2:	b662      	cpsie	i
}
     9d4:	b004      	add	sp, #16
     9d6:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     9d8:	2100      	movs	r1, #0
     9da:	4a13      	ldr	r2, [pc, #76]	; (a28 <udi_cdc_rx_start+0xa0>)
     9dc:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     9de:	4262      	negs	r2, r4
     9e0:	4162      	adcs	r2, r4
     9e2:	b2d2      	uxtb	r2, r2
     9e4:	490e      	ldr	r1, [pc, #56]	; (a20 <udi_cdc_rx_start+0x98>)
     9e6:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     9e8:	2101      	movs	r1, #1
     9ea:	4a0e      	ldr	r2, [pc, #56]	; (a24 <udi_cdc_rx_start+0x9c>)
     9ec:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     9ee:	2b00      	cmp	r3, #0
     9f0:	d005      	beq.n	9fe <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     9f2:	2201      	movs	r2, #1
     9f4:	4b09      	ldr	r3, [pc, #36]	; (a1c <udi_cdc_rx_start+0x94>)
     9f6:	701a      	strb	r2, [r3, #0]
     9f8:	f3bf 8f5f 	dmb	sy
     9fc:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     9fe:	2000      	movs	r0, #0
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <udi_cdc_rx_start+0xa8>)
     a02:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
     a04:	01a4      	lsls	r4, r4, #6
     a06:	4a0b      	ldr	r2, [pc, #44]	; (a34 <udi_cdc_rx_start+0xac>)
     a08:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     a0a:	4b0b      	ldr	r3, [pc, #44]	; (a38 <udi_cdc_rx_start+0xb0>)
     a0c:	9300      	str	r3, [sp, #0]
     a0e:	2340      	movs	r3, #64	; 0x40
     a10:	2101      	movs	r1, #1
     a12:	2002      	movs	r0, #2
     a14:	4c09      	ldr	r4, [pc, #36]	; (a3c <udi_cdc_rx_start+0xb4>)
     a16:	47a0      	blx	r4
     a18:	e7dc      	b.n	9d4 <udi_cdc_rx_start+0x4c>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	2000010c 	.word	0x2000010c
     a20:	20000234 	.word	0x20000234
     a24:	2000023c 	.word	0x2000023c
     a28:	20000238 	.word	0x20000238
     a2c:	20000230 	.word	0x20000230
     a30:	00000975 	.word	0x00000975
     a34:	200001b0 	.word	0x200001b0
     a38:	00000ad1 	.word	0x00000ad1
     a3c:	000032d1 	.word	0x000032d1

00000a40 <udi_cdc_data_enable>:
{
     a40:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     a42:	2400      	movs	r4, #0
     a44:	4b15      	ldr	r3, [pc, #84]	; (a9c <udi_cdc_data_enable+0x5c>)
     a46:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     a48:	4b15      	ldr	r3, [pc, #84]	; (aa0 <udi_cdc_data_enable+0x60>)
     a4a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     a4c:	4b15      	ldr	r3, [pc, #84]	; (aa4 <udi_cdc_data_enable+0x64>)
     a4e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     a50:	4b15      	ldr	r3, [pc, #84]	; (aa8 <udi_cdc_data_enable+0x68>)
     a52:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     a54:	4b15      	ldr	r3, [pc, #84]	; (aac <udi_cdc_data_enable+0x6c>)
     a56:	2500      	movs	r5, #0
     a58:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     a5a:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     a5c:	4b14      	ldr	r3, [pc, #80]	; (ab0 <udi_cdc_data_enable+0x70>)
     a5e:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     a60:	2000      	movs	r0, #0
     a62:	4b14      	ldr	r3, [pc, #80]	; (ab4 <udi_cdc_data_enable+0x74>)
     a64:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     a66:	4b14      	ldr	r3, [pc, #80]	; (ab8 <udi_cdc_data_enable+0x78>)
     a68:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     a6a:	4b14      	ldr	r3, [pc, #80]	; (abc <udi_cdc_data_enable+0x7c>)
     a6c:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     a6e:	4b14      	ldr	r3, [pc, #80]	; (ac0 <udi_cdc_data_enable+0x80>)
     a70:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     a72:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     a74:	4b13      	ldr	r3, [pc, #76]	; (ac4 <udi_cdc_data_enable+0x84>)
     a76:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     a78:	2000      	movs	r0, #0
     a7a:	4b13      	ldr	r3, [pc, #76]	; (ac8 <udi_cdc_data_enable+0x88>)
     a7c:	4798      	blx	r3
     a7e:	2800      	cmp	r0, #0
     a80:	d007      	beq.n	a92 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     a82:	4a06      	ldr	r2, [pc, #24]	; (a9c <udi_cdc_data_enable+0x5c>)
     a84:	7813      	ldrb	r3, [r2, #0]
     a86:	3301      	adds	r3, #1
     a88:	b2db      	uxtb	r3, r3
     a8a:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     a8c:	7813      	ldrb	r3, [r2, #0]
     a8e:	2b01      	cmp	r3, #1
     a90:	d000      	beq.n	a94 <udi_cdc_data_enable+0x54>
}
     a92:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     a94:	2201      	movs	r2, #1
     a96:	4b0d      	ldr	r3, [pc, #52]	; (acc <udi_cdc_data_enable+0x8c>)
     a98:	701a      	strb	r2, [r3, #0]
     a9a:	e7fa      	b.n	a92 <udi_cdc_data_enable+0x52>
     a9c:	200001ac 	.word	0x200001ac
     aa0:	200002d4 	.word	0x200002d4
     aa4:	20000244 	.word	0x20000244
     aa8:	200002cc 	.word	0x200002cc
     aac:	200002c8 	.word	0x200002c8
     ab0:	200002d0 	.word	0x200002d0
     ab4:	000006c5 	.word	0x000006c5
     ab8:	2000023c 	.word	0x2000023c
     abc:	20000234 	.word	0x20000234
     ac0:	20000230 	.word	0x20000230
     ac4:	20000238 	.word	0x20000238
     ac8:	00000989 	.word	0x00000989
     acc:	200001a2 	.word	0x200001a2

00000ad0 <udi_cdc_data_received>:
{
     ad0:	b510      	push	{r4, lr}
     ad2:	b082      	sub	sp, #8
     ad4:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     ad6:	2800      	cmp	r0, #0
     ad8:	d110      	bne.n	afc <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     ada:	4b0f      	ldr	r3, [pc, #60]	; (b18 <udi_cdc_data_received+0x48>)
     adc:	781a      	ldrb	r2, [r3, #0]
     ade:	4253      	negs	r3, r2
     ae0:	415a      	adcs	r2, r3
     ae2:	b2d2      	uxtb	r2, r2
	if (!n) {
     ae4:	2900      	cmp	r1, #0
     ae6:	d00b      	beq.n	b00 <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     ae8:	b289      	uxth	r1, r1
     aea:	0052      	lsls	r2, r2, #1
     aec:	4b0b      	ldr	r3, [pc, #44]	; (b1c <udi_cdc_data_received+0x4c>)
     aee:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     af0:	2200      	movs	r2, #0
     af2:	4b0b      	ldr	r3, [pc, #44]	; (b20 <udi_cdc_data_received+0x50>)
     af4:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     af6:	2000      	movs	r0, #0
     af8:	4b0a      	ldr	r3, [pc, #40]	; (b24 <udi_cdc_data_received+0x54>)
     afa:	4798      	blx	r3
}
     afc:	b002      	add	sp, #8
     afe:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     b00:	0192      	lsls	r2, r2, #6
     b02:	4b09      	ldr	r3, [pc, #36]	; (b28 <udi_cdc_data_received+0x58>)
     b04:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     b06:	4b09      	ldr	r3, [pc, #36]	; (b2c <udi_cdc_data_received+0x5c>)
     b08:	9300      	str	r3, [sp, #0]
     b0a:	2340      	movs	r3, #64	; 0x40
     b0c:	3101      	adds	r1, #1
     b0e:	0020      	movs	r0, r4
     b10:	4c07      	ldr	r4, [pc, #28]	; (b30 <udi_cdc_data_received+0x60>)
     b12:	47a0      	blx	r4
		return;
     b14:	e7f2      	b.n	afc <udi_cdc_data_received+0x2c>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	20000234 	.word	0x20000234
     b1c:	20000230 	.word	0x20000230
     b20:	2000023c 	.word	0x2000023c
     b24:	00000989 	.word	0x00000989
     b28:	200001b0 	.word	0x200001b0
     b2c:	00000ad1 	.word	0x00000ad1
     b30:	000032d1 	.word	0x000032d1

00000b34 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     b34:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     b36:	2000      	movs	r0, #0
     b38:	4b01      	ldr	r3, [pc, #4]	; (b40 <udi_cdc_is_rx_ready+0xc>)
     b3a:	4798      	blx	r3
}
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	00000975 	.word	0x00000975

00000b44 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     b44:	b5f0      	push	{r4, r5, r6, r7, lr}
     b46:	46d6      	mov	lr, sl
     b48:	464f      	mov	r7, r9
     b4a:	4646      	mov	r6, r8
     b4c:	b5c0      	push	{r6, r7, lr}
     b4e:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     b50:	4b27      	ldr	r3, [pc, #156]	; (bf0 <udi_cdc_multi_getc+0xac>)
     b52:	799b      	ldrb	r3, [r3, #6]
     b54:	3b09      	subs	r3, #9
     b56:	425a      	negs	r2, r3
     b58:	4153      	adcs	r3, r2
     b5a:	b2db      	uxtb	r3, r3
     b5c:	4699      	mov	r9, r3
	int rx_data = 0;
     b5e:	2300      	movs	r3, #0
     b60:	469c      	mov	ip, r3
	cpu_irq_disable();
     b62:	4b24      	ldr	r3, [pc, #144]	; (bf4 <udi_cdc_multi_getc+0xb0>)
     b64:	4698      	mov	r8, r3
     b66:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     b68:	4e23      	ldr	r6, [pc, #140]	; (bf8 <udi_cdc_multi_getc+0xb4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     b6a:	4c24      	ldr	r4, [pc, #144]	; (bfc <udi_cdc_multi_getc+0xb8>)
     b6c:	e005      	b.n	b7a <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     b6e:	428b      	cmp	r3, r1
     b70:	d329      	bcc.n	bc6 <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     b72:	4b23      	ldr	r3, [pc, #140]	; (c00 <udi_cdc_multi_getc+0xbc>)
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d01d      	beq.n	bb6 <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b7a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     b7e:	425a      	negs	r2, r3
     b80:	4153      	adcs	r3, r2
     b82:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     b84:	b672      	cpsid	i
     b86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     b8a:	4643      	mov	r3, r8
     b8c:	701f      	strb	r7, [r3, #0]
	return flags;
     b8e:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     b90:	8833      	ldrh	r3, [r6, #0]
     b92:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     b94:	7822      	ldrb	r2, [r4, #0]
     b96:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     b98:	0055      	lsls	r5, r2, #1
     b9a:	491a      	ldr	r1, [pc, #104]	; (c04 <udi_cdc_multi_getc+0xc0>)
     b9c:	5a69      	ldrh	r1, [r5, r1]
     b9e:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     ba0:	2800      	cmp	r0, #0
     ba2:	d0e4      	beq.n	b6e <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     ba4:	2001      	movs	r0, #1
     ba6:	4682      	mov	sl, r0
     ba8:	4812      	ldr	r0, [pc, #72]	; (bf4 <udi_cdc_multi_getc+0xb0>)
     baa:	4655      	mov	r5, sl
     bac:	7005      	strb	r5, [r0, #0]
     bae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bb2:	b662      	cpsie	i
     bb4:	e7db      	b.n	b6e <udi_cdc_multi_getc+0x2a>
			return 0;
     bb6:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     bb8:	0028      	movs	r0, r5
     bba:	b002      	add	sp, #8
     bbc:	bc1c      	pop	{r2, r3, r4}
     bbe:	4690      	mov	r8, r2
     bc0:	4699      	mov	r9, r3
     bc2:	46a2      	mov	sl, r4
     bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     bc6:	0192      	lsls	r2, r2, #6
     bc8:	490f      	ldr	r1, [pc, #60]	; (c08 <udi_cdc_multi_getc+0xc4>)
     bca:	188a      	adds	r2, r1, r2
     bcc:	5cd2      	ldrb	r2, [r2, r3]
     bce:	4665      	mov	r5, ip
     bd0:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     bd2:	3301      	adds	r3, #1
     bd4:	b29b      	uxth	r3, r3
     bd6:	4a08      	ldr	r2, [pc, #32]	; (bf8 <udi_cdc_multi_getc+0xb4>)
     bd8:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     bda:	2000      	movs	r0, #0
     bdc:	4b0b      	ldr	r3, [pc, #44]	; (c0c <udi_cdc_multi_getc+0xc8>)
     bde:	4798      	blx	r3
	if (b_databit_9) {
     be0:	464b      	mov	r3, r9
     be2:	2b00      	cmp	r3, #0
     be4:	d0e8      	beq.n	bb8 <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     be6:	022b      	lsls	r3, r5, #8
     be8:	469c      	mov	ip, r3
		b_databit_9 = false;
     bea:	2300      	movs	r3, #0
     bec:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     bee:	e7c4      	b.n	b7a <udi_cdc_multi_getc+0x36>
     bf0:	200001a4 	.word	0x200001a4
     bf4:	2000010c 	.word	0x2000010c
     bf8:	20000238 	.word	0x20000238
     bfc:	20000234 	.word	0x20000234
     c00:	200001a2 	.word	0x200001a2
     c04:	20000230 	.word	0x20000230
     c08:	200001b0 	.word	0x200001b0
     c0c:	00000989 	.word	0x00000989

00000c10 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     c10:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     c12:	2000      	movs	r0, #0
     c14:	4b01      	ldr	r3, [pc, #4]	; (c1c <udi_cdc_getc+0xc>)
     c16:	4798      	blx	r3
}
     c18:	bd10      	pop	{r4, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00000b45 	.word	0x00000b45

00000c20 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     c20:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c22:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c26:	425a      	negs	r2, r3
     c28:	4153      	adcs	r3, r2
     c2a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     c2c:	b672      	cpsid	i
     c2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c32:	2200      	movs	r2, #0
     c34:	4b14      	ldr	r3, [pc, #80]	; (c88 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     c36:	701a      	strb	r2, [r3, #0]
	return flags;
     c38:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     c3a:	4b14      	ldr	r3, [pc, #80]	; (c8c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     c40:	0058      	lsls	r0, r3, #1
     c42:	4a13      	ldr	r2, [pc, #76]	; (c90 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     c44:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     c46:	2a40      	cmp	r2, #64	; 0x40
     c48:	d00b      	beq.n	c62 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     c4a:	2040      	movs	r0, #64	; 0x40
     c4c:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     c4e:	2900      	cmp	r1, #0
     c50:	d005      	beq.n	c5e <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
     c52:	2201      	movs	r2, #1
     c54:	4b0c      	ldr	r3, [pc, #48]	; (c88 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     c56:	701a      	strb	r2, [r3, #0]
     c58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c5c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     c5e:	b002      	add	sp, #8
     c60:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     c62:	480c      	ldr	r0, [pc, #48]	; (c94 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     c64:	7800      	ldrb	r0, [r0, #0]
     c66:	2800      	cmp	r0, #0
     c68:	d1ef      	bne.n	c4a <udi_cdc_multi_get_free_tx_buffer+0x2a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     c6a:	480b      	ldr	r0, [pc, #44]	; (c98 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     c6c:	7800      	ldrb	r0, [r0, #0]
     c6e:	2800      	cmp	r0, #0
     c70:	d1eb      	bne.n	c4a <udi_cdc_multi_get_free_tx_buffer+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
     c72:	3001      	adds	r0, #1
     c74:	4a08      	ldr	r2, [pc, #32]	; (c98 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     c76:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     c78:	425a      	negs	r2, r3
     c7a:	4153      	adcs	r3, r2
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4a03      	ldr	r2, [pc, #12]	; (c8c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     c80:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     c82:	2200      	movs	r2, #0
     c84:	e7e1      	b.n	c4a <udi_cdc_multi_get_free_tx_buffer+0x2a>
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	2000010c 	.word	0x2000010c
     c8c:	200002cc 	.word	0x200002cc
     c90:	200002c8 	.word	0x200002c8
     c94:	200002d4 	.word	0x200002d4
     c98:	20000244 	.word	0x20000244

00000c9c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     c9c:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <udi_cdc_multi_is_tx_ready+0x10>)
     ca0:	4798      	blx	r3
     ca2:	1e43      	subs	r3, r0, #1
     ca4:	4198      	sbcs	r0, r3
     ca6:	b2c0      	uxtb	r0, r0
}
     ca8:	bd10      	pop	{r4, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	00000c21 	.word	0x00000c21

00000cb0 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	46de      	mov	lr, fp
     cb4:	4657      	mov	r7, sl
     cb6:	464e      	mov	r6, r9
     cb8:	4645      	mov	r5, r8
     cba:	b5e0      	push	{r5, r6, r7, lr}
     cbc:	b083      	sub	sp, #12
     cbe:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     cc0:	4b22      	ldr	r3, [pc, #136]	; (d4c <udi_cdc_multi_putc+0x9c>)
     cc2:	799d      	ldrb	r5, [r3, #6]
     cc4:	3d09      	subs	r5, #9
     cc6:	426b      	negs	r3, r5
     cc8:	415d      	adcs	r5, r3
     cca:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     ccc:	4e20      	ldr	r6, [pc, #128]	; (d50 <udi_cdc_multi_putc+0xa0>)
	cpu_irq_disable();
     cce:	4b21      	ldr	r3, [pc, #132]	; (d54 <udi_cdc_multi_putc+0xa4>)
     cd0:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     cd2:	4b21      	ldr	r3, [pc, #132]	; (d58 <udi_cdc_multi_putc+0xa8>)
     cd4:	469a      	mov	sl, r3
     cd6:	e027      	b.n	d28 <udi_cdc_multi_putc+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     cd8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     cdc:	425a      	negs	r2, r3
     cde:	4153      	adcs	r3, r2
     ce0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     ce2:	b672      	cpsid	i
     ce4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     ce8:	2300      	movs	r3, #0
     cea:	4642      	mov	r2, r8
     cec:	7013      	strb	r3, [r2, #0]
	return flags;
     cee:	9b01      	ldr	r3, [sp, #4]
     cf0:	469b      	mov	fp, r3
     cf2:	4653      	mov	r3, sl
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     cf8:	4a18      	ldr	r2, [pc, #96]	; (d5c <udi_cdc_multi_putc+0xac>)
     cfa:	4694      	mov	ip, r2
     cfc:	005f      	lsls	r7, r3, #1
     cfe:	5ab9      	ldrh	r1, [r7, r2]
     d00:	1c4a      	adds	r2, r1, #1
     d02:	4660      	mov	r0, ip
     d04:	523a      	strh	r2, [r7, r0]
     d06:	019b      	lsls	r3, r3, #6
     d08:	4a15      	ldr	r2, [pc, #84]	; (d60 <udi_cdc_multi_putc+0xb0>)
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
     d0e:	465b      	mov	r3, fp
     d10:	2b00      	cmp	r3, #0
     d12:	d005      	beq.n	d20 <udi_cdc_multi_putc+0x70>
		cpu_irq_enable();
     d14:	2201      	movs	r2, #1
     d16:	4b0f      	ldr	r3, [pc, #60]	; (d54 <udi_cdc_multi_putc+0xa4>)
     d18:	701a      	strb	r2, [r3, #0]
     d1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d1e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     d20:	2d00      	cmp	r5, #0
     d22:	d010      	beq.n	d46 <udi_cdc_multi_putc+0x96>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     d24:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     d26:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     d28:	2000      	movs	r0, #0
     d2a:	47b0      	blx	r6
     d2c:	2800      	cmp	r0, #0
     d2e:	d1d3      	bne.n	cd8 <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     d30:	4b0c      	ldr	r3, [pc, #48]	; (d64 <udi_cdc_multi_putc+0xb4>)
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d1f7      	bne.n	d28 <udi_cdc_multi_putc+0x78>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     d38:	b003      	add	sp, #12
     d3a:	bc3c      	pop	{r2, r3, r4, r5}
     d3c:	4690      	mov	r8, r2
     d3e:	4699      	mov	r9, r3
     d40:	46a2      	mov	sl, r4
     d42:	46ab      	mov	fp, r5
     d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     d46:	2001      	movs	r0, #1
     d48:	e7f6      	b.n	d38 <udi_cdc_multi_putc+0x88>
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	200001a4 	.word	0x200001a4
     d50:	00000c9d 	.word	0x00000c9d
     d54:	2000010c 	.word	0x2000010c
     d58:	200002cc 	.word	0x200002cc
     d5c:	200002c8 	.word	0x200002c8
     d60:	20000248 	.word	0x20000248
     d64:	200001a2 	.word	0x200001a2

00000d68 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     d68:	b510      	push	{r4, lr}
     d6a:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     d6c:	2000      	movs	r0, #0
     d6e:	4b01      	ldr	r3, [pc, #4]	; (d74 <udi_cdc_putc+0xc>)
     d70:	4798      	blx	r3
}
     d72:	bd10      	pop	{r4, pc}
     d74:	00000cb1 	.word	0x00000cb1

00000d78 <keypadInit>:
	'*','0','#','D',
	0xFF
};

	void keypadInit()
	{	
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
		//set rows as outputs
		REG_PORT_DIRSET1 = PORT_ROW1;
     d7a:	4a1e      	ldr	r2, [pc, #120]	; (df4 <keypadInit+0x7c>)
     d7c:	2120      	movs	r1, #32
     d7e:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW1;
     d80:	4b1d      	ldr	r3, [pc, #116]	; (df8 <keypadInit+0x80>)
     d82:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW2;
     d84:	3918      	subs	r1, #24
     d86:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW2;
     d88:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW3;
     d8a:	3178      	adds	r1, #120	; 0x78
     d8c:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW3;
     d8e:	6019      	str	r1, [r3, #0]
		
		REG_PORT_DIRSET1 = PORT_ROW4;
     d90:	397e      	subs	r1, #126	; 0x7e
     d92:	6011      	str	r1, [r2, #0]
		REG_PORT_OUTCLR1 = PORT_ROW4;
     d94:	6019      	str	r1, [r3, #0]
		
		//set cols as inputs
		REG_PORT_DIRCLR1 = PORT_COL1;
     d96:	4919      	ldr	r1, [pc, #100]	; (dfc <keypadInit+0x84>)
     d98:	2610      	movs	r6, #16
     d9a:	600e      	str	r6, [r1, #0]
		PORT->Group[GROUP_COL1].PINCFG[PIN_COL1].bit.INEN = 1;
     d9c:	4b18      	ldr	r3, [pc, #96]	; (e00 <keypadInit+0x88>)
     d9e:	22c4      	movs	r2, #196	; 0xc4
     da0:	5c98      	ldrb	r0, [r3, r2]
     da2:	2402      	movs	r4, #2
     da4:	4320      	orrs	r0, r4
     da6:	5498      	strb	r0, [r3, r2]
		PORT->Group[GROUP_COL1].PINCFG[PIN_COL1].bit.PULLEN = 1;
     da8:	5c9d      	ldrb	r5, [r3, r2]
     daa:	2704      	movs	r7, #4
     dac:	2004      	movs	r0, #4
     dae:	4305      	orrs	r5, r0
     db0:	549d      	strb	r5, [r3, r2]
		REG_PORT_CTRL1 = PORT_COL1;
     db2:	4a14      	ldr	r2, [pc, #80]	; (e04 <keypadInit+0x8c>)
     db4:	6016      	str	r6, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL2;
     db6:	600f      	str	r7, [r1, #0]
		PORT->Group[GROUP_COL2].PINCFG[PIN_COL2].bit.INEN = 1;
     db8:	25c2      	movs	r5, #194	; 0xc2
     dba:	5d5e      	ldrb	r6, [r3, r5]
     dbc:	4326      	orrs	r6, r4
     dbe:	555e      	strb	r6, [r3, r5]
		PORT->Group[GROUP_COL2].PINCFG[PIN_COL2].bit.PULLEN = 1;
     dc0:	5d5e      	ldrb	r6, [r3, r5]
     dc2:	4306      	orrs	r6, r0
     dc4:	555e      	strb	r6, [r3, r5]
		REG_PORT_CTRL1 = PORT_COL2;
     dc6:	6017      	str	r7, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL3;
     dc8:	373c      	adds	r7, #60	; 0x3c
     dca:	600f      	str	r7, [r1, #0]
		PORT->Group[GROUP_COL3].PINCFG[PIN_COL3].bit.INEN = 1;
     dcc:	3504      	adds	r5, #4
     dce:	5d5e      	ldrb	r6, [r3, r5]
     dd0:	4326      	orrs	r6, r4
     dd2:	555e      	strb	r6, [r3, r5]
		PORT->Group[GROUP_COL3].PINCFG[PIN_COL3].bit.PULLEN = 1;
     dd4:	5d5e      	ldrb	r6, [r3, r5]
     dd6:	4306      	orrs	r6, r0
     dd8:	555e      	strb	r6, [r3, r5]
		REG_PORT_CTRL1 = PORT_COL3;
     dda:	6017      	str	r7, [r2, #0]
		
		REG_PORT_DIRCLR1 = PORT_COL4;
     ddc:	2601      	movs	r6, #1
     dde:	600e      	str	r6, [r1, #0]
		PORT->Group[GROUP_COL4].PINCFG[PIN_COL4].bit.INEN = 1;
     de0:	21c0      	movs	r1, #192	; 0xc0
     de2:	5c5d      	ldrb	r5, [r3, r1]
     de4:	432c      	orrs	r4, r5
     de6:	545c      	strb	r4, [r3, r1]
		PORT->Group[GROUP_COL4].PINCFG[PIN_COL4].bit.PULLEN = 1;
     de8:	5c5c      	ldrb	r4, [r3, r1]
     dea:	4320      	orrs	r0, r4
     dec:	5458      	strb	r0, [r3, r1]
		REG_PORT_CTRL1 = PORT_COL4;
     dee:	6016      	str	r6, [r2, #0]
	}
     df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	41004488 	.word	0x41004488
     df8:	41004494 	.word	0x41004494
     dfc:	41004484 	.word	0x41004484
     e00:	41004400 	.word	0x41004400
     e04:	410044a4 	.word	0x410044a4

00000e08 <keypadScan>:
	char keypadScan()
	{
		 //This routine returns the first key found to be pressed during the scan.
		char key = 16;
		
		REG_PORT_OUTSET1 = PORT_ROW1;
     e08:	2220      	movs	r2, #32
     e0a:	4b36      	ldr	r3, [pc, #216]	; (ee4 <keypadScan+0xdc>)
     e0c:	601a      	str	r2, [r3, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     e0e:	4b36      	ldr	r3, [pc, #216]	; (ee8 <keypadScan+0xe0>)
     e10:	681a      	ldr	r2, [r3, #0]
     e12:	2310      	movs	r3, #16
     e14:	4013      	ands	r3, r2
		key = 0; 
     e16:	425a      	negs	r2, r3
     e18:	4153      	adcs	r3, r2
     e1a:	011b      	lsls	r3, r3, #4
		if(REG_PORT_IN1&PORT_COL2)
     e1c:	4a32      	ldr	r2, [pc, #200]	; (ee8 <keypadScan+0xe0>)
     e1e:	6812      	ldr	r2, [r2, #0]
     e20:	0752      	lsls	r2, r2, #29
     e22:	d500      	bpl.n	e26 <keypadScan+0x1e>
		key = 1;
     e24:	2301      	movs	r3, #1
		if(REG_PORT_IN1&PORT_COL3)
     e26:	4a30      	ldr	r2, [pc, #192]	; (ee8 <keypadScan+0xe0>)
     e28:	6812      	ldr	r2, [r2, #0]
     e2a:	0652      	lsls	r2, r2, #25
     e2c:	d500      	bpl.n	e30 <keypadScan+0x28>
		key = 2;
     e2e:	2302      	movs	r3, #2
		if(REG_PORT_IN1&PORT_COL4)
     e30:	4a2d      	ldr	r2, [pc, #180]	; (ee8 <keypadScan+0xe0>)
     e32:	6812      	ldr	r2, [r2, #0]
     e34:	07d2      	lsls	r2, r2, #31
     e36:	d500      	bpl.n	e3a <keypadScan+0x32>
		key = 3;
     e38:	2303      	movs	r3, #3

		REG_PORT_OUTCLR1 = PORT_ROW1;
     e3a:	2120      	movs	r1, #32
     e3c:	4a2b      	ldr	r2, [pc, #172]	; (eec <keypadScan+0xe4>)
     e3e:	6011      	str	r1, [r2, #0]
		
		REG_PORT_OUTSET1 = PORT_ROW2;
     e40:	3918      	subs	r1, #24
     e42:	4a28      	ldr	r2, [pc, #160]	; (ee4 <keypadScan+0xdc>)
     e44:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     e46:	4a28      	ldr	r2, [pc, #160]	; (ee8 <keypadScan+0xe0>)
     e48:	6812      	ldr	r2, [r2, #0]
     e4a:	06d2      	lsls	r2, r2, #27
     e4c:	d500      	bpl.n	e50 <keypadScan+0x48>
		key = 4;
     e4e:	2304      	movs	r3, #4
		if(REG_PORT_IN1&PORT_COL2)
     e50:	4a25      	ldr	r2, [pc, #148]	; (ee8 <keypadScan+0xe0>)
     e52:	6812      	ldr	r2, [r2, #0]
     e54:	0752      	lsls	r2, r2, #29
     e56:	d500      	bpl.n	e5a <keypadScan+0x52>
		key = 5;
     e58:	2305      	movs	r3, #5
		if(REG_PORT_IN1&PORT_COL3)
     e5a:	4a23      	ldr	r2, [pc, #140]	; (ee8 <keypadScan+0xe0>)
     e5c:	6812      	ldr	r2, [r2, #0]
     e5e:	0652      	lsls	r2, r2, #25
     e60:	d500      	bpl.n	e64 <keypadScan+0x5c>
		key = 6;
     e62:	2306      	movs	r3, #6
		if(REG_PORT_IN1&PORT_COL4)
     e64:	4a20      	ldr	r2, [pc, #128]	; (ee8 <keypadScan+0xe0>)
     e66:	6812      	ldr	r2, [r2, #0]
     e68:	07d2      	lsls	r2, r2, #31
     e6a:	d500      	bpl.n	e6e <keypadScan+0x66>
		key = 7;
     e6c:	2307      	movs	r3, #7

		REG_PORT_OUTCLR1 = PORT_ROW2;
     e6e:	2108      	movs	r1, #8
     e70:	4a1e      	ldr	r2, [pc, #120]	; (eec <keypadScan+0xe4>)
     e72:	6011      	str	r1, [r2, #0]

		REG_PORT_OUTSET1 = PORT_ROW3;
     e74:	3178      	adds	r1, #120	; 0x78
     e76:	4a1b      	ldr	r2, [pc, #108]	; (ee4 <keypadScan+0xdc>)
     e78:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     e7a:	4a1b      	ldr	r2, [pc, #108]	; (ee8 <keypadScan+0xe0>)
     e7c:	6812      	ldr	r2, [r2, #0]
     e7e:	06d2      	lsls	r2, r2, #27
     e80:	d500      	bpl.n	e84 <keypadScan+0x7c>
		key = 8;
     e82:	2308      	movs	r3, #8
		if(REG_PORT_IN1&PORT_COL2)
     e84:	4a18      	ldr	r2, [pc, #96]	; (ee8 <keypadScan+0xe0>)
     e86:	6812      	ldr	r2, [r2, #0]
     e88:	0752      	lsls	r2, r2, #29
     e8a:	d500      	bpl.n	e8e <keypadScan+0x86>
		key = 9;
     e8c:	2309      	movs	r3, #9
		if(REG_PORT_IN1&PORT_COL3)
     e8e:	4a16      	ldr	r2, [pc, #88]	; (ee8 <keypadScan+0xe0>)
     e90:	6812      	ldr	r2, [r2, #0]
     e92:	0652      	lsls	r2, r2, #25
     e94:	d500      	bpl.n	e98 <keypadScan+0x90>
		key = 10;
     e96:	230a      	movs	r3, #10
		if(REG_PORT_IN1&PORT_COL4)
     e98:	4a13      	ldr	r2, [pc, #76]	; (ee8 <keypadScan+0xe0>)
     e9a:	6812      	ldr	r2, [r2, #0]
     e9c:	07d2      	lsls	r2, r2, #31
     e9e:	d500      	bpl.n	ea2 <keypadScan+0x9a>
		key = 11;
     ea0:	230b      	movs	r3, #11

		REG_PORT_OUTCLR1 = PORT_ROW3;
     ea2:	2180      	movs	r1, #128	; 0x80
     ea4:	4a11      	ldr	r2, [pc, #68]	; (eec <keypadScan+0xe4>)
     ea6:	6011      	str	r1, [r2, #0]
		
		REG_PORT_OUTSET1 = PORT_ROW4;
     ea8:	397e      	subs	r1, #126	; 0x7e
     eaa:	4a0e      	ldr	r2, [pc, #56]	; (ee4 <keypadScan+0xdc>)
     eac:	6011      	str	r1, [r2, #0]
		
		if(REG_PORT_IN1&PORT_COL1)
     eae:	4a0e      	ldr	r2, [pc, #56]	; (ee8 <keypadScan+0xe0>)
     eb0:	6812      	ldr	r2, [r2, #0]
     eb2:	06d2      	lsls	r2, r2, #27
     eb4:	d500      	bpl.n	eb8 <keypadScan+0xb0>
		key = 12;
     eb6:	230c      	movs	r3, #12
		if(REG_PORT_IN1&PORT_COL2)
     eb8:	4a0b      	ldr	r2, [pc, #44]	; (ee8 <keypadScan+0xe0>)
     eba:	6812      	ldr	r2, [r2, #0]
     ebc:	0752      	lsls	r2, r2, #29
     ebe:	d500      	bpl.n	ec2 <keypadScan+0xba>
		key = 13;
     ec0:	230d      	movs	r3, #13
		if(REG_PORT_IN1&PORT_COL3)
     ec2:	4a09      	ldr	r2, [pc, #36]	; (ee8 <keypadScan+0xe0>)
     ec4:	6812      	ldr	r2, [r2, #0]
     ec6:	0652      	lsls	r2, r2, #25
     ec8:	d500      	bpl.n	ecc <keypadScan+0xc4>
		key = 14;
     eca:	230e      	movs	r3, #14
		if(REG_PORT_IN1&PORT_COL4)
     ecc:	4a06      	ldr	r2, [pc, #24]	; (ee8 <keypadScan+0xe0>)
     ece:	6812      	ldr	r2, [r2, #0]
     ed0:	07d2      	lsls	r2, r2, #31
     ed2:	d500      	bpl.n	ed6 <keypadScan+0xce>
		key = 15;
     ed4:	230f      	movs	r3, #15

		REG_PORT_OUTCLR1 = PORT_ROW4;			
     ed6:	2102      	movs	r1, #2
     ed8:	4a04      	ldr	r2, [pc, #16]	; (eec <keypadScan+0xe4>)
     eda:	6011      	str	r1, [r2, #0]
		
		return keyPadMatrix[key];
     edc:	4a04      	ldr	r2, [pc, #16]	; (ef0 <keypadScan+0xe8>)
     ede:	5cd0      	ldrb	r0, [r2, r3]
	}
     ee0:	4770      	bx	lr
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	41004498 	.word	0x41004498
     ee8:	410044a0 	.word	0x410044a0
     eec:	41004494 	.word	0x41004494
     ef0:	20000028 	.word	0x20000028

00000ef4 <i2cLcdClear>:
	LCD_write_buffer[2] = iRows;
	i2c_write(LCD_write_buffer,3,LCD_SLAVE_ADDR);
    timerDelay(5);
}
      
void i2cLcdClear() {
     ef4:	b510      	push	{r4, lr}
	LCD_write_buffer[0] = 0x02;
     ef6:	2302      	movs	r3, #2
     ef8:	4a21      	ldr	r2, [pc, #132]	; (f80 <i2cLcdClear+0x8c>)
     efa:	7013      	strb	r3, [r2, #0]


//-----------------------------------------------------------------------------
inline bool i2c_write(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     efc:	4a21      	ldr	r2, [pc, #132]	; (f84 <i2cLcdClear+0x90>)
     efe:	6253      	str	r3, [r2, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     f00:	0011      	movs	r1, r2
     f02:	2201      	movs	r2, #1
     f04:	7e0b      	ldrb	r3, [r1, #24]
     f06:	4213      	tst	r3, r2
     f08:	d0fc      	beq.n	f04 <i2cLcdClear+0x10>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f0a:	4b1e      	ldr	r3, [pc, #120]	; (f84 <i2cLcdClear+0x90>)
     f0c:	8b5b      	ldrh	r3, [r3, #26]
     f0e:	075b      	lsls	r3, r3, #29
     f10:	d421      	bmi.n	f56 <i2cLcdClear+0x62>
		return false;
	}

	for (int i = 0; i < size; i++)
	{
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     f12:	2102      	movs	r1, #2
     f14:	2328      	movs	r3, #40	; 0x28
     f16:	4a1b      	ldr	r2, [pc, #108]	; (f84 <i2cLcdClear+0x90>)
     f18:	54d1      	strb	r1, [r2, r3]

		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     f1a:	0011      	movs	r1, r2
     f1c:	2201      	movs	r2, #1
     f1e:	7e0b      	ldrb	r3, [r1, #24]
     f20:	4213      	tst	r3, r2
     f22:	d0fc      	beq.n	f1e <i2cLcdClear+0x2a>

		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f24:	4b17      	ldr	r3, [pc, #92]	; (f84 <i2cLcdClear+0x90>)
     f26:	8b5b      	ldrh	r3, [r3, #26]
     f28:	075b      	lsls	r3, r3, #29
     f2a:	d41e      	bmi.n	f6a <i2cLcdClear+0x76>
			return false;
		}
	}
	//udi_cdc_putc('B');

	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f2c:	4a15      	ldr	r2, [pc, #84]	; (f84 <i2cLcdClear+0x90>)
     f2e:	6851      	ldr	r1, [r2, #4]
     f30:	23c0      	movs	r3, #192	; 0xc0
     f32:	029b      	lsls	r3, r3, #10
     f34:	430b      	orrs	r3, r1
     f36:	6053      	str	r3, [r2, #4]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
     f38:	2200      	movs	r2, #0
     f3a:	4b13      	ldr	r3, [pc, #76]	; (f88 <i2cLcdClear+0x94>)
     f3c:	821a      	strh	r2, [r3, #16]
     f3e:	2103      	movs	r1, #3
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
     f40:	001a      	movs	r2, r3
     f42:	2010      	movs	r0, #16
     f44:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
     f46:	7b93      	ldrb	r3, [r2, #14]
     f48:	06db      	lsls	r3, r3, #27
     f4a:	d5fc      	bpl.n	f46 <i2cLcdClear+0x52>
     f4c:	3901      	subs	r1, #1
     f4e:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
     f50:	2900      	cmp	r1, #0
     f52:	d1f7      	bne.n	f44 <i2cLcdClear+0x50>
	i2c_write(LCD_write_buffer,1,LCD_SLAVE_ADDR);
	timerDelay(3);
    }
     f54:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f56:	4a0b      	ldr	r2, [pc, #44]	; (f84 <i2cLcdClear+0x90>)
     f58:	6851      	ldr	r1, [r2, #4]
     f5a:	23c0      	movs	r3, #192	; 0xc0
     f5c:	029b      	lsls	r3, r3, #10
     f5e:	430b      	orrs	r3, r1
     f60:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
     f62:	2041      	movs	r0, #65	; 0x41
     f64:	4b09      	ldr	r3, [pc, #36]	; (f8c <i2cLcdClear+0x98>)
     f66:	4798      	blx	r3
     f68:	e7e6      	b.n	f38 <i2cLcdClear+0x44>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f6a:	4a06      	ldr	r2, [pc, #24]	; (f84 <i2cLcdClear+0x90>)
     f6c:	6851      	ldr	r1, [r2, #4]
     f6e:	23c0      	movs	r3, #192	; 0xc0
     f70:	029b      	lsls	r3, r3, #10
     f72:	430b      	orrs	r3, r1
     f74:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
     f76:	2042      	movs	r0, #66	; 0x42
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <i2cLcdClear+0x98>)
     f7a:	4798      	blx	r3
     f7c:	e7dc      	b.n	f38 <i2cLcdClear+0x44>
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	200002e4 	.word	0x200002e4
     f84:	42001000 	.word	0x42001000
     f88:	42003000 	.word	0x42003000
     f8c:	00000d69 	.word	0x00000d69

00000f90 <i2cLcdPrint>:
	Wire.send(iRow);
	Wire.endTransmission();
}
*/
      
void i2cLcdPrint(uint8_t iRows, uint8_t iCols, char s[]) {
     f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LCD_write_buffer[0] = 0x04;
     f92:	4b2b      	ldr	r3, [pc, #172]	; (1040 <i2cLcdPrint+0xb0>)
     f94:	2404      	movs	r4, #4
     f96:	701c      	strb	r4, [r3, #0]
	LCD_write_buffer[1] = iCols;
     f98:	7059      	strb	r1, [r3, #1]
	LCD_write_buffer[2] = iRows;
     f9a:	7098      	strb	r0, [r3, #2]
	int i = 0;
	char *p = s;
	while (*p) {
     f9c:	7811      	ldrb	r1, [r2, #0]
     f9e:	2900      	cmp	r1, #0
     fa0:	d038      	beq.n	1014 <i2cLcdPrint+0x84>
     fa2:	2300      	movs	r3, #0
		i++;
		LCD_write_buffer[2+i] = *p++;
     fa4:	4c26      	ldr	r4, [pc, #152]	; (1040 <i2cLcdPrint+0xb0>)
		i++;
     fa6:	3301      	adds	r3, #1
		LCD_write_buffer[2+i] = *p++;
     fa8:	18e0      	adds	r0, r4, r3
     faa:	7081      	strb	r1, [r0, #2]
	while (*p) {
     fac:	5cd1      	ldrb	r1, [r2, r3]
     fae:	2900      	cmp	r1, #0
     fb0:	d1f9      	bne.n	fa6 <i2cLcdPrint+0x16>
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
     fb2:	2102      	movs	r1, #2
     fb4:	4a23      	ldr	r2, [pc, #140]	; (1044 <i2cLcdPrint+0xb4>)
     fb6:	6251      	str	r1, [r2, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     fb8:	0010      	movs	r0, r2
     fba:	3901      	subs	r1, #1
     fbc:	7e02      	ldrb	r2, [r0, #24]
     fbe:	420a      	tst	r2, r1
     fc0:	d0fc      	beq.n	fbc <i2cLcdPrint+0x2c>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     fc2:	4a20      	ldr	r2, [pc, #128]	; (1044 <i2cLcdPrint+0xb4>)
     fc4:	8b52      	ldrh	r2, [r2, #26]
     fc6:	0752      	lsls	r2, r2, #29
     fc8:	d426      	bmi.n	1018 <i2cLcdPrint+0x88>
	}
	i2c_write(LCD_write_buffer,3+i,LCD_SLAVE_ADDR);
     fca:	1cd9      	adds	r1, r3, #3
     fcc:	000a      	movs	r2, r1
	for (int i = 0; i < size; i++)
     fce:	2400      	movs	r4, #0
     fd0:	2900      	cmp	r1, #0
     fd2:	dd0f      	ble.n	ff4 <i2cLcdPrint+0x64>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     fd4:	4f1a      	ldr	r7, [pc, #104]	; (1040 <i2cLcdPrint+0xb0>)
     fd6:	491b      	ldr	r1, [pc, #108]	; (1044 <i2cLcdPrint+0xb4>)
     fd8:	2628      	movs	r6, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     fda:	2001      	movs	r0, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     fdc:	2504      	movs	r5, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
     fde:	5de3      	ldrb	r3, [r4, r7]
     fe0:	558b      	strb	r3, [r1, r6]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
     fe2:	7e0b      	ldrb	r3, [r1, #24]
     fe4:	4203      	tst	r3, r0
     fe6:	d0fc      	beq.n	fe2 <i2cLcdPrint+0x52>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     fe8:	8b4b      	ldrh	r3, [r1, #26]
     fea:	422b      	tst	r3, r5
     fec:	d11e      	bne.n	102c <i2cLcdPrint+0x9c>
	for (int i = 0; i < size; i++)
     fee:	3401      	adds	r4, #1
     ff0:	42a2      	cmp	r2, r4
     ff2:	d1f4      	bne.n	fde <i2cLcdPrint+0x4e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ff4:	4a13      	ldr	r2, [pc, #76]	; (1044 <i2cLcdPrint+0xb4>)
     ff6:	6851      	ldr	r1, [r2, #4]
     ff8:	23c0      	movs	r3, #192	; 0xc0
     ffa:	029b      	lsls	r3, r3, #10
     ffc:	430b      	orrs	r3, r1
     ffe:	6053      	str	r3, [r2, #4]
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    1000:	4b11      	ldr	r3, [pc, #68]	; (1048 <i2cLcdPrint+0xb8>)
    1002:	2200      	movs	r2, #0
    1004:	821a      	strh	r2, [r3, #16]
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    1006:	3210      	adds	r2, #16
    1008:	739a      	strb	r2, [r3, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    100a:	001a      	movs	r2, r3
    100c:	7b93      	ldrb	r3, [r2, #14]
    100e:	06db      	lsls	r3, r3, #27
    1010:	d5fc      	bpl.n	100c <i2cLcdPrint+0x7c>
	timerDelay(1);
}
    1012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int i = 0;
    1014:	2300      	movs	r3, #0
    1016:	e7cc      	b.n	fb2 <i2cLcdPrint+0x22>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1018:	4a0a      	ldr	r2, [pc, #40]	; (1044 <i2cLcdPrint+0xb4>)
    101a:	6851      	ldr	r1, [r2, #4]
    101c:	23c0      	movs	r3, #192	; 0xc0
    101e:	029b      	lsls	r3, r3, #10
    1020:	430b      	orrs	r3, r1
    1022:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    1024:	2041      	movs	r0, #65	; 0x41
    1026:	4b09      	ldr	r3, [pc, #36]	; (104c <i2cLcdPrint+0xbc>)
    1028:	4798      	blx	r3
    102a:	e7e9      	b.n	1000 <i2cLcdPrint+0x70>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    102c:	4a05      	ldr	r2, [pc, #20]	; (1044 <i2cLcdPrint+0xb4>)
    102e:	6851      	ldr	r1, [r2, #4]
    1030:	23c0      	movs	r3, #192	; 0xc0
    1032:	029b      	lsls	r3, r3, #10
    1034:	430b      	orrs	r3, r1
    1036:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    1038:	2042      	movs	r0, #66	; 0x42
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <i2cLcdPrint+0xbc>)
    103c:	4798      	blx	r3
    103e:	e7df      	b.n	1000 <i2cLcdPrint+0x70>
    1040:	200002e4 	.word	0x200002e4
    1044:	42001000 	.word	0x42001000
    1048:	42003000 	.word	0x42003000
    104c:	00000d69 	.word	0x00000d69

00001050 <i2cLcdTime>:
void i2cLcdTime() {
    1050:	b510      	push	{r4, lr}
	str4[0] = 'E';
    1052:	4a0c      	ldr	r2, [pc, #48]	; (1084 <i2cLcdTime+0x34>)
    1054:	2345      	movs	r3, #69	; 0x45
    1056:	7013      	strb	r3, [r2, #0]
	str4[1] = 'n';
    1058:	3329      	adds	r3, #41	; 0x29
    105a:	7053      	strb	r3, [r2, #1]
	str4[2] = 't';
    105c:	3306      	adds	r3, #6
    105e:	7093      	strb	r3, [r2, #2]
	str4[3] = 'e';
    1060:	3b0f      	subs	r3, #15
    1062:	70d3      	strb	r3, [r2, #3]
	str4[4] = 'r';
    1064:	2172      	movs	r1, #114	; 0x72
    1066:	7111      	strb	r1, [r2, #4]
	str4[5] = ' ';
    1068:	3952      	subs	r1, #82	; 0x52
    106a:	7151      	strb	r1, [r2, #5]
	str4[6] = 'T';
    106c:	3134      	adds	r1, #52	; 0x34
    106e:	7191      	strb	r1, [r2, #6]
	str4[7] = 'i';
    1070:	3115      	adds	r1, #21
    1072:	71d1      	strb	r1, [r2, #7]
	str4[8] = 'm';
    1074:	3104      	adds	r1, #4
    1076:	7211      	strb	r1, [r2, #8]
	str4[9] = 'e';
    1078:	7253      	strb	r3, [r2, #9]
	i2cLcdPrint(0, 5, str4);
    107a:	3968      	subs	r1, #104	; 0x68
    107c:	2000      	movs	r0, #0
    107e:	4b02      	ldr	r3, [pc, #8]	; (1088 <i2cLcdTime+0x38>)
    1080:	4798      	blx	r3
}
    1082:	bd10      	pop	{r4, pc}
    1084:	2000045c 	.word	0x2000045c
    1088:	00000f91 	.word	0x00000f91

0000108c <i2cLcdTemp>:
void i2cLcdTemp() {
    108c:	b510      	push	{r4, lr}
	str1[0] = 'T';
    108e:	4a0b      	ldr	r2, [pc, #44]	; (10bc <i2cLcdTemp+0x30>)
    1090:	2354      	movs	r3, #84	; 0x54
    1092:	7013      	strb	r3, [r2, #0]
	str1[1] = 'e';
    1094:	3311      	adds	r3, #17
    1096:	7053      	strb	r3, [r2, #1]
	str1[2] = 'm';
    1098:	3308      	adds	r3, #8
    109a:	7093      	strb	r3, [r2, #2]
	str1[3] = 'p';
    109c:	3303      	adds	r3, #3
    109e:	70d3      	strb	r3, [r2, #3]
	str1[4] = ':';
    10a0:	3b36      	subs	r3, #54	; 0x36
    10a2:	7113      	strb	r3, [r2, #4]
	str1[5] = ' ';
    10a4:	3b1a      	subs	r3, #26
    10a6:	7153      	strb	r3, [r2, #5]
	str1[6] = ' ';
    10a8:	7193      	strb	r3, [r2, #6]
	str1[7] = ' ';
    10aa:	71d3      	strb	r3, [r2, #7]
	str1[8] = ' ';
    10ac:	7213      	strb	r3, [r2, #8]
	str1[9] = 'C';
    10ae:	3323      	adds	r3, #35	; 0x23
    10b0:	7253      	strb	r3, [r2, #9]
	i2cLcdPrint(0, 20, str1);
    10b2:	2114      	movs	r1, #20
    10b4:	2000      	movs	r0, #0
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <i2cLcdTemp+0x34>)
    10b8:	4798      	blx	r3
}
    10ba:	bd10      	pop	{r4, pc}
    10bc:	200004ac 	.word	0x200004ac
    10c0:	00000f91 	.word	0x00000f91

000010c4 <i2cLcdRH>:
void i2cLcdRH() {
    10c4:	b510      	push	{r4, lr}
	str2[0] = 'R';
    10c6:	4a09      	ldr	r2, [pc, #36]	; (10ec <i2cLcdRH+0x28>)
    10c8:	2352      	movs	r3, #82	; 0x52
    10ca:	7013      	strb	r3, [r2, #0]
	str2[1] = 'H';
    10cc:	3b0a      	subs	r3, #10
    10ce:	7053      	strb	r3, [r2, #1]
	str2[2] = ':';
    10d0:	3b0e      	subs	r3, #14
    10d2:	7093      	strb	r3, [r2, #2]
	str2[3] = ' ';
    10d4:	3b1a      	subs	r3, #26
    10d6:	70d3      	strb	r3, [r2, #3]
	str2[4] = ' ';
    10d8:	7113      	strb	r3, [r2, #4]
	str2[5] = ' ';
    10da:	7153      	strb	r3, [r2, #5]
	str2[6] = '%';
    10dc:	3305      	adds	r3, #5
    10de:	7193      	strb	r3, [r2, #6]
	i2cLcdPrint(0, 32, str2);	
    10e0:	2120      	movs	r1, #32
    10e2:	2000      	movs	r0, #0
    10e4:	4b02      	ldr	r3, [pc, #8]	; (10f0 <i2cLcdRH+0x2c>)
    10e6:	4798      	blx	r3
}
    10e8:	bd10      	pop	{r4, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	200004d4 	.word	0x200004d4
    10f0:	00000f91 	.word	0x00000f91

000010f4 <i2cLcdprintNum>:
{
    10f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f6:	b083      	sub	sp, #12
    10f8:	0007      	movs	r7, r0
    10fa:	9101      	str	r1, [sp, #4]
    10fc:	0016      	movs	r6, r2
	str3[0] = (d + '0');
    10fe:	4c0a      	ldr	r4, [pc, #40]	; (1128 <i2cLcdprintNum+0x34>)
	d = in / ((int) pow(10, 1)) % 10;
    1100:	210a      	movs	r1, #10
    1102:	4b0a      	ldr	r3, [pc, #40]	; (112c <i2cLcdprintNum+0x38>)
    1104:	4798      	blx	r3
    1106:	4d0a      	ldr	r5, [pc, #40]	; (1130 <i2cLcdprintNum+0x3c>)
    1108:	210a      	movs	r1, #10
    110a:	47a8      	blx	r5
	str3[0] = (d + '0');
    110c:	3130      	adds	r1, #48	; 0x30
    110e:	7021      	strb	r1, [r4, #0]
	u = in / ((int) pow(10, 0)) % 10;
    1110:	210a      	movs	r1, #10
    1112:	0038      	movs	r0, r7
    1114:	47a8      	blx	r5
	str3[1] = (u + '0');
    1116:	3130      	adds	r1, #48	; 0x30
    1118:	7061      	strb	r1, [r4, #1]
	i2cLcdPrint(Col,Row,str3);
    111a:	0022      	movs	r2, r4
    111c:	0031      	movs	r1, r6
    111e:	9801      	ldr	r0, [sp, #4]
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <i2cLcdprintNum+0x40>)
    1122:	4798      	blx	r3
}
    1124:	b003      	add	sp, #12
    1126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1128:	20000484 	.word	0x20000484
    112c:	00004ca9 	.word	0x00004ca9
    1130:	00004e75 	.word	0x00004e75
    1134:	00000f91 	.word	0x00000f91

00001138 <RTC_init>:
#include "RTC.h"

void RTC_init(void)
{
	/* Turn on the digital interface clock */
	PM->APBAMASK.reg |= PM_APBAMASK_RTC;
    1138:	4a12      	ldr	r2, [pc, #72]	; (1184 <RTC_init+0x4c>)
    113a:	6993      	ldr	r3, [r2, #24]
    113c:	2120      	movs	r1, #32
    113e:	430b      	orrs	r3, r1
    1140:	6193      	str	r3, [r2, #24]
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1142:	4a11      	ldr	r2, [pc, #68]	; (1188 <RTC_init+0x50>)
    1144:	4b11      	ldr	r3, [pc, #68]	; (118c <RTC_init+0x54>)
    1146:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(4);
	
	RTC->MODE2.CTRL.reg = RTC_MODE2_CTRL_MODE(2) | RTC_CALENDAR_PRESCALER_DIV_1;//
    1148:	4b11      	ldr	r3, [pc, #68]	; (1190 <RTC_init+0x58>)
    114a:	3918      	subs	r1, #24
    114c:	8019      	strh	r1, [r3, #0]
	
	/* Set continuously mode. */
	RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    114e:	885a      	ldrh	r2, [r3, #2]
    1150:	2080      	movs	r0, #128	; 0x80
    1152:	01c0      	lsls	r0, r0, #7
    1154:	4302      	orrs	r2, r0
    1156:	805a      	strh	r2, [r3, #2]
	
	RTC->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM0;
    1158:	2201      	movs	r2, #1
    115a:	71da      	strb	r2, [r3, #7]
	
	/* Enable RTC module. */
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_MODE(2) | RTC_CALENDAR_PRESCALER_DIV_1;
    115c:	881a      	ldrh	r2, [r3, #0]
    115e:	2008      	movs	r0, #8
    1160:	4302      	orrs	r2, r0
    1162:	801a      	strh	r2, [r3, #0]
	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1164:	881a      	ldrh	r2, [r3, #0]
    1166:	3806      	subs	r0, #6
    1168:	4302      	orrs	r2, r0
    116a:	801a      	strh	r2, [r3, #0]
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    116c:	4a09      	ldr	r2, [pc, #36]	; (1194 <RTC_init+0x5c>)
    116e:	23c0      	movs	r3, #192	; 0xc0
    1170:	005b      	lsls	r3, r3, #1
    1172:	50d1      	str	r1, [r2, r3]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1174:	20c0      	movs	r0, #192	; 0xc0
    1176:	0080      	lsls	r0, r0, #2
    1178:	5813      	ldr	r3, [r2, r0]
    117a:	021b      	lsls	r3, r3, #8
    117c:	0a1b      	lsrs	r3, r3, #8
    117e:	5013      	str	r3, [r2, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1180:	6011      	str	r1, [r2, #0]
	
	NVIC_ClearPendingIRQ(RTC_IRQn); 
	NVIC_SetPriority(RTC_IRQn, 100);
	NVIC_EnableIRQ(RTC_IRQn);
}
    1182:	4770      	bx	lr
    1184:	40000400 	.word	0x40000400
    1188:	00004404 	.word	0x00004404
    118c:	40000c00 	.word	0x40000c00
    1190:	40001400 	.word	0x40001400
    1194:	e000e100 	.word	0xe000e100

00001198 <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time1->year - time1->year_init_value) <<
    1198:	88c2      	ldrh	r2, [r0, #6]
    119a:	8903      	ldrh	r3, [r0, #8]
    119c:	1ad2      	subs	r2, r2, r3
    119e:	0692      	lsls	r2, r2, #26
	RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time1->month << RTC_MODE2_CLOCK_MONTH_Pos);
    11a0:	7943      	ldrb	r3, [r0, #5]
    11a2:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time1->day << RTC_MODE2_CLOCK_DAY_Pos);
    11a4:	7901      	ldrb	r1, [r0, #4]
    11a6:	0449      	lsls	r1, r1, #17

	/* Set minute value into register_value. */
	register_value |= (time1->minute << RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into register_value. */
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    11a8:	430b      	orrs	r3, r1
    11aa:	7801      	ldrb	r1, [r0, #0]
    11ac:	430b      	orrs	r3, r1
	register_value |= (time1->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    11ae:	7881      	ldrb	r1, [r0, #2]
    11b0:	0309      	lsls	r1, r1, #12
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    11b2:	430b      	orrs	r3, r1
	register_value |= (time1->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    11b4:	7840      	ldrb	r0, [r0, #1]
    11b6:	0180      	lsls	r0, r0, #6
	register_value |= (time1->second << RTC_MODE2_CLOCK_SECOND_Pos);
    11b8:	4318      	orrs	r0, r3
    11ba:	4310      	orrs	r0, r2
	

	return register_value;
}
    11bc:	4770      	bx	lr

000011be <rtc_calendar_register_value_to_time>:

void rtc_calendar_register_value_to_time(uint32_t register_value, struct rtc_calendar_time *time1)
{
	/* Set year plus value of initial year. */
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    11be:	0e83      	lsrs	r3, r0, #26
	RTC_MODE2_CLOCK_YEAR_Pos) + time1->year_init_value;
    11c0:	890a      	ldrh	r2, [r1, #8]
    11c2:	189b      	adds	r3, r3, r2
	time1->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    11c4:	80cb      	strh	r3, [r1, #6]

	/* Set month value into time struct. */
	time1->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    11c6:	0183      	lsls	r3, r0, #6
    11c8:	0f1b      	lsrs	r3, r3, #28
    11ca:	714b      	strb	r3, [r1, #5]
	RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time1->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    11cc:	0c42      	lsrs	r2, r0, #17
    11ce:	231f      	movs	r3, #31
    11d0:	401a      	ands	r2, r3
    11d2:	710a      	strb	r2, [r1, #4]
	RTC_MODE2_CLOCK_DAY_Pos);

	time1->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    11d4:	0b02      	lsrs	r2, r0, #12
    11d6:	4013      	ands	r3, r2
    11d8:	708b      	strb	r3, [r1, #2]
	RTC_MODE2_CLOCK_HOUR_Pos);

	/* Set minute value into time struct. */
	time1->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    11da:	0982      	lsrs	r2, r0, #6
    11dc:	233f      	movs	r3, #63	; 0x3f
    11de:	401a      	ands	r2, r3
    11e0:	704a      	strb	r2, [r1, #1]
	RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time1->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    11e2:	4018      	ands	r0, r3
    11e4:	7008      	strb	r0, [r1, #0]
	RTC_MODE2_CLOCK_SECOND_Pos);	
}
    11e6:	4770      	bx	lr

000011e8 <rtc_calendar_get_time>:
{
    11e8:	b510      	push	{r4, lr}
    11ea:	0001      	movs	r1, r0
	if (!(time1->continuously_update)) {
    11ec:	7ac3      	ldrb	r3, [r0, #11]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d10c      	bne.n	120c <rtc_calendar_get_time+0x24>
		RTC->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    11f2:	4a0e      	ldr	r2, [pc, #56]	; (122c <rtc_calendar_get_time+0x44>)
    11f4:	4b0e      	ldr	r3, [pc, #56]	; (1230 <rtc_calendar_get_time+0x48>)
    11f6:	805a      	strh	r2, [r3, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    11f8:	001a      	movs	r2, r3
    11fa:	7a93      	ldrb	r3, [r2, #10]
    11fc:	b25b      	sxtb	r3, r3
    11fe:	2b00      	cmp	r3, #0
    1200:	dbfb      	blt.n	11fa <rtc_calendar_get_time+0x12>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    1202:	4b0b      	ldr	r3, [pc, #44]	; (1230 <rtc_calendar_get_time+0x48>)
    1204:	6918      	ldr	r0, [r3, #16]
	rtc_calendar_register_value_to_time(register_value, time1);
    1206:	4b0b      	ldr	r3, [pc, #44]	; (1234 <rtc_calendar_get_time+0x4c>)
    1208:	4798      	blx	r3
}
    120a:	bd10      	pop	{r4, pc}
	} else if (!(RTC->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    120c:	4b08      	ldr	r3, [pc, #32]	; (1230 <rtc_calendar_get_time+0x48>)
    120e:	885b      	ldrh	r3, [r3, #2]
    1210:	045b      	lsls	r3, r3, #17
    1212:	d4f6      	bmi.n	1202 <rtc_calendar_get_time+0x1a>
		RTC->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1214:	4a06      	ldr	r2, [pc, #24]	; (1230 <rtc_calendar_get_time+0x48>)
    1216:	8853      	ldrh	r3, [r2, #2]
    1218:	20c0      	movs	r0, #192	; 0xc0
    121a:	0200      	lsls	r0, r0, #8
    121c:	4303      	orrs	r3, r0
    121e:	8053      	strh	r3, [r2, #2]
		while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1220:	7a93      	ldrb	r3, [r2, #10]
    1222:	b25b      	sxtb	r3, r3
    1224:	2b00      	cmp	r3, #0
    1226:	dbfb      	blt.n	1220 <rtc_calendar_get_time+0x38>
    1228:	e7eb      	b.n	1202 <rtc_calendar_get_time+0x1a>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	ffff8000 	.word	0xffff8000
    1230:	40001400 	.word	0x40001400
    1234:	000011bf 	.word	0x000011bf

00001238 <rtc_calendar_set_time>:

void rtc_calendar_set_time (struct rtc_calendar_time *time1)
{
    1238:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    123a:	4b05      	ldr	r3, [pc, #20]	; (1250 <rtc_calendar_set_time+0x18>)
    123c:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    123e:	4a05      	ldr	r2, [pc, #20]	; (1254 <rtc_calendar_set_time+0x1c>)
    1240:	7a93      	ldrb	r3, [r2, #10]
    1242:	b25b      	sxtb	r3, r3
    1244:	2b00      	cmp	r3, #0
    1246:	dbfb      	blt.n	1240 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	RTC->MODE2.CLOCK.reg = register_value;
    1248:	4b02      	ldr	r3, [pc, #8]	; (1254 <rtc_calendar_set_time+0x1c>)
    124a:	6118      	str	r0, [r3, #16]
}
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	00001199 	.word	0x00001199
    1254:	40001400 	.word	0x40001400

00001258 <rtc_calendar_set_alarm>:

void rtc_calendar_set_alarm(struct rtc_calendar_time *time1)
{
    1258:	b510      	push	{r4, lr}
	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    125a:	4a08      	ldr	r2, [pc, #32]	; (127c <rtc_calendar_set_alarm+0x24>)
    125c:	7a93      	ldrb	r3, [r2, #10]
    125e:	b25b      	sxtb	r3, r3
    1260:	2b00      	cmp	r3, #0
    1262:	dbfb      	blt.n	125c <rtc_calendar_set_alarm+0x4>
		/* Wait for synchronization */
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(time1);
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <rtc_calendar_set_alarm+0x28>)
    1266:	4798      	blx	r3

	while (RTC->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1268:	4a04      	ldr	r2, [pc, #16]	; (127c <rtc_calendar_set_alarm+0x24>)
    126a:	7a93      	ldrb	r3, [r2, #10]
    126c:	b25b      	sxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	dbfb      	blt.n	126a <rtc_calendar_set_alarm+0x12>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	RTC->MODE2.Mode2Alarm[0].ALARM.reg = register_value;
    1272:	4b02      	ldr	r3, [pc, #8]	; (127c <rtc_calendar_set_alarm+0x24>)
    1274:	6198      	str	r0, [r3, #24]

	/* Set alarm mask */
	RTC->MODE2.Mode2Alarm[0].MASK.reg = RTC_MODE2_MASK_SEL_HHMMSS;
    1276:	2203      	movs	r2, #3
    1278:	771a      	strb	r2, [r3, #28]

	return STATUS_OK;
    127a:	bd10      	pop	{r4, pc}
    127c:	40001400 	.word	0x40001400
    1280:	00001199 	.word	0x00001199

00001284 <test_components>:
uint32_t NVM_i = 0;
int n;

void printNum(uint8_t in, uint8_t Col, uint8_t Row);

void test_components(void){			
    1284:	b570      	push	{r4, r5, r6, lr}
	
			/* Data ready to be sent */
			if (udi_cdc_is_rx_ready()) {
    1286:	4b57      	ldr	r3, [pc, #348]	; (13e4 <test_components+0x160>)
    1288:	4798      	blx	r3
    128a:	2800      	cmp	r0, #0
    128c:	d109      	bne.n	12a2 <test_components+0x1e>
				rx_data = udi_cdc_getc();
			}
		switch(rx_data){
    128e:	4b56      	ldr	r3, [pc, #344]	; (13e8 <test_components+0x164>)
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	3b50      	subs	r3, #80	; 0x50
    1294:	b2da      	uxtb	r2, r3
    1296:	2a27      	cmp	r2, #39	; 0x27
    1298:	d810      	bhi.n	12bc <test_components+0x38>
    129a:	0093      	lsls	r3, r2, #2
    129c:	4a53      	ldr	r2, [pc, #332]	; (13ec <test_components+0x168>)
    129e:	58d3      	ldr	r3, [r2, r3]
    12a0:	469f      	mov	pc, r3
				rx_data = udi_cdc_getc();
    12a2:	4b53      	ldr	r3, [pc, #332]	; (13f0 <test_components+0x16c>)
    12a4:	4798      	blx	r3
    12a6:	4b50      	ldr	r3, [pc, #320]	; (13e8 <test_components+0x164>)
    12a8:	7018      	strb	r0, [r3, #0]
    12aa:	e7f0      	b.n	128e <test_components+0xa>
			case 'l' :
				OPT3001_data = OPT3001_read();
    12ac:	4b51      	ldr	r3, [pc, #324]	; (13f4 <test_components+0x170>)
    12ae:	4798      	blx	r3
    12b0:	4b51      	ldr	r3, [pc, #324]	; (13f8 <test_components+0x174>)
    12b2:	6018      	str	r0, [r3, #0]
				udi_cdc_putc(OPT3001_data[0] + '0');
    12b4:	7800      	ldrb	r0, [r0, #0]
    12b6:	3030      	adds	r0, #48	; 0x30
    12b8:	4b50      	ldr	r3, [pc, #320]	; (13fc <test_components+0x178>)
    12ba:	4798      	blx	r3
				//uart_data_tx1 ++;				
				
			break;				
		}
			
			rx_data = 0;
    12bc:	2200      	movs	r2, #0
    12be:	4b4a      	ldr	r3, [pc, #296]	; (13e8 <test_components+0x164>)
    12c0:	701a      	strb	r2, [r3, #0]
}
    12c2:	bd70      	pop	{r4, r5, r6, pc}
				temp1 =  Si7021_GetTemp();
    12c4:	4b4e      	ldr	r3, [pc, #312]	; (1400 <test_components+0x17c>)
    12c6:	4798      	blx	r3
    12c8:	4b4e      	ldr	r3, [pc, #312]	; (1404 <test_components+0x180>)
    12ca:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(temp1,0,26);
    12cc:	b2c0      	uxtb	r0, r0
    12ce:	221a      	movs	r2, #26
    12d0:	2100      	movs	r1, #0
    12d2:	4b4d      	ldr	r3, [pc, #308]	; (1408 <test_components+0x184>)
    12d4:	4798      	blx	r3
				break;
    12d6:	e7f1      	b.n	12bc <test_components+0x38>
				RH1 = Si7021_GetRH();
    12d8:	4b4c      	ldr	r3, [pc, #304]	; (140c <test_components+0x188>)
    12da:	4798      	blx	r3
    12dc:	4b4c      	ldr	r3, [pc, #304]	; (1410 <test_components+0x18c>)
    12de:	6018      	str	r0, [r3, #0]
				i2cLcdprintNum(RH1,0,36);
    12e0:	b2c0      	uxtb	r0, r0
    12e2:	2224      	movs	r2, #36	; 0x24
    12e4:	2100      	movs	r1, #0
    12e6:	4b48      	ldr	r3, [pc, #288]	; (1408 <test_components+0x184>)
    12e8:	4798      	blx	r3
			break;
    12ea:	e7e7      	b.n	12bc <test_components+0x38>
					error_code = nvm_read_buffer(
    12ec:	4e49      	ldr	r6, [pc, #292]	; (1414 <test_components+0x190>)
    12ee:	4d4a      	ldr	r5, [pc, #296]	; (1418 <test_components+0x194>)
    12f0:	4c4a      	ldr	r4, [pc, #296]	; (141c <test_components+0x198>)
    12f2:	2240      	movs	r2, #64	; 0x40
    12f4:	0031      	movs	r1, r6
    12f6:	20fa      	movs	r0, #250	; 0xfa
    12f8:	0240      	lsls	r0, r0, #9
    12fa:	47a8      	blx	r5
    12fc:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    12fe:	2805      	cmp	r0, #5
    1300:	d0f7      	beq.n	12f2 <test_components+0x6e>
    1302:	4c44      	ldr	r4, [pc, #272]	; (1414 <test_components+0x190>)
    1304:	0026      	movs	r6, r4
    1306:	3640      	adds	r6, #64	; 0x40
					udi_cdc_putc(page_buffer[i] + '0');
    1308:	4d3c      	ldr	r5, [pc, #240]	; (13fc <test_components+0x178>)
    130a:	7820      	ldrb	r0, [r4, #0]
    130c:	3030      	adds	r0, #48	; 0x30
    130e:	47a8      	blx	r5
    1310:	3401      	adds	r4, #1
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    1312:	42a6      	cmp	r6, r4
    1314:	d1f9      	bne.n	130a <test_components+0x86>
    1316:	e7d1      	b.n	12bc <test_components+0x38>
		switch(rx_data){
    1318:	2300      	movs	r3, #0
					page_buffer[i] = i;
    131a:	4a3e      	ldr	r2, [pc, #248]	; (1414 <test_components+0x190>)
    131c:	54d3      	strb	r3, [r2, r3]
				for (uint32_t i = 0; i < NVMCTRL_PAGE_SIZE; i++) {
    131e:	3301      	adds	r3, #1
    1320:	2b40      	cmp	r3, #64	; 0x40
    1322:	d1fb      	bne.n	131c <test_components+0x98>
					error_code = nvm_erase_row(
    1324:	26fa      	movs	r6, #250	; 0xfa
    1326:	0276      	lsls	r6, r6, #9
    1328:	4d3d      	ldr	r5, [pc, #244]	; (1420 <test_components+0x19c>)
    132a:	4c3c      	ldr	r4, [pc, #240]	; (141c <test_components+0x198>)
    132c:	0030      	movs	r0, r6
    132e:	47a8      	blx	r5
    1330:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1332:	2805      	cmp	r0, #5
    1334:	d0fa      	beq.n	132c <test_components+0xa8>
					error_code = nvm_write_buffer(
    1336:	4e37      	ldr	r6, [pc, #220]	; (1414 <test_components+0x190>)
    1338:	4d3a      	ldr	r5, [pc, #232]	; (1424 <test_components+0x1a0>)
    133a:	4c38      	ldr	r4, [pc, #224]	; (141c <test_components+0x198>)
    133c:	2240      	movs	r2, #64	; 0x40
    133e:	0031      	movs	r1, r6
    1340:	20fa      	movs	r0, #250	; 0xfa
    1342:	0240      	lsls	r0, r0, #9
    1344:	47a8      	blx	r5
    1346:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    1348:	2805      	cmp	r0, #5
    134a:	d0f7      	beq.n	133c <test_components+0xb8>
    134c:	e7b6      	b.n	12bc <test_components+0x38>
					error_code = nvm_erase_row(
    134e:	26fa      	movs	r6, #250	; 0xfa
    1350:	0276      	lsls	r6, r6, #9
    1352:	4d33      	ldr	r5, [pc, #204]	; (1420 <test_components+0x19c>)
    1354:	4c31      	ldr	r4, [pc, #196]	; (141c <test_components+0x198>)
    1356:	0030      	movs	r0, r6
    1358:	47a8      	blx	r5
    135a:	7020      	strb	r0, [r4, #0]
				} while (error_code == STATUS_BUSY);
    135c:	2805      	cmp	r0, #5
    135e:	d0fa      	beq.n	1356 <test_components+0xd2>
    1360:	e7ac      	b.n	12bc <test_components+0x38>
				REG_PORT_OUTSET0 = PORT_PA27;
    1362:	2280      	movs	r2, #128	; 0x80
    1364:	0512      	lsls	r2, r2, #20
    1366:	4b30      	ldr	r3, [pc, #192]	; (1428 <test_components+0x1a4>)
    1368:	601a      	str	r2, [r3, #0]
				break;
    136a:	e7a7      	b.n	12bc <test_components+0x38>
				rtc_calendar_get_time(&mytime);
    136c:	4c2f      	ldr	r4, [pc, #188]	; (142c <test_components+0x1a8>)
    136e:	0020      	movs	r0, r4
    1370:	4b2f      	ldr	r3, [pc, #188]	; (1430 <test_components+0x1ac>)
    1372:	4798      	blx	r3
				i2cLcdprintNum(mytime.hour,0,4);
    1374:	78a0      	ldrb	r0, [r4, #2]
    1376:	2204      	movs	r2, #4
    1378:	2100      	movs	r1, #0
    137a:	4d23      	ldr	r5, [pc, #140]	; (1408 <test_components+0x184>)
    137c:	47a8      	blx	r5
				i2cLcdprintNum(mytime.minute,0,7);
    137e:	7860      	ldrb	r0, [r4, #1]
    1380:	2207      	movs	r2, #7
    1382:	2100      	movs	r1, #0
    1384:	47a8      	blx	r5
				i2cLcdprintNum(mytime.second, 0, 10);
    1386:	7820      	ldrb	r0, [r4, #0]
    1388:	220a      	movs	r2, #10
    138a:	2100      	movs	r1, #0
    138c:	47a8      	blx	r5
				if(mytime.pm)
    138e:	78e3      	ldrb	r3, [r4, #3]
    1390:	2b00      	cmp	r3, #0
    1392:	d009      	beq.n	13a8 <test_components+0x124>
					str[0]='A';
    1394:	4a27      	ldr	r2, [pc, #156]	; (1434 <test_components+0x1b0>)
    1396:	2341      	movs	r3, #65	; 0x41
    1398:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    139a:	330c      	adds	r3, #12
    139c:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);
    139e:	210e      	movs	r1, #14
    13a0:	2000      	movs	r0, #0
    13a2:	4b25      	ldr	r3, [pc, #148]	; (1438 <test_components+0x1b4>)
    13a4:	4798      	blx	r3
    13a6:	e789      	b.n	12bc <test_components+0x38>
					str[0]='P';
    13a8:	4a22      	ldr	r2, [pc, #136]	; (1434 <test_components+0x1b0>)
    13aa:	2350      	movs	r3, #80	; 0x50
    13ac:	7013      	strb	r3, [r2, #0]
					str[1]='M';
    13ae:	3b03      	subs	r3, #3
    13b0:	7053      	strb	r3, [r2, #1]
					i2cLcdPrint(0,14,str);					
    13b2:	210e      	movs	r1, #14
    13b4:	2000      	movs	r0, #0
    13b6:	4b20      	ldr	r3, [pc, #128]	; (1438 <test_components+0x1b4>)
    13b8:	4798      	blx	r3
    13ba:	e77f      	b.n	12bc <test_components+0x38>
				uart_sendBuffer(string1, sizeof(string1));
    13bc:	210d      	movs	r1, #13
    13be:	481f      	ldr	r0, [pc, #124]	; (143c <test_components+0x1b8>)
    13c0:	4b1f      	ldr	r3, [pc, #124]	; (1440 <test_components+0x1bc>)
    13c2:	4798      	blx	r3
				while(uart_data_rx1 != 'f'){
    13c4:	4b1f      	ldr	r3, [pc, #124]	; (1444 <test_components+0x1c0>)
    13c6:	781b      	ldrb	r3, [r3, #0]
    13c8:	2b66      	cmp	r3, #102	; 0x66
    13ca:	d005      	beq.n	13d8 <test_components+0x154>
					uart_data_rx1 = uart_read();	
    13cc:	4d1e      	ldr	r5, [pc, #120]	; (1448 <test_components+0x1c4>)
    13ce:	4c1d      	ldr	r4, [pc, #116]	; (1444 <test_components+0x1c0>)
    13d0:	47a8      	blx	r5
    13d2:	7020      	strb	r0, [r4, #0]
				while(uart_data_rx1 != 'f'){
    13d4:	2866      	cmp	r0, #102	; 0x66
    13d6:	d1fb      	bne.n	13d0 <test_components+0x14c>
				i2cLcdPrint(0,14,&uart_data_rx1);
    13d8:	4a1a      	ldr	r2, [pc, #104]	; (1444 <test_components+0x1c0>)
    13da:	210e      	movs	r1, #14
    13dc:	2000      	movs	r0, #0
    13de:	4b16      	ldr	r3, [pc, #88]	; (1438 <test_components+0x1b4>)
    13e0:	4798      	blx	r3
			break;				
    13e2:	e76b      	b.n	12bc <test_components+0x38>
    13e4:	00000b35 	.word	0x00000b35
    13e8:	2000030c 	.word	0x2000030c
    13ec:	00006a6c 	.word	0x00006a6c
    13f0:	00000c11 	.word	0x00000c11
    13f4:	00004829 	.word	0x00004829
    13f8:	20000500 	.word	0x20000500
    13fc:	00000d69 	.word	0x00000d69
    1400:	00004a5d 	.word	0x00004a5d
    1404:	2000044c 	.word	0x2000044c
    1408:	000010f5 	.word	0x000010f5
    140c:	00004af5 	.word	0x00004af5
    1410:	20000458 	.word	0x20000458
    1414:	20000510 	.word	0x20000510
    1418:	000020c5 	.word	0x000020c5
    141c:	20000564 	.word	0x20000564
    1420:	00002131 	.word	0x00002131
    1424:	0000201d 	.word	0x0000201d
    1428:	41004418 	.word	0x41004418
    142c:	20000558 	.word	0x20000558
    1430:	000011e9 	.word	0x000011e9
    1434:	20000454 	.word	0x20000454
    1438:	00000f91 	.word	0x00000f91
    143c:	2000003c 	.word	0x2000003c
    1440:	0000151d 	.word	0x0000151d
    1444:	20000550 	.word	0x20000550
    1448:	000014fd 	.word	0x000014fd

0000144c <pin_set_peripheral_function>:
#define UART_SERCOM_APBCMASK  PM_APBCMASK_SERCOM4
#define PINMUX_PAD2_TX        PINMUX_PB08D_SERCOM4_PAD0
#define PINMUX_PAD3_RX        PINMUX_PB09D_SERCOM4_PAD1

void pin_set_peripheral_function(uint32_t pinmux)
{
    144c:	b570      	push	{r4, r5, r6, lr}
            31:21 : port information 0->PORTA, 1->PORTB
            20:16 : pin 0-31
        15:00 pin multiplex information
        there are defines for pinmux like: PINMUX_PA09D_SERCOM2_PAD1 
    */
    uint16_t pad = pinmux >> 16;    // get pad (port+pin)
    144e:	0c02      	lsrs	r2, r0, #16
    uint8_t port = pad >> 5;        // get port
    uint8_t pin  = pad & 0x1F;      // get number of pin - no port information anymore
    1450:	b2d4      	uxtb	r4, r2
    1452:	211f      	movs	r1, #31
    1454:	4021      	ands	r1, r4
    uint8_t port = pad >> 5;        // get port
    1456:	0952      	lsrs	r2, r2, #5
    
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    1458:	b2d3      	uxtb	r3, r2
    145a:	01db      	lsls	r3, r3, #7
    145c:	4a0d      	ldr	r2, [pc, #52]	; (1494 <pin_set_peripheral_function+0x48>)
    145e:	4694      	mov	ip, r2
    1460:	4463      	add	r3, ip
    1462:	185a      	adds	r2, r3, r1
    1464:	3240      	adds	r2, #64	; 0x40
    1466:	7815      	ldrb	r5, [r2, #0]
    1468:	2601      	movs	r6, #1
    146a:	4335      	orrs	r5, r6
    146c:	7015      	strb	r5, [r2, #0]
    
    /* each pinmux register is for two pins! with pin/2 you can get the index of the needed pinmux register
       the p mux resiter is 8Bit   (7:4 odd pin; 3:0 evan bit)  */
    // reset pinmux values.                             VV shift if pin is odd (if evan:  (4*(pin & 1))==0  )
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    146e:	0849      	lsrs	r1, r1, #1
    1470:	185b      	adds	r3, r3, r1
    1472:	3330      	adds	r3, #48	; 0x30
    1474:	7819      	ldrb	r1, [r3, #0]
    1476:	2201      	movs	r2, #1
    1478:	4022      	ands	r2, r4
    147a:	0092      	lsls	r2, r2, #2
    147c:	240f      	movs	r4, #15
    147e:	4094      	lsls	r4, r2
    1480:	43a1      	bics	r1, r4
    1482:	7019      	strb	r1, [r3, #0]
                    //          
    // set new values
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    1484:	7819      	ldrb	r1, [r3, #0]
    1486:	0400      	lsls	r0, r0, #16
    1488:	0c00      	lsrs	r0, r0, #16
    148a:	4090      	lsls	r0, r2
    148c:	4308      	orrs	r0, r1
    148e:	b2c0      	uxtb	r0, r0
    1490:	7018      	strb	r0, [r3, #0]
}
    1492:	bd70      	pop	{r4, r5, r6, pc}
    1494:	41004400 	.word	0x41004400

00001498 <uart_init>:


void uart_init(void)
{
    1498:	b510      	push	{r4, lr}
	pin_set_peripheral_function(PINMUX_PAD2_TX);
    149a:	480f      	ldr	r0, [pc, #60]	; (14d8 <uart_init+0x40>)
    149c:	4c0f      	ldr	r4, [pc, #60]	; (14dc <uart_init+0x44>)
    149e:	47a0      	blx	r4
	pin_set_peripheral_function(PINMUX_PAD3_RX);  
    14a0:	480f      	ldr	r0, [pc, #60]	; (14e0 <uart_init+0x48>)
    14a2:	47a0      	blx	r4

	PM->APBCMASK.reg |= UART_SERCOM_APBCMASK;
    14a4:	4a0f      	ldr	r2, [pc, #60]	; (14e4 <uart_init+0x4c>)
    14a6:	6a13      	ldr	r3, [r2, #32]
    14a8:	2140      	movs	r1, #64	; 0x40
    14aa:	430b      	orrs	r3, r1
    14ac:	6213      	str	r3, [r2, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(UART_SERCOM_GCLK_ID) |
    14ae:	4a0e      	ldr	r2, [pc, #56]	; (14e8 <uart_init+0x50>)
    14b0:	4b0e      	ldr	r3, [pc, #56]	; (14ec <uart_init+0x54>)
    14b2:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(UART_SERCOM_CLK_GEN);

	UART_SERCOM->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN;
    14b4:	22c0      	movs	r2, #192	; 0xc0
    14b6:	0292      	lsls	r2, r2, #10
    14b8:	4b0d      	ldr	r3, [pc, #52]	; (14f0 <uart_init+0x58>)
    14ba:	605a      	str	r2, [r3, #4]
	while (UART_SERCOM->USART.SYNCBUSY.bit.CTRLB);
    14bc:	001a      	movs	r2, r3
    14be:	69d3      	ldr	r3, [r2, #28]
    14c0:	075b      	lsls	r3, r3, #29
    14c2:	d4fc      	bmi.n	14be <uart_init+0x26>
	
	UART_SERCOM->USART.BAUD.reg = SERCOM_USART_BAUD_BAUD(64278);//60503 = 38400 baud rate & 64278 = 9600 baud rate
    14c4:	4b0a      	ldr	r3, [pc, #40]	; (14f0 <uart_init+0x58>)
    14c6:	4a0b      	ldr	r2, [pc, #44]	; (14f4 <uart_init+0x5c>)
    14c8:	819a      	strh	r2, [r3, #12]
	
	UART_SERCOM->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE(1) | SERCOM_USART_CTRLA_DORD |
    14ca:	4a0b      	ldr	r2, [pc, #44]	; (14f8 <uart_init+0x60>)
    14cc:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_RXPO(1) | SERCOM_USART_CTRLA_TXPO(0) | SERCOM_USART_CTRLA_SAMPR(0) |
	SERCOM_USART_CTRLA_ENABLE;
	while (UART_SERCOM->USART.SYNCBUSY.bit.ENABLE);
    14ce:	001a      	movs	r2, r3
    14d0:	69d3      	ldr	r3, [r2, #28]
    14d2:	079b      	lsls	r3, r3, #30
    14d4:	d4fc      	bmi.n	14d0 <uart_init+0x38>

}
    14d6:	bd10      	pop	{r4, pc}
    14d8:	00280003 	.word	0x00280003
    14dc:	0000144d 	.word	0x0000144d
    14e0:	00290003 	.word	0x00290003
    14e4:	40000400 	.word	0x40000400
    14e8:	00004218 	.word	0x00004218
    14ec:	40000c00 	.word	0x40000c00
    14f0:	42001800 	.word	0x42001800
    14f4:	fffffb16 	.word	0xfffffb16
    14f8:	40100006 	.word	0x40100006

000014fc <uart_read>:
}

uint8_t uart_read()
{
	/* Check if USART has new data */
	if(!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))
    14fc:	4b06      	ldr	r3, [pc, #24]	; (1518 <uart_read+0x1c>)
    14fe:	7e1b      	ldrb	r3, [r3, #24]
	{
		return 0;
    1500:	2000      	movs	r0, #0
	if(!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))
    1502:	075b      	lsls	r3, r3, #29
    1504:	d506      	bpl.n	1514 <uart_read+0x18>
	}
	else
	{
		/* Wait until synchronization is complete */
		while (UART_SERCOM->USART.SYNCBUSY.reg);
    1506:	4a04      	ldr	r2, [pc, #16]	; (1518 <uart_read+0x1c>)
    1508:	69d3      	ldr	r3, [r2, #28]
    150a:	2b00      	cmp	r3, #0
    150c:	d1fc      	bne.n	1508 <uart_read+0xc>
		/* Read data from USART module */
		return UART_SERCOM->USART.DATA.reg;
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <uart_read+0x1c>)
    1510:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1512:	b2c0      	uxtb	r0, r0
	}
}
    1514:	4770      	bx	lr
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	42001800 	.word	0x42001800

0000151c <uart_sendBuffer>:

void uart_sendBuffer(const uint8_t *tx_data, uint16_t length)
{
    151c:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	/* Wait until synchronization is complete */
	while (UART_SERCOM->USART.SYNCBUSY.reg);
    151e:	4a19      	ldr	r2, [pc, #100]	; (1584 <uart_sendBuffer+0x68>)
    1520:	69d3      	ldr	r3, [r2, #28]
    1522:	2b00      	cmp	r3, #0
    1524:	d1fc      	bne.n	1520 <uart_sendBuffer+0x4>
    1526:	0007      	movs	r7, r0
    1528:	1841      	adds	r1, r0, r1
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    152a:	4a16      	ldr	r2, [pc, #88]	; (1584 <uart_sendBuffer+0x68>)
    152c:	2501      	movs	r5, #1
		while (UART_SERCOM->USART.SYNCBUSY.reg);

			/* Write data to USART module */
			UART_SERCOM->USART.DATA.reg = data_to_send;

			while (!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    152e:	2602      	movs	r6, #2
    1530:	e008      	b.n	1544 <uart_sendBuffer+0x28>
		uint16_t data_to_send = tx_data[tx_pos++];
    1532:	7838      	ldrb	r0, [r7, #0]
		while (UART_SERCOM->USART.SYNCBUSY.reg);
    1534:	69d3      	ldr	r3, [r2, #28]
    1536:	2b00      	cmp	r3, #0
    1538:	d1fc      	bne.n	1534 <uart_sendBuffer+0x18>
			UART_SERCOM->USART.DATA.reg = data_to_send;
    153a:	8510      	strh	r0, [r2, #40]	; 0x28
			while (!(UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    153c:	7e13      	ldrb	r3, [r2, #24]
    153e:	4233      	tst	r3, r6
    1540:	d0fc      	beq.n	153c <uart_sendBuffer+0x20>
    1542:	3701      	adds	r7, #1
	while (length--) {
    1544:	428f      	cmp	r7, r1
    1546:	d00c      	beq.n	1562 <uart_sendBuffer+0x46>
			if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1548:	7e13      	ldrb	r3, [r2, #24]
    154a:	422b      	tst	r3, r5
    154c:	d1f1      	bne.n	1532 <uart_sendBuffer+0x16>
    154e:	4b0e      	ldr	r3, [pc, #56]	; (1588 <uart_sendBuffer+0x6c>)
    1550:	7e14      	ldrb	r4, [r2, #24]
    1552:	422c      	tst	r4, r5
    1554:	d1ed      	bne.n	1532 <uart_sendBuffer+0x16>
			} else if (i == USART_TIMEOUT) {
    1556:	2b01      	cmp	r3, #1
    1558:	d012      	beq.n	1580 <uart_sendBuffer+0x64>
    155a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    155c:	2b00      	cmp	r3, #0
    155e:	d1f7      	bne.n	1550 <uart_sendBuffer+0x34>
    1560:	e7e7      	b.n	1532 <uart_sendBuffer+0x16>
			}
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (UART_SERCOM->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1562:	4b08      	ldr	r3, [pc, #32]	; (1584 <uart_sendBuffer+0x68>)
    1564:	7e1b      	ldrb	r3, [r3, #24]
    1566:	079b      	lsls	r3, r3, #30
    1568:	d40a      	bmi.n	1580 <uart_sendBuffer+0x64>
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <uart_sendBuffer+0x6c>)
    156c:	4805      	ldr	r0, [pc, #20]	; (1584 <uart_sendBuffer+0x68>)
    156e:	2102      	movs	r1, #2
    1570:	7e02      	ldrb	r2, [r0, #24]
    1572:	420a      	tst	r2, r1
    1574:	d104      	bne.n	1580 <uart_sendBuffer+0x64>
			break;
		} else if (i == USART_TIMEOUT) {
    1576:	2b01      	cmp	r3, #1
    1578:	d002      	beq.n	1580 <uart_sendBuffer+0x64>
    157a:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    157c:	2b00      	cmp	r3, #0
    157e:	d1f7      	bne.n	1570 <uart_sendBuffer+0x54>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	42001800 	.word	0x42001800
    1588:	0000ffff 	.word	0x0000ffff

0000158c <ui_powerdown>:
    158c:	2280      	movs	r2, #128	; 0x80
    158e:	05d2      	lsls	r2, r2, #23
    1590:	4b01      	ldr	r3, [pc, #4]	; (1598 <ui_powerdown+0xc>)
    1592:	619a      	str	r2, [r3, #24]
}

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    1594:	4770      	bx	lr
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	41004480 	.word	0x41004480

0000159c <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
    159c:	b510      	push	{r4, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    159e:	2100      	movs	r1, #0
    15a0:	200f      	movs	r0, #15
    15a2:	4b01      	ldr	r3, [pc, #4]	; (15a8 <ui_wakeup_enable+0xc>)
    15a4:	4798      	blx	r3
}
    15a6:	bd10      	pop	{r4, pc}
    15a8:	00001d51 	.word	0x00001d51

000015ac <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    15ac:	b510      	push	{r4, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    15ae:	2100      	movs	r1, #0
    15b0:	200f      	movs	r0, #15
    15b2:	4b01      	ldr	r3, [pc, #4]	; (15b8 <ui_wakeup_disable+0xc>)
    15b4:	4798      	blx	r3
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00001d71 	.word	0x00001d71

000015bc <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    15bc:	2280      	movs	r2, #128	; 0x80
    15be:	05d2      	lsls	r2, r2, #23
    15c0:	4b01      	ldr	r3, [pc, #4]	; (15c8 <ui_wakeup+0xc>)
    15c2:	615a      	str	r2, [r3, #20]
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    15c4:	4770      	bx	lr
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	41004480 	.word	0x41004480

000015cc <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
    15cc:	4770      	bx	lr

000015ce <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
    15ce:	4770      	bx	lr

000015d0 <ui_process>:
{

}

void ui_process(uint16_t framenumber)
{
    15d0:	b510      	push	{r4, lr}
	if ((framenumber % 1000) == 0) {
    15d2:	21fa      	movs	r1, #250	; 0xfa
    15d4:	0089      	lsls	r1, r1, #2
    15d6:	4b09      	ldr	r3, [pc, #36]	; (15fc <ui_process+0x2c>)
    15d8:	4798      	blx	r3
    15da:	b289      	uxth	r1, r1
    15dc:	2900      	cmp	r1, #0
    15de:	d104      	bne.n	15ea <ui_process+0x1a>
    15e0:	2280      	movs	r2, #128	; 0x80
    15e2:	05d2      	lsls	r2, r2, #23
    15e4:	4b06      	ldr	r3, [pc, #24]	; (1600 <ui_process+0x30>)
    15e6:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		LED_Off(LED_0_PIN);
	}
}
    15e8:	bd10      	pop	{r4, pc}
	if ((framenumber % 1000) == 500) {
    15ea:	23fa      	movs	r3, #250	; 0xfa
    15ec:	005b      	lsls	r3, r3, #1
    15ee:	4299      	cmp	r1, r3
    15f0:	d1fa      	bne.n	15e8 <ui_process+0x18>
		port_base->OUTSET.reg = pin_mask;
    15f2:	2280      	movs	r2, #128	; 0x80
    15f4:	05d2      	lsls	r2, r2, #23
    15f6:	4b02      	ldr	r3, [pc, #8]	; (1600 <ui_process+0x30>)
    15f8:	619a      	str	r2, [r3, #24]
}
    15fa:	e7f5      	b.n	15e8 <ui_process+0x18>
    15fc:	00004ca1 	.word	0x00004ca1
    1600:	41004480 	.word	0x41004480

00001604 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1604:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1606:	4b11      	ldr	r3, [pc, #68]	; (164c <udc_next_desc_in_iface+0x48>)
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    160c:	7894      	ldrb	r4, [r2, #2]
    160e:	78d3      	ldrb	r3, [r2, #3]
    1610:	021b      	lsls	r3, r3, #8
    1612:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1614:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1616:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1618:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    161a:	4290      	cmp	r0, r2
    161c:	d210      	bcs.n	1640 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    161e:	7843      	ldrb	r3, [r0, #1]
    1620:	2b04      	cmp	r3, #4
    1622:	d00f      	beq.n	1644 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1624:	428b      	cmp	r3, r1
    1626:	d00a      	beq.n	163e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1628:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    162a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    162c:	4290      	cmp	r0, r2
    162e:	d205      	bcs.n	163c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1630:	7843      	ldrb	r3, [r0, #1]
    1632:	2b04      	cmp	r3, #4
    1634:	d008      	beq.n	1648 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1636:	428b      	cmp	r3, r1
    1638:	d1f6      	bne.n	1628 <udc_next_desc_in_iface+0x24>
    163a:	e000      	b.n	163e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    163c:	2000      	movs	r0, #0
}
    163e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1640:	2000      	movs	r0, #0
    1642:	e7fc      	b.n	163e <udc_next_desc_in_iface+0x3a>
    1644:	2000      	movs	r0, #0
    1646:	e7fa      	b.n	163e <udc_next_desc_in_iface+0x3a>
    1648:	2000      	movs	r0, #0
    164a:	e7f8      	b.n	163e <udc_next_desc_in_iface+0x3a>
    164c:	2000031c 	.word	0x2000031c

00001650 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1650:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1652:	4b03      	ldr	r3, [pc, #12]	; (1660 <udc_valid_address+0x10>)
    1654:	885b      	ldrh	r3, [r3, #2]
    1656:	207f      	movs	r0, #127	; 0x7f
    1658:	4018      	ands	r0, r3
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <udc_valid_address+0x14>)
    165c:	4798      	blx	r3
}
    165e:	bd10      	pop	{r4, pc}
    1660:	200007d8 	.word	0x200007d8
    1664:	000034a9 	.word	0x000034a9

00001668 <udc_update_iface_desc>:
{
    1668:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    166a:	4b19      	ldr	r3, [pc, #100]	; (16d0 <udc_update_iface_desc+0x68>)
    166c:	781b      	ldrb	r3, [r3, #0]
		return false;
    166e:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1670:	2b00      	cmp	r3, #0
    1672:	d029      	beq.n	16c8 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1674:	4b17      	ldr	r3, [pc, #92]	; (16d4 <udc_update_iface_desc+0x6c>)
    1676:	681b      	ldr	r3, [r3, #0]
    1678:	681b      	ldr	r3, [r3, #0]
    167a:	791c      	ldrb	r4, [r3, #4]
    167c:	4284      	cmp	r4, r0
    167e:	d923      	bls.n	16c8 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1680:	4a15      	ldr	r2, [pc, #84]	; (16d8 <udc_update_iface_desc+0x70>)
    1682:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1684:	789a      	ldrb	r2, [r3, #2]
    1686:	78dc      	ldrb	r4, [r3, #3]
    1688:	0224      	lsls	r4, r4, #8
    168a:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    168c:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    168e:	42a3      	cmp	r3, r4
    1690:	d21c      	bcs.n	16cc <udc_update_iface_desc+0x64>
    1692:	2500      	movs	r5, #0
    1694:	2601      	movs	r6, #1
    1696:	e007      	b.n	16a8 <udc_update_iface_desc+0x40>
    1698:	4a0f      	ldr	r2, [pc, #60]	; (16d8 <udc_update_iface_desc+0x70>)
    169a:	6013      	str	r3, [r2, #0]
    169c:	e00f      	b.n	16be <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    169e:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    16a0:	189b      	adds	r3, r3, r2
    16a2:	0035      	movs	r5, r6
	while (ptr_end_desc >
    16a4:	42a3      	cmp	r3, r4
    16a6:	d20c      	bcs.n	16c2 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    16a8:	785a      	ldrb	r2, [r3, #1]
    16aa:	2a04      	cmp	r2, #4
    16ac:	d1f7      	bne.n	169e <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    16ae:	789a      	ldrb	r2, [r3, #2]
    16b0:	4282      	cmp	r2, r0
    16b2:	d1f4      	bne.n	169e <udc_update_iface_desc+0x36>
    16b4:	78da      	ldrb	r2, [r3, #3]
    16b6:	428a      	cmp	r2, r1
    16b8:	d1f1      	bne.n	169e <udc_update_iface_desc+0x36>
    16ba:	2d00      	cmp	r5, #0
    16bc:	d1ec      	bne.n	1698 <udc_update_iface_desc+0x30>
				return true; // Interface found
    16be:	2201      	movs	r2, #1
    16c0:	e002      	b.n	16c8 <udc_update_iface_desc+0x60>
    16c2:	4a05      	ldr	r2, [pc, #20]	; (16d8 <udc_update_iface_desc+0x70>)
    16c4:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    16c6:	2200      	movs	r2, #0
}
    16c8:	0010      	movs	r0, r2
    16ca:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    16cc:	2200      	movs	r2, #0
    16ce:	e7fb      	b.n	16c8 <udc_update_iface_desc+0x60>
    16d0:	20000318 	.word	0x20000318
    16d4:	2000031c 	.word	0x2000031c
    16d8:	20000320 	.word	0x20000320

000016dc <udc_iface_disable>:
{
    16dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16de:	46c6      	mov	lr, r8
    16e0:	b500      	push	{lr}
    16e2:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    16e4:	2100      	movs	r1, #0
    16e6:	4b13      	ldr	r3, [pc, #76]	; (1734 <udc_iface_disable+0x58>)
    16e8:	4798      	blx	r3
    16ea:	1e05      	subs	r5, r0, #0
    16ec:	d103      	bne.n	16f6 <udc_iface_disable+0x1a>
}
    16ee:	0028      	movs	r0, r5
    16f0:	bc04      	pop	{r2}
    16f2:	4690      	mov	r8, r2
    16f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16f6:	4b10      	ldr	r3, [pc, #64]	; (1738 <udc_iface_disable+0x5c>)
    16f8:	681b      	ldr	r3, [r3, #0]
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	00a2      	lsls	r2, r4, #2
    16fe:	58d3      	ldr	r3, [r2, r3]
    1700:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1702:	68db      	ldr	r3, [r3, #12]
    1704:	4798      	blx	r3
    1706:	0001      	movs	r1, r0
    1708:	0020      	movs	r0, r4
    170a:	4b0a      	ldr	r3, [pc, #40]	; (1734 <udc_iface_disable+0x58>)
    170c:	4798      	blx	r3
    170e:	1e05      	subs	r5, r0, #0
    1710:	d0ed      	beq.n	16ee <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1712:	4b0a      	ldr	r3, [pc, #40]	; (173c <udc_iface_disable+0x60>)
    1714:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1716:	4e0a      	ldr	r6, [pc, #40]	; (1740 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1718:	4f0a      	ldr	r7, [pc, #40]	; (1744 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    171a:	2105      	movs	r1, #5
    171c:	0020      	movs	r0, r4
    171e:	47b0      	blx	r6
    1720:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1722:	d002      	beq.n	172a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1724:	7880      	ldrb	r0, [r0, #2]
    1726:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1728:	e7f7      	b.n	171a <udc_iface_disable+0x3e>
	udi_api->disable();
    172a:	4643      	mov	r3, r8
    172c:	685b      	ldr	r3, [r3, #4]
    172e:	4798      	blx	r3
	return true;
    1730:	e7dd      	b.n	16ee <udc_iface_disable+0x12>
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	00001669 	.word	0x00001669
    1738:	2000031c 	.word	0x2000031c
    173c:	20000320 	.word	0x20000320
    1740:	00001605 	.word	0x00001605
    1744:	00002fe9 	.word	0x00002fe9

00001748 <udc_iface_enable>:
{
    1748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    174a:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    174c:	4b0f      	ldr	r3, [pc, #60]	; (178c <udc_iface_enable+0x44>)
    174e:	4798      	blx	r3
    1750:	2800      	cmp	r0, #0
    1752:	d019      	beq.n	1788 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1754:	4b0e      	ldr	r3, [pc, #56]	; (1790 <udc_iface_enable+0x48>)
    1756:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1758:	4e0e      	ldr	r6, [pc, #56]	; (1794 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    175a:	4f0f      	ldr	r7, [pc, #60]	; (1798 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    175c:	2105      	movs	r1, #5
    175e:	0020      	movs	r0, r4
    1760:	47b0      	blx	r6
    1762:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1764:	d009      	beq.n	177a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1766:	7903      	ldrb	r3, [r0, #4]
    1768:	7942      	ldrb	r2, [r0, #5]
    176a:	0212      	lsls	r2, r2, #8
    176c:	431a      	orrs	r2, r3
    176e:	78c1      	ldrb	r1, [r0, #3]
    1770:	7880      	ldrb	r0, [r0, #2]
    1772:	47b8      	blx	r7
    1774:	2800      	cmp	r0, #0
    1776:	d1f1      	bne.n	175c <udc_iface_enable+0x14>
    1778:	e006      	b.n	1788 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    177a:	4b08      	ldr	r3, [pc, #32]	; (179c <udc_iface_enable+0x54>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	685b      	ldr	r3, [r3, #4]
    1780:	00ad      	lsls	r5, r5, #2
    1782:	58eb      	ldr	r3, [r5, r3]
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	4798      	blx	r3
}
    1788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001669 	.word	0x00001669
    1790:	20000320 	.word	0x20000320
    1794:	00001605 	.word	0x00001605
    1798:	00003041 	.word	0x00003041
    179c:	2000031c 	.word	0x2000031c

000017a0 <udc_start>:
{
    17a0:	b510      	push	{r4, lr}
	udd_enable();
    17a2:	4b01      	ldr	r3, [pc, #4]	; (17a8 <udc_start+0x8>)
    17a4:	4798      	blx	r3
}
    17a6:	bd10      	pop	{r4, pc}
    17a8:	000035b5 	.word	0x000035b5

000017ac <udc_reset>:
{
    17ac:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    17ae:	4b0e      	ldr	r3, [pc, #56]	; (17e8 <udc_reset+0x3c>)
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d011      	beq.n	17da <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17b6:	4b0d      	ldr	r3, [pc, #52]	; (17ec <udc_reset+0x40>)
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    17bc:	791b      	ldrb	r3, [r3, #4]
    17be:	2b00      	cmp	r3, #0
    17c0:	d00b      	beq.n	17da <udc_reset+0x2e>
    17c2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    17c4:	4e0a      	ldr	r6, [pc, #40]	; (17f0 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17c6:	4d09      	ldr	r5, [pc, #36]	; (17ec <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    17c8:	0020      	movs	r0, r4
    17ca:	47b0      	blx	r6
				iface_num++) {
    17cc:	3401      	adds	r4, #1
    17ce:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17d0:	682b      	ldr	r3, [r5, #0]
    17d2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    17d4:	791b      	ldrb	r3, [r3, #4]
    17d6:	42a3      	cmp	r3, r4
    17d8:	d8f6      	bhi.n	17c8 <udc_reset+0x1c>
	udc_num_configuration = 0;
    17da:	2200      	movs	r2, #0
    17dc:	4b02      	ldr	r3, [pc, #8]	; (17e8 <udc_reset+0x3c>)
    17de:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    17e0:	3201      	adds	r2, #1
    17e2:	4b04      	ldr	r3, [pc, #16]	; (17f4 <udc_reset+0x48>)
    17e4:	801a      	strh	r2, [r3, #0]
}
    17e6:	bd70      	pop	{r4, r5, r6, pc}
    17e8:	20000318 	.word	0x20000318
    17ec:	2000031c 	.word	0x2000031c
    17f0:	000016dd 	.word	0x000016dd
    17f4:	2000030e 	.word	0x2000030e

000017f8 <udc_sof_notify>:
{
    17f8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    17fa:	4b0e      	ldr	r3, [pc, #56]	; (1834 <udc_sof_notify+0x3c>)
    17fc:	781b      	ldrb	r3, [r3, #0]
    17fe:	2b00      	cmp	r3, #0
    1800:	d017      	beq.n	1832 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1802:	4b0d      	ldr	r3, [pc, #52]	; (1838 <udc_sof_notify+0x40>)
    1804:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1806:	681a      	ldr	r2, [r3, #0]
    1808:	7912      	ldrb	r2, [r2, #4]
    180a:	2a00      	cmp	r2, #0
    180c:	d011      	beq.n	1832 <udc_sof_notify+0x3a>
    180e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1810:	4d09      	ldr	r5, [pc, #36]	; (1838 <udc_sof_notify+0x40>)
    1812:	e006      	b.n	1822 <udc_sof_notify+0x2a>
				iface_num++) {
    1814:	3401      	adds	r4, #1
    1816:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1818:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    181a:	681a      	ldr	r2, [r3, #0]
    181c:	7912      	ldrb	r2, [r2, #4]
    181e:	42a2      	cmp	r2, r4
    1820:	d907      	bls.n	1832 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1822:	685b      	ldr	r3, [r3, #4]
    1824:	00a2      	lsls	r2, r4, #2
    1826:	58d3      	ldr	r3, [r2, r3]
    1828:	691b      	ldr	r3, [r3, #16]
    182a:	2b00      	cmp	r3, #0
    182c:	d0f2      	beq.n	1814 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    182e:	4798      	blx	r3
    1830:	e7f0      	b.n	1814 <udc_sof_notify+0x1c>
}
    1832:	bd70      	pop	{r4, r5, r6, pc}
    1834:	20000318 	.word	0x20000318
    1838:	2000031c 	.word	0x2000031c

0000183c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    183e:	4baa      	ldr	r3, [pc, #680]	; (1ae8 <udc_process_setup+0x2ac>)
    1840:	2200      	movs	r2, #0
    1842:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1844:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1846:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	b25a      	sxtb	r2, r3
    184c:	2a00      	cmp	r2, #0
    184e:	db13      	blt.n	1878 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1850:	2260      	movs	r2, #96	; 0x60
    1852:	421a      	tst	r2, r3
    1854:	d100      	bne.n	1858 <udc_process_setup+0x1c>
    1856:	e0d6      	b.n	1a06 <udc_process_setup+0x1ca>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1858:	4ba3      	ldr	r3, [pc, #652]	; (1ae8 <udc_process_setup+0x2ac>)
    185a:	781a      	ldrb	r2, [r3, #0]
    185c:	231f      	movs	r3, #31
    185e:	4013      	ands	r3, r2
    1860:	2b01      	cmp	r3, #1
    1862:	d100      	bne.n	1866 <udc_process_setup+0x2a>
    1864:	e172      	b.n	1b4c <udc_process_setup+0x310>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1866:	4ba0      	ldr	r3, [pc, #640]	; (1ae8 <udc_process_setup+0x2ac>)
    1868:	781a      	ldrb	r2, [r3, #0]
    186a:	231f      	movs	r3, #31
    186c:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    186e:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1870:	2b02      	cmp	r3, #2
    1872:	d100      	bne.n	1876 <udc_process_setup+0x3a>
    1874:	e1c8      	b.n	1c08 <udc_process_setup+0x3cc>
#endif
}
    1876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1878:	4a9b      	ldr	r2, [pc, #620]	; (1ae8 <udc_process_setup+0x2ac>)
    187a:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    187c:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    187e:	2a00      	cmp	r2, #0
    1880:	d0f9      	beq.n	1876 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1882:	2160      	movs	r1, #96	; 0x60
    1884:	4219      	tst	r1, r3
    1886:	d1e7      	bne.n	1858 <udc_process_setup+0x1c>
    1888:	211f      	movs	r1, #31
    188a:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    188c:	d108      	bne.n	18a0 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    188e:	4996      	ldr	r1, [pc, #600]	; (1ae8 <udc_process_setup+0x2ac>)
    1890:	7849      	ldrb	r1, [r1, #1]
    1892:	2906      	cmp	r1, #6
    1894:	d023      	beq.n	18de <udc_process_setup+0xa2>
    1896:	2908      	cmp	r1, #8
    1898:	d100      	bne.n	189c <udc_process_setup+0x60>
    189a:	e083      	b.n	19a4 <udc_process_setup+0x168>
    189c:	2900      	cmp	r1, #0
    189e:	d017      	beq.n	18d0 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18a0:	2b01      	cmp	r3, #1
    18a2:	d100      	bne.n	18a6 <udc_process_setup+0x6a>
    18a4:	e086      	b.n	19b4 <udc_process_setup+0x178>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18a6:	2b02      	cmp	r3, #2
    18a8:	d1d6      	bne.n	1858 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    18aa:	4b8f      	ldr	r3, [pc, #572]	; (1ae8 <udc_process_setup+0x2ac>)
    18ac:	785b      	ldrb	r3, [r3, #1]
	return false;
    18ae:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    18b0:	2b00      	cmp	r3, #0
    18b2:	d000      	beq.n	18b6 <udc_process_setup+0x7a>
    18b4:	e1a4      	b.n	1c00 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    18b6:	2a02      	cmp	r2, #2
    18b8:	d1d5      	bne.n	1866 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    18ba:	4b8b      	ldr	r3, [pc, #556]	; (1ae8 <udc_process_setup+0x2ac>)
    18bc:	7918      	ldrb	r0, [r3, #4]
    18be:	4b8b      	ldr	r3, [pc, #556]	; (1aec <udc_process_setup+0x2b0>)
    18c0:	4798      	blx	r3
    18c2:	4b8b      	ldr	r3, [pc, #556]	; (1af0 <udc_process_setup+0x2b4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    18c4:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    18c6:	2102      	movs	r1, #2
    18c8:	0018      	movs	r0, r3
    18ca:	4b8a      	ldr	r3, [pc, #552]	; (1af4 <udc_process_setup+0x2b8>)
    18cc:	4798      	blx	r3
    18ce:	e0fb      	b.n	1ac8 <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    18d0:	2a02      	cmp	r2, #2
    18d2:	d1c8      	bne.n	1866 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    18d4:	3102      	adds	r1, #2
    18d6:	4888      	ldr	r0, [pc, #544]	; (1af8 <udc_process_setup+0x2bc>)
    18d8:	4b86      	ldr	r3, [pc, #536]	; (1af4 <udc_process_setup+0x2b8>)
    18da:	4798      	blx	r3
    18dc:	e0f4      	b.n	1ac8 <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    18de:	4b82      	ldr	r3, [pc, #520]	; (1ae8 <udc_process_setup+0x2ac>)
    18e0:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    18e2:	0a13      	lsrs	r3, r2, #8
    18e4:	2b02      	cmp	r3, #2
    18e6:	d023      	beq.n	1930 <udc_process_setup+0xf4>
    18e8:	b2d9      	uxtb	r1, r3
    18ea:	2902      	cmp	r1, #2
    18ec:	d90f      	bls.n	190e <udc_process_setup+0xd2>
    18ee:	2b03      	cmp	r3, #3
    18f0:	d034      	beq.n	195c <udc_process_setup+0x120>
    18f2:	2b0f      	cmp	r3, #15
    18f4:	d000      	beq.n	18f8 <udc_process_setup+0xbc>
    18f6:	e180      	b.n	1bfa <udc_process_setup+0x3be>
		if (udc_config.conf_bos == NULL) {
    18f8:	4b80      	ldr	r3, [pc, #512]	; (1afc <udc_process_setup+0x2c0>)
    18fa:	6898      	ldr	r0, [r3, #8]
    18fc:	2800      	cmp	r0, #0
    18fe:	d0b2      	beq.n	1866 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1900:	7883      	ldrb	r3, [r0, #2]
    1902:	78c1      	ldrb	r1, [r0, #3]
    1904:	0209      	lsls	r1, r1, #8
    1906:	4319      	orrs	r1, r3
    1908:	4b7a      	ldr	r3, [pc, #488]	; (1af4 <udc_process_setup+0x2b8>)
    190a:	4798      	blx	r3
    190c:	e007      	b.n	191e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    190e:	2b01      	cmp	r3, #1
    1910:	d000      	beq.n	1914 <udc_process_setup+0xd8>
    1912:	e172      	b.n	1bfa <udc_process_setup+0x3be>
				(uint8_t *) udc_config.confdev_lsfs,
    1914:	4b79      	ldr	r3, [pc, #484]	; (1afc <udc_process_setup+0x2c0>)
    1916:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1918:	7801      	ldrb	r1, [r0, #0]
    191a:	4b76      	ldr	r3, [pc, #472]	; (1af4 <udc_process_setup+0x2b8>)
    191c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    191e:	4b72      	ldr	r3, [pc, #456]	; (1ae8 <udc_process_setup+0x2ac>)
    1920:	88da      	ldrh	r2, [r3, #6]
    1922:	899b      	ldrh	r3, [r3, #12]
    1924:	4293      	cmp	r3, r2
    1926:	d800      	bhi.n	192a <udc_process_setup+0xee>
    1928:	e0ce      	b.n	1ac8 <udc_process_setup+0x28c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    192a:	4b6f      	ldr	r3, [pc, #444]	; (1ae8 <udc_process_setup+0x2ac>)
    192c:	819a      	strh	r2, [r3, #12]
    192e:	e0cb      	b.n	1ac8 <udc_process_setup+0x28c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1930:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1932:	4b72      	ldr	r3, [pc, #456]	; (1afc <udc_process_setup+0x2c0>)
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	7c5b      	ldrb	r3, [r3, #17]
    1938:	4293      	cmp	r3, r2
    193a:	d800      	bhi.n	193e <udc_process_setup+0x102>
    193c:	e793      	b.n	1866 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    193e:	4b6f      	ldr	r3, [pc, #444]	; (1afc <udc_process_setup+0x2c0>)
    1940:	685b      	ldr	r3, [r3, #4]
    1942:	00d2      	lsls	r2, r2, #3
    1944:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1946:	7883      	ldrb	r3, [r0, #2]
    1948:	78c1      	ldrb	r1, [r0, #3]
    194a:	0209      	lsls	r1, r1, #8
    194c:	4319      	orrs	r1, r3
    194e:	4b69      	ldr	r3, [pc, #420]	; (1af4 <udc_process_setup+0x2b8>)
    1950:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1952:	4b65      	ldr	r3, [pc, #404]	; (1ae8 <udc_process_setup+0x2ac>)
    1954:	689b      	ldr	r3, [r3, #8]
    1956:	2202      	movs	r2, #2
    1958:	705a      	strb	r2, [r3, #1]
    195a:	e7e0      	b.n	191e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    195c:	23ff      	movs	r3, #255	; 0xff
    195e:	401a      	ands	r2, r3
    1960:	2a01      	cmp	r2, #1
    1962:	d01c      	beq.n	199e <udc_process_setup+0x162>
    1964:	2a00      	cmp	r2, #0
    1966:	d015      	beq.n	1994 <udc_process_setup+0x158>
    1968:	2a02      	cmp	r2, #2
    196a:	d000      	beq.n	196e <udc_process_setup+0x132>
    196c:	e774      	b.n	1858 <udc_process_setup+0x1c>
		str = udc_string_product_name;
    196e:	4c64      	ldr	r4, [pc, #400]	; (1b00 <udc_process_setup+0x2c4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1970:	210f      	movs	r1, #15
    1972:	4a64      	ldr	r2, [pc, #400]	; (1b04 <udc_process_setup+0x2c8>)
    1974:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1976:	5ce0      	ldrb	r0, [r4, r3]
    1978:	8050      	strh	r0, [r2, #2]
    197a:	3301      	adds	r3, #1
    197c:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    197e:	b2d8      	uxtb	r0, r3
    1980:	4288      	cmp	r0, r1
    1982:	d3f8      	bcc.n	1976 <udc_process_setup+0x13a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1984:	0049      	lsls	r1, r1, #1
    1986:	3102      	adds	r1, #2
    1988:	485e      	ldr	r0, [pc, #376]	; (1b04 <udc_process_setup+0x2c8>)
    198a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    198c:	b289      	uxth	r1, r1
    198e:	4b59      	ldr	r3, [pc, #356]	; (1af4 <udc_process_setup+0x2b8>)
    1990:	4798      	blx	r3
    1992:	e7c4      	b.n	191e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1994:	2104      	movs	r1, #4
    1996:	485c      	ldr	r0, [pc, #368]	; (1b08 <udc_process_setup+0x2cc>)
    1998:	4b56      	ldr	r3, [pc, #344]	; (1af4 <udc_process_setup+0x2b8>)
    199a:	4798      	blx	r3
    199c:	e7bf      	b.n	191e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    199e:	4c5b      	ldr	r4, [pc, #364]	; (1b0c <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    19a0:	2109      	movs	r1, #9
    19a2:	e7e6      	b.n	1972 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    19a4:	2a01      	cmp	r2, #1
    19a6:	d000      	beq.n	19aa <udc_process_setup+0x16e>
    19a8:	e75d      	b.n	1866 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    19aa:	2101      	movs	r1, #1
    19ac:	4858      	ldr	r0, [pc, #352]	; (1b10 <udc_process_setup+0x2d4>)
    19ae:	4b51      	ldr	r3, [pc, #324]	; (1af4 <udc_process_setup+0x2b8>)
    19b0:	4798      	blx	r3
    19b2:	e089      	b.n	1ac8 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    19b4:	494c      	ldr	r1, [pc, #304]	; (1ae8 <udc_process_setup+0x2ac>)
    19b6:	7849      	ldrb	r1, [r1, #1]
    19b8:	290a      	cmp	r1, #10
    19ba:	d000      	beq.n	19be <udc_process_setup+0x182>
    19bc:	e773      	b.n	18a6 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    19be:	2a01      	cmp	r2, #1
    19c0:	d000      	beq.n	19c4 <udc_process_setup+0x188>
    19c2:	e0c3      	b.n	1b4c <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    19c4:	4b52      	ldr	r3, [pc, #328]	; (1b10 <udc_process_setup+0x2d4>)
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d100      	bne.n	19ce <udc_process_setup+0x192>
    19cc:	e0be      	b.n	1b4c <udc_process_setup+0x310>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19ce:	4b46      	ldr	r3, [pc, #280]	; (1ae8 <udc_process_setup+0x2ac>)
    19d0:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19d2:	4b50      	ldr	r3, [pc, #320]	; (1b14 <udc_process_setup+0x2d8>)
    19d4:	681d      	ldr	r5, [r3, #0]
    19d6:	682b      	ldr	r3, [r5, #0]
    19d8:	791b      	ldrb	r3, [r3, #4]
    19da:	42a3      	cmp	r3, r4
    19dc:	d800      	bhi.n	19e0 <udc_process_setup+0x1a4>
    19de:	e0b5      	b.n	1b4c <udc_process_setup+0x310>
	if (!udc_update_iface_desc(iface_num, 0)) {
    19e0:	2100      	movs	r1, #0
    19e2:	0020      	movs	r0, r4
    19e4:	4b4c      	ldr	r3, [pc, #304]	; (1b18 <udc_process_setup+0x2dc>)
    19e6:	4798      	blx	r3
    19e8:	2800      	cmp	r0, #0
    19ea:	d100      	bne.n	19ee <udc_process_setup+0x1b2>
    19ec:	e734      	b.n	1858 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    19ee:	686b      	ldr	r3, [r5, #4]
    19f0:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    19f2:	58e3      	ldr	r3, [r4, r3]
    19f4:	68db      	ldr	r3, [r3, #12]
    19f6:	4798      	blx	r3
    19f8:	4b48      	ldr	r3, [pc, #288]	; (1b1c <udc_process_setup+0x2e0>)
    19fa:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    19fc:	2101      	movs	r1, #1
    19fe:	0018      	movs	r0, r3
    1a00:	4b3c      	ldr	r3, [pc, #240]	; (1af4 <udc_process_setup+0x2b8>)
    1a02:	4798      	blx	r3
    1a04:	e060      	b.n	1ac8 <udc_process_setup+0x28c>
    1a06:	221f      	movs	r2, #31
    1a08:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1a0a:	d15f      	bne.n	1acc <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a0c:	4a36      	ldr	r2, [pc, #216]	; (1ae8 <udc_process_setup+0x2ac>)
    1a0e:	7852      	ldrb	r2, [r2, #1]
    1a10:	2a03      	cmp	r2, #3
    1a12:	d100      	bne.n	1a16 <udc_process_setup+0x1da>
    1a14:	e0f3      	b.n	1bfe <udc_process_setup+0x3c2>
    1a16:	b2d1      	uxtb	r1, r2
    1a18:	2903      	cmp	r1, #3
    1a1a:	d93b      	bls.n	1a94 <udc_process_setup+0x258>
    1a1c:	2a05      	cmp	r2, #5
    1a1e:	d04b      	beq.n	1ab8 <udc_process_setup+0x27c>
    1a20:	2a09      	cmp	r2, #9
    1a22:	d153      	bne.n	1acc <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    1a24:	4b30      	ldr	r3, [pc, #192]	; (1ae8 <udc_process_setup+0x2ac>)
    1a26:	88db      	ldrh	r3, [r3, #6]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d000      	beq.n	1a2e <udc_process_setup+0x1f2>
    1a2c:	e71b      	b.n	1866 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1a2e:	4b3c      	ldr	r3, [pc, #240]	; (1b20 <udc_process_setup+0x2e4>)
    1a30:	4798      	blx	r3
    1a32:	2800      	cmp	r0, #0
    1a34:	d100      	bne.n	1a38 <udc_process_setup+0x1fc>
    1a36:	e70f      	b.n	1858 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a38:	4b2b      	ldr	r3, [pc, #172]	; (1ae8 <udc_process_setup+0x2ac>)
    1a3a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a3c:	4b2f      	ldr	r3, [pc, #188]	; (1afc <udc_process_setup+0x2c0>)
    1a3e:	681b      	ldr	r3, [r3, #0]
    1a40:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a42:	429a      	cmp	r2, r3
    1a44:	dd00      	ble.n	1a48 <udc_process_setup+0x20c>
    1a46:	e707      	b.n	1858 <udc_process_setup+0x1c>
	udc_reset();
    1a48:	4b36      	ldr	r3, [pc, #216]	; (1b24 <udc_process_setup+0x2e8>)
    1a4a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a4c:	4b26      	ldr	r3, [pc, #152]	; (1ae8 <udc_process_setup+0x2ac>)
    1a4e:	789b      	ldrb	r3, [r3, #2]
    1a50:	4a2f      	ldr	r2, [pc, #188]	; (1b10 <udc_process_setup+0x2d4>)
    1a52:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1a54:	2b00      	cmp	r3, #0
    1a56:	d037      	beq.n	1ac8 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a58:	4a33      	ldr	r2, [pc, #204]	; (1b28 <udc_process_setup+0x2ec>)
    1a5a:	4694      	mov	ip, r2
    1a5c:	4463      	add	r3, ip
    1a5e:	00db      	lsls	r3, r3, #3
    1a60:	4a26      	ldr	r2, [pc, #152]	; (1afc <udc_process_setup+0x2c0>)
    1a62:	6852      	ldr	r2, [r2, #4]
    1a64:	18d3      	adds	r3, r2, r3
    1a66:	4a2b      	ldr	r2, [pc, #172]	; (1b14 <udc_process_setup+0x2d8>)
    1a68:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	791b      	ldrb	r3, [r3, #4]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d02a      	beq.n	1ac8 <udc_process_setup+0x28c>
    1a72:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1a74:	4d2d      	ldr	r5, [pc, #180]	; (1b2c <udc_process_setup+0x2f0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a76:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1a78:	2100      	movs	r1, #0
    1a7a:	0020      	movs	r0, r4
    1a7c:	47a8      	blx	r5
    1a7e:	2800      	cmp	r0, #0
    1a80:	d100      	bne.n	1a84 <udc_process_setup+0x248>
    1a82:	e6e9      	b.n	1858 <udc_process_setup+0x1c>
			iface_num++) {
    1a84:	3401      	adds	r4, #1
    1a86:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a88:	6833      	ldr	r3, [r6, #0]
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	791b      	ldrb	r3, [r3, #4]
    1a8e:	42a3      	cmp	r3, r4
    1a90:	d8f2      	bhi.n	1a78 <udc_process_setup+0x23c>
    1a92:	e019      	b.n	1ac8 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a94:	2a01      	cmp	r2, #1
    1a96:	d119      	bne.n	1acc <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    1a98:	4b13      	ldr	r3, [pc, #76]	; (1ae8 <udc_process_setup+0x2ac>)
    1a9a:	88db      	ldrh	r3, [r3, #6]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d000      	beq.n	1aa2 <udc_process_setup+0x266>
    1aa0:	e6e1      	b.n	1866 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1aa2:	4b11      	ldr	r3, [pc, #68]	; (1ae8 <udc_process_setup+0x2ac>)
    1aa4:	885b      	ldrh	r3, [r3, #2]
    1aa6:	2b01      	cmp	r3, #1
    1aa8:	d000      	beq.n	1aac <udc_process_setup+0x270>
    1aaa:	e6dc      	b.n	1866 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1aac:	4a12      	ldr	r2, [pc, #72]	; (1af8 <udc_process_setup+0x2bc>)
    1aae:	8813      	ldrh	r3, [r2, #0]
    1ab0:	2102      	movs	r1, #2
    1ab2:	438b      	bics	r3, r1
    1ab4:	8013      	strh	r3, [r2, #0]
    1ab6:	e007      	b.n	1ac8 <udc_process_setup+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
    1ab8:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <udc_process_setup+0x2ac>)
    1aba:	88db      	ldrh	r3, [r3, #6]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d000      	beq.n	1ac2 <udc_process_setup+0x286>
    1ac0:	e6d1      	b.n	1866 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1ac2:	4a1b      	ldr	r2, [pc, #108]	; (1b30 <udc_process_setup+0x2f4>)
    1ac4:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <udc_process_setup+0x2ac>)
    1ac6:	611a      	str	r2, [r3, #16]
			return true;
    1ac8:	2001      	movs	r0, #1
    1aca:	e6d4      	b.n	1876 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1acc:	2b01      	cmp	r3, #1
    1ace:	d031      	beq.n	1b34 <udc_process_setup+0x2f8>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ad0:	2b02      	cmp	r3, #2
    1ad2:	d000      	beq.n	1ad6 <udc_process_setup+0x29a>
    1ad4:	e6c0      	b.n	1858 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ad6:	4b04      	ldr	r3, [pc, #16]	; (1ae8 <udc_process_setup+0x2ac>)
    1ad8:	785b      	ldrb	r3, [r3, #1]
    1ada:	2b01      	cmp	r3, #1
    1adc:	d06c      	beq.n	1bb8 <udc_process_setup+0x37c>
    1ade:	2b03      	cmp	r3, #3
    1ae0:	d100      	bne.n	1ae4 <udc_process_setup+0x2a8>
    1ae2:	e078      	b.n	1bd6 <udc_process_setup+0x39a>
	return false;
    1ae4:	2000      	movs	r0, #0
    1ae6:	e08b      	b.n	1c00 <udc_process_setup+0x3c4>
    1ae8:	200007d8 	.word	0x200007d8
    1aec:	00003149 	.word	0x00003149
    1af0:	20000310 	.word	0x20000310
    1af4:	000034c9 	.word	0x000034c9
    1af8:	2000030e 	.word	0x2000030e
    1afc:	2000004c 	.word	0x2000004c
    1b00:	200000fc 	.word	0x200000fc
    1b04:	200000cc 	.word	0x200000cc
    1b08:	200000ec 	.word	0x200000ec
    1b0c:	200000f0 	.word	0x200000f0
    1b10:	20000318 	.word	0x20000318
    1b14:	2000031c 	.word	0x2000031c
    1b18:	00001669 	.word	0x00001669
    1b1c:	20000314 	.word	0x20000314
    1b20:	000034b9 	.word	0x000034b9
    1b24:	000017ad 	.word	0x000017ad
    1b28:	1fffffff 	.word	0x1fffffff
    1b2c:	00001749 	.word	0x00001749
    1b30:	00001651 	.word	0x00001651
			switch (udd_g_ctrlreq.req.bRequest) {
    1b34:	4a48      	ldr	r2, [pc, #288]	; (1c58 <udc_process_setup+0x41c>)
    1b36:	7852      	ldrb	r2, [r2, #1]
    1b38:	2a0b      	cmp	r2, #11
    1b3a:	d1c9      	bne.n	1ad0 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1b3c:	4b46      	ldr	r3, [pc, #280]	; (1c58 <udc_process_setup+0x41c>)
    1b3e:	88db      	ldrh	r3, [r3, #6]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d103      	bne.n	1b4c <udc_process_setup+0x310>
	if (!udc_num_configuration) {
    1b44:	4b45      	ldr	r3, [pc, #276]	; (1c5c <udc_process_setup+0x420>)
    1b46:	781b      	ldrb	r3, [r3, #0]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d127      	bne.n	1b9c <udc_process_setup+0x360>
	if (0 == udc_num_configuration) {
    1b4c:	4b43      	ldr	r3, [pc, #268]	; (1c5c <udc_process_setup+0x420>)
    1b4e:	781b      	ldrb	r3, [r3, #0]
	return false;
    1b50:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1b52:	2b00      	cmp	r3, #0
    1b54:	d100      	bne.n	1b58 <udc_process_setup+0x31c>
    1b56:	e68e      	b.n	1876 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b58:	4b3f      	ldr	r3, [pc, #252]	; (1c58 <udc_process_setup+0x41c>)
    1b5a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b5c:	4b40      	ldr	r3, [pc, #256]	; (1c60 <udc_process_setup+0x424>)
    1b5e:	681d      	ldr	r5, [r3, #0]
    1b60:	682b      	ldr	r3, [r5, #0]
    1b62:	791b      	ldrb	r3, [r3, #4]
    1b64:	42a3      	cmp	r3, r4
    1b66:	d800      	bhi.n	1b6a <udc_process_setup+0x32e>
    1b68:	e685      	b.n	1876 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b6a:	2100      	movs	r1, #0
    1b6c:	0020      	movs	r0, r4
    1b6e:	4b3d      	ldr	r3, [pc, #244]	; (1c64 <udc_process_setup+0x428>)
    1b70:	4798      	blx	r3
    1b72:	2800      	cmp	r0, #0
    1b74:	d100      	bne.n	1b78 <udc_process_setup+0x33c>
    1b76:	e676      	b.n	1866 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b78:	686b      	ldr	r3, [r5, #4]
    1b7a:	00a2      	lsls	r2, r4, #2
    1b7c:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b7e:	68eb      	ldr	r3, [r5, #12]
    1b80:	4798      	blx	r3
    1b82:	0001      	movs	r1, r0
    1b84:	0020      	movs	r0, r4
    1b86:	4b37      	ldr	r3, [pc, #220]	; (1c64 <udc_process_setup+0x428>)
    1b88:	4798      	blx	r3
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d100      	bne.n	1b90 <udc_process_setup+0x354>
    1b8e:	e66a      	b.n	1866 <udc_process_setup+0x2a>
	return udi_api->setup();
    1b90:	68ab      	ldr	r3, [r5, #8]
    1b92:	4798      	blx	r3
		if (udc_req_iface()) {
    1b94:	2800      	cmp	r0, #0
    1b96:	d000      	beq.n	1b9a <udc_process_setup+0x35e>
    1b98:	e66d      	b.n	1876 <udc_process_setup+0x3a>
    1b9a:	e664      	b.n	1866 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b9c:	4b2e      	ldr	r3, [pc, #184]	; (1c58 <udc_process_setup+0x41c>)
    1b9e:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ba0:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1ba2:	0028      	movs	r0, r5
    1ba4:	4b30      	ldr	r3, [pc, #192]	; (1c68 <udc_process_setup+0x42c>)
    1ba6:	4798      	blx	r3
    1ba8:	2800      	cmp	r0, #0
    1baa:	d100      	bne.n	1bae <udc_process_setup+0x372>
    1bac:	e654      	b.n	1858 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1bae:	b2e1      	uxtb	r1, r4
    1bb0:	0028      	movs	r0, r5
    1bb2:	4b2e      	ldr	r3, [pc, #184]	; (1c6c <udc_process_setup+0x430>)
    1bb4:	4798      	blx	r3
    1bb6:	e023      	b.n	1c00 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1bb8:	4b27      	ldr	r3, [pc, #156]	; (1c58 <udc_process_setup+0x41c>)
    1bba:	88db      	ldrh	r3, [r3, #6]
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d000      	beq.n	1bc2 <udc_process_setup+0x386>
    1bc0:	e651      	b.n	1866 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1bc2:	4b25      	ldr	r3, [pc, #148]	; (1c58 <udc_process_setup+0x41c>)
    1bc4:	885b      	ldrh	r3, [r3, #2]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d000      	beq.n	1bcc <udc_process_setup+0x390>
    1bca:	e64c      	b.n	1866 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1bcc:	4b22      	ldr	r3, [pc, #136]	; (1c58 <udc_process_setup+0x41c>)
    1bce:	7918      	ldrb	r0, [r3, #4]
    1bd0:	4b27      	ldr	r3, [pc, #156]	; (1c70 <udc_process_setup+0x434>)
    1bd2:	4798      	blx	r3
    1bd4:	e014      	b.n	1c00 <udc_process_setup+0x3c4>
	if (udd_g_ctrlreq.req.wLength) {
    1bd6:	4b20      	ldr	r3, [pc, #128]	; (1c58 <udc_process_setup+0x41c>)
    1bd8:	88db      	ldrh	r3, [r3, #6]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d000      	beq.n	1be0 <udc_process_setup+0x3a4>
    1bde:	e642      	b.n	1866 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1be0:	4b1d      	ldr	r3, [pc, #116]	; (1c58 <udc_process_setup+0x41c>)
    1be2:	885b      	ldrh	r3, [r3, #2]
    1be4:	2b00      	cmp	r3, #0
    1be6:	d000      	beq.n	1bea <udc_process_setup+0x3ae>
    1be8:	e63d      	b.n	1866 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1bea:	4c1b      	ldr	r4, [pc, #108]	; (1c58 <udc_process_setup+0x41c>)
    1bec:	7920      	ldrb	r0, [r4, #4]
    1bee:	4b21      	ldr	r3, [pc, #132]	; (1c74 <udc_process_setup+0x438>)
    1bf0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1bf2:	7920      	ldrb	r0, [r4, #4]
    1bf4:	4b20      	ldr	r3, [pc, #128]	; (1c78 <udc_process_setup+0x43c>)
    1bf6:	4798      	blx	r3
    1bf8:	e002      	b.n	1c00 <udc_process_setup+0x3c4>
		return false;
    1bfa:	2000      	movs	r0, #0
    1bfc:	e000      	b.n	1c00 <udc_process_setup+0x3c4>
				return udc_req_std_dev_set_feature();
    1bfe:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1c00:	2800      	cmp	r0, #0
    1c02:	d000      	beq.n	1c06 <udc_process_setup+0x3ca>
    1c04:	e637      	b.n	1876 <udc_process_setup+0x3a>
    1c06:	e627      	b.n	1858 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1c08:	4b14      	ldr	r3, [pc, #80]	; (1c5c <udc_process_setup+0x420>)
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d100      	bne.n	1c12 <udc_process_setup+0x3d6>
    1c10:	e631      	b.n	1876 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c12:	4b13      	ldr	r3, [pc, #76]	; (1c60 <udc_process_setup+0x424>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	681a      	ldr	r2, [r3, #0]
    1c18:	7912      	ldrb	r2, [r2, #4]
    1c1a:	2a00      	cmp	r2, #0
    1c1c:	d01a      	beq.n	1c54 <udc_process_setup+0x418>
    1c1e:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c20:	4e10      	ldr	r6, [pc, #64]	; (1c64 <udc_process_setup+0x428>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c22:	4f0f      	ldr	r7, [pc, #60]	; (1c60 <udc_process_setup+0x424>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c24:	685b      	ldr	r3, [r3, #4]
    1c26:	00aa      	lsls	r2, r5, #2
    1c28:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c2a:	68e3      	ldr	r3, [r4, #12]
    1c2c:	4798      	blx	r3
    1c2e:	0001      	movs	r1, r0
    1c30:	0028      	movs	r0, r5
    1c32:	47b0      	blx	r6
    1c34:	2800      	cmp	r0, #0
    1c36:	d100      	bne.n	1c3a <udc_process_setup+0x3fe>
    1c38:	e61d      	b.n	1876 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1c3a:	68a3      	ldr	r3, [r4, #8]
    1c3c:	4798      	blx	r3
    1c3e:	2800      	cmp	r0, #0
    1c40:	d000      	beq.n	1c44 <udc_process_setup+0x408>
    1c42:	e618      	b.n	1876 <udc_process_setup+0x3a>
			iface_num++) {
    1c44:	3501      	adds	r5, #1
    1c46:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c48:	683b      	ldr	r3, [r7, #0]
    1c4a:	681a      	ldr	r2, [r3, #0]
    1c4c:	7912      	ldrb	r2, [r2, #4]
    1c4e:	42aa      	cmp	r2, r5
    1c50:	d8e8      	bhi.n	1c24 <udc_process_setup+0x3e8>
    1c52:	e610      	b.n	1876 <udc_process_setup+0x3a>
	return false;
    1c54:	2000      	movs	r0, #0
    1c56:	e60e      	b.n	1876 <udc_process_setup+0x3a>
    1c58:	200007d8 	.word	0x200007d8
    1c5c:	20000318 	.word	0x20000318
    1c60:	2000031c 	.word	0x2000031c
    1c64:	00001669 	.word	0x00001669
    1c68:	000016dd 	.word	0x000016dd
    1c6c:	00001749 	.word	0x00001749
    1c70:	0000328d 	.word	0x0000328d
    1c74:	00002f89 	.word	0x00002f89
    1c78:	0000315d 	.word	0x0000315d

00001c7c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c7c:	4b0c      	ldr	r3, [pc, #48]	; (1cb0 <cpu_irq_enter_critical+0x34>)
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d106      	bne.n	1c92 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c84:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d007      	beq.n	1c9c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c8c:	2200      	movs	r2, #0
    1c8e:	4b09      	ldr	r3, [pc, #36]	; (1cb4 <cpu_irq_enter_critical+0x38>)
    1c90:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c92:	4a07      	ldr	r2, [pc, #28]	; (1cb0 <cpu_irq_enter_critical+0x34>)
    1c94:	6813      	ldr	r3, [r2, #0]
    1c96:	3301      	adds	r3, #1
    1c98:	6013      	str	r3, [r2, #0]
}
    1c9a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c9c:	b672      	cpsid	i
    1c9e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1ca2:	2200      	movs	r2, #0
    1ca4:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <cpu_irq_enter_critical+0x3c>)
    1ca6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1ca8:	3201      	adds	r2, #1
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <cpu_irq_enter_critical+0x38>)
    1cac:	701a      	strb	r2, [r3, #0]
    1cae:	e7f0      	b.n	1c92 <cpu_irq_enter_critical+0x16>
    1cb0:	20000324 	.word	0x20000324
    1cb4:	20000328 	.word	0x20000328
    1cb8:	2000010c 	.word	0x2000010c

00001cbc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1cbc:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <cpu_irq_leave_critical+0x24>)
    1cbe:	681a      	ldr	r2, [r3, #0]
    1cc0:	3a01      	subs	r2, #1
    1cc2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d109      	bne.n	1cde <cpu_irq_leave_critical+0x22>
    1cca:	4b06      	ldr	r3, [pc, #24]	; (1ce4 <cpu_irq_leave_critical+0x28>)
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d005      	beq.n	1cde <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1cd2:	2201      	movs	r2, #1
    1cd4:	4b04      	ldr	r3, [pc, #16]	; (1ce8 <cpu_irq_leave_critical+0x2c>)
    1cd6:	701a      	strb	r2, [r3, #0]
    1cd8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cdc:	b662      	cpsie	i
	}
}
    1cde:	4770      	bx	lr
    1ce0:	20000324 	.word	0x20000324
    1ce4:	20000328 	.word	0x20000328
    1ce8:	2000010c 	.word	0x2000010c

00001cec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1cf0:	ac01      	add	r4, sp, #4
    1cf2:	2501      	movs	r5, #1
    1cf4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1cf6:	2700      	movs	r7, #0
    1cf8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1cfa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1cfc:	0021      	movs	r1, r4
    1cfe:	203e      	movs	r0, #62	; 0x3e
    1d00:	4e06      	ldr	r6, [pc, #24]	; (1d1c <system_board_init+0x30>)
    1d02:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1d04:	2280      	movs	r2, #128	; 0x80
    1d06:	05d2      	lsls	r2, r2, #23
    1d08:	4b05      	ldr	r3, [pc, #20]	; (1d20 <system_board_init+0x34>)
    1d0a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d0c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d0e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d10:	0021      	movs	r1, r4
    1d12:	200f      	movs	r0, #15
    1d14:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1d16:	b003      	add	sp, #12
    1d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	0000218d 	.word	0x0000218d
    1d20:	41004480 	.word	0x41004480

00001d24 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d24:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1d26:	2a00      	cmp	r2, #0
    1d28:	d001      	beq.n	1d2e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1d2a:	0018      	movs	r0, r3
    1d2c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    1d2e:	008b      	lsls	r3, r1, #2
    1d30:	4a06      	ldr	r2, [pc, #24]	; (1d4c <extint_register_callback+0x28>)
    1d32:	589b      	ldr	r3, [r3, r2]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d003      	beq.n	1d40 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1d38:	4283      	cmp	r3, r0
    1d3a:	d005      	beq.n	1d48 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1d3c:	231d      	movs	r3, #29
    1d3e:	e7f4      	b.n	1d2a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1d40:	0089      	lsls	r1, r1, #2
    1d42:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1d44:	2300      	movs	r3, #0
    1d46:	e7f0      	b.n	1d2a <extint_register_callback+0x6>
		return STATUS_OK;
    1d48:	2300      	movs	r3, #0
    1d4a:	e7ee      	b.n	1d2a <extint_register_callback+0x6>
    1d4c:	20000570 	.word	0x20000570

00001d50 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d50:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1d52:	2900      	cmp	r1, #0
    1d54:	d001      	beq.n	1d5a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1d56:	0018      	movs	r0, r3
    1d58:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1d5a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1d5c:	281f      	cmp	r0, #31
    1d5e:	d800      	bhi.n	1d62 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1d60:	4a02      	ldr	r2, [pc, #8]	; (1d6c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1d62:	2301      	movs	r3, #1
    1d64:	4083      	lsls	r3, r0
    1d66:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1d68:	2300      	movs	r3, #0
    1d6a:	e7f4      	b.n	1d56 <extint_chan_enable_callback+0x6>
    1d6c:	40001800 	.word	0x40001800

00001d70 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d70:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1d72:	2900      	cmp	r1, #0
    1d74:	d001      	beq.n	1d7a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    1d76:	0018      	movs	r0, r3
    1d78:	4770      	bx	lr
		return NULL;
    1d7a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    1d7c:	281f      	cmp	r0, #31
    1d7e:	d800      	bhi.n	1d82 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    1d80:	4a02      	ldr	r2, [pc, #8]	; (1d8c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    1d82:	2301      	movs	r3, #1
    1d84:	4083      	lsls	r3, r0
    1d86:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    1d88:	2300      	movs	r3, #0
    1d8a:	e7f4      	b.n	1d76 <extint_chan_disable_callback+0x6>
    1d8c:	40001800 	.word	0x40001800

00001d90 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1d90:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1d92:	2200      	movs	r2, #0
    1d94:	4b10      	ldr	r3, [pc, #64]	; (1dd8 <EIC_Handler+0x48>)
    1d96:	701a      	strb	r2, [r3, #0]
    1d98:	2300      	movs	r3, #0
    1d9a:	4910      	ldr	r1, [pc, #64]	; (1ddc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1d9c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1d9e:	4e10      	ldr	r6, [pc, #64]	; (1de0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1da0:	4c0d      	ldr	r4, [pc, #52]	; (1dd8 <EIC_Handler+0x48>)
    1da2:	e00a      	b.n	1dba <EIC_Handler+0x2a>
		return eics[eic_index];
    1da4:	490d      	ldr	r1, [pc, #52]	; (1ddc <EIC_Handler+0x4c>)
    1da6:	e008      	b.n	1dba <EIC_Handler+0x2a>
    1da8:	7823      	ldrb	r3, [r4, #0]
    1daa:	3301      	adds	r3, #1
    1dac:	b2db      	uxtb	r3, r3
    1dae:	7023      	strb	r3, [r4, #0]
    1db0:	2b0f      	cmp	r3, #15
    1db2:	d810      	bhi.n	1dd6 <EIC_Handler+0x46>
		return NULL;
    1db4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1db6:	2b1f      	cmp	r3, #31
    1db8:	d9f4      	bls.n	1da4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1dba:	0028      	movs	r0, r5
    1dbc:	4018      	ands	r0, r3
    1dbe:	2201      	movs	r2, #1
    1dc0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1dc2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1dc4:	4210      	tst	r0, r2
    1dc6:	d0ef      	beq.n	1da8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1dc8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1dca:	009b      	lsls	r3, r3, #2
    1dcc:	599b      	ldr	r3, [r3, r6]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d0ea      	beq.n	1da8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1dd2:	4798      	blx	r3
    1dd4:	e7e8      	b.n	1da8 <EIC_Handler+0x18>
			}
		}
	}
}
    1dd6:	bd70      	pop	{r4, r5, r6, pc}
    1dd8:	2000056d 	.word	0x2000056d
    1ddc:	40001800 	.word	0x40001800
    1de0:	20000570 	.word	0x20000570

00001de4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1de4:	4a04      	ldr	r2, [pc, #16]	; (1df8 <_extint_enable+0x14>)
    1de6:	7813      	ldrb	r3, [r2, #0]
    1de8:	2102      	movs	r1, #2
    1dea:	430b      	orrs	r3, r1
    1dec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1dee:	7853      	ldrb	r3, [r2, #1]
    1df0:	b25b      	sxtb	r3, r3
    1df2:	2b00      	cmp	r3, #0
    1df4:	dbfb      	blt.n	1dee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1df6:	4770      	bx	lr
    1df8:	40001800 	.word	0x40001800

00001dfc <_system_extint_init>:
{
    1dfc:	b500      	push	{lr}
    1dfe:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e00:	4a12      	ldr	r2, [pc, #72]	; (1e4c <_system_extint_init+0x50>)
    1e02:	6993      	ldr	r3, [r2, #24]
    1e04:	2140      	movs	r1, #64	; 0x40
    1e06:	430b      	orrs	r3, r1
    1e08:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1e0a:	a901      	add	r1, sp, #4
    1e0c:	2300      	movs	r3, #0
    1e0e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1e10:	2005      	movs	r0, #5
    1e12:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <_system_extint_init+0x54>)
    1e14:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1e16:	2005      	movs	r0, #5
    1e18:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <_system_extint_init+0x58>)
    1e1a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1e1c:	4a0e      	ldr	r2, [pc, #56]	; (1e58 <_system_extint_init+0x5c>)
    1e1e:	7813      	ldrb	r3, [r2, #0]
    1e20:	2101      	movs	r1, #1
    1e22:	430b      	orrs	r3, r1
    1e24:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1e26:	7853      	ldrb	r3, [r2, #1]
    1e28:	b25b      	sxtb	r3, r3
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	dbfb      	blt.n	1e26 <_system_extint_init+0x2a>
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <_system_extint_init+0x60>)
    1e30:	0019      	movs	r1, r3
    1e32:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1e34:	2200      	movs	r2, #0
    1e36:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1e38:	4299      	cmp	r1, r3
    1e3a:	d1fc      	bne.n	1e36 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e3c:	2210      	movs	r2, #16
    1e3e:	4b08      	ldr	r3, [pc, #32]	; (1e60 <_system_extint_init+0x64>)
    1e40:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1e42:	4b08      	ldr	r3, [pc, #32]	; (1e64 <_system_extint_init+0x68>)
    1e44:	4798      	blx	r3
}
    1e46:	b003      	add	sp, #12
    1e48:	bd00      	pop	{pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	40000400 	.word	0x40000400
    1e50:	000027c9 	.word	0x000027c9
    1e54:	0000273d 	.word	0x0000273d
    1e58:	40001800 	.word	0x40001800
    1e5c:	20000570 	.word	0x20000570
    1e60:	e000e100 	.word	0xe000e100
    1e64:	00001de5 	.word	0x00001de5

00001e68 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1e68:	2300      	movs	r3, #0
    1e6a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1e6c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1e6e:	2201      	movs	r2, #1
    1e70:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1e72:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1e74:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1e76:	3302      	adds	r3, #2
    1e78:	72c3      	strb	r3, [r0, #11]
}
    1e7a:	4770      	bx	lr

00001e7c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e7e:	b083      	sub	sp, #12
    1e80:	0005      	movs	r5, r0
    1e82:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e84:	a901      	add	r1, sp, #4
    1e86:	2300      	movs	r3, #0
    1e88:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1e8a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1e8c:	7923      	ldrb	r3, [r4, #4]
    1e8e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1e90:	7a23      	ldrb	r3, [r4, #8]
    1e92:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1e94:	7820      	ldrb	r0, [r4, #0]
    1e96:	4b15      	ldr	r3, [pc, #84]	; (1eec <extint_chan_set_config+0x70>)
    1e98:	4798      	blx	r3
		return NULL;
    1e9a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1e9c:	2d1f      	cmp	r5, #31
    1e9e:	d800      	bhi.n	1ea2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1ea0:	4813      	ldr	r0, [pc, #76]	; (1ef0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1ea2:	2207      	movs	r2, #7
    1ea4:	402a      	ands	r2, r5
    1ea6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1ea8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1eaa:	7aa3      	ldrb	r3, [r4, #10]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d001      	beq.n	1eb4 <extint_chan_set_config+0x38>
    1eb0:	2308      	movs	r3, #8
    1eb2:	431f      	orrs	r7, r3
    1eb4:	08eb      	lsrs	r3, r5, #3
    1eb6:	009b      	lsls	r3, r3, #2
    1eb8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1eba:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1ebc:	260f      	movs	r6, #15
    1ebe:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1ec0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1ec2:	4097      	lsls	r7, r2
    1ec4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1ec6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1ec8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1eca:	7a63      	ldrb	r3, [r4, #9]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d106      	bne.n	1ede <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1ed0:	6943      	ldr	r3, [r0, #20]
    1ed2:	2201      	movs	r2, #1
    1ed4:	40aa      	lsls	r2, r5
    1ed6:	4393      	bics	r3, r2
    1ed8:	6143      	str	r3, [r0, #20]
	}
}
    1eda:	b003      	add	sp, #12
    1edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1ede:	6942      	ldr	r2, [r0, #20]
    1ee0:	2301      	movs	r3, #1
    1ee2:	40ab      	lsls	r3, r5
    1ee4:	4313      	orrs	r3, r2
    1ee6:	6143      	str	r3, [r0, #20]
    1ee8:	e7f7      	b.n	1eda <extint_chan_set_config+0x5e>
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	0000288d 	.word	0x0000288d
    1ef0:	40001800 	.word	0x40001800

00001ef4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1ef4:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1ef6:	4a1e      	ldr	r2, [pc, #120]	; (1f70 <nvm_set_config+0x7c>)
    1ef8:	69d3      	ldr	r3, [r2, #28]
    1efa:	2104      	movs	r1, #4
    1efc:	430b      	orrs	r3, r1
    1efe:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1f00:	4b1c      	ldr	r3, [pc, #112]	; (1f74 <nvm_set_config+0x80>)
    1f02:	2220      	movs	r2, #32
    1f04:	32ff      	adds	r2, #255	; 0xff
    1f06:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1f08:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    1f0a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    1f0c:	07d2      	lsls	r2, r2, #31
    1f0e:	d401      	bmi.n	1f14 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    1f10:	0018      	movs	r0, r3
    1f12:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1f14:	7803      	ldrb	r3, [r0, #0]
    1f16:	021b      	lsls	r3, r3, #8
    1f18:	22c0      	movs	r2, #192	; 0xc0
    1f1a:	0092      	lsls	r2, r2, #2
    1f1c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1f1e:	7841      	ldrb	r1, [r0, #1]
    1f20:	01c9      	lsls	r1, r1, #7
    1f22:	22ff      	movs	r2, #255	; 0xff
    1f24:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1f26:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1f28:	7881      	ldrb	r1, [r0, #2]
    1f2a:	0049      	lsls	r1, r1, #1
    1f2c:	221e      	movs	r2, #30
    1f2e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1f30:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1f32:	78c2      	ldrb	r2, [r0, #3]
    1f34:	0492      	lsls	r2, r2, #18
    1f36:	2180      	movs	r1, #128	; 0x80
    1f38:	02c9      	lsls	r1, r1, #11
    1f3a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1f3c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1f3e:	7902      	ldrb	r2, [r0, #4]
    1f40:	0412      	lsls	r2, r2, #16
    1f42:	21c0      	movs	r1, #192	; 0xc0
    1f44:	0289      	lsls	r1, r1, #10
    1f46:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1f48:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    1f4a:	4a0a      	ldr	r2, [pc, #40]	; (1f74 <nvm_set_config+0x80>)
    1f4c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1f4e:	6893      	ldr	r3, [r2, #8]
    1f50:	035b      	lsls	r3, r3, #13
    1f52:	0f5b      	lsrs	r3, r3, #29
    1f54:	4908      	ldr	r1, [pc, #32]	; (1f78 <nvm_set_config+0x84>)
    1f56:	2408      	movs	r4, #8
    1f58:	409c      	lsls	r4, r3
    1f5a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1f5c:	6893      	ldr	r3, [r2, #8]
    1f5e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1f60:	7843      	ldrb	r3, [r0, #1]
    1f62:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1f64:	8b13      	ldrh	r3, [r2, #24]
    1f66:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    1f68:	0fdb      	lsrs	r3, r3, #31
    1f6a:	011b      	lsls	r3, r3, #4
    1f6c:	e7d0      	b.n	1f10 <nvm_set_config+0x1c>
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	40000400 	.word	0x40000400
    1f74:	41004000 	.word	0x41004000
    1f78:	2000032c 	.word	0x2000032c

00001f7c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1f7c:	b530      	push	{r4, r5, lr}
    1f7e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1f80:	4a22      	ldr	r2, [pc, #136]	; (200c <STACK_SIZE+0xc>)
    1f82:	8810      	ldrh	r0, [r2, #0]
    1f84:	8853      	ldrh	r3, [r2, #2]
    1f86:	4343      	muls	r3, r0
    1f88:	428b      	cmp	r3, r1
    1f8a:	d206      	bcs.n	1f9a <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1f8c:	2280      	movs	r2, #128	; 0x80
    1f8e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1f90:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1f92:	4b1f      	ldr	r3, [pc, #124]	; (2010 <STACK_SIZE+0x10>)
    1f94:	18cb      	adds	r3, r1, r3
    1f96:	4293      	cmp	r3, r2
    1f98:	d80e      	bhi.n	1fb8 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1f9a:	4b1e      	ldr	r3, [pc, #120]	; (2014 <STACK_SIZE+0x14>)
    1f9c:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1f9e:	2280      	movs	r2, #128	; 0x80
    1fa0:	02d2      	lsls	r2, r2, #11
    1fa2:	432a      	orrs	r2, r5
    1fa4:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1fa6:	2220      	movs	r2, #32
    1fa8:	32ff      	adds	r2, #255	; 0xff
    1faa:	831a      	strh	r2, [r3, #24]
    1fac:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1fae:	07db      	lsls	r3, r3, #31
    1fb0:	d403      	bmi.n	1fba <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1fb2:	4b18      	ldr	r3, [pc, #96]	; (2014 <STACK_SIZE+0x14>)
    1fb4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    1fb6:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    1fb8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    1fba:	2c45      	cmp	r4, #69	; 0x45
    1fbc:	d822      	bhi.n	2004 <STACK_SIZE+0x4>
    1fbe:	00a3      	lsls	r3, r4, #2
    1fc0:	4a15      	ldr	r2, [pc, #84]	; (2018 <STACK_SIZE+0x18>)
    1fc2:	58d3      	ldr	r3, [r2, r3]
    1fc4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1fc6:	4b13      	ldr	r3, [pc, #76]	; (2014 <STACK_SIZE+0x14>)
    1fc8:	8b1b      	ldrh	r3, [r3, #24]
    1fca:	05db      	lsls	r3, r3, #23
    1fcc:	d503      	bpl.n	1fd6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    1fce:	4b11      	ldr	r3, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fd0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    1fd2:	2010      	movs	r0, #16
    1fd4:	e7f0      	b.n	1fb8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1fd6:	0889      	lsrs	r1, r1, #2
    1fd8:	0049      	lsls	r1, r1, #1
    1fda:	4b0e      	ldr	r3, [pc, #56]	; (2014 <STACK_SIZE+0x14>)
    1fdc:	61d9      	str	r1, [r3, #28]
			break;
    1fde:	e003      	b.n	1fe8 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1fe0:	0889      	lsrs	r1, r1, #2
    1fe2:	0049      	lsls	r1, r1, #1
    1fe4:	4b0b      	ldr	r3, [pc, #44]	; (2014 <STACK_SIZE+0x14>)
    1fe6:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1fe8:	20a5      	movs	r0, #165	; 0xa5
    1fea:	0200      	lsls	r0, r0, #8
    1fec:	4304      	orrs	r4, r0
    1fee:	4b09      	ldr	r3, [pc, #36]	; (2014 <STACK_SIZE+0x14>)
    1ff0:	801c      	strh	r4, [r3, #0]
    1ff2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    1ff4:	2201      	movs	r2, #1
    1ff6:	7d0b      	ldrb	r3, [r1, #20]
    1ff8:	4213      	tst	r3, r2
    1ffa:	d0fc      	beq.n	1ff6 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    1ffc:	4b05      	ldr	r3, [pc, #20]	; (2014 <STACK_SIZE+0x14>)
    1ffe:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    2000:	2000      	movs	r0, #0
    2002:	e7d9      	b.n	1fb8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    2004:	4b03      	ldr	r3, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2006:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2008:	2017      	movs	r0, #23
    200a:	e7d5      	b.n	1fb8 <nvm_execute_command+0x3c>
    200c:	2000032c 	.word	0x2000032c
    2010:	ff7fc000 	.word	0xff7fc000
    2014:	41004000 	.word	0x41004000
    2018:	00006b0c 	.word	0x00006b0c

0000201c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    201e:	4b25      	ldr	r3, [pc, #148]	; (20b4 <nvm_write_buffer+0x98>)
    2020:	881d      	ldrh	r5, [r3, #0]
    2022:	885b      	ldrh	r3, [r3, #2]
    2024:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2026:	2418      	movs	r4, #24
	if (destination_address >
    2028:	4283      	cmp	r3, r0
    202a:	d201      	bcs.n	2030 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    202c:	0020      	movs	r0, r4
    202e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2030:	1e6b      	subs	r3, r5, #1
    2032:	4218      	tst	r0, r3
    2034:	d1fa      	bne.n	202c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    2036:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    2038:	4295      	cmp	r5, r2
    203a:	d3f7      	bcc.n	202c <nvm_write_buffer+0x10>
    203c:	4b1e      	ldr	r3, [pc, #120]	; (20b8 <nvm_write_buffer+0x9c>)
    203e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    2040:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    2042:	07db      	lsls	r3, r3, #31
    2044:	d5f2      	bpl.n	202c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2046:	4c1d      	ldr	r4, [pc, #116]	; (20bc <nvm_write_buffer+0xa0>)
    2048:	4b1b      	ldr	r3, [pc, #108]	; (20b8 <nvm_write_buffer+0x9c>)
    204a:	801c      	strh	r4, [r3, #0]
    204c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    204e:	2401      	movs	r4, #1
    2050:	7d2b      	ldrb	r3, [r5, #20]
    2052:	4223      	tst	r3, r4
    2054:	d0fc      	beq.n	2050 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2056:	2420      	movs	r4, #32
    2058:	34ff      	adds	r4, #255	; 0xff
    205a:	4b17      	ldr	r3, [pc, #92]	; (20b8 <nvm_write_buffer+0x9c>)
    205c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    205e:	2a00      	cmp	r2, #0
    2060:	d022      	beq.n	20a8 <nvm_write_buffer+0x8c>
    2062:	2301      	movs	r3, #1
    2064:	0005      	movs	r5, r0
    2066:	439d      	bics	r5, r3
    2068:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    206a:	1e57      	subs	r7, r2, #1
    206c:	e009      	b.n	2082 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    206e:	18ce      	adds	r6, r1, r3
    2070:	7876      	ldrb	r6, [r6, #1]
    2072:	0236      	lsls	r6, r6, #8
    2074:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    2076:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2078:	3302      	adds	r3, #2
    207a:	b29b      	uxth	r3, r3
    207c:	3502      	adds	r5, #2
    207e:	429a      	cmp	r2, r3
    2080:	d904      	bls.n	208c <nvm_write_buffer+0x70>
		data = buffer[i];
    2082:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    2084:	42bb      	cmp	r3, r7
    2086:	dbf2      	blt.n	206e <nvm_write_buffer+0x52>
		data = buffer[i];
    2088:	b2a4      	uxth	r4, r4
    208a:	e7f4      	b.n	2076 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    208c:	4b09      	ldr	r3, [pc, #36]	; (20b4 <nvm_write_buffer+0x98>)
    208e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    2090:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2092:	2b00      	cmp	r3, #0
    2094:	d1ca      	bne.n	202c <nvm_write_buffer+0x10>
    2096:	2a3f      	cmp	r2, #63	; 0x3f
    2098:	d8c8      	bhi.n	202c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    209a:	2200      	movs	r2, #0
    209c:	0001      	movs	r1, r0
    209e:	2004      	movs	r0, #4
    20a0:	4b07      	ldr	r3, [pc, #28]	; (20c0 <nvm_write_buffer+0xa4>)
    20a2:	4798      	blx	r3
    20a4:	0004      	movs	r4, r0
    20a6:	e7c1      	b.n	202c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    20a8:	4b02      	ldr	r3, [pc, #8]	; (20b4 <nvm_write_buffer+0x98>)
    20aa:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    20ac:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    20ae:	2b00      	cmp	r3, #0
    20b0:	d0f3      	beq.n	209a <nvm_write_buffer+0x7e>
    20b2:	e7bb      	b.n	202c <nvm_write_buffer+0x10>
    20b4:	2000032c 	.word	0x2000032c
    20b8:	41004000 	.word	0x41004000
    20bc:	ffffa544 	.word	0xffffa544
    20c0:	00001f7d 	.word	0x00001f7d

000020c4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    20c4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    20c6:	4b18      	ldr	r3, [pc, #96]	; (2128 <nvm_read_buffer+0x64>)
    20c8:	881d      	ldrh	r5, [r3, #0]
    20ca:	885b      	ldrh	r3, [r3, #2]
    20cc:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    20ce:	2418      	movs	r4, #24
	if (source_address >
    20d0:	4283      	cmp	r3, r0
    20d2:	d201      	bcs.n	20d8 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    20d4:	0020      	movs	r0, r4
    20d6:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    20d8:	1e6b      	subs	r3, r5, #1
    20da:	4218      	tst	r0, r3
    20dc:	d1fa      	bne.n	20d4 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    20de:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    20e0:	4295      	cmp	r5, r2
    20e2:	d3f7      	bcc.n	20d4 <nvm_read_buffer+0x10>
    20e4:	4b11      	ldr	r3, [pc, #68]	; (212c <nvm_read_buffer+0x68>)
    20e6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    20e8:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    20ea:	07db      	lsls	r3, r3, #31
    20ec:	d5f2      	bpl.n	20d4 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    20ee:	2420      	movs	r4, #32
    20f0:	34ff      	adds	r4, #255	; 0xff
    20f2:	4b0e      	ldr	r3, [pc, #56]	; (212c <nvm_read_buffer+0x68>)
    20f4:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    20f6:	2a00      	cmp	r2, #0
    20f8:	d014      	beq.n	2124 <nvm_read_buffer+0x60>
    20fa:	2301      	movs	r3, #1
    20fc:	4398      	bics	r0, r3
    20fe:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    2100:	1e56      	subs	r6, r2, #1
    2102:	e004      	b.n	210e <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    2104:	3302      	adds	r3, #2
    2106:	b29b      	uxth	r3, r3
    2108:	3002      	adds	r0, #2
    210a:	429a      	cmp	r2, r3
    210c:	d908      	bls.n	2120 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    210e:	8804      	ldrh	r4, [r0, #0]
    2110:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    2112:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    2114:	42b3      	cmp	r3, r6
    2116:	daf5      	bge.n	2104 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    2118:	18cd      	adds	r5, r1, r3
    211a:	0a24      	lsrs	r4, r4, #8
    211c:	706c      	strb	r4, [r5, #1]
    211e:	e7f1      	b.n	2104 <nvm_read_buffer+0x40>
	return STATUS_OK;
    2120:	2400      	movs	r4, #0
    2122:	e7d7      	b.n	20d4 <nvm_read_buffer+0x10>
    2124:	2400      	movs	r4, #0
    2126:	e7d5      	b.n	20d4 <nvm_read_buffer+0x10>
    2128:	2000032c 	.word	0x2000032c
    212c:	41004000 	.word	0x41004000

00002130 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2130:	4b13      	ldr	r3, [pc, #76]	; (2180 <nvm_erase_row+0x50>)
    2132:	881a      	ldrh	r2, [r3, #0]
    2134:	885b      	ldrh	r3, [r3, #2]
    2136:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2138:	2118      	movs	r1, #24
	if (row_address >
    213a:	4283      	cmp	r3, r0
    213c:	d201      	bcs.n	2142 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    213e:	0008      	movs	r0, r1
    2140:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2142:	0092      	lsls	r2, r2, #2
    2144:	3a01      	subs	r2, #1
    2146:	4210      	tst	r0, r2
    2148:	d1f9      	bne.n	213e <nvm_erase_row+0xe>
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <nvm_erase_row+0x54>)
    214c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    214e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    2150:	07db      	lsls	r3, r3, #31
    2152:	d5f4      	bpl.n	213e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2154:	4b0b      	ldr	r3, [pc, #44]	; (2184 <nvm_erase_row+0x54>)
    2156:	2220      	movs	r2, #32
    2158:	32ff      	adds	r2, #255	; 0xff
    215a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    215c:	0880      	lsrs	r0, r0, #2
    215e:	0040      	lsls	r0, r0, #1
    2160:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2162:	4a09      	ldr	r2, [pc, #36]	; (2188 <nvm_erase_row+0x58>)
    2164:	801a      	strh	r2, [r3, #0]
    2166:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    2168:	2201      	movs	r2, #1
    216a:	7d0b      	ldrb	r3, [r1, #20]
    216c:	4213      	tst	r3, r2
    216e:	d0fc      	beq.n	216a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    2170:	4b04      	ldr	r3, [pc, #16]	; (2184 <nvm_erase_row+0x54>)
    2172:	8b19      	ldrh	r1, [r3, #24]
    2174:	201c      	movs	r0, #28
    2176:	4001      	ands	r1, r0
	return STATUS_OK;
    2178:	1e48      	subs	r0, r1, #1
    217a:	4181      	sbcs	r1, r0
    217c:	0089      	lsls	r1, r1, #2
    217e:	e7de      	b.n	213e <nvm_erase_row+0xe>
    2180:	2000032c 	.word	0x2000032c
    2184:	41004000 	.word	0x41004000
    2188:	ffffa502 	.word	0xffffa502

0000218c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    218c:	b500      	push	{lr}
    218e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	ab01      	add	r3, sp, #4
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2196:	780a      	ldrb	r2, [r1, #0]
    2198:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    219a:	784a      	ldrb	r2, [r1, #1]
    219c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    219e:	788a      	ldrb	r2, [r1, #2]
    21a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    21a2:	0019      	movs	r1, r3
    21a4:	4b01      	ldr	r3, [pc, #4]	; (21ac <port_pin_set_config+0x20>)
    21a6:	4798      	blx	r3
}
    21a8:	b003      	add	sp, #12
    21aa:	bd00      	pop	{pc}
    21ac:	0000288d 	.word	0x0000288d

000021b0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    21b0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    21b2:	490c      	ldr	r1, [pc, #48]	; (21e4 <system_clock_source_osc8m_set_config+0x34>)
    21b4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    21b6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    21b8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    21ba:	7840      	ldrb	r0, [r0, #1]
    21bc:	2201      	movs	r2, #1
    21be:	4010      	ands	r0, r2
    21c0:	0180      	lsls	r0, r0, #6
    21c2:	2640      	movs	r6, #64	; 0x40
    21c4:	43b3      	bics	r3, r6
    21c6:	4303      	orrs	r3, r0
    21c8:	402a      	ands	r2, r5
    21ca:	01d2      	lsls	r2, r2, #7
    21cc:	2080      	movs	r0, #128	; 0x80
    21ce:	4383      	bics	r3, r0
    21d0:	4313      	orrs	r3, r2
    21d2:	2203      	movs	r2, #3
    21d4:	4022      	ands	r2, r4
    21d6:	0212      	lsls	r2, r2, #8
    21d8:	4803      	ldr	r0, [pc, #12]	; (21e8 <system_clock_source_osc8m_set_config+0x38>)
    21da:	4003      	ands	r3, r0
    21dc:	4313      	orrs	r3, r2
    21de:	620b      	str	r3, [r1, #32]
}
    21e0:	bd70      	pop	{r4, r5, r6, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	40000800 	.word	0x40000800
    21e8:	fffffcff 	.word	0xfffffcff

000021ec <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    21ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ee:	46ce      	mov	lr, r9
    21f0:	4647      	mov	r7, r8
    21f2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    21f4:	4b19      	ldr	r3, [pc, #100]	; (225c <system_clock_source_osc32k_set_config+0x70>)
    21f6:	4699      	mov	r9, r3
    21f8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    21fa:	7841      	ldrb	r1, [r0, #1]
    21fc:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    21fe:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2200:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2202:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2204:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2206:	7880      	ldrb	r0, [r0, #2]
    2208:	2101      	movs	r1, #1
    220a:	4008      	ands	r0, r1
    220c:	0080      	lsls	r0, r0, #2
    220e:	2204      	movs	r2, #4
    2210:	4393      	bics	r3, r2
    2212:	4303      	orrs	r3, r0
    2214:	4660      	mov	r0, ip
    2216:	4008      	ands	r0, r1
    2218:	00c0      	lsls	r0, r0, #3
    221a:	3204      	adds	r2, #4
    221c:	4393      	bics	r3, r2
    221e:	4303      	orrs	r3, r0
    2220:	0038      	movs	r0, r7
    2222:	4008      	ands	r0, r1
    2224:	0180      	lsls	r0, r0, #6
    2226:	2740      	movs	r7, #64	; 0x40
    2228:	43bb      	bics	r3, r7
    222a:	4303      	orrs	r3, r0
    222c:	0030      	movs	r0, r6
    222e:	4008      	ands	r0, r1
    2230:	01c0      	lsls	r0, r0, #7
    2232:	2680      	movs	r6, #128	; 0x80
    2234:	43b3      	bics	r3, r6
    2236:	4303      	orrs	r3, r0
    2238:	2007      	movs	r0, #7
    223a:	4005      	ands	r5, r0
    223c:	022d      	lsls	r5, r5, #8
    223e:	4808      	ldr	r0, [pc, #32]	; (2260 <system_clock_source_osc32k_set_config+0x74>)
    2240:	4003      	ands	r3, r0
    2242:	432b      	orrs	r3, r5
    2244:	4021      	ands	r1, r4
    2246:	0309      	lsls	r1, r1, #12
    2248:	4806      	ldr	r0, [pc, #24]	; (2264 <system_clock_source_osc32k_set_config+0x78>)
    224a:	4003      	ands	r3, r0
    224c:	430b      	orrs	r3, r1
    224e:	464a      	mov	r2, r9
    2250:	6193      	str	r3, [r2, #24]
}
    2252:	bc0c      	pop	{r2, r3}
    2254:	4690      	mov	r8, r2
    2256:	4699      	mov	r9, r3
    2258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	40000800 	.word	0x40000800
    2260:	fffff8ff 	.word	0xfffff8ff
    2264:	ffffefff 	.word	0xffffefff

00002268 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2268:	b5f0      	push	{r4, r5, r6, r7, lr}
    226a:	46de      	mov	lr, fp
    226c:	4657      	mov	r7, sl
    226e:	464e      	mov	r6, r9
    2270:	4645      	mov	r5, r8
    2272:	b5e0      	push	{r5, r6, r7, lr}
    2274:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2276:	4b26      	ldr	r3, [pc, #152]	; (2310 <system_clock_source_xosc32k_set_config+0xa8>)
    2278:	469b      	mov	fp, r3
    227a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    227c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    227e:	7800      	ldrb	r0, [r0, #0]
    2280:	4242      	negs	r2, r0
    2282:	4142      	adcs	r2, r0
    2284:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2286:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2288:	78ca      	ldrb	r2, [r1, #3]
    228a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    228c:	790a      	ldrb	r2, [r1, #4]
    228e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2290:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2292:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2294:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2296:	688a      	ldr	r2, [r1, #8]
    2298:	491e      	ldr	r1, [pc, #120]	; (2314 <system_clock_source_xosc32k_set_config+0xac>)
    229a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    229c:	2101      	movs	r1, #1
    229e:	464a      	mov	r2, r9
    22a0:	0092      	lsls	r2, r2, #2
    22a2:	4691      	mov	r9, r2
    22a4:	2204      	movs	r2, #4
    22a6:	4393      	bics	r3, r2
    22a8:	464a      	mov	r2, r9
    22aa:	4313      	orrs	r3, r2
    22ac:	4642      	mov	r2, r8
    22ae:	400a      	ands	r2, r1
    22b0:	00d2      	lsls	r2, r2, #3
    22b2:	4690      	mov	r8, r2
    22b4:	2208      	movs	r2, #8
    22b6:	4393      	bics	r3, r2
    22b8:	4642      	mov	r2, r8
    22ba:	4313      	orrs	r3, r2
    22bc:	4662      	mov	r2, ip
    22be:	400a      	ands	r2, r1
    22c0:	0112      	lsls	r2, r2, #4
    22c2:	4694      	mov	ip, r2
    22c4:	2210      	movs	r2, #16
    22c6:	4393      	bics	r3, r2
    22c8:	4662      	mov	r2, ip
    22ca:	4313      	orrs	r3, r2
    22cc:	4008      	ands	r0, r1
    22ce:	0140      	lsls	r0, r0, #5
    22d0:	2220      	movs	r2, #32
    22d2:	4393      	bics	r3, r2
    22d4:	4303      	orrs	r3, r0
    22d6:	400f      	ands	r7, r1
    22d8:	01bf      	lsls	r7, r7, #6
    22da:	2040      	movs	r0, #64	; 0x40
    22dc:	4383      	bics	r3, r0
    22de:	433b      	orrs	r3, r7
    22e0:	400e      	ands	r6, r1
    22e2:	01f6      	lsls	r6, r6, #7
    22e4:	3040      	adds	r0, #64	; 0x40
    22e6:	4383      	bics	r3, r0
    22e8:	4333      	orrs	r3, r6
    22ea:	3879      	subs	r0, #121	; 0x79
    22ec:	4005      	ands	r5, r0
    22ee:	022d      	lsls	r5, r5, #8
    22f0:	4809      	ldr	r0, [pc, #36]	; (2318 <system_clock_source_xosc32k_set_config+0xb0>)
    22f2:	4003      	ands	r3, r0
    22f4:	432b      	orrs	r3, r5
    22f6:	4021      	ands	r1, r4
    22f8:	0309      	lsls	r1, r1, #12
    22fa:	4808      	ldr	r0, [pc, #32]	; (231c <system_clock_source_xosc32k_set_config+0xb4>)
    22fc:	4003      	ands	r3, r0
    22fe:	430b      	orrs	r3, r1
    2300:	465a      	mov	r2, fp
    2302:	8293      	strh	r3, [r2, #20]
}
    2304:	bc3c      	pop	{r2, r3, r4, r5}
    2306:	4690      	mov	r8, r2
    2308:	4699      	mov	r9, r3
    230a:	46a2      	mov	sl, r4
    230c:	46ab      	mov	fp, r5
    230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2310:	40000800 	.word	0x40000800
    2314:	20000334 	.word	0x20000334
    2318:	fffff8ff 	.word	0xfffff8ff
    231c:	ffffefff 	.word	0xffffefff

00002320 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2320:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2322:	7a03      	ldrb	r3, [r0, #8]
    2324:	069b      	lsls	r3, r3, #26
    2326:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2328:	8942      	ldrh	r2, [r0, #10]
    232a:	0592      	lsls	r2, r2, #22
    232c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    232e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2330:	4918      	ldr	r1, [pc, #96]	; (2394 <system_clock_source_dfll_set_config+0x74>)
    2332:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2334:	7983      	ldrb	r3, [r0, #6]
    2336:	79c2      	ldrb	r2, [r0, #7]
    2338:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    233a:	8842      	ldrh	r2, [r0, #2]
    233c:	8884      	ldrh	r4, [r0, #4]
    233e:	4322      	orrs	r2, r4
    2340:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2342:	7842      	ldrb	r2, [r0, #1]
    2344:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2346:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2348:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    234a:	7803      	ldrb	r3, [r0, #0]
    234c:	2b04      	cmp	r3, #4
    234e:	d011      	beq.n	2374 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2350:	2b20      	cmp	r3, #32
    2352:	d10e      	bne.n	2372 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2354:	7b03      	ldrb	r3, [r0, #12]
    2356:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2358:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    235a:	4313      	orrs	r3, r2
    235c:	89c2      	ldrh	r2, [r0, #14]
    235e:	0412      	lsls	r2, r2, #16
    2360:	490d      	ldr	r1, [pc, #52]	; (2398 <system_clock_source_dfll_set_config+0x78>)
    2362:	400a      	ands	r2, r1
    2364:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2366:	4a0b      	ldr	r2, [pc, #44]	; (2394 <system_clock_source_dfll_set_config+0x74>)
    2368:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    236a:	6811      	ldr	r1, [r2, #0]
    236c:	4b0b      	ldr	r3, [pc, #44]	; (239c <system_clock_source_dfll_set_config+0x7c>)
    236e:	430b      	orrs	r3, r1
    2370:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2372:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2374:	7b03      	ldrb	r3, [r0, #12]
    2376:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2378:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    237a:	4313      	orrs	r3, r2
    237c:	89c2      	ldrh	r2, [r0, #14]
    237e:	0412      	lsls	r2, r2, #16
    2380:	4905      	ldr	r1, [pc, #20]	; (2398 <system_clock_source_dfll_set_config+0x78>)
    2382:	400a      	ands	r2, r1
    2384:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2386:	4a03      	ldr	r2, [pc, #12]	; (2394 <system_clock_source_dfll_set_config+0x74>)
    2388:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    238a:	6813      	ldr	r3, [r2, #0]
    238c:	2104      	movs	r1, #4
    238e:	430b      	orrs	r3, r1
    2390:	6013      	str	r3, [r2, #0]
    2392:	e7ee      	b.n	2372 <system_clock_source_dfll_set_config+0x52>
    2394:	20000334 	.word	0x20000334
    2398:	03ff0000 	.word	0x03ff0000
    239c:	00000424 	.word	0x00000424

000023a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    23a0:	2808      	cmp	r0, #8
    23a2:	d803      	bhi.n	23ac <system_clock_source_enable+0xc>
    23a4:	0080      	lsls	r0, r0, #2
    23a6:	4b25      	ldr	r3, [pc, #148]	; (243c <system_clock_source_enable+0x9c>)
    23a8:	581b      	ldr	r3, [r3, r0]
    23aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    23ac:	2017      	movs	r0, #23
    23ae:	e044      	b.n	243a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    23b0:	4a23      	ldr	r2, [pc, #140]	; (2440 <system_clock_source_enable+0xa0>)
    23b2:	6a13      	ldr	r3, [r2, #32]
    23b4:	2102      	movs	r1, #2
    23b6:	430b      	orrs	r3, r1
    23b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    23ba:	2000      	movs	r0, #0
    23bc:	e03d      	b.n	243a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    23be:	4a20      	ldr	r2, [pc, #128]	; (2440 <system_clock_source_enable+0xa0>)
    23c0:	6993      	ldr	r3, [r2, #24]
    23c2:	2102      	movs	r1, #2
    23c4:	430b      	orrs	r3, r1
    23c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    23c8:	2000      	movs	r0, #0
		break;
    23ca:	e036      	b.n	243a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    23cc:	4a1c      	ldr	r2, [pc, #112]	; (2440 <system_clock_source_enable+0xa0>)
    23ce:	8a13      	ldrh	r3, [r2, #16]
    23d0:	2102      	movs	r1, #2
    23d2:	430b      	orrs	r3, r1
    23d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    23d6:	2000      	movs	r0, #0
		break;
    23d8:	e02f      	b.n	243a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    23da:	4a19      	ldr	r2, [pc, #100]	; (2440 <system_clock_source_enable+0xa0>)
    23dc:	8a93      	ldrh	r3, [r2, #20]
    23de:	2102      	movs	r1, #2
    23e0:	430b      	orrs	r3, r1
    23e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    23e4:	2000      	movs	r0, #0
		break;
    23e6:	e028      	b.n	243a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    23e8:	4916      	ldr	r1, [pc, #88]	; (2444 <system_clock_source_enable+0xa4>)
    23ea:	680b      	ldr	r3, [r1, #0]
    23ec:	2202      	movs	r2, #2
    23ee:	4313      	orrs	r3, r2
    23f0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    23f2:	4b13      	ldr	r3, [pc, #76]	; (2440 <system_clock_source_enable+0xa0>)
    23f4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23f6:	0019      	movs	r1, r3
    23f8:	320e      	adds	r2, #14
    23fa:	68cb      	ldr	r3, [r1, #12]
    23fc:	421a      	tst	r2, r3
    23fe:	d0fc      	beq.n	23fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2400:	4a10      	ldr	r2, [pc, #64]	; (2444 <system_clock_source_enable+0xa4>)
    2402:	6891      	ldr	r1, [r2, #8]
    2404:	4b0e      	ldr	r3, [pc, #56]	; (2440 <system_clock_source_enable+0xa0>)
    2406:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2408:	6852      	ldr	r2, [r2, #4]
    240a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    240c:	2200      	movs	r2, #0
    240e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2410:	0019      	movs	r1, r3
    2412:	3210      	adds	r2, #16
    2414:	68cb      	ldr	r3, [r1, #12]
    2416:	421a      	tst	r2, r3
    2418:	d0fc      	beq.n	2414 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    241a:	4b0a      	ldr	r3, [pc, #40]	; (2444 <system_clock_source_enable+0xa4>)
    241c:	681b      	ldr	r3, [r3, #0]
    241e:	b29b      	uxth	r3, r3
    2420:	4a07      	ldr	r2, [pc, #28]	; (2440 <system_clock_source_enable+0xa0>)
    2422:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2424:	2000      	movs	r0, #0
    2426:	e008      	b.n	243a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2428:	4905      	ldr	r1, [pc, #20]	; (2440 <system_clock_source_enable+0xa0>)
    242a:	2244      	movs	r2, #68	; 0x44
    242c:	5c8b      	ldrb	r3, [r1, r2]
    242e:	2002      	movs	r0, #2
    2430:	4303      	orrs	r3, r0
    2432:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2434:	2000      	movs	r0, #0
		break;
    2436:	e000      	b.n	243a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2438:	2000      	movs	r0, #0
}
    243a:	4770      	bx	lr
    243c:	00006c24 	.word	0x00006c24
    2440:	40000800 	.word	0x40000800
    2444:	20000334 	.word	0x20000334

00002448 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2448:	b5f0      	push	{r4, r5, r6, r7, lr}
    244a:	46d6      	mov	lr, sl
    244c:	464f      	mov	r7, r9
    244e:	4646      	mov	r6, r8
    2450:	b5c0      	push	{r6, r7, lr}
    2452:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2454:	22c2      	movs	r2, #194	; 0xc2
    2456:	00d2      	lsls	r2, r2, #3
    2458:	4b60      	ldr	r3, [pc, #384]	; (25dc <system_clock_init+0x194>)
    245a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    245c:	4a60      	ldr	r2, [pc, #384]	; (25e0 <system_clock_init+0x198>)
    245e:	6853      	ldr	r3, [r2, #4]
    2460:	211e      	movs	r1, #30
    2462:	438b      	bics	r3, r1
    2464:	391a      	subs	r1, #26
    2466:	430b      	orrs	r3, r1
    2468:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    246a:	2203      	movs	r2, #3
    246c:	ab01      	add	r3, sp, #4
    246e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2470:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2472:	4d5c      	ldr	r5, [pc, #368]	; (25e4 <system_clock_init+0x19c>)
    2474:	b2e0      	uxtb	r0, r4
    2476:	a901      	add	r1, sp, #4
    2478:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    247a:	3401      	adds	r4, #1
    247c:	2c25      	cmp	r4, #37	; 0x25
    247e:	d1f9      	bne.n	2474 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2480:	a80c      	add	r0, sp, #48	; 0x30
    2482:	2300      	movs	r3, #0
    2484:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2486:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2488:	2280      	movs	r2, #128	; 0x80
    248a:	0212      	lsls	r2, r2, #8
    248c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    248e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2490:	2201      	movs	r2, #1
    2492:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2494:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2496:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2498:	3205      	adds	r2, #5
    249a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    249c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    249e:	4b52      	ldr	r3, [pc, #328]	; (25e8 <system_clock_init+0x1a0>)
    24a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    24a2:	2005      	movs	r0, #5
    24a4:	4b51      	ldr	r3, [pc, #324]	; (25ec <system_clock_init+0x1a4>)
    24a6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    24a8:	494c      	ldr	r1, [pc, #304]	; (25dc <system_clock_init+0x194>)
    24aa:	2202      	movs	r2, #2
    24ac:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    24ae:	421a      	tst	r2, r3
    24b0:	d0fc      	beq.n	24ac <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    24b2:	494a      	ldr	r1, [pc, #296]	; (25dc <system_clock_init+0x194>)
    24b4:	8a8b      	ldrh	r3, [r1, #20]
    24b6:	2280      	movs	r2, #128	; 0x80
    24b8:	4313      	orrs	r3, r2
    24ba:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    24bc:	4c4c      	ldr	r4, [pc, #304]	; (25f0 <system_clock_init+0x1a8>)
	SYSCTRL->OSC32K.bit.CALIB =
    24be:	6823      	ldr	r3, [r4, #0]
    24c0:	04db      	lsls	r3, r3, #19
    24c2:	698a      	ldr	r2, [r1, #24]
    24c4:	0e5b      	lsrs	r3, r3, #25
    24c6:	041b      	lsls	r3, r3, #16
    24c8:	484a      	ldr	r0, [pc, #296]	; (25f4 <system_clock_init+0x1ac>)
    24ca:	4002      	ands	r2, r0
    24cc:	4313      	orrs	r3, r2
    24ce:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    24d0:	a80a      	add	r0, sp, #40	; 0x28
    24d2:	2301      	movs	r3, #1
    24d4:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    24d6:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    24d8:	2500      	movs	r5, #0
    24da:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    24dc:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    24de:	3306      	adds	r3, #6
    24e0:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    24e2:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    24e4:	4b44      	ldr	r3, [pc, #272]	; (25f8 <system_clock_init+0x1b0>)
    24e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    24e8:	2004      	movs	r0, #4
    24ea:	4b40      	ldr	r3, [pc, #256]	; (25ec <system_clock_init+0x1a4>)
    24ec:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    24ee:	ab05      	add	r3, sp, #20
    24f0:	2200      	movs	r2, #0
    24f2:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    24f4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    24f6:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    24f8:	2120      	movs	r1, #32
    24fa:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    24fc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    24fe:	6823      	ldr	r3, [r4, #0]
    2500:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2502:	2b3f      	cmp	r3, #63	; 0x3f
    2504:	d068      	beq.n	25d8 <system_clock_init+0x190>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2506:	a805      	add	r0, sp, #20
    2508:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    250a:	2307      	movs	r3, #7
    250c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    250e:	3303      	adds	r3, #3
    2510:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2512:	4b3a      	ldr	r3, [pc, #232]	; (25fc <system_clock_init+0x1b4>)
    2514:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2516:	3bff      	subs	r3, #255	; 0xff
    2518:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    251a:	4b39      	ldr	r3, [pc, #228]	; (2600 <system_clock_init+0x1b8>)
    251c:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    251e:	4b39      	ldr	r3, [pc, #228]	; (2604 <system_clock_init+0x1bc>)
    2520:	4798      	blx	r3
	config->run_in_standby  = false;
    2522:	a804      	add	r0, sp, #16
    2524:	2500      	movs	r5, #0
    2526:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2528:	2601      	movs	r6, #1
    252a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    252c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    252e:	4b36      	ldr	r3, [pc, #216]	; (2608 <system_clock_init+0x1c0>)
    2530:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2532:	2006      	movs	r0, #6
    2534:	4b2d      	ldr	r3, [pc, #180]	; (25ec <system_clock_init+0x1a4>)
    2536:	4699      	mov	r9, r3
    2538:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    253a:	4b34      	ldr	r3, [pc, #208]	; (260c <system_clock_init+0x1c4>)
    253c:	4798      	blx	r3
	config->division_factor    = 1;
    253e:	ac01      	add	r4, sp, #4
    2540:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2542:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2544:	2306      	movs	r3, #6
    2546:	469a      	mov	sl, r3
    2548:	7023      	strb	r3, [r4, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    254a:	7226      	strb	r6, [r4, #8]
    254c:	7266      	strb	r6, [r4, #9]
    254e:	0021      	movs	r1, r4
    2550:	2001      	movs	r0, #1
    2552:	4b2f      	ldr	r3, [pc, #188]	; (2610 <system_clock_init+0x1c8>)
    2554:	4698      	mov	r8, r3
    2556:	4798      	blx	r3
    2558:	2001      	movs	r0, #1
    255a:	4f2e      	ldr	r7, [pc, #184]	; (2614 <system_clock_init+0x1cc>)
    255c:	47b8      	blx	r7
	config->division_factor    = 1;
    255e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2560:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2562:	4653      	mov	r3, sl
    2564:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2566:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2568:	7265      	strb	r5, [r4, #9]
    256a:	0021      	movs	r1, r4
    256c:	2002      	movs	r0, #2
    256e:	47c0      	blx	r8
    2570:	2002      	movs	r0, #2
    2572:	47b8      	blx	r7
	config->high_when_disabled = false;
    2574:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2576:	7265      	strb	r5, [r4, #9]
    2578:	2304      	movs	r3, #4
    257a:	7023      	strb	r3, [r4, #0]
    257c:	331c      	adds	r3, #28
    257e:	6063      	str	r3, [r4, #4]
    2580:	7226      	strb	r6, [r4, #8]
    2582:	0021      	movs	r1, r4
    2584:	2004      	movs	r0, #4
    2586:	47c0      	blx	r8
    2588:	2004      	movs	r0, #4
    258a:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    258c:	2007      	movs	r0, #7
    258e:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2590:	4912      	ldr	r1, [pc, #72]	; (25dc <system_clock_init+0x194>)
    2592:	2210      	movs	r2, #16
    2594:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2596:	421a      	tst	r2, r3
    2598:	d0fc      	beq.n	2594 <system_clock_init+0x14c>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    259a:	4a10      	ldr	r2, [pc, #64]	; (25dc <system_clock_init+0x194>)
    259c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    259e:	2180      	movs	r1, #128	; 0x80
    25a0:	430b      	orrs	r3, r1
    25a2:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    25a4:	4a1c      	ldr	r2, [pc, #112]	; (2618 <system_clock_init+0x1d0>)
    25a6:	2300      	movs	r3, #0
    25a8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    25aa:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    25ac:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    25ae:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    25b0:	a901      	add	r1, sp, #4
    25b2:	2201      	movs	r2, #1
    25b4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    25b6:	704b      	strb	r3, [r1, #1]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    25b8:	3307      	adds	r3, #7
    25ba:	700b      	strb	r3, [r1, #0]
    25bc:	720a      	strb	r2, [r1, #8]
    25be:	724a      	strb	r2, [r1, #9]
    25c0:	2000      	movs	r0, #0
    25c2:	4b13      	ldr	r3, [pc, #76]	; (2610 <system_clock_init+0x1c8>)
    25c4:	4798      	blx	r3
    25c6:	2000      	movs	r0, #0
    25c8:	4b12      	ldr	r3, [pc, #72]	; (2614 <system_clock_init+0x1cc>)
    25ca:	4798      	blx	r3
#endif
}
    25cc:	b010      	add	sp, #64	; 0x40
    25ce:	bc1c      	pop	{r2, r3, r4}
    25d0:	4690      	mov	r8, r2
    25d2:	4699      	mov	r9, r3
    25d4:	46a2      	mov	sl, r4
    25d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    25d8:	3b20      	subs	r3, #32
    25da:	e794      	b.n	2506 <system_clock_init+0xbe>
    25dc:	40000800 	.word	0x40000800
    25e0:	41004000 	.word	0x41004000
    25e4:	000027c9 	.word	0x000027c9
    25e8:	00002269 	.word	0x00002269
    25ec:	000023a1 	.word	0x000023a1
    25f0:	00806024 	.word	0x00806024
    25f4:	ff80ffff 	.word	0xff80ffff
    25f8:	000021ed 	.word	0x000021ed
    25fc:	000001ff 	.word	0x000001ff
    2600:	ffffbb80 	.word	0xffffbb80
    2604:	00002321 	.word	0x00002321
    2608:	000021b1 	.word	0x000021b1
    260c:	0000261d 	.word	0x0000261d
    2610:	00002641 	.word	0x00002641
    2614:	000026f9 	.word	0x000026f9
    2618:	40000400 	.word	0x40000400

0000261c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    261c:	4a06      	ldr	r2, [pc, #24]	; (2638 <system_gclk_init+0x1c>)
    261e:	6993      	ldr	r3, [r2, #24]
    2620:	2108      	movs	r1, #8
    2622:	430b      	orrs	r3, r1
    2624:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2626:	2201      	movs	r2, #1
    2628:	4b04      	ldr	r3, [pc, #16]	; (263c <system_gclk_init+0x20>)
    262a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    262c:	0019      	movs	r1, r3
    262e:	780b      	ldrb	r3, [r1, #0]
    2630:	4213      	tst	r3, r2
    2632:	d1fc      	bne.n	262e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2634:	4770      	bx	lr
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	40000400 	.word	0x40000400
    263c:	40000c00 	.word	0x40000c00

00002640 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2640:	b570      	push	{r4, r5, r6, lr}
    2642:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2644:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2646:	780d      	ldrb	r5, [r1, #0]
    2648:	022d      	lsls	r5, r5, #8
    264a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    264c:	784b      	ldrb	r3, [r1, #1]
    264e:	2b00      	cmp	r3, #0
    2650:	d002      	beq.n	2658 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2652:	2380      	movs	r3, #128	; 0x80
    2654:	02db      	lsls	r3, r3, #11
    2656:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2658:	7a4b      	ldrb	r3, [r1, #9]
    265a:	2b00      	cmp	r3, #0
    265c:	d002      	beq.n	2664 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    265e:	2380      	movs	r3, #128	; 0x80
    2660:	031b      	lsls	r3, r3, #12
    2662:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2664:	6848      	ldr	r0, [r1, #4]
    2666:	2801      	cmp	r0, #1
    2668:	d910      	bls.n	268c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    266a:	1e43      	subs	r3, r0, #1
    266c:	4218      	tst	r0, r3
    266e:	d134      	bne.n	26da <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2670:	2802      	cmp	r0, #2
    2672:	d930      	bls.n	26d6 <system_gclk_gen_set_config+0x96>
    2674:	2302      	movs	r3, #2
    2676:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2678:	3201      	adds	r2, #1
						mask <<= 1) {
    267a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    267c:	4298      	cmp	r0, r3
    267e:	d8fb      	bhi.n	2678 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2680:	0212      	lsls	r2, r2, #8
    2682:	4332      	orrs	r2, r6
    2684:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2686:	2380      	movs	r3, #128	; 0x80
    2688:	035b      	lsls	r3, r3, #13
    268a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    268c:	7a0b      	ldrb	r3, [r1, #8]
    268e:	2b00      	cmp	r3, #0
    2690:	d002      	beq.n	2698 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2692:	2380      	movs	r3, #128	; 0x80
    2694:	039b      	lsls	r3, r3, #14
    2696:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2698:	4a13      	ldr	r2, [pc, #76]	; (26e8 <system_gclk_gen_set_config+0xa8>)
    269a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    269c:	b25b      	sxtb	r3, r3
    269e:	2b00      	cmp	r3, #0
    26a0:	dbfb      	blt.n	269a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    26a2:	4b12      	ldr	r3, [pc, #72]	; (26ec <system_gclk_gen_set_config+0xac>)
    26a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26a6:	4b12      	ldr	r3, [pc, #72]	; (26f0 <system_gclk_gen_set_config+0xb0>)
    26a8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26aa:	4a0f      	ldr	r2, [pc, #60]	; (26e8 <system_gclk_gen_set_config+0xa8>)
    26ac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    26ae:	b25b      	sxtb	r3, r3
    26b0:	2b00      	cmp	r3, #0
    26b2:	dbfb      	blt.n	26ac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    26b4:	4b0c      	ldr	r3, [pc, #48]	; (26e8 <system_gclk_gen_set_config+0xa8>)
    26b6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26b8:	001a      	movs	r2, r3
    26ba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    26bc:	b25b      	sxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	dbfb      	blt.n	26ba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    26c2:	4a09      	ldr	r2, [pc, #36]	; (26e8 <system_gclk_gen_set_config+0xa8>)
    26c4:	6853      	ldr	r3, [r2, #4]
    26c6:	2180      	movs	r1, #128	; 0x80
    26c8:	0249      	lsls	r1, r1, #9
    26ca:	400b      	ands	r3, r1
    26cc:	431d      	orrs	r5, r3
    26ce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    26d0:	4b08      	ldr	r3, [pc, #32]	; (26f4 <system_gclk_gen_set_config+0xb4>)
    26d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    26d6:	2200      	movs	r2, #0
    26d8:	e7d2      	b.n	2680 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    26da:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    26dc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26de:	2380      	movs	r3, #128	; 0x80
    26e0:	029b      	lsls	r3, r3, #10
    26e2:	431d      	orrs	r5, r3
    26e4:	e7d2      	b.n	268c <system_gclk_gen_set_config+0x4c>
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	40000c00 	.word	0x40000c00
    26ec:	00001c7d 	.word	0x00001c7d
    26f0:	40000c08 	.word	0x40000c08
    26f4:	00001cbd 	.word	0x00001cbd

000026f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    26f8:	b510      	push	{r4, lr}
    26fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26fc:	4a0b      	ldr	r2, [pc, #44]	; (272c <system_gclk_gen_enable+0x34>)
    26fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2700:	b25b      	sxtb	r3, r3
    2702:	2b00      	cmp	r3, #0
    2704:	dbfb      	blt.n	26fe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2706:	4b0a      	ldr	r3, [pc, #40]	; (2730 <system_gclk_gen_enable+0x38>)
    2708:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    270a:	4b0a      	ldr	r3, [pc, #40]	; (2734 <system_gclk_gen_enable+0x3c>)
    270c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    270e:	4a07      	ldr	r2, [pc, #28]	; (272c <system_gclk_gen_enable+0x34>)
    2710:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2712:	b25b      	sxtb	r3, r3
    2714:	2b00      	cmp	r3, #0
    2716:	dbfb      	blt.n	2710 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2718:	4a04      	ldr	r2, [pc, #16]	; (272c <system_gclk_gen_enable+0x34>)
    271a:	6851      	ldr	r1, [r2, #4]
    271c:	2380      	movs	r3, #128	; 0x80
    271e:	025b      	lsls	r3, r3, #9
    2720:	430b      	orrs	r3, r1
    2722:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <system_gclk_gen_enable+0x40>)
    2726:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2728:	bd10      	pop	{r4, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	40000c00 	.word	0x40000c00
    2730:	00001c7d 	.word	0x00001c7d
    2734:	40000c04 	.word	0x40000c04
    2738:	00001cbd 	.word	0x00001cbd

0000273c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    273c:	b510      	push	{r4, lr}
    273e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2740:	4b06      	ldr	r3, [pc, #24]	; (275c <system_gclk_chan_enable+0x20>)
    2742:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2744:	4b06      	ldr	r3, [pc, #24]	; (2760 <system_gclk_chan_enable+0x24>)
    2746:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2748:	4a06      	ldr	r2, [pc, #24]	; (2764 <system_gclk_chan_enable+0x28>)
    274a:	8853      	ldrh	r3, [r2, #2]
    274c:	2180      	movs	r1, #128	; 0x80
    274e:	01c9      	lsls	r1, r1, #7
    2750:	430b      	orrs	r3, r1
    2752:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2754:	4b04      	ldr	r3, [pc, #16]	; (2768 <system_gclk_chan_enable+0x2c>)
    2756:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2758:	bd10      	pop	{r4, pc}
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	00001c7d 	.word	0x00001c7d
    2760:	40000c02 	.word	0x40000c02
    2764:	40000c00 	.word	0x40000c00
    2768:	00001cbd 	.word	0x00001cbd

0000276c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    276c:	b510      	push	{r4, lr}
    276e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2770:	4b0f      	ldr	r3, [pc, #60]	; (27b0 <system_gclk_chan_disable+0x44>)
    2772:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2774:	4b0f      	ldr	r3, [pc, #60]	; (27b4 <system_gclk_chan_disable+0x48>)
    2776:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2778:	4a0f      	ldr	r2, [pc, #60]	; (27b8 <system_gclk_chan_disable+0x4c>)
    277a:	8853      	ldrh	r3, [r2, #2]
    277c:	051b      	lsls	r3, r3, #20
    277e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2780:	8853      	ldrh	r3, [r2, #2]
    2782:	490e      	ldr	r1, [pc, #56]	; (27bc <system_gclk_chan_disable+0x50>)
    2784:	400b      	ands	r3, r1
    2786:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2788:	8853      	ldrh	r3, [r2, #2]
    278a:	490d      	ldr	r1, [pc, #52]	; (27c0 <system_gclk_chan_disable+0x54>)
    278c:	400b      	ands	r3, r1
    278e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2790:	0011      	movs	r1, r2
    2792:	2280      	movs	r2, #128	; 0x80
    2794:	01d2      	lsls	r2, r2, #7
    2796:	884b      	ldrh	r3, [r1, #2]
    2798:	4213      	tst	r3, r2
    279a:	d1fc      	bne.n	2796 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    279c:	4906      	ldr	r1, [pc, #24]	; (27b8 <system_gclk_chan_disable+0x4c>)
    279e:	884a      	ldrh	r2, [r1, #2]
    27a0:	0203      	lsls	r3, r0, #8
    27a2:	4806      	ldr	r0, [pc, #24]	; (27bc <system_gclk_chan_disable+0x50>)
    27a4:	4002      	ands	r2, r0
    27a6:	4313      	orrs	r3, r2
    27a8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    27aa:	4b06      	ldr	r3, [pc, #24]	; (27c4 <system_gclk_chan_disable+0x58>)
    27ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27ae:	bd10      	pop	{r4, pc}
    27b0:	00001c7d 	.word	0x00001c7d
    27b4:	40000c02 	.word	0x40000c02
    27b8:	40000c00 	.word	0x40000c00
    27bc:	fffff0ff 	.word	0xfffff0ff
    27c0:	ffffbfff 	.word	0xffffbfff
    27c4:	00001cbd 	.word	0x00001cbd

000027c8 <system_gclk_chan_set_config>:
{
    27c8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    27ca:	780c      	ldrb	r4, [r1, #0]
    27cc:	0224      	lsls	r4, r4, #8
    27ce:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    27d0:	4b02      	ldr	r3, [pc, #8]	; (27dc <system_gclk_chan_set_config+0x14>)
    27d2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27d4:	b2a4      	uxth	r4, r4
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <system_gclk_chan_set_config+0x18>)
    27d8:	805c      	strh	r4, [r3, #2]
}
    27da:	bd10      	pop	{r4, pc}
    27dc:	0000276d 	.word	0x0000276d
    27e0:	40000c00 	.word	0x40000c00

000027e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27e6:	78d3      	ldrb	r3, [r2, #3]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d135      	bne.n	2858 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    27ec:	7813      	ldrb	r3, [r2, #0]
    27ee:	2b80      	cmp	r3, #128	; 0x80
    27f0:	d029      	beq.n	2846 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    27f2:	061b      	lsls	r3, r3, #24
    27f4:	2480      	movs	r4, #128	; 0x80
    27f6:	0264      	lsls	r4, r4, #9
    27f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    27fa:	7854      	ldrb	r4, [r2, #1]
    27fc:	2502      	movs	r5, #2
    27fe:	43ac      	bics	r4, r5
    2800:	d106      	bne.n	2810 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2802:	7894      	ldrb	r4, [r2, #2]
    2804:	2c00      	cmp	r4, #0
    2806:	d120      	bne.n	284a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2808:	2480      	movs	r4, #128	; 0x80
    280a:	02a4      	lsls	r4, r4, #10
    280c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    280e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2810:	7854      	ldrb	r4, [r2, #1]
    2812:	3c01      	subs	r4, #1
    2814:	2c01      	cmp	r4, #1
    2816:	d91c      	bls.n	2852 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2818:	040d      	lsls	r5, r1, #16
    281a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    281c:	24a0      	movs	r4, #160	; 0xa0
    281e:	05e4      	lsls	r4, r4, #23
    2820:	432c      	orrs	r4, r5
    2822:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2824:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2826:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2828:	24d0      	movs	r4, #208	; 0xd0
    282a:	0624      	lsls	r4, r4, #24
    282c:	432c      	orrs	r4, r5
    282e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2830:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2832:	78d4      	ldrb	r4, [r2, #3]
    2834:	2c00      	cmp	r4, #0
    2836:	d122      	bne.n	287e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2838:	035b      	lsls	r3, r3, #13
    283a:	d51c      	bpl.n	2876 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    283c:	7893      	ldrb	r3, [r2, #2]
    283e:	2b01      	cmp	r3, #1
    2840:	d01e      	beq.n	2880 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2842:	6141      	str	r1, [r0, #20]
    2844:	e017      	b.n	2876 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2846:	2300      	movs	r3, #0
    2848:	e7d7      	b.n	27fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    284a:	24c0      	movs	r4, #192	; 0xc0
    284c:	02e4      	lsls	r4, r4, #11
    284e:	4323      	orrs	r3, r4
    2850:	e7dd      	b.n	280e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2852:	4c0d      	ldr	r4, [pc, #52]	; (2888 <_system_pinmux_config+0xa4>)
    2854:	4023      	ands	r3, r4
    2856:	e7df      	b.n	2818 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2858:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    285a:	040c      	lsls	r4, r1, #16
    285c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    285e:	23a0      	movs	r3, #160	; 0xa0
    2860:	05db      	lsls	r3, r3, #23
    2862:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2864:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2866:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2868:	23d0      	movs	r3, #208	; 0xd0
    286a:	061b      	lsls	r3, r3, #24
    286c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    286e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2870:	78d3      	ldrb	r3, [r2, #3]
    2872:	2b00      	cmp	r3, #0
    2874:	d103      	bne.n	287e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2876:	7853      	ldrb	r3, [r2, #1]
    2878:	3b01      	subs	r3, #1
    287a:	2b01      	cmp	r3, #1
    287c:	d902      	bls.n	2884 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    287e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2880:	6181      	str	r1, [r0, #24]
    2882:	e7f8      	b.n	2876 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2884:	6081      	str	r1, [r0, #8]
}
    2886:	e7fa      	b.n	287e <_system_pinmux_config+0x9a>
    2888:	fffbffff 	.word	0xfffbffff

0000288c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    288c:	b510      	push	{r4, lr}
    288e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2890:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2892:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2894:	2900      	cmp	r1, #0
    2896:	d104      	bne.n	28a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2898:	0943      	lsrs	r3, r0, #5
    289a:	01db      	lsls	r3, r3, #7
    289c:	4905      	ldr	r1, [pc, #20]	; (28b4 <system_pinmux_pin_set_config+0x28>)
    289e:	468c      	mov	ip, r1
    28a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    28a2:	241f      	movs	r4, #31
    28a4:	4020      	ands	r0, r4
    28a6:	2101      	movs	r1, #1
    28a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    28aa:	0018      	movs	r0, r3
    28ac:	4b02      	ldr	r3, [pc, #8]	; (28b8 <system_pinmux_pin_set_config+0x2c>)
    28ae:	4798      	blx	r3
}
    28b0:	bd10      	pop	{r4, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	41004400 	.word	0x41004400
    28b8:	000027e5 	.word	0x000027e5

000028bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    28bc:	4770      	bx	lr
	...

000028c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    28c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    28c2:	4b05      	ldr	r3, [pc, #20]	; (28d8 <system_init+0x18>)
    28c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <system_init+0x1c>)
    28c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <system_init+0x20>)
    28cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    28ce:	4b05      	ldr	r3, [pc, #20]	; (28e4 <system_init+0x24>)
    28d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    28d2:	4b05      	ldr	r3, [pc, #20]	; (28e8 <system_init+0x28>)
    28d4:	4798      	blx	r3
}
    28d6:	bd10      	pop	{r4, pc}
    28d8:	00002449 	.word	0x00002449
    28dc:	00001ced 	.word	0x00001ced
    28e0:	000028bd 	.word	0x000028bd
    28e4:	00001dfd 	.word	0x00001dfd
    28e8:	000028bd 	.word	0x000028bd

000028ec <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    28ec:	b510      	push	{r4, lr}
    28ee:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    28f0:	ab03      	add	r3, sp, #12
    28f2:	2200      	movs	r2, #0
    28f4:	701a      	strb	r2, [r3, #0]
    28f6:	3203      	adds	r2, #3
    28f8:	705a      	strb	r2, [r3, #1]
    28fa:	3a01      	subs	r2, #1
    28fc:	709a      	strb	r2, [r3, #2]
    28fe:	3a01      	subs	r2, #1
    2900:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2902:	4b27      	ldr	r3, [pc, #156]	; (29a0 <udd_sleep_mode+0xb4>)
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	4283      	cmp	r3, r0
    2908:	d007      	beq.n	291a <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    290a:	2800      	cmp	r0, #0
    290c:	d107      	bne.n	291e <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    290e:	4b24      	ldr	r3, [pc, #144]	; (29a0 <udd_sleep_mode+0xb4>)
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d123      	bne.n	295e <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2916:	4b22      	ldr	r3, [pc, #136]	; (29a0 <udd_sleep_mode+0xb4>)
    2918:	7018      	strb	r0, [r3, #0]
}
    291a:	b004      	add	sp, #16
    291c:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    291e:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2920:	5c1b      	ldrb	r3, [r3, r0]
    2922:	4a20      	ldr	r2, [pc, #128]	; (29a4 <udd_sleep_mode+0xb8>)
    2924:	5cd2      	ldrb	r2, [r2, r3]
    2926:	2aff      	cmp	r2, #255	; 0xff
    2928:	d100      	bne.n	292c <udd_sleep_mode+0x40>
    292a:	e7fe      	b.n	292a <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    292c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2930:	4251      	negs	r1, r2
    2932:	414a      	adcs	r2, r1
    2934:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2936:	b672      	cpsid	i
    2938:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    293c:	2100      	movs	r1, #0
    293e:	4a1a      	ldr	r2, [pc, #104]	; (29a8 <udd_sleep_mode+0xbc>)
    2940:	7011      	strb	r1, [r2, #0]
	return flags;
    2942:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2944:	4917      	ldr	r1, [pc, #92]	; (29a4 <udd_sleep_mode+0xb8>)
    2946:	5cca      	ldrb	r2, [r1, r3]
    2948:	3201      	adds	r2, #1
    294a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    294c:	2c00      	cmp	r4, #0
    294e:	d0de      	beq.n	290e <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2950:	2201      	movs	r2, #1
    2952:	4b15      	ldr	r3, [pc, #84]	; (29a8 <udd_sleep_mode+0xbc>)
    2954:	701a      	strb	r2, [r3, #0]
    2956:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    295a:	b662      	cpsie	i
    295c:	e7d7      	b.n	290e <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    295e:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2960:	5cd3      	ldrb	r3, [r2, r3]
    2962:	4a10      	ldr	r2, [pc, #64]	; (29a4 <udd_sleep_mode+0xb8>)
    2964:	5cd2      	ldrb	r2, [r2, r3]
    2966:	2a00      	cmp	r2, #0
    2968:	d100      	bne.n	296c <udd_sleep_mode+0x80>
    296a:	e7fe      	b.n	296a <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    296c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2970:	4251      	negs	r1, r2
    2972:	414a      	adcs	r2, r1
    2974:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2976:	b672      	cpsid	i
    2978:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    297c:	2100      	movs	r1, #0
    297e:	4a0a      	ldr	r2, [pc, #40]	; (29a8 <udd_sleep_mode+0xbc>)
    2980:	7011      	strb	r1, [r2, #0]
	return flags;
    2982:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2984:	4907      	ldr	r1, [pc, #28]	; (29a4 <udd_sleep_mode+0xb8>)
    2986:	5cca      	ldrb	r2, [r1, r3]
    2988:	3a01      	subs	r2, #1
    298a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    298c:	2c00      	cmp	r4, #0
    298e:	d0c2      	beq.n	2916 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2990:	2201      	movs	r2, #1
    2992:	4b05      	ldr	r3, [pc, #20]	; (29a8 <udd_sleep_mode+0xbc>)
    2994:	701a      	strb	r2, [r3, #0]
    2996:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    299a:	b662      	cpsie	i
    299c:	e7bb      	b.n	2916 <udd_sleep_mode+0x2a>
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	200003cc 	.word	0x200003cc
    29a4:	20000568 	.word	0x20000568
    29a8:	2000010c 	.word	0x2000010c

000029ac <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    29ac:	230f      	movs	r3, #15
    29ae:	4003      	ands	r3, r0
    29b0:	005b      	lsls	r3, r3, #1
    29b2:	09c0      	lsrs	r0, r0, #7
    29b4:	1818      	adds	r0, r3, r0
    29b6:	3802      	subs	r0, #2
    29b8:	0083      	lsls	r3, r0, #2
    29ba:	1818      	adds	r0, r3, r0
    29bc:	0080      	lsls	r0, r0, #2
    29be:	4b01      	ldr	r3, [pc, #4]	; (29c4 <udd_ep_get_job+0x18>)
    29c0:	1818      	adds	r0, r3, r0
}
    29c2:	4770      	bx	lr
    29c4:	20000354 	.word	0x20000354

000029c8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46d6      	mov	lr, sl
    29cc:	464f      	mov	r7, r9
    29ce:	4646      	mov	r6, r8
    29d0:	b5c0      	push	{r6, r7, lr}
    29d2:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    29d4:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    29d6:	b26b      	sxtb	r3, r5
    29d8:	2b00      	cmp	r3, #0
    29da:	db26      	blt.n	2a2a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    29dc:	0028      	movs	r0, r5
    29de:	4b5e      	ldr	r3, [pc, #376]	; (2b58 <udd_ep_transfer_process+0x190>)
    29e0:	4798      	blx	r3
    29e2:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    29e4:	270f      	movs	r7, #15
    29e6:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    29e8:	8a03      	ldrh	r3, [r0, #16]
    29ea:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    29ec:	464b      	mov	r3, r9
    29ee:	881b      	ldrh	r3, [r3, #0]
    29f0:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    29f2:	7c83      	ldrb	r3, [r0, #18]
    29f4:	075b      	lsls	r3, r3, #29
    29f6:	d46a      	bmi.n	2ace <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    29f8:	68e3      	ldr	r3, [r4, #12]
    29fa:	4453      	add	r3, sl
    29fc:	001e      	movs	r6, r3
    29fe:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2a00:	68a3      	ldr	r3, [r4, #8]
    2a02:	429e      	cmp	r6, r3
    2a04:	d800      	bhi.n	2a08 <udd_ep_transfer_process+0x40>
    2a06:	e074      	b.n	2af2 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2a08:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2a0a:	7ca3      	ldrb	r3, [r4, #18]
    2a0c:	2201      	movs	r2, #1
    2a0e:	4393      	bics	r3, r2
    2a10:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2a12:	6823      	ldr	r3, [r4, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d003      	beq.n	2a20 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2a18:	68e1      	ldr	r1, [r4, #12]
    2a1a:	002a      	movs	r2, r5
    2a1c:	2000      	movs	r0, #0
    2a1e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2a20:	bc1c      	pop	{r2, r3, r4}
    2a22:	4690      	mov	r8, r2
    2a24:	4699      	mov	r9, r3
    2a26:	46a2      	mov	sl, r4
    2a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2a2a:	0028      	movs	r0, r5
    2a2c:	4b4a      	ldr	r3, [pc, #296]	; (2b58 <udd_ep_transfer_process+0x190>)
    2a2e:	4798      	blx	r3
    2a30:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2a32:	270f      	movs	r7, #15
    2a34:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2a36:	8a03      	ldrh	r3, [r0, #16]
    2a38:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2a3a:	464b      	mov	r3, r9
    2a3c:	885e      	ldrh	r6, [r3, #2]
    2a3e:	68c3      	ldr	r3, [r0, #12]
    2a40:	469c      	mov	ip, r3
    2a42:	4466      	add	r6, ip
    2a44:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2a46:	6881      	ldr	r1, [r0, #8]
    2a48:	428e      	cmp	r6, r1
    2a4a:	d025      	beq.n	2a98 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2a4c:	1b8d      	subs	r5, r1, r6
    2a4e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2a50:	4b42      	ldr	r3, [pc, #264]	; (2b5c <udd_ep_transfer_process+0x194>)
    2a52:	429d      	cmp	r5, r3
    2a54:	d906      	bls.n	2a64 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2a56:	001d      	movs	r5, r3
    2a58:	4641      	mov	r1, r8
    2a5a:	0018      	movs	r0, r3
    2a5c:	4b40      	ldr	r3, [pc, #256]	; (2b60 <udd_ep_transfer_process+0x198>)
    2a5e:	4798      	blx	r3
    2a60:	1a6d      	subs	r5, r5, r1
    2a62:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2a64:	7ca2      	ldrb	r2, [r4, #18]
    2a66:	2300      	movs	r3, #0
    2a68:	0792      	lsls	r2, r2, #30
    2a6a:	d507      	bpl.n	2a7c <udd_ep_transfer_process+0xb4>
    2a6c:	4641      	mov	r1, r8
    2a6e:	0028      	movs	r0, r5
    2a70:	4b3c      	ldr	r3, [pc, #240]	; (2b64 <udd_ep_transfer_process+0x19c>)
    2a72:	4798      	blx	r3
    2a74:	b289      	uxth	r1, r1
    2a76:	424b      	negs	r3, r1
    2a78:	414b      	adcs	r3, r1
    2a7a:	b2db      	uxtb	r3, r3
    2a7c:	005b      	lsls	r3, r3, #1
    2a7e:	7ca2      	ldrb	r2, [r4, #18]
    2a80:	2102      	movs	r1, #2
    2a82:	438a      	bics	r2, r1
    2a84:	4313      	orrs	r3, r2
    2a86:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2a88:	6862      	ldr	r2, [r4, #4]
    2a8a:	1992      	adds	r2, r2, r6
    2a8c:	002b      	movs	r3, r5
    2a8e:	0039      	movs	r1, r7
    2a90:	4835      	ldr	r0, [pc, #212]	; (2b68 <udd_ep_transfer_process+0x1a0>)
    2a92:	4c36      	ldr	r4, [pc, #216]	; (2b6c <udd_ep_transfer_process+0x1a4>)
    2a94:	47a0      	blx	r4
    2a96:	e7c3      	b.n	2a20 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2a98:	7c83      	ldrb	r3, [r0, #18]
    2a9a:	079b      	lsls	r3, r3, #30
    2a9c:	d40b      	bmi.n	2ab6 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2a9e:	7c83      	ldrb	r3, [r0, #18]
    2aa0:	2201      	movs	r2, #1
    2aa2:	4393      	bics	r3, r2
    2aa4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2aa6:	6803      	ldr	r3, [r0, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d0b9      	beq.n	2a20 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2aac:	002a      	movs	r2, r5
    2aae:	0031      	movs	r1, r6
    2ab0:	2000      	movs	r0, #0
    2ab2:	4798      	blx	r3
    2ab4:	e7b4      	b.n	2a20 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2ab6:	7c83      	ldrb	r3, [r0, #18]
    2ab8:	2202      	movs	r2, #2
    2aba:	4393      	bics	r3, r2
    2abc:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2abe:	6842      	ldr	r2, [r0, #4]
    2ac0:	1992      	adds	r2, r2, r6
    2ac2:	2300      	movs	r3, #0
    2ac4:	0039      	movs	r1, r7
    2ac6:	4828      	ldr	r0, [pc, #160]	; (2b68 <udd_ep_transfer_process+0x1a0>)
    2ac8:	4c28      	ldr	r4, [pc, #160]	; (2b6c <udd_ep_transfer_process+0x1a4>)
    2aca:	47a0      	blx	r4
    2acc:	e7a8      	b.n	2a20 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2ace:	6843      	ldr	r3, [r0, #4]
    2ad0:	68c2      	ldr	r2, [r0, #12]
    2ad2:	4694      	mov	ip, r2
    2ad4:	4463      	add	r3, ip
    2ad6:	001e      	movs	r6, r3
    2ad8:	4641      	mov	r1, r8
    2ada:	6880      	ldr	r0, [r0, #8]
    2adc:	4b21      	ldr	r3, [pc, #132]	; (2b64 <udd_ep_transfer_process+0x19c>)
    2ade:	4798      	blx	r3
    2ae0:	000a      	movs	r2, r1
    2ae2:	1e7b      	subs	r3, r7, #1
    2ae4:	019b      	lsls	r3, r3, #6
    2ae6:	4922      	ldr	r1, [pc, #136]	; (2b70 <udd_ep_transfer_process+0x1a8>)
    2ae8:	1859      	adds	r1, r3, r1
    2aea:	0030      	movs	r0, r6
    2aec:	4b21      	ldr	r3, [pc, #132]	; (2b74 <udd_ep_transfer_process+0x1ac>)
    2aee:	4798      	blx	r3
    2af0:	e782      	b.n	29f8 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2af2:	464a      	mov	r2, r9
    2af4:	8892      	ldrh	r2, [r2, #4]
    2af6:	4552      	cmp	r2, sl
    2af8:	d000      	beq.n	2afc <udd_ep_transfer_process+0x134>
    2afa:	e786      	b.n	2a0a <udd_ep_transfer_process+0x42>
    2afc:	429e      	cmp	r6, r3
    2afe:	d100      	bne.n	2b02 <udd_ep_transfer_process+0x13a>
    2b00:	e783      	b.n	2a0a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2b02:	1b9b      	subs	r3, r3, r6
    2b04:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2b06:	4b15      	ldr	r3, [pc, #84]	; (2b5c <udd_ep_transfer_process+0x194>)
    2b08:	429d      	cmp	r5, r3
    2b0a:	d916      	bls.n	2b3a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2b0c:	001d      	movs	r5, r3
    2b0e:	4641      	mov	r1, r8
    2b10:	0018      	movs	r0, r3
    2b12:	4b13      	ldr	r3, [pc, #76]	; (2b60 <udd_ep_transfer_process+0x198>)
    2b14:	4798      	blx	r3
    2b16:	1a6b      	subs	r3, r5, r1
    2b18:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2b1a:	4598      	cmp	r8, r3
    2b1c:	d914      	bls.n	2b48 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2b1e:	7ca3      	ldrb	r3, [r4, #18]
    2b20:	2204      	movs	r2, #4
    2b22:	4313      	orrs	r3, r2
    2b24:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2b26:	1e7a      	subs	r2, r7, #1
    2b28:	0192      	lsls	r2, r2, #6
    2b2a:	4b11      	ldr	r3, [pc, #68]	; (2b70 <udd_ep_transfer_process+0x1a8>)
    2b2c:	18d2      	adds	r2, r2, r3
    2b2e:	4643      	mov	r3, r8
    2b30:	0039      	movs	r1, r7
    2b32:	480d      	ldr	r0, [pc, #52]	; (2b68 <udd_ep_transfer_process+0x1a0>)
    2b34:	4c10      	ldr	r4, [pc, #64]	; (2b78 <udd_ep_transfer_process+0x1b0>)
    2b36:	47a0      	blx	r4
    2b38:	e772      	b.n	2a20 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2b3a:	4641      	mov	r1, r8
    2b3c:	0028      	movs	r0, r5
    2b3e:	4b09      	ldr	r3, [pc, #36]	; (2b64 <udd_ep_transfer_process+0x19c>)
    2b40:	4798      	blx	r3
    2b42:	1a6b      	subs	r3, r5, r1
    2b44:	b29b      	uxth	r3, r3
    2b46:	e7e8      	b.n	2b1a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2b48:	6862      	ldr	r2, [r4, #4]
    2b4a:	1992      	adds	r2, r2, r6
    2b4c:	0039      	movs	r1, r7
    2b4e:	4806      	ldr	r0, [pc, #24]	; (2b68 <udd_ep_transfer_process+0x1a0>)
    2b50:	4c09      	ldr	r4, [pc, #36]	; (2b78 <udd_ep_transfer_process+0x1b0>)
    2b52:	47a0      	blx	r4
    2b54:	e764      	b.n	2a20 <udd_ep_transfer_process+0x58>
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	000029ad 	.word	0x000029ad
    2b5c:	00001fff 	.word	0x00001fff
    2b60:	00004e75 	.word	0x00004e75
    2b64:	00004ca1 	.word	0x00004ca1
    2b68:	20000670 	.word	0x20000670
    2b6c:	00003c5d 	.word	0x00003c5d
    2b70:	200005b0 	.word	0x200005b0
    2b74:	000061c5 	.word	0x000061c5
    2b78:	00003cb1 	.word	0x00003cb1

00002b7c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2b7c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2b7e:	2205      	movs	r2, #5
    2b80:	4b05      	ldr	r3, [pc, #20]	; (2b98 <udd_ctrl_stall_data+0x1c>)
    2b82:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2b84:	4c05      	ldr	r4, [pc, #20]	; (2b9c <udd_ctrl_stall_data+0x20>)
    2b86:	2180      	movs	r1, #128	; 0x80
    2b88:	0020      	movs	r0, r4
    2b8a:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <udd_ctrl_stall_data+0x24>)
    2b8c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2b8e:	2100      	movs	r1, #0
    2b90:	0020      	movs	r0, r4
    2b92:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <udd_ctrl_stall_data+0x28>)
    2b94:	4798      	blx	r3
}
    2b96:	bd10      	pop	{r4, pc}
    2b98:	20000352 	.word	0x20000352
    2b9c:	20000670 	.word	0x20000670
    2ba0:	00003bb1 	.word	0x00003bb1
    2ba4:	00003bd7 	.word	0x00003bd7

00002ba8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2ba8:	b570      	push	{r4, r5, r6, lr}
    2baa:	000e      	movs	r6, r1
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2bac:	4c0e      	ldr	r4, [pc, #56]	; (2be8 <_usb_device_lpm_suspend+0x40>)
    2bae:	2106      	movs	r1, #6
    2bb0:	0020      	movs	r0, r4
    2bb2:	4d0e      	ldr	r5, [pc, #56]	; (2bec <_usb_device_lpm_suspend+0x44>)
    2bb4:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2bb6:	2104      	movs	r1, #4
    2bb8:	0020      	movs	r0, r4
    2bba:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2bbc:	2102      	movs	r1, #2
    2bbe:	0020      	movs	r0, r4
    2bc0:	4b0b      	ldr	r3, [pc, #44]	; (2bf0 <_usb_device_lpm_suspend+0x48>)
    2bc2:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2bc4:	2002      	movs	r0, #2
    2bc6:	4b0b      	ldr	r3, [pc, #44]	; (2bf4 <_usb_device_lpm_suspend+0x4c>)
    2bc8:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    2bca:	6833      	ldr	r3, [r6, #0]
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d104      	bne.n	2bda <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    2bd0:	4b09      	ldr	r3, [pc, #36]	; (2bf8 <_usb_device_lpm_suspend+0x50>)
    2bd2:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    2bd4:	4b09      	ldr	r3, [pc, #36]	; (2bfc <_usb_device_lpm_suspend+0x54>)
    2bd6:	4798      	blx	r3
}
    2bd8:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    2bda:	4b09      	ldr	r3, [pc, #36]	; (2c00 <_usb_device_lpm_suspend+0x58>)
    2bdc:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    2bde:	6833      	ldr	r3, [r6, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d1f7      	bne.n	2bd4 <_usb_device_lpm_suspend+0x2c>
    2be4:	e7f4      	b.n	2bd0 <_usb_device_lpm_suspend+0x28>
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	20000670 	.word	0x20000670
    2bec:	000036f1 	.word	0x000036f1
    2bf0:	000036d1 	.word	0x000036d1
    2bf4:	000028ed 	.word	0x000028ed
    2bf8:	000047d9 	.word	0x000047d9
    2bfc:	000047cd 	.word	0x000047cd
    2c00:	000047e5 	.word	0x000047e5

00002c04 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2c04:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c06:	4b13      	ldr	r3, [pc, #76]	; (2c54 <_usb_on_wakeup+0x50>)
    2c08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2c0a:	069b      	lsls	r3, r3, #26
    2c0c:	d41c      	bmi.n	2c48 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2c0e:	4911      	ldr	r1, [pc, #68]	; (2c54 <_usb_on_wakeup+0x50>)
    2c10:	22d0      	movs	r2, #208	; 0xd0
    2c12:	68cb      	ldr	r3, [r1, #12]
    2c14:	4013      	ands	r3, r2
    2c16:	2bd0      	cmp	r3, #208	; 0xd0
    2c18:	d1fb      	bne.n	2c12 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2c1a:	4c0f      	ldr	r4, [pc, #60]	; (2c58 <_usb_on_wakeup+0x54>)
    2c1c:	2102      	movs	r1, #2
    2c1e:	0020      	movs	r0, r4
    2c20:	4b0e      	ldr	r3, [pc, #56]	; (2c5c <_usb_on_wakeup+0x58>)
    2c22:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2c24:	2104      	movs	r1, #4
    2c26:	0020      	movs	r0, r4
    2c28:	4d0d      	ldr	r5, [pc, #52]	; (2c60 <_usb_on_wakeup+0x5c>)
    2c2a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2c2c:	4a0d      	ldr	r2, [pc, #52]	; (2c64 <_usb_on_wakeup+0x60>)
    2c2e:	2106      	movs	r1, #6
    2c30:	0020      	movs	r0, r4
    2c32:	4b0d      	ldr	r3, [pc, #52]	; (2c68 <_usb_on_wakeup+0x64>)
    2c34:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2c36:	2106      	movs	r1, #6
    2c38:	0020      	movs	r0, r4
    2c3a:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2c3c:	2003      	movs	r0, #3
    2c3e:	4b0b      	ldr	r3, [pc, #44]	; (2c6c <_usb_on_wakeup+0x68>)
    2c40:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2c42:	4b0b      	ldr	r3, [pc, #44]	; (2c70 <_usb_on_wakeup+0x6c>)
    2c44:	4798      	blx	r3
#endif
}
    2c46:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2c48:	4902      	ldr	r1, [pc, #8]	; (2c54 <_usb_on_wakeup+0x50>)
    2c4a:	2210      	movs	r2, #16
    2c4c:	68cb      	ldr	r3, [r1, #12]
    2c4e:	421a      	tst	r2, r3
    2c50:	d0fc      	beq.n	2c4c <_usb_on_wakeup+0x48>
    2c52:	e7e2      	b.n	2c1a <_usb_on_wakeup+0x16>
    2c54:	40000800 	.word	0x40000800
    2c58:	20000670 	.word	0x20000670
    2c5c:	000036f1 	.word	0x000036f1
    2c60:	000036d1 	.word	0x000036d1
    2c64:	00002ba9 	.word	0x00002ba9
    2c68:	000036ad 	.word	0x000036ad
    2c6c:	000028ed 	.word	0x000028ed
    2c70:	00004795 	.word	0x00004795

00002c74 <_usb_on_bus_reset>:
{
    2c74:	b530      	push	{r4, r5, lr}
    2c76:	b083      	sub	sp, #12
    2c78:	0004      	movs	r4, r0
	udc_reset();
    2c7a:	4b1e      	ldr	r3, [pc, #120]	; (2cf4 <_usb_on_bus_reset+0x80>)
    2c7c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2c7e:	2380      	movs	r3, #128	; 0x80
    2c80:	6822      	ldr	r2, [r4, #0]
    2c82:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2c84:	ad01      	add	r5, sp, #4
    2c86:	0028      	movs	r0, r5
    2c88:	4b1b      	ldr	r3, [pc, #108]	; (2cf8 <_usb_on_bus_reset+0x84>)
    2c8a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2c8c:	2303      	movs	r3, #3
    2c8e:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2c90:	0029      	movs	r1, r5
    2c92:	0020      	movs	r0, r4
    2c94:	4b19      	ldr	r3, [pc, #100]	; (2cfc <_usb_on_bus_reset+0x88>)
    2c96:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2c98:	4919      	ldr	r1, [pc, #100]	; (2d00 <_usb_on_bus_reset+0x8c>)
    2c9a:	0020      	movs	r0, r4
    2c9c:	4b19      	ldr	r3, [pc, #100]	; (2d04 <_usb_on_bus_reset+0x90>)
    2c9e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2ca0:	4b19      	ldr	r3, [pc, #100]	; (2d08 <_usb_on_bus_reset+0x94>)
    2ca2:	2202      	movs	r2, #2
    2ca4:	2100      	movs	r1, #0
    2ca6:	0020      	movs	r0, r4
    2ca8:	4d18      	ldr	r5, [pc, #96]	; (2d0c <_usb_on_bus_reset+0x98>)
    2caa:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2cac:	4b18      	ldr	r3, [pc, #96]	; (2d10 <_usb_on_bus_reset+0x9c>)
    2cae:	2200      	movs	r2, #0
    2cb0:	2100      	movs	r1, #0
    2cb2:	0020      	movs	r0, r4
    2cb4:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2cb6:	4b17      	ldr	r3, [pc, #92]	; (2d14 <_usb_on_bus_reset+0xa0>)
    2cb8:	2201      	movs	r2, #1
    2cba:	2100      	movs	r1, #0
    2cbc:	0020      	movs	r0, r4
    2cbe:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2cc0:	2202      	movs	r2, #2
    2cc2:	2100      	movs	r1, #0
    2cc4:	0020      	movs	r0, r4
    2cc6:	4d14      	ldr	r5, [pc, #80]	; (2d18 <_usb_on_bus_reset+0xa4>)
    2cc8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2cca:	2200      	movs	r2, #0
    2ccc:	2100      	movs	r1, #0
    2cce:	0020      	movs	r0, r4
    2cd0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2cd2:	2201      	movs	r2, #1
    2cd4:	2100      	movs	r1, #0
    2cd6:	0020      	movs	r0, r4
    2cd8:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2cda:	6821      	ldr	r1, [r4, #0]
    2cdc:	890b      	ldrh	r3, [r1, #8]
    2cde:	4a0f      	ldr	r2, [pc, #60]	; (2d1c <_usb_on_bus_reset+0xa8>)
    2ce0:	401a      	ands	r2, r3
    2ce2:	2380      	movs	r3, #128	; 0x80
    2ce4:	00db      	lsls	r3, r3, #3
    2ce6:	4313      	orrs	r3, r2
    2ce8:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2cea:	2200      	movs	r2, #0
    2cec:	4b0c      	ldr	r3, [pc, #48]	; (2d20 <_usb_on_bus_reset+0xac>)
    2cee:	701a      	strb	r2, [r3, #0]
}
    2cf0:	b003      	add	sp, #12
    2cf2:	bd30      	pop	{r4, r5, pc}
    2cf4:	000017ad 	.word	0x000017ad
    2cf8:	000038fd 	.word	0x000038fd
    2cfc:	0000390d 	.word	0x0000390d
    2d00:	200007f0 	.word	0x200007f0
    2d04:	00003d01 	.word	0x00003d01
    2d08:	00002e5d 	.word	0x00002e5d
    2d0c:	0000370d 	.word	0x0000370d
    2d10:	0000318d 	.word	0x0000318d
    2d14:	00002d61 	.word	0x00002d61
    2d18:	0000375d 	.word	0x0000375d
    2d1c:	fffff3ff 	.word	0xfffff3ff
    2d20:	20000352 	.word	0x20000352

00002d24 <udd_ctrl_send_zlp_in>:
{
    2d24:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2d26:	2203      	movs	r2, #3
    2d28:	4b07      	ldr	r3, [pc, #28]	; (2d48 <udd_ctrl_send_zlp_in+0x24>)
    2d2a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d2c:	4c07      	ldr	r4, [pc, #28]	; (2d4c <udd_ctrl_send_zlp_in+0x28>)
    2d2e:	4908      	ldr	r1, [pc, #32]	; (2d50 <udd_ctrl_send_zlp_in+0x2c>)
    2d30:	0020      	movs	r0, r4
    2d32:	4b08      	ldr	r3, [pc, #32]	; (2d54 <udd_ctrl_send_zlp_in+0x30>)
    2d34:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2d36:	4b08      	ldr	r3, [pc, #32]	; (2d58 <udd_ctrl_send_zlp_in+0x34>)
    2d38:	689a      	ldr	r2, [r3, #8]
    2d3a:	2300      	movs	r3, #0
    2d3c:	2100      	movs	r1, #0
    2d3e:	0020      	movs	r0, r4
    2d40:	4c06      	ldr	r4, [pc, #24]	; (2d5c <udd_ctrl_send_zlp_in+0x38>)
    2d42:	47a0      	blx	r4
}
    2d44:	bd10      	pop	{r4, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	20000352 	.word	0x20000352
    2d4c:	20000670 	.word	0x20000670
    2d50:	200007f0 	.word	0x200007f0
    2d54:	00003d01 	.word	0x00003d01
    2d58:	200007d8 	.word	0x200007d8
    2d5c:	00003c5d 	.word	0x00003c5d

00002d60 <_usb_ep0_on_tansfer_fail>:
{
    2d60:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2d62:	7989      	ldrb	r1, [r1, #6]
    2d64:	b24b      	sxtb	r3, r1
    2d66:	2b00      	cmp	r3, #0
    2d68:	db06      	blt.n	2d78 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2d6a:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <_usb_ep0_on_tansfer_fail+0x44>)
    2d6c:	781b      	ldrb	r3, [r3, #0]
    2d6e:	2b02      	cmp	r3, #2
    2d70:	d00f      	beq.n	2d92 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2d72:	2b03      	cmp	r3, #3
    2d74:	d011      	beq.n	2d9a <_usb_ep0_on_tansfer_fail+0x3a>
}
    2d76:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2d78:	4b0a      	ldr	r3, [pc, #40]	; (2da4 <_usb_ep0_on_tansfer_fail+0x44>)
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d005      	beq.n	2d8c <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2d80:	2b04      	cmp	r3, #4
    2d82:	d1f8      	bne.n	2d76 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2d84:	4808      	ldr	r0, [pc, #32]	; (2da8 <_usb_ep0_on_tansfer_fail+0x48>)
    2d86:	4b09      	ldr	r3, [pc, #36]	; (2dac <_usb_ep0_on_tansfer_fail+0x4c>)
    2d88:	4798      	blx	r3
    2d8a:	e7f4      	b.n	2d76 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2d8c:	4b08      	ldr	r3, [pc, #32]	; (2db0 <_usb_ep0_on_tansfer_fail+0x50>)
    2d8e:	4798      	blx	r3
    2d90:	e7f1      	b.n	2d76 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d92:	2204      	movs	r2, #4
    2d94:	4b03      	ldr	r3, [pc, #12]	; (2da4 <_usb_ep0_on_tansfer_fail+0x44>)
    2d96:	701a      	strb	r2, [r3, #0]
    2d98:	e7ed      	b.n	2d76 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2d9a:	4803      	ldr	r0, [pc, #12]	; (2da8 <_usb_ep0_on_tansfer_fail+0x48>)
    2d9c:	4b03      	ldr	r3, [pc, #12]	; (2dac <_usb_ep0_on_tansfer_fail+0x4c>)
    2d9e:	4798      	blx	r3
}
    2da0:	e7e9      	b.n	2d76 <_usb_ep0_on_tansfer_fail+0x16>
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	20000352 	.word	0x20000352
    2da8:	20000670 	.word	0x20000670
    2dac:	00003bb1 	.word	0x00003bb1
    2db0:	00002d25 	.word	0x00002d25

00002db4 <udd_ctrl_in_sent>:
{
    2db4:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2db6:	4b20      	ldr	r3, [pc, #128]	; (2e38 <udd_ctrl_in_sent+0x84>)
    2db8:	881b      	ldrh	r3, [r3, #0]
    2dba:	4a20      	ldr	r2, [pc, #128]	; (2e3c <udd_ctrl_in_sent+0x88>)
    2dbc:	8994      	ldrh	r4, [r2, #12]
    2dbe:	1ae4      	subs	r4, r4, r3
    2dc0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2dc2:	2c00      	cmp	r4, #0
    2dc4:	d118      	bne.n	2df8 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2dc6:	4a1e      	ldr	r2, [pc, #120]	; (2e40 <udd_ctrl_in_sent+0x8c>)
    2dc8:	8811      	ldrh	r1, [r2, #0]
    2dca:	185b      	adds	r3, r3, r1
    2dcc:	b29b      	uxth	r3, r3
    2dce:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2dd0:	4a1a      	ldr	r2, [pc, #104]	; (2e3c <udd_ctrl_in_sent+0x88>)
    2dd2:	88d2      	ldrh	r2, [r2, #6]
    2dd4:	429a      	cmp	r2, r3
    2dd6:	d023      	beq.n	2e20 <udd_ctrl_in_sent+0x6c>
    2dd8:	4b1a      	ldr	r3, [pc, #104]	; (2e44 <udd_ctrl_in_sent+0x90>)
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d11f      	bne.n	2e20 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2de0:	4b16      	ldr	r3, [pc, #88]	; (2e3c <udd_ctrl_in_sent+0x88>)
    2de2:	695b      	ldr	r3, [r3, #20]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d023      	beq.n	2e30 <udd_ctrl_in_sent+0x7c>
    2de8:	4798      	blx	r3
    2dea:	2800      	cmp	r0, #0
    2dec:	d020      	beq.n	2e30 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2dee:	2200      	movs	r2, #0
    2df0:	4b11      	ldr	r3, [pc, #68]	; (2e38 <udd_ctrl_in_sent+0x84>)
    2df2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2df4:	4b11      	ldr	r3, [pc, #68]	; (2e3c <udd_ctrl_in_sent+0x88>)
    2df6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2df8:	2c3f      	cmp	r4, #63	; 0x3f
    2dfa:	d919      	bls.n	2e30 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2dfc:	2200      	movs	r2, #0
    2dfe:	4b11      	ldr	r3, [pc, #68]	; (2e44 <udd_ctrl_in_sent+0x90>)
    2e00:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2e02:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2e04:	4d0c      	ldr	r5, [pc, #48]	; (2e38 <udd_ctrl_in_sent+0x84>)
    2e06:	882b      	ldrh	r3, [r5, #0]
    2e08:	4a0c      	ldr	r2, [pc, #48]	; (2e3c <udd_ctrl_in_sent+0x88>)
    2e0a:	6892      	ldr	r2, [r2, #8]
    2e0c:	18d2      	adds	r2, r2, r3
    2e0e:	0023      	movs	r3, r4
    2e10:	2100      	movs	r1, #0
    2e12:	480d      	ldr	r0, [pc, #52]	; (2e48 <udd_ctrl_in_sent+0x94>)
    2e14:	4e0d      	ldr	r6, [pc, #52]	; (2e4c <udd_ctrl_in_sent+0x98>)
    2e16:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2e18:	882b      	ldrh	r3, [r5, #0]
    2e1a:	18e4      	adds	r4, r4, r3
    2e1c:	802c      	strh	r4, [r5, #0]
}
    2e1e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2e20:	2204      	movs	r2, #4
    2e22:	4b0b      	ldr	r3, [pc, #44]	; (2e50 <udd_ctrl_in_sent+0x9c>)
    2e24:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2e26:	490b      	ldr	r1, [pc, #44]	; (2e54 <udd_ctrl_in_sent+0xa0>)
    2e28:	4807      	ldr	r0, [pc, #28]	; (2e48 <udd_ctrl_in_sent+0x94>)
    2e2a:	4b0b      	ldr	r3, [pc, #44]	; (2e58 <udd_ctrl_in_sent+0xa4>)
    2e2c:	4798      	blx	r3
			return;
    2e2e:	e7f6      	b.n	2e1e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2e30:	2201      	movs	r2, #1
    2e32:	4b04      	ldr	r3, [pc, #16]	; (2e44 <udd_ctrl_in_sent+0x90>)
    2e34:	701a      	strb	r2, [r3, #0]
    2e36:	e7e5      	b.n	2e04 <udd_ctrl_in_sent+0x50>
    2e38:	2000034e 	.word	0x2000034e
    2e3c:	200007d8 	.word	0x200007d8
    2e40:	20000350 	.word	0x20000350
    2e44:	2000034c 	.word	0x2000034c
    2e48:	20000670 	.word	0x20000670
    2e4c:	00003c5d 	.word	0x00003c5d
    2e50:	20000352 	.word	0x20000352
    2e54:	200007f0 	.word	0x200007f0
    2e58:	00003d01 	.word	0x00003d01

00002e5c <_usb_ep0_on_setup>:
{
    2e5c:	b510      	push	{r4, lr}
    2e5e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2e60:	4b2c      	ldr	r3, [pc, #176]	; (2f14 <_usb_ep0_on_setup+0xb8>)
    2e62:	781b      	ldrb	r3, [r3, #0]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d007      	beq.n	2e78 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2e68:	4b2b      	ldr	r3, [pc, #172]	; (2f18 <_usb_ep0_on_setup+0xbc>)
    2e6a:	691b      	ldr	r3, [r3, #16]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d000      	beq.n	2e72 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2e70:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2e72:	2200      	movs	r2, #0
    2e74:	4b27      	ldr	r3, [pc, #156]	; (2f14 <_usb_ep0_on_setup+0xb8>)
    2e76:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2e78:	8823      	ldrh	r3, [r4, #0]
    2e7a:	2b08      	cmp	r3, #8
    2e7c:	d002      	beq.n	2e84 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2e7e:	4b27      	ldr	r3, [pc, #156]	; (2f1c <_usb_ep0_on_setup+0xc0>)
    2e80:	4798      	blx	r3
}
    2e82:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2e84:	4a24      	ldr	r2, [pc, #144]	; (2f18 <_usb_ep0_on_setup+0xbc>)
    2e86:	4b26      	ldr	r3, [pc, #152]	; (2f20 <_usb_ep0_on_setup+0xc4>)
    2e88:	7819      	ldrb	r1, [r3, #0]
    2e8a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2e8c:	7859      	ldrb	r1, [r3, #1]
    2e8e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2e90:	78d8      	ldrb	r0, [r3, #3]
    2e92:	0200      	lsls	r0, r0, #8
    2e94:	7899      	ldrb	r1, [r3, #2]
    2e96:	1809      	adds	r1, r1, r0
    2e98:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2e9a:	7958      	ldrb	r0, [r3, #5]
    2e9c:	0200      	lsls	r0, r0, #8
    2e9e:	7919      	ldrb	r1, [r3, #4]
    2ea0:	1809      	adds	r1, r1, r0
    2ea2:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2ea4:	79d9      	ldrb	r1, [r3, #7]
    2ea6:	0209      	lsls	r1, r1, #8
    2ea8:	799b      	ldrb	r3, [r3, #6]
    2eaa:	185b      	adds	r3, r3, r1
    2eac:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2eae:	4b1d      	ldr	r3, [pc, #116]	; (2f24 <_usb_ep0_on_setup+0xc8>)
    2eb0:	4798      	blx	r3
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d016      	beq.n	2ee4 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2eb6:	4b18      	ldr	r3, [pc, #96]	; (2f18 <_usb_ep0_on_setup+0xbc>)
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b7f      	cmp	r3, #127	; 0x7f
    2ebc:	d815      	bhi.n	2eea <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2ebe:	4b16      	ldr	r3, [pc, #88]	; (2f18 <_usb_ep0_on_setup+0xbc>)
    2ec0:	88db      	ldrh	r3, [r3, #6]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d022      	beq.n	2f0c <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2ec6:	2300      	movs	r3, #0
    2ec8:	4a17      	ldr	r2, [pc, #92]	; (2f28 <_usb_ep0_on_setup+0xcc>)
    2eca:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2ecc:	4a17      	ldr	r2, [pc, #92]	; (2f2c <_usb_ep0_on_setup+0xd0>)
    2ece:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2ed0:	2201      	movs	r2, #1
    2ed2:	4b10      	ldr	r3, [pc, #64]	; (2f14 <_usb_ep0_on_setup+0xb8>)
    2ed4:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2ed6:	2340      	movs	r3, #64	; 0x40
    2ed8:	4a11      	ldr	r2, [pc, #68]	; (2f20 <_usb_ep0_on_setup+0xc4>)
    2eda:	2100      	movs	r1, #0
    2edc:	4814      	ldr	r0, [pc, #80]	; (2f30 <_usb_ep0_on_setup+0xd4>)
    2ede:	4c15      	ldr	r4, [pc, #84]	; (2f34 <_usb_ep0_on_setup+0xd8>)
    2ee0:	47a0      	blx	r4
    2ee2:	e7ce      	b.n	2e82 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2ee4:	4b0d      	ldr	r3, [pc, #52]	; (2f1c <_usb_ep0_on_setup+0xc0>)
    2ee6:	4798      	blx	r3
			return;
    2ee8:	e7cb      	b.n	2e82 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2eea:	2300      	movs	r3, #0
    2eec:	4a0e      	ldr	r2, [pc, #56]	; (2f28 <_usb_ep0_on_setup+0xcc>)
    2eee:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2ef0:	4a0e      	ldr	r2, [pc, #56]	; (2f2c <_usb_ep0_on_setup+0xd0>)
    2ef2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2ef4:	2202      	movs	r2, #2
    2ef6:	4b07      	ldr	r3, [pc, #28]	; (2f14 <_usb_ep0_on_setup+0xb8>)
    2ef8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2efa:	2340      	movs	r3, #64	; 0x40
    2efc:	4a08      	ldr	r2, [pc, #32]	; (2f20 <_usb_ep0_on_setup+0xc4>)
    2efe:	2100      	movs	r1, #0
    2f00:	480b      	ldr	r0, [pc, #44]	; (2f30 <_usb_ep0_on_setup+0xd4>)
    2f02:	4c0c      	ldr	r4, [pc, #48]	; (2f34 <_usb_ep0_on_setup+0xd8>)
    2f04:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2f06:	4b0c      	ldr	r3, [pc, #48]	; (2f38 <_usb_ep0_on_setup+0xdc>)
    2f08:	4798      	blx	r3
    2f0a:	e7ba      	b.n	2e82 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2f0c:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <_usb_ep0_on_setup+0xe0>)
    2f0e:	4798      	blx	r3
				return;
    2f10:	e7b7      	b.n	2e82 <_usb_ep0_on_setup+0x26>
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	20000352 	.word	0x20000352
    2f18:	200007d8 	.word	0x200007d8
    2f1c:	00002b7d 	.word	0x00002b7d
    2f20:	200007f0 	.word	0x200007f0
    2f24:	0000183d 	.word	0x0000183d
    2f28:	20000350 	.word	0x20000350
    2f2c:	2000034e 	.word	0x2000034e
    2f30:	20000670 	.word	0x20000670
    2f34:	00003cb1 	.word	0x00003cb1
    2f38:	00002db5 	.word	0x00002db5
    2f3c:	00002d25 	.word	0x00002d25

00002f40 <_usb_on_sof_notify>:
{
    2f40:	b510      	push	{r4, lr}
	udc_sof_notify();
    2f42:	4b02      	ldr	r3, [pc, #8]	; (2f4c <_usb_on_sof_notify+0xc>)
    2f44:	4798      	blx	r3
	UDC_SOF_EVENT();
    2f46:	4b02      	ldr	r3, [pc, #8]	; (2f50 <_usb_on_sof_notify+0x10>)
    2f48:	4798      	blx	r3
}
    2f4a:	bd10      	pop	{r4, pc}
    2f4c:	000017f9 	.word	0x000017f9
    2f50:	000047a1 	.word	0x000047a1

00002f54 <_usb_on_suspend>:
{
    2f54:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2f56:	4c07      	ldr	r4, [pc, #28]	; (2f74 <_usb_on_suspend+0x20>)
    2f58:	2104      	movs	r1, #4
    2f5a:	0020      	movs	r0, r4
    2f5c:	4b06      	ldr	r3, [pc, #24]	; (2f78 <_usb_on_suspend+0x24>)
    2f5e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2f60:	2102      	movs	r1, #2
    2f62:	0020      	movs	r0, r4
    2f64:	4b05      	ldr	r3, [pc, #20]	; (2f7c <_usb_on_suspend+0x28>)
    2f66:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2f68:	2001      	movs	r0, #1
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <_usb_on_suspend+0x2c>)
    2f6c:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2f6e:	4b05      	ldr	r3, [pc, #20]	; (2f84 <_usb_on_suspend+0x30>)
    2f70:	4798      	blx	r3
}
    2f72:	bd10      	pop	{r4, pc}
    2f74:	20000670 	.word	0x20000670
    2f78:	000036f1 	.word	0x000036f1
    2f7c:	000036d1 	.word	0x000036d1
    2f80:	000028ed 	.word	0x000028ed
    2f84:	00004789 	.word	0x00004789

00002f88 <udd_ep_abort>:
{
    2f88:	b510      	push	{r4, lr}
    2f8a:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2f8c:	0001      	movs	r1, r0
    2f8e:	480a      	ldr	r0, [pc, #40]	; (2fb8 <udd_ep_abort+0x30>)
    2f90:	4b0a      	ldr	r3, [pc, #40]	; (2fbc <udd_ep_abort+0x34>)
    2f92:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2f94:	0020      	movs	r0, r4
    2f96:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <udd_ep_abort+0x38>)
    2f98:	4798      	blx	r3
	if (!ptr_job->busy) {
    2f9a:	7c83      	ldrb	r3, [r0, #18]
    2f9c:	07db      	lsls	r3, r3, #31
    2f9e:	d50a      	bpl.n	2fb6 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2fa0:	7c83      	ldrb	r3, [r0, #18]
    2fa2:	2201      	movs	r2, #1
    2fa4:	4393      	bics	r3, r2
    2fa6:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2fa8:	6803      	ldr	r3, [r0, #0]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d003      	beq.n	2fb6 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2fae:	68c1      	ldr	r1, [r0, #12]
    2fb0:	0022      	movs	r2, r4
    2fb2:	2001      	movs	r0, #1
    2fb4:	4798      	blx	r3
}
    2fb6:	bd10      	pop	{r4, pc}
    2fb8:	20000670 	.word	0x20000670
    2fbc:	00003b51 	.word	0x00003b51
    2fc0:	000029ad 	.word	0x000029ad

00002fc4 <udd_is_high_speed>:
}
    2fc4:	2000      	movs	r0, #0
    2fc6:	4770      	bx	lr

00002fc8 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2fc8:	4b02      	ldr	r3, [pc, #8]	; (2fd4 <udd_get_frame_number+0xc>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	8a18      	ldrh	r0, [r3, #16]
    2fce:	0480      	lsls	r0, r0, #18
    2fd0:	0d40      	lsrs	r0, r0, #21
}
    2fd2:	4770      	bx	lr
    2fd4:	20000670 	.word	0x20000670

00002fd8 <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    2fd8:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <udd_get_micro_frame_number+0xc>)
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	8a18      	ldrh	r0, [r3, #16]
    2fde:	b280      	uxth	r0, r0
}
    2fe0:	4770      	bx	lr
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	20000670 	.word	0x20000670

00002fe8 <udd_ep_free>:
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	b082      	sub	sp, #8
    2fec:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2fee:	ad01      	add	r5, sp, #4
    2ff0:	0028      	movs	r0, r5
    2ff2:	4b0d      	ldr	r3, [pc, #52]	; (3028 <udd_ep_free+0x40>)
    2ff4:	4798      	blx	r3
	udd_ep_abort(ep);
    2ff6:	0020      	movs	r0, r4
    2ff8:	4b0c      	ldr	r3, [pc, #48]	; (302c <udd_ep_free+0x44>)
    2ffa:	4798      	blx	r3
	config_ep.ep_address = ep;
    2ffc:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2ffe:	2300      	movs	r3, #0
    3000:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3002:	4e0b      	ldr	r6, [pc, #44]	; (3030 <udd_ep_free+0x48>)
    3004:	0029      	movs	r1, r5
    3006:	0030      	movs	r0, r6
    3008:	4b0a      	ldr	r3, [pc, #40]	; (3034 <udd_ep_free+0x4c>)
    300a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    300c:	210f      	movs	r1, #15
    300e:	4021      	ands	r1, r4
    3010:	2200      	movs	r2, #0
    3012:	0030      	movs	r0, r6
    3014:	4b08      	ldr	r3, [pc, #32]	; (3038 <udd_ep_free+0x50>)
    3016:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3018:	2200      	movs	r2, #0
    301a:	0021      	movs	r1, r4
    301c:	0030      	movs	r0, r6
    301e:	4b07      	ldr	r3, [pc, #28]	; (303c <udd_ep_free+0x54>)
    3020:	4798      	blx	r3
}
    3022:	b002      	add	sp, #8
    3024:	bd70      	pop	{r4, r5, r6, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	000038fd 	.word	0x000038fd
    302c:	00002f89 	.word	0x00002f89
    3030:	20000670 	.word	0x20000670
    3034:	0000390d 	.word	0x0000390d
    3038:	00003735 	.word	0x00003735
    303c:	0000382d 	.word	0x0000382d

00003040 <udd_ep_alloc>:
{
    3040:	b5f0      	push	{r4, r5, r6, r7, lr}
    3042:	b083      	sub	sp, #12
    3044:	0005      	movs	r5, r0
    3046:	000f      	movs	r7, r1
    3048:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    304a:	ae01      	add	r6, sp, #4
    304c:	0030      	movs	r0, r6
    304e:	4b36      	ldr	r3, [pc, #216]	; (3128 <udd_ep_alloc+0xe8>)
    3050:	4798      	blx	r3
	config_ep.ep_address = ep;
    3052:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3054:	2c08      	cmp	r4, #8
    3056:	d813      	bhi.n	3080 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3058:	2200      	movs	r2, #0
    305a:	ab01      	add	r3, sp, #4
    305c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    305e:	0028      	movs	r0, r5
    3060:	4b32      	ldr	r3, [pc, #200]	; (312c <udd_ep_alloc+0xec>)
    3062:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3064:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3066:	2103      	movs	r1, #3
    3068:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    306a:	2901      	cmp	r1, #1
    306c:	d038      	beq.n	30e0 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    306e:	2902      	cmp	r1, #2
    3070:	d043      	beq.n	30fa <udd_ep_alloc+0xba>
		return false;
    3072:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3074:	2903      	cmp	r1, #3
    3076:	d13d      	bne.n	30f4 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3078:	2204      	movs	r2, #4
    307a:	ab01      	add	r3, sp, #4
    307c:	70da      	strb	r2, [r3, #3]
    307e:	e032      	b.n	30e6 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    3080:	2c10      	cmp	r4, #16
    3082:	d803      	bhi.n	308c <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    3084:	2201      	movs	r2, #1
    3086:	ab01      	add	r3, sp, #4
    3088:	705a      	strb	r2, [r3, #1]
    308a:	e7e8      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    308c:	2c20      	cmp	r4, #32
    308e:	d803      	bhi.n	3098 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    3090:	2202      	movs	r2, #2
    3092:	ab01      	add	r3, sp, #4
    3094:	705a      	strb	r2, [r3, #1]
    3096:	e7e2      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    3098:	2c40      	cmp	r4, #64	; 0x40
    309a:	d803      	bhi.n	30a4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    309c:	2203      	movs	r2, #3
    309e:	ab01      	add	r3, sp, #4
    30a0:	705a      	strb	r2, [r3, #1]
    30a2:	e7dc      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    30a4:	2c80      	cmp	r4, #128	; 0x80
    30a6:	d803      	bhi.n	30b0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    30a8:	2204      	movs	r2, #4
    30aa:	ab01      	add	r3, sp, #4
    30ac:	705a      	strb	r2, [r3, #1]
    30ae:	e7d6      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    30b0:	2380      	movs	r3, #128	; 0x80
    30b2:	005b      	lsls	r3, r3, #1
    30b4:	429c      	cmp	r4, r3
    30b6:	d803      	bhi.n	30c0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    30b8:	2205      	movs	r2, #5
    30ba:	ab01      	add	r3, sp, #4
    30bc:	705a      	strb	r2, [r3, #1]
    30be:	e7ce      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    30c0:	2380      	movs	r3, #128	; 0x80
    30c2:	009b      	lsls	r3, r3, #2
    30c4:	429c      	cmp	r4, r3
    30c6:	d803      	bhi.n	30d0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    30c8:	2206      	movs	r2, #6
    30ca:	ab01      	add	r3, sp, #4
    30cc:	705a      	strb	r2, [r3, #1]
    30ce:	e7c6      	b.n	305e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    30d0:	4a17      	ldr	r2, [pc, #92]	; (3130 <udd_ep_alloc+0xf0>)
		return false;
    30d2:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    30d4:	4294      	cmp	r4, r2
    30d6:	d80d      	bhi.n	30f4 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    30d8:	2207      	movs	r2, #7
    30da:	ab01      	add	r3, sp, #4
    30dc:	705a      	strb	r2, [r3, #1]
    30de:	e7be      	b.n	305e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    30e0:	2202      	movs	r2, #2
    30e2:	ab01      	add	r3, sp, #4
    30e4:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    30e6:	a901      	add	r1, sp, #4
    30e8:	4812      	ldr	r0, [pc, #72]	; (3134 <udd_ep_alloc+0xf4>)
    30ea:	4b13      	ldr	r3, [pc, #76]	; (3138 <udd_ep_alloc+0xf8>)
    30ec:	4798      	blx	r3
		return false;
    30ee:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    30f0:	2800      	cmp	r0, #0
    30f2:	d006      	beq.n	3102 <udd_ep_alloc+0xc2>
}
    30f4:	0018      	movs	r0, r3
    30f6:	b003      	add	sp, #12
    30f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    30fa:	2203      	movs	r2, #3
    30fc:	ab01      	add	r3, sp, #4
    30fe:	70da      	strb	r2, [r3, #3]
    3100:	e7f1      	b.n	30e6 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3102:	210f      	movs	r1, #15
    3104:	4029      	ands	r1, r5
    3106:	4c0b      	ldr	r4, [pc, #44]	; (3134 <udd_ep_alloc+0xf4>)
    3108:	4b0c      	ldr	r3, [pc, #48]	; (313c <udd_ep_alloc+0xfc>)
    310a:	2200      	movs	r2, #0
    310c:	0020      	movs	r0, r4
    310e:	4e0c      	ldr	r6, [pc, #48]	; (3140 <udd_ep_alloc+0x100>)
    3110:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3112:	2200      	movs	r2, #0
    3114:	0029      	movs	r1, r5
    3116:	0020      	movs	r0, r4
    3118:	4e0a      	ldr	r6, [pc, #40]	; (3144 <udd_ep_alloc+0x104>)
    311a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    311c:	2201      	movs	r2, #1
    311e:	0029      	movs	r1, r5
    3120:	0020      	movs	r0, r4
    3122:	47b0      	blx	r6
	return true;
    3124:	2301      	movs	r3, #1
    3126:	e7e5      	b.n	30f4 <udd_ep_alloc+0xb4>
    3128:	000038fd 	.word	0x000038fd
    312c:	000029ad 	.word	0x000029ad
    3130:	000003ff 	.word	0x000003ff
    3134:	20000670 	.word	0x20000670
    3138:	0000390d 	.word	0x0000390d
    313c:	000029c9 	.word	0x000029c9
    3140:	0000370d 	.word	0x0000370d
    3144:	0000375d 	.word	0x0000375d

00003148 <udd_ep_is_halted>:
{
    3148:	b510      	push	{r4, lr}
    314a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    314c:	4801      	ldr	r0, [pc, #4]	; (3154 <udd_ep_is_halted+0xc>)
    314e:	4b02      	ldr	r3, [pc, #8]	; (3158 <udd_ep_is_halted+0x10>)
    3150:	4798      	blx	r3
}
    3152:	bd10      	pop	{r4, pc}
    3154:	20000670 	.word	0x20000670
    3158:	00003b87 	.word	0x00003b87

0000315c <udd_ep_set_halt>:
{
    315c:	b510      	push	{r4, lr}
    315e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3160:	230f      	movs	r3, #15
    3162:	4003      	ands	r3, r0
		return false;
    3164:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3166:	2b03      	cmp	r3, #3
    3168:	d900      	bls.n	316c <udd_ep_set_halt+0x10>
}
    316a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    316c:	0021      	movs	r1, r4
    316e:	4804      	ldr	r0, [pc, #16]	; (3180 <udd_ep_set_halt+0x24>)
    3170:	4b04      	ldr	r3, [pc, #16]	; (3184 <udd_ep_set_halt+0x28>)
    3172:	4798      	blx	r3
	udd_ep_abort(ep);
    3174:	0020      	movs	r0, r4
    3176:	4b04      	ldr	r3, [pc, #16]	; (3188 <udd_ep_set_halt+0x2c>)
    3178:	4798      	blx	r3
	return true;
    317a:	2001      	movs	r0, #1
    317c:	e7f5      	b.n	316a <udd_ep_set_halt+0xe>
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	20000670 	.word	0x20000670
    3184:	00003bb1 	.word	0x00003bb1
    3188:	00002f89 	.word	0x00002f89

0000318c <_usb_ep0_on_tansfer_ok>:
{
    318c:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    318e:	4b34      	ldr	r3, [pc, #208]	; (3260 <_usb_ep0_on_tansfer_ok+0xd4>)
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	2b01      	cmp	r3, #1
    3194:	d00a      	beq.n	31ac <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3196:	2b02      	cmp	r3, #2
    3198:	d05f      	beq.n	325a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    319a:	4b32      	ldr	r3, [pc, #200]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    319c:	691b      	ldr	r3, [r3, #16]
    319e:	2b00      	cmp	r3, #0
    31a0:	d000      	beq.n	31a4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    31a2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    31a4:	2200      	movs	r2, #0
    31a6:	4b2e      	ldr	r3, [pc, #184]	; (3260 <_usb_ep0_on_tansfer_ok+0xd4>)
    31a8:	701a      	strb	r2, [r3, #0]
}
    31aa:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    31ac:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    31ae:	4b2d      	ldr	r3, [pc, #180]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    31b0:	899b      	ldrh	r3, [r3, #12]
    31b2:	4a2d      	ldr	r2, [pc, #180]	; (3268 <_usb_ep0_on_tansfer_ok+0xdc>)
    31b4:	8814      	ldrh	r4, [r2, #0]
    31b6:	1962      	adds	r2, r4, r5
    31b8:	4293      	cmp	r3, r2
    31ba:	da01      	bge.n	31c0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    31bc:	1b1d      	subs	r5, r3, r4
    31be:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    31c0:	4b28      	ldr	r3, [pc, #160]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    31c2:	6898      	ldr	r0, [r3, #8]
    31c4:	1900      	adds	r0, r0, r4
    31c6:	002a      	movs	r2, r5
    31c8:	4928      	ldr	r1, [pc, #160]	; (326c <_usb_ep0_on_tansfer_ok+0xe0>)
    31ca:	4b29      	ldr	r3, [pc, #164]	; (3270 <_usb_ep0_on_tansfer_ok+0xe4>)
    31cc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    31ce:	1964      	adds	r4, r4, r5
    31d0:	b2a4      	uxth	r4, r4
    31d2:	4b25      	ldr	r3, [pc, #148]	; (3268 <_usb_ep0_on_tansfer_ok+0xdc>)
    31d4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    31d6:	2d40      	cmp	r5, #64	; 0x40
    31d8:	d00a      	beq.n	31f0 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    31da:	4b22      	ldr	r3, [pc, #136]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    31dc:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    31de:	695b      	ldr	r3, [r3, #20]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d002      	beq.n	31ea <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    31e4:	4798      	blx	r3
    31e6:	2800      	cmp	r0, #0
    31e8:	d014      	beq.n	3214 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    31ea:	4b22      	ldr	r3, [pc, #136]	; (3274 <_usb_ep0_on_tansfer_ok+0xe8>)
    31ec:	4798      	blx	r3
    31ee:	e7dc      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    31f0:	4b1c      	ldr	r3, [pc, #112]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    31f2:	88da      	ldrh	r2, [r3, #6]
    31f4:	4b20      	ldr	r3, [pc, #128]	; (3278 <_usb_ep0_on_tansfer_ok+0xec>)
    31f6:	881b      	ldrh	r3, [r3, #0]
    31f8:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    31fa:	429a      	cmp	r2, r3
    31fc:	dded      	ble.n	31da <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    31fe:	4b19      	ldr	r3, [pc, #100]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    3200:	899b      	ldrh	r3, [r3, #12]
    3202:	42a3      	cmp	r3, r4
    3204:	d00c      	beq.n	3220 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3206:	2340      	movs	r3, #64	; 0x40
    3208:	4a18      	ldr	r2, [pc, #96]	; (326c <_usb_ep0_on_tansfer_ok+0xe0>)
    320a:	2100      	movs	r1, #0
    320c:	481b      	ldr	r0, [pc, #108]	; (327c <_usb_ep0_on_tansfer_ok+0xf0>)
    320e:	4c1c      	ldr	r4, [pc, #112]	; (3280 <_usb_ep0_on_tansfer_ok+0xf4>)
    3210:	47a0      	blx	r4
    3212:	e7ca      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3214:	2205      	movs	r2, #5
    3216:	4b12      	ldr	r3, [pc, #72]	; (3260 <_usb_ep0_on_tansfer_ok+0xd4>)
    3218:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    321a:	4b1a      	ldr	r3, [pc, #104]	; (3284 <_usb_ep0_on_tansfer_ok+0xf8>)
    321c:	4798      	blx	r3
    321e:	e7c4      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3220:	4b10      	ldr	r3, [pc, #64]	; (3264 <_usb_ep0_on_tansfer_ok+0xd8>)
    3222:	695b      	ldr	r3, [r3, #20]
    3224:	2b00      	cmp	r3, #0
    3226:	d00b      	beq.n	3240 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3228:	4798      	blx	r3
    322a:	2800      	cmp	r0, #0
    322c:	d00f      	beq.n	324e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    322e:	4912      	ldr	r1, [pc, #72]	; (3278 <_usb_ep0_on_tansfer_ok+0xec>)
    3230:	4a0d      	ldr	r2, [pc, #52]	; (3268 <_usb_ep0_on_tansfer_ok+0xdc>)
    3232:	880b      	ldrh	r3, [r1, #0]
    3234:	8810      	ldrh	r0, [r2, #0]
    3236:	181b      	adds	r3, r3, r0
    3238:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    323a:	2300      	movs	r3, #0
    323c:	8013      	strh	r3, [r2, #0]
    323e:	e7e2      	b.n	3206 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3240:	2205      	movs	r2, #5
    3242:	4b07      	ldr	r3, [pc, #28]	; (3260 <_usb_ep0_on_tansfer_ok+0xd4>)
    3244:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3246:	2000      	movs	r0, #0
    3248:	4b0e      	ldr	r3, [pc, #56]	; (3284 <_usb_ep0_on_tansfer_ok+0xf8>)
    324a:	4798      	blx	r3
    324c:	e7ad      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    324e:	2205      	movs	r2, #5
    3250:	4b03      	ldr	r3, [pc, #12]	; (3260 <_usb_ep0_on_tansfer_ok+0xd4>)
    3252:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3254:	4b0b      	ldr	r3, [pc, #44]	; (3284 <_usb_ep0_on_tansfer_ok+0xf8>)
    3256:	4798      	blx	r3
    3258:	e7a7      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    325a:	4b0b      	ldr	r3, [pc, #44]	; (3288 <_usb_ep0_on_tansfer_ok+0xfc>)
    325c:	4798      	blx	r3
    325e:	e7a4      	b.n	31aa <_usb_ep0_on_tansfer_ok+0x1e>
    3260:	20000352 	.word	0x20000352
    3264:	200007d8 	.word	0x200007d8
    3268:	2000034e 	.word	0x2000034e
    326c:	200007f0 	.word	0x200007f0
    3270:	000061c5 	.word	0x000061c5
    3274:	00002d25 	.word	0x00002d25
    3278:	20000350 	.word	0x20000350
    327c:	20000670 	.word	0x20000670
    3280:	00003cb1 	.word	0x00003cb1
    3284:	0000315d 	.word	0x0000315d
    3288:	00002db5 	.word	0x00002db5

0000328c <udd_ep_clear_halt>:
{
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3290:	230f      	movs	r3, #15
    3292:	4003      	ands	r3, r0
		return false;
    3294:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3296:	2b03      	cmp	r3, #3
    3298:	d900      	bls.n	329c <udd_ep_clear_halt+0x10>
}
    329a:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    329c:	0020      	movs	r0, r4
    329e:	4b09      	ldr	r3, [pc, #36]	; (32c4 <udd_ep_clear_halt+0x38>)
    32a0:	4798      	blx	r3
    32a2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    32a4:	0021      	movs	r1, r4
    32a6:	4808      	ldr	r0, [pc, #32]	; (32c8 <udd_ep_clear_halt+0x3c>)
    32a8:	4b08      	ldr	r3, [pc, #32]	; (32cc <udd_ep_clear_halt+0x40>)
    32aa:	4798      	blx	r3
	if (ptr_job->busy == true) {
    32ac:	7cab      	ldrb	r3, [r5, #18]
	return true;
    32ae:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    32b0:	07db      	lsls	r3, r3, #31
    32b2:	d5f2      	bpl.n	329a <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    32b4:	7cab      	ldrb	r3, [r5, #18]
    32b6:	2201      	movs	r2, #1
    32b8:	4393      	bics	r3, r2
    32ba:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    32bc:	682b      	ldr	r3, [r5, #0]
    32be:	4798      	blx	r3
	return true;
    32c0:	2001      	movs	r0, #1
    32c2:	e7ea      	b.n	329a <udd_ep_clear_halt+0xe>
    32c4:	000029ad 	.word	0x000029ad
    32c8:	20000670 	.word	0x20000670
    32cc:	00003bd7 	.word	0x00003bd7

000032d0 <udd_ep_run>:
{
    32d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32d2:	b087      	sub	sp, #28
    32d4:	0005      	movs	r5, r0
    32d6:	9103      	str	r1, [sp, #12]
    32d8:	9202      	str	r2, [sp, #8]
    32da:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    32dc:	260f      	movs	r6, #15
    32de:	4006      	ands	r6, r0
		return false;
    32e0:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    32e2:	2e03      	cmp	r6, #3
    32e4:	d902      	bls.n	32ec <udd_ep_run+0x1c>
}
    32e6:	0020      	movs	r0, r4
    32e8:	b007      	add	sp, #28
    32ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    32ec:	4b64      	ldr	r3, [pc, #400]	; (3480 <udd_ep_run+0x1b0>)
    32ee:	4798      	blx	r3
    32f0:	1e04      	subs	r4, r0, #0
    32f2:	d000      	beq.n	32f6 <udd_ep_run+0x26>
    32f4:	e0bd      	b.n	3472 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    32f6:	0028      	movs	r0, r5
    32f8:	4b62      	ldr	r3, [pc, #392]	; (3484 <udd_ep_run+0x1b4>)
    32fa:	4798      	blx	r3
    32fc:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3302:	425a      	negs	r2, r3
    3304:	4153      	adcs	r3, r2
    3306:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3308:	b672      	cpsid	i
    330a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    330e:	2200      	movs	r2, #0
    3310:	4b5d      	ldr	r3, [pc, #372]	; (3488 <udd_ep_run+0x1b8>)
    3312:	701a      	strb	r2, [r3, #0]
	return flags;
    3314:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3316:	7c83      	ldrb	r3, [r0, #18]
    3318:	07db      	lsls	r3, r3, #31
    331a:	d508      	bpl.n	332e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    331c:	2a00      	cmp	r2, #0
    331e:	d0e2      	beq.n	32e6 <udd_ep_run+0x16>
		cpu_irq_enable();
    3320:	2201      	movs	r2, #1
    3322:	4b59      	ldr	r3, [pc, #356]	; (3488 <udd_ep_run+0x1b8>)
    3324:	701a      	strb	r2, [r3, #0]
    3326:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    332a:	b662      	cpsie	i
    332c:	e7db      	b.n	32e6 <udd_ep_run+0x16>
	ptr_job->busy = true;
    332e:	7c83      	ldrb	r3, [r0, #18]
    3330:	2101      	movs	r1, #1
    3332:	430b      	orrs	r3, r1
    3334:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3336:	2a00      	cmp	r2, #0
    3338:	d005      	beq.n	3346 <udd_ep_run+0x76>
		cpu_irq_enable();
    333a:	2201      	movs	r2, #1
    333c:	4b52      	ldr	r3, [pc, #328]	; (3488 <udd_ep_run+0x1b8>)
    333e:	701a      	strb	r2, [r3, #0]
    3340:	f3bf 8f5f 	dmb	sy
    3344:	b662      	cpsie	i
	ptr_job->buf = buf;
    3346:	9b02      	ldr	r3, [sp, #8]
    3348:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    334e:	2300      	movs	r3, #0
    3350:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3354:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3356:	2301      	movs	r3, #1
    3358:	9a03      	ldr	r2, [sp, #12]
    335a:	4013      	ands	r3, r2
    335c:	005a      	lsls	r2, r3, #1
    335e:	7cbb      	ldrb	r3, [r7, #18]
    3360:	2102      	movs	r1, #2
    3362:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3364:	4313      	orrs	r3, r2
    3366:	2204      	movs	r2, #4
    3368:	4393      	bics	r3, r2
    336a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    336c:	b26b      	sxtb	r3, r5
    336e:	2b00      	cmp	r3, #0
    3370:	db20      	blt.n	33b4 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3372:	9b01      	ldr	r3, [sp, #4]
    3374:	2b00      	cmp	r3, #0
    3376:	d06f      	beq.n	3458 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3378:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    337a:	4b44      	ldr	r3, [pc, #272]	; (348c <udd_ep_run+0x1bc>)
    337c:	429c      	cmp	r4, r3
    337e:	d95a      	bls.n	3436 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3380:	8a39      	ldrh	r1, [r7, #16]
    3382:	001c      	movs	r4, r3
    3384:	0018      	movs	r0, r3
    3386:	4b42      	ldr	r3, [pc, #264]	; (3490 <udd_ep_run+0x1c0>)
    3388:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    338a:	1a63      	subs	r3, r4, r1
    338c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    338e:	8a3b      	ldrh	r3, [r7, #16]
    3390:	429a      	cmp	r2, r3
    3392:	d257      	bcs.n	3444 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3394:	7cba      	ldrb	r2, [r7, #18]
    3396:	2104      	movs	r1, #4
    3398:	430a      	orrs	r2, r1
    339a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    339c:	1e72      	subs	r2, r6, #1
    339e:	0192      	lsls	r2, r2, #6
    33a0:	493c      	ldr	r1, [pc, #240]	; (3494 <udd_ep_run+0x1c4>)
    33a2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    33a4:	0031      	movs	r1, r6
    33a6:	483c      	ldr	r0, [pc, #240]	; (3498 <udd_ep_run+0x1c8>)
    33a8:	4c3c      	ldr	r4, [pc, #240]	; (349c <udd_ep_run+0x1cc>)
    33aa:	47a0      	blx	r4
				return (STATUS_OK ==
    33ac:	4244      	negs	r4, r0
    33ae:	4144      	adcs	r4, r0
    33b0:	b2e4      	uxtb	r4, r4
    33b2:	e798      	b.n	32e6 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    33b4:	9b01      	ldr	r3, [sp, #4]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d027      	beq.n	340a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    33ba:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    33bc:	4b33      	ldr	r3, [pc, #204]	; (348c <udd_ep_run+0x1bc>)
    33be:	429d      	cmp	r5, r3
    33c0:	d906      	bls.n	33d0 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    33c2:	8a39      	ldrh	r1, [r7, #16]
    33c4:	001d      	movs	r5, r3
    33c6:	0018      	movs	r0, r3
    33c8:	4b31      	ldr	r3, [pc, #196]	; (3490 <udd_ep_run+0x1c0>)
    33ca:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    33cc:	1a6b      	subs	r3, r5, r1
    33ce:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    33d0:	7cbb      	ldrb	r3, [r7, #18]
    33d2:	079b      	lsls	r3, r3, #30
    33d4:	d507      	bpl.n	33e6 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    33d6:	8a39      	ldrh	r1, [r7, #16]
    33d8:	0028      	movs	r0, r5
    33da:	4b31      	ldr	r3, [pc, #196]	; (34a0 <udd_ep_run+0x1d0>)
    33dc:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    33de:	b289      	uxth	r1, r1
    33e0:	424c      	negs	r4, r1
    33e2:	414c      	adcs	r4, r1
    33e4:	b2e4      	uxtb	r4, r4
    33e6:	2001      	movs	r0, #1
    33e8:	4020      	ands	r0, r4
    33ea:	0040      	lsls	r0, r0, #1
    33ec:	7cbc      	ldrb	r4, [r7, #18]
    33ee:	2302      	movs	r3, #2
    33f0:	439c      	bics	r4, r3
    33f2:	4304      	orrs	r4, r0
    33f4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    33f6:	002b      	movs	r3, r5
    33f8:	9a02      	ldr	r2, [sp, #8]
    33fa:	0031      	movs	r1, r6
    33fc:	4826      	ldr	r0, [pc, #152]	; (3498 <udd_ep_run+0x1c8>)
    33fe:	4c29      	ldr	r4, [pc, #164]	; (34a4 <udd_ep_run+0x1d4>)
    3400:	47a0      	blx	r4
		return (STATUS_OK ==
    3402:	4244      	negs	r4, r0
    3404:	4144      	adcs	r4, r0
    3406:	b2e4      	uxtb	r4, r4
    3408:	e76d      	b.n	32e6 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    340a:	7cbb      	ldrb	r3, [r7, #18]
    340c:	079b      	lsls	r3, r3, #30
    340e:	d505      	bpl.n	341c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3410:	7cbb      	ldrb	r3, [r7, #18]
    3412:	2202      	movs	r2, #2
    3414:	4393      	bics	r3, r2
    3416:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3418:	2500      	movs	r5, #0
    341a:	e7ec      	b.n	33f6 <udd_ep_run+0x126>
			ptr_job->busy = false;
    341c:	7cbb      	ldrb	r3, [r7, #18]
    341e:	2201      	movs	r2, #1
    3420:	4393      	bics	r3, r2
    3422:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3426:	2b00      	cmp	r3, #0
    3428:	d025      	beq.n	3476 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    342a:	002a      	movs	r2, r5
    342c:	2100      	movs	r1, #0
    342e:	2000      	movs	r0, #0
    3430:	4798      	blx	r3
			return true;
    3432:	2401      	movs	r4, #1
    3434:	e757      	b.n	32e6 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3436:	8a39      	ldrh	r1, [r7, #16]
    3438:	0020      	movs	r0, r4
    343a:	4b19      	ldr	r3, [pc, #100]	; (34a0 <udd_ep_run+0x1d0>)
    343c:	4798      	blx	r3
    343e:	1a63      	subs	r3, r4, r1
    3440:	b29a      	uxth	r2, r3
    3442:	e7a4      	b.n	338e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3444:	0013      	movs	r3, r2
    3446:	9a02      	ldr	r2, [sp, #8]
    3448:	0031      	movs	r1, r6
    344a:	4813      	ldr	r0, [pc, #76]	; (3498 <udd_ep_run+0x1c8>)
    344c:	4c13      	ldr	r4, [pc, #76]	; (349c <udd_ep_run+0x1cc>)
    344e:	47a0      	blx	r4
				return (STATUS_OK ==
    3450:	4244      	negs	r4, r0
    3452:	4144      	adcs	r4, r0
    3454:	b2e4      	uxtb	r4, r4
    3456:	e746      	b.n	32e6 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3458:	7cbb      	ldrb	r3, [r7, #18]
    345a:	2201      	movs	r2, #1
    345c:	4393      	bics	r3, r2
    345e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3462:	2b00      	cmp	r3, #0
    3464:	d009      	beq.n	347a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3466:	002a      	movs	r2, r5
    3468:	2100      	movs	r1, #0
    346a:	2000      	movs	r0, #0
    346c:	4798      	blx	r3
			return true;
    346e:	2401      	movs	r4, #1
    3470:	e739      	b.n	32e6 <udd_ep_run+0x16>
		return false;
    3472:	2400      	movs	r4, #0
    3474:	e737      	b.n	32e6 <udd_ep_run+0x16>
			return true;
    3476:	2401      	movs	r4, #1
    3478:	e735      	b.n	32e6 <udd_ep_run+0x16>
			return true;
    347a:	2401      	movs	r4, #1
    347c:	e733      	b.n	32e6 <udd_ep_run+0x16>
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	00003149 	.word	0x00003149
    3484:	000029ad 	.word	0x000029ad
    3488:	2000010c 	.word	0x2000010c
    348c:	00001fff 	.word	0x00001fff
    3490:	00004e75 	.word	0x00004e75
    3494:	200005b0 	.word	0x200005b0
    3498:	20000670 	.word	0x20000670
    349c:	00003cb1 	.word	0x00003cb1
    34a0:	00004ca1 	.word	0x00004ca1
    34a4:	00003c5d 	.word	0x00003c5d

000034a8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    34a8:	4b02      	ldr	r3, [pc, #8]	; (34b4 <udd_set_address+0xc>)
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	4310      	orrs	r0, r2
    34b0:	7298      	strb	r0, [r3, #10]
}
    34b2:	4770      	bx	lr
    34b4:	20000670 	.word	0x20000670

000034b8 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    34b8:	4b02      	ldr	r3, [pc, #8]	; (34c4 <udd_getaddress+0xc>)
    34ba:	681b      	ldr	r3, [r3, #0]
    34bc:	7a98      	ldrb	r0, [r3, #10]
    34be:	0640      	lsls	r0, r0, #25
    34c0:	0e40      	lsrs	r0, r0, #25
}
    34c2:	4770      	bx	lr
    34c4:	20000670 	.word	0x20000670

000034c8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    34c8:	4b01      	ldr	r3, [pc, #4]	; (34d0 <udd_set_setup_payload+0x8>)
    34ca:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    34cc:	8199      	strh	r1, [r3, #12]
}
    34ce:	4770      	bx	lr
    34d0:	200007d8 	.word	0x200007d8

000034d4 <udd_detach>:

void udd_detach(void)
{
    34d4:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    34d6:	4b05      	ldr	r3, [pc, #20]	; (34ec <udd_detach+0x18>)
    34d8:	681a      	ldr	r2, [r3, #0]
    34da:	8913      	ldrh	r3, [r2, #8]
    34dc:	2101      	movs	r1, #1
    34de:	430b      	orrs	r3, r1
    34e0:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    34e2:	2001      	movs	r0, #1
    34e4:	4b02      	ldr	r3, [pc, #8]	; (34f0 <udd_detach+0x1c>)
    34e6:	4798      	blx	r3
}
    34e8:	bd10      	pop	{r4, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	20000670 	.word	0x20000670
    34f0:	000028ed 	.word	0x000028ed

000034f4 <udd_attach>:

void udd_attach(void)
{
    34f4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    34f6:	2003      	movs	r0, #3
    34f8:	4b16      	ldr	r3, [pc, #88]	; (3554 <udd_attach+0x60>)
    34fa:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    34fc:	4c16      	ldr	r4, [pc, #88]	; (3558 <udd_attach+0x64>)
    34fe:	6822      	ldr	r2, [r4, #0]
    3500:	8913      	ldrh	r3, [r2, #8]
    3502:	2101      	movs	r1, #1
    3504:	438b      	bics	r3, r1
    3506:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3508:	4a14      	ldr	r2, [pc, #80]	; (355c <udd_attach+0x68>)
    350a:	3103      	adds	r1, #3
    350c:	0020      	movs	r0, r4
    350e:	4e14      	ldr	r6, [pc, #80]	; (3560 <udd_attach+0x6c>)
    3510:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3512:	4a14      	ldr	r2, [pc, #80]	; (3564 <udd_attach+0x70>)
    3514:	2100      	movs	r1, #0
    3516:	0020      	movs	r0, r4
    3518:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    351a:	4a13      	ldr	r2, [pc, #76]	; (3568 <udd_attach+0x74>)
    351c:	2101      	movs	r1, #1
    351e:	0020      	movs	r0, r4
    3520:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3522:	4a12      	ldr	r2, [pc, #72]	; (356c <udd_attach+0x78>)
    3524:	2102      	movs	r1, #2
    3526:	0020      	movs	r0, r4
    3528:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    352a:	2104      	movs	r1, #4
    352c:	0020      	movs	r0, r4
    352e:	4d10      	ldr	r5, [pc, #64]	; (3570 <udd_attach+0x7c>)
    3530:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3532:	2100      	movs	r1, #0
    3534:	0020      	movs	r0, r4
    3536:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3538:	2101      	movs	r1, #1
    353a:	0020      	movs	r0, r4
    353c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    353e:	2102      	movs	r1, #2
    3540:	0020      	movs	r0, r4
    3542:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3544:	4a0b      	ldr	r2, [pc, #44]	; (3574 <udd_attach+0x80>)
    3546:	2106      	movs	r1, #6
    3548:	0020      	movs	r0, r4
    354a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    354c:	2106      	movs	r1, #6
    354e:	0020      	movs	r0, r4
    3550:	47a8      	blx	r5
#endif
}
    3552:	bd70      	pop	{r4, r5, r6, pc}
    3554:	000028ed 	.word	0x000028ed
    3558:	20000670 	.word	0x20000670
    355c:	00002f55 	.word	0x00002f55
    3560:	000036ad 	.word	0x000036ad
    3564:	00002f41 	.word	0x00002f41
    3568:	00002c75 	.word	0x00002c75
    356c:	00002c05 	.word	0x00002c05
    3570:	000036d1 	.word	0x000036d1
    3574:	00002ba9 	.word	0x00002ba9

00003578 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3578:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    357a:	2100      	movs	r1, #0
    357c:	200e      	movs	r0, #14
    357e:	4b08      	ldr	r3, [pc, #32]	; (35a0 <_uhd_vbus_handler+0x28>)
    3580:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3582:	4b08      	ldr	r3, [pc, #32]	; (35a4 <_uhd_vbus_handler+0x2c>)
    3584:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3586:	045b      	lsls	r3, r3, #17
    3588:	d406      	bmi.n	3598 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    358a:	4b07      	ldr	r3, [pc, #28]	; (35a8 <_uhd_vbus_handler+0x30>)
    358c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    358e:	2100      	movs	r1, #0
    3590:	200e      	movs	r0, #14
    3592:	4b06      	ldr	r3, [pc, #24]	; (35ac <_uhd_vbus_handler+0x34>)
    3594:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3596:	bd10      	pop	{r4, pc}
		udd_attach();
    3598:	4b05      	ldr	r3, [pc, #20]	; (35b0 <_uhd_vbus_handler+0x38>)
    359a:	4798      	blx	r3
    359c:	e7f7      	b.n	358e <_uhd_vbus_handler+0x16>
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	00001d71 	.word	0x00001d71
    35a4:	41004400 	.word	0x41004400
    35a8:	000034d5 	.word	0x000034d5
    35ac:	00001d51 	.word	0x00001d51
    35b0:	000034f5 	.word	0x000034f5

000035b4 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    35b4:	b570      	push	{r4, r5, r6, lr}
    35b6:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    35b8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    35bc:	425a      	negs	r2, r3
    35be:	4153      	adcs	r3, r2
    35c0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    35c2:	b672      	cpsid	i
    35c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    35c8:	2600      	movs	r6, #0
    35ca:	4b29      	ldr	r3, [pc, #164]	; (3670 <udd_enable+0xbc>)
    35cc:	701e      	strb	r6, [r3, #0]
	return flags;
    35ce:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    35d0:	ac05      	add	r4, sp, #20
    35d2:	0020      	movs	r0, r4
    35d4:	4b27      	ldr	r3, [pc, #156]	; (3674 <udd_enable+0xc0>)
    35d6:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    35d8:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    35da:	4e27      	ldr	r6, [pc, #156]	; (3678 <udd_enable+0xc4>)
    35dc:	0022      	movs	r2, r4
    35de:	4927      	ldr	r1, [pc, #156]	; (367c <udd_enable+0xc8>)
    35e0:	0030      	movs	r0, r6
    35e2:	4b27      	ldr	r3, [pc, #156]	; (3680 <udd_enable+0xcc>)
    35e4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    35e6:	0030      	movs	r0, r6
    35e8:	4b26      	ldr	r3, [pc, #152]	; (3684 <udd_enable+0xd0>)
    35ea:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    35ec:	4b26      	ldr	r3, [pc, #152]	; (3688 <udd_enable+0xd4>)
    35ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    35f0:	069b      	lsls	r3, r3, #26
    35f2:	d434      	bmi.n	365e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    35f4:	4924      	ldr	r1, [pc, #144]	; (3688 <udd_enable+0xd4>)
    35f6:	22d0      	movs	r2, #208	; 0xd0
    35f8:	68cb      	ldr	r3, [r1, #12]
    35fa:	4013      	ands	r3, r2
    35fc:	2bd0      	cmp	r3, #208	; 0xd0
    35fe:	d1fb      	bne.n	35f8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3600:	2001      	movs	r0, #1
    3602:	4b22      	ldr	r3, [pc, #136]	; (368c <udd_enable+0xd8>)
    3604:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3606:	ac02      	add	r4, sp, #8
    3608:	0020      	movs	r0, r4
    360a:	4b21      	ldr	r3, [pc, #132]	; (3690 <udd_enable+0xdc>)
    360c:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    360e:	230e      	movs	r3, #14
    3610:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3612:	2300      	movs	r3, #0
    3614:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3616:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3618:	3303      	adds	r3, #3
    361a:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    361c:	3b02      	subs	r3, #2
    361e:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3620:	2100      	movs	r1, #0
    3622:	200e      	movs	r0, #14
    3624:	4b1b      	ldr	r3, [pc, #108]	; (3694 <udd_enable+0xe0>)
    3626:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3628:	0021      	movs	r1, r4
    362a:	200e      	movs	r0, #14
    362c:	4b1a      	ldr	r3, [pc, #104]	; (3698 <udd_enable+0xe4>)
    362e:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3630:	2200      	movs	r2, #0
    3632:	210e      	movs	r1, #14
    3634:	4819      	ldr	r0, [pc, #100]	; (369c <udd_enable+0xe8>)
    3636:	4b1a      	ldr	r3, [pc, #104]	; (36a0 <udd_enable+0xec>)
    3638:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    363a:	2100      	movs	r1, #0
    363c:	200e      	movs	r0, #14
    363e:	4b19      	ldr	r3, [pc, #100]	; (36a4 <udd_enable+0xf0>)
    3640:	4798      	blx	r3
    3642:	4b19      	ldr	r3, [pc, #100]	; (36a8 <udd_enable+0xf4>)
    3644:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3646:	045b      	lsls	r3, r3, #17
    3648:	d40f      	bmi.n	366a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    364a:	2d00      	cmp	r5, #0
    364c:	d005      	beq.n	365a <udd_enable+0xa6>
		cpu_irq_enable();
    364e:	2201      	movs	r2, #1
    3650:	4b07      	ldr	r3, [pc, #28]	; (3670 <udd_enable+0xbc>)
    3652:	701a      	strb	r2, [r3, #0]
    3654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3658:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    365a:	b006      	add	sp, #24
    365c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    365e:	490a      	ldr	r1, [pc, #40]	; (3688 <udd_enable+0xd4>)
    3660:	2210      	movs	r2, #16
    3662:	68cb      	ldr	r3, [r1, #12]
    3664:	421a      	tst	r2, r3
    3666:	d0fc      	beq.n	3662 <udd_enable+0xae>
    3668:	e7ca      	b.n	3600 <udd_enable+0x4c>
		_uhd_vbus_handler();
    366a:	4b0c      	ldr	r3, [pc, #48]	; (369c <udd_enable+0xe8>)
    366c:	4798      	blx	r3
    366e:	e7ec      	b.n	364a <udd_enable+0x96>
    3670:	2000010c 	.word	0x2000010c
    3674:	0000430d 	.word	0x0000430d
    3678:	20000670 	.word	0x20000670
    367c:	41005000 	.word	0x41005000
    3680:	0000431d 	.word	0x0000431d
    3684:	00003d31 	.word	0x00003d31
    3688:	40000800 	.word	0x40000800
    368c:	000028ed 	.word	0x000028ed
    3690:	00001e69 	.word	0x00001e69
    3694:	00001d71 	.word	0x00001d71
    3698:	00001e7d 	.word	0x00001e7d
    369c:	00003579 	.word	0x00003579
    36a0:	00001d25 	.word	0x00001d25
    36a4:	00001d51 	.word	0x00001d51
    36a8:	41004400 	.word	0x41004400

000036ac <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    36ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    36ae:	000b      	movs	r3, r1
    36b0:	332e      	adds	r3, #46	; 0x2e
    36b2:	009b      	lsls	r3, r3, #2
    36b4:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    36b6:	22aa      	movs	r2, #170	; 0xaa
    36b8:	0052      	lsls	r2, r2, #1
    36ba:	0049      	lsls	r1, r1, #1
    36bc:	5a83      	ldrh	r3, [r0, r2]
    36be:	4c03      	ldr	r4, [pc, #12]	; (36cc <usb_device_register_callback+0x20>)
    36c0:	5b09      	ldrh	r1, [r1, r4]
    36c2:	430b      	orrs	r3, r1
    36c4:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    36c6:	2000      	movs	r0, #0
    36c8:	bd10      	pop	{r4, pc}
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	00006c5c 	.word	0x00006c5c

000036d0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    36d0:	0049      	lsls	r1, r1, #1
    36d2:	4b06      	ldr	r3, [pc, #24]	; (36ec <usb_device_enable_callback+0x1c>)
    36d4:	5acb      	ldrh	r3, [r1, r3]
    36d6:	6802      	ldr	r2, [r0, #0]
    36d8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    36da:	21ab      	movs	r1, #171	; 0xab
    36dc:	0049      	lsls	r1, r1, #1
    36de:	5a42      	ldrh	r2, [r0, r1]
    36e0:	431a      	orrs	r2, r3
    36e2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    36e4:	6802      	ldr	r2, [r0, #0]
    36e6:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    36e8:	2000      	movs	r0, #0
    36ea:	4770      	bx	lr
    36ec:	00006c5c 	.word	0x00006c5c

000036f0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    36f0:	0049      	lsls	r1, r1, #1
    36f2:	4b05      	ldr	r3, [pc, #20]	; (3708 <usb_device_disable_callback+0x18>)
    36f4:	5aca      	ldrh	r2, [r1, r3]
    36f6:	21ab      	movs	r1, #171	; 0xab
    36f8:	0049      	lsls	r1, r1, #1
    36fa:	5a43      	ldrh	r3, [r0, r1]
    36fc:	4393      	bics	r3, r2
    36fe:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3700:	6803      	ldr	r3, [r0, #0]
    3702:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3704:	2000      	movs	r0, #0
    3706:	4770      	bx	lr
    3708:	00006c5c 	.word	0x00006c5c

0000370c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    370c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    370e:	008c      	lsls	r4, r1, #2
    3710:	18a4      	adds	r4, r4, r2
    3712:	3434      	adds	r4, #52	; 0x34
    3714:	00a4      	lsls	r4, r4, #2
    3716:	1904      	adds	r4, r0, r4
    3718:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    371a:	1840      	adds	r0, r0, r1
    371c:	3059      	adds	r0, #89	; 0x59
    371e:	30ff      	adds	r0, #255	; 0xff
    3720:	7803      	ldrb	r3, [r0, #0]
    3722:	4903      	ldr	r1, [pc, #12]	; (3730 <usb_device_endpoint_register_callback+0x24>)
    3724:	5c8a      	ldrb	r2, [r1, r2]
    3726:	4313      	orrs	r3, r2
    3728:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    372a:	2000      	movs	r0, #0
    372c:	bd10      	pop	{r4, pc}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	00006c6c 	.word	0x00006c6c

00003734 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3734:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3736:	008b      	lsls	r3, r1, #2
    3738:	189b      	adds	r3, r3, r2
    373a:	3334      	adds	r3, #52	; 0x34
    373c:	009b      	lsls	r3, r3, #2
    373e:	18c3      	adds	r3, r0, r3
    3740:	2400      	movs	r4, #0
    3742:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3744:	1840      	adds	r0, r0, r1
    3746:	3059      	adds	r0, #89	; 0x59
    3748:	30ff      	adds	r0, #255	; 0xff
    374a:	4b03      	ldr	r3, [pc, #12]	; (3758 <usb_device_endpoint_unregister_callback+0x24>)
    374c:	5c9a      	ldrb	r2, [r3, r2]
    374e:	7803      	ldrb	r3, [r0, #0]
    3750:	4393      	bics	r3, r2
    3752:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3754:	2000      	movs	r0, #0
    3756:	bd10      	pop	{r4, pc}
    3758:	00006c6c 	.word	0x00006c6c

0000375c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    375c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    375e:	230f      	movs	r3, #15
    3760:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3762:	18c4      	adds	r4, r0, r3
    3764:	3461      	adds	r4, #97	; 0x61
    3766:	34ff      	adds	r4, #255	; 0xff
    3768:	7825      	ldrb	r5, [r4, #0]
    376a:	4e2f      	ldr	r6, [pc, #188]	; (3828 <usb_device_endpoint_enable_callback+0xcc>)
    376c:	5cb6      	ldrb	r6, [r6, r2]
    376e:	4335      	orrs	r5, r6
    3770:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3772:	2a00      	cmp	r2, #0
    3774:	d129      	bne.n	37ca <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3776:	2b00      	cmp	r3, #0
    3778:	d112      	bne.n	37a0 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    377a:	2503      	movs	r5, #3
    377c:	240a      	movs	r4, #10
    377e:	34ff      	adds	r4, #255	; 0xff
    3780:	6806      	ldr	r6, [r0, #0]
    3782:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3784:	2a03      	cmp	r2, #3
    3786:	d109      	bne.n	379c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3788:	b249      	sxtb	r1, r1
    378a:	2900      	cmp	r1, #0
    378c:	db44      	blt.n	3818 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    378e:	6802      	ldr	r2, [r0, #0]
    3790:	015b      	lsls	r3, r3, #5
    3792:	18d3      	adds	r3, r2, r3
    3794:	330a      	adds	r3, #10
    3796:	33ff      	adds	r3, #255	; 0xff
    3798:	2220      	movs	r2, #32
    379a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    379c:	2000      	movs	r0, #0
    379e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    37a0:	b24c      	sxtb	r4, r1
    37a2:	2c00      	cmp	r4, #0
    37a4:	db08      	blt.n	37b8 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    37a6:	015c      	lsls	r4, r3, #5
    37a8:	6805      	ldr	r5, [r0, #0]
    37aa:	46ac      	mov	ip, r5
    37ac:	4464      	add	r4, ip
    37ae:	340a      	adds	r4, #10
    37b0:	34ff      	adds	r4, #255	; 0xff
    37b2:	2501      	movs	r5, #1
    37b4:	7025      	strb	r5, [r4, #0]
    37b6:	e7e5      	b.n	3784 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    37b8:	015c      	lsls	r4, r3, #5
    37ba:	6805      	ldr	r5, [r0, #0]
    37bc:	46ac      	mov	ip, r5
    37be:	4464      	add	r4, ip
    37c0:	340a      	adds	r4, #10
    37c2:	34ff      	adds	r4, #255	; 0xff
    37c4:	2502      	movs	r5, #2
    37c6:	7025      	strb	r5, [r4, #0]
    37c8:	e7dc      	b.n	3784 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    37ca:	2a01      	cmp	r2, #1
    37cc:	d11a      	bne.n	3804 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    37ce:	2b00      	cmp	r3, #0
    37d0:	d105      	bne.n	37de <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    37d2:	6802      	ldr	r2, [r0, #0]
    37d4:	210c      	movs	r1, #12
    37d6:	230a      	movs	r3, #10
    37d8:	33ff      	adds	r3, #255	; 0xff
    37da:	54d1      	strb	r1, [r2, r3]
    37dc:	e7de      	b.n	379c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    37de:	b249      	sxtb	r1, r1
    37e0:	2900      	cmp	r1, #0
    37e2:	db07      	blt.n	37f4 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    37e4:	6802      	ldr	r2, [r0, #0]
    37e6:	015b      	lsls	r3, r3, #5
    37e8:	18d3      	adds	r3, r2, r3
    37ea:	330a      	adds	r3, #10
    37ec:	33ff      	adds	r3, #255	; 0xff
    37ee:	2204      	movs	r2, #4
    37f0:	701a      	strb	r2, [r3, #0]
    37f2:	e7d3      	b.n	379c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    37f4:	6802      	ldr	r2, [r0, #0]
    37f6:	015b      	lsls	r3, r3, #5
    37f8:	18d3      	adds	r3, r2, r3
    37fa:	330a      	adds	r3, #10
    37fc:	33ff      	adds	r3, #255	; 0xff
    37fe:	2208      	movs	r2, #8
    3800:	701a      	strb	r2, [r3, #0]
    3802:	e7cb      	b.n	379c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3804:	2a02      	cmp	r2, #2
    3806:	d1bd      	bne.n	3784 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3808:	6802      	ldr	r2, [r0, #0]
    380a:	015b      	lsls	r3, r3, #5
    380c:	18d3      	adds	r3, r2, r3
    380e:	330a      	adds	r3, #10
    3810:	33ff      	adds	r3, #255	; 0xff
    3812:	2210      	movs	r2, #16
    3814:	701a      	strb	r2, [r3, #0]
    3816:	e7c1      	b.n	379c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3818:	6802      	ldr	r2, [r0, #0]
    381a:	015b      	lsls	r3, r3, #5
    381c:	18d3      	adds	r3, r2, r3
    381e:	330a      	adds	r3, #10
    3820:	33ff      	adds	r3, #255	; 0xff
    3822:	2240      	movs	r2, #64	; 0x40
    3824:	701a      	strb	r2, [r3, #0]
    3826:	e7b9      	b.n	379c <usb_device_endpoint_enable_callback+0x40>
    3828:	00006c6c 	.word	0x00006c6c

0000382c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    382c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    382e:	230f      	movs	r3, #15
    3830:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3832:	18c4      	adds	r4, r0, r3
    3834:	3461      	adds	r4, #97	; 0x61
    3836:	34ff      	adds	r4, #255	; 0xff
    3838:	4d2f      	ldr	r5, [pc, #188]	; (38f8 <usb_device_endpoint_disable_callback+0xcc>)
    383a:	5cae      	ldrb	r6, [r5, r2]
    383c:	7825      	ldrb	r5, [r4, #0]
    383e:	43b5      	bics	r5, r6
    3840:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3842:	2a00      	cmp	r2, #0
    3844:	d129      	bne.n	389a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3846:	2b00      	cmp	r3, #0
    3848:	d112      	bne.n	3870 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    384a:	2503      	movs	r5, #3
    384c:	2484      	movs	r4, #132	; 0x84
    384e:	0064      	lsls	r4, r4, #1
    3850:	6806      	ldr	r6, [r0, #0]
    3852:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3854:	2a03      	cmp	r2, #3
    3856:	d109      	bne.n	386c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3858:	b249      	sxtb	r1, r1
    385a:	2900      	cmp	r1, #0
    385c:	db44      	blt.n	38e8 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    385e:	6802      	ldr	r2, [r0, #0]
    3860:	015b      	lsls	r3, r3, #5
    3862:	18d3      	adds	r3, r2, r3
    3864:	3309      	adds	r3, #9
    3866:	33ff      	adds	r3, #255	; 0xff
    3868:	2220      	movs	r2, #32
    386a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    386c:	2000      	movs	r0, #0
    386e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3870:	b24c      	sxtb	r4, r1
    3872:	2c00      	cmp	r4, #0
    3874:	db08      	blt.n	3888 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3876:	015c      	lsls	r4, r3, #5
    3878:	6805      	ldr	r5, [r0, #0]
    387a:	46ac      	mov	ip, r5
    387c:	4464      	add	r4, ip
    387e:	3409      	adds	r4, #9
    3880:	34ff      	adds	r4, #255	; 0xff
    3882:	2501      	movs	r5, #1
    3884:	7025      	strb	r5, [r4, #0]
    3886:	e7e5      	b.n	3854 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3888:	015c      	lsls	r4, r3, #5
    388a:	6805      	ldr	r5, [r0, #0]
    388c:	46ac      	mov	ip, r5
    388e:	4464      	add	r4, ip
    3890:	3409      	adds	r4, #9
    3892:	34ff      	adds	r4, #255	; 0xff
    3894:	2502      	movs	r5, #2
    3896:	7025      	strb	r5, [r4, #0]
    3898:	e7dc      	b.n	3854 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    389a:	2a01      	cmp	r2, #1
    389c:	d11a      	bne.n	38d4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    389e:	2b00      	cmp	r3, #0
    38a0:	d105      	bne.n	38ae <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    38a2:	6802      	ldr	r2, [r0, #0]
    38a4:	210c      	movs	r1, #12
    38a6:	3309      	adds	r3, #9
    38a8:	33ff      	adds	r3, #255	; 0xff
    38aa:	54d1      	strb	r1, [r2, r3]
    38ac:	e7de      	b.n	386c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    38ae:	b249      	sxtb	r1, r1
    38b0:	2900      	cmp	r1, #0
    38b2:	db07      	blt.n	38c4 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    38b4:	6802      	ldr	r2, [r0, #0]
    38b6:	015b      	lsls	r3, r3, #5
    38b8:	18d3      	adds	r3, r2, r3
    38ba:	3309      	adds	r3, #9
    38bc:	33ff      	adds	r3, #255	; 0xff
    38be:	2204      	movs	r2, #4
    38c0:	701a      	strb	r2, [r3, #0]
    38c2:	e7d3      	b.n	386c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    38c4:	6802      	ldr	r2, [r0, #0]
    38c6:	015b      	lsls	r3, r3, #5
    38c8:	18d3      	adds	r3, r2, r3
    38ca:	3309      	adds	r3, #9
    38cc:	33ff      	adds	r3, #255	; 0xff
    38ce:	2208      	movs	r2, #8
    38d0:	701a      	strb	r2, [r3, #0]
    38d2:	e7cb      	b.n	386c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    38d4:	2a02      	cmp	r2, #2
    38d6:	d1bd      	bne.n	3854 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    38d8:	6802      	ldr	r2, [r0, #0]
    38da:	015b      	lsls	r3, r3, #5
    38dc:	18d3      	adds	r3, r2, r3
    38de:	3309      	adds	r3, #9
    38e0:	33ff      	adds	r3, #255	; 0xff
    38e2:	2210      	movs	r2, #16
    38e4:	701a      	strb	r2, [r3, #0]
    38e6:	e7c1      	b.n	386c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    38e8:	6802      	ldr	r2, [r0, #0]
    38ea:	015b      	lsls	r3, r3, #5
    38ec:	18d3      	adds	r3, r2, r3
    38ee:	3309      	adds	r3, #9
    38f0:	33ff      	adds	r3, #255	; 0xff
    38f2:	2240      	movs	r2, #64	; 0x40
    38f4:	701a      	strb	r2, [r3, #0]
    38f6:	e7b9      	b.n	386c <usb_device_endpoint_disable_callback+0x40>
    38f8:	00006c6c 	.word	0x00006c6c

000038fc <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    38fc:	2300      	movs	r3, #0
    38fe:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3900:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3902:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3904:	3301      	adds	r3, #1
    3906:	70c3      	strb	r3, [r0, #3]
}
    3908:	4770      	bx	lr
	...

0000390c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    390c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    390e:	780c      	ldrb	r4, [r1, #0]
    3910:	230f      	movs	r3, #15
    3912:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3914:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3916:	78ca      	ldrb	r2, [r1, #3]
    3918:	2a04      	cmp	r2, #4
    391a:	d870      	bhi.n	39fe <usb_device_endpoint_set_config+0xf2>
    391c:	0092      	lsls	r2, r2, #2
    391e:	4d89      	ldr	r5, [pc, #548]	; (3b44 <usb_device_endpoint_set_config+0x238>)
    3920:	58aa      	ldr	r2, [r5, r2]
    3922:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3924:	6802      	ldr	r2, [r0, #0]
    3926:	3308      	adds	r3, #8
    3928:	015b      	lsls	r3, r3, #5
    392a:	2100      	movs	r1, #0
    392c:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    392e:	2200      	movs	r2, #0
    3930:	e082      	b.n	3a38 <usb_device_endpoint_set_config+0x12c>
    3932:	015c      	lsls	r4, r3, #5
    3934:	6802      	ldr	r2, [r0, #0]
    3936:	4694      	mov	ip, r2
    3938:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    393a:	2280      	movs	r2, #128	; 0x80
    393c:	0052      	lsls	r2, r2, #1
    393e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3940:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3942:	076d      	lsls	r5, r5, #29
    3944:	d178      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3946:	32e4      	adds	r2, #228	; 0xe4
    3948:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    394a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    394c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    394e:	422e      	tst	r6, r5
    3950:	d172      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3952:	3d5f      	subs	r5, #95	; 0x5f
    3954:	32e4      	adds	r2, #228	; 0xe4
    3956:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3958:	001a      	movs	r2, r3
    395a:	3208      	adds	r2, #8
    395c:	0152      	lsls	r2, r2, #5
    395e:	6804      	ldr	r4, [r0, #0]
    3960:	18a4      	adds	r4, r4, r2
    3962:	352f      	adds	r5, #47	; 0x2f
    3964:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3966:	6800      	ldr	r0, [r0, #0]
    3968:	1882      	adds	r2, r0, r2
    396a:	2080      	movs	r0, #128	; 0x80
    396c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    396e:	788a      	ldrb	r2, [r1, #2]
    3970:	2a00      	cmp	r2, #0
    3972:	d01f      	beq.n	39b4 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3974:	0158      	lsls	r0, r3, #5
    3976:	4a74      	ldr	r2, [pc, #464]	; (3b48 <usb_device_endpoint_set_config+0x23c>)
    3978:	1812      	adds	r2, r2, r0
    397a:	6854      	ldr	r4, [r2, #4]
    397c:	2080      	movs	r0, #128	; 0x80
    397e:	0600      	lsls	r0, r0, #24
    3980:	4304      	orrs	r4, r0
    3982:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3984:	6954      	ldr	r4, [r2, #20]
    3986:	4320      	orrs	r0, r4
    3988:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    398a:	2507      	movs	r5, #7
    398c:	784c      	ldrb	r4, [r1, #1]
    398e:	015a      	lsls	r2, r3, #5
    3990:	4b6d      	ldr	r3, [pc, #436]	; (3b48 <usb_device_endpoint_set_config+0x23c>)
    3992:	189b      	adds	r3, r3, r2
    3994:	6858      	ldr	r0, [r3, #4]
    3996:	402c      	ands	r4, r5
    3998:	0724      	lsls	r4, r4, #28
    399a:	4e6c      	ldr	r6, [pc, #432]	; (3b4c <usb_device_endpoint_set_config+0x240>)
    399c:	4030      	ands	r0, r6
    399e:	4320      	orrs	r0, r4
    39a0:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    39a2:	7849      	ldrb	r1, [r1, #1]
    39a4:	695a      	ldr	r2, [r3, #20]
    39a6:	4029      	ands	r1, r5
    39a8:	0709      	lsls	r1, r1, #28
    39aa:	4032      	ands	r2, r6
    39ac:	430a      	orrs	r2, r1
    39ae:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    39b0:	2200      	movs	r2, #0
    39b2:	e041      	b.n	3a38 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    39b4:	0158      	lsls	r0, r3, #5
    39b6:	4a64      	ldr	r2, [pc, #400]	; (3b48 <usb_device_endpoint_set_config+0x23c>)
    39b8:	1812      	adds	r2, r2, r0
    39ba:	6850      	ldr	r0, [r2, #4]
    39bc:	0040      	lsls	r0, r0, #1
    39be:	0840      	lsrs	r0, r0, #1
    39c0:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    39c2:	6950      	ldr	r0, [r2, #20]
    39c4:	0040      	lsls	r0, r0, #1
    39c6:	0840      	lsrs	r0, r0, #1
    39c8:	6150      	str	r0, [r2, #20]
    39ca:	e7de      	b.n	398a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    39cc:	2c00      	cmp	r4, #0
    39ce:	db35      	blt.n	3a3c <usb_device_endpoint_set_config+0x130>
    39d0:	015d      	lsls	r5, r3, #5
    39d2:	6802      	ldr	r2, [r0, #0]
    39d4:	4694      	mov	ip, r2
    39d6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    39d8:	2280      	movs	r2, #128	; 0x80
    39da:	0052      	lsls	r2, r2, #1
    39dc:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    39de:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    39e0:	0776      	lsls	r6, r6, #29
    39e2:	d129      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    39e4:	2680      	movs	r6, #128	; 0x80
    39e6:	0076      	lsls	r6, r6, #1
    39e8:	5daa      	ldrb	r2, [r5, r6]
    39ea:	2702      	movs	r7, #2
    39ec:	433a      	orrs	r2, r7
    39ee:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    39f0:	6802      	ldr	r2, [r0, #0]
    39f2:	0018      	movs	r0, r3
    39f4:	3008      	adds	r0, #8
    39f6:	0140      	lsls	r0, r0, #5
    39f8:	1812      	adds	r2, r2, r0
    39fa:	2040      	movs	r0, #64	; 0x40
    39fc:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    39fe:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a00:	784f      	ldrb	r7, [r1, #1]
    3a02:	005d      	lsls	r5, r3, #1
    3a04:	18ad      	adds	r5, r5, r2
    3a06:	012d      	lsls	r5, r5, #4
    3a08:	4e4f      	ldr	r6, [pc, #316]	; (3b48 <usb_device_endpoint_set_config+0x23c>)
    3a0a:	1975      	adds	r5, r6, r5
    3a0c:	6868      	ldr	r0, [r5, #4]
    3a0e:	2407      	movs	r4, #7
    3a10:	403c      	ands	r4, r7
    3a12:	0724      	lsls	r4, r4, #28
    3a14:	4e4d      	ldr	r6, [pc, #308]	; (3b4c <usb_device_endpoint_set_config+0x240>)
    3a16:	4030      	ands	r0, r6
    3a18:	4320      	orrs	r0, r4
    3a1a:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3a1c:	7889      	ldrb	r1, [r1, #2]
    3a1e:	2900      	cmp	r1, #0
    3a20:	d000      	beq.n	3a24 <usb_device_endpoint_set_config+0x118>
    3a22:	e088      	b.n	3b36 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a24:	005b      	lsls	r3, r3, #1
    3a26:	189b      	adds	r3, r3, r2
    3a28:	011b      	lsls	r3, r3, #4
    3a2a:	4a47      	ldr	r2, [pc, #284]	; (3b48 <usb_device_endpoint_set_config+0x23c>)
    3a2c:	18d3      	adds	r3, r2, r3
    3a2e:	685a      	ldr	r2, [r3, #4]
    3a30:	0052      	lsls	r2, r2, #1
    3a32:	0852      	lsrs	r2, r2, #1
    3a34:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3a36:	2200      	movs	r2, #0
}
    3a38:	0010      	movs	r0, r2
    3a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a3c:	015d      	lsls	r5, r3, #5
    3a3e:	6802      	ldr	r2, [r0, #0]
    3a40:	4694      	mov	ip, r2
    3a42:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3a44:	2280      	movs	r2, #128	; 0x80
    3a46:	0052      	lsls	r2, r2, #1
    3a48:	5caf      	ldrb	r7, [r5, r2]
    3a4a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3a4c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3a4e:	4237      	tst	r7, r6
    3a50:	d1f2      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3a52:	3690      	adds	r6, #144	; 0x90
    3a54:	5daa      	ldrb	r2, [r5, r6]
    3a56:	2720      	movs	r7, #32
    3a58:	433a      	orrs	r2, r7
    3a5a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3a5c:	6802      	ldr	r2, [r0, #0]
    3a5e:	0018      	movs	r0, r3
    3a60:	3008      	adds	r0, #8
    3a62:	0140      	lsls	r0, r0, #5
    3a64:	1812      	adds	r2, r2, r0
    3a66:	2080      	movs	r0, #128	; 0x80
    3a68:	7110      	strb	r0, [r2, #4]
    3a6a:	e7c8      	b.n	39fe <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3a6c:	2c00      	cmp	r4, #0
    3a6e:	db17      	blt.n	3aa0 <usb_device_endpoint_set_config+0x194>
    3a70:	015d      	lsls	r5, r3, #5
    3a72:	6802      	ldr	r2, [r0, #0]
    3a74:	4694      	mov	ip, r2
    3a76:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3a78:	2280      	movs	r2, #128	; 0x80
    3a7a:	0052      	lsls	r2, r2, #1
    3a7c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3a7e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3a80:	0776      	lsls	r6, r6, #29
    3a82:	d1d9      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3a84:	2680      	movs	r6, #128	; 0x80
    3a86:	0076      	lsls	r6, r6, #1
    3a88:	5daa      	ldrb	r2, [r5, r6]
    3a8a:	2703      	movs	r7, #3
    3a8c:	433a      	orrs	r2, r7
    3a8e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3a90:	6802      	ldr	r2, [r0, #0]
    3a92:	0018      	movs	r0, r3
    3a94:	3008      	adds	r0, #8
    3a96:	0140      	lsls	r0, r0, #5
    3a98:	1812      	adds	r2, r2, r0
    3a9a:	2040      	movs	r0, #64	; 0x40
    3a9c:	7150      	strb	r0, [r2, #5]
    3a9e:	e7ae      	b.n	39fe <usb_device_endpoint_set_config+0xf2>
    3aa0:	015d      	lsls	r5, r3, #5
    3aa2:	6802      	ldr	r2, [r0, #0]
    3aa4:	4694      	mov	ip, r2
    3aa6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3aa8:	2280      	movs	r2, #128	; 0x80
    3aaa:	0052      	lsls	r2, r2, #1
    3aac:	5caf      	ldrb	r7, [r5, r2]
    3aae:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3ab0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3ab2:	4237      	tst	r7, r6
    3ab4:	d1c0      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3ab6:	3690      	adds	r6, #144	; 0x90
    3ab8:	5daa      	ldrb	r2, [r5, r6]
    3aba:	2730      	movs	r7, #48	; 0x30
    3abc:	433a      	orrs	r2, r7
    3abe:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3ac0:	6802      	ldr	r2, [r0, #0]
    3ac2:	0018      	movs	r0, r3
    3ac4:	3008      	adds	r0, #8
    3ac6:	0140      	lsls	r0, r0, #5
    3ac8:	1812      	adds	r2, r2, r0
    3aca:	2080      	movs	r0, #128	; 0x80
    3acc:	7110      	strb	r0, [r2, #4]
    3ace:	e796      	b.n	39fe <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3ad0:	2c00      	cmp	r4, #0
    3ad2:	db17      	blt.n	3b04 <usb_device_endpoint_set_config+0x1f8>
    3ad4:	015d      	lsls	r5, r3, #5
    3ad6:	6802      	ldr	r2, [r0, #0]
    3ad8:	4694      	mov	ip, r2
    3ada:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3adc:	2280      	movs	r2, #128	; 0x80
    3ade:	0052      	lsls	r2, r2, #1
    3ae0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3ae2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3ae4:	0776      	lsls	r6, r6, #29
    3ae6:	d1a7      	bne.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3ae8:	2680      	movs	r6, #128	; 0x80
    3aea:	0076      	lsls	r6, r6, #1
    3aec:	5daa      	ldrb	r2, [r5, r6]
    3aee:	2704      	movs	r7, #4
    3af0:	433a      	orrs	r2, r7
    3af2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3af4:	6802      	ldr	r2, [r0, #0]
    3af6:	0018      	movs	r0, r3
    3af8:	3008      	adds	r0, #8
    3afa:	0140      	lsls	r0, r0, #5
    3afc:	1812      	adds	r2, r2, r0
    3afe:	2040      	movs	r0, #64	; 0x40
    3b00:	7150      	strb	r0, [r2, #5]
    3b02:	e77c      	b.n	39fe <usb_device_endpoint_set_config+0xf2>
    3b04:	015d      	lsls	r5, r3, #5
    3b06:	6802      	ldr	r2, [r0, #0]
    3b08:	4694      	mov	ip, r2
    3b0a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b0c:	2280      	movs	r2, #128	; 0x80
    3b0e:	0052      	lsls	r2, r2, #1
    3b10:	5caf      	ldrb	r7, [r5, r2]
    3b12:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b14:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b16:	4237      	tst	r7, r6
    3b18:	d000      	beq.n	3b1c <usb_device_endpoint_set_config+0x210>
    3b1a:	e78d      	b.n	3a38 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3b1c:	3690      	adds	r6, #144	; 0x90
    3b1e:	5daa      	ldrb	r2, [r5, r6]
    3b20:	2740      	movs	r7, #64	; 0x40
    3b22:	433a      	orrs	r2, r7
    3b24:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b26:	6802      	ldr	r2, [r0, #0]
    3b28:	0018      	movs	r0, r3
    3b2a:	3008      	adds	r0, #8
    3b2c:	0140      	lsls	r0, r0, #5
    3b2e:	1812      	adds	r2, r2, r0
    3b30:	2080      	movs	r0, #128	; 0x80
    3b32:	7110      	strb	r0, [r2, #4]
    3b34:	e763      	b.n	39fe <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3b36:	6869      	ldr	r1, [r5, #4]
    3b38:	2380      	movs	r3, #128	; 0x80
    3b3a:	061b      	lsls	r3, r3, #24
    3b3c:	430b      	orrs	r3, r1
    3b3e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3b40:	2200      	movs	r2, #0
    3b42:	e779      	b.n	3a38 <usb_device_endpoint_set_config+0x12c>
    3b44:	00006c48 	.word	0x00006c48
    3b48:	20000830 	.word	0x20000830
    3b4c:	8fffffff 	.word	0x8fffffff

00003b50 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3b50:	230f      	movs	r3, #15
    3b52:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3b54:	b249      	sxtb	r1, r1
    3b56:	2900      	cmp	r1, #0
    3b58:	db0a      	blt.n	3b70 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3b5a:	3308      	adds	r3, #8
    3b5c:	015b      	lsls	r3, r3, #5
    3b5e:	6802      	ldr	r2, [r0, #0]
    3b60:	18d2      	adds	r2, r2, r3
    3b62:	2140      	movs	r1, #64	; 0x40
    3b64:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3b66:	6802      	ldr	r2, [r0, #0]
    3b68:	18d3      	adds	r3, r2, r3
    3b6a:	2201      	movs	r2, #1
    3b6c:	71da      	strb	r2, [r3, #7]
	}
}
    3b6e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b70:	3308      	adds	r3, #8
    3b72:	015b      	lsls	r3, r3, #5
    3b74:	6802      	ldr	r2, [r0, #0]
    3b76:	18d2      	adds	r2, r2, r3
    3b78:	2180      	movs	r1, #128	; 0x80
    3b7a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3b7c:	6802      	ldr	r2, [r0, #0]
    3b7e:	18d3      	adds	r3, r2, r3
    3b80:	2202      	movs	r2, #2
    3b82:	71da      	strb	r2, [r3, #7]
    3b84:	e7f3      	b.n	3b6e <usb_device_endpoint_abort_job+0x1e>

00003b86 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3b86:	230f      	movs	r3, #15
    3b88:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3b8a:	b249      	sxtb	r1, r1
    3b8c:	2900      	cmp	r1, #0
    3b8e:	db07      	blt.n	3ba0 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3b90:	6802      	ldr	r2, [r0, #0]
    3b92:	3308      	adds	r3, #8
    3b94:	015b      	lsls	r3, r3, #5
    3b96:	18d3      	adds	r3, r2, r3
    3b98:	7998      	ldrb	r0, [r3, #6]
    3b9a:	06c0      	lsls	r0, r0, #27
    3b9c:	0fc0      	lsrs	r0, r0, #31
	}
}
    3b9e:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    3ba0:	6802      	ldr	r2, [r0, #0]
    3ba2:	3308      	adds	r3, #8
    3ba4:	015b      	lsls	r3, r3, #5
    3ba6:	18d3      	adds	r3, r2, r3
    3ba8:	7998      	ldrb	r0, [r3, #6]
    3baa:	0680      	lsls	r0, r0, #26
    3bac:	0fc0      	lsrs	r0, r0, #31
    3bae:	e7f6      	b.n	3b9e <usb_device_endpoint_is_halted+0x18>

00003bb0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3bb0:	230f      	movs	r3, #15
    3bb2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3bb4:	b249      	sxtb	r1, r1
    3bb6:	2900      	cmp	r1, #0
    3bb8:	db06      	blt.n	3bc8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3bba:	6802      	ldr	r2, [r0, #0]
    3bbc:	3308      	adds	r3, #8
    3bbe:	015b      	lsls	r3, r3, #5
    3bc0:	18d3      	adds	r3, r2, r3
    3bc2:	2210      	movs	r2, #16
    3bc4:	715a      	strb	r2, [r3, #5]
	}
}
    3bc6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3bc8:	6802      	ldr	r2, [r0, #0]
    3bca:	3308      	adds	r3, #8
    3bcc:	015b      	lsls	r3, r3, #5
    3bce:	18d3      	adds	r3, r2, r3
    3bd0:	2220      	movs	r2, #32
    3bd2:	715a      	strb	r2, [r3, #5]
    3bd4:	e7f7      	b.n	3bc6 <usb_device_endpoint_set_halt+0x16>

00003bd6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3bd6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3bd8:	230f      	movs	r3, #15
    3bda:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3bdc:	b249      	sxtb	r1, r1
    3bde:	2900      	cmp	r1, #0
    3be0:	db1d      	blt.n	3c1e <usb_device_endpoint_clear_halt+0x48>
    3be2:	0159      	lsls	r1, r3, #5
    3be4:	6802      	ldr	r2, [r0, #0]
    3be6:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3be8:	2483      	movs	r4, #131	; 0x83
    3bea:	0064      	lsls	r4, r4, #1
    3bec:	5d14      	ldrb	r4, [r2, r4]
    3bee:	06e4      	lsls	r4, r4, #27
    3bf0:	d514      	bpl.n	3c1c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    3bf2:	2510      	movs	r5, #16
    3bf4:	2482      	movs	r4, #130	; 0x82
    3bf6:	0064      	lsls	r4, r4, #1
    3bf8:	5515      	strb	r5, [r2, r4]
    3bfa:	6802      	ldr	r2, [r0, #0]
    3bfc:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3bfe:	2108      	movs	r1, #8
    3c00:	31ff      	adds	r1, #255	; 0xff
    3c02:	5c51      	ldrb	r1, [r2, r1]
    3c04:	0689      	lsls	r1, r1, #26
    3c06:	d509      	bpl.n	3c1c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3c08:	3ce4      	subs	r4, #228	; 0xe4
    3c0a:	2108      	movs	r1, #8
    3c0c:	31ff      	adds	r1, #255	; 0xff
    3c0e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3c10:	6802      	ldr	r2, [r0, #0]
    3c12:	3308      	adds	r3, #8
    3c14:	015b      	lsls	r3, r3, #5
    3c16:	18d3      	adds	r3, r2, r3
    3c18:	2201      	movs	r2, #1
    3c1a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3c1c:	bd30      	pop	{r4, r5, pc}
    3c1e:	0159      	lsls	r1, r3, #5
    3c20:	6802      	ldr	r2, [r0, #0]
    3c22:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3c24:	2483      	movs	r4, #131	; 0x83
    3c26:	0064      	lsls	r4, r4, #1
    3c28:	5d14      	ldrb	r4, [r2, r4]
    3c2a:	06a4      	lsls	r4, r4, #26
    3c2c:	d5f6      	bpl.n	3c1c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3c2e:	2520      	movs	r5, #32
    3c30:	2482      	movs	r4, #130	; 0x82
    3c32:	0064      	lsls	r4, r4, #1
    3c34:	5515      	strb	r5, [r2, r4]
    3c36:	6802      	ldr	r2, [r0, #0]
    3c38:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3c3a:	2108      	movs	r1, #8
    3c3c:	31ff      	adds	r1, #255	; 0xff
    3c3e:	5c51      	ldrb	r1, [r2, r1]
    3c40:	0649      	lsls	r1, r1, #25
    3c42:	d5eb      	bpl.n	3c1c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3c44:	3cc4      	subs	r4, #196	; 0xc4
    3c46:	2108      	movs	r1, #8
    3c48:	31ff      	adds	r1, #255	; 0xff
    3c4a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3c4c:	6802      	ldr	r2, [r0, #0]
    3c4e:	3308      	adds	r3, #8
    3c50:	015b      	lsls	r3, r3, #5
    3c52:	18d3      	adds	r3, r2, r3
    3c54:	2202      	movs	r2, #2
    3c56:	711a      	strb	r2, [r3, #4]
    3c58:	e7e0      	b.n	3c1c <usb_device_endpoint_clear_halt+0x46>
	...

00003c5c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3c5c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3c5e:	000c      	movs	r4, r1
    3c60:	3408      	adds	r4, #8
    3c62:	0164      	lsls	r4, r4, #5
    3c64:	6805      	ldr	r5, [r0, #0]
    3c66:	5d64      	ldrb	r4, [r4, r5]
    3c68:	0664      	lsls	r4, r4, #25
    3c6a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3c6c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3c6e:	2c00      	cmp	r4, #0
    3c70:	d101      	bne.n	3c76 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3c72:	0028      	movs	r0, r5
    3c74:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3c76:	014c      	lsls	r4, r1, #5
    3c78:	4d0b      	ldr	r5, [pc, #44]	; (3ca8 <usb_device_endpoint_write_buffer_job+0x4c>)
    3c7a:	192d      	adds	r5, r5, r4
    3c7c:	002c      	movs	r4, r5
    3c7e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3c80:	696a      	ldr	r2, [r5, #20]
    3c82:	4d0a      	ldr	r5, [pc, #40]	; (3cac <usb_device_endpoint_write_buffer_job+0x50>)
    3c84:	402a      	ands	r2, r5
    3c86:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3c88:	6962      	ldr	r2, [r4, #20]
    3c8a:	049b      	lsls	r3, r3, #18
    3c8c:	0c9b      	lsrs	r3, r3, #18
    3c8e:	0b92      	lsrs	r2, r2, #14
    3c90:	0392      	lsls	r2, r2, #14
    3c92:	4313      	orrs	r3, r2
    3c94:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3c96:	6803      	ldr	r3, [r0, #0]
    3c98:	3108      	adds	r1, #8
    3c9a:	0149      	lsls	r1, r1, #5
    3c9c:	1859      	adds	r1, r3, r1
    3c9e:	2380      	movs	r3, #128	; 0x80
    3ca0:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    3ca2:	2500      	movs	r5, #0
    3ca4:	e7e5      	b.n	3c72 <usb_device_endpoint_write_buffer_job+0x16>
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	20000830 	.word	0x20000830
    3cac:	f0003fff 	.word	0xf0003fff

00003cb0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3cb0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3cb2:	000c      	movs	r4, r1
    3cb4:	3408      	adds	r4, #8
    3cb6:	0164      	lsls	r4, r4, #5
    3cb8:	6805      	ldr	r5, [r0, #0]
    3cba:	5d64      	ldrb	r4, [r4, r5]
    3cbc:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3cbe:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3cc0:	2c00      	cmp	r4, #0
    3cc2:	d101      	bne.n	3cc8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3cc4:	0028      	movs	r0, r5
    3cc6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3cc8:	4c0b      	ldr	r4, [pc, #44]	; (3cf8 <usb_device_endpoint_read_buffer_job+0x48>)
    3cca:	014d      	lsls	r5, r1, #5
    3ccc:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3cce:	1962      	adds	r2, r4, r5
    3cd0:	6854      	ldr	r4, [r2, #4]
    3cd2:	049b      	lsls	r3, r3, #18
    3cd4:	091b      	lsrs	r3, r3, #4
    3cd6:	4d09      	ldr	r5, [pc, #36]	; (3cfc <usb_device_endpoint_read_buffer_job+0x4c>)
    3cd8:	402c      	ands	r4, r5
    3cda:	4323      	orrs	r3, r4
    3cdc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3cde:	6853      	ldr	r3, [r2, #4]
    3ce0:	0b9b      	lsrs	r3, r3, #14
    3ce2:	039b      	lsls	r3, r3, #14
    3ce4:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3ce6:	6803      	ldr	r3, [r0, #0]
    3ce8:	3108      	adds	r1, #8
    3cea:	0149      	lsls	r1, r1, #5
    3cec:	1859      	adds	r1, r3, r1
    3cee:	2340      	movs	r3, #64	; 0x40
    3cf0:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3cf2:	2500      	movs	r5, #0
    3cf4:	e7e6      	b.n	3cc4 <usb_device_endpoint_read_buffer_job+0x14>
    3cf6:	46c0      	nop			; (mov r8, r8)
    3cf8:	20000830 	.word	0x20000830
    3cfc:	f0003fff 	.word	0xf0003fff

00003d00 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3d00:	4b09      	ldr	r3, [pc, #36]	; (3d28 <usb_device_endpoint_setup_buffer_job+0x28>)
    3d02:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3d04:	685a      	ldr	r2, [r3, #4]
    3d06:	4909      	ldr	r1, [pc, #36]	; (3d2c <usb_device_endpoint_setup_buffer_job+0x2c>)
    3d08:	4011      	ands	r1, r2
    3d0a:	2280      	movs	r2, #128	; 0x80
    3d0c:	0292      	lsls	r2, r2, #10
    3d0e:	430a      	orrs	r2, r1
    3d10:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3d12:	685a      	ldr	r2, [r3, #4]
    3d14:	0b92      	lsrs	r2, r2, #14
    3d16:	0392      	lsls	r2, r2, #14
    3d18:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3d1a:	6802      	ldr	r2, [r0, #0]
    3d1c:	2140      	movs	r1, #64	; 0x40
    3d1e:	2382      	movs	r3, #130	; 0x82
    3d20:	005b      	lsls	r3, r3, #1
    3d22:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3d24:	2000      	movs	r0, #0
    3d26:	4770      	bx	lr
    3d28:	20000830 	.word	0x20000830
    3d2c:	f0003fff 	.word	0xf0003fff

00003d30 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3d30:	6802      	ldr	r2, [r0, #0]
    3d32:	7813      	ldrb	r3, [r2, #0]
    3d34:	2102      	movs	r1, #2
    3d36:	430b      	orrs	r3, r1
    3d38:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3d3a:	6802      	ldr	r2, [r0, #0]
    3d3c:	7893      	ldrb	r3, [r2, #2]
    3d3e:	2b02      	cmp	r3, #2
    3d40:	d0fc      	beq.n	3d3c <usb_enable+0xc>
}
    3d42:	4770      	bx	lr

00003d44 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d46:	46de      	mov	lr, fp
    3d48:	4657      	mov	r7, sl
    3d4a:	464e      	mov	r6, r9
    3d4c:	4645      	mov	r5, r8
    3d4e:	b5e0      	push	{r5, r6, r7, lr}
    3d50:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3d52:	4bc2      	ldr	r3, [pc, #776]	; (405c <USB_Handler+0x318>)
    3d54:	681f      	ldr	r7, [r3, #0]
    3d56:	683d      	ldr	r5, [r7, #0]
    3d58:	782b      	ldrb	r3, [r5, #0]
    3d5a:	09db      	lsrs	r3, r3, #7
    3d5c:	d114      	bne.n	3d88 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3d5e:	8c2e      	ldrh	r6, [r5, #32]
    3d60:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3d62:	2e00      	cmp	r6, #0
    3d64:	d000      	beq.n	3d68 <USB_Handler+0x24>
    3d66:	e1a9      	b.n	40bc <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3d68:	8bae      	ldrh	r6, [r5, #28]
    3d6a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3d6c:	23ab      	movs	r3, #171	; 0xab
    3d6e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3d70:	5afb      	ldrh	r3, [r7, r3]
    3d72:	22aa      	movs	r2, #170	; 0xaa
    3d74:	0052      	lsls	r2, r2, #1
    3d76:	5abd      	ldrh	r5, [r7, r2]
    3d78:	401d      	ands	r5, r3
    3d7a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3d7c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3d7e:	4fb8      	ldr	r7, [pc, #736]	; (4060 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3d80:	4bb6      	ldr	r3, [pc, #728]	; (405c <USB_Handler+0x318>)
    3d82:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3d84:	4698      	mov	r8, r3
    3d86:	e184      	b.n	4092 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3d88:	8c2b      	ldrh	r3, [r5, #32]
    3d8a:	b29b      	uxth	r3, r3
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d100      	bne.n	3d92 <USB_Handler+0x4e>
    3d90:	e0de      	b.n	3f50 <USB_Handler+0x20c>
    3d92:	8c28      	ldrh	r0, [r5, #32]
    3d94:	b280      	uxth	r0, r0
    3d96:	4bb3      	ldr	r3, [pc, #716]	; (4064 <USB_Handler+0x320>)
    3d98:	4798      	blx	r3
    3d9a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3d9c:	281f      	cmp	r0, #31
    3d9e:	d900      	bls.n	3da2 <USB_Handler+0x5e>
    3da0:	e0d6      	b.n	3f50 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3da2:	0003      	movs	r3, r0
    3da4:	3308      	adds	r3, #8
    3da6:	015b      	lsls	r3, r3, #5
    3da8:	18ed      	adds	r5, r5, r3
    3daa:	79ed      	ldrb	r5, [r5, #7]
    3dac:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3dae:	07ab      	lsls	r3, r5, #30
    3db0:	d041      	beq.n	3e36 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3db2:	4aad      	ldr	r2, [pc, #692]	; (4068 <USB_Handler+0x324>)
    3db4:	2301      	movs	r3, #1
    3db6:	4083      	lsls	r3, r0
    3db8:	6811      	ldr	r1, [r2, #0]
    3dba:	4399      	bics	r1, r3
    3dbc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3dbe:	0003      	movs	r3, r0
    3dc0:	3308      	adds	r3, #8
    3dc2:	015b      	lsls	r3, r3, #5
    3dc4:	683a      	ldr	r2, [r7, #0]
    3dc6:	4694      	mov	ip, r2
    3dc8:	4463      	add	r3, ip
    3dca:	2203      	movs	r2, #3
    3dcc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3dce:	183b      	adds	r3, r7, r0
    3dd0:	33ae      	adds	r3, #174	; 0xae
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	07db      	lsls	r3, r3, #31
    3dd6:	d52e      	bpl.n	3e36 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3dd8:	4ba4      	ldr	r3, [pc, #656]	; (406c <USB_Handler+0x328>)
    3dda:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3ddc:	683a      	ldr	r2, [r7, #0]
    3dde:	0003      	movs	r3, r0
    3de0:	3308      	adds	r3, #8
    3de2:	015b      	lsls	r3, r3, #5
    3de4:	5c9b      	ldrb	r3, [r3, r2]
    3de6:	079b      	lsls	r3, r3, #30
    3de8:	0f9b      	lsrs	r3, r3, #30
    3dea:	2b01      	cmp	r3, #1
    3dec:	d100      	bne.n	3df0 <USB_Handler+0xac>
    3dee:	e081      	b.n	3ef4 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3df0:	0142      	lsls	r2, r0, #5
    3df2:	4b9f      	ldr	r3, [pc, #636]	; (4070 <USB_Handler+0x32c>)
    3df4:	189b      	adds	r3, r3, r2
    3df6:	685a      	ldr	r2, [r3, #4]
    3df8:	0112      	lsls	r2, r2, #4
    3dfa:	0c92      	lsrs	r2, r2, #18
    3dfc:	b290      	uxth	r0, r2
    3dfe:	499b      	ldr	r1, [pc, #620]	; (406c <USB_Handler+0x328>)
    3e00:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3e02:	685a      	ldr	r2, [r3, #4]
    3e04:	0492      	lsls	r2, r2, #18
    3e06:	0c92      	lsrs	r2, r2, #18
    3e08:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3e0a:	685a      	ldr	r2, [r3, #4]
    3e0c:	4999      	ldr	r1, [pc, #612]	; (4074 <USB_Handler+0x330>)
    3e0e:	400a      	ands	r2, r1
    3e10:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3e12:	2800      	cmp	r0, #0
    3e14:	d107      	bne.n	3e26 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3e16:	0162      	lsls	r2, r4, #5
    3e18:	4b95      	ldr	r3, [pc, #596]	; (4070 <USB_Handler+0x32c>)
    3e1a:	189b      	adds	r3, r3, r2
    3e1c:	685b      	ldr	r3, [r3, #4]
    3e1e:	049b      	lsls	r3, r3, #18
    3e20:	0c9b      	lsrs	r3, r3, #18
    3e22:	4a92      	ldr	r2, [pc, #584]	; (406c <USB_Handler+0x328>)
    3e24:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3e26:	4b8d      	ldr	r3, [pc, #564]	; (405c <USB_Handler+0x318>)
    3e28:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3e2a:	1ca3      	adds	r3, r4, #2
    3e2c:	011b      	lsls	r3, r3, #4
    3e2e:	18c3      	adds	r3, r0, r3
    3e30:	685b      	ldr	r3, [r3, #4]
    3e32:	498e      	ldr	r1, [pc, #568]	; (406c <USB_Handler+0x328>)
    3e34:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3e36:	076b      	lsls	r3, r5, #29
    3e38:	d50e      	bpl.n	3e58 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e3a:	4a8b      	ldr	r2, [pc, #556]	; (4068 <USB_Handler+0x324>)
    3e3c:	2301      	movs	r3, #1
    3e3e:	40a3      	lsls	r3, r4
    3e40:	6811      	ldr	r1, [r2, #0]
    3e42:	4399      	bics	r1, r3
    3e44:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3e46:	4b85      	ldr	r3, [pc, #532]	; (405c <USB_Handler+0x318>)
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	681b      	ldr	r3, [r3, #0]
    3e4c:	0022      	movs	r2, r4
    3e4e:	3208      	adds	r2, #8
    3e50:	0152      	lsls	r2, r2, #5
    3e52:	189b      	adds	r3, r3, r2
    3e54:	2204      	movs	r2, #4
    3e56:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3e58:	072b      	lsls	r3, r5, #28
    3e5a:	d514      	bpl.n	3e86 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e5c:	4a82      	ldr	r2, [pc, #520]	; (4068 <USB_Handler+0x324>)
    3e5e:	2301      	movs	r3, #1
    3e60:	40a3      	lsls	r3, r4
    3e62:	6811      	ldr	r1, [r2, #0]
    3e64:	4399      	bics	r1, r3
    3e66:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3e68:	4b7c      	ldr	r3, [pc, #496]	; (405c <USB_Handler+0x318>)
    3e6a:	6818      	ldr	r0, [r3, #0]
    3e6c:	0023      	movs	r3, r4
    3e6e:	3308      	adds	r3, #8
    3e70:	015b      	lsls	r3, r3, #5
    3e72:	6802      	ldr	r2, [r0, #0]
    3e74:	4694      	mov	ip, r2
    3e76:	4463      	add	r3, ip
    3e78:	2208      	movs	r2, #8
    3e7a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3e7c:	1903      	adds	r3, r0, r4
    3e7e:	33ae      	adds	r3, #174	; 0xae
    3e80:	781b      	ldrb	r3, [r3, #0]
    3e82:	079b      	lsls	r3, r3, #30
    3e84:	d447      	bmi.n	3f16 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3e86:	06eb      	lsls	r3, r5, #27
    3e88:	d514      	bpl.n	3eb4 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e8a:	4a77      	ldr	r2, [pc, #476]	; (4068 <USB_Handler+0x324>)
    3e8c:	2301      	movs	r3, #1
    3e8e:	40a3      	lsls	r3, r4
    3e90:	6811      	ldr	r1, [r2, #0]
    3e92:	4399      	bics	r1, r3
    3e94:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3e96:	4b71      	ldr	r3, [pc, #452]	; (405c <USB_Handler+0x318>)
    3e98:	6818      	ldr	r0, [r3, #0]
    3e9a:	0023      	movs	r3, r4
    3e9c:	3308      	adds	r3, #8
    3e9e:	015b      	lsls	r3, r3, #5
    3ea0:	6802      	ldr	r2, [r0, #0]
    3ea2:	4694      	mov	ip, r2
    3ea4:	4463      	add	r3, ip
    3ea6:	2210      	movs	r2, #16
    3ea8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3eaa:	1903      	adds	r3, r0, r4
    3eac:	33ae      	adds	r3, #174	; 0xae
    3eae:	781b      	ldrb	r3, [r3, #0]
    3eb0:	075b      	lsls	r3, r3, #29
    3eb2:	d43e      	bmi.n	3f32 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3eb4:	06ab      	lsls	r3, r5, #26
    3eb6:	d400      	bmi.n	3eba <USB_Handler+0x176>
    3eb8:	e0b0      	b.n	401c <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3eba:	4a6b      	ldr	r2, [pc, #428]	; (4068 <USB_Handler+0x324>)
    3ebc:	2301      	movs	r3, #1
    3ebe:	40a3      	lsls	r3, r4
    3ec0:	6811      	ldr	r1, [r2, #0]
    3ec2:	4399      	bics	r1, r3
    3ec4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ec6:	4b65      	ldr	r3, [pc, #404]	; (405c <USB_Handler+0x318>)
    3ec8:	6818      	ldr	r0, [r3, #0]
    3eca:	0023      	movs	r3, r4
    3ecc:	3308      	adds	r3, #8
    3ece:	015b      	lsls	r3, r3, #5
    3ed0:	6802      	ldr	r2, [r0, #0]
    3ed2:	4694      	mov	ip, r2
    3ed4:	4463      	add	r3, ip
    3ed6:	2220      	movs	r2, #32
    3ed8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3eda:	1903      	adds	r3, r0, r4
    3edc:	33ae      	adds	r3, #174	; 0xae
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	071b      	lsls	r3, r3, #28
    3ee2:	d400      	bmi.n	3ee6 <USB_Handler+0x1a2>
    3ee4:	e09a      	b.n	401c <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    3ee6:	4961      	ldr	r1, [pc, #388]	; (406c <USB_Handler+0x328>)
    3ee8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3eea:	0124      	lsls	r4, r4, #4
    3eec:	1904      	adds	r4, r0, r4
    3eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3ef0:	4798      	blx	r3
    3ef2:	e093      	b.n	401c <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3ef4:	0142      	lsls	r2, r0, #5
    3ef6:	4b5e      	ldr	r3, [pc, #376]	; (4070 <USB_Handler+0x32c>)
    3ef8:	189b      	adds	r3, r3, r2
    3efa:	685a      	ldr	r2, [r3, #4]
    3efc:	0492      	lsls	r2, r2, #18
    3efe:	0c92      	lsrs	r2, r2, #18
    3f00:	495a      	ldr	r1, [pc, #360]	; (406c <USB_Handler+0x328>)
    3f02:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3f04:	685a      	ldr	r2, [r3, #4]
    3f06:	0112      	lsls	r2, r2, #4
    3f08:	0c92      	lsrs	r2, r2, #18
    3f0a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3f0c:	685a      	ldr	r2, [r3, #4]
    3f0e:	0b92      	lsrs	r2, r2, #14
    3f10:	0392      	lsls	r2, r2, #14
    3f12:	605a      	str	r2, [r3, #4]
    3f14:	e787      	b.n	3e26 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    3f16:	4955      	ldr	r1, [pc, #340]	; (406c <USB_Handler+0x328>)
    3f18:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3f1a:	0162      	lsls	r2, r4, #5
    3f1c:	4b54      	ldr	r3, [pc, #336]	; (4070 <USB_Handler+0x32c>)
    3f1e:	189b      	adds	r3, r3, r2
    3f20:	89db      	ldrh	r3, [r3, #14]
    3f22:	221f      	movs	r2, #31
    3f24:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3f26:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3f28:	0123      	lsls	r3, r4, #4
    3f2a:	18c3      	adds	r3, r0, r3
    3f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f2e:	4798      	blx	r3
    3f30:	e7a9      	b.n	3e86 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    3f32:	494e      	ldr	r1, [pc, #312]	; (406c <USB_Handler+0x328>)
    3f34:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3f36:	0162      	lsls	r2, r4, #5
    3f38:	4b4d      	ldr	r3, [pc, #308]	; (4070 <USB_Handler+0x32c>)
    3f3a:	189b      	adds	r3, r3, r2
    3f3c:	685b      	ldr	r3, [r3, #4]
    3f3e:	011b      	lsls	r3, r3, #4
    3f40:	0c9b      	lsrs	r3, r3, #18
    3f42:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3f44:	0123      	lsls	r3, r4, #4
    3f46:	18c3      	adds	r3, r0, r3
    3f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f4a:	2100      	movs	r1, #0
    3f4c:	4798      	blx	r3
    3f4e:	e7b1      	b.n	3eb4 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3f50:	8bac      	ldrh	r4, [r5, #28]
    3f52:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3f54:	0763      	lsls	r3, r4, #29
    3f56:	d505      	bpl.n	3f64 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3f58:	2304      	movs	r3, #4
    3f5a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3f5c:	33a1      	adds	r3, #161	; 0xa1
    3f5e:	5cfb      	ldrb	r3, [r7, r3]
    3f60:	07db      	lsls	r3, r3, #31
    3f62:	d462      	bmi.n	402a <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    3f64:	0723      	lsls	r3, r4, #28
    3f66:	d50b      	bpl.n	3f80 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    3f68:	2200      	movs	r2, #0
    3f6a:	4b3f      	ldr	r3, [pc, #252]	; (4068 <USB_Handler+0x324>)
    3f6c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3f6e:	4b3b      	ldr	r3, [pc, #236]	; (405c <USB_Handler+0x318>)
    3f70:	6818      	ldr	r0, [r3, #0]
    3f72:	2308      	movs	r3, #8
    3f74:	6802      	ldr	r2, [r0, #0]
    3f76:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3f78:	339d      	adds	r3, #157	; 0x9d
    3f7a:	5cc3      	ldrb	r3, [r0, r3]
    3f7c:	079b      	lsls	r3, r3, #30
    3f7e:	d458      	bmi.n	4032 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3f80:	0663      	lsls	r3, r4, #25
    3f82:	d508      	bpl.n	3f96 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3f84:	4b35      	ldr	r3, [pc, #212]	; (405c <USB_Handler+0x318>)
    3f86:	6818      	ldr	r0, [r3, #0]
    3f88:	2340      	movs	r3, #64	; 0x40
    3f8a:	6802      	ldr	r2, [r0, #0]
    3f8c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3f8e:	3365      	adds	r3, #101	; 0x65
    3f90:	5cc3      	ldrb	r3, [r0, r3]
    3f92:	06db      	lsls	r3, r3, #27
    3f94:	d450      	bmi.n	4038 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3f96:	06a3      	lsls	r3, r4, #26
    3f98:	d508      	bpl.n	3fac <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3f9a:	4b30      	ldr	r3, [pc, #192]	; (405c <USB_Handler+0x318>)
    3f9c:	6818      	ldr	r0, [r3, #0]
    3f9e:	2320      	movs	r3, #32
    3fa0:	6802      	ldr	r2, [r0, #0]
    3fa2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3fa4:	3385      	adds	r3, #133	; 0x85
    3fa6:	5cc3      	ldrb	r3, [r0, r3]
    3fa8:	071b      	lsls	r3, r3, #28
    3faa:	d448      	bmi.n	403e <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3fac:	06e3      	lsls	r3, r4, #27
    3fae:	d508      	bpl.n	3fc2 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3fb0:	4b2a      	ldr	r3, [pc, #168]	; (405c <USB_Handler+0x318>)
    3fb2:	6818      	ldr	r0, [r3, #0]
    3fb4:	2310      	movs	r3, #16
    3fb6:	6802      	ldr	r2, [r0, #0]
    3fb8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3fba:	3395      	adds	r3, #149	; 0x95
    3fbc:	5cc3      	ldrb	r3, [r0, r3]
    3fbe:	075b      	lsls	r3, r3, #29
    3fc0:	d440      	bmi.n	4044 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3fc2:	0623      	lsls	r3, r4, #24
    3fc4:	d50b      	bpl.n	3fde <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    3fc6:	2200      	movs	r2, #0
    3fc8:	4b27      	ldr	r3, [pc, #156]	; (4068 <USB_Handler+0x324>)
    3fca:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3fcc:	4b23      	ldr	r3, [pc, #140]	; (405c <USB_Handler+0x318>)
    3fce:	6818      	ldr	r0, [r3, #0]
    3fd0:	2380      	movs	r3, #128	; 0x80
    3fd2:	6802      	ldr	r2, [r0, #0]
    3fd4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3fd6:	3325      	adds	r3, #37	; 0x25
    3fd8:	5cc3      	ldrb	r3, [r0, r3]
    3fda:	069b      	lsls	r3, r3, #26
    3fdc:	d435      	bmi.n	404a <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3fde:	05e3      	lsls	r3, r4, #23
    3fe0:	d50c      	bpl.n	3ffc <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    3fe2:	2200      	movs	r2, #0
    3fe4:	4b20      	ldr	r3, [pc, #128]	; (4068 <USB_Handler+0x324>)
    3fe6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3fe8:	4b1c      	ldr	r3, [pc, #112]	; (405c <USB_Handler+0x318>)
    3fea:	6818      	ldr	r0, [r3, #0]
    3fec:	2380      	movs	r3, #128	; 0x80
    3fee:	005b      	lsls	r3, r3, #1
    3ff0:	6802      	ldr	r2, [r0, #0]
    3ff2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3ff4:	3b5b      	subs	r3, #91	; 0x5b
    3ff6:	5cc3      	ldrb	r3, [r0, r3]
    3ff8:	065b      	lsls	r3, r3, #25
    3ffa:	d429      	bmi.n	4050 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3ffc:	05a3      	lsls	r3, r4, #22
    3ffe:	d50d      	bpl.n	401c <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4000:	2200      	movs	r2, #0
    4002:	4b19      	ldr	r3, [pc, #100]	; (4068 <USB_Handler+0x324>)
    4004:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4006:	4b15      	ldr	r3, [pc, #84]	; (405c <USB_Handler+0x318>)
    4008:	6818      	ldr	r0, [r3, #0]
    400a:	2380      	movs	r3, #128	; 0x80
    400c:	009b      	lsls	r3, r3, #2
    400e:	6802      	ldr	r2, [r0, #0]
    4010:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4012:	3b5c      	subs	r3, #92	; 0x5c
    4014:	3bff      	subs	r3, #255	; 0xff
    4016:	5cc3      	ldrb	r3, [r0, r3]
    4018:	2b7f      	cmp	r3, #127	; 0x7f
    401a:	d81c      	bhi.n	4056 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    401c:	b003      	add	sp, #12
    401e:	bc3c      	pop	{r2, r3, r4, r5}
    4020:	4690      	mov	r8, r2
    4022:	4699      	mov	r9, r3
    4024:	46a2      	mov	sl, r4
    4026:	46ab      	mov	fp, r5
    4028:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	0038      	movs	r0, r7
    402e:	4798      	blx	r3
    4030:	e798      	b.n	3f64 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4032:	6883      	ldr	r3, [r0, #8]
    4034:	4798      	blx	r3
    4036:	e7a3      	b.n	3f80 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4038:	6943      	ldr	r3, [r0, #20]
    403a:	4798      	blx	r3
    403c:	e7ab      	b.n	3f96 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    403e:	6903      	ldr	r3, [r0, #16]
    4040:	4798      	blx	r3
    4042:	e7b3      	b.n	3fac <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4044:	68c3      	ldr	r3, [r0, #12]
    4046:	4798      	blx	r3
    4048:	e7bb      	b.n	3fc2 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    404a:	6983      	ldr	r3, [r0, #24]
    404c:	4798      	blx	r3
    404e:	e7c6      	b.n	3fde <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4050:	69c3      	ldr	r3, [r0, #28]
    4052:	4798      	blx	r3
    4054:	e7d2      	b.n	3ffc <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4056:	6a03      	ldr	r3, [r0, #32]
    4058:	4798      	blx	r3
    405a:	e7df      	b.n	401c <USB_Handler+0x2d8>
    405c:	200003d0 	.word	0x200003d0
    4060:	00006c5c 	.word	0x00006c5c
    4064:	00004ebd 	.word	0x00004ebd
    4068:	200003e0 	.word	0x200003e0
    406c:	200003e4 	.word	0x200003e4
    4070:	20000830 	.word	0x20000830
    4074:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4078:	0023      	movs	r3, r4
    407a:	332e      	adds	r3, #46	; 0x2e
    407c:	009b      	lsls	r3, r3, #2
    407e:	4642      	mov	r2, r8
    4080:	6812      	ldr	r2, [r2, #0]
    4082:	589b      	ldr	r3, [r3, r2]
    4084:	499e      	ldr	r1, [pc, #632]	; (4300 <USB_Handler+0x5bc>)
    4086:	4642      	mov	r2, r8
    4088:	6810      	ldr	r0, [r2, #0]
    408a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    408c:	3401      	adds	r4, #1
    408e:	2c07      	cmp	r4, #7
    4090:	d0c4      	beq.n	401c <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    4092:	0063      	lsls	r3, r4, #1
    4094:	5bdb      	ldrh	r3, [r3, r7]
    4096:	4233      	tst	r3, r6
    4098:	d003      	beq.n	40a2 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    409a:	464a      	mov	r2, r9
    409c:	6812      	ldr	r2, [r2, #0]
    409e:	6812      	ldr	r2, [r2, #0]
    40a0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    40a2:	422b      	tst	r3, r5
    40a4:	d0f2      	beq.n	408c <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    40a6:	2c06      	cmp	r4, #6
    40a8:	d1e6      	bne.n	4078 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    40aa:	4b96      	ldr	r3, [pc, #600]	; (4304 <USB_Handler+0x5c0>)
    40ac:	891b      	ldrh	r3, [r3, #8]
    40ae:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    40b0:	2280      	movs	r2, #128	; 0x80
    40b2:	0052      	lsls	r2, r2, #1
    40b4:	4013      	ands	r3, r2
    40b6:	4a92      	ldr	r2, [pc, #584]	; (4300 <USB_Handler+0x5bc>)
    40b8:	6013      	str	r3, [r2, #0]
    40ba:	e7dd      	b.n	4078 <USB_Handler+0x334>
    40bc:	003c      	movs	r4, r7
    40be:	3459      	adds	r4, #89	; 0x59
    40c0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    40c2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    40c4:	2201      	movs	r2, #1
    40c6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    40c8:	325f      	adds	r2, #95	; 0x5f
    40ca:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    40cc:	3a50      	subs	r2, #80	; 0x50
    40ce:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    40d0:	3a0d      	subs	r2, #13
    40d2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    40d4:	46b8      	mov	r8, r7
    40d6:	002f      	movs	r7, r5
    40d8:	e0b9      	b.n	424e <USB_Handler+0x50a>
    40da:	002a      	movs	r2, r5
    40dc:	003d      	movs	r5, r7
    40de:	4647      	mov	r7, r8
    40e0:	4690      	mov	r8, r2
    40e2:	015b      	lsls	r3, r3, #5
    40e4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    40e6:	2308      	movs	r3, #8
    40e8:	33ff      	adds	r3, #255	; 0xff
    40ea:	5ceb      	ldrb	r3, [r5, r3]
    40ec:	065b      	lsls	r3, r3, #25
    40ee:	d516      	bpl.n	411e <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    40f0:	2240      	movs	r2, #64	; 0x40
    40f2:	2308      	movs	r3, #8
    40f4:	33ff      	adds	r3, #255	; 0xff
    40f6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    40f8:	3b88      	subs	r3, #136	; 0x88
    40fa:	3bff      	subs	r3, #255	; 0xff
    40fc:	4642      	mov	r2, r8
    40fe:	4313      	orrs	r3, r2
    4100:	4a81      	ldr	r2, [pc, #516]	; (4308 <USB_Handler+0x5c4>)
    4102:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4104:	2360      	movs	r3, #96	; 0x60
    4106:	420b      	tst	r3, r1
    4108:	d100      	bne.n	410c <USB_Handler+0x3c8>
    410a:	e787      	b.n	401c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    410c:	9b01      	ldr	r3, [sp, #4]
    410e:	011b      	lsls	r3, r3, #4
    4110:	18fb      	adds	r3, r7, r3
    4112:	33e0      	adds	r3, #224	; 0xe0
    4114:	681b      	ldr	r3, [r3, #0]
    4116:	497c      	ldr	r1, [pc, #496]	; (4308 <USB_Handler+0x5c4>)
    4118:	0038      	movs	r0, r7
    411a:	4798      	blx	r3
    411c:	e77e      	b.n	401c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    411e:	2308      	movs	r3, #8
    4120:	33ff      	adds	r3, #255	; 0xff
    4122:	5ceb      	ldrb	r3, [r5, r3]
    4124:	069b      	lsls	r3, r3, #26
    4126:	d5ed      	bpl.n	4104 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4128:	2220      	movs	r2, #32
    412a:	2308      	movs	r3, #8
    412c:	33ff      	adds	r3, #255	; 0xff
    412e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4130:	4b75      	ldr	r3, [pc, #468]	; (4308 <USB_Handler+0x5c4>)
    4132:	4642      	mov	r2, r8
    4134:	719a      	strb	r2, [r3, #6]
    4136:	e7e5      	b.n	4104 <USB_Handler+0x3c0>
    4138:	003d      	movs	r5, r7
    413a:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    413c:	9a01      	ldr	r2, [sp, #4]
    413e:	0013      	movs	r3, r2
    4140:	3308      	adds	r3, #8
    4142:	015b      	lsls	r3, r3, #5
    4144:	18ed      	adds	r5, r5, r3
    4146:	2310      	movs	r3, #16
    4148:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    414a:	18bb      	adds	r3, r7, r2
    414c:	3361      	adds	r3, #97	; 0x61
    414e:	33ff      	adds	r3, #255	; 0xff
    4150:	781b      	ldrb	r3, [r3, #0]
    4152:	06db      	lsls	r3, r3, #27
    4154:	d400      	bmi.n	4158 <USB_Handler+0x414>
    4156:	e761      	b.n	401c <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4158:	0010      	movs	r0, r2
    415a:	0152      	lsls	r2, r2, #5
    415c:	4b69      	ldr	r3, [pc, #420]	; (4304 <USB_Handler+0x5c0>)
    415e:	189b      	adds	r3, r3, r2
    4160:	685b      	ldr	r3, [r3, #4]
    4162:	049b      	lsls	r3, r3, #18
    4164:	0c9b      	lsrs	r3, r3, #18
    4166:	4968      	ldr	r1, [pc, #416]	; (4308 <USB_Handler+0x5c4>)
    4168:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    416a:	0103      	lsls	r3, r0, #4
    416c:	18fb      	adds	r3, r7, r3
    416e:	33dc      	adds	r3, #220	; 0xdc
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	4640      	mov	r0, r8
    4174:	4798      	blx	r3
    4176:	e751      	b.n	401c <USB_Handler+0x2d8>
    4178:	002a      	movs	r2, r5
    417a:	003d      	movs	r5, r7
    417c:	4647      	mov	r7, r8
    417e:	4690      	mov	r8, r2
    4180:	015b      	lsls	r3, r3, #5
    4182:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4184:	2308      	movs	r3, #8
    4186:	33ff      	adds	r3, #255	; 0xff
    4188:	5ceb      	ldrb	r3, [r5, r3]
    418a:	079b      	lsls	r3, r3, #30
    418c:	d51e      	bpl.n	41cc <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    418e:	2202      	movs	r2, #2
    4190:	2308      	movs	r3, #8
    4192:	33ff      	adds	r3, #255	; 0xff
    4194:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4196:	485c      	ldr	r0, [pc, #368]	; (4308 <USB_Handler+0x5c4>)
    4198:	3b88      	subs	r3, #136	; 0x88
    419a:	3bff      	subs	r3, #255	; 0xff
    419c:	4642      	mov	r2, r8
    419e:	4313      	orrs	r3, r2
    41a0:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    41a2:	9b01      	ldr	r3, [sp, #4]
    41a4:	015a      	lsls	r2, r3, #5
    41a6:	4b57      	ldr	r3, [pc, #348]	; (4304 <USB_Handler+0x5c0>)
    41a8:	189b      	adds	r3, r3, r2
    41aa:	3310      	adds	r3, #16
    41ac:	685b      	ldr	r3, [r3, #4]
    41ae:	049b      	lsls	r3, r3, #18
    41b0:	0c9b      	lsrs	r3, r3, #18
    41b2:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    41b4:	078b      	lsls	r3, r1, #30
    41b6:	d100      	bne.n	41ba <USB_Handler+0x476>
    41b8:	e730      	b.n	401c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    41ba:	9b01      	ldr	r3, [sp, #4]
    41bc:	330d      	adds	r3, #13
    41be:	011b      	lsls	r3, r3, #4
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	685b      	ldr	r3, [r3, #4]
    41c4:	4950      	ldr	r1, [pc, #320]	; (4308 <USB_Handler+0x5c4>)
    41c6:	0038      	movs	r0, r7
    41c8:	4798      	blx	r3
    41ca:	e727      	b.n	401c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    41cc:	2308      	movs	r3, #8
    41ce:	33ff      	adds	r3, #255	; 0xff
    41d0:	5ceb      	ldrb	r3, [r5, r3]
    41d2:	07db      	lsls	r3, r3, #31
    41d4:	d5ee      	bpl.n	41b4 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    41d6:	2201      	movs	r2, #1
    41d8:	2308      	movs	r3, #8
    41da:	33ff      	adds	r3, #255	; 0xff
    41dc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    41de:	484a      	ldr	r0, [pc, #296]	; (4308 <USB_Handler+0x5c4>)
    41e0:	4643      	mov	r3, r8
    41e2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    41e4:	9b01      	ldr	r3, [sp, #4]
    41e6:	015b      	lsls	r3, r3, #5
    41e8:	4a46      	ldr	r2, [pc, #280]	; (4304 <USB_Handler+0x5c0>)
    41ea:	18d2      	adds	r2, r2, r3
    41ec:	6853      	ldr	r3, [r2, #4]
    41ee:	049b      	lsls	r3, r3, #18
    41f0:	0c9b      	lsrs	r3, r3, #18
    41f2:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    41f4:	6853      	ldr	r3, [r2, #4]
    41f6:	011b      	lsls	r3, r3, #4
    41f8:	0c9b      	lsrs	r3, r3, #18
    41fa:	8083      	strh	r3, [r0, #4]
    41fc:	e7da      	b.n	41b4 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    41fe:	2208      	movs	r2, #8
    4200:	32ff      	adds	r2, #255	; 0xff
    4202:	5c9a      	ldrb	r2, [r3, r2]
    4204:	0752      	lsls	r2, r2, #29
    4206:	d56e      	bpl.n	42e6 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4208:	2004      	movs	r0, #4
    420a:	2208      	movs	r2, #8
    420c:	32ff      	adds	r2, #255	; 0xff
    420e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4210:	9801      	ldr	r0, [sp, #4]
    4212:	0142      	lsls	r2, r0, #5
    4214:	4b3b      	ldr	r3, [pc, #236]	; (4304 <USB_Handler+0x5c0>)
    4216:	189b      	adds	r3, r3, r2
    4218:	7a9b      	ldrb	r3, [r3, #10]
    421a:	079b      	lsls	r3, r3, #30
    421c:	d505      	bpl.n	422a <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    421e:	4b39      	ldr	r3, [pc, #228]	; (4304 <USB_Handler+0x5c0>)
    4220:	189b      	adds	r3, r3, r2
    4222:	7a9a      	ldrb	r2, [r3, #10]
    4224:	2002      	movs	r0, #2
    4226:	4382      	bics	r2, r0
    4228:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    422a:	4b37      	ldr	r3, [pc, #220]	; (4308 <USB_Handler+0x5c4>)
    422c:	4642      	mov	r2, r8
    422e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4230:	9b01      	ldr	r3, [sp, #4]
    4232:	3308      	adds	r3, #8
    4234:	015b      	lsls	r3, r3, #5
    4236:	683a      	ldr	r2, [r7, #0]
    4238:	4694      	mov	ip, r2
    423a:	4463      	add	r3, ip
    423c:	79db      	ldrb	r3, [r3, #7]
    423e:	07db      	lsls	r3, r3, #31
    4240:	d551      	bpl.n	42e6 <USB_Handler+0x5a2>
    4242:	e6eb      	b.n	401c <USB_Handler+0x2d8>
    4244:	3301      	adds	r3, #1
    4246:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4248:	2b08      	cmp	r3, #8
    424a:	d100      	bne.n	424e <USB_Handler+0x50a>
    424c:	e6e6      	b.n	401c <USB_Handler+0x2d8>
    424e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4250:	9301      	str	r3, [sp, #4]
    4252:	0032      	movs	r2, r6
    4254:	411a      	asrs	r2, r3
    4256:	4661      	mov	r1, ip
    4258:	4211      	tst	r1, r2
    425a:	d0f3      	beq.n	4244 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    425c:	001a      	movs	r2, r3
    425e:	3208      	adds	r2, #8
    4260:	0152      	lsls	r2, r2, #5
    4262:	18ba      	adds	r2, r7, r2
    4264:	79d2      	ldrb	r2, [r2, #7]
    4266:	b2d2      	uxtb	r2, r2
    4268:	7a21      	ldrb	r1, [r4, #8]
    426a:	4011      	ands	r1, r2
    426c:	7820      	ldrb	r0, [r4, #0]
    426e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4270:	4648      	mov	r0, r9
    4272:	4210      	tst	r0, r2
    4274:	d000      	beq.n	4278 <USB_Handler+0x534>
    4276:	e730      	b.n	40da <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4278:	4650      	mov	r0, sl
    427a:	4210      	tst	r0, r2
    427c:	d000      	beq.n	4280 <USB_Handler+0x53c>
    427e:	e75b      	b.n	4138 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4280:	4658      	mov	r0, fp
    4282:	4210      	tst	r0, r2
    4284:	d000      	beq.n	4288 <USB_Handler+0x544>
    4286:	e777      	b.n	4178 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4288:	200c      	movs	r0, #12
    428a:	4210      	tst	r0, r2
    428c:	d0da      	beq.n	4244 <USB_Handler+0x500>
    428e:	002a      	movs	r2, r5
    4290:	003d      	movs	r5, r7
    4292:	4647      	mov	r7, r8
    4294:	4690      	mov	r8, r2
    4296:	015b      	lsls	r3, r3, #5
    4298:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    429a:	2208      	movs	r2, #8
    429c:	32ff      	adds	r2, #255	; 0xff
    429e:	5c9a      	ldrb	r2, [r3, r2]
    42a0:	0712      	lsls	r2, r2, #28
    42a2:	d5ac      	bpl.n	41fe <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    42a4:	3804      	subs	r0, #4
    42a6:	2208      	movs	r2, #8
    42a8:	32ff      	adds	r2, #255	; 0xff
    42aa:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    42ac:	9801      	ldr	r0, [sp, #4]
    42ae:	0142      	lsls	r2, r0, #5
    42b0:	4b14      	ldr	r3, [pc, #80]	; (4304 <USB_Handler+0x5c0>)
    42b2:	189b      	adds	r3, r3, r2
    42b4:	7e9b      	ldrb	r3, [r3, #26]
    42b6:	079b      	lsls	r3, r3, #30
    42b8:	d505      	bpl.n	42c6 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    42ba:	4b12      	ldr	r3, [pc, #72]	; (4304 <USB_Handler+0x5c0>)
    42bc:	189b      	adds	r3, r3, r2
    42be:	7e9a      	ldrb	r2, [r3, #26]
    42c0:	2002      	movs	r0, #2
    42c2:	4382      	bics	r2, r0
    42c4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    42c6:	2380      	movs	r3, #128	; 0x80
    42c8:	425b      	negs	r3, r3
    42ca:	4642      	mov	r2, r8
    42cc:	4313      	orrs	r3, r2
    42ce:	4a0e      	ldr	r2, [pc, #56]	; (4308 <USB_Handler+0x5c4>)
    42d0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    42d2:	9b01      	ldr	r3, [sp, #4]
    42d4:	3308      	adds	r3, #8
    42d6:	015b      	lsls	r3, r3, #5
    42d8:	683a      	ldr	r2, [r7, #0]
    42da:	4694      	mov	ip, r2
    42dc:	4463      	add	r3, ip
    42de:	79db      	ldrb	r3, [r3, #7]
    42e0:	079b      	lsls	r3, r3, #30
    42e2:	d500      	bpl.n	42e6 <USB_Handler+0x5a2>
    42e4:	e69a      	b.n	401c <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    42e6:	230c      	movs	r3, #12
    42e8:	420b      	tst	r3, r1
    42ea:	d100      	bne.n	42ee <USB_Handler+0x5aa>
    42ec:	e696      	b.n	401c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	011b      	lsls	r3, r3, #4
    42f2:	18fb      	adds	r3, r7, r3
    42f4:	33d8      	adds	r3, #216	; 0xd8
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	4903      	ldr	r1, [pc, #12]	; (4308 <USB_Handler+0x5c4>)
    42fa:	0038      	movs	r0, r7
    42fc:	4798      	blx	r3
    42fe:	e68d      	b.n	401c <USB_Handler+0x2d8>
    4300:	200003d4 	.word	0x200003d4
    4304:	20000830 	.word	0x20000830
    4308:	200003d8 	.word	0x200003d8

0000430c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    430c:	2200      	movs	r2, #0
    430e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4310:	2301      	movs	r3, #1
    4312:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4314:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4316:	70c3      	strb	r3, [r0, #3]
}
    4318:	4770      	bx	lr
	...

0000431c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    431c:	b5f0      	push	{r4, r5, r6, r7, lr}
    431e:	46ce      	mov	lr, r9
    4320:	4647      	mov	r7, r8
    4322:	b580      	push	{r7, lr}
    4324:	b083      	sub	sp, #12
    4326:	0004      	movs	r4, r0
    4328:	000d      	movs	r5, r1
    432a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    432c:	2300      	movs	r3, #0
    432e:	4a6e      	ldr	r2, [pc, #440]	; (44e8 <usb_init+0x1cc>)
    4330:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4332:	4a6e      	ldr	r2, [pc, #440]	; (44ec <usb_init+0x1d0>)
    4334:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4336:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4338:	496d      	ldr	r1, [pc, #436]	; (44f0 <usb_init+0x1d4>)
    433a:	69ca      	ldr	r2, [r1, #28]
    433c:	2020      	movs	r0, #32
    433e:	4302      	orrs	r2, r0
    4340:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4342:	af01      	add	r7, sp, #4
    4344:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4346:	2201      	movs	r2, #1
    4348:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    434a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    434c:	3306      	adds	r3, #6
    434e:	4699      	mov	r9, r3
    4350:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4352:	0039      	movs	r1, r7
    4354:	3808      	subs	r0, #8
    4356:	4b67      	ldr	r3, [pc, #412]	; (44f4 <usb_init+0x1d8>)
    4358:	4698      	mov	r8, r3
    435a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    435c:	464b      	mov	r3, r9
    435e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4360:	0039      	movs	r1, r7
    4362:	2019      	movs	r0, #25
    4364:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4366:	78b3      	ldrb	r3, [r6, #2]
    4368:	466a      	mov	r2, sp
    436a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    436c:	4669      	mov	r1, sp
    436e:	2006      	movs	r0, #6
    4370:	4b61      	ldr	r3, [pc, #388]	; (44f8 <usb_init+0x1dc>)
    4372:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4374:	2006      	movs	r0, #6
    4376:	4b61      	ldr	r3, [pc, #388]	; (44fc <usb_init+0x1e0>)
    4378:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    437a:	782b      	ldrb	r3, [r5, #0]
    437c:	2201      	movs	r2, #1
    437e:	4313      	orrs	r3, r2
    4380:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4382:	78ab      	ldrb	r3, [r5, #2]
    4384:	07db      	lsls	r3, r3, #31
    4386:	d4fc      	bmi.n	4382 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4388:	4a5d      	ldr	r2, [pc, #372]	; (4500 <usb_init+0x1e4>)
    438a:	78d3      	ldrb	r3, [r2, #3]
    438c:	2103      	movs	r1, #3
    438e:	438b      	bics	r3, r1
    4390:	2102      	movs	r1, #2
    4392:	430b      	orrs	r3, r1
    4394:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4396:	78d3      	ldrb	r3, [r2, #3]
    4398:	210c      	movs	r1, #12
    439a:	438b      	bics	r3, r1
    439c:	2108      	movs	r1, #8
    439e:	430b      	orrs	r3, r1
    43a0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    43a2:	4b58      	ldr	r3, [pc, #352]	; (4504 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    43a4:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    43a6:	039b      	lsls	r3, r3, #14
    43a8:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    43aa:	2b1f      	cmp	r3, #31
    43ac:	d100      	bne.n	43b0 <usb_init+0x94>
    43ae:	e08f      	b.n	44d0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    43b0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    43b2:	019b      	lsls	r3, r3, #6
    43b4:	4954      	ldr	r1, [pc, #336]	; (4508 <usb_init+0x1ec>)
    43b6:	400a      	ands	r2, r1
    43b8:	4313      	orrs	r3, r2
    43ba:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    43bc:	4b51      	ldr	r3, [pc, #324]	; (4504 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    43c2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    43c4:	2b1f      	cmp	r3, #31
    43c6:	d100      	bne.n	43ca <usb_init+0xae>
    43c8:	e084      	b.n	44d4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    43ca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    43cc:	211f      	movs	r1, #31
    43ce:	438a      	bics	r2, r1
    43d0:	4313      	orrs	r3, r2
    43d2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    43d4:	4b4b      	ldr	r3, [pc, #300]	; (4504 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    43d6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    43d8:	019b      	lsls	r3, r3, #6
    43da:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    43dc:	2b07      	cmp	r3, #7
    43de:	d100      	bne.n	43e2 <usb_init+0xc6>
    43e0:	e07a      	b.n	44d8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    43e2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    43e4:	031b      	lsls	r3, r3, #12
    43e6:	4949      	ldr	r1, [pc, #292]	; (450c <usb_init+0x1f0>)
    43e8:	400a      	ands	r2, r1
    43ea:	4313      	orrs	r3, r2
    43ec:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    43ee:	7832      	ldrb	r2, [r6, #0]
    43f0:	7829      	ldrb	r1, [r5, #0]
    43f2:	01d2      	lsls	r2, r2, #7
    43f4:	237f      	movs	r3, #127	; 0x7f
    43f6:	400b      	ands	r3, r1
    43f8:	4313      	orrs	r3, r2
    43fa:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    43fc:	7871      	ldrb	r1, [r6, #1]
    43fe:	782b      	ldrb	r3, [r5, #0]
    4400:	2201      	movs	r2, #1
    4402:	400a      	ands	r2, r1
    4404:	0092      	lsls	r2, r2, #2
    4406:	2104      	movs	r1, #4
    4408:	438b      	bics	r3, r1
    440a:	4313      	orrs	r3, r2
    440c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    440e:	4b40      	ldr	r3, [pc, #256]	; (4510 <usb_init+0x1f4>)
    4410:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4412:	78f3      	ldrb	r3, [r6, #3]
    4414:	2b01      	cmp	r3, #1
    4416:	d061      	beq.n	44dc <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4418:	2b00      	cmp	r3, #0
    441a:	d106      	bne.n	442a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    441c:	6822      	ldr	r2, [r4, #0]
    441e:	8913      	ldrh	r3, [r2, #8]
    4420:	210c      	movs	r1, #12
    4422:	438b      	bics	r3, r1
    4424:	2104      	movs	r1, #4
    4426:	430b      	orrs	r3, r1
    4428:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    442a:	2280      	movs	r2, #128	; 0x80
    442c:	0052      	lsls	r2, r2, #1
    442e:	2100      	movs	r1, #0
    4430:	4837      	ldr	r0, [pc, #220]	; (4510 <usb_init+0x1f4>)
    4432:	4b38      	ldr	r3, [pc, #224]	; (4514 <usb_init+0x1f8>)
    4434:	4798      	blx	r3
    4436:	1d23      	adds	r3, r4, #4
    4438:	0021      	movs	r1, r4
    443a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    443c:	2200      	movs	r2, #0
    443e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4440:	428b      	cmp	r3, r1
    4442:	d1fc      	bne.n	443e <usb_init+0x122>
    4444:	0021      	movs	r1, r4
    4446:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4448:	2200      	movs	r2, #0
    444a:	601a      	str	r2, [r3, #0]
    444c:	605a      	str	r2, [r3, #4]
    444e:	609a      	str	r2, [r3, #8]
    4450:	60da      	str	r2, [r3, #12]
    4452:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4454:	428b      	cmp	r3, r1
    4456:	d1f8      	bne.n	444a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4458:	2300      	movs	r3, #0
    445a:	22a4      	movs	r2, #164	; 0xa4
    445c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    445e:	3201      	adds	r2, #1
    4460:	54a3      	strb	r3, [r4, r2]
    4462:	0023      	movs	r3, r4
    4464:	33a6      	adds	r3, #166	; 0xa6
    4466:	0021      	movs	r1, r4
    4468:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    446a:	2200      	movs	r2, #0
    446c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    446e:	721a      	strb	r2, [r3, #8]
    4470:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4472:	4299      	cmp	r1, r3
    4474:	d1fa      	bne.n	446c <usb_init+0x150>
    4476:	0023      	movs	r3, r4
    4478:	33b8      	adds	r3, #184	; 0xb8
    447a:	0021      	movs	r1, r4
    447c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    447e:	2200      	movs	r2, #0
    4480:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4482:	428b      	cmp	r3, r1
    4484:	d1fc      	bne.n	4480 <usb_init+0x164>
    4486:	0021      	movs	r1, r4
    4488:	3155      	adds	r1, #85	; 0x55
    448a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    448c:	2200      	movs	r2, #0
    448e:	601a      	str	r2, [r3, #0]
    4490:	605a      	str	r2, [r3, #4]
    4492:	609a      	str	r2, [r3, #8]
    4494:	60da      	str	r2, [r3, #12]
    4496:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4498:	428b      	cmp	r3, r1
    449a:	d1f8      	bne.n	448e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    449c:	2300      	movs	r3, #0
    449e:	22aa      	movs	r2, #170	; 0xaa
    44a0:	0052      	lsls	r2, r2, #1
    44a2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    44a4:	3202      	adds	r2, #2
    44a6:	52a3      	strh	r3, [r4, r2]
    44a8:	0023      	movs	r3, r4
    44aa:	3359      	adds	r3, #89	; 0x59
    44ac:	33ff      	adds	r3, #255	; 0xff
    44ae:	3461      	adds	r4, #97	; 0x61
    44b0:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    44b2:	2200      	movs	r2, #0
    44b4:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    44b6:	721a      	strb	r2, [r3, #8]
    44b8:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    44ba:	42a3      	cmp	r3, r4
    44bc:	d1fa      	bne.n	44b4 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    44be:	2280      	movs	r2, #128	; 0x80
    44c0:	4b15      	ldr	r3, [pc, #84]	; (4518 <usb_init+0x1fc>)
    44c2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    44c4:	2000      	movs	r0, #0
    44c6:	b003      	add	sp, #12
    44c8:	bc0c      	pop	{r2, r3}
    44ca:	4690      	mov	r8, r2
    44cc:	4699      	mov	r9, r3
    44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    44d0:	3b1a      	subs	r3, #26
    44d2:	e76d      	b.n	43b0 <usb_init+0x94>
		pad_transp = 29;
    44d4:	3b02      	subs	r3, #2
    44d6:	e778      	b.n	43ca <usb_init+0xae>
		pad_trim = 3;
    44d8:	3b04      	subs	r3, #4
    44da:	e782      	b.n	43e2 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    44dc:	6822      	ldr	r2, [r4, #0]
    44de:	8913      	ldrh	r3, [r2, #8]
    44e0:	3108      	adds	r1, #8
    44e2:	438b      	bics	r3, r1
    44e4:	8113      	strh	r3, [r2, #8]
    44e6:	e7a0      	b.n	442a <usb_init+0x10e>
    44e8:	200003e0 	.word	0x200003e0
    44ec:	200003d0 	.word	0x200003d0
    44f0:	40000400 	.word	0x40000400
    44f4:	0000288d 	.word	0x0000288d
    44f8:	000027c9 	.word	0x000027c9
    44fc:	0000273d 	.word	0x0000273d
    4500:	41005000 	.word	0x41005000
    4504:	00806024 	.word	0x00806024
    4508:	fffff83f 	.word	0xfffff83f
    450c:	ffff8fff 	.word	0xffff8fff
    4510:	20000830 	.word	0x20000830
    4514:	000061d7 	.word	0x000061d7
    4518:	e000e100 	.word	0xe000e100

0000451c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    451c:	e7fe      	b.n	451c <Dummy_Handler>
	...

00004520 <Reset_Handler>:
{
    4520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4522:	4a2a      	ldr	r2, [pc, #168]	; (45cc <Reset_Handler+0xac>)
    4524:	4b2a      	ldr	r3, [pc, #168]	; (45d0 <Reset_Handler+0xb0>)
    4526:	429a      	cmp	r2, r3
    4528:	d011      	beq.n	454e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    452a:	001a      	movs	r2, r3
    452c:	4b29      	ldr	r3, [pc, #164]	; (45d4 <Reset_Handler+0xb4>)
    452e:	429a      	cmp	r2, r3
    4530:	d20d      	bcs.n	454e <Reset_Handler+0x2e>
    4532:	4a29      	ldr	r2, [pc, #164]	; (45d8 <Reset_Handler+0xb8>)
    4534:	3303      	adds	r3, #3
    4536:	1a9b      	subs	r3, r3, r2
    4538:	089b      	lsrs	r3, r3, #2
    453a:	3301      	adds	r3, #1
    453c:	009b      	lsls	r3, r3, #2
    453e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4540:	4823      	ldr	r0, [pc, #140]	; (45d0 <Reset_Handler+0xb0>)
    4542:	4922      	ldr	r1, [pc, #136]	; (45cc <Reset_Handler+0xac>)
    4544:	588c      	ldr	r4, [r1, r2]
    4546:	5084      	str	r4, [r0, r2]
    4548:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    454a:	429a      	cmp	r2, r3
    454c:	d1fa      	bne.n	4544 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    454e:	4a23      	ldr	r2, [pc, #140]	; (45dc <Reset_Handler+0xbc>)
    4550:	4b23      	ldr	r3, [pc, #140]	; (45e0 <Reset_Handler+0xc0>)
    4552:	429a      	cmp	r2, r3
    4554:	d20a      	bcs.n	456c <Reset_Handler+0x4c>
    4556:	43d3      	mvns	r3, r2
    4558:	4921      	ldr	r1, [pc, #132]	; (45e0 <Reset_Handler+0xc0>)
    455a:	185b      	adds	r3, r3, r1
    455c:	2103      	movs	r1, #3
    455e:	438b      	bics	r3, r1
    4560:	3304      	adds	r3, #4
    4562:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4564:	2100      	movs	r1, #0
    4566:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4568:	4293      	cmp	r3, r2
    456a:	d1fc      	bne.n	4566 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    456c:	4a1d      	ldr	r2, [pc, #116]	; (45e4 <Reset_Handler+0xc4>)
    456e:	21ff      	movs	r1, #255	; 0xff
    4570:	4b1d      	ldr	r3, [pc, #116]	; (45e8 <Reset_Handler+0xc8>)
    4572:	438b      	bics	r3, r1
    4574:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4576:	39fd      	subs	r1, #253	; 0xfd
    4578:	2390      	movs	r3, #144	; 0x90
    457a:	005b      	lsls	r3, r3, #1
    457c:	4a1b      	ldr	r2, [pc, #108]	; (45ec <Reset_Handler+0xcc>)
    457e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4580:	4a1b      	ldr	r2, [pc, #108]	; (45f0 <Reset_Handler+0xd0>)
    4582:	78d3      	ldrb	r3, [r2, #3]
    4584:	2503      	movs	r5, #3
    4586:	43ab      	bics	r3, r5
    4588:	2402      	movs	r4, #2
    458a:	4323      	orrs	r3, r4
    458c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    458e:	78d3      	ldrb	r3, [r2, #3]
    4590:	270c      	movs	r7, #12
    4592:	43bb      	bics	r3, r7
    4594:	2608      	movs	r6, #8
    4596:	4333      	orrs	r3, r6
    4598:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    459a:	4b16      	ldr	r3, [pc, #88]	; (45f4 <Reset_Handler+0xd4>)
    459c:	7b98      	ldrb	r0, [r3, #14]
    459e:	2230      	movs	r2, #48	; 0x30
    45a0:	4390      	bics	r0, r2
    45a2:	2220      	movs	r2, #32
    45a4:	4310      	orrs	r0, r2
    45a6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    45a8:	7b99      	ldrb	r1, [r3, #14]
    45aa:	43b9      	bics	r1, r7
    45ac:	4331      	orrs	r1, r6
    45ae:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    45b0:	7b9a      	ldrb	r2, [r3, #14]
    45b2:	43aa      	bics	r2, r5
    45b4:	4322      	orrs	r2, r4
    45b6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    45b8:	4a0f      	ldr	r2, [pc, #60]	; (45f8 <Reset_Handler+0xd8>)
    45ba:	6853      	ldr	r3, [r2, #4]
    45bc:	2180      	movs	r1, #128	; 0x80
    45be:	430b      	orrs	r3, r1
    45c0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    45c2:	4b0e      	ldr	r3, [pc, #56]	; (45fc <Reset_Handler+0xdc>)
    45c4:	4798      	blx	r3
        main();
    45c6:	4b0e      	ldr	r3, [pc, #56]	; (4600 <Reset_Handler+0xe0>)
    45c8:	4798      	blx	r3
    45ca:	e7fe      	b.n	45ca <Reset_Handler+0xaa>
    45cc:	00006d44 	.word	0x00006d44
    45d0:	20000000 	.word	0x20000000
    45d4:	20000174 	.word	0x20000174
    45d8:	20000004 	.word	0x20000004
    45dc:	20000174 	.word	0x20000174
    45e0:	20000938 	.word	0x20000938
    45e4:	e000ed00 	.word	0xe000ed00
    45e8:	00000000 	.word	0x00000000
    45ec:	41007000 	.word	0x41007000
    45f0:	41005000 	.word	0x41005000
    45f4:	41004800 	.word	0x41004800
    45f8:	41004000 	.word	0x41004000
    45fc:	0000617d 	.word	0x0000617d
    4600:	00004659 	.word	0x00004659

00004604 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4604:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4606:	4a06      	ldr	r2, [pc, #24]	; (4620 <_sbrk+0x1c>)
    4608:	6812      	ldr	r2, [r2, #0]
    460a:	2a00      	cmp	r2, #0
    460c:	d004      	beq.n	4618 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    460e:	4a04      	ldr	r2, [pc, #16]	; (4620 <_sbrk+0x1c>)
    4610:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4612:	18c3      	adds	r3, r0, r3
    4614:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4616:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4618:	4902      	ldr	r1, [pc, #8]	; (4624 <_sbrk+0x20>)
    461a:	4a01      	ldr	r2, [pc, #4]	; (4620 <_sbrk+0x1c>)
    461c:	6011      	str	r1, [r2, #0]
    461e:	e7f6      	b.n	460e <_sbrk+0xa>
    4620:	200003ec 	.word	0x200003ec
    4624:	20002938 	.word	0x20002938

00004628 <configure_nvm>:

#include <asf.h>
#include "flash.h"

void configure_nvm(void)
{
    4628:	b500      	push	{lr}
    462a:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    462c:	2200      	movs	r2, #0
    462e:	466b      	mov	r3, sp
    4630:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4632:	4b07      	ldr	r3, [pc, #28]	; (4650 <configure_nvm+0x28>)
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	06db      	lsls	r3, r3, #27
    4638:	0f1b      	lsrs	r3, r3, #28
    463a:	4669      	mov	r1, sp
    463c:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    463e:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    4640:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    4642:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    4644:	4668      	mov	r0, sp
    4646:	4b03      	ldr	r3, [pc, #12]	; (4654 <configure_nvm+0x2c>)
    4648:	4798      	blx	r3
}
    464a:	b003      	add	sp, #12
    464c:	bd00      	pop	{pc}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	41004000 	.word	0x41004000
    4654:	00001ef5 	.word	0x00001ef5

00004658 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    4658:	b510      	push	{r4, lr}


	irq_initialize_vectors();
	cpu_irq_enable();
    465a:	2101      	movs	r1, #1
    465c:	2401      	movs	r4, #1
    465e:	4b38      	ldr	r3, [pc, #224]	; (4740 <main+0xe8>)
    4660:	7019      	strb	r1, [r3, #0]
    4662:	f3bf 8f5f 	dmb	sy
    4666:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    4668:	4b36      	ldr	r3, [pc, #216]	; (4744 <main+0xec>)
    466a:	2200      	movs	r2, #0
    466c:	701a      	strb	r2, [r3, #0]
    466e:	705a      	strb	r2, [r3, #1]
    4670:	709a      	strb	r2, [r3, #2]
    4672:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4674:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    4676:	4b34      	ldr	r3, [pc, #208]	; (4748 <main+0xf0>)
    4678:	4798      	blx	r3
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    467a:	4b34      	ldr	r3, [pc, #208]	; (474c <main+0xf4>)
    467c:	2148      	movs	r1, #72	; 0x48
    467e:	5c5a      	ldrb	r2, [r3, r1]
    4680:	4322      	orrs	r2, r4
    4682:	545a      	strb	r2, [r3, r1]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    4684:	2234      	movs	r2, #52	; 0x34
    4686:	5c99      	ldrb	r1, [r3, r2]
    4688:	200f      	movs	r0, #15
    468a:	4381      	bics	r1, r0
    468c:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    468e:	5c99      	ldrb	r1, [r3, r2]
    4690:	380c      	subs	r0, #12
    4692:	4301      	orrs	r1, r0
    4694:	5499      	strb	r1, [r3, r2]
    PORT->Group[port].PINCFG[pin].bit.PMUXEN = 1;
    4696:	3046      	adds	r0, #70	; 0x46
    4698:	5c19      	ldrb	r1, [r3, r0]
    469a:	4321      	orrs	r1, r4
    469c:	5419      	strb	r1, [r3, r0]
    PORT->Group[port].PMUX[pin/2].reg &= ~( 0xF << (4*(pin & 1)) );
    469e:	5c99      	ldrb	r1, [r3, r2]
    46a0:	383a      	subs	r0, #58	; 0x3a
    46a2:	4001      	ands	r1, r0
    46a4:	5499      	strb	r1, [r3, r2]
PORT->Group[port].PMUX[pin/2].reg |= ( (uint8_t)( (pinmux&0xFFFF) <<(4*(pin&1)) ) ); 
    46a6:	5c99      	ldrb	r1, [r3, r2]
    46a8:	3021      	adds	r0, #33	; 0x21
    46aa:	4301      	orrs	r1, r0
    46ac:	5499      	strb	r1, [r3, r2]
	PM->APBCMASK.reg |= I2C_SERCOM_APBCMASK;
    46ae:	4a28      	ldr	r2, [pc, #160]	; (4750 <main+0xf8>)
    46b0:	6a13      	ldr	r3, [r2, #32]
    46b2:	2110      	movs	r1, #16
    46b4:	430b      	orrs	r3, r1
    46b6:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(I2C_SERCOM_GCLK_ID) |
    46b8:	4a26      	ldr	r2, [pc, #152]	; (4754 <main+0xfc>)
    46ba:	4b27      	ldr	r3, [pc, #156]	; (4758 <main+0x100>)
    46bc:	805a      	strh	r2, [r3, #2]
	I2C_SERCOM->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    46be:	2280      	movs	r2, #128	; 0x80
    46c0:	0052      	lsls	r2, r2, #1
    46c2:	4b26      	ldr	r3, [pc, #152]	; (475c <main+0x104>)
    46c4:	605a      	str	r2, [r3, #4]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    46c6:	69da      	ldr	r2, [r3, #28]
    46c8:	2a00      	cmp	r2, #0
    46ca:	d1fc      	bne.n	46c6 <main+0x6e>
	SERCOM2->I2CM.BAUD.reg = SERCOM_I2CM_BAUD_BAUD(34);
    46cc:	3222      	adds	r2, #34	; 0x22
    46ce:	4b23      	ldr	r3, [pc, #140]	; (475c <main+0x104>)
    46d0:	60da      	str	r2, [r3, #12]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    46d2:	69da      	ldr	r2, [r3, #28]
    46d4:	2a00      	cmp	r2, #0
    46d6:	d1fc      	bne.n	46d2 <main+0x7a>
	I2C_SERCOM->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE |
    46d8:	4a21      	ldr	r2, [pc, #132]	; (4760 <main+0x108>)
    46da:	4b20      	ldr	r3, [pc, #128]	; (475c <main+0x104>)
    46dc:	601a      	str	r2, [r3, #0]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    46de:	69da      	ldr	r2, [r3, #28]
    46e0:	2a00      	cmp	r2, #0
    46e2:	d1fc      	bne.n	46de <main+0x86>
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    46e4:	4a1d      	ldr	r2, [pc, #116]	; (475c <main+0x104>)
    46e6:	8b53      	ldrh	r3, [r2, #26]
    46e8:	2110      	movs	r1, #16
    46ea:	430b      	orrs	r3, r1
    46ec:	8353      	strh	r3, [r2, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);	
    46ee:	0013      	movs	r3, r2
    46f0:	69da      	ldr	r2, [r3, #28]
    46f2:	2a00      	cmp	r2, #0
    46f4:	d1fc      	bne.n	46f0 <main+0x98>
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    46f6:	4a16      	ldr	r2, [pc, #88]	; (4750 <main+0xf8>)
    46f8:	6a11      	ldr	r1, [r2, #32]
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	015b      	lsls	r3, r3, #5
    46fe:	430b      	orrs	r3, r1
    4700:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    4702:	4a18      	ldr	r2, [pc, #96]	; (4764 <main+0x10c>)
    4704:	4b14      	ldr	r3, [pc, #80]	; (4758 <main+0x100>)
    4706:	805a      	strh	r2, [r3, #2]
	TC4->COUNT16.CTRLA.reg =
    4708:	4b17      	ldr	r3, [pc, #92]	; (4768 <main+0x110>)
    470a:	22a9      	movs	r2, #169	; 0xa9
    470c:	0152      	lsls	r2, r2, #5
    470e:	801a      	strh	r2, [r3, #0]
	TC4->COUNT16.COUNT.reg = 0;
    4710:	2200      	movs	r2, #0
    4712:	821a      	strh	r2, [r3, #16]
	TC4->COUNT16.CC[0].reg = 800u; // Count to 800 to get 0.1ms
    4714:	22c8      	movs	r2, #200	; 0xc8
    4716:	0092      	lsls	r2, r2, #2
    4718:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    471a:	881a      	ldrh	r2, [r3, #0]
    471c:	2102      	movs	r1, #2
    471e:	430a      	orrs	r2, r1
    4720:	801a      	strh	r2, [r3, #0]
	//spiInit1();
	
	timerInit();
	
	//configue flash non-volatile memory
	configure_nvm();
    4722:	4b12      	ldr	r3, [pc, #72]	; (476c <main+0x114>)
    4724:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    4726:	4b12      	ldr	r3, [pc, #72]	; (4770 <main+0x118>)
    4728:	4798      	blx	r3
	//light sensor initialization
	OPT3001_init();
    472a:	4b12      	ldr	r3, [pc, #72]	; (4774 <main+0x11c>)
    472c:	4798      	blx	r3
	//temperature sensor initialization
	Si7021_init();
    472e:	4b12      	ldr	r3, [pc, #72]	; (4778 <main+0x120>)
    4730:	4798      	blx	r3
	//clear LCD
	i2cLcdClear();
    4732:	4b12      	ldr	r3, [pc, #72]	; (477c <main+0x124>)
    4734:	4798      	blx	r3
	//initialize uart(bluetooth)
	uart_init();
    4736:	4b12      	ldr	r3, [pc, #72]	; (4780 <main+0x128>)
    4738:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	configApp();
    473a:	4b12      	ldr	r3, [pc, #72]	; (4784 <main+0x12c>)
    473c:	4798      	blx	r3
    473e:	e7fe      	b.n	473e <main+0xe6>
    4740:	2000010c 	.word	0x2000010c
    4744:	20000568 	.word	0x20000568
    4748:	000028c1 	.word	0x000028c1
    474c:	41004400 	.word	0x41004400
    4750:	40000400 	.word	0x40000400
    4754:	00004216 	.word	0x00004216
    4758:	40000c00 	.word	0x40000c00
    475c:	42001000 	.word	0x42001000
    4760:	00300016 	.word	0x00300016
    4764:	0000421c 	.word	0x0000421c
    4768:	42003000 	.word	0x42003000
    476c:	00004629 	.word	0x00004629
    4770:	000017a1 	.word	0x000017a1
    4774:	00004945 	.word	0x00004945
    4778:	00004961 	.word	0x00004961
    477c:	00000ef5 	.word	0x00000ef5
    4780:	00001499 	.word	0x00001499
    4784:	0000048d 	.word	0x0000048d

00004788 <main_suspend_action>:
	}
}


void main_suspend_action(void)
{
    4788:	b510      	push	{r4, lr}
	ui_powerdown();
    478a:	4b01      	ldr	r3, [pc, #4]	; (4790 <main_suspend_action+0x8>)
    478c:	4798      	blx	r3
}
    478e:	bd10      	pop	{r4, pc}
    4790:	0000158d 	.word	0x0000158d

00004794 <main_resume_action>:

void main_resume_action(void)
{
    4794:	b510      	push	{r4, lr}
	ui_wakeup();
    4796:	4b01      	ldr	r3, [pc, #4]	; (479c <main_resume_action+0x8>)
    4798:	4798      	blx	r3
}
    479a:	bd10      	pop	{r4, pc}
    479c:	000015bd 	.word	0x000015bd

000047a0 <main_sof_action>:

void main_sof_action(void)
{
    47a0:	b510      	push	{r4, lr}
	test_components();
    47a2:	4b06      	ldr	r3, [pc, #24]	; (47bc <main_sof_action+0x1c>)
    47a4:	4798      	blx	r3
	if (!main_b_cdc_enable)
    47a6:	4b06      	ldr	r3, [pc, #24]	; (47c0 <main_sof_action+0x20>)
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	2b00      	cmp	r3, #0
    47ac:	d100      	bne.n	47b0 <main_sof_action+0x10>
	return;
	ui_process(udd_get_frame_number());
}
    47ae:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    47b0:	4b04      	ldr	r3, [pc, #16]	; (47c4 <main_sof_action+0x24>)
    47b2:	4798      	blx	r3
    47b4:	4b04      	ldr	r3, [pc, #16]	; (47c8 <main_sof_action+0x28>)
    47b6:	4798      	blx	r3
    47b8:	e7f9      	b.n	47ae <main_sof_action+0xe>
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	00001285 	.word	0x00001285
    47c0:	200003f0 	.word	0x200003f0
    47c4:	00002fc9 	.word	0x00002fc9
    47c8:	000015d1 	.word	0x000015d1

000047cc <main_suspend_lpm_action>:


#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    47cc:	b510      	push	{r4, lr}
	ui_powerdown();
    47ce:	4b01      	ldr	r3, [pc, #4]	; (47d4 <main_suspend_lpm_action+0x8>)
    47d0:	4798      	blx	r3
}
    47d2:	bd10      	pop	{r4, pc}
    47d4:	0000158d 	.word	0x0000158d

000047d8 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    47d8:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    47da:	4b01      	ldr	r3, [pc, #4]	; (47e0 <main_remotewakeup_lpm_disable+0x8>)
    47dc:	4798      	blx	r3
}
    47de:	bd10      	pop	{r4, pc}
    47e0:	000015ad 	.word	0x000015ad

000047e4 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    47e4:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    47e6:	4b01      	ldr	r3, [pc, #4]	; (47ec <main_remotewakeup_lpm_enable+0x8>)
    47e8:	4798      	blx	r3
}
    47ea:	bd10      	pop	{r4, pc}
    47ec:	0000159d 	.word	0x0000159d

000047f0 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    47f0:	2201      	movs	r2, #1
    47f2:	4b02      	ldr	r3, [pc, #8]	; (47fc <main_cdc_enable+0xc>)
    47f4:	701a      	strb	r2, [r3, #0]
	// Open communication
	//uart_open(port);
	return true;
}
    47f6:	2001      	movs	r0, #1
    47f8:	4770      	bx	lr
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	200003f0 	.word	0x200003f0

00004800 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    4800:	2200      	movs	r2, #0
    4802:	4b01      	ldr	r3, [pc, #4]	; (4808 <main_cdc_disable+0x8>)
    4804:	701a      	strb	r2, [r3, #0]
	// Close communication
	//uart_close(port);
}
    4806:	4770      	bx	lr
    4808:	200003f0 	.word	0x200003f0

0000480c <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    480c:	b510      	push	{r4, lr}
	if (b_enable) {
    480e:	2900      	cmp	r1, #0
    4810:	d102      	bne.n	4818 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    4812:	4b03      	ldr	r3, [pc, #12]	; (4820 <main_cdc_set_dtr+0x14>)
    4814:	4798      	blx	r3
	}
}
    4816:	bd10      	pop	{r4, pc}
		ui_com_open(port);
    4818:	4b02      	ldr	r3, [pc, #8]	; (4824 <main_cdc_set_dtr+0x18>)
    481a:	4798      	blx	r3
    481c:	e7fb      	b.n	4816 <main_cdc_set_dtr+0xa>
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	000015cf 	.word	0x000015cf
    4824:	000015cd 	.word	0x000015cd

00004828 <OPT3001_read>:
}

//-----------------------------------------------------------------------------
inline bool i2c_read(uint8_t *data, int size, uint8_t addr)
{
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    4828:	2289      	movs	r2, #137	; 0x89
    482a:	4b21      	ldr	r3, [pc, #132]	; (48b0 <OPT3001_read+0x88>)
    482c:	625a      	str	r2, [r3, #36]	; 0x24

	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    482e:	0019      	movs	r1, r3
    4830:	3a87      	subs	r2, #135	; 0x87
    4832:	7e0b      	ldrb	r3, [r1, #24]
    4834:	4213      	tst	r3, r2
    4836:	d0fc      	beq.n	4832 <OPT3001_read+0xa>

	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4838:	4b1d      	ldr	r3, [pc, #116]	; (48b0 <OPT3001_read+0x88>)
    483a:	8b5b      	ldrh	r3, [r3, #26]
    483c:	075b      	lsls	r3, r3, #29
    483e:	d430      	bmi.n	48a2 <OPT3001_read+0x7a>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		//dbg_log("I2C: RXNACK during read (address)\r\n");
		return false;
	}

	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4840:	4b1b      	ldr	r3, [pc, #108]	; (48b0 <OPT3001_read+0x88>)
    4842:	685a      	ldr	r2, [r3, #4]
    4844:	491b      	ldr	r1, [pc, #108]	; (48b4 <OPT3001_read+0x8c>)
    4846:	400a      	ands	r2, r1
    4848:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < size-1; i++)
	{
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    484a:	2228      	movs	r2, #40	; 0x28
    484c:	5c9a      	ldrb	r2, [r3, r2]
    484e:	4b1a      	ldr	r3, [pc, #104]	; (48b8 <OPT3001_read+0x90>)
    4850:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4852:	4917      	ldr	r1, [pc, #92]	; (48b0 <OPT3001_read+0x88>)
    4854:	2202      	movs	r2, #2
    4856:	7e0b      	ldrb	r3, [r1, #24]
    4858:	4213      	tst	r3, r2
    485a:	d0fc      	beq.n	4856 <OPT3001_read+0x2e>
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    485c:	2328      	movs	r3, #40	; 0x28
    485e:	4a14      	ldr	r2, [pc, #80]	; (48b0 <OPT3001_read+0x88>)
    4860:	5cd2      	ldrb	r2, [r2, r3]
    4862:	4b15      	ldr	r3, [pc, #84]	; (48b8 <OPT3001_read+0x90>)
    4864:	705a      	strb	r2, [r3, #1]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    4866:	4912      	ldr	r1, [pc, #72]	; (48b0 <OPT3001_read+0x88>)
    4868:	2202      	movs	r2, #2
    486a:	7e0b      	ldrb	r3, [r1, #24]
    486c:	4213      	tst	r3, r2
    486e:	d0fc      	beq.n	486a <OPT3001_read+0x42>
	}

	if (size)
	{
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4870:	4b0f      	ldr	r3, [pc, #60]	; (48b0 <OPT3001_read+0x88>)
    4872:	6859      	ldr	r1, [r3, #4]
    4874:	2280      	movs	r2, #128	; 0x80
    4876:	02d2      	lsls	r2, r2, #11
    4878:	430a      	orrs	r2, r1
    487a:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    487c:	6859      	ldr	r1, [r3, #4]
    487e:	22c0      	movs	r2, #192	; 0xc0
    4880:	0292      	lsls	r2, r2, #10
    4882:	430a      	orrs	r2, r1
    4884:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    4886:	2228      	movs	r2, #40	; 0x28
    4888:	5c99      	ldrb	r1, [r3, r2]
    488a:	4a0b      	ldr	r2, [pc, #44]	; (48b8 <OPT3001_read+0x90>)
    488c:	7091      	strb	r1, [r2, #2]
	}
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    488e:	8b5a      	ldrh	r2, [r3, #26]
    4890:	2110      	movs	r1, #16
    4892:	430a      	orrs	r2, r1
    4894:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    4896:	001a      	movs	r2, r3
    4898:	69d3      	ldr	r3, [r2, #28]
    489a:	2b00      	cmp	r3, #0
    489c:	d1fc      	bne.n	4898 <OPT3001_read+0x70>
//Reads the register that was last written to
uint8_t* OPT3001_read(){
	
	i2c_read(OPT3001_read_buffer, 3, OPT3001_SLAVE_ADDR);
	return OPT3001_read_buffer;
}
    489e:	4806      	ldr	r0, [pc, #24]	; (48b8 <OPT3001_read+0x90>)
    48a0:	4770      	bx	lr
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    48a2:	4a03      	ldr	r2, [pc, #12]	; (48b0 <OPT3001_read+0x88>)
    48a4:	6851      	ldr	r1, [r2, #4]
    48a6:	23c0      	movs	r3, #192	; 0xc0
    48a8:	029b      	lsls	r3, r3, #10
    48aa:	430b      	orrs	r3, r1
    48ac:	6053      	str	r3, [r2, #4]
    48ae:	e7f6      	b.n	489e <OPT3001_read+0x76>
    48b0:	42001000 	.word	0x42001000
    48b4:	fffbffff 	.word	0xfffbffff
    48b8:	200003f4 	.word	0x200003f4

000048bc <OPT3001_write>:

void OPT3001_write(uint8_t reg, uint8_t byte1, uint8_t byte2){
    48bc:	b570      	push	{r4, r5, r6, lr}
	
	OPT3001_write_buffer[0] = reg;
    48be:	4b1e      	ldr	r3, [pc, #120]	; (4938 <OPT3001_write+0x7c>)
    48c0:	7018      	strb	r0, [r3, #0]
	OPT3001_write_buffer[1] = byte1;
    48c2:	7059      	strb	r1, [r3, #1]
	OPT3001_write_buffer[2] = byte2;
    48c4:	709a      	strb	r2, [r3, #2]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    48c6:	2288      	movs	r2, #136	; 0x88
    48c8:	4b1c      	ldr	r3, [pc, #112]	; (493c <OPT3001_write+0x80>)
    48ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    48cc:	0019      	movs	r1, r3
    48ce:	3a87      	subs	r2, #135	; 0x87
    48d0:	7e0b      	ldrb	r3, [r1, #24]
    48d2:	4213      	tst	r3, r2
    48d4:	d0fc      	beq.n	48d0 <OPT3001_write+0x14>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    48d6:	4b19      	ldr	r3, [pc, #100]	; (493c <OPT3001_write+0x80>)
    48d8:	8b5b      	ldrh	r3, [r3, #26]
    48da:	2000      	movs	r0, #0
    48dc:	075b      	lsls	r3, r3, #29
    48de:	d416      	bmi.n	490e <OPT3001_write+0x52>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    48e0:	4e15      	ldr	r6, [pc, #84]	; (4938 <OPT3001_write+0x7c>)
    48e2:	4a16      	ldr	r2, [pc, #88]	; (493c <OPT3001_write+0x80>)
    48e4:	2528      	movs	r5, #40	; 0x28
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    48e6:	2101      	movs	r1, #1
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    48e8:	2404      	movs	r4, #4
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    48ea:	5d83      	ldrb	r3, [r0, r6]
    48ec:	5553      	strb	r3, [r2, r5]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    48ee:	7e13      	ldrb	r3, [r2, #24]
    48f0:	420b      	tst	r3, r1
    48f2:	d0fc      	beq.n	48ee <OPT3001_write+0x32>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    48f4:	8b53      	ldrh	r3, [r2, #26]
    48f6:	4223      	tst	r3, r4
    48f8:	d113      	bne.n	4922 <OPT3001_write+0x66>
	for (int i = 0; i < size; i++)
    48fa:	3001      	adds	r0, #1
    48fc:	2803      	cmp	r0, #3
    48fe:	d1f4      	bne.n	48ea <OPT3001_write+0x2e>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4900:	4a0e      	ldr	r2, [pc, #56]	; (493c <OPT3001_write+0x80>)
    4902:	6851      	ldr	r1, [r2, #4]
    4904:	23c0      	movs	r3, #192	; 0xc0
    4906:	029b      	lsls	r3, r3, #10
    4908:	430b      	orrs	r3, r1
    490a:	6053      	str	r3, [r2, #4]
	
	i2c_write(OPT3001_write_buffer, 3, OPT3001_SLAVE_ADDR);

    490c:	bd70      	pop	{r4, r5, r6, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    490e:	4a0b      	ldr	r2, [pc, #44]	; (493c <OPT3001_write+0x80>)
    4910:	6851      	ldr	r1, [r2, #4]
    4912:	23c0      	movs	r3, #192	; 0xc0
    4914:	029b      	lsls	r3, r3, #10
    4916:	430b      	orrs	r3, r1
    4918:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    491a:	3041      	adds	r0, #65	; 0x41
    491c:	4b08      	ldr	r3, [pc, #32]	; (4940 <OPT3001_write+0x84>)
    491e:	4798      	blx	r3
    4920:	e7f4      	b.n	490c <OPT3001_write+0x50>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4922:	4a06      	ldr	r2, [pc, #24]	; (493c <OPT3001_write+0x80>)
    4924:	6851      	ldr	r1, [r2, #4]
    4926:	23c0      	movs	r3, #192	; 0xc0
    4928:	029b      	lsls	r3, r3, #10
    492a:	430b      	orrs	r3, r1
    492c:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    492e:	2042      	movs	r0, #66	; 0x42
    4930:	4b03      	ldr	r3, [pc, #12]	; (4940 <OPT3001_write+0x84>)
    4932:	4798      	blx	r3
    4934:	e7ea      	b.n	490c <OPT3001_write+0x50>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	200003f8 	.word	0x200003f8
    493c:	42001000 	.word	0x42001000
    4940:	00000d69 	.word	0x00000d69

00004944 <OPT3001_init>:
void OPT3001_init(){
    4944:	b510      	push	{r4, lr}
	OPT3001_write(OPT3001_CONFIG,0xc4,0x10);
    4946:	2210      	movs	r2, #16
    4948:	21c4      	movs	r1, #196	; 0xc4
    494a:	2001      	movs	r0, #1
    494c:	4c03      	ldr	r4, [pc, #12]	; (495c <OPT3001_init+0x18>)
    494e:	47a0      	blx	r4
	OPT3001_write(OPT3001_RESULT,0x00,0x00);
    4950:	2200      	movs	r2, #0
    4952:	2100      	movs	r1, #0
    4954:	2000      	movs	r0, #0
    4956:	47a0      	blx	r4
}
    4958:	bd10      	pop	{r4, pc}
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	000048bd 	.word	0x000048bd

00004960 <Si7021_init>:
}

void Si7021_init(){
	
	
}
    4960:	4770      	bx	lr
	...

00004964 <Si7021_read>:
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1)  | I2C_TRANSFER_READ;
    4964:	2281      	movs	r2, #129	; 0x81
    4966:	4b1c      	ldr	r3, [pc, #112]	; (49d8 <Si7021_read+0x74>)
    4968:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    496a:	0019      	movs	r1, r3
    496c:	3a7f      	subs	r2, #127	; 0x7f
    496e:	7e0b      	ldrb	r3, [r1, #24]
    4970:	4213      	tst	r3, r2
    4972:	d0fc      	beq.n	496e <Si7021_read+0xa>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4974:	4b18      	ldr	r3, [pc, #96]	; (49d8 <Si7021_read+0x74>)
    4976:	8b5b      	ldrh	r3, [r3, #26]
    4978:	075b      	lsls	r3, r3, #29
    497a:	d507      	bpl.n	498c <Si7021_read+0x28>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    497c:	4a16      	ldr	r2, [pc, #88]	; (49d8 <Si7021_read+0x74>)
    497e:	6851      	ldr	r1, [r2, #4]
    4980:	23c0      	movs	r3, #192	; 0xc0
    4982:	029b      	lsls	r3, r3, #10
    4984:	430b      	orrs	r3, r1
    4986:	6053      	str	r3, [r2, #4]

uint8_t* Si7021_read(){
	
	i2c_read(Si7021_read_buffer,2,SI7021_SLAVE_ADDR);
	return Si7021_read_buffer;
}
    4988:	4814      	ldr	r0, [pc, #80]	; (49dc <Si7021_read+0x78>)
    498a:	4770      	bx	lr
	I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    498c:	4b12      	ldr	r3, [pc, #72]	; (49d8 <Si7021_read+0x74>)
    498e:	685a      	ldr	r2, [r3, #4]
    4990:	4913      	ldr	r1, [pc, #76]	; (49e0 <Si7021_read+0x7c>)
    4992:	400a      	ands	r2, r1
    4994:	605a      	str	r2, [r3, #4]
		data[i] = I2C_SERCOM->I2CM.DATA.reg;
    4996:	2228      	movs	r2, #40	; 0x28
    4998:	5c9a      	ldrb	r2, [r3, r2]
    499a:	4b10      	ldr	r3, [pc, #64]	; (49dc <Si7021_read+0x78>)
    499c:	701a      	strb	r2, [r3, #0]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB));
    499e:	490e      	ldr	r1, [pc, #56]	; (49d8 <Si7021_read+0x74>)
    49a0:	2202      	movs	r2, #2
    49a2:	7e0b      	ldrb	r3, [r1, #24]
    49a4:	4213      	tst	r3, r2
    49a6:	d0fc      	beq.n	49a2 <Si7021_read+0x3e>
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    49a8:	4b0b      	ldr	r3, [pc, #44]	; (49d8 <Si7021_read+0x74>)
    49aa:	6859      	ldr	r1, [r3, #4]
    49ac:	2280      	movs	r2, #128	; 0x80
    49ae:	02d2      	lsls	r2, r2, #11
    49b0:	430a      	orrs	r2, r1
    49b2:	605a      	str	r2, [r3, #4]
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    49b4:	6859      	ldr	r1, [r3, #4]
    49b6:	22c0      	movs	r2, #192	; 0xc0
    49b8:	0292      	lsls	r2, r2, #10
    49ba:	430a      	orrs	r2, r1
    49bc:	605a      	str	r2, [r3, #4]
		data[size-1] = I2C_SERCOM->I2CM.DATA.reg;
    49be:	2228      	movs	r2, #40	; 0x28
    49c0:	5c99      	ldrb	r1, [r3, r2]
    49c2:	4a06      	ldr	r2, [pc, #24]	; (49dc <Si7021_read+0x78>)
    49c4:	7051      	strb	r1, [r2, #1]
	I2C_SERCOM->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1);
    49c6:	8b5a      	ldrh	r2, [r3, #26]
    49c8:	2110      	movs	r1, #16
    49ca:	430a      	orrs	r2, r1
    49cc:	835a      	strh	r2, [r3, #26]
	while (I2C_SERCOM->I2CM.SYNCBUSY.reg);
    49ce:	001a      	movs	r2, r3
    49d0:	69d3      	ldr	r3, [r2, #28]
    49d2:	2b00      	cmp	r3, #0
    49d4:	d1fc      	bne.n	49d0 <Si7021_read+0x6c>
    49d6:	e7d7      	b.n	4988 <Si7021_read+0x24>
    49d8:	42001000 	.word	0x42001000
    49dc:	200003fc 	.word	0x200003fc
    49e0:	fffbffff 	.word	0xfffbffff

000049e4 <Si7021_command>:

void Si7021_writereg(uint8_t reg, uint8_t byte1){
	
}

void Si7021_command(uint8_t command){
    49e4:	b510      	push	{r4, lr}
	
	Si7021_write_buffer[0] = command;	
    49e6:	4b1a      	ldr	r3, [pc, #104]	; (4a50 <Si7021_command+0x6c>)
    49e8:	7018      	strb	r0, [r3, #0]
	I2C_SERCOM->I2CM.ADDR.reg = (addr<<1) | I2C_TRANSFER_WRITE;
    49ea:	2280      	movs	r2, #128	; 0x80
    49ec:	4b19      	ldr	r3, [pc, #100]	; (4a54 <Si7021_command+0x70>)
    49ee:	625a      	str	r2, [r3, #36]	; 0x24
	while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    49f0:	0019      	movs	r1, r3
    49f2:	3a7f      	subs	r2, #127	; 0x7f
    49f4:	7e0b      	ldrb	r3, [r1, #24]
    49f6:	4213      	tst	r3, r2
    49f8:	d0fc      	beq.n	49f4 <Si7021_command+0x10>
	if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    49fa:	4b16      	ldr	r3, [pc, #88]	; (4a54 <Si7021_command+0x70>)
    49fc:	8b5b      	ldrh	r3, [r3, #26]
    49fe:	075b      	lsls	r3, r3, #29
    4a00:	d412      	bmi.n	4a28 <Si7021_command+0x44>
		I2C_SERCOM->I2CM.DATA.reg = data[i];
    4a02:	2328      	movs	r3, #40	; 0x28
    4a04:	4a13      	ldr	r2, [pc, #76]	; (4a54 <Si7021_command+0x70>)
    4a06:	54d0      	strb	r0, [r2, r3]
		while (0 == (I2C_SERCOM->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB));
    4a08:	0011      	movs	r1, r2
    4a0a:	2201      	movs	r2, #1
    4a0c:	7e0b      	ldrb	r3, [r1, #24]
    4a0e:	4213      	tst	r3, r2
    4a10:	d0fc      	beq.n	4a0c <Si7021_command+0x28>
		if (I2C_SERCOM->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    4a12:	4b10      	ldr	r3, [pc, #64]	; (4a54 <Si7021_command+0x70>)
    4a14:	8b5b      	ldrh	r3, [r3, #26]
    4a16:	075b      	lsls	r3, r3, #29
    4a18:	d410      	bmi.n	4a3c <Si7021_command+0x58>
	I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a1a:	4a0e      	ldr	r2, [pc, #56]	; (4a54 <Si7021_command+0x70>)
    4a1c:	6851      	ldr	r1, [r2, #4]
    4a1e:	23c0      	movs	r3, #192	; 0xc0
    4a20:	029b      	lsls	r3, r3, #10
    4a22:	430b      	orrs	r3, r1
    4a24:	6053      	str	r3, [r2, #4]
	i2c_write(Si7021_write_buffer,1,SI7021_SLAVE_ADDR);

}
    4a26:	bd10      	pop	{r4, pc}
		I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a28:	4a0a      	ldr	r2, [pc, #40]	; (4a54 <Si7021_command+0x70>)
    4a2a:	6851      	ldr	r1, [r2, #4]
    4a2c:	23c0      	movs	r3, #192	; 0xc0
    4a2e:	029b      	lsls	r3, r3, #10
    4a30:	430b      	orrs	r3, r1
    4a32:	6053      	str	r3, [r2, #4]
		udi_cdc_putc('A');
    4a34:	2041      	movs	r0, #65	; 0x41
    4a36:	4b08      	ldr	r3, [pc, #32]	; (4a58 <Si7021_command+0x74>)
    4a38:	4798      	blx	r3
    4a3a:	e7f4      	b.n	4a26 <Si7021_command+0x42>
			I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4a3c:	4a05      	ldr	r2, [pc, #20]	; (4a54 <Si7021_command+0x70>)
    4a3e:	6851      	ldr	r1, [r2, #4]
    4a40:	23c0      	movs	r3, #192	; 0xc0
    4a42:	029b      	lsls	r3, r3, #10
    4a44:	430b      	orrs	r3, r1
    4a46:	6053      	str	r3, [r2, #4]
			udi_cdc_putc('B');
    4a48:	2042      	movs	r0, #66	; 0x42
    4a4a:	4b03      	ldr	r3, [pc, #12]	; (4a58 <Si7021_command+0x74>)
    4a4c:	4798      	blx	r3
    4a4e:	e7ea      	b.n	4a26 <Si7021_command+0x42>
    4a50:	20000400 	.word	0x20000400
    4a54:	42001000 	.word	0x42001000
    4a58:	00000d69 	.word	0x00000d69

00004a5c <Si7021_GetTemp>:
int Si7021_GetTemp(){
    4a5c:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_T_HMH);
    4a5e:	20e3      	movs	r0, #227	; 0xe3
    4a60:	4b15      	ldr	r3, [pc, #84]	; (4ab8 <Si7021_GetTemp+0x5c>)
    4a62:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4a64:	2200      	movs	r2, #0
    4a66:	4b15      	ldr	r3, [pc, #84]	; (4abc <Si7021_GetTemp+0x60>)
    4a68:	821a      	strh	r2, [r3, #16]
    4a6a:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4a6c:	001a      	movs	r2, r3
    4a6e:	2010      	movs	r0, #16
    4a70:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4a72:	7b93      	ldrb	r3, [r2, #14]
    4a74:	06db      	lsls	r3, r3, #27
    4a76:	d5fc      	bpl.n	4a72 <Si7021_GetTemp+0x16>
    4a78:	3901      	subs	r1, #1
    4a7a:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    4a7c:	2900      	cmp	r1, #0
    4a7e:	d1f7      	bne.n	4a70 <Si7021_GetTemp+0x14>
	temp_data = (Si7021_data[0]<<8) | Si7021_data[1];
    4a80:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <Si7021_GetTemp+0x64>)
    4a82:	681a      	ldr	r2, [r3, #0]
    4a84:	7813      	ldrb	r3, [r2, #0]
    4a86:	021b      	lsls	r3, r3, #8
    4a88:	7850      	ldrb	r0, [r2, #1]
    4a8a:	4318      	orrs	r0, r3
    4a8c:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <Si7021_GetTemp+0x68>)
    4a8e:	8018      	strh	r0, [r3, #0]
	temp1 = ((175.72*temp_data)/65535)-46.85;	
    4a90:	4b0d      	ldr	r3, [pc, #52]	; (4ac8 <Si7021_GetTemp+0x6c>)
    4a92:	4798      	blx	r3
    4a94:	4a0d      	ldr	r2, [pc, #52]	; (4acc <Si7021_GetTemp+0x70>)
    4a96:	4b0e      	ldr	r3, [pc, #56]	; (4ad0 <Si7021_GetTemp+0x74>)
    4a98:	4c0e      	ldr	r4, [pc, #56]	; (4ad4 <Si7021_GetTemp+0x78>)
    4a9a:	47a0      	blx	r4
    4a9c:	2200      	movs	r2, #0
    4a9e:	4b0e      	ldr	r3, [pc, #56]	; (4ad8 <Si7021_GetTemp+0x7c>)
    4aa0:	4c0e      	ldr	r4, [pc, #56]	; (4adc <Si7021_GetTemp+0x80>)
    4aa2:	47a0      	blx	r4
    4aa4:	4a0e      	ldr	r2, [pc, #56]	; (4ae0 <Si7021_GetTemp+0x84>)
    4aa6:	4b0f      	ldr	r3, [pc, #60]	; (4ae4 <Si7021_GetTemp+0x88>)
    4aa8:	4c0f      	ldr	r4, [pc, #60]	; (4ae8 <Si7021_GetTemp+0x8c>)
    4aaa:	47a0      	blx	r4
    4aac:	4b0f      	ldr	r3, [pc, #60]	; (4aec <Si7021_GetTemp+0x90>)
    4aae:	4798      	blx	r3
    4ab0:	4b0f      	ldr	r3, [pc, #60]	; (4af0 <Si7021_GetTemp+0x94>)
    4ab2:	6018      	str	r0, [r3, #0]
}
    4ab4:	bd10      	pop	{r4, pc}
    4ab6:	46c0      	nop			; (mov r8, r8)
    4ab8:	000049e5 	.word	0x000049e5
    4abc:	42003000 	.word	0x42003000
    4ac0:	20000508 	.word	0x20000508
    4ac4:	20000932 	.word	0x20000932
    4ac8:	000060f9 	.word	0x000060f9
    4acc:	3d70a3d7 	.word	0x3d70a3d7
    4ad0:	4065f70a 	.word	0x4065f70a
    4ad4:	00005565 	.word	0x00005565
    4ad8:	40efffe0 	.word	0x40efffe0
    4adc:	00004efd 	.word	0x00004efd
    4ae0:	cccccccd 	.word	0xcccccccd
    4ae4:	40476ccc 	.word	0x40476ccc
    4ae8:	00005a65 	.word	0x00005a65
    4aec:	00006091 	.word	0x00006091
    4af0:	2000044c 	.word	0x2000044c

00004af4 <Si7021_GetRH>:
int Si7021_GetRH(){
    4af4:	b510      	push	{r4, lr}
	Si7021_command(SI7021_MEAS_RH_HMH);
    4af6:	20e5      	movs	r0, #229	; 0xe5
    4af8:	4b16      	ldr	r3, [pc, #88]	; (4b54 <Si7021_GetRH+0x60>)
    4afa:	4798      	blx	r3
	TC4->COUNT16.COUNT.reg = 0; cnt = 0;
    4afc:	2200      	movs	r2, #0
    4afe:	4b16      	ldr	r3, [pc, #88]	; (4b58 <Si7021_GetRH+0x64>)
    4b00:	821a      	strh	r2, [r3, #16]
    4b02:	210a      	movs	r1, #10
		TC4->COUNT16.INTFLAG.reg = TC_INTFLAG_MC0; // Clear interrupt flag
    4b04:	001a      	movs	r2, r3
    4b06:	2010      	movs	r0, #16
    4b08:	7390      	strb	r0, [r2, #14]
		while (0 == TC4->COUNT16.INTFLAG.bit.MC0); // Wait for interrupt
    4b0a:	7b93      	ldrb	r3, [r2, #14]
    4b0c:	06db      	lsls	r3, r3, #27
    4b0e:	d5fc      	bpl.n	4b0a <Si7021_GetRH+0x16>
    4b10:	3901      	subs	r1, #1
    4b12:	b289      	uxth	r1, r1
	while(cnt!=ms) // Count the ms till target
    4b14:	2900      	cmp	r1, #0
    4b16:	d1f7      	bne.n	4b08 <Si7021_GetRH+0x14>
	Si7021_data = Si7021_read();
    4b18:	4b10      	ldr	r3, [pc, #64]	; (4b5c <Si7021_GetRH+0x68>)
    4b1a:	4798      	blx	r3
    4b1c:	4b10      	ldr	r3, [pc, #64]	; (4b60 <Si7021_GetRH+0x6c>)
    4b1e:	6018      	str	r0, [r3, #0]
	RH_data = (Si7021_data[0]<<8) | Si7021_data[1];
    4b20:	7803      	ldrb	r3, [r0, #0]
    4b22:	021b      	lsls	r3, r3, #8
    4b24:	7840      	ldrb	r0, [r0, #1]
    4b26:	4318      	orrs	r0, r3
    4b28:	4b0e      	ldr	r3, [pc, #56]	; (4b64 <Si7021_GetRH+0x70>)
    4b2a:	8018      	strh	r0, [r3, #0]
	RH1 = ((175.72*RH_data)/65535)-46.85;
    4b2c:	4b0e      	ldr	r3, [pc, #56]	; (4b68 <Si7021_GetRH+0x74>)
    4b2e:	4798      	blx	r3
    4b30:	4a0e      	ldr	r2, [pc, #56]	; (4b6c <Si7021_GetRH+0x78>)
    4b32:	4b0f      	ldr	r3, [pc, #60]	; (4b70 <Si7021_GetRH+0x7c>)
    4b34:	4c0f      	ldr	r4, [pc, #60]	; (4b74 <Si7021_GetRH+0x80>)
    4b36:	47a0      	blx	r4
    4b38:	2200      	movs	r2, #0
    4b3a:	4b0f      	ldr	r3, [pc, #60]	; (4b78 <Si7021_GetRH+0x84>)
    4b3c:	4c0f      	ldr	r4, [pc, #60]	; (4b7c <Si7021_GetRH+0x88>)
    4b3e:	47a0      	blx	r4
    4b40:	4a0f      	ldr	r2, [pc, #60]	; (4b80 <Si7021_GetRH+0x8c>)
    4b42:	4b10      	ldr	r3, [pc, #64]	; (4b84 <Si7021_GetRH+0x90>)
    4b44:	4c10      	ldr	r4, [pc, #64]	; (4b88 <Si7021_GetRH+0x94>)
    4b46:	47a0      	blx	r4
    4b48:	4b10      	ldr	r3, [pc, #64]	; (4b8c <Si7021_GetRH+0x98>)
    4b4a:	4798      	blx	r3
    4b4c:	4b10      	ldr	r3, [pc, #64]	; (4b90 <Si7021_GetRH+0x9c>)
    4b4e:	6018      	str	r0, [r3, #0]
}
    4b50:	bd10      	pop	{r4, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	000049e5 	.word	0x000049e5
    4b58:	42003000 	.word	0x42003000
    4b5c:	00004965 	.word	0x00004965
    4b60:	20000508 	.word	0x20000508
    4b64:	20000930 	.word	0x20000930
    4b68:	000060f9 	.word	0x000060f9
    4b6c:	3d70a3d7 	.word	0x3d70a3d7
    4b70:	4065f70a 	.word	0x4065f70a
    4b74:	00005565 	.word	0x00005565
    4b78:	40efffe0 	.word	0x40efffe0
    4b7c:	00004efd 	.word	0x00004efd
    4b80:	cccccccd 	.word	0xcccccccd
    4b84:	40476ccc 	.word	0x40476ccc
    4b88:	00005a65 	.word	0x00005a65
    4b8c:	00006091 	.word	0x00006091
    4b90:	20000458 	.word	0x20000458

00004b94 <__udivsi3>:
    4b94:	2200      	movs	r2, #0
    4b96:	0843      	lsrs	r3, r0, #1
    4b98:	428b      	cmp	r3, r1
    4b9a:	d374      	bcc.n	4c86 <__udivsi3+0xf2>
    4b9c:	0903      	lsrs	r3, r0, #4
    4b9e:	428b      	cmp	r3, r1
    4ba0:	d35f      	bcc.n	4c62 <__udivsi3+0xce>
    4ba2:	0a03      	lsrs	r3, r0, #8
    4ba4:	428b      	cmp	r3, r1
    4ba6:	d344      	bcc.n	4c32 <__udivsi3+0x9e>
    4ba8:	0b03      	lsrs	r3, r0, #12
    4baa:	428b      	cmp	r3, r1
    4bac:	d328      	bcc.n	4c00 <__udivsi3+0x6c>
    4bae:	0c03      	lsrs	r3, r0, #16
    4bb0:	428b      	cmp	r3, r1
    4bb2:	d30d      	bcc.n	4bd0 <__udivsi3+0x3c>
    4bb4:	22ff      	movs	r2, #255	; 0xff
    4bb6:	0209      	lsls	r1, r1, #8
    4bb8:	ba12      	rev	r2, r2
    4bba:	0c03      	lsrs	r3, r0, #16
    4bbc:	428b      	cmp	r3, r1
    4bbe:	d302      	bcc.n	4bc6 <__udivsi3+0x32>
    4bc0:	1212      	asrs	r2, r2, #8
    4bc2:	0209      	lsls	r1, r1, #8
    4bc4:	d065      	beq.n	4c92 <__udivsi3+0xfe>
    4bc6:	0b03      	lsrs	r3, r0, #12
    4bc8:	428b      	cmp	r3, r1
    4bca:	d319      	bcc.n	4c00 <__udivsi3+0x6c>
    4bcc:	e000      	b.n	4bd0 <__udivsi3+0x3c>
    4bce:	0a09      	lsrs	r1, r1, #8
    4bd0:	0bc3      	lsrs	r3, r0, #15
    4bd2:	428b      	cmp	r3, r1
    4bd4:	d301      	bcc.n	4bda <__udivsi3+0x46>
    4bd6:	03cb      	lsls	r3, r1, #15
    4bd8:	1ac0      	subs	r0, r0, r3
    4bda:	4152      	adcs	r2, r2
    4bdc:	0b83      	lsrs	r3, r0, #14
    4bde:	428b      	cmp	r3, r1
    4be0:	d301      	bcc.n	4be6 <__udivsi3+0x52>
    4be2:	038b      	lsls	r3, r1, #14
    4be4:	1ac0      	subs	r0, r0, r3
    4be6:	4152      	adcs	r2, r2
    4be8:	0b43      	lsrs	r3, r0, #13
    4bea:	428b      	cmp	r3, r1
    4bec:	d301      	bcc.n	4bf2 <__udivsi3+0x5e>
    4bee:	034b      	lsls	r3, r1, #13
    4bf0:	1ac0      	subs	r0, r0, r3
    4bf2:	4152      	adcs	r2, r2
    4bf4:	0b03      	lsrs	r3, r0, #12
    4bf6:	428b      	cmp	r3, r1
    4bf8:	d301      	bcc.n	4bfe <__udivsi3+0x6a>
    4bfa:	030b      	lsls	r3, r1, #12
    4bfc:	1ac0      	subs	r0, r0, r3
    4bfe:	4152      	adcs	r2, r2
    4c00:	0ac3      	lsrs	r3, r0, #11
    4c02:	428b      	cmp	r3, r1
    4c04:	d301      	bcc.n	4c0a <__udivsi3+0x76>
    4c06:	02cb      	lsls	r3, r1, #11
    4c08:	1ac0      	subs	r0, r0, r3
    4c0a:	4152      	adcs	r2, r2
    4c0c:	0a83      	lsrs	r3, r0, #10
    4c0e:	428b      	cmp	r3, r1
    4c10:	d301      	bcc.n	4c16 <__udivsi3+0x82>
    4c12:	028b      	lsls	r3, r1, #10
    4c14:	1ac0      	subs	r0, r0, r3
    4c16:	4152      	adcs	r2, r2
    4c18:	0a43      	lsrs	r3, r0, #9
    4c1a:	428b      	cmp	r3, r1
    4c1c:	d301      	bcc.n	4c22 <__udivsi3+0x8e>
    4c1e:	024b      	lsls	r3, r1, #9
    4c20:	1ac0      	subs	r0, r0, r3
    4c22:	4152      	adcs	r2, r2
    4c24:	0a03      	lsrs	r3, r0, #8
    4c26:	428b      	cmp	r3, r1
    4c28:	d301      	bcc.n	4c2e <__udivsi3+0x9a>
    4c2a:	020b      	lsls	r3, r1, #8
    4c2c:	1ac0      	subs	r0, r0, r3
    4c2e:	4152      	adcs	r2, r2
    4c30:	d2cd      	bcs.n	4bce <__udivsi3+0x3a>
    4c32:	09c3      	lsrs	r3, r0, #7
    4c34:	428b      	cmp	r3, r1
    4c36:	d301      	bcc.n	4c3c <__udivsi3+0xa8>
    4c38:	01cb      	lsls	r3, r1, #7
    4c3a:	1ac0      	subs	r0, r0, r3
    4c3c:	4152      	adcs	r2, r2
    4c3e:	0983      	lsrs	r3, r0, #6
    4c40:	428b      	cmp	r3, r1
    4c42:	d301      	bcc.n	4c48 <__udivsi3+0xb4>
    4c44:	018b      	lsls	r3, r1, #6
    4c46:	1ac0      	subs	r0, r0, r3
    4c48:	4152      	adcs	r2, r2
    4c4a:	0943      	lsrs	r3, r0, #5
    4c4c:	428b      	cmp	r3, r1
    4c4e:	d301      	bcc.n	4c54 <__udivsi3+0xc0>
    4c50:	014b      	lsls	r3, r1, #5
    4c52:	1ac0      	subs	r0, r0, r3
    4c54:	4152      	adcs	r2, r2
    4c56:	0903      	lsrs	r3, r0, #4
    4c58:	428b      	cmp	r3, r1
    4c5a:	d301      	bcc.n	4c60 <__udivsi3+0xcc>
    4c5c:	010b      	lsls	r3, r1, #4
    4c5e:	1ac0      	subs	r0, r0, r3
    4c60:	4152      	adcs	r2, r2
    4c62:	08c3      	lsrs	r3, r0, #3
    4c64:	428b      	cmp	r3, r1
    4c66:	d301      	bcc.n	4c6c <__udivsi3+0xd8>
    4c68:	00cb      	lsls	r3, r1, #3
    4c6a:	1ac0      	subs	r0, r0, r3
    4c6c:	4152      	adcs	r2, r2
    4c6e:	0883      	lsrs	r3, r0, #2
    4c70:	428b      	cmp	r3, r1
    4c72:	d301      	bcc.n	4c78 <__udivsi3+0xe4>
    4c74:	008b      	lsls	r3, r1, #2
    4c76:	1ac0      	subs	r0, r0, r3
    4c78:	4152      	adcs	r2, r2
    4c7a:	0843      	lsrs	r3, r0, #1
    4c7c:	428b      	cmp	r3, r1
    4c7e:	d301      	bcc.n	4c84 <__udivsi3+0xf0>
    4c80:	004b      	lsls	r3, r1, #1
    4c82:	1ac0      	subs	r0, r0, r3
    4c84:	4152      	adcs	r2, r2
    4c86:	1a41      	subs	r1, r0, r1
    4c88:	d200      	bcs.n	4c8c <__udivsi3+0xf8>
    4c8a:	4601      	mov	r1, r0
    4c8c:	4152      	adcs	r2, r2
    4c8e:	4610      	mov	r0, r2
    4c90:	4770      	bx	lr
    4c92:	e7ff      	b.n	4c94 <__udivsi3+0x100>
    4c94:	b501      	push	{r0, lr}
    4c96:	2000      	movs	r0, #0
    4c98:	f000 f8f0 	bl	4e7c <__aeabi_idiv0>
    4c9c:	bd02      	pop	{r1, pc}
    4c9e:	46c0      	nop			; (mov r8, r8)

00004ca0 <__aeabi_uidivmod>:
    4ca0:	2900      	cmp	r1, #0
    4ca2:	d0f7      	beq.n	4c94 <__udivsi3+0x100>
    4ca4:	e776      	b.n	4b94 <__udivsi3>
    4ca6:	4770      	bx	lr

00004ca8 <__divsi3>:
    4ca8:	4603      	mov	r3, r0
    4caa:	430b      	orrs	r3, r1
    4cac:	d47f      	bmi.n	4dae <__divsi3+0x106>
    4cae:	2200      	movs	r2, #0
    4cb0:	0843      	lsrs	r3, r0, #1
    4cb2:	428b      	cmp	r3, r1
    4cb4:	d374      	bcc.n	4da0 <__divsi3+0xf8>
    4cb6:	0903      	lsrs	r3, r0, #4
    4cb8:	428b      	cmp	r3, r1
    4cba:	d35f      	bcc.n	4d7c <__divsi3+0xd4>
    4cbc:	0a03      	lsrs	r3, r0, #8
    4cbe:	428b      	cmp	r3, r1
    4cc0:	d344      	bcc.n	4d4c <__divsi3+0xa4>
    4cc2:	0b03      	lsrs	r3, r0, #12
    4cc4:	428b      	cmp	r3, r1
    4cc6:	d328      	bcc.n	4d1a <__divsi3+0x72>
    4cc8:	0c03      	lsrs	r3, r0, #16
    4cca:	428b      	cmp	r3, r1
    4ccc:	d30d      	bcc.n	4cea <__divsi3+0x42>
    4cce:	22ff      	movs	r2, #255	; 0xff
    4cd0:	0209      	lsls	r1, r1, #8
    4cd2:	ba12      	rev	r2, r2
    4cd4:	0c03      	lsrs	r3, r0, #16
    4cd6:	428b      	cmp	r3, r1
    4cd8:	d302      	bcc.n	4ce0 <__divsi3+0x38>
    4cda:	1212      	asrs	r2, r2, #8
    4cdc:	0209      	lsls	r1, r1, #8
    4cde:	d065      	beq.n	4dac <__divsi3+0x104>
    4ce0:	0b03      	lsrs	r3, r0, #12
    4ce2:	428b      	cmp	r3, r1
    4ce4:	d319      	bcc.n	4d1a <__divsi3+0x72>
    4ce6:	e000      	b.n	4cea <__divsi3+0x42>
    4ce8:	0a09      	lsrs	r1, r1, #8
    4cea:	0bc3      	lsrs	r3, r0, #15
    4cec:	428b      	cmp	r3, r1
    4cee:	d301      	bcc.n	4cf4 <__divsi3+0x4c>
    4cf0:	03cb      	lsls	r3, r1, #15
    4cf2:	1ac0      	subs	r0, r0, r3
    4cf4:	4152      	adcs	r2, r2
    4cf6:	0b83      	lsrs	r3, r0, #14
    4cf8:	428b      	cmp	r3, r1
    4cfa:	d301      	bcc.n	4d00 <__divsi3+0x58>
    4cfc:	038b      	lsls	r3, r1, #14
    4cfe:	1ac0      	subs	r0, r0, r3
    4d00:	4152      	adcs	r2, r2
    4d02:	0b43      	lsrs	r3, r0, #13
    4d04:	428b      	cmp	r3, r1
    4d06:	d301      	bcc.n	4d0c <__divsi3+0x64>
    4d08:	034b      	lsls	r3, r1, #13
    4d0a:	1ac0      	subs	r0, r0, r3
    4d0c:	4152      	adcs	r2, r2
    4d0e:	0b03      	lsrs	r3, r0, #12
    4d10:	428b      	cmp	r3, r1
    4d12:	d301      	bcc.n	4d18 <__divsi3+0x70>
    4d14:	030b      	lsls	r3, r1, #12
    4d16:	1ac0      	subs	r0, r0, r3
    4d18:	4152      	adcs	r2, r2
    4d1a:	0ac3      	lsrs	r3, r0, #11
    4d1c:	428b      	cmp	r3, r1
    4d1e:	d301      	bcc.n	4d24 <__divsi3+0x7c>
    4d20:	02cb      	lsls	r3, r1, #11
    4d22:	1ac0      	subs	r0, r0, r3
    4d24:	4152      	adcs	r2, r2
    4d26:	0a83      	lsrs	r3, r0, #10
    4d28:	428b      	cmp	r3, r1
    4d2a:	d301      	bcc.n	4d30 <__divsi3+0x88>
    4d2c:	028b      	lsls	r3, r1, #10
    4d2e:	1ac0      	subs	r0, r0, r3
    4d30:	4152      	adcs	r2, r2
    4d32:	0a43      	lsrs	r3, r0, #9
    4d34:	428b      	cmp	r3, r1
    4d36:	d301      	bcc.n	4d3c <__divsi3+0x94>
    4d38:	024b      	lsls	r3, r1, #9
    4d3a:	1ac0      	subs	r0, r0, r3
    4d3c:	4152      	adcs	r2, r2
    4d3e:	0a03      	lsrs	r3, r0, #8
    4d40:	428b      	cmp	r3, r1
    4d42:	d301      	bcc.n	4d48 <__divsi3+0xa0>
    4d44:	020b      	lsls	r3, r1, #8
    4d46:	1ac0      	subs	r0, r0, r3
    4d48:	4152      	adcs	r2, r2
    4d4a:	d2cd      	bcs.n	4ce8 <__divsi3+0x40>
    4d4c:	09c3      	lsrs	r3, r0, #7
    4d4e:	428b      	cmp	r3, r1
    4d50:	d301      	bcc.n	4d56 <__divsi3+0xae>
    4d52:	01cb      	lsls	r3, r1, #7
    4d54:	1ac0      	subs	r0, r0, r3
    4d56:	4152      	adcs	r2, r2
    4d58:	0983      	lsrs	r3, r0, #6
    4d5a:	428b      	cmp	r3, r1
    4d5c:	d301      	bcc.n	4d62 <__divsi3+0xba>
    4d5e:	018b      	lsls	r3, r1, #6
    4d60:	1ac0      	subs	r0, r0, r3
    4d62:	4152      	adcs	r2, r2
    4d64:	0943      	lsrs	r3, r0, #5
    4d66:	428b      	cmp	r3, r1
    4d68:	d301      	bcc.n	4d6e <__divsi3+0xc6>
    4d6a:	014b      	lsls	r3, r1, #5
    4d6c:	1ac0      	subs	r0, r0, r3
    4d6e:	4152      	adcs	r2, r2
    4d70:	0903      	lsrs	r3, r0, #4
    4d72:	428b      	cmp	r3, r1
    4d74:	d301      	bcc.n	4d7a <__divsi3+0xd2>
    4d76:	010b      	lsls	r3, r1, #4
    4d78:	1ac0      	subs	r0, r0, r3
    4d7a:	4152      	adcs	r2, r2
    4d7c:	08c3      	lsrs	r3, r0, #3
    4d7e:	428b      	cmp	r3, r1
    4d80:	d301      	bcc.n	4d86 <__divsi3+0xde>
    4d82:	00cb      	lsls	r3, r1, #3
    4d84:	1ac0      	subs	r0, r0, r3
    4d86:	4152      	adcs	r2, r2
    4d88:	0883      	lsrs	r3, r0, #2
    4d8a:	428b      	cmp	r3, r1
    4d8c:	d301      	bcc.n	4d92 <__divsi3+0xea>
    4d8e:	008b      	lsls	r3, r1, #2
    4d90:	1ac0      	subs	r0, r0, r3
    4d92:	4152      	adcs	r2, r2
    4d94:	0843      	lsrs	r3, r0, #1
    4d96:	428b      	cmp	r3, r1
    4d98:	d301      	bcc.n	4d9e <__divsi3+0xf6>
    4d9a:	004b      	lsls	r3, r1, #1
    4d9c:	1ac0      	subs	r0, r0, r3
    4d9e:	4152      	adcs	r2, r2
    4da0:	1a41      	subs	r1, r0, r1
    4da2:	d200      	bcs.n	4da6 <__divsi3+0xfe>
    4da4:	4601      	mov	r1, r0
    4da6:	4152      	adcs	r2, r2
    4da8:	4610      	mov	r0, r2
    4daa:	4770      	bx	lr
    4dac:	e05d      	b.n	4e6a <__divsi3+0x1c2>
    4dae:	0fca      	lsrs	r2, r1, #31
    4db0:	d000      	beq.n	4db4 <__divsi3+0x10c>
    4db2:	4249      	negs	r1, r1
    4db4:	1003      	asrs	r3, r0, #32
    4db6:	d300      	bcc.n	4dba <__divsi3+0x112>
    4db8:	4240      	negs	r0, r0
    4dba:	4053      	eors	r3, r2
    4dbc:	2200      	movs	r2, #0
    4dbe:	469c      	mov	ip, r3
    4dc0:	0903      	lsrs	r3, r0, #4
    4dc2:	428b      	cmp	r3, r1
    4dc4:	d32d      	bcc.n	4e22 <__divsi3+0x17a>
    4dc6:	0a03      	lsrs	r3, r0, #8
    4dc8:	428b      	cmp	r3, r1
    4dca:	d312      	bcc.n	4df2 <__divsi3+0x14a>
    4dcc:	22fc      	movs	r2, #252	; 0xfc
    4dce:	0189      	lsls	r1, r1, #6
    4dd0:	ba12      	rev	r2, r2
    4dd2:	0a03      	lsrs	r3, r0, #8
    4dd4:	428b      	cmp	r3, r1
    4dd6:	d30c      	bcc.n	4df2 <__divsi3+0x14a>
    4dd8:	0189      	lsls	r1, r1, #6
    4dda:	1192      	asrs	r2, r2, #6
    4ddc:	428b      	cmp	r3, r1
    4dde:	d308      	bcc.n	4df2 <__divsi3+0x14a>
    4de0:	0189      	lsls	r1, r1, #6
    4de2:	1192      	asrs	r2, r2, #6
    4de4:	428b      	cmp	r3, r1
    4de6:	d304      	bcc.n	4df2 <__divsi3+0x14a>
    4de8:	0189      	lsls	r1, r1, #6
    4dea:	d03a      	beq.n	4e62 <__divsi3+0x1ba>
    4dec:	1192      	asrs	r2, r2, #6
    4dee:	e000      	b.n	4df2 <__divsi3+0x14a>
    4df0:	0989      	lsrs	r1, r1, #6
    4df2:	09c3      	lsrs	r3, r0, #7
    4df4:	428b      	cmp	r3, r1
    4df6:	d301      	bcc.n	4dfc <__divsi3+0x154>
    4df8:	01cb      	lsls	r3, r1, #7
    4dfa:	1ac0      	subs	r0, r0, r3
    4dfc:	4152      	adcs	r2, r2
    4dfe:	0983      	lsrs	r3, r0, #6
    4e00:	428b      	cmp	r3, r1
    4e02:	d301      	bcc.n	4e08 <__divsi3+0x160>
    4e04:	018b      	lsls	r3, r1, #6
    4e06:	1ac0      	subs	r0, r0, r3
    4e08:	4152      	adcs	r2, r2
    4e0a:	0943      	lsrs	r3, r0, #5
    4e0c:	428b      	cmp	r3, r1
    4e0e:	d301      	bcc.n	4e14 <__divsi3+0x16c>
    4e10:	014b      	lsls	r3, r1, #5
    4e12:	1ac0      	subs	r0, r0, r3
    4e14:	4152      	adcs	r2, r2
    4e16:	0903      	lsrs	r3, r0, #4
    4e18:	428b      	cmp	r3, r1
    4e1a:	d301      	bcc.n	4e20 <__divsi3+0x178>
    4e1c:	010b      	lsls	r3, r1, #4
    4e1e:	1ac0      	subs	r0, r0, r3
    4e20:	4152      	adcs	r2, r2
    4e22:	08c3      	lsrs	r3, r0, #3
    4e24:	428b      	cmp	r3, r1
    4e26:	d301      	bcc.n	4e2c <__divsi3+0x184>
    4e28:	00cb      	lsls	r3, r1, #3
    4e2a:	1ac0      	subs	r0, r0, r3
    4e2c:	4152      	adcs	r2, r2
    4e2e:	0883      	lsrs	r3, r0, #2
    4e30:	428b      	cmp	r3, r1
    4e32:	d301      	bcc.n	4e38 <__divsi3+0x190>
    4e34:	008b      	lsls	r3, r1, #2
    4e36:	1ac0      	subs	r0, r0, r3
    4e38:	4152      	adcs	r2, r2
    4e3a:	d2d9      	bcs.n	4df0 <__divsi3+0x148>
    4e3c:	0843      	lsrs	r3, r0, #1
    4e3e:	428b      	cmp	r3, r1
    4e40:	d301      	bcc.n	4e46 <__divsi3+0x19e>
    4e42:	004b      	lsls	r3, r1, #1
    4e44:	1ac0      	subs	r0, r0, r3
    4e46:	4152      	adcs	r2, r2
    4e48:	1a41      	subs	r1, r0, r1
    4e4a:	d200      	bcs.n	4e4e <__divsi3+0x1a6>
    4e4c:	4601      	mov	r1, r0
    4e4e:	4663      	mov	r3, ip
    4e50:	4152      	adcs	r2, r2
    4e52:	105b      	asrs	r3, r3, #1
    4e54:	4610      	mov	r0, r2
    4e56:	d301      	bcc.n	4e5c <__divsi3+0x1b4>
    4e58:	4240      	negs	r0, r0
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d500      	bpl.n	4e60 <__divsi3+0x1b8>
    4e5e:	4249      	negs	r1, r1
    4e60:	4770      	bx	lr
    4e62:	4663      	mov	r3, ip
    4e64:	105b      	asrs	r3, r3, #1
    4e66:	d300      	bcc.n	4e6a <__divsi3+0x1c2>
    4e68:	4240      	negs	r0, r0
    4e6a:	b501      	push	{r0, lr}
    4e6c:	2000      	movs	r0, #0
    4e6e:	f000 f805 	bl	4e7c <__aeabi_idiv0>
    4e72:	bd02      	pop	{r1, pc}

00004e74 <__aeabi_idivmod>:
    4e74:	2900      	cmp	r1, #0
    4e76:	d0f8      	beq.n	4e6a <__divsi3+0x1c2>
    4e78:	e716      	b.n	4ca8 <__divsi3>
    4e7a:	4770      	bx	lr

00004e7c <__aeabi_idiv0>:
    4e7c:	4770      	bx	lr
    4e7e:	46c0      	nop			; (mov r8, r8)

00004e80 <__clzsi2>:
    4e80:	211c      	movs	r1, #28
    4e82:	2301      	movs	r3, #1
    4e84:	041b      	lsls	r3, r3, #16
    4e86:	4298      	cmp	r0, r3
    4e88:	d301      	bcc.n	4e8e <__clzsi2+0xe>
    4e8a:	0c00      	lsrs	r0, r0, #16
    4e8c:	3910      	subs	r1, #16
    4e8e:	0a1b      	lsrs	r3, r3, #8
    4e90:	4298      	cmp	r0, r3
    4e92:	d301      	bcc.n	4e98 <__clzsi2+0x18>
    4e94:	0a00      	lsrs	r0, r0, #8
    4e96:	3908      	subs	r1, #8
    4e98:	091b      	lsrs	r3, r3, #4
    4e9a:	4298      	cmp	r0, r3
    4e9c:	d301      	bcc.n	4ea2 <__clzsi2+0x22>
    4e9e:	0900      	lsrs	r0, r0, #4
    4ea0:	3904      	subs	r1, #4
    4ea2:	a202      	add	r2, pc, #8	; (adr r2, 4eac <__clzsi2+0x2c>)
    4ea4:	5c10      	ldrb	r0, [r2, r0]
    4ea6:	1840      	adds	r0, r0, r1
    4ea8:	4770      	bx	lr
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	02020304 	.word	0x02020304
    4eb0:	01010101 	.word	0x01010101
	...

00004ebc <__ctzsi2>:
    4ebc:	4241      	negs	r1, r0
    4ebe:	4008      	ands	r0, r1
    4ec0:	211c      	movs	r1, #28
    4ec2:	2301      	movs	r3, #1
    4ec4:	041b      	lsls	r3, r3, #16
    4ec6:	4298      	cmp	r0, r3
    4ec8:	d301      	bcc.n	4ece <__ctzsi2+0x12>
    4eca:	0c00      	lsrs	r0, r0, #16
    4ecc:	3910      	subs	r1, #16
    4ece:	0a1b      	lsrs	r3, r3, #8
    4ed0:	4298      	cmp	r0, r3
    4ed2:	d301      	bcc.n	4ed8 <__ctzsi2+0x1c>
    4ed4:	0a00      	lsrs	r0, r0, #8
    4ed6:	3908      	subs	r1, #8
    4ed8:	091b      	lsrs	r3, r3, #4
    4eda:	4298      	cmp	r0, r3
    4edc:	d301      	bcc.n	4ee2 <__ctzsi2+0x26>
    4ede:	0900      	lsrs	r0, r0, #4
    4ee0:	3904      	subs	r1, #4
    4ee2:	a202      	add	r2, pc, #8	; (adr r2, 4eec <__ctzsi2+0x30>)
    4ee4:	5c10      	ldrb	r0, [r2, r0]
    4ee6:	1a40      	subs	r0, r0, r1
    4ee8:	4770      	bx	lr
    4eea:	46c0      	nop			; (mov r8, r8)
    4eec:	1d1d1c1b 	.word	0x1d1d1c1b
    4ef0:	1e1e1e1e 	.word	0x1e1e1e1e
    4ef4:	1f1f1f1f 	.word	0x1f1f1f1f
    4ef8:	1f1f1f1f 	.word	0x1f1f1f1f

00004efc <__aeabi_ddiv>:
    4efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4efe:	4657      	mov	r7, sl
    4f00:	4645      	mov	r5, r8
    4f02:	46de      	mov	lr, fp
    4f04:	464e      	mov	r6, r9
    4f06:	b5e0      	push	{r5, r6, r7, lr}
    4f08:	004c      	lsls	r4, r1, #1
    4f0a:	030e      	lsls	r6, r1, #12
    4f0c:	b087      	sub	sp, #28
    4f0e:	4683      	mov	fp, r0
    4f10:	4692      	mov	sl, r2
    4f12:	001d      	movs	r5, r3
    4f14:	4680      	mov	r8, r0
    4f16:	0b36      	lsrs	r6, r6, #12
    4f18:	0d64      	lsrs	r4, r4, #21
    4f1a:	0fcf      	lsrs	r7, r1, #31
    4f1c:	2c00      	cmp	r4, #0
    4f1e:	d04f      	beq.n	4fc0 <__aeabi_ddiv+0xc4>
    4f20:	4b6f      	ldr	r3, [pc, #444]	; (50e0 <__aeabi_ddiv+0x1e4>)
    4f22:	429c      	cmp	r4, r3
    4f24:	d035      	beq.n	4f92 <__aeabi_ddiv+0x96>
    4f26:	2380      	movs	r3, #128	; 0x80
    4f28:	0f42      	lsrs	r2, r0, #29
    4f2a:	041b      	lsls	r3, r3, #16
    4f2c:	00f6      	lsls	r6, r6, #3
    4f2e:	4313      	orrs	r3, r2
    4f30:	4333      	orrs	r3, r6
    4f32:	4699      	mov	r9, r3
    4f34:	00c3      	lsls	r3, r0, #3
    4f36:	4698      	mov	r8, r3
    4f38:	4b6a      	ldr	r3, [pc, #424]	; (50e4 <__aeabi_ddiv+0x1e8>)
    4f3a:	2600      	movs	r6, #0
    4f3c:	469c      	mov	ip, r3
    4f3e:	2300      	movs	r3, #0
    4f40:	4464      	add	r4, ip
    4f42:	9303      	str	r3, [sp, #12]
    4f44:	032b      	lsls	r3, r5, #12
    4f46:	0b1b      	lsrs	r3, r3, #12
    4f48:	469b      	mov	fp, r3
    4f4a:	006b      	lsls	r3, r5, #1
    4f4c:	0fed      	lsrs	r5, r5, #31
    4f4e:	4650      	mov	r0, sl
    4f50:	0d5b      	lsrs	r3, r3, #21
    4f52:	9501      	str	r5, [sp, #4]
    4f54:	d05e      	beq.n	5014 <__aeabi_ddiv+0x118>
    4f56:	4a62      	ldr	r2, [pc, #392]	; (50e0 <__aeabi_ddiv+0x1e4>)
    4f58:	4293      	cmp	r3, r2
    4f5a:	d053      	beq.n	5004 <__aeabi_ddiv+0x108>
    4f5c:	465a      	mov	r2, fp
    4f5e:	00d1      	lsls	r1, r2, #3
    4f60:	2280      	movs	r2, #128	; 0x80
    4f62:	0f40      	lsrs	r0, r0, #29
    4f64:	0412      	lsls	r2, r2, #16
    4f66:	4302      	orrs	r2, r0
    4f68:	430a      	orrs	r2, r1
    4f6a:	4693      	mov	fp, r2
    4f6c:	4652      	mov	r2, sl
    4f6e:	00d1      	lsls	r1, r2, #3
    4f70:	4a5c      	ldr	r2, [pc, #368]	; (50e4 <__aeabi_ddiv+0x1e8>)
    4f72:	4694      	mov	ip, r2
    4f74:	2200      	movs	r2, #0
    4f76:	4463      	add	r3, ip
    4f78:	0038      	movs	r0, r7
    4f7a:	4068      	eors	r0, r5
    4f7c:	4684      	mov	ip, r0
    4f7e:	9002      	str	r0, [sp, #8]
    4f80:	1ae4      	subs	r4, r4, r3
    4f82:	4316      	orrs	r6, r2
    4f84:	2e0f      	cmp	r6, #15
    4f86:	d900      	bls.n	4f8a <__aeabi_ddiv+0x8e>
    4f88:	e0b4      	b.n	50f4 <__aeabi_ddiv+0x1f8>
    4f8a:	4b57      	ldr	r3, [pc, #348]	; (50e8 <__aeabi_ddiv+0x1ec>)
    4f8c:	00b6      	lsls	r6, r6, #2
    4f8e:	599b      	ldr	r3, [r3, r6]
    4f90:	469f      	mov	pc, r3
    4f92:	0003      	movs	r3, r0
    4f94:	4333      	orrs	r3, r6
    4f96:	4699      	mov	r9, r3
    4f98:	d16c      	bne.n	5074 <__aeabi_ddiv+0x178>
    4f9a:	2300      	movs	r3, #0
    4f9c:	4698      	mov	r8, r3
    4f9e:	3302      	adds	r3, #2
    4fa0:	2608      	movs	r6, #8
    4fa2:	9303      	str	r3, [sp, #12]
    4fa4:	e7ce      	b.n	4f44 <__aeabi_ddiv+0x48>
    4fa6:	46cb      	mov	fp, r9
    4fa8:	4641      	mov	r1, r8
    4faa:	9a03      	ldr	r2, [sp, #12]
    4fac:	9701      	str	r7, [sp, #4]
    4fae:	2a02      	cmp	r2, #2
    4fb0:	d165      	bne.n	507e <__aeabi_ddiv+0x182>
    4fb2:	9b01      	ldr	r3, [sp, #4]
    4fb4:	4c4a      	ldr	r4, [pc, #296]	; (50e0 <__aeabi_ddiv+0x1e4>)
    4fb6:	469c      	mov	ip, r3
    4fb8:	2300      	movs	r3, #0
    4fba:	2200      	movs	r2, #0
    4fbc:	4698      	mov	r8, r3
    4fbe:	e06b      	b.n	5098 <__aeabi_ddiv+0x19c>
    4fc0:	0003      	movs	r3, r0
    4fc2:	4333      	orrs	r3, r6
    4fc4:	4699      	mov	r9, r3
    4fc6:	d04e      	beq.n	5066 <__aeabi_ddiv+0x16a>
    4fc8:	2e00      	cmp	r6, #0
    4fca:	d100      	bne.n	4fce <__aeabi_ddiv+0xd2>
    4fcc:	e1bc      	b.n	5348 <__aeabi_ddiv+0x44c>
    4fce:	0030      	movs	r0, r6
    4fd0:	f7ff ff56 	bl	4e80 <__clzsi2>
    4fd4:	0003      	movs	r3, r0
    4fd6:	3b0b      	subs	r3, #11
    4fd8:	2b1c      	cmp	r3, #28
    4fda:	dd00      	ble.n	4fde <__aeabi_ddiv+0xe2>
    4fdc:	e1ac      	b.n	5338 <__aeabi_ddiv+0x43c>
    4fde:	221d      	movs	r2, #29
    4fe0:	1ad3      	subs	r3, r2, r3
    4fe2:	465a      	mov	r2, fp
    4fe4:	0001      	movs	r1, r0
    4fe6:	40da      	lsrs	r2, r3
    4fe8:	3908      	subs	r1, #8
    4fea:	408e      	lsls	r6, r1
    4fec:	0013      	movs	r3, r2
    4fee:	4333      	orrs	r3, r6
    4ff0:	4699      	mov	r9, r3
    4ff2:	465b      	mov	r3, fp
    4ff4:	408b      	lsls	r3, r1
    4ff6:	4698      	mov	r8, r3
    4ff8:	2300      	movs	r3, #0
    4ffa:	4c3c      	ldr	r4, [pc, #240]	; (50ec <__aeabi_ddiv+0x1f0>)
    4ffc:	2600      	movs	r6, #0
    4ffe:	1a24      	subs	r4, r4, r0
    5000:	9303      	str	r3, [sp, #12]
    5002:	e79f      	b.n	4f44 <__aeabi_ddiv+0x48>
    5004:	4651      	mov	r1, sl
    5006:	465a      	mov	r2, fp
    5008:	4311      	orrs	r1, r2
    500a:	d129      	bne.n	5060 <__aeabi_ddiv+0x164>
    500c:	2200      	movs	r2, #0
    500e:	4693      	mov	fp, r2
    5010:	3202      	adds	r2, #2
    5012:	e7b1      	b.n	4f78 <__aeabi_ddiv+0x7c>
    5014:	4659      	mov	r1, fp
    5016:	4301      	orrs	r1, r0
    5018:	d01e      	beq.n	5058 <__aeabi_ddiv+0x15c>
    501a:	465b      	mov	r3, fp
    501c:	2b00      	cmp	r3, #0
    501e:	d100      	bne.n	5022 <__aeabi_ddiv+0x126>
    5020:	e19e      	b.n	5360 <__aeabi_ddiv+0x464>
    5022:	4658      	mov	r0, fp
    5024:	f7ff ff2c 	bl	4e80 <__clzsi2>
    5028:	0003      	movs	r3, r0
    502a:	3b0b      	subs	r3, #11
    502c:	2b1c      	cmp	r3, #28
    502e:	dd00      	ble.n	5032 <__aeabi_ddiv+0x136>
    5030:	e18f      	b.n	5352 <__aeabi_ddiv+0x456>
    5032:	0002      	movs	r2, r0
    5034:	4659      	mov	r1, fp
    5036:	3a08      	subs	r2, #8
    5038:	4091      	lsls	r1, r2
    503a:	468b      	mov	fp, r1
    503c:	211d      	movs	r1, #29
    503e:	1acb      	subs	r3, r1, r3
    5040:	4651      	mov	r1, sl
    5042:	40d9      	lsrs	r1, r3
    5044:	000b      	movs	r3, r1
    5046:	4659      	mov	r1, fp
    5048:	430b      	orrs	r3, r1
    504a:	4651      	mov	r1, sl
    504c:	469b      	mov	fp, r3
    504e:	4091      	lsls	r1, r2
    5050:	4b26      	ldr	r3, [pc, #152]	; (50ec <__aeabi_ddiv+0x1f0>)
    5052:	2200      	movs	r2, #0
    5054:	1a1b      	subs	r3, r3, r0
    5056:	e78f      	b.n	4f78 <__aeabi_ddiv+0x7c>
    5058:	2300      	movs	r3, #0
    505a:	2201      	movs	r2, #1
    505c:	469b      	mov	fp, r3
    505e:	e78b      	b.n	4f78 <__aeabi_ddiv+0x7c>
    5060:	4651      	mov	r1, sl
    5062:	2203      	movs	r2, #3
    5064:	e788      	b.n	4f78 <__aeabi_ddiv+0x7c>
    5066:	2300      	movs	r3, #0
    5068:	4698      	mov	r8, r3
    506a:	3301      	adds	r3, #1
    506c:	2604      	movs	r6, #4
    506e:	2400      	movs	r4, #0
    5070:	9303      	str	r3, [sp, #12]
    5072:	e767      	b.n	4f44 <__aeabi_ddiv+0x48>
    5074:	2303      	movs	r3, #3
    5076:	46b1      	mov	r9, r6
    5078:	9303      	str	r3, [sp, #12]
    507a:	260c      	movs	r6, #12
    507c:	e762      	b.n	4f44 <__aeabi_ddiv+0x48>
    507e:	2a03      	cmp	r2, #3
    5080:	d100      	bne.n	5084 <__aeabi_ddiv+0x188>
    5082:	e25c      	b.n	553e <__aeabi_ddiv+0x642>
    5084:	9b01      	ldr	r3, [sp, #4]
    5086:	2a01      	cmp	r2, #1
    5088:	d000      	beq.n	508c <__aeabi_ddiv+0x190>
    508a:	e1e4      	b.n	5456 <__aeabi_ddiv+0x55a>
    508c:	4013      	ands	r3, r2
    508e:	469c      	mov	ip, r3
    5090:	2300      	movs	r3, #0
    5092:	2400      	movs	r4, #0
    5094:	2200      	movs	r2, #0
    5096:	4698      	mov	r8, r3
    5098:	2100      	movs	r1, #0
    509a:	0312      	lsls	r2, r2, #12
    509c:	0b13      	lsrs	r3, r2, #12
    509e:	0d0a      	lsrs	r2, r1, #20
    50a0:	0512      	lsls	r2, r2, #20
    50a2:	431a      	orrs	r2, r3
    50a4:	0523      	lsls	r3, r4, #20
    50a6:	4c12      	ldr	r4, [pc, #72]	; (50f0 <__aeabi_ddiv+0x1f4>)
    50a8:	4640      	mov	r0, r8
    50aa:	4022      	ands	r2, r4
    50ac:	4313      	orrs	r3, r2
    50ae:	4662      	mov	r2, ip
    50b0:	005b      	lsls	r3, r3, #1
    50b2:	07d2      	lsls	r2, r2, #31
    50b4:	085b      	lsrs	r3, r3, #1
    50b6:	4313      	orrs	r3, r2
    50b8:	0019      	movs	r1, r3
    50ba:	b007      	add	sp, #28
    50bc:	bc3c      	pop	{r2, r3, r4, r5}
    50be:	4690      	mov	r8, r2
    50c0:	4699      	mov	r9, r3
    50c2:	46a2      	mov	sl, r4
    50c4:	46ab      	mov	fp, r5
    50c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c8:	2300      	movs	r3, #0
    50ca:	2280      	movs	r2, #128	; 0x80
    50cc:	469c      	mov	ip, r3
    50ce:	0312      	lsls	r2, r2, #12
    50d0:	4698      	mov	r8, r3
    50d2:	4c03      	ldr	r4, [pc, #12]	; (50e0 <__aeabi_ddiv+0x1e4>)
    50d4:	e7e0      	b.n	5098 <__aeabi_ddiv+0x19c>
    50d6:	2300      	movs	r3, #0
    50d8:	4c01      	ldr	r4, [pc, #4]	; (50e0 <__aeabi_ddiv+0x1e4>)
    50da:	2200      	movs	r2, #0
    50dc:	4698      	mov	r8, r3
    50de:	e7db      	b.n	5098 <__aeabi_ddiv+0x19c>
    50e0:	000007ff 	.word	0x000007ff
    50e4:	fffffc01 	.word	0xfffffc01
    50e8:	00006c70 	.word	0x00006c70
    50ec:	fffffc0d 	.word	0xfffffc0d
    50f0:	800fffff 	.word	0x800fffff
    50f4:	45d9      	cmp	r9, fp
    50f6:	d900      	bls.n	50fa <__aeabi_ddiv+0x1fe>
    50f8:	e139      	b.n	536e <__aeabi_ddiv+0x472>
    50fa:	d100      	bne.n	50fe <__aeabi_ddiv+0x202>
    50fc:	e134      	b.n	5368 <__aeabi_ddiv+0x46c>
    50fe:	2300      	movs	r3, #0
    5100:	4646      	mov	r6, r8
    5102:	464d      	mov	r5, r9
    5104:	469a      	mov	sl, r3
    5106:	3c01      	subs	r4, #1
    5108:	465b      	mov	r3, fp
    510a:	0e0a      	lsrs	r2, r1, #24
    510c:	021b      	lsls	r3, r3, #8
    510e:	431a      	orrs	r2, r3
    5110:	020b      	lsls	r3, r1, #8
    5112:	0c17      	lsrs	r7, r2, #16
    5114:	9303      	str	r3, [sp, #12]
    5116:	0413      	lsls	r3, r2, #16
    5118:	0c1b      	lsrs	r3, r3, #16
    511a:	0039      	movs	r1, r7
    511c:	0028      	movs	r0, r5
    511e:	4690      	mov	r8, r2
    5120:	9301      	str	r3, [sp, #4]
    5122:	f7ff fd37 	bl	4b94 <__udivsi3>
    5126:	0002      	movs	r2, r0
    5128:	9b01      	ldr	r3, [sp, #4]
    512a:	4683      	mov	fp, r0
    512c:	435a      	muls	r2, r3
    512e:	0028      	movs	r0, r5
    5130:	0039      	movs	r1, r7
    5132:	4691      	mov	r9, r2
    5134:	f7ff fdb4 	bl	4ca0 <__aeabi_uidivmod>
    5138:	0c35      	lsrs	r5, r6, #16
    513a:	0409      	lsls	r1, r1, #16
    513c:	430d      	orrs	r5, r1
    513e:	45a9      	cmp	r9, r5
    5140:	d90d      	bls.n	515e <__aeabi_ddiv+0x262>
    5142:	465b      	mov	r3, fp
    5144:	4445      	add	r5, r8
    5146:	3b01      	subs	r3, #1
    5148:	45a8      	cmp	r8, r5
    514a:	d900      	bls.n	514e <__aeabi_ddiv+0x252>
    514c:	e13a      	b.n	53c4 <__aeabi_ddiv+0x4c8>
    514e:	45a9      	cmp	r9, r5
    5150:	d800      	bhi.n	5154 <__aeabi_ddiv+0x258>
    5152:	e137      	b.n	53c4 <__aeabi_ddiv+0x4c8>
    5154:	2302      	movs	r3, #2
    5156:	425b      	negs	r3, r3
    5158:	469c      	mov	ip, r3
    515a:	4445      	add	r5, r8
    515c:	44e3      	add	fp, ip
    515e:	464b      	mov	r3, r9
    5160:	1aeb      	subs	r3, r5, r3
    5162:	0039      	movs	r1, r7
    5164:	0018      	movs	r0, r3
    5166:	9304      	str	r3, [sp, #16]
    5168:	f7ff fd14 	bl	4b94 <__udivsi3>
    516c:	9b01      	ldr	r3, [sp, #4]
    516e:	0005      	movs	r5, r0
    5170:	4343      	muls	r3, r0
    5172:	0039      	movs	r1, r7
    5174:	9804      	ldr	r0, [sp, #16]
    5176:	4699      	mov	r9, r3
    5178:	f7ff fd92 	bl	4ca0 <__aeabi_uidivmod>
    517c:	0433      	lsls	r3, r6, #16
    517e:	0409      	lsls	r1, r1, #16
    5180:	0c1b      	lsrs	r3, r3, #16
    5182:	430b      	orrs	r3, r1
    5184:	4599      	cmp	r9, r3
    5186:	d909      	bls.n	519c <__aeabi_ddiv+0x2a0>
    5188:	4443      	add	r3, r8
    518a:	1e6a      	subs	r2, r5, #1
    518c:	4598      	cmp	r8, r3
    518e:	d900      	bls.n	5192 <__aeabi_ddiv+0x296>
    5190:	e11a      	b.n	53c8 <__aeabi_ddiv+0x4cc>
    5192:	4599      	cmp	r9, r3
    5194:	d800      	bhi.n	5198 <__aeabi_ddiv+0x29c>
    5196:	e117      	b.n	53c8 <__aeabi_ddiv+0x4cc>
    5198:	3d02      	subs	r5, #2
    519a:	4443      	add	r3, r8
    519c:	464a      	mov	r2, r9
    519e:	1a9b      	subs	r3, r3, r2
    51a0:	465a      	mov	r2, fp
    51a2:	0412      	lsls	r2, r2, #16
    51a4:	432a      	orrs	r2, r5
    51a6:	9903      	ldr	r1, [sp, #12]
    51a8:	4693      	mov	fp, r2
    51aa:	0c10      	lsrs	r0, r2, #16
    51ac:	0c0a      	lsrs	r2, r1, #16
    51ae:	4691      	mov	r9, r2
    51b0:	0409      	lsls	r1, r1, #16
    51b2:	465a      	mov	r2, fp
    51b4:	0c09      	lsrs	r1, r1, #16
    51b6:	464e      	mov	r6, r9
    51b8:	000d      	movs	r5, r1
    51ba:	0412      	lsls	r2, r2, #16
    51bc:	0c12      	lsrs	r2, r2, #16
    51be:	4345      	muls	r5, r0
    51c0:	9105      	str	r1, [sp, #20]
    51c2:	4351      	muls	r1, r2
    51c4:	4372      	muls	r2, r6
    51c6:	4370      	muls	r0, r6
    51c8:	1952      	adds	r2, r2, r5
    51ca:	0c0e      	lsrs	r6, r1, #16
    51cc:	18b2      	adds	r2, r6, r2
    51ce:	4295      	cmp	r5, r2
    51d0:	d903      	bls.n	51da <__aeabi_ddiv+0x2de>
    51d2:	2580      	movs	r5, #128	; 0x80
    51d4:	026d      	lsls	r5, r5, #9
    51d6:	46ac      	mov	ip, r5
    51d8:	4460      	add	r0, ip
    51da:	0c15      	lsrs	r5, r2, #16
    51dc:	0409      	lsls	r1, r1, #16
    51de:	0412      	lsls	r2, r2, #16
    51e0:	0c09      	lsrs	r1, r1, #16
    51e2:	1828      	adds	r0, r5, r0
    51e4:	1852      	adds	r2, r2, r1
    51e6:	4283      	cmp	r3, r0
    51e8:	d200      	bcs.n	51ec <__aeabi_ddiv+0x2f0>
    51ea:	e0ce      	b.n	538a <__aeabi_ddiv+0x48e>
    51ec:	d100      	bne.n	51f0 <__aeabi_ddiv+0x2f4>
    51ee:	e0c8      	b.n	5382 <__aeabi_ddiv+0x486>
    51f0:	1a1d      	subs	r5, r3, r0
    51f2:	4653      	mov	r3, sl
    51f4:	1a9e      	subs	r6, r3, r2
    51f6:	45b2      	cmp	sl, r6
    51f8:	4192      	sbcs	r2, r2
    51fa:	4252      	negs	r2, r2
    51fc:	1aab      	subs	r3, r5, r2
    51fe:	469a      	mov	sl, r3
    5200:	4598      	cmp	r8, r3
    5202:	d100      	bne.n	5206 <__aeabi_ddiv+0x30a>
    5204:	e117      	b.n	5436 <__aeabi_ddiv+0x53a>
    5206:	0039      	movs	r1, r7
    5208:	0018      	movs	r0, r3
    520a:	f7ff fcc3 	bl	4b94 <__udivsi3>
    520e:	9b01      	ldr	r3, [sp, #4]
    5210:	0005      	movs	r5, r0
    5212:	4343      	muls	r3, r0
    5214:	0039      	movs	r1, r7
    5216:	4650      	mov	r0, sl
    5218:	9304      	str	r3, [sp, #16]
    521a:	f7ff fd41 	bl	4ca0 <__aeabi_uidivmod>
    521e:	9804      	ldr	r0, [sp, #16]
    5220:	040b      	lsls	r3, r1, #16
    5222:	0c31      	lsrs	r1, r6, #16
    5224:	4319      	orrs	r1, r3
    5226:	4288      	cmp	r0, r1
    5228:	d909      	bls.n	523e <__aeabi_ddiv+0x342>
    522a:	4441      	add	r1, r8
    522c:	1e6b      	subs	r3, r5, #1
    522e:	4588      	cmp	r8, r1
    5230:	d900      	bls.n	5234 <__aeabi_ddiv+0x338>
    5232:	e107      	b.n	5444 <__aeabi_ddiv+0x548>
    5234:	4288      	cmp	r0, r1
    5236:	d800      	bhi.n	523a <__aeabi_ddiv+0x33e>
    5238:	e104      	b.n	5444 <__aeabi_ddiv+0x548>
    523a:	3d02      	subs	r5, #2
    523c:	4441      	add	r1, r8
    523e:	9b04      	ldr	r3, [sp, #16]
    5240:	1acb      	subs	r3, r1, r3
    5242:	0018      	movs	r0, r3
    5244:	0039      	movs	r1, r7
    5246:	9304      	str	r3, [sp, #16]
    5248:	f7ff fca4 	bl	4b94 <__udivsi3>
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	4682      	mov	sl, r0
    5250:	4343      	muls	r3, r0
    5252:	0039      	movs	r1, r7
    5254:	9804      	ldr	r0, [sp, #16]
    5256:	9301      	str	r3, [sp, #4]
    5258:	f7ff fd22 	bl	4ca0 <__aeabi_uidivmod>
    525c:	9801      	ldr	r0, [sp, #4]
    525e:	040b      	lsls	r3, r1, #16
    5260:	0431      	lsls	r1, r6, #16
    5262:	0c09      	lsrs	r1, r1, #16
    5264:	4319      	orrs	r1, r3
    5266:	4288      	cmp	r0, r1
    5268:	d90d      	bls.n	5286 <__aeabi_ddiv+0x38a>
    526a:	4653      	mov	r3, sl
    526c:	4441      	add	r1, r8
    526e:	3b01      	subs	r3, #1
    5270:	4588      	cmp	r8, r1
    5272:	d900      	bls.n	5276 <__aeabi_ddiv+0x37a>
    5274:	e0e8      	b.n	5448 <__aeabi_ddiv+0x54c>
    5276:	4288      	cmp	r0, r1
    5278:	d800      	bhi.n	527c <__aeabi_ddiv+0x380>
    527a:	e0e5      	b.n	5448 <__aeabi_ddiv+0x54c>
    527c:	2302      	movs	r3, #2
    527e:	425b      	negs	r3, r3
    5280:	469c      	mov	ip, r3
    5282:	4441      	add	r1, r8
    5284:	44e2      	add	sl, ip
    5286:	9b01      	ldr	r3, [sp, #4]
    5288:	042d      	lsls	r5, r5, #16
    528a:	1ace      	subs	r6, r1, r3
    528c:	4651      	mov	r1, sl
    528e:	4329      	orrs	r1, r5
    5290:	9d05      	ldr	r5, [sp, #20]
    5292:	464f      	mov	r7, r9
    5294:	002a      	movs	r2, r5
    5296:	040b      	lsls	r3, r1, #16
    5298:	0c08      	lsrs	r0, r1, #16
    529a:	0c1b      	lsrs	r3, r3, #16
    529c:	435a      	muls	r2, r3
    529e:	4345      	muls	r5, r0
    52a0:	437b      	muls	r3, r7
    52a2:	4378      	muls	r0, r7
    52a4:	195b      	adds	r3, r3, r5
    52a6:	0c17      	lsrs	r7, r2, #16
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	429d      	cmp	r5, r3
    52ac:	d903      	bls.n	52b6 <__aeabi_ddiv+0x3ba>
    52ae:	2580      	movs	r5, #128	; 0x80
    52b0:	026d      	lsls	r5, r5, #9
    52b2:	46ac      	mov	ip, r5
    52b4:	4460      	add	r0, ip
    52b6:	0c1d      	lsrs	r5, r3, #16
    52b8:	0412      	lsls	r2, r2, #16
    52ba:	041b      	lsls	r3, r3, #16
    52bc:	0c12      	lsrs	r2, r2, #16
    52be:	1828      	adds	r0, r5, r0
    52c0:	189b      	adds	r3, r3, r2
    52c2:	4286      	cmp	r6, r0
    52c4:	d200      	bcs.n	52c8 <__aeabi_ddiv+0x3cc>
    52c6:	e093      	b.n	53f0 <__aeabi_ddiv+0x4f4>
    52c8:	d100      	bne.n	52cc <__aeabi_ddiv+0x3d0>
    52ca:	e08e      	b.n	53ea <__aeabi_ddiv+0x4ee>
    52cc:	2301      	movs	r3, #1
    52ce:	4319      	orrs	r1, r3
    52d0:	4ba0      	ldr	r3, [pc, #640]	; (5554 <__aeabi_ddiv+0x658>)
    52d2:	18e3      	adds	r3, r4, r3
    52d4:	2b00      	cmp	r3, #0
    52d6:	dc00      	bgt.n	52da <__aeabi_ddiv+0x3de>
    52d8:	e099      	b.n	540e <__aeabi_ddiv+0x512>
    52da:	074a      	lsls	r2, r1, #29
    52dc:	d000      	beq.n	52e0 <__aeabi_ddiv+0x3e4>
    52de:	e09e      	b.n	541e <__aeabi_ddiv+0x522>
    52e0:	465a      	mov	r2, fp
    52e2:	01d2      	lsls	r2, r2, #7
    52e4:	d506      	bpl.n	52f4 <__aeabi_ddiv+0x3f8>
    52e6:	465a      	mov	r2, fp
    52e8:	4b9b      	ldr	r3, [pc, #620]	; (5558 <__aeabi_ddiv+0x65c>)
    52ea:	401a      	ands	r2, r3
    52ec:	2380      	movs	r3, #128	; 0x80
    52ee:	4693      	mov	fp, r2
    52f0:	00db      	lsls	r3, r3, #3
    52f2:	18e3      	adds	r3, r4, r3
    52f4:	4a99      	ldr	r2, [pc, #612]	; (555c <__aeabi_ddiv+0x660>)
    52f6:	4293      	cmp	r3, r2
    52f8:	dd68      	ble.n	53cc <__aeabi_ddiv+0x4d0>
    52fa:	2301      	movs	r3, #1
    52fc:	9a02      	ldr	r2, [sp, #8]
    52fe:	4c98      	ldr	r4, [pc, #608]	; (5560 <__aeabi_ddiv+0x664>)
    5300:	401a      	ands	r2, r3
    5302:	2300      	movs	r3, #0
    5304:	4694      	mov	ip, r2
    5306:	4698      	mov	r8, r3
    5308:	2200      	movs	r2, #0
    530a:	e6c5      	b.n	5098 <__aeabi_ddiv+0x19c>
    530c:	2280      	movs	r2, #128	; 0x80
    530e:	464b      	mov	r3, r9
    5310:	0312      	lsls	r2, r2, #12
    5312:	4213      	tst	r3, r2
    5314:	d00a      	beq.n	532c <__aeabi_ddiv+0x430>
    5316:	465b      	mov	r3, fp
    5318:	4213      	tst	r3, r2
    531a:	d106      	bne.n	532a <__aeabi_ddiv+0x42e>
    531c:	431a      	orrs	r2, r3
    531e:	0312      	lsls	r2, r2, #12
    5320:	0b12      	lsrs	r2, r2, #12
    5322:	46ac      	mov	ip, r5
    5324:	4688      	mov	r8, r1
    5326:	4c8e      	ldr	r4, [pc, #568]	; (5560 <__aeabi_ddiv+0x664>)
    5328:	e6b6      	b.n	5098 <__aeabi_ddiv+0x19c>
    532a:	464b      	mov	r3, r9
    532c:	431a      	orrs	r2, r3
    532e:	0312      	lsls	r2, r2, #12
    5330:	0b12      	lsrs	r2, r2, #12
    5332:	46bc      	mov	ip, r7
    5334:	4c8a      	ldr	r4, [pc, #552]	; (5560 <__aeabi_ddiv+0x664>)
    5336:	e6af      	b.n	5098 <__aeabi_ddiv+0x19c>
    5338:	0003      	movs	r3, r0
    533a:	465a      	mov	r2, fp
    533c:	3b28      	subs	r3, #40	; 0x28
    533e:	409a      	lsls	r2, r3
    5340:	2300      	movs	r3, #0
    5342:	4691      	mov	r9, r2
    5344:	4698      	mov	r8, r3
    5346:	e657      	b.n	4ff8 <__aeabi_ddiv+0xfc>
    5348:	4658      	mov	r0, fp
    534a:	f7ff fd99 	bl	4e80 <__clzsi2>
    534e:	3020      	adds	r0, #32
    5350:	e640      	b.n	4fd4 <__aeabi_ddiv+0xd8>
    5352:	0003      	movs	r3, r0
    5354:	4652      	mov	r2, sl
    5356:	3b28      	subs	r3, #40	; 0x28
    5358:	409a      	lsls	r2, r3
    535a:	2100      	movs	r1, #0
    535c:	4693      	mov	fp, r2
    535e:	e677      	b.n	5050 <__aeabi_ddiv+0x154>
    5360:	f7ff fd8e 	bl	4e80 <__clzsi2>
    5364:	3020      	adds	r0, #32
    5366:	e65f      	b.n	5028 <__aeabi_ddiv+0x12c>
    5368:	4588      	cmp	r8, r1
    536a:	d200      	bcs.n	536e <__aeabi_ddiv+0x472>
    536c:	e6c7      	b.n	50fe <__aeabi_ddiv+0x202>
    536e:	464b      	mov	r3, r9
    5370:	07de      	lsls	r6, r3, #31
    5372:	085d      	lsrs	r5, r3, #1
    5374:	4643      	mov	r3, r8
    5376:	085b      	lsrs	r3, r3, #1
    5378:	431e      	orrs	r6, r3
    537a:	4643      	mov	r3, r8
    537c:	07db      	lsls	r3, r3, #31
    537e:	469a      	mov	sl, r3
    5380:	e6c2      	b.n	5108 <__aeabi_ddiv+0x20c>
    5382:	2500      	movs	r5, #0
    5384:	4592      	cmp	sl, r2
    5386:	d300      	bcc.n	538a <__aeabi_ddiv+0x48e>
    5388:	e733      	b.n	51f2 <__aeabi_ddiv+0x2f6>
    538a:	9e03      	ldr	r6, [sp, #12]
    538c:	4659      	mov	r1, fp
    538e:	46b4      	mov	ip, r6
    5390:	44e2      	add	sl, ip
    5392:	45b2      	cmp	sl, r6
    5394:	41ad      	sbcs	r5, r5
    5396:	426d      	negs	r5, r5
    5398:	4445      	add	r5, r8
    539a:	18eb      	adds	r3, r5, r3
    539c:	3901      	subs	r1, #1
    539e:	4598      	cmp	r8, r3
    53a0:	d207      	bcs.n	53b2 <__aeabi_ddiv+0x4b6>
    53a2:	4298      	cmp	r0, r3
    53a4:	d900      	bls.n	53a8 <__aeabi_ddiv+0x4ac>
    53a6:	e07f      	b.n	54a8 <__aeabi_ddiv+0x5ac>
    53a8:	d100      	bne.n	53ac <__aeabi_ddiv+0x4b0>
    53aa:	e0bc      	b.n	5526 <__aeabi_ddiv+0x62a>
    53ac:	1a1d      	subs	r5, r3, r0
    53ae:	468b      	mov	fp, r1
    53b0:	e71f      	b.n	51f2 <__aeabi_ddiv+0x2f6>
    53b2:	4598      	cmp	r8, r3
    53b4:	d1fa      	bne.n	53ac <__aeabi_ddiv+0x4b0>
    53b6:	9d03      	ldr	r5, [sp, #12]
    53b8:	4555      	cmp	r5, sl
    53ba:	d9f2      	bls.n	53a2 <__aeabi_ddiv+0x4a6>
    53bc:	4643      	mov	r3, r8
    53be:	468b      	mov	fp, r1
    53c0:	1a1d      	subs	r5, r3, r0
    53c2:	e716      	b.n	51f2 <__aeabi_ddiv+0x2f6>
    53c4:	469b      	mov	fp, r3
    53c6:	e6ca      	b.n	515e <__aeabi_ddiv+0x262>
    53c8:	0015      	movs	r5, r2
    53ca:	e6e7      	b.n	519c <__aeabi_ddiv+0x2a0>
    53cc:	465a      	mov	r2, fp
    53ce:	08c9      	lsrs	r1, r1, #3
    53d0:	0752      	lsls	r2, r2, #29
    53d2:	430a      	orrs	r2, r1
    53d4:	055b      	lsls	r3, r3, #21
    53d6:	4690      	mov	r8, r2
    53d8:	0d5c      	lsrs	r4, r3, #21
    53da:	465a      	mov	r2, fp
    53dc:	2301      	movs	r3, #1
    53de:	9902      	ldr	r1, [sp, #8]
    53e0:	0252      	lsls	r2, r2, #9
    53e2:	4019      	ands	r1, r3
    53e4:	0b12      	lsrs	r2, r2, #12
    53e6:	468c      	mov	ip, r1
    53e8:	e656      	b.n	5098 <__aeabi_ddiv+0x19c>
    53ea:	2b00      	cmp	r3, #0
    53ec:	d100      	bne.n	53f0 <__aeabi_ddiv+0x4f4>
    53ee:	e76f      	b.n	52d0 <__aeabi_ddiv+0x3d4>
    53f0:	4446      	add	r6, r8
    53f2:	1e4a      	subs	r2, r1, #1
    53f4:	45b0      	cmp	r8, r6
    53f6:	d929      	bls.n	544c <__aeabi_ddiv+0x550>
    53f8:	0011      	movs	r1, r2
    53fa:	4286      	cmp	r6, r0
    53fc:	d000      	beq.n	5400 <__aeabi_ddiv+0x504>
    53fe:	e765      	b.n	52cc <__aeabi_ddiv+0x3d0>
    5400:	9a03      	ldr	r2, [sp, #12]
    5402:	4293      	cmp	r3, r2
    5404:	d000      	beq.n	5408 <__aeabi_ddiv+0x50c>
    5406:	e761      	b.n	52cc <__aeabi_ddiv+0x3d0>
    5408:	e762      	b.n	52d0 <__aeabi_ddiv+0x3d4>
    540a:	2101      	movs	r1, #1
    540c:	4249      	negs	r1, r1
    540e:	2001      	movs	r0, #1
    5410:	1ac2      	subs	r2, r0, r3
    5412:	2a38      	cmp	r2, #56	; 0x38
    5414:	dd21      	ble.n	545a <__aeabi_ddiv+0x55e>
    5416:	9b02      	ldr	r3, [sp, #8]
    5418:	4003      	ands	r3, r0
    541a:	469c      	mov	ip, r3
    541c:	e638      	b.n	5090 <__aeabi_ddiv+0x194>
    541e:	220f      	movs	r2, #15
    5420:	400a      	ands	r2, r1
    5422:	2a04      	cmp	r2, #4
    5424:	d100      	bne.n	5428 <__aeabi_ddiv+0x52c>
    5426:	e75b      	b.n	52e0 <__aeabi_ddiv+0x3e4>
    5428:	000a      	movs	r2, r1
    542a:	1d11      	adds	r1, r2, #4
    542c:	4291      	cmp	r1, r2
    542e:	4192      	sbcs	r2, r2
    5430:	4252      	negs	r2, r2
    5432:	4493      	add	fp, r2
    5434:	e754      	b.n	52e0 <__aeabi_ddiv+0x3e4>
    5436:	4b47      	ldr	r3, [pc, #284]	; (5554 <__aeabi_ddiv+0x658>)
    5438:	18e3      	adds	r3, r4, r3
    543a:	2b00      	cmp	r3, #0
    543c:	dde5      	ble.n	540a <__aeabi_ddiv+0x50e>
    543e:	2201      	movs	r2, #1
    5440:	4252      	negs	r2, r2
    5442:	e7f2      	b.n	542a <__aeabi_ddiv+0x52e>
    5444:	001d      	movs	r5, r3
    5446:	e6fa      	b.n	523e <__aeabi_ddiv+0x342>
    5448:	469a      	mov	sl, r3
    544a:	e71c      	b.n	5286 <__aeabi_ddiv+0x38a>
    544c:	42b0      	cmp	r0, r6
    544e:	d839      	bhi.n	54c4 <__aeabi_ddiv+0x5c8>
    5450:	d06e      	beq.n	5530 <__aeabi_ddiv+0x634>
    5452:	0011      	movs	r1, r2
    5454:	e73a      	b.n	52cc <__aeabi_ddiv+0x3d0>
    5456:	9302      	str	r3, [sp, #8]
    5458:	e73a      	b.n	52d0 <__aeabi_ddiv+0x3d4>
    545a:	2a1f      	cmp	r2, #31
    545c:	dc3c      	bgt.n	54d8 <__aeabi_ddiv+0x5dc>
    545e:	2320      	movs	r3, #32
    5460:	1a9b      	subs	r3, r3, r2
    5462:	000c      	movs	r4, r1
    5464:	4658      	mov	r0, fp
    5466:	4099      	lsls	r1, r3
    5468:	4098      	lsls	r0, r3
    546a:	1e4b      	subs	r3, r1, #1
    546c:	4199      	sbcs	r1, r3
    546e:	465b      	mov	r3, fp
    5470:	40d4      	lsrs	r4, r2
    5472:	40d3      	lsrs	r3, r2
    5474:	4320      	orrs	r0, r4
    5476:	4308      	orrs	r0, r1
    5478:	001a      	movs	r2, r3
    547a:	0743      	lsls	r3, r0, #29
    547c:	d009      	beq.n	5492 <__aeabi_ddiv+0x596>
    547e:	230f      	movs	r3, #15
    5480:	4003      	ands	r3, r0
    5482:	2b04      	cmp	r3, #4
    5484:	d005      	beq.n	5492 <__aeabi_ddiv+0x596>
    5486:	0001      	movs	r1, r0
    5488:	1d08      	adds	r0, r1, #4
    548a:	4288      	cmp	r0, r1
    548c:	419b      	sbcs	r3, r3
    548e:	425b      	negs	r3, r3
    5490:	18d2      	adds	r2, r2, r3
    5492:	0213      	lsls	r3, r2, #8
    5494:	d53a      	bpl.n	550c <__aeabi_ddiv+0x610>
    5496:	2301      	movs	r3, #1
    5498:	9a02      	ldr	r2, [sp, #8]
    549a:	2401      	movs	r4, #1
    549c:	401a      	ands	r2, r3
    549e:	2300      	movs	r3, #0
    54a0:	4694      	mov	ip, r2
    54a2:	4698      	mov	r8, r3
    54a4:	2200      	movs	r2, #0
    54a6:	e5f7      	b.n	5098 <__aeabi_ddiv+0x19c>
    54a8:	2102      	movs	r1, #2
    54aa:	4249      	negs	r1, r1
    54ac:	468c      	mov	ip, r1
    54ae:	9d03      	ldr	r5, [sp, #12]
    54b0:	44e3      	add	fp, ip
    54b2:	46ac      	mov	ip, r5
    54b4:	44e2      	add	sl, ip
    54b6:	45aa      	cmp	sl, r5
    54b8:	41ad      	sbcs	r5, r5
    54ba:	426d      	negs	r5, r5
    54bc:	4445      	add	r5, r8
    54be:	18ed      	adds	r5, r5, r3
    54c0:	1a2d      	subs	r5, r5, r0
    54c2:	e696      	b.n	51f2 <__aeabi_ddiv+0x2f6>
    54c4:	1e8a      	subs	r2, r1, #2
    54c6:	9903      	ldr	r1, [sp, #12]
    54c8:	004d      	lsls	r5, r1, #1
    54ca:	428d      	cmp	r5, r1
    54cc:	4189      	sbcs	r1, r1
    54ce:	4249      	negs	r1, r1
    54d0:	4441      	add	r1, r8
    54d2:	1876      	adds	r6, r6, r1
    54d4:	9503      	str	r5, [sp, #12]
    54d6:	e78f      	b.n	53f8 <__aeabi_ddiv+0x4fc>
    54d8:	201f      	movs	r0, #31
    54da:	4240      	negs	r0, r0
    54dc:	1ac3      	subs	r3, r0, r3
    54de:	4658      	mov	r0, fp
    54e0:	40d8      	lsrs	r0, r3
    54e2:	0003      	movs	r3, r0
    54e4:	2a20      	cmp	r2, #32
    54e6:	d028      	beq.n	553a <__aeabi_ddiv+0x63e>
    54e8:	2040      	movs	r0, #64	; 0x40
    54ea:	465d      	mov	r5, fp
    54ec:	1a82      	subs	r2, r0, r2
    54ee:	4095      	lsls	r5, r2
    54f0:	4329      	orrs	r1, r5
    54f2:	1e4a      	subs	r2, r1, #1
    54f4:	4191      	sbcs	r1, r2
    54f6:	4319      	orrs	r1, r3
    54f8:	2307      	movs	r3, #7
    54fa:	2200      	movs	r2, #0
    54fc:	400b      	ands	r3, r1
    54fe:	d009      	beq.n	5514 <__aeabi_ddiv+0x618>
    5500:	230f      	movs	r3, #15
    5502:	2200      	movs	r2, #0
    5504:	400b      	ands	r3, r1
    5506:	0008      	movs	r0, r1
    5508:	2b04      	cmp	r3, #4
    550a:	d1bd      	bne.n	5488 <__aeabi_ddiv+0x58c>
    550c:	0001      	movs	r1, r0
    550e:	0753      	lsls	r3, r2, #29
    5510:	0252      	lsls	r2, r2, #9
    5512:	0b12      	lsrs	r2, r2, #12
    5514:	08c9      	lsrs	r1, r1, #3
    5516:	4319      	orrs	r1, r3
    5518:	2301      	movs	r3, #1
    551a:	4688      	mov	r8, r1
    551c:	9902      	ldr	r1, [sp, #8]
    551e:	2400      	movs	r4, #0
    5520:	4019      	ands	r1, r3
    5522:	468c      	mov	ip, r1
    5524:	e5b8      	b.n	5098 <__aeabi_ddiv+0x19c>
    5526:	4552      	cmp	r2, sl
    5528:	d8be      	bhi.n	54a8 <__aeabi_ddiv+0x5ac>
    552a:	468b      	mov	fp, r1
    552c:	2500      	movs	r5, #0
    552e:	e660      	b.n	51f2 <__aeabi_ddiv+0x2f6>
    5530:	9d03      	ldr	r5, [sp, #12]
    5532:	429d      	cmp	r5, r3
    5534:	d3c6      	bcc.n	54c4 <__aeabi_ddiv+0x5c8>
    5536:	0011      	movs	r1, r2
    5538:	e762      	b.n	5400 <__aeabi_ddiv+0x504>
    553a:	2500      	movs	r5, #0
    553c:	e7d8      	b.n	54f0 <__aeabi_ddiv+0x5f4>
    553e:	2280      	movs	r2, #128	; 0x80
    5540:	465b      	mov	r3, fp
    5542:	0312      	lsls	r2, r2, #12
    5544:	431a      	orrs	r2, r3
    5546:	9b01      	ldr	r3, [sp, #4]
    5548:	0312      	lsls	r2, r2, #12
    554a:	0b12      	lsrs	r2, r2, #12
    554c:	469c      	mov	ip, r3
    554e:	4688      	mov	r8, r1
    5550:	4c03      	ldr	r4, [pc, #12]	; (5560 <__aeabi_ddiv+0x664>)
    5552:	e5a1      	b.n	5098 <__aeabi_ddiv+0x19c>
    5554:	000003ff 	.word	0x000003ff
    5558:	feffffff 	.word	0xfeffffff
    555c:	000007fe 	.word	0x000007fe
    5560:	000007ff 	.word	0x000007ff

00005564 <__aeabi_dmul>:
    5564:	b5f0      	push	{r4, r5, r6, r7, lr}
    5566:	4657      	mov	r7, sl
    5568:	4645      	mov	r5, r8
    556a:	46de      	mov	lr, fp
    556c:	464e      	mov	r6, r9
    556e:	b5e0      	push	{r5, r6, r7, lr}
    5570:	030c      	lsls	r4, r1, #12
    5572:	4698      	mov	r8, r3
    5574:	004e      	lsls	r6, r1, #1
    5576:	0b23      	lsrs	r3, r4, #12
    5578:	b087      	sub	sp, #28
    557a:	0007      	movs	r7, r0
    557c:	4692      	mov	sl, r2
    557e:	469b      	mov	fp, r3
    5580:	0d76      	lsrs	r6, r6, #21
    5582:	0fcd      	lsrs	r5, r1, #31
    5584:	2e00      	cmp	r6, #0
    5586:	d06b      	beq.n	5660 <__aeabi_dmul+0xfc>
    5588:	4b6d      	ldr	r3, [pc, #436]	; (5740 <__aeabi_dmul+0x1dc>)
    558a:	429e      	cmp	r6, r3
    558c:	d035      	beq.n	55fa <__aeabi_dmul+0x96>
    558e:	2480      	movs	r4, #128	; 0x80
    5590:	465b      	mov	r3, fp
    5592:	0f42      	lsrs	r2, r0, #29
    5594:	0424      	lsls	r4, r4, #16
    5596:	00db      	lsls	r3, r3, #3
    5598:	4314      	orrs	r4, r2
    559a:	431c      	orrs	r4, r3
    559c:	00c3      	lsls	r3, r0, #3
    559e:	4699      	mov	r9, r3
    55a0:	4b68      	ldr	r3, [pc, #416]	; (5744 <__aeabi_dmul+0x1e0>)
    55a2:	46a3      	mov	fp, r4
    55a4:	469c      	mov	ip, r3
    55a6:	2300      	movs	r3, #0
    55a8:	2700      	movs	r7, #0
    55aa:	4466      	add	r6, ip
    55ac:	9302      	str	r3, [sp, #8]
    55ae:	4643      	mov	r3, r8
    55b0:	031c      	lsls	r4, r3, #12
    55b2:	005a      	lsls	r2, r3, #1
    55b4:	0fdb      	lsrs	r3, r3, #31
    55b6:	4650      	mov	r0, sl
    55b8:	0b24      	lsrs	r4, r4, #12
    55ba:	0d52      	lsrs	r2, r2, #21
    55bc:	4698      	mov	r8, r3
    55be:	d100      	bne.n	55c2 <__aeabi_dmul+0x5e>
    55c0:	e076      	b.n	56b0 <__aeabi_dmul+0x14c>
    55c2:	4b5f      	ldr	r3, [pc, #380]	; (5740 <__aeabi_dmul+0x1dc>)
    55c4:	429a      	cmp	r2, r3
    55c6:	d06d      	beq.n	56a4 <__aeabi_dmul+0x140>
    55c8:	2380      	movs	r3, #128	; 0x80
    55ca:	0f41      	lsrs	r1, r0, #29
    55cc:	041b      	lsls	r3, r3, #16
    55ce:	430b      	orrs	r3, r1
    55d0:	495c      	ldr	r1, [pc, #368]	; (5744 <__aeabi_dmul+0x1e0>)
    55d2:	00e4      	lsls	r4, r4, #3
    55d4:	468c      	mov	ip, r1
    55d6:	431c      	orrs	r4, r3
    55d8:	00c3      	lsls	r3, r0, #3
    55da:	2000      	movs	r0, #0
    55dc:	4462      	add	r2, ip
    55de:	4641      	mov	r1, r8
    55e0:	18b6      	adds	r6, r6, r2
    55e2:	4069      	eors	r1, r5
    55e4:	1c72      	adds	r2, r6, #1
    55e6:	9101      	str	r1, [sp, #4]
    55e8:	4694      	mov	ip, r2
    55ea:	4307      	orrs	r7, r0
    55ec:	2f0f      	cmp	r7, #15
    55ee:	d900      	bls.n	55f2 <__aeabi_dmul+0x8e>
    55f0:	e0b0      	b.n	5754 <__aeabi_dmul+0x1f0>
    55f2:	4a55      	ldr	r2, [pc, #340]	; (5748 <__aeabi_dmul+0x1e4>)
    55f4:	00bf      	lsls	r7, r7, #2
    55f6:	59d2      	ldr	r2, [r2, r7]
    55f8:	4697      	mov	pc, r2
    55fa:	465b      	mov	r3, fp
    55fc:	4303      	orrs	r3, r0
    55fe:	4699      	mov	r9, r3
    5600:	d000      	beq.n	5604 <__aeabi_dmul+0xa0>
    5602:	e087      	b.n	5714 <__aeabi_dmul+0x1b0>
    5604:	2300      	movs	r3, #0
    5606:	469b      	mov	fp, r3
    5608:	3302      	adds	r3, #2
    560a:	2708      	movs	r7, #8
    560c:	9302      	str	r3, [sp, #8]
    560e:	e7ce      	b.n	55ae <__aeabi_dmul+0x4a>
    5610:	4642      	mov	r2, r8
    5612:	9201      	str	r2, [sp, #4]
    5614:	2802      	cmp	r0, #2
    5616:	d067      	beq.n	56e8 <__aeabi_dmul+0x184>
    5618:	2803      	cmp	r0, #3
    561a:	d100      	bne.n	561e <__aeabi_dmul+0xba>
    561c:	e20e      	b.n	5a3c <__aeabi_dmul+0x4d8>
    561e:	2801      	cmp	r0, #1
    5620:	d000      	beq.n	5624 <__aeabi_dmul+0xc0>
    5622:	e162      	b.n	58ea <__aeabi_dmul+0x386>
    5624:	2300      	movs	r3, #0
    5626:	2400      	movs	r4, #0
    5628:	2200      	movs	r2, #0
    562a:	4699      	mov	r9, r3
    562c:	9901      	ldr	r1, [sp, #4]
    562e:	4001      	ands	r1, r0
    5630:	b2cd      	uxtb	r5, r1
    5632:	2100      	movs	r1, #0
    5634:	0312      	lsls	r2, r2, #12
    5636:	0d0b      	lsrs	r3, r1, #20
    5638:	0b12      	lsrs	r2, r2, #12
    563a:	051b      	lsls	r3, r3, #20
    563c:	4313      	orrs	r3, r2
    563e:	4a43      	ldr	r2, [pc, #268]	; (574c <__aeabi_dmul+0x1e8>)
    5640:	0524      	lsls	r4, r4, #20
    5642:	4013      	ands	r3, r2
    5644:	431c      	orrs	r4, r3
    5646:	0064      	lsls	r4, r4, #1
    5648:	07ed      	lsls	r5, r5, #31
    564a:	0864      	lsrs	r4, r4, #1
    564c:	432c      	orrs	r4, r5
    564e:	4648      	mov	r0, r9
    5650:	0021      	movs	r1, r4
    5652:	b007      	add	sp, #28
    5654:	bc3c      	pop	{r2, r3, r4, r5}
    5656:	4690      	mov	r8, r2
    5658:	4699      	mov	r9, r3
    565a:	46a2      	mov	sl, r4
    565c:	46ab      	mov	fp, r5
    565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5660:	4303      	orrs	r3, r0
    5662:	4699      	mov	r9, r3
    5664:	d04f      	beq.n	5706 <__aeabi_dmul+0x1a2>
    5666:	465b      	mov	r3, fp
    5668:	2b00      	cmp	r3, #0
    566a:	d100      	bne.n	566e <__aeabi_dmul+0x10a>
    566c:	e189      	b.n	5982 <__aeabi_dmul+0x41e>
    566e:	4658      	mov	r0, fp
    5670:	f7ff fc06 	bl	4e80 <__clzsi2>
    5674:	0003      	movs	r3, r0
    5676:	3b0b      	subs	r3, #11
    5678:	2b1c      	cmp	r3, #28
    567a:	dd00      	ble.n	567e <__aeabi_dmul+0x11a>
    567c:	e17a      	b.n	5974 <__aeabi_dmul+0x410>
    567e:	221d      	movs	r2, #29
    5680:	1ad3      	subs	r3, r2, r3
    5682:	003a      	movs	r2, r7
    5684:	0001      	movs	r1, r0
    5686:	465c      	mov	r4, fp
    5688:	40da      	lsrs	r2, r3
    568a:	3908      	subs	r1, #8
    568c:	408c      	lsls	r4, r1
    568e:	0013      	movs	r3, r2
    5690:	408f      	lsls	r7, r1
    5692:	4323      	orrs	r3, r4
    5694:	469b      	mov	fp, r3
    5696:	46b9      	mov	r9, r7
    5698:	2300      	movs	r3, #0
    569a:	4e2d      	ldr	r6, [pc, #180]	; (5750 <__aeabi_dmul+0x1ec>)
    569c:	2700      	movs	r7, #0
    569e:	1a36      	subs	r6, r6, r0
    56a0:	9302      	str	r3, [sp, #8]
    56a2:	e784      	b.n	55ae <__aeabi_dmul+0x4a>
    56a4:	4653      	mov	r3, sl
    56a6:	4323      	orrs	r3, r4
    56a8:	d12a      	bne.n	5700 <__aeabi_dmul+0x19c>
    56aa:	2400      	movs	r4, #0
    56ac:	2002      	movs	r0, #2
    56ae:	e796      	b.n	55de <__aeabi_dmul+0x7a>
    56b0:	4653      	mov	r3, sl
    56b2:	4323      	orrs	r3, r4
    56b4:	d020      	beq.n	56f8 <__aeabi_dmul+0x194>
    56b6:	2c00      	cmp	r4, #0
    56b8:	d100      	bne.n	56bc <__aeabi_dmul+0x158>
    56ba:	e157      	b.n	596c <__aeabi_dmul+0x408>
    56bc:	0020      	movs	r0, r4
    56be:	f7ff fbdf 	bl	4e80 <__clzsi2>
    56c2:	0003      	movs	r3, r0
    56c4:	3b0b      	subs	r3, #11
    56c6:	2b1c      	cmp	r3, #28
    56c8:	dd00      	ble.n	56cc <__aeabi_dmul+0x168>
    56ca:	e149      	b.n	5960 <__aeabi_dmul+0x3fc>
    56cc:	211d      	movs	r1, #29
    56ce:	1acb      	subs	r3, r1, r3
    56d0:	4651      	mov	r1, sl
    56d2:	0002      	movs	r2, r0
    56d4:	40d9      	lsrs	r1, r3
    56d6:	4653      	mov	r3, sl
    56d8:	3a08      	subs	r2, #8
    56da:	4094      	lsls	r4, r2
    56dc:	4093      	lsls	r3, r2
    56de:	430c      	orrs	r4, r1
    56e0:	4a1b      	ldr	r2, [pc, #108]	; (5750 <__aeabi_dmul+0x1ec>)
    56e2:	1a12      	subs	r2, r2, r0
    56e4:	2000      	movs	r0, #0
    56e6:	e77a      	b.n	55de <__aeabi_dmul+0x7a>
    56e8:	2501      	movs	r5, #1
    56ea:	9b01      	ldr	r3, [sp, #4]
    56ec:	4c14      	ldr	r4, [pc, #80]	; (5740 <__aeabi_dmul+0x1dc>)
    56ee:	401d      	ands	r5, r3
    56f0:	2300      	movs	r3, #0
    56f2:	2200      	movs	r2, #0
    56f4:	4699      	mov	r9, r3
    56f6:	e79c      	b.n	5632 <__aeabi_dmul+0xce>
    56f8:	2400      	movs	r4, #0
    56fa:	2200      	movs	r2, #0
    56fc:	2001      	movs	r0, #1
    56fe:	e76e      	b.n	55de <__aeabi_dmul+0x7a>
    5700:	4653      	mov	r3, sl
    5702:	2003      	movs	r0, #3
    5704:	e76b      	b.n	55de <__aeabi_dmul+0x7a>
    5706:	2300      	movs	r3, #0
    5708:	469b      	mov	fp, r3
    570a:	3301      	adds	r3, #1
    570c:	2704      	movs	r7, #4
    570e:	2600      	movs	r6, #0
    5710:	9302      	str	r3, [sp, #8]
    5712:	e74c      	b.n	55ae <__aeabi_dmul+0x4a>
    5714:	2303      	movs	r3, #3
    5716:	4681      	mov	r9, r0
    5718:	270c      	movs	r7, #12
    571a:	9302      	str	r3, [sp, #8]
    571c:	e747      	b.n	55ae <__aeabi_dmul+0x4a>
    571e:	2280      	movs	r2, #128	; 0x80
    5720:	2300      	movs	r3, #0
    5722:	2500      	movs	r5, #0
    5724:	0312      	lsls	r2, r2, #12
    5726:	4699      	mov	r9, r3
    5728:	4c05      	ldr	r4, [pc, #20]	; (5740 <__aeabi_dmul+0x1dc>)
    572a:	e782      	b.n	5632 <__aeabi_dmul+0xce>
    572c:	465c      	mov	r4, fp
    572e:	464b      	mov	r3, r9
    5730:	9802      	ldr	r0, [sp, #8]
    5732:	e76f      	b.n	5614 <__aeabi_dmul+0xb0>
    5734:	465c      	mov	r4, fp
    5736:	464b      	mov	r3, r9
    5738:	9501      	str	r5, [sp, #4]
    573a:	9802      	ldr	r0, [sp, #8]
    573c:	e76a      	b.n	5614 <__aeabi_dmul+0xb0>
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	000007ff 	.word	0x000007ff
    5744:	fffffc01 	.word	0xfffffc01
    5748:	00006cb0 	.word	0x00006cb0
    574c:	800fffff 	.word	0x800fffff
    5750:	fffffc0d 	.word	0xfffffc0d
    5754:	464a      	mov	r2, r9
    5756:	4649      	mov	r1, r9
    5758:	0c17      	lsrs	r7, r2, #16
    575a:	0c1a      	lsrs	r2, r3, #16
    575c:	041b      	lsls	r3, r3, #16
    575e:	0c1b      	lsrs	r3, r3, #16
    5760:	0408      	lsls	r0, r1, #16
    5762:	0019      	movs	r1, r3
    5764:	0c00      	lsrs	r0, r0, #16
    5766:	4341      	muls	r1, r0
    5768:	0015      	movs	r5, r2
    576a:	4688      	mov	r8, r1
    576c:	0019      	movs	r1, r3
    576e:	437d      	muls	r5, r7
    5770:	4379      	muls	r1, r7
    5772:	9503      	str	r5, [sp, #12]
    5774:	4689      	mov	r9, r1
    5776:	0029      	movs	r1, r5
    5778:	0015      	movs	r5, r2
    577a:	4345      	muls	r5, r0
    577c:	444d      	add	r5, r9
    577e:	9502      	str	r5, [sp, #8]
    5780:	4645      	mov	r5, r8
    5782:	0c2d      	lsrs	r5, r5, #16
    5784:	46aa      	mov	sl, r5
    5786:	9d02      	ldr	r5, [sp, #8]
    5788:	4455      	add	r5, sl
    578a:	45a9      	cmp	r9, r5
    578c:	d906      	bls.n	579c <__aeabi_dmul+0x238>
    578e:	468a      	mov	sl, r1
    5790:	2180      	movs	r1, #128	; 0x80
    5792:	0249      	lsls	r1, r1, #9
    5794:	4689      	mov	r9, r1
    5796:	44ca      	add	sl, r9
    5798:	4651      	mov	r1, sl
    579a:	9103      	str	r1, [sp, #12]
    579c:	0c29      	lsrs	r1, r5, #16
    579e:	9104      	str	r1, [sp, #16]
    57a0:	4641      	mov	r1, r8
    57a2:	0409      	lsls	r1, r1, #16
    57a4:	042d      	lsls	r5, r5, #16
    57a6:	0c09      	lsrs	r1, r1, #16
    57a8:	4688      	mov	r8, r1
    57aa:	0029      	movs	r1, r5
    57ac:	0c25      	lsrs	r5, r4, #16
    57ae:	0424      	lsls	r4, r4, #16
    57b0:	4441      	add	r1, r8
    57b2:	0c24      	lsrs	r4, r4, #16
    57b4:	9105      	str	r1, [sp, #20]
    57b6:	0021      	movs	r1, r4
    57b8:	4341      	muls	r1, r0
    57ba:	4688      	mov	r8, r1
    57bc:	0021      	movs	r1, r4
    57be:	4379      	muls	r1, r7
    57c0:	468a      	mov	sl, r1
    57c2:	4368      	muls	r0, r5
    57c4:	4641      	mov	r1, r8
    57c6:	4450      	add	r0, sl
    57c8:	4681      	mov	r9, r0
    57ca:	0c08      	lsrs	r0, r1, #16
    57cc:	4448      	add	r0, r9
    57ce:	436f      	muls	r7, r5
    57d0:	4582      	cmp	sl, r0
    57d2:	d903      	bls.n	57dc <__aeabi_dmul+0x278>
    57d4:	2180      	movs	r1, #128	; 0x80
    57d6:	0249      	lsls	r1, r1, #9
    57d8:	4689      	mov	r9, r1
    57da:	444f      	add	r7, r9
    57dc:	0c01      	lsrs	r1, r0, #16
    57de:	4689      	mov	r9, r1
    57e0:	0039      	movs	r1, r7
    57e2:	4449      	add	r1, r9
    57e4:	9102      	str	r1, [sp, #8]
    57e6:	4641      	mov	r1, r8
    57e8:	040f      	lsls	r7, r1, #16
    57ea:	9904      	ldr	r1, [sp, #16]
    57ec:	0c3f      	lsrs	r7, r7, #16
    57ee:	4688      	mov	r8, r1
    57f0:	0400      	lsls	r0, r0, #16
    57f2:	19c0      	adds	r0, r0, r7
    57f4:	4480      	add	r8, r0
    57f6:	4641      	mov	r1, r8
    57f8:	9104      	str	r1, [sp, #16]
    57fa:	4659      	mov	r1, fp
    57fc:	0c0f      	lsrs	r7, r1, #16
    57fe:	0409      	lsls	r1, r1, #16
    5800:	0c09      	lsrs	r1, r1, #16
    5802:	4688      	mov	r8, r1
    5804:	4359      	muls	r1, r3
    5806:	468a      	mov	sl, r1
    5808:	0039      	movs	r1, r7
    580a:	4351      	muls	r1, r2
    580c:	4689      	mov	r9, r1
    580e:	4641      	mov	r1, r8
    5810:	434a      	muls	r2, r1
    5812:	4651      	mov	r1, sl
    5814:	0c09      	lsrs	r1, r1, #16
    5816:	468b      	mov	fp, r1
    5818:	437b      	muls	r3, r7
    581a:	18d2      	adds	r2, r2, r3
    581c:	445a      	add	r2, fp
    581e:	4293      	cmp	r3, r2
    5820:	d903      	bls.n	582a <__aeabi_dmul+0x2c6>
    5822:	2380      	movs	r3, #128	; 0x80
    5824:	025b      	lsls	r3, r3, #9
    5826:	469b      	mov	fp, r3
    5828:	44d9      	add	r9, fp
    582a:	4651      	mov	r1, sl
    582c:	0409      	lsls	r1, r1, #16
    582e:	0c09      	lsrs	r1, r1, #16
    5830:	468a      	mov	sl, r1
    5832:	4641      	mov	r1, r8
    5834:	4361      	muls	r1, r4
    5836:	437c      	muls	r4, r7
    5838:	0c13      	lsrs	r3, r2, #16
    583a:	0412      	lsls	r2, r2, #16
    583c:	444b      	add	r3, r9
    583e:	4452      	add	r2, sl
    5840:	46a1      	mov	r9, r4
    5842:	468a      	mov	sl, r1
    5844:	003c      	movs	r4, r7
    5846:	4641      	mov	r1, r8
    5848:	436c      	muls	r4, r5
    584a:	434d      	muls	r5, r1
    584c:	4651      	mov	r1, sl
    584e:	444d      	add	r5, r9
    5850:	0c0f      	lsrs	r7, r1, #16
    5852:	197d      	adds	r5, r7, r5
    5854:	45a9      	cmp	r9, r5
    5856:	d903      	bls.n	5860 <__aeabi_dmul+0x2fc>
    5858:	2180      	movs	r1, #128	; 0x80
    585a:	0249      	lsls	r1, r1, #9
    585c:	4688      	mov	r8, r1
    585e:	4444      	add	r4, r8
    5860:	9f04      	ldr	r7, [sp, #16]
    5862:	9903      	ldr	r1, [sp, #12]
    5864:	46b8      	mov	r8, r7
    5866:	4441      	add	r1, r8
    5868:	468b      	mov	fp, r1
    586a:	4583      	cmp	fp, r0
    586c:	4180      	sbcs	r0, r0
    586e:	4241      	negs	r1, r0
    5870:	4688      	mov	r8, r1
    5872:	4651      	mov	r1, sl
    5874:	0408      	lsls	r0, r1, #16
    5876:	042f      	lsls	r7, r5, #16
    5878:	0c00      	lsrs	r0, r0, #16
    587a:	183f      	adds	r7, r7, r0
    587c:	4658      	mov	r0, fp
    587e:	9902      	ldr	r1, [sp, #8]
    5880:	1810      	adds	r0, r2, r0
    5882:	4689      	mov	r9, r1
    5884:	4290      	cmp	r0, r2
    5886:	4192      	sbcs	r2, r2
    5888:	444f      	add	r7, r9
    588a:	46ba      	mov	sl, r7
    588c:	4252      	negs	r2, r2
    588e:	4699      	mov	r9, r3
    5890:	4693      	mov	fp, r2
    5892:	44c2      	add	sl, r8
    5894:	44d1      	add	r9, sl
    5896:	44cb      	add	fp, r9
    5898:	428f      	cmp	r7, r1
    589a:	41bf      	sbcs	r7, r7
    589c:	45c2      	cmp	sl, r8
    589e:	4189      	sbcs	r1, r1
    58a0:	4599      	cmp	r9, r3
    58a2:	419b      	sbcs	r3, r3
    58a4:	4593      	cmp	fp, r2
    58a6:	4192      	sbcs	r2, r2
    58a8:	427f      	negs	r7, r7
    58aa:	4249      	negs	r1, r1
    58ac:	0c2d      	lsrs	r5, r5, #16
    58ae:	4252      	negs	r2, r2
    58b0:	430f      	orrs	r7, r1
    58b2:	425b      	negs	r3, r3
    58b4:	4313      	orrs	r3, r2
    58b6:	197f      	adds	r7, r7, r5
    58b8:	18ff      	adds	r7, r7, r3
    58ba:	465b      	mov	r3, fp
    58bc:	193c      	adds	r4, r7, r4
    58be:	0ddb      	lsrs	r3, r3, #23
    58c0:	9a05      	ldr	r2, [sp, #20]
    58c2:	0264      	lsls	r4, r4, #9
    58c4:	431c      	orrs	r4, r3
    58c6:	0243      	lsls	r3, r0, #9
    58c8:	4313      	orrs	r3, r2
    58ca:	1e5d      	subs	r5, r3, #1
    58cc:	41ab      	sbcs	r3, r5
    58ce:	465a      	mov	r2, fp
    58d0:	0dc0      	lsrs	r0, r0, #23
    58d2:	4303      	orrs	r3, r0
    58d4:	0252      	lsls	r2, r2, #9
    58d6:	4313      	orrs	r3, r2
    58d8:	01e2      	lsls	r2, r4, #7
    58da:	d556      	bpl.n	598a <__aeabi_dmul+0x426>
    58dc:	2001      	movs	r0, #1
    58de:	085a      	lsrs	r2, r3, #1
    58e0:	4003      	ands	r3, r0
    58e2:	4313      	orrs	r3, r2
    58e4:	07e2      	lsls	r2, r4, #31
    58e6:	4313      	orrs	r3, r2
    58e8:	0864      	lsrs	r4, r4, #1
    58ea:	485a      	ldr	r0, [pc, #360]	; (5a54 <__aeabi_dmul+0x4f0>)
    58ec:	4460      	add	r0, ip
    58ee:	2800      	cmp	r0, #0
    58f0:	dd4d      	ble.n	598e <__aeabi_dmul+0x42a>
    58f2:	075a      	lsls	r2, r3, #29
    58f4:	d009      	beq.n	590a <__aeabi_dmul+0x3a6>
    58f6:	220f      	movs	r2, #15
    58f8:	401a      	ands	r2, r3
    58fa:	2a04      	cmp	r2, #4
    58fc:	d005      	beq.n	590a <__aeabi_dmul+0x3a6>
    58fe:	1d1a      	adds	r2, r3, #4
    5900:	429a      	cmp	r2, r3
    5902:	419b      	sbcs	r3, r3
    5904:	425b      	negs	r3, r3
    5906:	18e4      	adds	r4, r4, r3
    5908:	0013      	movs	r3, r2
    590a:	01e2      	lsls	r2, r4, #7
    590c:	d504      	bpl.n	5918 <__aeabi_dmul+0x3b4>
    590e:	2080      	movs	r0, #128	; 0x80
    5910:	4a51      	ldr	r2, [pc, #324]	; (5a58 <__aeabi_dmul+0x4f4>)
    5912:	00c0      	lsls	r0, r0, #3
    5914:	4014      	ands	r4, r2
    5916:	4460      	add	r0, ip
    5918:	4a50      	ldr	r2, [pc, #320]	; (5a5c <__aeabi_dmul+0x4f8>)
    591a:	4290      	cmp	r0, r2
    591c:	dd00      	ble.n	5920 <__aeabi_dmul+0x3bc>
    591e:	e6e3      	b.n	56e8 <__aeabi_dmul+0x184>
    5920:	2501      	movs	r5, #1
    5922:	08db      	lsrs	r3, r3, #3
    5924:	0762      	lsls	r2, r4, #29
    5926:	431a      	orrs	r2, r3
    5928:	0264      	lsls	r4, r4, #9
    592a:	9b01      	ldr	r3, [sp, #4]
    592c:	4691      	mov	r9, r2
    592e:	0b22      	lsrs	r2, r4, #12
    5930:	0544      	lsls	r4, r0, #21
    5932:	0d64      	lsrs	r4, r4, #21
    5934:	401d      	ands	r5, r3
    5936:	e67c      	b.n	5632 <__aeabi_dmul+0xce>
    5938:	2280      	movs	r2, #128	; 0x80
    593a:	4659      	mov	r1, fp
    593c:	0312      	lsls	r2, r2, #12
    593e:	4211      	tst	r1, r2
    5940:	d008      	beq.n	5954 <__aeabi_dmul+0x3f0>
    5942:	4214      	tst	r4, r2
    5944:	d106      	bne.n	5954 <__aeabi_dmul+0x3f0>
    5946:	4322      	orrs	r2, r4
    5948:	0312      	lsls	r2, r2, #12
    594a:	0b12      	lsrs	r2, r2, #12
    594c:	4645      	mov	r5, r8
    594e:	4699      	mov	r9, r3
    5950:	4c43      	ldr	r4, [pc, #268]	; (5a60 <__aeabi_dmul+0x4fc>)
    5952:	e66e      	b.n	5632 <__aeabi_dmul+0xce>
    5954:	465b      	mov	r3, fp
    5956:	431a      	orrs	r2, r3
    5958:	0312      	lsls	r2, r2, #12
    595a:	0b12      	lsrs	r2, r2, #12
    595c:	4c40      	ldr	r4, [pc, #256]	; (5a60 <__aeabi_dmul+0x4fc>)
    595e:	e668      	b.n	5632 <__aeabi_dmul+0xce>
    5960:	0003      	movs	r3, r0
    5962:	4654      	mov	r4, sl
    5964:	3b28      	subs	r3, #40	; 0x28
    5966:	409c      	lsls	r4, r3
    5968:	2300      	movs	r3, #0
    596a:	e6b9      	b.n	56e0 <__aeabi_dmul+0x17c>
    596c:	f7ff fa88 	bl	4e80 <__clzsi2>
    5970:	3020      	adds	r0, #32
    5972:	e6a6      	b.n	56c2 <__aeabi_dmul+0x15e>
    5974:	0003      	movs	r3, r0
    5976:	3b28      	subs	r3, #40	; 0x28
    5978:	409f      	lsls	r7, r3
    597a:	2300      	movs	r3, #0
    597c:	46bb      	mov	fp, r7
    597e:	4699      	mov	r9, r3
    5980:	e68a      	b.n	5698 <__aeabi_dmul+0x134>
    5982:	f7ff fa7d 	bl	4e80 <__clzsi2>
    5986:	3020      	adds	r0, #32
    5988:	e674      	b.n	5674 <__aeabi_dmul+0x110>
    598a:	46b4      	mov	ip, r6
    598c:	e7ad      	b.n	58ea <__aeabi_dmul+0x386>
    598e:	2501      	movs	r5, #1
    5990:	1a2a      	subs	r2, r5, r0
    5992:	2a38      	cmp	r2, #56	; 0x38
    5994:	dd06      	ble.n	59a4 <__aeabi_dmul+0x440>
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	2400      	movs	r4, #0
    599a:	401d      	ands	r5, r3
    599c:	2300      	movs	r3, #0
    599e:	2200      	movs	r2, #0
    59a0:	4699      	mov	r9, r3
    59a2:	e646      	b.n	5632 <__aeabi_dmul+0xce>
    59a4:	2a1f      	cmp	r2, #31
    59a6:	dc21      	bgt.n	59ec <__aeabi_dmul+0x488>
    59a8:	2520      	movs	r5, #32
    59aa:	0020      	movs	r0, r4
    59ac:	1aad      	subs	r5, r5, r2
    59ae:	001e      	movs	r6, r3
    59b0:	40ab      	lsls	r3, r5
    59b2:	40a8      	lsls	r0, r5
    59b4:	40d6      	lsrs	r6, r2
    59b6:	1e5d      	subs	r5, r3, #1
    59b8:	41ab      	sbcs	r3, r5
    59ba:	4330      	orrs	r0, r6
    59bc:	4318      	orrs	r0, r3
    59be:	40d4      	lsrs	r4, r2
    59c0:	0743      	lsls	r3, r0, #29
    59c2:	d009      	beq.n	59d8 <__aeabi_dmul+0x474>
    59c4:	230f      	movs	r3, #15
    59c6:	4003      	ands	r3, r0
    59c8:	2b04      	cmp	r3, #4
    59ca:	d005      	beq.n	59d8 <__aeabi_dmul+0x474>
    59cc:	0003      	movs	r3, r0
    59ce:	1d18      	adds	r0, r3, #4
    59d0:	4298      	cmp	r0, r3
    59d2:	419b      	sbcs	r3, r3
    59d4:	425b      	negs	r3, r3
    59d6:	18e4      	adds	r4, r4, r3
    59d8:	0223      	lsls	r3, r4, #8
    59da:	d521      	bpl.n	5a20 <__aeabi_dmul+0x4bc>
    59dc:	2501      	movs	r5, #1
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	2401      	movs	r4, #1
    59e2:	401d      	ands	r5, r3
    59e4:	2300      	movs	r3, #0
    59e6:	2200      	movs	r2, #0
    59e8:	4699      	mov	r9, r3
    59ea:	e622      	b.n	5632 <__aeabi_dmul+0xce>
    59ec:	251f      	movs	r5, #31
    59ee:	0021      	movs	r1, r4
    59f0:	426d      	negs	r5, r5
    59f2:	1a28      	subs	r0, r5, r0
    59f4:	40c1      	lsrs	r1, r0
    59f6:	0008      	movs	r0, r1
    59f8:	2a20      	cmp	r2, #32
    59fa:	d01d      	beq.n	5a38 <__aeabi_dmul+0x4d4>
    59fc:	355f      	adds	r5, #95	; 0x5f
    59fe:	1aaa      	subs	r2, r5, r2
    5a00:	4094      	lsls	r4, r2
    5a02:	4323      	orrs	r3, r4
    5a04:	1e5c      	subs	r4, r3, #1
    5a06:	41a3      	sbcs	r3, r4
    5a08:	2507      	movs	r5, #7
    5a0a:	4303      	orrs	r3, r0
    5a0c:	401d      	ands	r5, r3
    5a0e:	2200      	movs	r2, #0
    5a10:	2d00      	cmp	r5, #0
    5a12:	d009      	beq.n	5a28 <__aeabi_dmul+0x4c4>
    5a14:	220f      	movs	r2, #15
    5a16:	2400      	movs	r4, #0
    5a18:	401a      	ands	r2, r3
    5a1a:	0018      	movs	r0, r3
    5a1c:	2a04      	cmp	r2, #4
    5a1e:	d1d6      	bne.n	59ce <__aeabi_dmul+0x46a>
    5a20:	0003      	movs	r3, r0
    5a22:	0765      	lsls	r5, r4, #29
    5a24:	0264      	lsls	r4, r4, #9
    5a26:	0b22      	lsrs	r2, r4, #12
    5a28:	08db      	lsrs	r3, r3, #3
    5a2a:	432b      	orrs	r3, r5
    5a2c:	2501      	movs	r5, #1
    5a2e:	4699      	mov	r9, r3
    5a30:	9b01      	ldr	r3, [sp, #4]
    5a32:	2400      	movs	r4, #0
    5a34:	401d      	ands	r5, r3
    5a36:	e5fc      	b.n	5632 <__aeabi_dmul+0xce>
    5a38:	2400      	movs	r4, #0
    5a3a:	e7e2      	b.n	5a02 <__aeabi_dmul+0x49e>
    5a3c:	2280      	movs	r2, #128	; 0x80
    5a3e:	2501      	movs	r5, #1
    5a40:	0312      	lsls	r2, r2, #12
    5a42:	4322      	orrs	r2, r4
    5a44:	9901      	ldr	r1, [sp, #4]
    5a46:	0312      	lsls	r2, r2, #12
    5a48:	0b12      	lsrs	r2, r2, #12
    5a4a:	400d      	ands	r5, r1
    5a4c:	4699      	mov	r9, r3
    5a4e:	4c04      	ldr	r4, [pc, #16]	; (5a60 <__aeabi_dmul+0x4fc>)
    5a50:	e5ef      	b.n	5632 <__aeabi_dmul+0xce>
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	000003ff 	.word	0x000003ff
    5a58:	feffffff 	.word	0xfeffffff
    5a5c:	000007fe 	.word	0x000007fe
    5a60:	000007ff 	.word	0x000007ff

00005a64 <__aeabi_dsub>:
    5a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a66:	4646      	mov	r6, r8
    5a68:	46d6      	mov	lr, sl
    5a6a:	464f      	mov	r7, r9
    5a6c:	030c      	lsls	r4, r1, #12
    5a6e:	b5c0      	push	{r6, r7, lr}
    5a70:	0fcd      	lsrs	r5, r1, #31
    5a72:	004e      	lsls	r6, r1, #1
    5a74:	0a61      	lsrs	r1, r4, #9
    5a76:	0f44      	lsrs	r4, r0, #29
    5a78:	430c      	orrs	r4, r1
    5a7a:	00c1      	lsls	r1, r0, #3
    5a7c:	0058      	lsls	r0, r3, #1
    5a7e:	0d40      	lsrs	r0, r0, #21
    5a80:	4684      	mov	ip, r0
    5a82:	468a      	mov	sl, r1
    5a84:	000f      	movs	r7, r1
    5a86:	0319      	lsls	r1, r3, #12
    5a88:	0f50      	lsrs	r0, r2, #29
    5a8a:	0a49      	lsrs	r1, r1, #9
    5a8c:	4301      	orrs	r1, r0
    5a8e:	48c6      	ldr	r0, [pc, #792]	; (5da8 <__aeabi_dsub+0x344>)
    5a90:	0d76      	lsrs	r6, r6, #21
    5a92:	46a8      	mov	r8, r5
    5a94:	0fdb      	lsrs	r3, r3, #31
    5a96:	00d2      	lsls	r2, r2, #3
    5a98:	4584      	cmp	ip, r0
    5a9a:	d100      	bne.n	5a9e <__aeabi_dsub+0x3a>
    5a9c:	e0d8      	b.n	5c50 <__aeabi_dsub+0x1ec>
    5a9e:	2001      	movs	r0, #1
    5aa0:	4043      	eors	r3, r0
    5aa2:	42ab      	cmp	r3, r5
    5aa4:	d100      	bne.n	5aa8 <__aeabi_dsub+0x44>
    5aa6:	e0a6      	b.n	5bf6 <__aeabi_dsub+0x192>
    5aa8:	4660      	mov	r0, ip
    5aaa:	1a35      	subs	r5, r6, r0
    5aac:	2d00      	cmp	r5, #0
    5aae:	dc00      	bgt.n	5ab2 <__aeabi_dsub+0x4e>
    5ab0:	e105      	b.n	5cbe <__aeabi_dsub+0x25a>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d110      	bne.n	5ad8 <__aeabi_dsub+0x74>
    5ab6:	000b      	movs	r3, r1
    5ab8:	4313      	orrs	r3, r2
    5aba:	d100      	bne.n	5abe <__aeabi_dsub+0x5a>
    5abc:	e0d7      	b.n	5c6e <__aeabi_dsub+0x20a>
    5abe:	1e6b      	subs	r3, r5, #1
    5ac0:	2b00      	cmp	r3, #0
    5ac2:	d000      	beq.n	5ac6 <__aeabi_dsub+0x62>
    5ac4:	e14b      	b.n	5d5e <__aeabi_dsub+0x2fa>
    5ac6:	4653      	mov	r3, sl
    5ac8:	1a9f      	subs	r7, r3, r2
    5aca:	45ba      	cmp	sl, r7
    5acc:	4180      	sbcs	r0, r0
    5ace:	1a64      	subs	r4, r4, r1
    5ad0:	4240      	negs	r0, r0
    5ad2:	1a24      	subs	r4, r4, r0
    5ad4:	2601      	movs	r6, #1
    5ad6:	e01e      	b.n	5b16 <__aeabi_dsub+0xb2>
    5ad8:	4bb3      	ldr	r3, [pc, #716]	; (5da8 <__aeabi_dsub+0x344>)
    5ada:	429e      	cmp	r6, r3
    5adc:	d048      	beq.n	5b70 <__aeabi_dsub+0x10c>
    5ade:	2380      	movs	r3, #128	; 0x80
    5ae0:	041b      	lsls	r3, r3, #16
    5ae2:	4319      	orrs	r1, r3
    5ae4:	2d38      	cmp	r5, #56	; 0x38
    5ae6:	dd00      	ble.n	5aea <__aeabi_dsub+0x86>
    5ae8:	e119      	b.n	5d1e <__aeabi_dsub+0x2ba>
    5aea:	2d1f      	cmp	r5, #31
    5aec:	dd00      	ble.n	5af0 <__aeabi_dsub+0x8c>
    5aee:	e14c      	b.n	5d8a <__aeabi_dsub+0x326>
    5af0:	2320      	movs	r3, #32
    5af2:	000f      	movs	r7, r1
    5af4:	1b5b      	subs	r3, r3, r5
    5af6:	0010      	movs	r0, r2
    5af8:	409a      	lsls	r2, r3
    5afa:	409f      	lsls	r7, r3
    5afc:	40e8      	lsrs	r0, r5
    5afe:	1e53      	subs	r3, r2, #1
    5b00:	419a      	sbcs	r2, r3
    5b02:	40e9      	lsrs	r1, r5
    5b04:	4307      	orrs	r7, r0
    5b06:	4317      	orrs	r7, r2
    5b08:	4653      	mov	r3, sl
    5b0a:	1bdf      	subs	r7, r3, r7
    5b0c:	1a61      	subs	r1, r4, r1
    5b0e:	45ba      	cmp	sl, r7
    5b10:	41a4      	sbcs	r4, r4
    5b12:	4264      	negs	r4, r4
    5b14:	1b0c      	subs	r4, r1, r4
    5b16:	0223      	lsls	r3, r4, #8
    5b18:	d400      	bmi.n	5b1c <__aeabi_dsub+0xb8>
    5b1a:	e0c5      	b.n	5ca8 <__aeabi_dsub+0x244>
    5b1c:	0264      	lsls	r4, r4, #9
    5b1e:	0a65      	lsrs	r5, r4, #9
    5b20:	2d00      	cmp	r5, #0
    5b22:	d100      	bne.n	5b26 <__aeabi_dsub+0xc2>
    5b24:	e0f6      	b.n	5d14 <__aeabi_dsub+0x2b0>
    5b26:	0028      	movs	r0, r5
    5b28:	f7ff f9aa 	bl	4e80 <__clzsi2>
    5b2c:	0003      	movs	r3, r0
    5b2e:	3b08      	subs	r3, #8
    5b30:	2b1f      	cmp	r3, #31
    5b32:	dd00      	ble.n	5b36 <__aeabi_dsub+0xd2>
    5b34:	e0e9      	b.n	5d0a <__aeabi_dsub+0x2a6>
    5b36:	2220      	movs	r2, #32
    5b38:	003c      	movs	r4, r7
    5b3a:	1ad2      	subs	r2, r2, r3
    5b3c:	409d      	lsls	r5, r3
    5b3e:	40d4      	lsrs	r4, r2
    5b40:	409f      	lsls	r7, r3
    5b42:	4325      	orrs	r5, r4
    5b44:	429e      	cmp	r6, r3
    5b46:	dd00      	ble.n	5b4a <__aeabi_dsub+0xe6>
    5b48:	e0db      	b.n	5d02 <__aeabi_dsub+0x29e>
    5b4a:	1b9e      	subs	r6, r3, r6
    5b4c:	1c73      	adds	r3, r6, #1
    5b4e:	2b1f      	cmp	r3, #31
    5b50:	dd00      	ble.n	5b54 <__aeabi_dsub+0xf0>
    5b52:	e10a      	b.n	5d6a <__aeabi_dsub+0x306>
    5b54:	2220      	movs	r2, #32
    5b56:	0038      	movs	r0, r7
    5b58:	1ad2      	subs	r2, r2, r3
    5b5a:	0029      	movs	r1, r5
    5b5c:	4097      	lsls	r7, r2
    5b5e:	002c      	movs	r4, r5
    5b60:	4091      	lsls	r1, r2
    5b62:	40d8      	lsrs	r0, r3
    5b64:	1e7a      	subs	r2, r7, #1
    5b66:	4197      	sbcs	r7, r2
    5b68:	40dc      	lsrs	r4, r3
    5b6a:	2600      	movs	r6, #0
    5b6c:	4301      	orrs	r1, r0
    5b6e:	430f      	orrs	r7, r1
    5b70:	077b      	lsls	r3, r7, #29
    5b72:	d009      	beq.n	5b88 <__aeabi_dsub+0x124>
    5b74:	230f      	movs	r3, #15
    5b76:	403b      	ands	r3, r7
    5b78:	2b04      	cmp	r3, #4
    5b7a:	d005      	beq.n	5b88 <__aeabi_dsub+0x124>
    5b7c:	1d3b      	adds	r3, r7, #4
    5b7e:	42bb      	cmp	r3, r7
    5b80:	41bf      	sbcs	r7, r7
    5b82:	427f      	negs	r7, r7
    5b84:	19e4      	adds	r4, r4, r7
    5b86:	001f      	movs	r7, r3
    5b88:	0223      	lsls	r3, r4, #8
    5b8a:	d525      	bpl.n	5bd8 <__aeabi_dsub+0x174>
    5b8c:	4b86      	ldr	r3, [pc, #536]	; (5da8 <__aeabi_dsub+0x344>)
    5b8e:	3601      	adds	r6, #1
    5b90:	429e      	cmp	r6, r3
    5b92:	d100      	bne.n	5b96 <__aeabi_dsub+0x132>
    5b94:	e0af      	b.n	5cf6 <__aeabi_dsub+0x292>
    5b96:	4b85      	ldr	r3, [pc, #532]	; (5dac <__aeabi_dsub+0x348>)
    5b98:	2501      	movs	r5, #1
    5b9a:	401c      	ands	r4, r3
    5b9c:	4643      	mov	r3, r8
    5b9e:	0762      	lsls	r2, r4, #29
    5ba0:	08ff      	lsrs	r7, r7, #3
    5ba2:	0264      	lsls	r4, r4, #9
    5ba4:	0576      	lsls	r6, r6, #21
    5ba6:	4317      	orrs	r7, r2
    5ba8:	0b24      	lsrs	r4, r4, #12
    5baa:	0d76      	lsrs	r6, r6, #21
    5bac:	401d      	ands	r5, r3
    5bae:	2100      	movs	r1, #0
    5bb0:	0324      	lsls	r4, r4, #12
    5bb2:	0b23      	lsrs	r3, r4, #12
    5bb4:	0d0c      	lsrs	r4, r1, #20
    5bb6:	4a7e      	ldr	r2, [pc, #504]	; (5db0 <__aeabi_dsub+0x34c>)
    5bb8:	0524      	lsls	r4, r4, #20
    5bba:	431c      	orrs	r4, r3
    5bbc:	4014      	ands	r4, r2
    5bbe:	0533      	lsls	r3, r6, #20
    5bc0:	4323      	orrs	r3, r4
    5bc2:	005b      	lsls	r3, r3, #1
    5bc4:	07ed      	lsls	r5, r5, #31
    5bc6:	085b      	lsrs	r3, r3, #1
    5bc8:	432b      	orrs	r3, r5
    5bca:	0038      	movs	r0, r7
    5bcc:	0019      	movs	r1, r3
    5bce:	bc1c      	pop	{r2, r3, r4}
    5bd0:	4690      	mov	r8, r2
    5bd2:	4699      	mov	r9, r3
    5bd4:	46a2      	mov	sl, r4
    5bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bd8:	2501      	movs	r5, #1
    5bda:	4643      	mov	r3, r8
    5bdc:	0762      	lsls	r2, r4, #29
    5bde:	08ff      	lsrs	r7, r7, #3
    5be0:	4317      	orrs	r7, r2
    5be2:	08e4      	lsrs	r4, r4, #3
    5be4:	401d      	ands	r5, r3
    5be6:	4b70      	ldr	r3, [pc, #448]	; (5da8 <__aeabi_dsub+0x344>)
    5be8:	429e      	cmp	r6, r3
    5bea:	d036      	beq.n	5c5a <__aeabi_dsub+0x1f6>
    5bec:	0324      	lsls	r4, r4, #12
    5bee:	0576      	lsls	r6, r6, #21
    5bf0:	0b24      	lsrs	r4, r4, #12
    5bf2:	0d76      	lsrs	r6, r6, #21
    5bf4:	e7db      	b.n	5bae <__aeabi_dsub+0x14a>
    5bf6:	4663      	mov	r3, ip
    5bf8:	1af3      	subs	r3, r6, r3
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	dc00      	bgt.n	5c00 <__aeabi_dsub+0x19c>
    5bfe:	e094      	b.n	5d2a <__aeabi_dsub+0x2c6>
    5c00:	4660      	mov	r0, ip
    5c02:	2800      	cmp	r0, #0
    5c04:	d035      	beq.n	5c72 <__aeabi_dsub+0x20e>
    5c06:	4868      	ldr	r0, [pc, #416]	; (5da8 <__aeabi_dsub+0x344>)
    5c08:	4286      	cmp	r6, r0
    5c0a:	d0b1      	beq.n	5b70 <__aeabi_dsub+0x10c>
    5c0c:	2780      	movs	r7, #128	; 0x80
    5c0e:	043f      	lsls	r7, r7, #16
    5c10:	4339      	orrs	r1, r7
    5c12:	2b38      	cmp	r3, #56	; 0x38
    5c14:	dc00      	bgt.n	5c18 <__aeabi_dsub+0x1b4>
    5c16:	e0fd      	b.n	5e14 <__aeabi_dsub+0x3b0>
    5c18:	430a      	orrs	r2, r1
    5c1a:	0017      	movs	r7, r2
    5c1c:	2100      	movs	r1, #0
    5c1e:	1e7a      	subs	r2, r7, #1
    5c20:	4197      	sbcs	r7, r2
    5c22:	4457      	add	r7, sl
    5c24:	4557      	cmp	r7, sl
    5c26:	4180      	sbcs	r0, r0
    5c28:	1909      	adds	r1, r1, r4
    5c2a:	4244      	negs	r4, r0
    5c2c:	190c      	adds	r4, r1, r4
    5c2e:	0223      	lsls	r3, r4, #8
    5c30:	d53a      	bpl.n	5ca8 <__aeabi_dsub+0x244>
    5c32:	4b5d      	ldr	r3, [pc, #372]	; (5da8 <__aeabi_dsub+0x344>)
    5c34:	3601      	adds	r6, #1
    5c36:	429e      	cmp	r6, r3
    5c38:	d100      	bne.n	5c3c <__aeabi_dsub+0x1d8>
    5c3a:	e14b      	b.n	5ed4 <__aeabi_dsub+0x470>
    5c3c:	2201      	movs	r2, #1
    5c3e:	4b5b      	ldr	r3, [pc, #364]	; (5dac <__aeabi_dsub+0x348>)
    5c40:	401c      	ands	r4, r3
    5c42:	087b      	lsrs	r3, r7, #1
    5c44:	4017      	ands	r7, r2
    5c46:	431f      	orrs	r7, r3
    5c48:	07e2      	lsls	r2, r4, #31
    5c4a:	4317      	orrs	r7, r2
    5c4c:	0864      	lsrs	r4, r4, #1
    5c4e:	e78f      	b.n	5b70 <__aeabi_dsub+0x10c>
    5c50:	0008      	movs	r0, r1
    5c52:	4310      	orrs	r0, r2
    5c54:	d000      	beq.n	5c58 <__aeabi_dsub+0x1f4>
    5c56:	e724      	b.n	5aa2 <__aeabi_dsub+0x3e>
    5c58:	e721      	b.n	5a9e <__aeabi_dsub+0x3a>
    5c5a:	0023      	movs	r3, r4
    5c5c:	433b      	orrs	r3, r7
    5c5e:	d100      	bne.n	5c62 <__aeabi_dsub+0x1fe>
    5c60:	e1b9      	b.n	5fd6 <__aeabi_dsub+0x572>
    5c62:	2280      	movs	r2, #128	; 0x80
    5c64:	0312      	lsls	r2, r2, #12
    5c66:	4314      	orrs	r4, r2
    5c68:	0324      	lsls	r4, r4, #12
    5c6a:	0b24      	lsrs	r4, r4, #12
    5c6c:	e79f      	b.n	5bae <__aeabi_dsub+0x14a>
    5c6e:	002e      	movs	r6, r5
    5c70:	e77e      	b.n	5b70 <__aeabi_dsub+0x10c>
    5c72:	0008      	movs	r0, r1
    5c74:	4310      	orrs	r0, r2
    5c76:	d100      	bne.n	5c7a <__aeabi_dsub+0x216>
    5c78:	e0ca      	b.n	5e10 <__aeabi_dsub+0x3ac>
    5c7a:	1e58      	subs	r0, r3, #1
    5c7c:	4684      	mov	ip, r0
    5c7e:	2800      	cmp	r0, #0
    5c80:	d000      	beq.n	5c84 <__aeabi_dsub+0x220>
    5c82:	e0e7      	b.n	5e54 <__aeabi_dsub+0x3f0>
    5c84:	4452      	add	r2, sl
    5c86:	4552      	cmp	r2, sl
    5c88:	4180      	sbcs	r0, r0
    5c8a:	1864      	adds	r4, r4, r1
    5c8c:	4240      	negs	r0, r0
    5c8e:	1824      	adds	r4, r4, r0
    5c90:	0017      	movs	r7, r2
    5c92:	2601      	movs	r6, #1
    5c94:	0223      	lsls	r3, r4, #8
    5c96:	d507      	bpl.n	5ca8 <__aeabi_dsub+0x244>
    5c98:	2602      	movs	r6, #2
    5c9a:	e7cf      	b.n	5c3c <__aeabi_dsub+0x1d8>
    5c9c:	4664      	mov	r4, ip
    5c9e:	432c      	orrs	r4, r5
    5ca0:	d100      	bne.n	5ca4 <__aeabi_dsub+0x240>
    5ca2:	e1b3      	b.n	600c <__aeabi_dsub+0x5a8>
    5ca4:	002c      	movs	r4, r5
    5ca6:	4667      	mov	r7, ip
    5ca8:	077b      	lsls	r3, r7, #29
    5caa:	d000      	beq.n	5cae <__aeabi_dsub+0x24a>
    5cac:	e762      	b.n	5b74 <__aeabi_dsub+0x110>
    5cae:	0763      	lsls	r3, r4, #29
    5cb0:	08ff      	lsrs	r7, r7, #3
    5cb2:	431f      	orrs	r7, r3
    5cb4:	2501      	movs	r5, #1
    5cb6:	4643      	mov	r3, r8
    5cb8:	08e4      	lsrs	r4, r4, #3
    5cba:	401d      	ands	r5, r3
    5cbc:	e793      	b.n	5be6 <__aeabi_dsub+0x182>
    5cbe:	2d00      	cmp	r5, #0
    5cc0:	d178      	bne.n	5db4 <__aeabi_dsub+0x350>
    5cc2:	1c75      	adds	r5, r6, #1
    5cc4:	056d      	lsls	r5, r5, #21
    5cc6:	0d6d      	lsrs	r5, r5, #21
    5cc8:	2d01      	cmp	r5, #1
    5cca:	dc00      	bgt.n	5cce <__aeabi_dsub+0x26a>
    5ccc:	e0f2      	b.n	5eb4 <__aeabi_dsub+0x450>
    5cce:	4650      	mov	r0, sl
    5cd0:	1a80      	subs	r0, r0, r2
    5cd2:	4582      	cmp	sl, r0
    5cd4:	41bf      	sbcs	r7, r7
    5cd6:	1a65      	subs	r5, r4, r1
    5cd8:	427f      	negs	r7, r7
    5cda:	1bed      	subs	r5, r5, r7
    5cdc:	4684      	mov	ip, r0
    5cde:	0228      	lsls	r0, r5, #8
    5ce0:	d400      	bmi.n	5ce4 <__aeabi_dsub+0x280>
    5ce2:	e08c      	b.n	5dfe <__aeabi_dsub+0x39a>
    5ce4:	4650      	mov	r0, sl
    5ce6:	1a17      	subs	r7, r2, r0
    5ce8:	42ba      	cmp	r2, r7
    5cea:	4192      	sbcs	r2, r2
    5cec:	1b0c      	subs	r4, r1, r4
    5cee:	4255      	negs	r5, r2
    5cf0:	1b65      	subs	r5, r4, r5
    5cf2:	4698      	mov	r8, r3
    5cf4:	e714      	b.n	5b20 <__aeabi_dsub+0xbc>
    5cf6:	2501      	movs	r5, #1
    5cf8:	4643      	mov	r3, r8
    5cfa:	2400      	movs	r4, #0
    5cfc:	401d      	ands	r5, r3
    5cfe:	2700      	movs	r7, #0
    5d00:	e755      	b.n	5bae <__aeabi_dsub+0x14a>
    5d02:	4c2a      	ldr	r4, [pc, #168]	; (5dac <__aeabi_dsub+0x348>)
    5d04:	1af6      	subs	r6, r6, r3
    5d06:	402c      	ands	r4, r5
    5d08:	e732      	b.n	5b70 <__aeabi_dsub+0x10c>
    5d0a:	003d      	movs	r5, r7
    5d0c:	3828      	subs	r0, #40	; 0x28
    5d0e:	4085      	lsls	r5, r0
    5d10:	2700      	movs	r7, #0
    5d12:	e717      	b.n	5b44 <__aeabi_dsub+0xe0>
    5d14:	0038      	movs	r0, r7
    5d16:	f7ff f8b3 	bl	4e80 <__clzsi2>
    5d1a:	3020      	adds	r0, #32
    5d1c:	e706      	b.n	5b2c <__aeabi_dsub+0xc8>
    5d1e:	430a      	orrs	r2, r1
    5d20:	0017      	movs	r7, r2
    5d22:	2100      	movs	r1, #0
    5d24:	1e7a      	subs	r2, r7, #1
    5d26:	4197      	sbcs	r7, r2
    5d28:	e6ee      	b.n	5b08 <__aeabi_dsub+0xa4>
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d000      	beq.n	5d30 <__aeabi_dsub+0x2cc>
    5d2e:	e0e5      	b.n	5efc <__aeabi_dsub+0x498>
    5d30:	1c73      	adds	r3, r6, #1
    5d32:	469c      	mov	ip, r3
    5d34:	055b      	lsls	r3, r3, #21
    5d36:	0d5b      	lsrs	r3, r3, #21
    5d38:	2b01      	cmp	r3, #1
    5d3a:	dc00      	bgt.n	5d3e <__aeabi_dsub+0x2da>
    5d3c:	e09f      	b.n	5e7e <__aeabi_dsub+0x41a>
    5d3e:	4b1a      	ldr	r3, [pc, #104]	; (5da8 <__aeabi_dsub+0x344>)
    5d40:	459c      	cmp	ip, r3
    5d42:	d100      	bne.n	5d46 <__aeabi_dsub+0x2e2>
    5d44:	e0c5      	b.n	5ed2 <__aeabi_dsub+0x46e>
    5d46:	4452      	add	r2, sl
    5d48:	4552      	cmp	r2, sl
    5d4a:	4180      	sbcs	r0, r0
    5d4c:	1864      	adds	r4, r4, r1
    5d4e:	4240      	negs	r0, r0
    5d50:	1824      	adds	r4, r4, r0
    5d52:	07e7      	lsls	r7, r4, #31
    5d54:	0852      	lsrs	r2, r2, #1
    5d56:	4317      	orrs	r7, r2
    5d58:	0864      	lsrs	r4, r4, #1
    5d5a:	4666      	mov	r6, ip
    5d5c:	e708      	b.n	5b70 <__aeabi_dsub+0x10c>
    5d5e:	4812      	ldr	r0, [pc, #72]	; (5da8 <__aeabi_dsub+0x344>)
    5d60:	4285      	cmp	r5, r0
    5d62:	d100      	bne.n	5d66 <__aeabi_dsub+0x302>
    5d64:	e085      	b.n	5e72 <__aeabi_dsub+0x40e>
    5d66:	001d      	movs	r5, r3
    5d68:	e6bc      	b.n	5ae4 <__aeabi_dsub+0x80>
    5d6a:	0029      	movs	r1, r5
    5d6c:	3e1f      	subs	r6, #31
    5d6e:	40f1      	lsrs	r1, r6
    5d70:	2b20      	cmp	r3, #32
    5d72:	d100      	bne.n	5d76 <__aeabi_dsub+0x312>
    5d74:	e07f      	b.n	5e76 <__aeabi_dsub+0x412>
    5d76:	2240      	movs	r2, #64	; 0x40
    5d78:	1ad3      	subs	r3, r2, r3
    5d7a:	409d      	lsls	r5, r3
    5d7c:	432f      	orrs	r7, r5
    5d7e:	1e7d      	subs	r5, r7, #1
    5d80:	41af      	sbcs	r7, r5
    5d82:	2400      	movs	r4, #0
    5d84:	430f      	orrs	r7, r1
    5d86:	2600      	movs	r6, #0
    5d88:	e78e      	b.n	5ca8 <__aeabi_dsub+0x244>
    5d8a:	002b      	movs	r3, r5
    5d8c:	000f      	movs	r7, r1
    5d8e:	3b20      	subs	r3, #32
    5d90:	40df      	lsrs	r7, r3
    5d92:	2d20      	cmp	r5, #32
    5d94:	d071      	beq.n	5e7a <__aeabi_dsub+0x416>
    5d96:	2340      	movs	r3, #64	; 0x40
    5d98:	1b5d      	subs	r5, r3, r5
    5d9a:	40a9      	lsls	r1, r5
    5d9c:	430a      	orrs	r2, r1
    5d9e:	1e51      	subs	r1, r2, #1
    5da0:	418a      	sbcs	r2, r1
    5da2:	2100      	movs	r1, #0
    5da4:	4317      	orrs	r7, r2
    5da6:	e6af      	b.n	5b08 <__aeabi_dsub+0xa4>
    5da8:	000007ff 	.word	0x000007ff
    5dac:	ff7fffff 	.word	0xff7fffff
    5db0:	800fffff 	.word	0x800fffff
    5db4:	2e00      	cmp	r6, #0
    5db6:	d03e      	beq.n	5e36 <__aeabi_dsub+0x3d2>
    5db8:	4eb3      	ldr	r6, [pc, #716]	; (6088 <__aeabi_dsub+0x624>)
    5dba:	45b4      	cmp	ip, r6
    5dbc:	d045      	beq.n	5e4a <__aeabi_dsub+0x3e6>
    5dbe:	2680      	movs	r6, #128	; 0x80
    5dc0:	0436      	lsls	r6, r6, #16
    5dc2:	426d      	negs	r5, r5
    5dc4:	4334      	orrs	r4, r6
    5dc6:	2d38      	cmp	r5, #56	; 0x38
    5dc8:	dd00      	ble.n	5dcc <__aeabi_dsub+0x368>
    5dca:	e0a8      	b.n	5f1e <__aeabi_dsub+0x4ba>
    5dcc:	2d1f      	cmp	r5, #31
    5dce:	dd00      	ble.n	5dd2 <__aeabi_dsub+0x36e>
    5dd0:	e11f      	b.n	6012 <__aeabi_dsub+0x5ae>
    5dd2:	2620      	movs	r6, #32
    5dd4:	0027      	movs	r7, r4
    5dd6:	4650      	mov	r0, sl
    5dd8:	1b76      	subs	r6, r6, r5
    5dda:	40b7      	lsls	r7, r6
    5ddc:	40e8      	lsrs	r0, r5
    5dde:	4307      	orrs	r7, r0
    5de0:	4650      	mov	r0, sl
    5de2:	40b0      	lsls	r0, r6
    5de4:	1e46      	subs	r6, r0, #1
    5de6:	41b0      	sbcs	r0, r6
    5de8:	40ec      	lsrs	r4, r5
    5dea:	4338      	orrs	r0, r7
    5dec:	1a17      	subs	r7, r2, r0
    5dee:	42ba      	cmp	r2, r7
    5df0:	4192      	sbcs	r2, r2
    5df2:	1b0c      	subs	r4, r1, r4
    5df4:	4252      	negs	r2, r2
    5df6:	1aa4      	subs	r4, r4, r2
    5df8:	4666      	mov	r6, ip
    5dfa:	4698      	mov	r8, r3
    5dfc:	e68b      	b.n	5b16 <__aeabi_dsub+0xb2>
    5dfe:	4664      	mov	r4, ip
    5e00:	4667      	mov	r7, ip
    5e02:	432c      	orrs	r4, r5
    5e04:	d000      	beq.n	5e08 <__aeabi_dsub+0x3a4>
    5e06:	e68b      	b.n	5b20 <__aeabi_dsub+0xbc>
    5e08:	2500      	movs	r5, #0
    5e0a:	2600      	movs	r6, #0
    5e0c:	2700      	movs	r7, #0
    5e0e:	e6ea      	b.n	5be6 <__aeabi_dsub+0x182>
    5e10:	001e      	movs	r6, r3
    5e12:	e6ad      	b.n	5b70 <__aeabi_dsub+0x10c>
    5e14:	2b1f      	cmp	r3, #31
    5e16:	dc60      	bgt.n	5eda <__aeabi_dsub+0x476>
    5e18:	2720      	movs	r7, #32
    5e1a:	1af8      	subs	r0, r7, r3
    5e1c:	000f      	movs	r7, r1
    5e1e:	4684      	mov	ip, r0
    5e20:	4087      	lsls	r7, r0
    5e22:	0010      	movs	r0, r2
    5e24:	40d8      	lsrs	r0, r3
    5e26:	4307      	orrs	r7, r0
    5e28:	4660      	mov	r0, ip
    5e2a:	4082      	lsls	r2, r0
    5e2c:	1e50      	subs	r0, r2, #1
    5e2e:	4182      	sbcs	r2, r0
    5e30:	40d9      	lsrs	r1, r3
    5e32:	4317      	orrs	r7, r2
    5e34:	e6f5      	b.n	5c22 <__aeabi_dsub+0x1be>
    5e36:	0026      	movs	r6, r4
    5e38:	4650      	mov	r0, sl
    5e3a:	4306      	orrs	r6, r0
    5e3c:	d005      	beq.n	5e4a <__aeabi_dsub+0x3e6>
    5e3e:	43ed      	mvns	r5, r5
    5e40:	2d00      	cmp	r5, #0
    5e42:	d0d3      	beq.n	5dec <__aeabi_dsub+0x388>
    5e44:	4e90      	ldr	r6, [pc, #576]	; (6088 <__aeabi_dsub+0x624>)
    5e46:	45b4      	cmp	ip, r6
    5e48:	d1bd      	bne.n	5dc6 <__aeabi_dsub+0x362>
    5e4a:	000c      	movs	r4, r1
    5e4c:	0017      	movs	r7, r2
    5e4e:	4666      	mov	r6, ip
    5e50:	4698      	mov	r8, r3
    5e52:	e68d      	b.n	5b70 <__aeabi_dsub+0x10c>
    5e54:	488c      	ldr	r0, [pc, #560]	; (6088 <__aeabi_dsub+0x624>)
    5e56:	4283      	cmp	r3, r0
    5e58:	d00b      	beq.n	5e72 <__aeabi_dsub+0x40e>
    5e5a:	4663      	mov	r3, ip
    5e5c:	e6d9      	b.n	5c12 <__aeabi_dsub+0x1ae>
    5e5e:	2d00      	cmp	r5, #0
    5e60:	d000      	beq.n	5e64 <__aeabi_dsub+0x400>
    5e62:	e096      	b.n	5f92 <__aeabi_dsub+0x52e>
    5e64:	0008      	movs	r0, r1
    5e66:	4310      	orrs	r0, r2
    5e68:	d100      	bne.n	5e6c <__aeabi_dsub+0x408>
    5e6a:	e0e2      	b.n	6032 <__aeabi_dsub+0x5ce>
    5e6c:	000c      	movs	r4, r1
    5e6e:	0017      	movs	r7, r2
    5e70:	4698      	mov	r8, r3
    5e72:	4e85      	ldr	r6, [pc, #532]	; (6088 <__aeabi_dsub+0x624>)
    5e74:	e67c      	b.n	5b70 <__aeabi_dsub+0x10c>
    5e76:	2500      	movs	r5, #0
    5e78:	e780      	b.n	5d7c <__aeabi_dsub+0x318>
    5e7a:	2100      	movs	r1, #0
    5e7c:	e78e      	b.n	5d9c <__aeabi_dsub+0x338>
    5e7e:	0023      	movs	r3, r4
    5e80:	4650      	mov	r0, sl
    5e82:	4303      	orrs	r3, r0
    5e84:	2e00      	cmp	r6, #0
    5e86:	d000      	beq.n	5e8a <__aeabi_dsub+0x426>
    5e88:	e0a8      	b.n	5fdc <__aeabi_dsub+0x578>
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d100      	bne.n	5e90 <__aeabi_dsub+0x42c>
    5e8e:	e0de      	b.n	604e <__aeabi_dsub+0x5ea>
    5e90:	000b      	movs	r3, r1
    5e92:	4313      	orrs	r3, r2
    5e94:	d100      	bne.n	5e98 <__aeabi_dsub+0x434>
    5e96:	e66b      	b.n	5b70 <__aeabi_dsub+0x10c>
    5e98:	4452      	add	r2, sl
    5e9a:	4552      	cmp	r2, sl
    5e9c:	4180      	sbcs	r0, r0
    5e9e:	1864      	adds	r4, r4, r1
    5ea0:	4240      	negs	r0, r0
    5ea2:	1824      	adds	r4, r4, r0
    5ea4:	0017      	movs	r7, r2
    5ea6:	0223      	lsls	r3, r4, #8
    5ea8:	d400      	bmi.n	5eac <__aeabi_dsub+0x448>
    5eaa:	e6fd      	b.n	5ca8 <__aeabi_dsub+0x244>
    5eac:	4b77      	ldr	r3, [pc, #476]	; (608c <__aeabi_dsub+0x628>)
    5eae:	4666      	mov	r6, ip
    5eb0:	401c      	ands	r4, r3
    5eb2:	e65d      	b.n	5b70 <__aeabi_dsub+0x10c>
    5eb4:	0025      	movs	r5, r4
    5eb6:	4650      	mov	r0, sl
    5eb8:	4305      	orrs	r5, r0
    5eba:	2e00      	cmp	r6, #0
    5ebc:	d1cf      	bne.n	5e5e <__aeabi_dsub+0x3fa>
    5ebe:	2d00      	cmp	r5, #0
    5ec0:	d14f      	bne.n	5f62 <__aeabi_dsub+0x4fe>
    5ec2:	000c      	movs	r4, r1
    5ec4:	4314      	orrs	r4, r2
    5ec6:	d100      	bne.n	5eca <__aeabi_dsub+0x466>
    5ec8:	e0a0      	b.n	600c <__aeabi_dsub+0x5a8>
    5eca:	000c      	movs	r4, r1
    5ecc:	0017      	movs	r7, r2
    5ece:	4698      	mov	r8, r3
    5ed0:	e64e      	b.n	5b70 <__aeabi_dsub+0x10c>
    5ed2:	4666      	mov	r6, ip
    5ed4:	2400      	movs	r4, #0
    5ed6:	2700      	movs	r7, #0
    5ed8:	e685      	b.n	5be6 <__aeabi_dsub+0x182>
    5eda:	001f      	movs	r7, r3
    5edc:	0008      	movs	r0, r1
    5ede:	3f20      	subs	r7, #32
    5ee0:	40f8      	lsrs	r0, r7
    5ee2:	0007      	movs	r7, r0
    5ee4:	2b20      	cmp	r3, #32
    5ee6:	d100      	bne.n	5eea <__aeabi_dsub+0x486>
    5ee8:	e08e      	b.n	6008 <__aeabi_dsub+0x5a4>
    5eea:	2040      	movs	r0, #64	; 0x40
    5eec:	1ac3      	subs	r3, r0, r3
    5eee:	4099      	lsls	r1, r3
    5ef0:	430a      	orrs	r2, r1
    5ef2:	1e51      	subs	r1, r2, #1
    5ef4:	418a      	sbcs	r2, r1
    5ef6:	2100      	movs	r1, #0
    5ef8:	4317      	orrs	r7, r2
    5efa:	e692      	b.n	5c22 <__aeabi_dsub+0x1be>
    5efc:	2e00      	cmp	r6, #0
    5efe:	d114      	bne.n	5f2a <__aeabi_dsub+0x4c6>
    5f00:	0026      	movs	r6, r4
    5f02:	4650      	mov	r0, sl
    5f04:	4306      	orrs	r6, r0
    5f06:	d062      	beq.n	5fce <__aeabi_dsub+0x56a>
    5f08:	43db      	mvns	r3, r3
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d15c      	bne.n	5fc8 <__aeabi_dsub+0x564>
    5f0e:	1887      	adds	r7, r0, r2
    5f10:	4297      	cmp	r7, r2
    5f12:	4192      	sbcs	r2, r2
    5f14:	1864      	adds	r4, r4, r1
    5f16:	4252      	negs	r2, r2
    5f18:	18a4      	adds	r4, r4, r2
    5f1a:	4666      	mov	r6, ip
    5f1c:	e687      	b.n	5c2e <__aeabi_dsub+0x1ca>
    5f1e:	4650      	mov	r0, sl
    5f20:	4320      	orrs	r0, r4
    5f22:	1e44      	subs	r4, r0, #1
    5f24:	41a0      	sbcs	r0, r4
    5f26:	2400      	movs	r4, #0
    5f28:	e760      	b.n	5dec <__aeabi_dsub+0x388>
    5f2a:	4e57      	ldr	r6, [pc, #348]	; (6088 <__aeabi_dsub+0x624>)
    5f2c:	45b4      	cmp	ip, r6
    5f2e:	d04e      	beq.n	5fce <__aeabi_dsub+0x56a>
    5f30:	2680      	movs	r6, #128	; 0x80
    5f32:	0436      	lsls	r6, r6, #16
    5f34:	425b      	negs	r3, r3
    5f36:	4334      	orrs	r4, r6
    5f38:	2b38      	cmp	r3, #56	; 0x38
    5f3a:	dd00      	ble.n	5f3e <__aeabi_dsub+0x4da>
    5f3c:	e07f      	b.n	603e <__aeabi_dsub+0x5da>
    5f3e:	2b1f      	cmp	r3, #31
    5f40:	dd00      	ble.n	5f44 <__aeabi_dsub+0x4e0>
    5f42:	e08b      	b.n	605c <__aeabi_dsub+0x5f8>
    5f44:	2620      	movs	r6, #32
    5f46:	0027      	movs	r7, r4
    5f48:	4650      	mov	r0, sl
    5f4a:	1af6      	subs	r6, r6, r3
    5f4c:	40b7      	lsls	r7, r6
    5f4e:	40d8      	lsrs	r0, r3
    5f50:	4307      	orrs	r7, r0
    5f52:	4650      	mov	r0, sl
    5f54:	40b0      	lsls	r0, r6
    5f56:	1e46      	subs	r6, r0, #1
    5f58:	41b0      	sbcs	r0, r6
    5f5a:	4307      	orrs	r7, r0
    5f5c:	40dc      	lsrs	r4, r3
    5f5e:	18bf      	adds	r7, r7, r2
    5f60:	e7d6      	b.n	5f10 <__aeabi_dsub+0x4ac>
    5f62:	000d      	movs	r5, r1
    5f64:	4315      	orrs	r5, r2
    5f66:	d100      	bne.n	5f6a <__aeabi_dsub+0x506>
    5f68:	e602      	b.n	5b70 <__aeabi_dsub+0x10c>
    5f6a:	4650      	mov	r0, sl
    5f6c:	1a80      	subs	r0, r0, r2
    5f6e:	4582      	cmp	sl, r0
    5f70:	41bf      	sbcs	r7, r7
    5f72:	1a65      	subs	r5, r4, r1
    5f74:	427f      	negs	r7, r7
    5f76:	1bed      	subs	r5, r5, r7
    5f78:	4684      	mov	ip, r0
    5f7a:	0228      	lsls	r0, r5, #8
    5f7c:	d400      	bmi.n	5f80 <__aeabi_dsub+0x51c>
    5f7e:	e68d      	b.n	5c9c <__aeabi_dsub+0x238>
    5f80:	4650      	mov	r0, sl
    5f82:	1a17      	subs	r7, r2, r0
    5f84:	42ba      	cmp	r2, r7
    5f86:	4192      	sbcs	r2, r2
    5f88:	1b0c      	subs	r4, r1, r4
    5f8a:	4252      	negs	r2, r2
    5f8c:	1aa4      	subs	r4, r4, r2
    5f8e:	4698      	mov	r8, r3
    5f90:	e5ee      	b.n	5b70 <__aeabi_dsub+0x10c>
    5f92:	000d      	movs	r5, r1
    5f94:	4315      	orrs	r5, r2
    5f96:	d100      	bne.n	5f9a <__aeabi_dsub+0x536>
    5f98:	e76b      	b.n	5e72 <__aeabi_dsub+0x40e>
    5f9a:	4650      	mov	r0, sl
    5f9c:	0767      	lsls	r7, r4, #29
    5f9e:	08c0      	lsrs	r0, r0, #3
    5fa0:	4307      	orrs	r7, r0
    5fa2:	2080      	movs	r0, #128	; 0x80
    5fa4:	08e4      	lsrs	r4, r4, #3
    5fa6:	0300      	lsls	r0, r0, #12
    5fa8:	4204      	tst	r4, r0
    5faa:	d007      	beq.n	5fbc <__aeabi_dsub+0x558>
    5fac:	08cd      	lsrs	r5, r1, #3
    5fae:	4205      	tst	r5, r0
    5fb0:	d104      	bne.n	5fbc <__aeabi_dsub+0x558>
    5fb2:	002c      	movs	r4, r5
    5fb4:	4698      	mov	r8, r3
    5fb6:	08d7      	lsrs	r7, r2, #3
    5fb8:	0749      	lsls	r1, r1, #29
    5fba:	430f      	orrs	r7, r1
    5fbc:	0f7b      	lsrs	r3, r7, #29
    5fbe:	00e4      	lsls	r4, r4, #3
    5fc0:	431c      	orrs	r4, r3
    5fc2:	00ff      	lsls	r7, r7, #3
    5fc4:	4e30      	ldr	r6, [pc, #192]	; (6088 <__aeabi_dsub+0x624>)
    5fc6:	e5d3      	b.n	5b70 <__aeabi_dsub+0x10c>
    5fc8:	4e2f      	ldr	r6, [pc, #188]	; (6088 <__aeabi_dsub+0x624>)
    5fca:	45b4      	cmp	ip, r6
    5fcc:	d1b4      	bne.n	5f38 <__aeabi_dsub+0x4d4>
    5fce:	000c      	movs	r4, r1
    5fd0:	0017      	movs	r7, r2
    5fd2:	4666      	mov	r6, ip
    5fd4:	e5cc      	b.n	5b70 <__aeabi_dsub+0x10c>
    5fd6:	2700      	movs	r7, #0
    5fd8:	2400      	movs	r4, #0
    5fda:	e5e8      	b.n	5bae <__aeabi_dsub+0x14a>
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d039      	beq.n	6054 <__aeabi_dsub+0x5f0>
    5fe0:	000b      	movs	r3, r1
    5fe2:	4313      	orrs	r3, r2
    5fe4:	d100      	bne.n	5fe8 <__aeabi_dsub+0x584>
    5fe6:	e744      	b.n	5e72 <__aeabi_dsub+0x40e>
    5fe8:	08c0      	lsrs	r0, r0, #3
    5fea:	0767      	lsls	r7, r4, #29
    5fec:	4307      	orrs	r7, r0
    5fee:	2080      	movs	r0, #128	; 0x80
    5ff0:	08e4      	lsrs	r4, r4, #3
    5ff2:	0300      	lsls	r0, r0, #12
    5ff4:	4204      	tst	r4, r0
    5ff6:	d0e1      	beq.n	5fbc <__aeabi_dsub+0x558>
    5ff8:	08cb      	lsrs	r3, r1, #3
    5ffa:	4203      	tst	r3, r0
    5ffc:	d1de      	bne.n	5fbc <__aeabi_dsub+0x558>
    5ffe:	08d7      	lsrs	r7, r2, #3
    6000:	0749      	lsls	r1, r1, #29
    6002:	430f      	orrs	r7, r1
    6004:	001c      	movs	r4, r3
    6006:	e7d9      	b.n	5fbc <__aeabi_dsub+0x558>
    6008:	2100      	movs	r1, #0
    600a:	e771      	b.n	5ef0 <__aeabi_dsub+0x48c>
    600c:	2500      	movs	r5, #0
    600e:	2700      	movs	r7, #0
    6010:	e5e9      	b.n	5be6 <__aeabi_dsub+0x182>
    6012:	002e      	movs	r6, r5
    6014:	0027      	movs	r7, r4
    6016:	3e20      	subs	r6, #32
    6018:	40f7      	lsrs	r7, r6
    601a:	2d20      	cmp	r5, #32
    601c:	d02f      	beq.n	607e <__aeabi_dsub+0x61a>
    601e:	2640      	movs	r6, #64	; 0x40
    6020:	1b75      	subs	r5, r6, r5
    6022:	40ac      	lsls	r4, r5
    6024:	4650      	mov	r0, sl
    6026:	4320      	orrs	r0, r4
    6028:	1e44      	subs	r4, r0, #1
    602a:	41a0      	sbcs	r0, r4
    602c:	2400      	movs	r4, #0
    602e:	4338      	orrs	r0, r7
    6030:	e6dc      	b.n	5dec <__aeabi_dsub+0x388>
    6032:	2480      	movs	r4, #128	; 0x80
    6034:	2500      	movs	r5, #0
    6036:	0324      	lsls	r4, r4, #12
    6038:	4e13      	ldr	r6, [pc, #76]	; (6088 <__aeabi_dsub+0x624>)
    603a:	2700      	movs	r7, #0
    603c:	e5d3      	b.n	5be6 <__aeabi_dsub+0x182>
    603e:	4650      	mov	r0, sl
    6040:	4320      	orrs	r0, r4
    6042:	0007      	movs	r7, r0
    6044:	1e78      	subs	r0, r7, #1
    6046:	4187      	sbcs	r7, r0
    6048:	2400      	movs	r4, #0
    604a:	18bf      	adds	r7, r7, r2
    604c:	e760      	b.n	5f10 <__aeabi_dsub+0x4ac>
    604e:	000c      	movs	r4, r1
    6050:	0017      	movs	r7, r2
    6052:	e58d      	b.n	5b70 <__aeabi_dsub+0x10c>
    6054:	000c      	movs	r4, r1
    6056:	0017      	movs	r7, r2
    6058:	4e0b      	ldr	r6, [pc, #44]	; (6088 <__aeabi_dsub+0x624>)
    605a:	e589      	b.n	5b70 <__aeabi_dsub+0x10c>
    605c:	001e      	movs	r6, r3
    605e:	0027      	movs	r7, r4
    6060:	3e20      	subs	r6, #32
    6062:	40f7      	lsrs	r7, r6
    6064:	2b20      	cmp	r3, #32
    6066:	d00c      	beq.n	6082 <__aeabi_dsub+0x61e>
    6068:	2640      	movs	r6, #64	; 0x40
    606a:	1af3      	subs	r3, r6, r3
    606c:	409c      	lsls	r4, r3
    606e:	4650      	mov	r0, sl
    6070:	4320      	orrs	r0, r4
    6072:	1e44      	subs	r4, r0, #1
    6074:	41a0      	sbcs	r0, r4
    6076:	4307      	orrs	r7, r0
    6078:	2400      	movs	r4, #0
    607a:	18bf      	adds	r7, r7, r2
    607c:	e748      	b.n	5f10 <__aeabi_dsub+0x4ac>
    607e:	2400      	movs	r4, #0
    6080:	e7d0      	b.n	6024 <__aeabi_dsub+0x5c0>
    6082:	2400      	movs	r4, #0
    6084:	e7f3      	b.n	606e <__aeabi_dsub+0x60a>
    6086:	46c0      	nop			; (mov r8, r8)
    6088:	000007ff 	.word	0x000007ff
    608c:	ff7fffff 	.word	0xff7fffff

00006090 <__aeabi_d2iz>:
    6090:	b530      	push	{r4, r5, lr}
    6092:	4d13      	ldr	r5, [pc, #76]	; (60e0 <__aeabi_d2iz+0x50>)
    6094:	030a      	lsls	r2, r1, #12
    6096:	004b      	lsls	r3, r1, #1
    6098:	0b12      	lsrs	r2, r2, #12
    609a:	0d5b      	lsrs	r3, r3, #21
    609c:	0fc9      	lsrs	r1, r1, #31
    609e:	2400      	movs	r4, #0
    60a0:	42ab      	cmp	r3, r5
    60a2:	dd10      	ble.n	60c6 <__aeabi_d2iz+0x36>
    60a4:	4c0f      	ldr	r4, [pc, #60]	; (60e4 <__aeabi_d2iz+0x54>)
    60a6:	42a3      	cmp	r3, r4
    60a8:	dc0f      	bgt.n	60ca <__aeabi_d2iz+0x3a>
    60aa:	2480      	movs	r4, #128	; 0x80
    60ac:	4d0e      	ldr	r5, [pc, #56]	; (60e8 <__aeabi_d2iz+0x58>)
    60ae:	0364      	lsls	r4, r4, #13
    60b0:	4322      	orrs	r2, r4
    60b2:	1aed      	subs	r5, r5, r3
    60b4:	2d1f      	cmp	r5, #31
    60b6:	dd0b      	ble.n	60d0 <__aeabi_d2iz+0x40>
    60b8:	480c      	ldr	r0, [pc, #48]	; (60ec <__aeabi_d2iz+0x5c>)
    60ba:	1ac3      	subs	r3, r0, r3
    60bc:	40da      	lsrs	r2, r3
    60be:	4254      	negs	r4, r2
    60c0:	2900      	cmp	r1, #0
    60c2:	d100      	bne.n	60c6 <__aeabi_d2iz+0x36>
    60c4:	0014      	movs	r4, r2
    60c6:	0020      	movs	r0, r4
    60c8:	bd30      	pop	{r4, r5, pc}
    60ca:	4b09      	ldr	r3, [pc, #36]	; (60f0 <__aeabi_d2iz+0x60>)
    60cc:	18cc      	adds	r4, r1, r3
    60ce:	e7fa      	b.n	60c6 <__aeabi_d2iz+0x36>
    60d0:	4c08      	ldr	r4, [pc, #32]	; (60f4 <__aeabi_d2iz+0x64>)
    60d2:	40e8      	lsrs	r0, r5
    60d4:	46a4      	mov	ip, r4
    60d6:	4463      	add	r3, ip
    60d8:	409a      	lsls	r2, r3
    60da:	4302      	orrs	r2, r0
    60dc:	e7ef      	b.n	60be <__aeabi_d2iz+0x2e>
    60de:	46c0      	nop			; (mov r8, r8)
    60e0:	000003fe 	.word	0x000003fe
    60e4:	0000041d 	.word	0x0000041d
    60e8:	00000433 	.word	0x00000433
    60ec:	00000413 	.word	0x00000413
    60f0:	7fffffff 	.word	0x7fffffff
    60f4:	fffffbed 	.word	0xfffffbed

000060f8 <__aeabi_i2d>:
    60f8:	b570      	push	{r4, r5, r6, lr}
    60fa:	2800      	cmp	r0, #0
    60fc:	d030      	beq.n	6160 <__aeabi_i2d+0x68>
    60fe:	17c3      	asrs	r3, r0, #31
    6100:	18c4      	adds	r4, r0, r3
    6102:	405c      	eors	r4, r3
    6104:	0fc5      	lsrs	r5, r0, #31
    6106:	0020      	movs	r0, r4
    6108:	f7fe feba 	bl	4e80 <__clzsi2>
    610c:	4b17      	ldr	r3, [pc, #92]	; (616c <__aeabi_i2d+0x74>)
    610e:	4a18      	ldr	r2, [pc, #96]	; (6170 <__aeabi_i2d+0x78>)
    6110:	1a1b      	subs	r3, r3, r0
    6112:	1ad2      	subs	r2, r2, r3
    6114:	2a1f      	cmp	r2, #31
    6116:	dd18      	ble.n	614a <__aeabi_i2d+0x52>
    6118:	4a16      	ldr	r2, [pc, #88]	; (6174 <__aeabi_i2d+0x7c>)
    611a:	1ad2      	subs	r2, r2, r3
    611c:	4094      	lsls	r4, r2
    611e:	2200      	movs	r2, #0
    6120:	0324      	lsls	r4, r4, #12
    6122:	055b      	lsls	r3, r3, #21
    6124:	0b24      	lsrs	r4, r4, #12
    6126:	0d5b      	lsrs	r3, r3, #21
    6128:	2100      	movs	r1, #0
    612a:	0010      	movs	r0, r2
    612c:	0324      	lsls	r4, r4, #12
    612e:	0d0a      	lsrs	r2, r1, #20
    6130:	0b24      	lsrs	r4, r4, #12
    6132:	0512      	lsls	r2, r2, #20
    6134:	4322      	orrs	r2, r4
    6136:	4c10      	ldr	r4, [pc, #64]	; (6178 <__aeabi_i2d+0x80>)
    6138:	051b      	lsls	r3, r3, #20
    613a:	4022      	ands	r2, r4
    613c:	4313      	orrs	r3, r2
    613e:	005b      	lsls	r3, r3, #1
    6140:	07ed      	lsls	r5, r5, #31
    6142:	085b      	lsrs	r3, r3, #1
    6144:	432b      	orrs	r3, r5
    6146:	0019      	movs	r1, r3
    6148:	bd70      	pop	{r4, r5, r6, pc}
    614a:	0021      	movs	r1, r4
    614c:	4091      	lsls	r1, r2
    614e:	000a      	movs	r2, r1
    6150:	210b      	movs	r1, #11
    6152:	1a08      	subs	r0, r1, r0
    6154:	40c4      	lsrs	r4, r0
    6156:	055b      	lsls	r3, r3, #21
    6158:	0324      	lsls	r4, r4, #12
    615a:	0b24      	lsrs	r4, r4, #12
    615c:	0d5b      	lsrs	r3, r3, #21
    615e:	e7e3      	b.n	6128 <__aeabi_i2d+0x30>
    6160:	2500      	movs	r5, #0
    6162:	2300      	movs	r3, #0
    6164:	2400      	movs	r4, #0
    6166:	2200      	movs	r2, #0
    6168:	e7de      	b.n	6128 <__aeabi_i2d+0x30>
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	0000041e 	.word	0x0000041e
    6170:	00000433 	.word	0x00000433
    6174:	00000413 	.word	0x00000413
    6178:	800fffff 	.word	0x800fffff

0000617c <__libc_init_array>:
    617c:	b570      	push	{r4, r5, r6, lr}
    617e:	2600      	movs	r6, #0
    6180:	4d0c      	ldr	r5, [pc, #48]	; (61b4 <__libc_init_array+0x38>)
    6182:	4c0d      	ldr	r4, [pc, #52]	; (61b8 <__libc_init_array+0x3c>)
    6184:	1b64      	subs	r4, r4, r5
    6186:	10a4      	asrs	r4, r4, #2
    6188:	42a6      	cmp	r6, r4
    618a:	d109      	bne.n	61a0 <__libc_init_array+0x24>
    618c:	2600      	movs	r6, #0
    618e:	f000 fdc9 	bl	6d24 <_init>
    6192:	4d0a      	ldr	r5, [pc, #40]	; (61bc <__libc_init_array+0x40>)
    6194:	4c0a      	ldr	r4, [pc, #40]	; (61c0 <__libc_init_array+0x44>)
    6196:	1b64      	subs	r4, r4, r5
    6198:	10a4      	asrs	r4, r4, #2
    619a:	42a6      	cmp	r6, r4
    619c:	d105      	bne.n	61aa <__libc_init_array+0x2e>
    619e:	bd70      	pop	{r4, r5, r6, pc}
    61a0:	00b3      	lsls	r3, r6, #2
    61a2:	58eb      	ldr	r3, [r5, r3]
    61a4:	4798      	blx	r3
    61a6:	3601      	adds	r6, #1
    61a8:	e7ee      	b.n	6188 <__libc_init_array+0xc>
    61aa:	00b3      	lsls	r3, r6, #2
    61ac:	58eb      	ldr	r3, [r5, r3]
    61ae:	4798      	blx	r3
    61b0:	3601      	adds	r6, #1
    61b2:	e7f2      	b.n	619a <__libc_init_array+0x1e>
    61b4:	00006d30 	.word	0x00006d30
    61b8:	00006d30 	.word	0x00006d30
    61bc:	00006d30 	.word	0x00006d30
    61c0:	00006d34 	.word	0x00006d34

000061c4 <memcpy>:
    61c4:	2300      	movs	r3, #0
    61c6:	b510      	push	{r4, lr}
    61c8:	429a      	cmp	r2, r3
    61ca:	d100      	bne.n	61ce <memcpy+0xa>
    61cc:	bd10      	pop	{r4, pc}
    61ce:	5ccc      	ldrb	r4, [r1, r3]
    61d0:	54c4      	strb	r4, [r0, r3]
    61d2:	3301      	adds	r3, #1
    61d4:	e7f8      	b.n	61c8 <memcpy+0x4>

000061d6 <memset>:
    61d6:	0003      	movs	r3, r0
    61d8:	1882      	adds	r2, r0, r2
    61da:	4293      	cmp	r3, r2
    61dc:	d100      	bne.n	61e0 <memset+0xa>
    61de:	4770      	bx	lr
    61e0:	7019      	strb	r1, [r3, #0]
    61e2:	3301      	adds	r3, #1
    61e4:	e7f9      	b.n	61da <memset+0x4>
	...

000061e8 <siprintf>:
    61e8:	b40e      	push	{r1, r2, r3}
    61ea:	b510      	push	{r4, lr}
    61ec:	b09d      	sub	sp, #116	; 0x74
    61ee:	a902      	add	r1, sp, #8
    61f0:	9002      	str	r0, [sp, #8]
    61f2:	6108      	str	r0, [r1, #16]
    61f4:	480b      	ldr	r0, [pc, #44]	; (6224 <siprintf+0x3c>)
    61f6:	2482      	movs	r4, #130	; 0x82
    61f8:	6088      	str	r0, [r1, #8]
    61fa:	6148      	str	r0, [r1, #20]
    61fc:	2001      	movs	r0, #1
    61fe:	4240      	negs	r0, r0
    6200:	ab1f      	add	r3, sp, #124	; 0x7c
    6202:	81c8      	strh	r0, [r1, #14]
    6204:	4808      	ldr	r0, [pc, #32]	; (6228 <siprintf+0x40>)
    6206:	cb04      	ldmia	r3!, {r2}
    6208:	00a4      	lsls	r4, r4, #2
    620a:	6800      	ldr	r0, [r0, #0]
    620c:	9301      	str	r3, [sp, #4]
    620e:	818c      	strh	r4, [r1, #12]
    6210:	f000 f86e 	bl	62f0 <_svfiprintf_r>
    6214:	2300      	movs	r3, #0
    6216:	9a02      	ldr	r2, [sp, #8]
    6218:	7013      	strb	r3, [r2, #0]
    621a:	b01d      	add	sp, #116	; 0x74
    621c:	bc10      	pop	{r4}
    621e:	bc08      	pop	{r3}
    6220:	b003      	add	sp, #12
    6222:	4718      	bx	r3
    6224:	7fffffff 	.word	0x7fffffff
    6228:	20000110 	.word	0x20000110

0000622c <__ssputs_r>:
    622c:	b5f0      	push	{r4, r5, r6, r7, lr}
    622e:	688e      	ldr	r6, [r1, #8]
    6230:	b085      	sub	sp, #20
    6232:	0007      	movs	r7, r0
    6234:	000c      	movs	r4, r1
    6236:	9203      	str	r2, [sp, #12]
    6238:	9301      	str	r3, [sp, #4]
    623a:	429e      	cmp	r6, r3
    623c:	d839      	bhi.n	62b2 <__ssputs_r+0x86>
    623e:	2390      	movs	r3, #144	; 0x90
    6240:	898a      	ldrh	r2, [r1, #12]
    6242:	00db      	lsls	r3, r3, #3
    6244:	421a      	tst	r2, r3
    6246:	d034      	beq.n	62b2 <__ssputs_r+0x86>
    6248:	2503      	movs	r5, #3
    624a:	6909      	ldr	r1, [r1, #16]
    624c:	6823      	ldr	r3, [r4, #0]
    624e:	1a5b      	subs	r3, r3, r1
    6250:	9302      	str	r3, [sp, #8]
    6252:	6963      	ldr	r3, [r4, #20]
    6254:	9802      	ldr	r0, [sp, #8]
    6256:	435d      	muls	r5, r3
    6258:	0feb      	lsrs	r3, r5, #31
    625a:	195d      	adds	r5, r3, r5
    625c:	9b01      	ldr	r3, [sp, #4]
    625e:	106d      	asrs	r5, r5, #1
    6260:	3301      	adds	r3, #1
    6262:	181b      	adds	r3, r3, r0
    6264:	42ab      	cmp	r3, r5
    6266:	d900      	bls.n	626a <__ssputs_r+0x3e>
    6268:	001d      	movs	r5, r3
    626a:	0553      	lsls	r3, r2, #21
    626c:	d532      	bpl.n	62d4 <__ssputs_r+0xa8>
    626e:	0029      	movs	r1, r5
    6270:	0038      	movs	r0, r7
    6272:	f000 fb31 	bl	68d8 <_malloc_r>
    6276:	1e06      	subs	r6, r0, #0
    6278:	d109      	bne.n	628e <__ssputs_r+0x62>
    627a:	230c      	movs	r3, #12
    627c:	603b      	str	r3, [r7, #0]
    627e:	2340      	movs	r3, #64	; 0x40
    6280:	2001      	movs	r0, #1
    6282:	89a2      	ldrh	r2, [r4, #12]
    6284:	4240      	negs	r0, r0
    6286:	4313      	orrs	r3, r2
    6288:	81a3      	strh	r3, [r4, #12]
    628a:	b005      	add	sp, #20
    628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628e:	9a02      	ldr	r2, [sp, #8]
    6290:	6921      	ldr	r1, [r4, #16]
    6292:	f7ff ff97 	bl	61c4 <memcpy>
    6296:	89a3      	ldrh	r3, [r4, #12]
    6298:	4a14      	ldr	r2, [pc, #80]	; (62ec <__ssputs_r+0xc0>)
    629a:	401a      	ands	r2, r3
    629c:	2380      	movs	r3, #128	; 0x80
    629e:	4313      	orrs	r3, r2
    62a0:	81a3      	strh	r3, [r4, #12]
    62a2:	9b02      	ldr	r3, [sp, #8]
    62a4:	6126      	str	r6, [r4, #16]
    62a6:	18f6      	adds	r6, r6, r3
    62a8:	6026      	str	r6, [r4, #0]
    62aa:	6165      	str	r5, [r4, #20]
    62ac:	9e01      	ldr	r6, [sp, #4]
    62ae:	1aed      	subs	r5, r5, r3
    62b0:	60a5      	str	r5, [r4, #8]
    62b2:	9b01      	ldr	r3, [sp, #4]
    62b4:	42b3      	cmp	r3, r6
    62b6:	d200      	bcs.n	62ba <__ssputs_r+0x8e>
    62b8:	001e      	movs	r6, r3
    62ba:	0032      	movs	r2, r6
    62bc:	9903      	ldr	r1, [sp, #12]
    62be:	6820      	ldr	r0, [r4, #0]
    62c0:	f000 faad 	bl	681e <memmove>
    62c4:	68a3      	ldr	r3, [r4, #8]
    62c6:	2000      	movs	r0, #0
    62c8:	1b9b      	subs	r3, r3, r6
    62ca:	60a3      	str	r3, [r4, #8]
    62cc:	6823      	ldr	r3, [r4, #0]
    62ce:	199e      	adds	r6, r3, r6
    62d0:	6026      	str	r6, [r4, #0]
    62d2:	e7da      	b.n	628a <__ssputs_r+0x5e>
    62d4:	002a      	movs	r2, r5
    62d6:	0038      	movs	r0, r7
    62d8:	f000 fb5c 	bl	6994 <_realloc_r>
    62dc:	1e06      	subs	r6, r0, #0
    62de:	d1e0      	bne.n	62a2 <__ssputs_r+0x76>
    62e0:	6921      	ldr	r1, [r4, #16]
    62e2:	0038      	movs	r0, r7
    62e4:	f000 faae 	bl	6844 <_free_r>
    62e8:	e7c7      	b.n	627a <__ssputs_r+0x4e>
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	fffffb7f 	.word	0xfffffb7f

000062f0 <_svfiprintf_r>:
    62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f2:	b09f      	sub	sp, #124	; 0x7c
    62f4:	9002      	str	r0, [sp, #8]
    62f6:	9305      	str	r3, [sp, #20]
    62f8:	898b      	ldrh	r3, [r1, #12]
    62fa:	000f      	movs	r7, r1
    62fc:	0016      	movs	r6, r2
    62fe:	061b      	lsls	r3, r3, #24
    6300:	d511      	bpl.n	6326 <_svfiprintf_r+0x36>
    6302:	690b      	ldr	r3, [r1, #16]
    6304:	2b00      	cmp	r3, #0
    6306:	d10e      	bne.n	6326 <_svfiprintf_r+0x36>
    6308:	2140      	movs	r1, #64	; 0x40
    630a:	f000 fae5 	bl	68d8 <_malloc_r>
    630e:	6038      	str	r0, [r7, #0]
    6310:	6138      	str	r0, [r7, #16]
    6312:	2800      	cmp	r0, #0
    6314:	d105      	bne.n	6322 <_svfiprintf_r+0x32>
    6316:	230c      	movs	r3, #12
    6318:	9a02      	ldr	r2, [sp, #8]
    631a:	3801      	subs	r0, #1
    631c:	6013      	str	r3, [r2, #0]
    631e:	b01f      	add	sp, #124	; 0x7c
    6320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6322:	2340      	movs	r3, #64	; 0x40
    6324:	617b      	str	r3, [r7, #20]
    6326:	2300      	movs	r3, #0
    6328:	ad06      	add	r5, sp, #24
    632a:	616b      	str	r3, [r5, #20]
    632c:	3320      	adds	r3, #32
    632e:	766b      	strb	r3, [r5, #25]
    6330:	3310      	adds	r3, #16
    6332:	76ab      	strb	r3, [r5, #26]
    6334:	0034      	movs	r4, r6
    6336:	7823      	ldrb	r3, [r4, #0]
    6338:	2b00      	cmp	r3, #0
    633a:	d147      	bne.n	63cc <_svfiprintf_r+0xdc>
    633c:	1ba3      	subs	r3, r4, r6
    633e:	9304      	str	r3, [sp, #16]
    6340:	d00d      	beq.n	635e <_svfiprintf_r+0x6e>
    6342:	1ba3      	subs	r3, r4, r6
    6344:	0032      	movs	r2, r6
    6346:	0039      	movs	r1, r7
    6348:	9802      	ldr	r0, [sp, #8]
    634a:	f7ff ff6f 	bl	622c <__ssputs_r>
    634e:	1c43      	adds	r3, r0, #1
    6350:	d100      	bne.n	6354 <_svfiprintf_r+0x64>
    6352:	e0b5      	b.n	64c0 <_svfiprintf_r+0x1d0>
    6354:	696a      	ldr	r2, [r5, #20]
    6356:	9b04      	ldr	r3, [sp, #16]
    6358:	4694      	mov	ip, r2
    635a:	4463      	add	r3, ip
    635c:	616b      	str	r3, [r5, #20]
    635e:	7823      	ldrb	r3, [r4, #0]
    6360:	2b00      	cmp	r3, #0
    6362:	d100      	bne.n	6366 <_svfiprintf_r+0x76>
    6364:	e0ac      	b.n	64c0 <_svfiprintf_r+0x1d0>
    6366:	2201      	movs	r2, #1
    6368:	2300      	movs	r3, #0
    636a:	4252      	negs	r2, r2
    636c:	606a      	str	r2, [r5, #4]
    636e:	a902      	add	r1, sp, #8
    6370:	3254      	adds	r2, #84	; 0x54
    6372:	1852      	adds	r2, r2, r1
    6374:	3401      	adds	r4, #1
    6376:	602b      	str	r3, [r5, #0]
    6378:	60eb      	str	r3, [r5, #12]
    637a:	60ab      	str	r3, [r5, #8]
    637c:	7013      	strb	r3, [r2, #0]
    637e:	65ab      	str	r3, [r5, #88]	; 0x58
    6380:	4e58      	ldr	r6, [pc, #352]	; (64e4 <_svfiprintf_r+0x1f4>)
    6382:	2205      	movs	r2, #5
    6384:	7821      	ldrb	r1, [r4, #0]
    6386:	0030      	movs	r0, r6
    6388:	f000 fa3e 	bl	6808 <memchr>
    638c:	1c62      	adds	r2, r4, #1
    638e:	2800      	cmp	r0, #0
    6390:	d120      	bne.n	63d4 <_svfiprintf_r+0xe4>
    6392:	6829      	ldr	r1, [r5, #0]
    6394:	06cb      	lsls	r3, r1, #27
    6396:	d504      	bpl.n	63a2 <_svfiprintf_r+0xb2>
    6398:	2353      	movs	r3, #83	; 0x53
    639a:	ae02      	add	r6, sp, #8
    639c:	3020      	adds	r0, #32
    639e:	199b      	adds	r3, r3, r6
    63a0:	7018      	strb	r0, [r3, #0]
    63a2:	070b      	lsls	r3, r1, #28
    63a4:	d504      	bpl.n	63b0 <_svfiprintf_r+0xc0>
    63a6:	2353      	movs	r3, #83	; 0x53
    63a8:	202b      	movs	r0, #43	; 0x2b
    63aa:	ae02      	add	r6, sp, #8
    63ac:	199b      	adds	r3, r3, r6
    63ae:	7018      	strb	r0, [r3, #0]
    63b0:	7823      	ldrb	r3, [r4, #0]
    63b2:	2b2a      	cmp	r3, #42	; 0x2a
    63b4:	d016      	beq.n	63e4 <_svfiprintf_r+0xf4>
    63b6:	2000      	movs	r0, #0
    63b8:	210a      	movs	r1, #10
    63ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    63bc:	7822      	ldrb	r2, [r4, #0]
    63be:	3a30      	subs	r2, #48	; 0x30
    63c0:	2a09      	cmp	r2, #9
    63c2:	d955      	bls.n	6470 <_svfiprintf_r+0x180>
    63c4:	2800      	cmp	r0, #0
    63c6:	d015      	beq.n	63f4 <_svfiprintf_r+0x104>
    63c8:	9309      	str	r3, [sp, #36]	; 0x24
    63ca:	e013      	b.n	63f4 <_svfiprintf_r+0x104>
    63cc:	2b25      	cmp	r3, #37	; 0x25
    63ce:	d0b5      	beq.n	633c <_svfiprintf_r+0x4c>
    63d0:	3401      	adds	r4, #1
    63d2:	e7b0      	b.n	6336 <_svfiprintf_r+0x46>
    63d4:	2301      	movs	r3, #1
    63d6:	1b80      	subs	r0, r0, r6
    63d8:	4083      	lsls	r3, r0
    63da:	6829      	ldr	r1, [r5, #0]
    63dc:	0014      	movs	r4, r2
    63de:	430b      	orrs	r3, r1
    63e0:	602b      	str	r3, [r5, #0]
    63e2:	e7cd      	b.n	6380 <_svfiprintf_r+0x90>
    63e4:	9b05      	ldr	r3, [sp, #20]
    63e6:	1d18      	adds	r0, r3, #4
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	9005      	str	r0, [sp, #20]
    63ec:	2b00      	cmp	r3, #0
    63ee:	db39      	blt.n	6464 <_svfiprintf_r+0x174>
    63f0:	9309      	str	r3, [sp, #36]	; 0x24
    63f2:	0014      	movs	r4, r2
    63f4:	7823      	ldrb	r3, [r4, #0]
    63f6:	2b2e      	cmp	r3, #46	; 0x2e
    63f8:	d10b      	bne.n	6412 <_svfiprintf_r+0x122>
    63fa:	7863      	ldrb	r3, [r4, #1]
    63fc:	1c62      	adds	r2, r4, #1
    63fe:	2b2a      	cmp	r3, #42	; 0x2a
    6400:	d13e      	bne.n	6480 <_svfiprintf_r+0x190>
    6402:	9b05      	ldr	r3, [sp, #20]
    6404:	3402      	adds	r4, #2
    6406:	1d1a      	adds	r2, r3, #4
    6408:	681b      	ldr	r3, [r3, #0]
    640a:	9205      	str	r2, [sp, #20]
    640c:	2b00      	cmp	r3, #0
    640e:	db34      	blt.n	647a <_svfiprintf_r+0x18a>
    6410:	9307      	str	r3, [sp, #28]
    6412:	4e35      	ldr	r6, [pc, #212]	; (64e8 <_svfiprintf_r+0x1f8>)
    6414:	7821      	ldrb	r1, [r4, #0]
    6416:	2203      	movs	r2, #3
    6418:	0030      	movs	r0, r6
    641a:	f000 f9f5 	bl	6808 <memchr>
    641e:	2800      	cmp	r0, #0
    6420:	d006      	beq.n	6430 <_svfiprintf_r+0x140>
    6422:	2340      	movs	r3, #64	; 0x40
    6424:	1b80      	subs	r0, r0, r6
    6426:	4083      	lsls	r3, r0
    6428:	682a      	ldr	r2, [r5, #0]
    642a:	3401      	adds	r4, #1
    642c:	4313      	orrs	r3, r2
    642e:	602b      	str	r3, [r5, #0]
    6430:	7821      	ldrb	r1, [r4, #0]
    6432:	2206      	movs	r2, #6
    6434:	482d      	ldr	r0, [pc, #180]	; (64ec <_svfiprintf_r+0x1fc>)
    6436:	1c66      	adds	r6, r4, #1
    6438:	7629      	strb	r1, [r5, #24]
    643a:	f000 f9e5 	bl	6808 <memchr>
    643e:	2800      	cmp	r0, #0
    6440:	d046      	beq.n	64d0 <_svfiprintf_r+0x1e0>
    6442:	4b2b      	ldr	r3, [pc, #172]	; (64f0 <_svfiprintf_r+0x200>)
    6444:	2b00      	cmp	r3, #0
    6446:	d12f      	bne.n	64a8 <_svfiprintf_r+0x1b8>
    6448:	6829      	ldr	r1, [r5, #0]
    644a:	9b05      	ldr	r3, [sp, #20]
    644c:	2207      	movs	r2, #7
    644e:	05c9      	lsls	r1, r1, #23
    6450:	d528      	bpl.n	64a4 <_svfiprintf_r+0x1b4>
    6452:	189b      	adds	r3, r3, r2
    6454:	4393      	bics	r3, r2
    6456:	3308      	adds	r3, #8
    6458:	9305      	str	r3, [sp, #20]
    645a:	696b      	ldr	r3, [r5, #20]
    645c:	9a03      	ldr	r2, [sp, #12]
    645e:	189b      	adds	r3, r3, r2
    6460:	616b      	str	r3, [r5, #20]
    6462:	e767      	b.n	6334 <_svfiprintf_r+0x44>
    6464:	425b      	negs	r3, r3
    6466:	60eb      	str	r3, [r5, #12]
    6468:	2302      	movs	r3, #2
    646a:	430b      	orrs	r3, r1
    646c:	602b      	str	r3, [r5, #0]
    646e:	e7c0      	b.n	63f2 <_svfiprintf_r+0x102>
    6470:	434b      	muls	r3, r1
    6472:	3401      	adds	r4, #1
    6474:	189b      	adds	r3, r3, r2
    6476:	2001      	movs	r0, #1
    6478:	e7a0      	b.n	63bc <_svfiprintf_r+0xcc>
    647a:	2301      	movs	r3, #1
    647c:	425b      	negs	r3, r3
    647e:	e7c7      	b.n	6410 <_svfiprintf_r+0x120>
    6480:	2300      	movs	r3, #0
    6482:	0014      	movs	r4, r2
    6484:	200a      	movs	r0, #10
    6486:	001a      	movs	r2, r3
    6488:	606b      	str	r3, [r5, #4]
    648a:	7821      	ldrb	r1, [r4, #0]
    648c:	3930      	subs	r1, #48	; 0x30
    648e:	2909      	cmp	r1, #9
    6490:	d903      	bls.n	649a <_svfiprintf_r+0x1aa>
    6492:	2b00      	cmp	r3, #0
    6494:	d0bd      	beq.n	6412 <_svfiprintf_r+0x122>
    6496:	9207      	str	r2, [sp, #28]
    6498:	e7bb      	b.n	6412 <_svfiprintf_r+0x122>
    649a:	4342      	muls	r2, r0
    649c:	3401      	adds	r4, #1
    649e:	1852      	adds	r2, r2, r1
    64a0:	2301      	movs	r3, #1
    64a2:	e7f2      	b.n	648a <_svfiprintf_r+0x19a>
    64a4:	3307      	adds	r3, #7
    64a6:	e7d5      	b.n	6454 <_svfiprintf_r+0x164>
    64a8:	ab05      	add	r3, sp, #20
    64aa:	9300      	str	r3, [sp, #0]
    64ac:	003a      	movs	r2, r7
    64ae:	4b11      	ldr	r3, [pc, #68]	; (64f4 <_svfiprintf_r+0x204>)
    64b0:	0029      	movs	r1, r5
    64b2:	9802      	ldr	r0, [sp, #8]
    64b4:	e000      	b.n	64b8 <_svfiprintf_r+0x1c8>
    64b6:	bf00      	nop
    64b8:	9003      	str	r0, [sp, #12]
    64ba:	9b03      	ldr	r3, [sp, #12]
    64bc:	3301      	adds	r3, #1
    64be:	d1cc      	bne.n	645a <_svfiprintf_r+0x16a>
    64c0:	89bb      	ldrh	r3, [r7, #12]
    64c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    64c4:	065b      	lsls	r3, r3, #25
    64c6:	d400      	bmi.n	64ca <_svfiprintf_r+0x1da>
    64c8:	e729      	b.n	631e <_svfiprintf_r+0x2e>
    64ca:	2001      	movs	r0, #1
    64cc:	4240      	negs	r0, r0
    64ce:	e726      	b.n	631e <_svfiprintf_r+0x2e>
    64d0:	ab05      	add	r3, sp, #20
    64d2:	9300      	str	r3, [sp, #0]
    64d4:	003a      	movs	r2, r7
    64d6:	4b07      	ldr	r3, [pc, #28]	; (64f4 <_svfiprintf_r+0x204>)
    64d8:	0029      	movs	r1, r5
    64da:	9802      	ldr	r0, [sp, #8]
    64dc:	f000 f87a 	bl	65d4 <_printf_i>
    64e0:	e7ea      	b.n	64b8 <_svfiprintf_r+0x1c8>
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	00006cf0 	.word	0x00006cf0
    64e8:	00006cf6 	.word	0x00006cf6
    64ec:	00006cfa 	.word	0x00006cfa
    64f0:	00000000 	.word	0x00000000
    64f4:	0000622d 	.word	0x0000622d

000064f8 <_printf_common>:
    64f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64fa:	0015      	movs	r5, r2
    64fc:	9301      	str	r3, [sp, #4]
    64fe:	688a      	ldr	r2, [r1, #8]
    6500:	690b      	ldr	r3, [r1, #16]
    6502:	9000      	str	r0, [sp, #0]
    6504:	000c      	movs	r4, r1
    6506:	4293      	cmp	r3, r2
    6508:	da00      	bge.n	650c <_printf_common+0x14>
    650a:	0013      	movs	r3, r2
    650c:	0022      	movs	r2, r4
    650e:	602b      	str	r3, [r5, #0]
    6510:	3243      	adds	r2, #67	; 0x43
    6512:	7812      	ldrb	r2, [r2, #0]
    6514:	2a00      	cmp	r2, #0
    6516:	d001      	beq.n	651c <_printf_common+0x24>
    6518:	3301      	adds	r3, #1
    651a:	602b      	str	r3, [r5, #0]
    651c:	6823      	ldr	r3, [r4, #0]
    651e:	069b      	lsls	r3, r3, #26
    6520:	d502      	bpl.n	6528 <_printf_common+0x30>
    6522:	682b      	ldr	r3, [r5, #0]
    6524:	3302      	adds	r3, #2
    6526:	602b      	str	r3, [r5, #0]
    6528:	2706      	movs	r7, #6
    652a:	6823      	ldr	r3, [r4, #0]
    652c:	401f      	ands	r7, r3
    652e:	d027      	beq.n	6580 <_printf_common+0x88>
    6530:	0023      	movs	r3, r4
    6532:	3343      	adds	r3, #67	; 0x43
    6534:	781b      	ldrb	r3, [r3, #0]
    6536:	1e5a      	subs	r2, r3, #1
    6538:	4193      	sbcs	r3, r2
    653a:	6822      	ldr	r2, [r4, #0]
    653c:	0692      	lsls	r2, r2, #26
    653e:	d430      	bmi.n	65a2 <_printf_common+0xaa>
    6540:	0022      	movs	r2, r4
    6542:	9901      	ldr	r1, [sp, #4]
    6544:	3243      	adds	r2, #67	; 0x43
    6546:	9800      	ldr	r0, [sp, #0]
    6548:	9e08      	ldr	r6, [sp, #32]
    654a:	47b0      	blx	r6
    654c:	1c43      	adds	r3, r0, #1
    654e:	d025      	beq.n	659c <_printf_common+0xa4>
    6550:	2306      	movs	r3, #6
    6552:	6820      	ldr	r0, [r4, #0]
    6554:	682a      	ldr	r2, [r5, #0]
    6556:	68e1      	ldr	r1, [r4, #12]
    6558:	4003      	ands	r3, r0
    655a:	2500      	movs	r5, #0
    655c:	2b04      	cmp	r3, #4
    655e:	d103      	bne.n	6568 <_printf_common+0x70>
    6560:	1a8d      	subs	r5, r1, r2
    6562:	43eb      	mvns	r3, r5
    6564:	17db      	asrs	r3, r3, #31
    6566:	401d      	ands	r5, r3
    6568:	68a3      	ldr	r3, [r4, #8]
    656a:	6922      	ldr	r2, [r4, #16]
    656c:	4293      	cmp	r3, r2
    656e:	dd01      	ble.n	6574 <_printf_common+0x7c>
    6570:	1a9b      	subs	r3, r3, r2
    6572:	18ed      	adds	r5, r5, r3
    6574:	2700      	movs	r7, #0
    6576:	42bd      	cmp	r5, r7
    6578:	d120      	bne.n	65bc <_printf_common+0xc4>
    657a:	2000      	movs	r0, #0
    657c:	e010      	b.n	65a0 <_printf_common+0xa8>
    657e:	3701      	adds	r7, #1
    6580:	68e3      	ldr	r3, [r4, #12]
    6582:	682a      	ldr	r2, [r5, #0]
    6584:	1a9b      	subs	r3, r3, r2
    6586:	429f      	cmp	r7, r3
    6588:	dad2      	bge.n	6530 <_printf_common+0x38>
    658a:	0022      	movs	r2, r4
    658c:	2301      	movs	r3, #1
    658e:	3219      	adds	r2, #25
    6590:	9901      	ldr	r1, [sp, #4]
    6592:	9800      	ldr	r0, [sp, #0]
    6594:	9e08      	ldr	r6, [sp, #32]
    6596:	47b0      	blx	r6
    6598:	1c43      	adds	r3, r0, #1
    659a:	d1f0      	bne.n	657e <_printf_common+0x86>
    659c:	2001      	movs	r0, #1
    659e:	4240      	negs	r0, r0
    65a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    65a2:	2030      	movs	r0, #48	; 0x30
    65a4:	18e1      	adds	r1, r4, r3
    65a6:	3143      	adds	r1, #67	; 0x43
    65a8:	7008      	strb	r0, [r1, #0]
    65aa:	0021      	movs	r1, r4
    65ac:	1c5a      	adds	r2, r3, #1
    65ae:	3145      	adds	r1, #69	; 0x45
    65b0:	7809      	ldrb	r1, [r1, #0]
    65b2:	18a2      	adds	r2, r4, r2
    65b4:	3243      	adds	r2, #67	; 0x43
    65b6:	3302      	adds	r3, #2
    65b8:	7011      	strb	r1, [r2, #0]
    65ba:	e7c1      	b.n	6540 <_printf_common+0x48>
    65bc:	0022      	movs	r2, r4
    65be:	2301      	movs	r3, #1
    65c0:	321a      	adds	r2, #26
    65c2:	9901      	ldr	r1, [sp, #4]
    65c4:	9800      	ldr	r0, [sp, #0]
    65c6:	9e08      	ldr	r6, [sp, #32]
    65c8:	47b0      	blx	r6
    65ca:	1c43      	adds	r3, r0, #1
    65cc:	d0e6      	beq.n	659c <_printf_common+0xa4>
    65ce:	3701      	adds	r7, #1
    65d0:	e7d1      	b.n	6576 <_printf_common+0x7e>
	...

000065d4 <_printf_i>:
    65d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65d6:	b08b      	sub	sp, #44	; 0x2c
    65d8:	9206      	str	r2, [sp, #24]
    65da:	000a      	movs	r2, r1
    65dc:	3243      	adds	r2, #67	; 0x43
    65de:	9307      	str	r3, [sp, #28]
    65e0:	9005      	str	r0, [sp, #20]
    65e2:	9204      	str	r2, [sp, #16]
    65e4:	7e0a      	ldrb	r2, [r1, #24]
    65e6:	000c      	movs	r4, r1
    65e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    65ea:	2a6e      	cmp	r2, #110	; 0x6e
    65ec:	d100      	bne.n	65f0 <_printf_i+0x1c>
    65ee:	e08f      	b.n	6710 <_printf_i+0x13c>
    65f0:	d817      	bhi.n	6622 <_printf_i+0x4e>
    65f2:	2a63      	cmp	r2, #99	; 0x63
    65f4:	d02c      	beq.n	6650 <_printf_i+0x7c>
    65f6:	d808      	bhi.n	660a <_printf_i+0x36>
    65f8:	2a00      	cmp	r2, #0
    65fa:	d100      	bne.n	65fe <_printf_i+0x2a>
    65fc:	e099      	b.n	6732 <_printf_i+0x15e>
    65fe:	2a58      	cmp	r2, #88	; 0x58
    6600:	d054      	beq.n	66ac <_printf_i+0xd8>
    6602:	0026      	movs	r6, r4
    6604:	3642      	adds	r6, #66	; 0x42
    6606:	7032      	strb	r2, [r6, #0]
    6608:	e029      	b.n	665e <_printf_i+0x8a>
    660a:	2a64      	cmp	r2, #100	; 0x64
    660c:	d001      	beq.n	6612 <_printf_i+0x3e>
    660e:	2a69      	cmp	r2, #105	; 0x69
    6610:	d1f7      	bne.n	6602 <_printf_i+0x2e>
    6612:	6821      	ldr	r1, [r4, #0]
    6614:	681a      	ldr	r2, [r3, #0]
    6616:	0608      	lsls	r0, r1, #24
    6618:	d523      	bpl.n	6662 <_printf_i+0x8e>
    661a:	1d11      	adds	r1, r2, #4
    661c:	6019      	str	r1, [r3, #0]
    661e:	6815      	ldr	r5, [r2, #0]
    6620:	e025      	b.n	666e <_printf_i+0x9a>
    6622:	2a73      	cmp	r2, #115	; 0x73
    6624:	d100      	bne.n	6628 <_printf_i+0x54>
    6626:	e088      	b.n	673a <_printf_i+0x166>
    6628:	d808      	bhi.n	663c <_printf_i+0x68>
    662a:	2a6f      	cmp	r2, #111	; 0x6f
    662c:	d029      	beq.n	6682 <_printf_i+0xae>
    662e:	2a70      	cmp	r2, #112	; 0x70
    6630:	d1e7      	bne.n	6602 <_printf_i+0x2e>
    6632:	2220      	movs	r2, #32
    6634:	6809      	ldr	r1, [r1, #0]
    6636:	430a      	orrs	r2, r1
    6638:	6022      	str	r2, [r4, #0]
    663a:	e003      	b.n	6644 <_printf_i+0x70>
    663c:	2a75      	cmp	r2, #117	; 0x75
    663e:	d020      	beq.n	6682 <_printf_i+0xae>
    6640:	2a78      	cmp	r2, #120	; 0x78
    6642:	d1de      	bne.n	6602 <_printf_i+0x2e>
    6644:	0022      	movs	r2, r4
    6646:	2178      	movs	r1, #120	; 0x78
    6648:	3245      	adds	r2, #69	; 0x45
    664a:	7011      	strb	r1, [r2, #0]
    664c:	4a6c      	ldr	r2, [pc, #432]	; (6800 <_printf_i+0x22c>)
    664e:	e030      	b.n	66b2 <_printf_i+0xde>
    6650:	000e      	movs	r6, r1
    6652:	681a      	ldr	r2, [r3, #0]
    6654:	3642      	adds	r6, #66	; 0x42
    6656:	1d11      	adds	r1, r2, #4
    6658:	6019      	str	r1, [r3, #0]
    665a:	6813      	ldr	r3, [r2, #0]
    665c:	7033      	strb	r3, [r6, #0]
    665e:	2301      	movs	r3, #1
    6660:	e079      	b.n	6756 <_printf_i+0x182>
    6662:	0649      	lsls	r1, r1, #25
    6664:	d5d9      	bpl.n	661a <_printf_i+0x46>
    6666:	1d11      	adds	r1, r2, #4
    6668:	6019      	str	r1, [r3, #0]
    666a:	2300      	movs	r3, #0
    666c:	5ed5      	ldrsh	r5, [r2, r3]
    666e:	2d00      	cmp	r5, #0
    6670:	da03      	bge.n	667a <_printf_i+0xa6>
    6672:	232d      	movs	r3, #45	; 0x2d
    6674:	9a04      	ldr	r2, [sp, #16]
    6676:	426d      	negs	r5, r5
    6678:	7013      	strb	r3, [r2, #0]
    667a:	4b62      	ldr	r3, [pc, #392]	; (6804 <_printf_i+0x230>)
    667c:	270a      	movs	r7, #10
    667e:	9303      	str	r3, [sp, #12]
    6680:	e02f      	b.n	66e2 <_printf_i+0x10e>
    6682:	6820      	ldr	r0, [r4, #0]
    6684:	6819      	ldr	r1, [r3, #0]
    6686:	0605      	lsls	r5, r0, #24
    6688:	d503      	bpl.n	6692 <_printf_i+0xbe>
    668a:	1d08      	adds	r0, r1, #4
    668c:	6018      	str	r0, [r3, #0]
    668e:	680d      	ldr	r5, [r1, #0]
    6690:	e005      	b.n	669e <_printf_i+0xca>
    6692:	0640      	lsls	r0, r0, #25
    6694:	d5f9      	bpl.n	668a <_printf_i+0xb6>
    6696:	680d      	ldr	r5, [r1, #0]
    6698:	1d08      	adds	r0, r1, #4
    669a:	6018      	str	r0, [r3, #0]
    669c:	b2ad      	uxth	r5, r5
    669e:	4b59      	ldr	r3, [pc, #356]	; (6804 <_printf_i+0x230>)
    66a0:	2708      	movs	r7, #8
    66a2:	9303      	str	r3, [sp, #12]
    66a4:	2a6f      	cmp	r2, #111	; 0x6f
    66a6:	d018      	beq.n	66da <_printf_i+0x106>
    66a8:	270a      	movs	r7, #10
    66aa:	e016      	b.n	66da <_printf_i+0x106>
    66ac:	3145      	adds	r1, #69	; 0x45
    66ae:	700a      	strb	r2, [r1, #0]
    66b0:	4a54      	ldr	r2, [pc, #336]	; (6804 <_printf_i+0x230>)
    66b2:	9203      	str	r2, [sp, #12]
    66b4:	681a      	ldr	r2, [r3, #0]
    66b6:	6821      	ldr	r1, [r4, #0]
    66b8:	1d10      	adds	r0, r2, #4
    66ba:	6018      	str	r0, [r3, #0]
    66bc:	6815      	ldr	r5, [r2, #0]
    66be:	0608      	lsls	r0, r1, #24
    66c0:	d522      	bpl.n	6708 <_printf_i+0x134>
    66c2:	07cb      	lsls	r3, r1, #31
    66c4:	d502      	bpl.n	66cc <_printf_i+0xf8>
    66c6:	2320      	movs	r3, #32
    66c8:	4319      	orrs	r1, r3
    66ca:	6021      	str	r1, [r4, #0]
    66cc:	2710      	movs	r7, #16
    66ce:	2d00      	cmp	r5, #0
    66d0:	d103      	bne.n	66da <_printf_i+0x106>
    66d2:	2320      	movs	r3, #32
    66d4:	6822      	ldr	r2, [r4, #0]
    66d6:	439a      	bics	r2, r3
    66d8:	6022      	str	r2, [r4, #0]
    66da:	0023      	movs	r3, r4
    66dc:	2200      	movs	r2, #0
    66de:	3343      	adds	r3, #67	; 0x43
    66e0:	701a      	strb	r2, [r3, #0]
    66e2:	6863      	ldr	r3, [r4, #4]
    66e4:	60a3      	str	r3, [r4, #8]
    66e6:	2b00      	cmp	r3, #0
    66e8:	db5c      	blt.n	67a4 <_printf_i+0x1d0>
    66ea:	2204      	movs	r2, #4
    66ec:	6821      	ldr	r1, [r4, #0]
    66ee:	4391      	bics	r1, r2
    66f0:	6021      	str	r1, [r4, #0]
    66f2:	2d00      	cmp	r5, #0
    66f4:	d158      	bne.n	67a8 <_printf_i+0x1d4>
    66f6:	9e04      	ldr	r6, [sp, #16]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d064      	beq.n	67c6 <_printf_i+0x1f2>
    66fc:	0026      	movs	r6, r4
    66fe:	9b03      	ldr	r3, [sp, #12]
    6700:	3642      	adds	r6, #66	; 0x42
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	7033      	strb	r3, [r6, #0]
    6706:	e05e      	b.n	67c6 <_printf_i+0x1f2>
    6708:	0648      	lsls	r0, r1, #25
    670a:	d5da      	bpl.n	66c2 <_printf_i+0xee>
    670c:	b2ad      	uxth	r5, r5
    670e:	e7d8      	b.n	66c2 <_printf_i+0xee>
    6710:	6809      	ldr	r1, [r1, #0]
    6712:	681a      	ldr	r2, [r3, #0]
    6714:	0608      	lsls	r0, r1, #24
    6716:	d505      	bpl.n	6724 <_printf_i+0x150>
    6718:	1d11      	adds	r1, r2, #4
    671a:	6019      	str	r1, [r3, #0]
    671c:	6813      	ldr	r3, [r2, #0]
    671e:	6962      	ldr	r2, [r4, #20]
    6720:	601a      	str	r2, [r3, #0]
    6722:	e006      	b.n	6732 <_printf_i+0x15e>
    6724:	0649      	lsls	r1, r1, #25
    6726:	d5f7      	bpl.n	6718 <_printf_i+0x144>
    6728:	1d11      	adds	r1, r2, #4
    672a:	6019      	str	r1, [r3, #0]
    672c:	6813      	ldr	r3, [r2, #0]
    672e:	8aa2      	ldrh	r2, [r4, #20]
    6730:	801a      	strh	r2, [r3, #0]
    6732:	2300      	movs	r3, #0
    6734:	9e04      	ldr	r6, [sp, #16]
    6736:	6123      	str	r3, [r4, #16]
    6738:	e054      	b.n	67e4 <_printf_i+0x210>
    673a:	681a      	ldr	r2, [r3, #0]
    673c:	1d11      	adds	r1, r2, #4
    673e:	6019      	str	r1, [r3, #0]
    6740:	6816      	ldr	r6, [r2, #0]
    6742:	2100      	movs	r1, #0
    6744:	6862      	ldr	r2, [r4, #4]
    6746:	0030      	movs	r0, r6
    6748:	f000 f85e 	bl	6808 <memchr>
    674c:	2800      	cmp	r0, #0
    674e:	d001      	beq.n	6754 <_printf_i+0x180>
    6750:	1b80      	subs	r0, r0, r6
    6752:	6060      	str	r0, [r4, #4]
    6754:	6863      	ldr	r3, [r4, #4]
    6756:	6123      	str	r3, [r4, #16]
    6758:	2300      	movs	r3, #0
    675a:	9a04      	ldr	r2, [sp, #16]
    675c:	7013      	strb	r3, [r2, #0]
    675e:	e041      	b.n	67e4 <_printf_i+0x210>
    6760:	6923      	ldr	r3, [r4, #16]
    6762:	0032      	movs	r2, r6
    6764:	9906      	ldr	r1, [sp, #24]
    6766:	9805      	ldr	r0, [sp, #20]
    6768:	9d07      	ldr	r5, [sp, #28]
    676a:	47a8      	blx	r5
    676c:	1c43      	adds	r3, r0, #1
    676e:	d043      	beq.n	67f8 <_printf_i+0x224>
    6770:	6823      	ldr	r3, [r4, #0]
    6772:	2500      	movs	r5, #0
    6774:	079b      	lsls	r3, r3, #30
    6776:	d40f      	bmi.n	6798 <_printf_i+0x1c4>
    6778:	9b09      	ldr	r3, [sp, #36]	; 0x24
    677a:	68e0      	ldr	r0, [r4, #12]
    677c:	4298      	cmp	r0, r3
    677e:	da3d      	bge.n	67fc <_printf_i+0x228>
    6780:	0018      	movs	r0, r3
    6782:	e03b      	b.n	67fc <_printf_i+0x228>
    6784:	0022      	movs	r2, r4
    6786:	2301      	movs	r3, #1
    6788:	3219      	adds	r2, #25
    678a:	9906      	ldr	r1, [sp, #24]
    678c:	9805      	ldr	r0, [sp, #20]
    678e:	9e07      	ldr	r6, [sp, #28]
    6790:	47b0      	blx	r6
    6792:	1c43      	adds	r3, r0, #1
    6794:	d030      	beq.n	67f8 <_printf_i+0x224>
    6796:	3501      	adds	r5, #1
    6798:	68e3      	ldr	r3, [r4, #12]
    679a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    679c:	1a9b      	subs	r3, r3, r2
    679e:	429d      	cmp	r5, r3
    67a0:	dbf0      	blt.n	6784 <_printf_i+0x1b0>
    67a2:	e7e9      	b.n	6778 <_printf_i+0x1a4>
    67a4:	2d00      	cmp	r5, #0
    67a6:	d0a9      	beq.n	66fc <_printf_i+0x128>
    67a8:	9e04      	ldr	r6, [sp, #16]
    67aa:	0028      	movs	r0, r5
    67ac:	0039      	movs	r1, r7
    67ae:	f7fe fa77 	bl	4ca0 <__aeabi_uidivmod>
    67b2:	9b03      	ldr	r3, [sp, #12]
    67b4:	3e01      	subs	r6, #1
    67b6:	5c5b      	ldrb	r3, [r3, r1]
    67b8:	0028      	movs	r0, r5
    67ba:	7033      	strb	r3, [r6, #0]
    67bc:	0039      	movs	r1, r7
    67be:	f7fe f9e9 	bl	4b94 <__udivsi3>
    67c2:	1e05      	subs	r5, r0, #0
    67c4:	d1f1      	bne.n	67aa <_printf_i+0x1d6>
    67c6:	2f08      	cmp	r7, #8
    67c8:	d109      	bne.n	67de <_printf_i+0x20a>
    67ca:	6823      	ldr	r3, [r4, #0]
    67cc:	07db      	lsls	r3, r3, #31
    67ce:	d506      	bpl.n	67de <_printf_i+0x20a>
    67d0:	6863      	ldr	r3, [r4, #4]
    67d2:	6922      	ldr	r2, [r4, #16]
    67d4:	4293      	cmp	r3, r2
    67d6:	dc02      	bgt.n	67de <_printf_i+0x20a>
    67d8:	2330      	movs	r3, #48	; 0x30
    67da:	3e01      	subs	r6, #1
    67dc:	7033      	strb	r3, [r6, #0]
    67de:	9b04      	ldr	r3, [sp, #16]
    67e0:	1b9b      	subs	r3, r3, r6
    67e2:	6123      	str	r3, [r4, #16]
    67e4:	9b07      	ldr	r3, [sp, #28]
    67e6:	aa09      	add	r2, sp, #36	; 0x24
    67e8:	9300      	str	r3, [sp, #0]
    67ea:	0021      	movs	r1, r4
    67ec:	9b06      	ldr	r3, [sp, #24]
    67ee:	9805      	ldr	r0, [sp, #20]
    67f0:	f7ff fe82 	bl	64f8 <_printf_common>
    67f4:	1c43      	adds	r3, r0, #1
    67f6:	d1b3      	bne.n	6760 <_printf_i+0x18c>
    67f8:	2001      	movs	r0, #1
    67fa:	4240      	negs	r0, r0
    67fc:	b00b      	add	sp, #44	; 0x2c
    67fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6800:	00006d12 	.word	0x00006d12
    6804:	00006d01 	.word	0x00006d01

00006808 <memchr>:
    6808:	b2c9      	uxtb	r1, r1
    680a:	1882      	adds	r2, r0, r2
    680c:	4290      	cmp	r0, r2
    680e:	d101      	bne.n	6814 <memchr+0xc>
    6810:	2000      	movs	r0, #0
    6812:	4770      	bx	lr
    6814:	7803      	ldrb	r3, [r0, #0]
    6816:	428b      	cmp	r3, r1
    6818:	d0fb      	beq.n	6812 <memchr+0xa>
    681a:	3001      	adds	r0, #1
    681c:	e7f6      	b.n	680c <memchr+0x4>

0000681e <memmove>:
    681e:	b510      	push	{r4, lr}
    6820:	4288      	cmp	r0, r1
    6822:	d902      	bls.n	682a <memmove+0xc>
    6824:	188b      	adds	r3, r1, r2
    6826:	4298      	cmp	r0, r3
    6828:	d308      	bcc.n	683c <memmove+0x1e>
    682a:	2300      	movs	r3, #0
    682c:	429a      	cmp	r2, r3
    682e:	d007      	beq.n	6840 <memmove+0x22>
    6830:	5ccc      	ldrb	r4, [r1, r3]
    6832:	54c4      	strb	r4, [r0, r3]
    6834:	3301      	adds	r3, #1
    6836:	e7f9      	b.n	682c <memmove+0xe>
    6838:	5c8b      	ldrb	r3, [r1, r2]
    683a:	5483      	strb	r3, [r0, r2]
    683c:	3a01      	subs	r2, #1
    683e:	d2fb      	bcs.n	6838 <memmove+0x1a>
    6840:	bd10      	pop	{r4, pc}
	...

00006844 <_free_r>:
    6844:	b570      	push	{r4, r5, r6, lr}
    6846:	0005      	movs	r5, r0
    6848:	2900      	cmp	r1, #0
    684a:	d010      	beq.n	686e <_free_r+0x2a>
    684c:	1f0c      	subs	r4, r1, #4
    684e:	6823      	ldr	r3, [r4, #0]
    6850:	2b00      	cmp	r3, #0
    6852:	da00      	bge.n	6856 <_free_r+0x12>
    6854:	18e4      	adds	r4, r4, r3
    6856:	0028      	movs	r0, r5
    6858:	f000 f8d4 	bl	6a04 <__malloc_lock>
    685c:	4a1d      	ldr	r2, [pc, #116]	; (68d4 <_free_r+0x90>)
    685e:	6813      	ldr	r3, [r2, #0]
    6860:	2b00      	cmp	r3, #0
    6862:	d105      	bne.n	6870 <_free_r+0x2c>
    6864:	6063      	str	r3, [r4, #4]
    6866:	6014      	str	r4, [r2, #0]
    6868:	0028      	movs	r0, r5
    686a:	f000 f8cc 	bl	6a06 <__malloc_unlock>
    686e:	bd70      	pop	{r4, r5, r6, pc}
    6870:	42a3      	cmp	r3, r4
    6872:	d909      	bls.n	6888 <_free_r+0x44>
    6874:	6821      	ldr	r1, [r4, #0]
    6876:	1860      	adds	r0, r4, r1
    6878:	4283      	cmp	r3, r0
    687a:	d1f3      	bne.n	6864 <_free_r+0x20>
    687c:	6818      	ldr	r0, [r3, #0]
    687e:	685b      	ldr	r3, [r3, #4]
    6880:	1841      	adds	r1, r0, r1
    6882:	6021      	str	r1, [r4, #0]
    6884:	e7ee      	b.n	6864 <_free_r+0x20>
    6886:	0013      	movs	r3, r2
    6888:	685a      	ldr	r2, [r3, #4]
    688a:	2a00      	cmp	r2, #0
    688c:	d001      	beq.n	6892 <_free_r+0x4e>
    688e:	42a2      	cmp	r2, r4
    6890:	d9f9      	bls.n	6886 <_free_r+0x42>
    6892:	6819      	ldr	r1, [r3, #0]
    6894:	1858      	adds	r0, r3, r1
    6896:	42a0      	cmp	r0, r4
    6898:	d10b      	bne.n	68b2 <_free_r+0x6e>
    689a:	6820      	ldr	r0, [r4, #0]
    689c:	1809      	adds	r1, r1, r0
    689e:	1858      	adds	r0, r3, r1
    68a0:	6019      	str	r1, [r3, #0]
    68a2:	4282      	cmp	r2, r0
    68a4:	d1e0      	bne.n	6868 <_free_r+0x24>
    68a6:	6810      	ldr	r0, [r2, #0]
    68a8:	6852      	ldr	r2, [r2, #4]
    68aa:	1841      	adds	r1, r0, r1
    68ac:	6019      	str	r1, [r3, #0]
    68ae:	605a      	str	r2, [r3, #4]
    68b0:	e7da      	b.n	6868 <_free_r+0x24>
    68b2:	42a0      	cmp	r0, r4
    68b4:	d902      	bls.n	68bc <_free_r+0x78>
    68b6:	230c      	movs	r3, #12
    68b8:	602b      	str	r3, [r5, #0]
    68ba:	e7d5      	b.n	6868 <_free_r+0x24>
    68bc:	6821      	ldr	r1, [r4, #0]
    68be:	1860      	adds	r0, r4, r1
    68c0:	4282      	cmp	r2, r0
    68c2:	d103      	bne.n	68cc <_free_r+0x88>
    68c4:	6810      	ldr	r0, [r2, #0]
    68c6:	6852      	ldr	r2, [r2, #4]
    68c8:	1841      	adds	r1, r0, r1
    68ca:	6021      	str	r1, [r4, #0]
    68cc:	6062      	str	r2, [r4, #4]
    68ce:	605c      	str	r4, [r3, #4]
    68d0:	e7ca      	b.n	6868 <_free_r+0x24>
    68d2:	46c0      	nop			; (mov r8, r8)
    68d4:	20000404 	.word	0x20000404

000068d8 <_malloc_r>:
    68d8:	2303      	movs	r3, #3
    68da:	b570      	push	{r4, r5, r6, lr}
    68dc:	1ccd      	adds	r5, r1, #3
    68de:	439d      	bics	r5, r3
    68e0:	3508      	adds	r5, #8
    68e2:	0006      	movs	r6, r0
    68e4:	2d0c      	cmp	r5, #12
    68e6:	d21e      	bcs.n	6926 <_malloc_r+0x4e>
    68e8:	250c      	movs	r5, #12
    68ea:	42a9      	cmp	r1, r5
    68ec:	d81d      	bhi.n	692a <_malloc_r+0x52>
    68ee:	0030      	movs	r0, r6
    68f0:	f000 f888 	bl	6a04 <__malloc_lock>
    68f4:	4a25      	ldr	r2, [pc, #148]	; (698c <_malloc_r+0xb4>)
    68f6:	6814      	ldr	r4, [r2, #0]
    68f8:	0021      	movs	r1, r4
    68fa:	2900      	cmp	r1, #0
    68fc:	d119      	bne.n	6932 <_malloc_r+0x5a>
    68fe:	4c24      	ldr	r4, [pc, #144]	; (6990 <_malloc_r+0xb8>)
    6900:	6823      	ldr	r3, [r4, #0]
    6902:	2b00      	cmp	r3, #0
    6904:	d103      	bne.n	690e <_malloc_r+0x36>
    6906:	0030      	movs	r0, r6
    6908:	f000 f86a 	bl	69e0 <_sbrk_r>
    690c:	6020      	str	r0, [r4, #0]
    690e:	0029      	movs	r1, r5
    6910:	0030      	movs	r0, r6
    6912:	f000 f865 	bl	69e0 <_sbrk_r>
    6916:	1c43      	adds	r3, r0, #1
    6918:	d12c      	bne.n	6974 <_malloc_r+0x9c>
    691a:	230c      	movs	r3, #12
    691c:	0030      	movs	r0, r6
    691e:	6033      	str	r3, [r6, #0]
    6920:	f000 f871 	bl	6a06 <__malloc_unlock>
    6924:	e003      	b.n	692e <_malloc_r+0x56>
    6926:	2d00      	cmp	r5, #0
    6928:	dadf      	bge.n	68ea <_malloc_r+0x12>
    692a:	230c      	movs	r3, #12
    692c:	6033      	str	r3, [r6, #0]
    692e:	2000      	movs	r0, #0
    6930:	bd70      	pop	{r4, r5, r6, pc}
    6932:	680b      	ldr	r3, [r1, #0]
    6934:	1b5b      	subs	r3, r3, r5
    6936:	d41a      	bmi.n	696e <_malloc_r+0x96>
    6938:	2b0b      	cmp	r3, #11
    693a:	d903      	bls.n	6944 <_malloc_r+0x6c>
    693c:	600b      	str	r3, [r1, #0]
    693e:	18cc      	adds	r4, r1, r3
    6940:	6025      	str	r5, [r4, #0]
    6942:	e003      	b.n	694c <_malloc_r+0x74>
    6944:	428c      	cmp	r4, r1
    6946:	d10e      	bne.n	6966 <_malloc_r+0x8e>
    6948:	6863      	ldr	r3, [r4, #4]
    694a:	6013      	str	r3, [r2, #0]
    694c:	0030      	movs	r0, r6
    694e:	f000 f85a 	bl	6a06 <__malloc_unlock>
    6952:	0020      	movs	r0, r4
    6954:	2207      	movs	r2, #7
    6956:	300b      	adds	r0, #11
    6958:	1d23      	adds	r3, r4, #4
    695a:	4390      	bics	r0, r2
    695c:	1ac3      	subs	r3, r0, r3
    695e:	d0e7      	beq.n	6930 <_malloc_r+0x58>
    6960:	425a      	negs	r2, r3
    6962:	50e2      	str	r2, [r4, r3]
    6964:	e7e4      	b.n	6930 <_malloc_r+0x58>
    6966:	684b      	ldr	r3, [r1, #4]
    6968:	6063      	str	r3, [r4, #4]
    696a:	000c      	movs	r4, r1
    696c:	e7ee      	b.n	694c <_malloc_r+0x74>
    696e:	000c      	movs	r4, r1
    6970:	6849      	ldr	r1, [r1, #4]
    6972:	e7c2      	b.n	68fa <_malloc_r+0x22>
    6974:	2303      	movs	r3, #3
    6976:	1cc4      	adds	r4, r0, #3
    6978:	439c      	bics	r4, r3
    697a:	42a0      	cmp	r0, r4
    697c:	d0e0      	beq.n	6940 <_malloc_r+0x68>
    697e:	1a21      	subs	r1, r4, r0
    6980:	0030      	movs	r0, r6
    6982:	f000 f82d 	bl	69e0 <_sbrk_r>
    6986:	1c43      	adds	r3, r0, #1
    6988:	d1da      	bne.n	6940 <_malloc_r+0x68>
    698a:	e7c6      	b.n	691a <_malloc_r+0x42>
    698c:	20000404 	.word	0x20000404
    6990:	20000408 	.word	0x20000408

00006994 <_realloc_r>:
    6994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6996:	0007      	movs	r7, r0
    6998:	000d      	movs	r5, r1
    699a:	0016      	movs	r6, r2
    699c:	2900      	cmp	r1, #0
    699e:	d105      	bne.n	69ac <_realloc_r+0x18>
    69a0:	0011      	movs	r1, r2
    69a2:	f7ff ff99 	bl	68d8 <_malloc_r>
    69a6:	0004      	movs	r4, r0
    69a8:	0020      	movs	r0, r4
    69aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    69ac:	2a00      	cmp	r2, #0
    69ae:	d103      	bne.n	69b8 <_realloc_r+0x24>
    69b0:	f7ff ff48 	bl	6844 <_free_r>
    69b4:	0034      	movs	r4, r6
    69b6:	e7f7      	b.n	69a8 <_realloc_r+0x14>
    69b8:	f000 f826 	bl	6a08 <_malloc_usable_size_r>
    69bc:	002c      	movs	r4, r5
    69be:	4286      	cmp	r6, r0
    69c0:	d9f2      	bls.n	69a8 <_realloc_r+0x14>
    69c2:	0031      	movs	r1, r6
    69c4:	0038      	movs	r0, r7
    69c6:	f7ff ff87 	bl	68d8 <_malloc_r>
    69ca:	1e04      	subs	r4, r0, #0
    69cc:	d0ec      	beq.n	69a8 <_realloc_r+0x14>
    69ce:	0029      	movs	r1, r5
    69d0:	0032      	movs	r2, r6
    69d2:	f7ff fbf7 	bl	61c4 <memcpy>
    69d6:	0029      	movs	r1, r5
    69d8:	0038      	movs	r0, r7
    69da:	f7ff ff33 	bl	6844 <_free_r>
    69de:	e7e3      	b.n	69a8 <_realloc_r+0x14>

000069e0 <_sbrk_r>:
    69e0:	2300      	movs	r3, #0
    69e2:	b570      	push	{r4, r5, r6, lr}
    69e4:	4c06      	ldr	r4, [pc, #24]	; (6a00 <_sbrk_r+0x20>)
    69e6:	0005      	movs	r5, r0
    69e8:	0008      	movs	r0, r1
    69ea:	6023      	str	r3, [r4, #0]
    69ec:	f7fd fe0a 	bl	4604 <_sbrk>
    69f0:	1c43      	adds	r3, r0, #1
    69f2:	d103      	bne.n	69fc <_sbrk_r+0x1c>
    69f4:	6823      	ldr	r3, [r4, #0]
    69f6:	2b00      	cmp	r3, #0
    69f8:	d000      	beq.n	69fc <_sbrk_r+0x1c>
    69fa:	602b      	str	r3, [r5, #0]
    69fc:	bd70      	pop	{r4, r5, r6, pc}
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	20000934 	.word	0x20000934

00006a04 <__malloc_lock>:
    6a04:	4770      	bx	lr

00006a06 <__malloc_unlock>:
    6a06:	4770      	bx	lr

00006a08 <_malloc_usable_size_r>:
    6a08:	1f0b      	subs	r3, r1, #4
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	1f18      	subs	r0, r3, #4
    6a0e:	2b00      	cmp	r3, #0
    6a10:	da01      	bge.n	6a16 <_malloc_usable_size_r+0xe>
    6a12:	580b      	ldr	r3, [r1, r0]
    6a14:	18c0      	adds	r0, r0, r3
    6a16:	4770      	bx	lr
    6a18:	00000180 	.word	0x00000180
    6a1c:	00000184 	.word	0x00000184
    6a20:	00000164 	.word	0x00000164
    6a24:	00000188 	.word	0x00000188
    6a28:	00000168 	.word	0x00000168
    6a2c:	0000016c 	.word	0x0000016c
    6a30:	00000170 	.word	0x00000170
    6a34:	00000174 	.word	0x00000174
    6a38:	00000178 	.word	0x00000178
    6a3c:	0000017c 	.word	0x0000017c
    6a40:	776f7247 	.word	0x776f7247
    6a44:	20786f62 	.word	0x20786f62
    6a48:	302e3156 	.word	0x302e3156
    6a4c:	0000000a 	.word	0x0000000a
    6a50:	706d6554 	.word	0x706d6554
    6a54:	0000203a 	.word	0x0000203a
    6a58:	00006425 	.word	0x00006425
    6a5c:	000a4320 	.word	0x000a4320
    6a60:	203a4852 	.word	0x203a4852
    6a64:	00000000 	.word	0x00000000
    6a68:	000a2520 	.word	0x000a2520
    6a6c:	00001362 	.word	0x00001362
    6a70:	000012bc 	.word	0x000012bc
    6a74:	000012bc 	.word	0x000012bc
    6a78:	000012bc 	.word	0x000012bc
    6a7c:	0000136c 	.word	0x0000136c
    6a80:	000012bc 	.word	0x000012bc
    6a84:	000012bc 	.word	0x000012bc
    6a88:	000012bc 	.word	0x000012bc
    6a8c:	000012bc 	.word	0x000012bc
    6a90:	000012bc 	.word	0x000012bc
    6a94:	000012bc 	.word	0x000012bc
    6a98:	000012bc 	.word	0x000012bc
    6a9c:	000012bc 	.word	0x000012bc
    6aa0:	000012bc 	.word	0x000012bc
    6aa4:	000012bc 	.word	0x000012bc
    6aa8:	000012bc 	.word	0x000012bc
    6aac:	000012bc 	.word	0x000012bc
    6ab0:	000012bc 	.word	0x000012bc
    6ab4:	000012bc 	.word	0x000012bc
    6ab8:	000013bc 	.word	0x000013bc
    6abc:	000012bc 	.word	0x000012bc
    6ac0:	0000134e 	.word	0x0000134e
    6ac4:	000012bc 	.word	0x000012bc
    6ac8:	000012bc 	.word	0x000012bc
    6acc:	000012d8 	.word	0x000012d8
    6ad0:	000012bc 	.word	0x000012bc
    6ad4:	000012bc 	.word	0x000012bc
    6ad8:	000012bc 	.word	0x000012bc
    6adc:	000012ac 	.word	0x000012ac
    6ae0:	000012bc 	.word	0x000012bc
    6ae4:	000012bc 	.word	0x000012bc
    6ae8:	000012bc 	.word	0x000012bc
    6aec:	000012bc 	.word	0x000012bc
    6af0:	000012bc 	.word	0x000012bc
    6af4:	000012ec 	.word	0x000012ec
    6af8:	000012bc 	.word	0x000012bc
    6afc:	000012c4 	.word	0x000012c4
    6b00:	000012bc 	.word	0x000012bc
    6b04:	000012bc 	.word	0x000012bc
    6b08:	00001318 	.word	0x00001318
    6b0c:	00002004 	.word	0x00002004
    6b10:	00002004 	.word	0x00002004
    6b14:	00001fe0 	.word	0x00001fe0
    6b18:	00002004 	.word	0x00002004
    6b1c:	00001fe0 	.word	0x00001fe0
    6b20:	00001fc6 	.word	0x00001fc6
    6b24:	00001fc6 	.word	0x00001fc6
    6b28:	00002004 	.word	0x00002004
    6b2c:	00002004 	.word	0x00002004
    6b30:	00002004 	.word	0x00002004
    6b34:	00002004 	.word	0x00002004
    6b38:	00002004 	.word	0x00002004
    6b3c:	00002004 	.word	0x00002004
    6b40:	00002004 	.word	0x00002004
    6b44:	00002004 	.word	0x00002004
    6b48:	00002004 	.word	0x00002004
    6b4c:	00002004 	.word	0x00002004
    6b50:	00002004 	.word	0x00002004
    6b54:	00002004 	.word	0x00002004
    6b58:	00002004 	.word	0x00002004
    6b5c:	00002004 	.word	0x00002004
    6b60:	00002004 	.word	0x00002004
    6b64:	00002004 	.word	0x00002004
    6b68:	00002004 	.word	0x00002004
    6b6c:	00002004 	.word	0x00002004
    6b70:	00002004 	.word	0x00002004
    6b74:	00002004 	.word	0x00002004
    6b78:	00002004 	.word	0x00002004
    6b7c:	00002004 	.word	0x00002004
    6b80:	00002004 	.word	0x00002004
    6b84:	00002004 	.word	0x00002004
    6b88:	00002004 	.word	0x00002004
    6b8c:	00002004 	.word	0x00002004
    6b90:	00002004 	.word	0x00002004
    6b94:	00002004 	.word	0x00002004
    6b98:	00002004 	.word	0x00002004
    6b9c:	00002004 	.word	0x00002004
    6ba0:	00002004 	.word	0x00002004
    6ba4:	00002004 	.word	0x00002004
    6ba8:	00002004 	.word	0x00002004
    6bac:	00002004 	.word	0x00002004
    6bb0:	00002004 	.word	0x00002004
    6bb4:	00002004 	.word	0x00002004
    6bb8:	00002004 	.word	0x00002004
    6bbc:	00002004 	.word	0x00002004
    6bc0:	00002004 	.word	0x00002004
    6bc4:	00002004 	.word	0x00002004
    6bc8:	00002004 	.word	0x00002004
    6bcc:	00002004 	.word	0x00002004
    6bd0:	00002004 	.word	0x00002004
    6bd4:	00002004 	.word	0x00002004
    6bd8:	00002004 	.word	0x00002004
    6bdc:	00002004 	.word	0x00002004
    6be0:	00002004 	.word	0x00002004
    6be4:	00002004 	.word	0x00002004
    6be8:	00002004 	.word	0x00002004
    6bec:	00002004 	.word	0x00002004
    6bf0:	00002004 	.word	0x00002004
    6bf4:	00002004 	.word	0x00002004
    6bf8:	00002004 	.word	0x00002004
    6bfc:	00002004 	.word	0x00002004
    6c00:	00002004 	.word	0x00002004
    6c04:	00002004 	.word	0x00002004
    6c08:	00002004 	.word	0x00002004
    6c0c:	00001fe0 	.word	0x00001fe0
    6c10:	00001fe0 	.word	0x00001fe0
    6c14:	00001fe8 	.word	0x00001fe8
    6c18:	00001fe8 	.word	0x00001fe8
    6c1c:	00001fe8 	.word	0x00001fe8
    6c20:	00001fe8 	.word	0x00001fe8
    6c24:	000023cc 	.word	0x000023cc
    6c28:	000023ac 	.word	0x000023ac
    6c2c:	000023ac 	.word	0x000023ac
    6c30:	00002438 	.word	0x00002438
    6c34:	000023be 	.word	0x000023be
    6c38:	000023da 	.word	0x000023da
    6c3c:	000023b0 	.word	0x000023b0
    6c40:	000023e8 	.word	0x000023e8
    6c44:	00002428 	.word	0x00002428
    6c48:	00003924 	.word	0x00003924
    6c4c:	00003932 	.word	0x00003932
    6c50:	000039cc 	.word	0x000039cc
    6c54:	00003a6c 	.word	0x00003a6c
    6c58:	00003ad0 	.word	0x00003ad0

00006c5c <_usb_device_irq_bits>:
    6c5c:	00080004 00800070 01000001 00000200     ....p...........

00006c6c <_usb_endpoint_irq_bits>:
    6c6c:	60100c03 000050f4 000050d6 00005090     ...`.P...P...P..
    6c7c:	00004fae 00005090 000050c8 00005090     .O...P...P...P..
    6c8c:	00004fae 000050d6 000050d6 000050c8     .O...P...P...P..
    6c9c:	00004fae 00004fa6 00004fa6 00004fa6     .O...O...O...O..
    6cac:	0000530c 00005754 00005614 00005614     .S..TW...V...V..
    6cbc:	00005610 0000572c 0000572c 0000571e     .V..,W..,W...W..
    6ccc:	00005610 0000572c 0000571e 0000572c     .V..,W...W..,W..
    6cdc:	00005610 00005734 00005734 00005734     .V..4W..4W..4W..
    6cec:	00005938 2b302d23 6c680020 6665004c     8Y..#-0+ .hlL.ef
    6cfc:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    6d0c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    6d1c:	64636261 00006665                       abcdef..

00006d24 <_init>:
    6d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d26:	46c0      	nop			; (mov r8, r8)
    6d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d2a:	bc08      	pop	{r3}
    6d2c:	469e      	mov	lr, r3
    6d2e:	4770      	bx	lr

00006d30 <__init_array_start>:
    6d30:	000000dd 	.word	0x000000dd

00006d34 <_fini>:
    6d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d36:	46c0      	nop			; (mov r8, r8)
    6d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d3a:	bc08      	pop	{r3}
    6d3c:	469e      	mov	lr, r3
    6d3e:	4770      	bx	lr

00006d40 <__fini_array_start>:
    6d40:	000000b5 	.word	0x000000b5
